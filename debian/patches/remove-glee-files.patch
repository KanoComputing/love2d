--- /dev/null
+++ love-0.9.1/src/modules/graphics/glee/GLee.c
@@ -0,0 +1,23090 @@
+/***************************************************************************
+*
+* GLee.c
+* GLee (OpenGL Easy Extension library)        
+* Version : 5.5
+*
+* Copyright (c)2011  Ben Woodhouse  All rights reserved.
+*
+* Redistribution and use in source and binary forms, with or without
+* modification, are permitted provided that the following conditions are 
+* met:
+* 1. Redistributions of source code must retain the above copyright
+* notice, this list of conditions and the following disclaimer as
+* the first lines of this file unmodified.
+* 2. Redistributions in binary form must reproduce the above copyright
+* notice, this list of conditions and the following disclaimer in the
+* documentation and/or other materials provided with the distribution.
+*
+* THIS SOFTWARE IS PROVIDED BY BEN WOODHOUSE ``AS IS'' AND ANY EXPRESS OR
+* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+* IN NO EVENT SHALL BEN WOODHOUSE BE LIABLE FOR ANY DIRECT, INDIRECT,
+* INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
+* NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+* DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+* THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+* THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+
+* Web: http://elf-stone.com/glee.php
+*
+* [This file was automatically generated by GLeeGen 7.0
+*
+***************************************************************************/
+
+#ifdef _MSC_VER
+	#pragma optimize( "g", off )
+#endif
+
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <GL/GLee.h>
+
+#if defined(__APPLE__) || defined(__APPLE_CC__)
+	#include <Carbon/Carbon.h>
+#endif
+
+typedef GLuint(*GLEE_LINK_FUNCTION)(void);
+
+GLboolean __GLeeInited=GL_FALSE;
+
+#ifndef _WIN32
+	#define __stdcall  /* nothing */
+#endif 
+
+#ifdef _MSC_VER
+    #define snprintf sprintf_s
+    #define strdup _strdup
+#endif
+
+GLEE_FUNC __GLeeGetProcAddress(const char *extname)
+{
+#ifdef _WIN32
+    return (GLEE_FUNC)wglGetProcAddress(extname);
+#elif defined(__APPLE__) || defined(__APPLE_CC__)
+    CFBundleRef bundle;
+    CFURLRef bundleURL = CFURLCreateWithFileSystemPath(kCFAllocatorDefault, CFSTR("/System/Library/Frameworks/OpenGL.framework"), kCFURLPOSIXPathStyle, true);
+
+    CFStringRef functionName = CFStringCreateWithCString(kCFAllocatorDefault, extname, kCFStringEncodingASCII);
+
+    GLEE_FUNC function;
+
+    bundle = CFBundleCreate(kCFAllocatorDefault, bundleURL);
+    assert(bundle != NULL);
+
+    function = CFBundleGetFunctionPointerForName(bundle, functionName);
+
+    CFRelease(bundleURL);
+    CFRelease(functionName);
+    CFRelease(bundle);
+
+    return function;
+#else
+    return (GLEE_FUNC)glXGetProcAddressARB((const GLubyte *)extname);
+#endif
+}
+
+
+
+
+/* Extension querying variables */
+
+GLboolean _GLEE_VERSION_1_2 = GL_FALSE;
+GLboolean _GLEE_ARB_imaging = GL_FALSE;
+GLboolean _GLEE_VERSION_1_3 = GL_FALSE;
+GLboolean _GLEE_VERSION_1_4 = GL_FALSE;
+GLboolean _GLEE_VERSION_1_5 = GL_FALSE;
+GLboolean _GLEE_VERSION_2_0 = GL_FALSE;
+GLboolean _GLEE_VERSION_2_1 = GL_FALSE;
+GLboolean _GLEE_VERSION_3_0 = GL_FALSE;
+GLboolean _GLEE_VERSION_3_1 = GL_FALSE;
+GLboolean _GLEE_VERSION_3_2 = GL_FALSE;
+GLboolean _GLEE_VERSION_3_3 = GL_FALSE;
+GLboolean _GLEE_VERSION_4_0 = GL_FALSE;
+GLboolean _GLEE_VERSION_4_1 = GL_FALSE;
+GLboolean _GLEE_VERSION_4_2 = GL_FALSE;
+GLboolean _GLEE_ARB_multitexture = GL_FALSE;
+GLboolean _GLEE_ARB_transpose_matrix = GL_FALSE;
+GLboolean _GLEE_ARB_multisample = GL_FALSE;
+GLboolean _GLEE_ARB_texture_env_add = GL_FALSE;
+GLboolean _GLEE_ARB_texture_cube_map = GL_FALSE;
+GLboolean _GLEE_ARB_texture_compression = GL_FALSE;
+GLboolean _GLEE_ARB_texture_border_clamp = GL_FALSE;
+GLboolean _GLEE_ARB_point_parameters = GL_FALSE;
+GLboolean _GLEE_ARB_vertex_blend = GL_FALSE;
+GLboolean _GLEE_ARB_matrix_palette = GL_FALSE;
+GLboolean _GLEE_ARB_texture_env_combine = GL_FALSE;
+GLboolean _GLEE_ARB_texture_env_crossbar = GL_FALSE;
+GLboolean _GLEE_ARB_texture_env_dot3 = GL_FALSE;
+GLboolean _GLEE_ARB_texture_mirrored_repeat = GL_FALSE;
+GLboolean _GLEE_ARB_depth_texture = GL_FALSE;
+GLboolean _GLEE_ARB_shadow = GL_FALSE;
+GLboolean _GLEE_ARB_shadow_ambient = GL_FALSE;
+GLboolean _GLEE_ARB_window_pos = GL_FALSE;
+GLboolean _GLEE_ARB_vertex_program = GL_FALSE;
+GLboolean _GLEE_ARB_fragment_program = GL_FALSE;
+GLboolean _GLEE_ARB_vertex_buffer_object = GL_FALSE;
+GLboolean _GLEE_ARB_occlusion_query = GL_FALSE;
+GLboolean _GLEE_ARB_shader_objects = GL_FALSE;
+GLboolean _GLEE_ARB_vertex_shader = GL_FALSE;
+GLboolean _GLEE_ARB_fragment_shader = GL_FALSE;
+GLboolean _GLEE_ARB_shading_language_100 = GL_FALSE;
+GLboolean _GLEE_ARB_texture_non_power_of_two = GL_FALSE;
+GLboolean _GLEE_ARB_point_sprite = GL_FALSE;
+GLboolean _GLEE_ARB_fragment_program_shadow = GL_FALSE;
+GLboolean _GLEE_ARB_draw_buffers = GL_FALSE;
+GLboolean _GLEE_ARB_texture_rectangle = GL_FALSE;
+GLboolean _GLEE_ARB_color_buffer_float = GL_FALSE;
+GLboolean _GLEE_ARB_half_float_pixel = GL_FALSE;
+GLboolean _GLEE_ARB_texture_float = GL_FALSE;
+GLboolean _GLEE_ARB_pixel_buffer_object = GL_FALSE;
+GLboolean _GLEE_ARB_depth_buffer_float = GL_FALSE;
+GLboolean _GLEE_ARB_draw_instanced = GL_FALSE;
+GLboolean _GLEE_ARB_framebuffer_object = GL_FALSE;
+GLboolean _GLEE_ARB_framebuffer_sRGB = GL_FALSE;
+GLboolean _GLEE_ARB_geometry_shader4 = GL_FALSE;
+GLboolean _GLEE_ARB_half_float_vertex = GL_FALSE;
+GLboolean _GLEE_ARB_instanced_arrays = GL_FALSE;
+GLboolean _GLEE_ARB_map_buffer_range = GL_FALSE;
+GLboolean _GLEE_ARB_texture_buffer_object = GL_FALSE;
+GLboolean _GLEE_ARB_texture_compression_rgtc = GL_FALSE;
+GLboolean _GLEE_ARB_texture_rg = GL_FALSE;
+GLboolean _GLEE_ARB_vertex_array_object = GL_FALSE;
+GLboolean _GLEE_ARB_uniform_buffer_object = GL_FALSE;
+GLboolean _GLEE_ARB_compatibility = GL_FALSE;
+GLboolean _GLEE_ARB_copy_buffer = GL_FALSE;
+GLboolean _GLEE_ARB_shader_texture_lod = GL_FALSE;
+GLboolean _GLEE_ARB_depth_clamp = GL_FALSE;
+GLboolean _GLEE_ARB_draw_elements_base_vertex = GL_FALSE;
+GLboolean _GLEE_ARB_fragment_coord_conventions = GL_FALSE;
+GLboolean _GLEE_ARB_provoking_vertex = GL_FALSE;
+GLboolean _GLEE_ARB_seamless_cube_map = GL_FALSE;
+GLboolean _GLEE_ARB_sync = GL_FALSE;
+GLboolean _GLEE_ARB_texture_multisample = GL_FALSE;
+GLboolean _GLEE_ARB_vertex_array_bgra = GL_FALSE;
+GLboolean _GLEE_ARB_draw_buffers_blend = GL_FALSE;
+GLboolean _GLEE_ARB_sample_shading = GL_FALSE;
+GLboolean _GLEE_ARB_texture_cube_map_array = GL_FALSE;
+GLboolean _GLEE_ARB_texture_gather = GL_FALSE;
+GLboolean _GLEE_ARB_texture_query_lod = GL_FALSE;
+GLboolean _GLEE_ARB_shading_language_include = GL_FALSE;
+GLboolean _GLEE_ARB_texture_compression_bptc = GL_FALSE;
+GLboolean _GLEE_ARB_blend_func_extended = GL_FALSE;
+GLboolean _GLEE_ARB_explicit_attrib_location = GL_FALSE;
+GLboolean _GLEE_ARB_occlusion_query2 = GL_FALSE;
+GLboolean _GLEE_ARB_sampler_objects = GL_FALSE;
+GLboolean _GLEE_ARB_shader_bit_encoding = GL_FALSE;
+GLboolean _GLEE_ARB_texture_rgb10_a2ui = GL_FALSE;
+GLboolean _GLEE_ARB_texture_swizzle = GL_FALSE;
+GLboolean _GLEE_ARB_timer_query = GL_FALSE;
+GLboolean _GLEE_ARB_vertex_type_2_10_10_10_rev = GL_FALSE;
+GLboolean _GLEE_ARB_draw_indirect = GL_FALSE;
+GLboolean _GLEE_ARB_gpu_shader5 = GL_FALSE;
+GLboolean _GLEE_ARB_gpu_shader_fp64 = GL_FALSE;
+GLboolean _GLEE_ARB_shader_subroutine = GL_FALSE;
+GLboolean _GLEE_ARB_tessellation_shader = GL_FALSE;
+GLboolean _GLEE_ARB_texture_buffer_object_rgb32 = GL_FALSE;
+GLboolean _GLEE_ARB_transform_feedback2 = GL_FALSE;
+GLboolean _GLEE_ARB_transform_feedback3 = GL_FALSE;
+GLboolean _GLEE_ARB_ES2_compatibility = GL_FALSE;
+GLboolean _GLEE_ARB_get_program_binary = GL_FALSE;
+GLboolean _GLEE_ARB_separate_shader_objects = GL_FALSE;
+GLboolean _GLEE_ARB_shader_precision = GL_FALSE;
+GLboolean _GLEE_ARB_vertex_attrib_64bit = GL_FALSE;
+GLboolean _GLEE_ARB_viewport_array = GL_FALSE;
+GLboolean _GLEE_ARB_cl_event = GL_FALSE;
+GLboolean _GLEE_ARB_robustness = GL_FALSE;
+GLboolean _GLEE_ARB_shader_stencil_export = GL_FALSE;
+GLboolean _GLEE_ARB_base_instance = GL_FALSE;
+GLboolean _GLEE_ARB_shading_language_420pack = GL_FALSE;
+GLboolean _GLEE_ARB_transform_feedback_instanced = GL_FALSE;
+GLboolean _GLEE_ARB_compressed_texture_pixel_storage = GL_FALSE;
+GLboolean _GLEE_ARB_conservative_depth = GL_FALSE;
+GLboolean _GLEE_ARB_internalformat_query = GL_FALSE;
+GLboolean _GLEE_ARB_map_buffer_alignment = GL_FALSE;
+GLboolean _GLEE_ARB_shader_atomic_counters = GL_FALSE;
+GLboolean _GLEE_ARB_shader_image_load_store = GL_FALSE;
+GLboolean _GLEE_ARB_shading_language_packing = GL_FALSE;
+GLboolean _GLEE_ARB_texture_storage = GL_FALSE;
+GLboolean _GLEE_EXT_abgr = GL_FALSE;
+GLboolean _GLEE_EXT_blend_color = GL_FALSE;
+GLboolean _GLEE_EXT_polygon_offset = GL_FALSE;
+GLboolean _GLEE_EXT_texture = GL_FALSE;
+GLboolean _GLEE_EXT_texture3D = GL_FALSE;
+GLboolean _GLEE_SGIS_texture_filter4 = GL_FALSE;
+GLboolean _GLEE_EXT_subtexture = GL_FALSE;
+GLboolean _GLEE_EXT_copy_texture = GL_FALSE;
+GLboolean _GLEE_EXT_histogram = GL_FALSE;
+GLboolean _GLEE_EXT_convolution = GL_FALSE;
+GLboolean _GLEE_SGI_color_matrix = GL_FALSE;
+GLboolean _GLEE_SGI_color_table = GL_FALSE;
+GLboolean _GLEE_SGIS_pixel_texture = GL_FALSE;
+GLboolean _GLEE_SGIX_pixel_texture = GL_FALSE;
+GLboolean _GLEE_SGIS_texture4D = GL_FALSE;
+GLboolean _GLEE_SGI_texture_color_table = GL_FALSE;
+GLboolean _GLEE_EXT_cmyka = GL_FALSE;
+GLboolean _GLEE_EXT_texture_object = GL_FALSE;
+GLboolean _GLEE_SGIS_detail_texture = GL_FALSE;
+GLboolean _GLEE_SGIS_sharpen_texture = GL_FALSE;
+GLboolean _GLEE_EXT_packed_pixels = GL_FALSE;
+GLboolean _GLEE_SGIS_texture_lod = GL_FALSE;
+GLboolean _GLEE_SGIS_multisample = GL_FALSE;
+GLboolean _GLEE_EXT_rescale_normal = GL_FALSE;
+GLboolean _GLEE_EXT_vertex_array = GL_FALSE;
+GLboolean _GLEE_EXT_misc_attribute = GL_FALSE;
+GLboolean _GLEE_SGIS_generate_mipmap = GL_FALSE;
+GLboolean _GLEE_SGIX_clipmap = GL_FALSE;
+GLboolean _GLEE_SGIX_shadow = GL_FALSE;
+GLboolean _GLEE_SGIS_texture_edge_clamp = GL_FALSE;
+GLboolean _GLEE_SGIS_texture_border_clamp = GL_FALSE;
+GLboolean _GLEE_EXT_blend_minmax = GL_FALSE;
+GLboolean _GLEE_EXT_blend_subtract = GL_FALSE;
+GLboolean _GLEE_EXT_blend_logic_op = GL_FALSE;
+GLboolean _GLEE_SGIX_interlace = GL_FALSE;
+GLboolean _GLEE_SGIX_pixel_tiles = GL_FALSE;
+GLboolean _GLEE_SGIS_texture_select = GL_FALSE;
+GLboolean _GLEE_SGIX_sprite = GL_FALSE;
+GLboolean _GLEE_SGIX_texture_multi_buffer = GL_FALSE;
+GLboolean _GLEE_EXT_point_parameters = GL_FALSE;
+GLboolean _GLEE_SGIS_point_parameters = GL_FALSE;
+GLboolean _GLEE_SGIX_instruments = GL_FALSE;
+GLboolean _GLEE_SGIX_texture_scale_bias = GL_FALSE;
+GLboolean _GLEE_SGIX_framezoom = GL_FALSE;
+GLboolean _GLEE_SGIX_tag_sample_buffer = GL_FALSE;
+GLboolean _GLEE_FfdMaskSGIX = GL_FALSE;
+GLboolean _GLEE_SGIX_polynomial_ffd = GL_FALSE;
+GLboolean _GLEE_SGIX_reference_plane = GL_FALSE;
+GLboolean _GLEE_SGIX_flush_raster = GL_FALSE;
+GLboolean _GLEE_SGIX_depth_texture = GL_FALSE;
+GLboolean _GLEE_SGIS_fog_function = GL_FALSE;
+GLboolean _GLEE_SGIX_fog_offset = GL_FALSE;
+GLboolean _GLEE_HP_image_transform = GL_FALSE;
+GLboolean _GLEE_HP_convolution_border_modes = GL_FALSE;
+GLboolean _GLEE_INGR_palette_buffer = GL_FALSE;
+GLboolean _GLEE_SGIX_texture_add_env = GL_FALSE;
+GLboolean _GLEE_EXT_color_subtable = GL_FALSE;
+GLboolean _GLEE_PGI_vertex_hints = GL_FALSE;
+GLboolean _GLEE_PGI_misc_hints = GL_FALSE;
+GLboolean _GLEE_EXT_paletted_texture = GL_FALSE;
+GLboolean _GLEE_EXT_clip_volume_hint = GL_FALSE;
+GLboolean _GLEE_SGIX_list_priority = GL_FALSE;
+GLboolean _GLEE_SGIX_ir_instrument1 = GL_FALSE;
+GLboolean _GLEE_SGIX_calligraphic_fragment = GL_FALSE;
+GLboolean _GLEE_SGIX_texture_lod_bias = GL_FALSE;
+GLboolean _GLEE_SGIX_shadow_ambient = GL_FALSE;
+GLboolean _GLEE_EXT_index_texture = GL_FALSE;
+GLboolean _GLEE_EXT_index_material = GL_FALSE;
+GLboolean _GLEE_EXT_index_func = GL_FALSE;
+GLboolean _GLEE_EXT_index_array_formats = GL_FALSE;
+GLboolean _GLEE_EXT_compiled_vertex_array = GL_FALSE;
+GLboolean _GLEE_EXT_cull_vertex = GL_FALSE;
+GLboolean _GLEE_SGIX_ycrcb = GL_FALSE;
+GLboolean _GLEE_SGIX_fragment_lighting = GL_FALSE;
+GLboolean _GLEE_IBM_rasterpos_clip = GL_FALSE;
+GLboolean _GLEE_HP_texture_lighting = GL_FALSE;
+GLboolean _GLEE_EXT_draw_range_elements = GL_FALSE;
+GLboolean _GLEE_WIN_phong_shading = GL_FALSE;
+GLboolean _GLEE_WIN_specular_fog = GL_FALSE;
+GLboolean _GLEE_EXT_light_texture = GL_FALSE;
+GLboolean _GLEE_SGIX_blend_alpha_minmax = GL_FALSE;
+GLboolean _GLEE_SGIX_impact_pixel_texture = GL_FALSE;
+GLboolean _GLEE_EXT_bgra = GL_FALSE;
+GLboolean _GLEE_SGIX_async = GL_FALSE;
+GLboolean _GLEE_SGIX_async_pixel = GL_FALSE;
+GLboolean _GLEE_SGIX_async_histogram = GL_FALSE;
+GLboolean _GLEE_INTEL_texture_scissor = GL_FALSE;
+GLboolean _GLEE_INTEL_parallel_arrays = GL_FALSE;
+GLboolean _GLEE_HP_occlusion_test = GL_FALSE;
+GLboolean _GLEE_EXT_pixel_transform = GL_FALSE;
+GLboolean _GLEE_EXT_pixel_transform_color_table = GL_FALSE;
+GLboolean _GLEE_EXT_shared_texture_palette = GL_FALSE;
+GLboolean _GLEE_EXT_separate_specular_color = GL_FALSE;
+GLboolean _GLEE_EXT_secondary_color = GL_FALSE;
+GLboolean _GLEE_EXT_texture_perturb_normal = GL_FALSE;
+GLboolean _GLEE_EXT_multi_draw_arrays = GL_FALSE;
+GLboolean _GLEE_EXT_fog_coord = GL_FALSE;
+GLboolean _GLEE_REND_screen_coordinates = GL_FALSE;
+GLboolean _GLEE_EXT_coordinate_frame = GL_FALSE;
+GLboolean _GLEE_EXT_texture_env_combine = GL_FALSE;
+GLboolean _GLEE_APPLE_specular_vector = GL_FALSE;
+GLboolean _GLEE_APPLE_transform_hint = GL_FALSE;
+GLboolean _GLEE_SGIX_fog_scale = GL_FALSE;
+GLboolean _GLEE_SUNX_constant_data = GL_FALSE;
+GLboolean _GLEE_SUN_global_alpha = GL_FALSE;
+GLboolean _GLEE_SUN_triangle_list = GL_FALSE;
+GLboolean _GLEE_SUN_vertex = GL_FALSE;
+GLboolean _GLEE_EXT_blend_func_separate = GL_FALSE;
+GLboolean _GLEE_INGR_color_clamp = GL_FALSE;
+GLboolean _GLEE_INGR_interlace_read = GL_FALSE;
+GLboolean _GLEE_EXT_stencil_wrap = GL_FALSE;
+GLboolean _GLEE_EXT_422_pixels = GL_FALSE;
+GLboolean _GLEE_NV_texgen_reflection = GL_FALSE;
+GLboolean _GLEE_EXT_texture_cube_map = GL_FALSE;
+GLboolean _GLEE_SUN_convolution_border_modes = GL_FALSE;
+GLboolean _GLEE_EXT_texture_env_add = GL_FALSE;
+GLboolean _GLEE_EXT_texture_lod_bias = GL_FALSE;
+GLboolean _GLEE_EXT_texture_filter_anisotropic = GL_FALSE;
+GLboolean _GLEE_EXT_vertex_weighting = GL_FALSE;
+GLboolean _GLEE_NV_light_max_exponent = GL_FALSE;
+GLboolean _GLEE_NV_vertex_array_range = GL_FALSE;
+GLboolean _GLEE_NV_register_combiners = GL_FALSE;
+GLboolean _GLEE_NV_fog_distance = GL_FALSE;
+GLboolean _GLEE_NV_texgen_emboss = GL_FALSE;
+GLboolean _GLEE_NV_blend_square = GL_FALSE;
+GLboolean _GLEE_NV_texture_env_combine4 = GL_FALSE;
+GLboolean _GLEE_MESA_resize_buffers = GL_FALSE;
+GLboolean _GLEE_MESA_window_pos = GL_FALSE;
+GLboolean _GLEE_EXT_texture_compression_s3tc = GL_FALSE;
+GLboolean _GLEE_IBM_cull_vertex = GL_FALSE;
+GLboolean _GLEE_IBM_multimode_draw_arrays = GL_FALSE;
+GLboolean _GLEE_IBM_vertex_array_lists = GL_FALSE;
+GLboolean _GLEE_SGIX_subsample = GL_FALSE;
+GLboolean _GLEE_SGIX_ycrcb_subsample = GL_FALSE;
+GLboolean _GLEE_SGIX_ycrcba = GL_FALSE;
+GLboolean _GLEE_SGI_depth_pass_instrument = GL_FALSE;
+GLboolean _GLEE_3DFX_texture_compression_FXT1 = GL_FALSE;
+GLboolean _GLEE_3DFX_multisample = GL_FALSE;
+GLboolean _GLEE_3DFX_tbuffer = GL_FALSE;
+GLboolean _GLEE_EXT_multisample = GL_FALSE;
+GLboolean _GLEE_SGIX_vertex_preclip = GL_FALSE;
+GLboolean _GLEE_SGIX_convolution_accuracy = GL_FALSE;
+GLboolean _GLEE_SGIX_resample = GL_FALSE;
+GLboolean _GLEE_SGIS_point_line_texgen = GL_FALSE;
+GLboolean _GLEE_SGIS_texture_color_mask = GL_FALSE;
+GLboolean _GLEE_EXT_texture_env_dot3 = GL_FALSE;
+GLboolean _GLEE_ATI_texture_mirror_once = GL_FALSE;
+GLboolean _GLEE_NV_fence = GL_FALSE;
+GLboolean _GLEE_IBM_texture_mirrored_repeat = GL_FALSE;
+GLboolean _GLEE_NV_evaluators = GL_FALSE;
+GLboolean _GLEE_NV_packed_depth_stencil = GL_FALSE;
+GLboolean _GLEE_NV_register_combiners2 = GL_FALSE;
+GLboolean _GLEE_NV_texture_compression_vtc = GL_FALSE;
+GLboolean _GLEE_NV_texture_rectangle = GL_FALSE;
+GLboolean _GLEE_NV_texture_shader = GL_FALSE;
+GLboolean _GLEE_NV_texture_shader2 = GL_FALSE;
+GLboolean _GLEE_NV_vertex_array_range2 = GL_FALSE;
+GLboolean _GLEE_NV_vertex_program = GL_FALSE;
+GLboolean _GLEE_SGIX_texture_coordinate_clamp = GL_FALSE;
+GLboolean _GLEE_SGIX_scalebias_hint = GL_FALSE;
+GLboolean _GLEE_OML_interlace = GL_FALSE;
+GLboolean _GLEE_OML_subsample = GL_FALSE;
+GLboolean _GLEE_OML_resample = GL_FALSE;
+GLboolean _GLEE_NV_copy_depth_to_color = GL_FALSE;
+GLboolean _GLEE_ATI_envmap_bumpmap = GL_FALSE;
+GLboolean _GLEE_ATI_fragment_shader = GL_FALSE;
+GLboolean _GLEE_ATI_pn_triangles = GL_FALSE;
+GLboolean _GLEE_ATI_vertex_array_object = GL_FALSE;
+GLboolean _GLEE_EXT_vertex_shader = GL_FALSE;
+GLboolean _GLEE_ATI_vertex_streams = GL_FALSE;
+GLboolean _GLEE_ATI_element_array = GL_FALSE;
+GLboolean _GLEE_SUN_mesh_array = GL_FALSE;
+GLboolean _GLEE_SUN_slice_accum = GL_FALSE;
+GLboolean _GLEE_NV_multisample_filter_hint = GL_FALSE;
+GLboolean _GLEE_NV_depth_clamp = GL_FALSE;
+GLboolean _GLEE_NV_occlusion_query = GL_FALSE;
+GLboolean _GLEE_NV_point_sprite = GL_FALSE;
+GLboolean _GLEE_NV_texture_shader3 = GL_FALSE;
+GLboolean _GLEE_NV_vertex_program1_1 = GL_FALSE;
+GLboolean _GLEE_EXT_shadow_funcs = GL_FALSE;
+GLboolean _GLEE_EXT_stencil_two_side = GL_FALSE;
+GLboolean _GLEE_ATI_text_fragment_shader = GL_FALSE;
+GLboolean _GLEE_APPLE_client_storage = GL_FALSE;
+GLboolean _GLEE_APPLE_element_array = GL_FALSE;
+GLboolean _GLEE_APPLE_fence = GL_FALSE;
+GLboolean _GLEE_APPLE_vertex_array_object = GL_FALSE;
+GLboolean _GLEE_APPLE_vertex_array_range = GL_FALSE;
+GLboolean _GLEE_APPLE_ycbcr_422 = GL_FALSE;
+GLboolean _GLEE_S3_s3tc = GL_FALSE;
+GLboolean _GLEE_ATI_draw_buffers = GL_FALSE;
+GLboolean _GLEE_ATI_pixel_format_float = GL_FALSE;
+GLboolean _GLEE_ATI_texture_env_combine3 = GL_FALSE;
+GLboolean _GLEE_ATI_texture_float = GL_FALSE;
+GLboolean _GLEE_NV_float_buffer = GL_FALSE;
+GLboolean _GLEE_NV_fragment_program = GL_FALSE;
+GLboolean _GLEE_NV_half_float = GL_FALSE;
+GLboolean _GLEE_NV_pixel_data_range = GL_FALSE;
+GLboolean _GLEE_NV_primitive_restart = GL_FALSE;
+GLboolean _GLEE_NV_texture_expand_normal = GL_FALSE;
+GLboolean _GLEE_NV_vertex_program2 = GL_FALSE;
+GLboolean _GLEE_ATI_map_object_buffer = GL_FALSE;
+GLboolean _GLEE_ATI_separate_stencil = GL_FALSE;
+GLboolean _GLEE_ATI_vertex_attrib_array_object = GL_FALSE;
+GLboolean _GLEE_OES_read_format = GL_FALSE;
+GLboolean _GLEE_EXT_depth_bounds_test = GL_FALSE;
+GLboolean _GLEE_EXT_texture_mirror_clamp = GL_FALSE;
+GLboolean _GLEE_EXT_blend_equation_separate = GL_FALSE;
+GLboolean _GLEE_MESA_pack_invert = GL_FALSE;
+GLboolean _GLEE_MESA_ycbcr_texture = GL_FALSE;
+GLboolean _GLEE_EXT_pixel_buffer_object = GL_FALSE;
+GLboolean _GLEE_NV_fragment_program_option = GL_FALSE;
+GLboolean _GLEE_NV_fragment_program2 = GL_FALSE;
+GLboolean _GLEE_NV_vertex_program2_option = GL_FALSE;
+GLboolean _GLEE_NV_vertex_program3 = GL_FALSE;
+GLboolean _GLEE_EXT_framebuffer_object = GL_FALSE;
+GLboolean _GLEE_GREMEDY_string_marker = GL_FALSE;
+GLboolean _GLEE_EXT_packed_depth_stencil = GL_FALSE;
+GLboolean _GLEE_EXT_stencil_clear_tag = GL_FALSE;
+GLboolean _GLEE_EXT_texture_sRGB = GL_FALSE;
+GLboolean _GLEE_EXT_framebuffer_blit = GL_FALSE;
+GLboolean _GLEE_EXT_framebuffer_multisample = GL_FALSE;
+GLboolean _GLEE_MESAX_texture_stack = GL_FALSE;
+GLboolean _GLEE_EXT_timer_query = GL_FALSE;
+GLboolean _GLEE_EXT_gpu_program_parameters = GL_FALSE;
+GLboolean _GLEE_APPLE_flush_buffer_range = GL_FALSE;
+GLboolean _GLEE_EXT_gpu_shader4 = GL_FALSE;
+GLboolean _GLEE_EXT_draw_instanced = GL_FALSE;
+GLboolean _GLEE_EXT_packed_float = GL_FALSE;
+GLboolean _GLEE_EXT_texture_array = GL_FALSE;
+GLboolean _GLEE_EXT_texture_buffer_object = GL_FALSE;
+GLboolean _GLEE_EXT_texture_compression_latc = GL_FALSE;
+GLboolean _GLEE_EXT_texture_compression_rgtc = GL_FALSE;
+GLboolean _GLEE_EXT_texture_shared_exponent = GL_FALSE;
+GLboolean _GLEE_NV_depth_buffer_float = GL_FALSE;
+GLboolean _GLEE_NV_framebuffer_multisample_coverage = GL_FALSE;
+GLboolean _GLEE_EXT_framebuffer_sRGB = GL_FALSE;
+GLboolean _GLEE_NV_geometry_shader4 = GL_FALSE;
+GLboolean _GLEE_NV_parameter_buffer_object = GL_FALSE;
+GLboolean _GLEE_EXT_draw_buffers2 = GL_FALSE;
+GLboolean _GLEE_NV_transform_feedback = GL_FALSE;
+GLboolean _GLEE_EXT_bindable_uniform = GL_FALSE;
+GLboolean _GLEE_EXT_texture_integer = GL_FALSE;
+GLboolean _GLEE_GREMEDY_frame_terminator = GL_FALSE;
+GLboolean _GLEE_NV_conditional_render = GL_FALSE;
+GLboolean _GLEE_NV_present_video = GL_FALSE;
+GLboolean _GLEE_EXT_transform_feedback = GL_FALSE;
+GLboolean _GLEE_EXT_direct_state_access = GL_FALSE;
+GLboolean _GLEE_EXT_vertex_array_bgra = GL_FALSE;
+GLboolean _GLEE_EXT_texture_swizzle = GL_FALSE;
+GLboolean _GLEE_NV_explicit_multisample = GL_FALSE;
+GLboolean _GLEE_NV_transform_feedback2 = GL_FALSE;
+GLboolean _GLEE_ATI_meminfo = GL_FALSE;
+GLboolean _GLEE_AMD_performance_monitor = GL_FALSE;
+GLboolean _GLEE_AMD_texture_texture4 = GL_FALSE;
+GLboolean _GLEE_AMD_vertex_shader_tesselator = GL_FALSE;
+GLboolean _GLEE_EXT_provoking_vertex = GL_FALSE;
+GLboolean _GLEE_EXT_texture_snorm = GL_FALSE;
+GLboolean _GLEE_AMD_draw_buffers_blend = GL_FALSE;
+GLboolean _GLEE_APPLE_texture_range = GL_FALSE;
+GLboolean _GLEE_APPLE_float_pixels = GL_FALSE;
+GLboolean _GLEE_APPLE_vertex_program_evaluators = GL_FALSE;
+GLboolean _GLEE_APPLE_aux_depth_stencil = GL_FALSE;
+GLboolean _GLEE_APPLE_object_purgeable = GL_FALSE;
+GLboolean _GLEE_APPLE_row_bytes = GL_FALSE;
+GLboolean _GLEE_APPLE_rgb_422 = GL_FALSE;
+GLboolean _GLEE_NV_video_capture = GL_FALSE;
+GLboolean _GLEE_NV_copy_image = GL_FALSE;
+GLboolean _GLEE_EXT_separate_shader_objects = GL_FALSE;
+GLboolean _GLEE_NV_parameter_buffer_object2 = GL_FALSE;
+GLboolean _GLEE_NV_shader_buffer_load = GL_FALSE;
+GLboolean _GLEE_NV_vertex_buffer_unified_memory = GL_FALSE;
+GLboolean _GLEE_NV_texture_barrier = GL_FALSE;
+GLboolean _GLEE_AMD_shader_stencil_export = GL_FALSE;
+GLboolean _GLEE_AMD_seamless_cubemap_per_texture = GL_FALSE;
+GLboolean _GLEE_AMD_conservative_depth = GL_FALSE;
+GLboolean _GLEE_EXT_shader_image_load_store = GL_FALSE;
+GLboolean _GLEE_EXT_vertex_attrib_64bit = GL_FALSE;
+GLboolean _GLEE_NV_gpu_program5 = GL_FALSE;
+GLboolean _GLEE_NV_gpu_shader5 = GL_FALSE;
+GLboolean _GLEE_NV_shader_buffer_store = GL_FALSE;
+GLboolean _GLEE_NV_tessellation_program5 = GL_FALSE;
+GLboolean _GLEE_NV_vertex_attrib_integer_64bit = GL_FALSE;
+GLboolean _GLEE_NV_multisample_coverage = GL_FALSE;
+GLboolean _GLEE_AMD_name_gen_delete = GL_FALSE;
+GLboolean _GLEE_AMD_transform_feedback3_lines_triangles = GL_FALSE;
+GLboolean _GLEE_AMD_depth_clamp_separate = GL_FALSE;
+GLboolean _GLEE_EXT_texture_sRGB_decode = GL_FALSE;
+GLboolean _GLEE_NV_texture_multisample = GL_FALSE;
+GLboolean _GLEE_AMD_blend_minmax_factor = GL_FALSE;
+GLboolean _GLEE_AMD_sample_positions = GL_FALSE;
+GLboolean _GLEE_EXT_x11_sync_object = GL_FALSE;
+GLboolean _GLEE_AMD_multi_draw_indirect = GL_FALSE;
+GLboolean _GLEE_EXT_framebuffer_multisample_blit_scaled = GL_FALSE;
+GLboolean _GLEE_SGIX_texture_select = GL_FALSE;
+GLboolean _GLEE_INGR_blend_func_separate = GL_FALSE;
+GLboolean _GLEE_SGIX_depth_pass_instrument = GL_FALSE;
+GLboolean _GLEE_SGIX_igloo_interface = GL_FALSE;
+GLboolean _GLEE_OES_compressed_paletted_texture = GL_FALSE;
+GLboolean _GLEE_OES_fixed_point = GL_FALSE;
+GLboolean _GLEE_OES_single_precision = GL_FALSE;
+GLboolean _GLEE_OES_query_matrix = GL_FALSE;
+GLboolean _GLEE_OES_byte_coordinates = GL_FALSE;
+GLboolean _GLEE_NV_gpu_program4 = GL_FALSE;
+GLboolean _GLEE_NV_path_rendering = GL_FALSE;
+GLboolean _GLEE_AMD_vertex_shader_tessellator = GL_FALSE;
+GLboolean _GLEE_EXT_fragment_lighting = GL_FALSE;
+GLboolean _GLEE_EXT_texture_compression_dxt1 = GL_FALSE;
+GLboolean _GLEE_EXT_scene_marker = GL_FALSE;
+GLboolean _GLEE_EXT_geometry_shader4 = GL_FALSE;
+GLboolean _GLEE_EXT_texture_env = GL_FALSE;
+GLboolean _GLEE_SGIX_texture_range = GL_FALSE;
+GLboolean _GLEE_SGIX_pixel_texture_bits = GL_FALSE;
+GLboolean _GLEE_IBM_static_data = GL_FALSE;
+
+/*  GL Extension names */
+
+char __GLeeGLExtensionNames[430][43]={
+    "GL_VERSION_1_2",
+    "GL_ARB_imaging",
+    "GL_VERSION_1_3",
+    "GL_VERSION_1_4",
+    "GL_VERSION_1_5",
+    "GL_VERSION_2_0",
+    "GL_VERSION_2_1",
+    "GL_VERSION_3_0",
+    "GL_VERSION_3_1",
+    "GL_VERSION_3_2",
+    "GL_VERSION_3_3",
+    "GL_VERSION_4_0",
+    "GL_VERSION_4_1",
+    "GL_VERSION_4_2",
+    "GL_ARB_multitexture",
+    "GL_ARB_transpose_matrix",
+    "GL_ARB_multisample",
+    "GL_ARB_texture_env_add",
+    "GL_ARB_texture_cube_map",
+    "GL_ARB_texture_compression",
+    "GL_ARB_texture_border_clamp",
+    "GL_ARB_point_parameters",
+    "GL_ARB_vertex_blend",
+    "GL_ARB_matrix_palette",
+    "GL_ARB_texture_env_combine",
+    "GL_ARB_texture_env_crossbar",
+    "GL_ARB_texture_env_dot3",
+    "GL_ARB_texture_mirrored_repeat",
+    "GL_ARB_depth_texture",
+    "GL_ARB_shadow",
+    "GL_ARB_shadow_ambient",
+    "GL_ARB_window_pos",
+    "GL_ARB_vertex_program",
+    "GL_ARB_fragment_program",
+    "GL_ARB_vertex_buffer_object",
+    "GL_ARB_occlusion_query",
+    "GL_ARB_shader_objects",
+    "GL_ARB_vertex_shader",
+    "GL_ARB_fragment_shader",
+    "GL_ARB_shading_language_100",
+    "GL_ARB_texture_non_power_of_two",
+    "GL_ARB_point_sprite",
+    "GL_ARB_fragment_program_shadow",
+    "GL_ARB_draw_buffers",
+    "GL_ARB_texture_rectangle",
+    "GL_ARB_color_buffer_float",
+    "GL_ARB_half_float_pixel",
+    "GL_ARB_texture_float",
+    "GL_ARB_pixel_buffer_object",
+    "GL_ARB_depth_buffer_float",
+    "GL_ARB_draw_instanced",
+    "GL_ARB_framebuffer_object",
+    "GL_ARB_framebuffer_sRGB",
+    "GL_ARB_geometry_shader4",
+    "GL_ARB_half_float_vertex",
+    "GL_ARB_instanced_arrays",
+    "GL_ARB_map_buffer_range",
+    "GL_ARB_texture_buffer_object",
+    "GL_ARB_texture_compression_rgtc",
+    "GL_ARB_texture_rg",
+    "GL_ARB_vertex_array_object",
+    "GL_ARB_uniform_buffer_object",
+    "GL_ARB_compatibility",
+    "GL_ARB_copy_buffer",
+    "GL_ARB_shader_texture_lod",
+    "GL_ARB_depth_clamp",
+    "GL_ARB_draw_elements_base_vertex",
+    "GL_ARB_fragment_coord_conventions",
+    "GL_ARB_provoking_vertex",
+    "GL_ARB_seamless_cube_map",
+    "GL_ARB_sync",
+    "GL_ARB_texture_multisample",
+    "GL_ARB_vertex_array_bgra",
+    "GL_ARB_draw_buffers_blend",
+    "GL_ARB_sample_shading",
+    "GL_ARB_texture_cube_map_array",
+    "GL_ARB_texture_gather",
+    "GL_ARB_texture_query_lod",
+    "GL_ARB_shading_language_include",
+    "GL_ARB_texture_compression_bptc",
+    "GL_ARB_blend_func_extended",
+    "GL_ARB_explicit_attrib_location",
+    "GL_ARB_occlusion_query2",
+    "GL_ARB_sampler_objects",
+    "GL_ARB_shader_bit_encoding",
+    "GL_ARB_texture_rgb10_a2ui",
+    "GL_ARB_texture_swizzle",
+    "GL_ARB_timer_query",
+    "GL_ARB_vertex_type_2_10_10_10_rev",
+    "GL_ARB_draw_indirect",
+    "GL_ARB_gpu_shader5",
+    "GL_ARB_gpu_shader_fp64",
+    "GL_ARB_shader_subroutine",
+    "GL_ARB_tessellation_shader",
+    "GL_ARB_texture_buffer_object_rgb32",
+    "GL_ARB_transform_feedback2",
+    "GL_ARB_transform_feedback3",
+    "GL_ARB_ES2_compatibility",
+    "GL_ARB_get_program_binary",
+    "GL_ARB_separate_shader_objects",
+    "GL_ARB_shader_precision",
+    "GL_ARB_vertex_attrib_64bit",
+    "GL_ARB_viewport_array",
+    "GL_ARB_cl_event",
+    "GL_ARB_robustness",
+    "GL_ARB_shader_stencil_export",
+    "GL_ARB_base_instance",
+    "GL_ARB_shading_language_420pack",
+    "GL_ARB_transform_feedback_instanced",
+    "GL_ARB_compressed_texture_pixel_storage",
+    "GL_ARB_conservative_depth",
+    "GL_ARB_internalformat_query",
+    "GL_ARB_map_buffer_alignment",
+    "GL_ARB_shader_atomic_counters",
+    "GL_ARB_shader_image_load_store",
+    "GL_ARB_shading_language_packing",
+    "GL_ARB_texture_storage",
+    "GL_EXT_abgr",
+    "GL_EXT_blend_color",
+    "GL_EXT_polygon_offset",
+    "GL_EXT_texture",
+    "GL_EXT_texture3D",
+    "GL_SGIS_texture_filter4",
+    "GL_EXT_subtexture",
+    "GL_EXT_copy_texture",
+    "GL_EXT_histogram",
+    "GL_EXT_convolution",
+    "GL_SGI_color_matrix",
+    "GL_SGI_color_table",
+    "GL_SGIS_pixel_texture",
+    "GL_SGIX_pixel_texture",
+    "GL_SGIS_texture4D",
+    "GL_SGI_texture_color_table",
+    "GL_EXT_cmyka",
+    "GL_EXT_texture_object",
+    "GL_SGIS_detail_texture",
+    "GL_SGIS_sharpen_texture",
+    "GL_EXT_packed_pixels",
+    "GL_SGIS_texture_lod",
+    "GL_SGIS_multisample",
+    "GL_EXT_rescale_normal",
+    "GL_EXT_vertex_array",
+    "GL_EXT_misc_attribute",
+    "GL_SGIS_generate_mipmap",
+    "GL_SGIX_clipmap",
+    "GL_SGIX_shadow",
+    "GL_SGIS_texture_edge_clamp",
+    "GL_SGIS_texture_border_clamp",
+    "GL_EXT_blend_minmax",
+    "GL_EXT_blend_subtract",
+    "GL_EXT_blend_logic_op",
+    "GL_SGIX_interlace",
+    "GL_SGIX_pixel_tiles",
+    "GL_SGIS_texture_select",
+    "GL_SGIX_sprite",
+    "GL_SGIX_texture_multi_buffer",
+    "GL_EXT_point_parameters",
+    "GL_SGIS_point_parameters",
+    "GL_SGIX_instruments",
+    "GL_SGIX_texture_scale_bias",
+    "GL_SGIX_framezoom",
+    "GL_SGIX_tag_sample_buffer",
+    "GL_FfdMaskSGIX",
+    "GL_SGIX_polynomial_ffd",
+    "GL_SGIX_reference_plane",
+    "GL_SGIX_flush_raster",
+    "GL_SGIX_depth_texture",
+    "GL_SGIS_fog_function",
+    "GL_SGIX_fog_offset",
+    "GL_HP_image_transform",
+    "GL_HP_convolution_border_modes",
+    "GL_INGR_palette_buffer",
+    "GL_SGIX_texture_add_env",
+    "GL_EXT_color_subtable",
+    "GL_PGI_vertex_hints",
+    "GL_PGI_misc_hints",
+    "GL_EXT_paletted_texture",
+    "GL_EXT_clip_volume_hint",
+    "GL_SGIX_list_priority",
+    "GL_SGIX_ir_instrument1",
+    "GL_SGIX_calligraphic_fragment",
+    "GL_SGIX_texture_lod_bias",
+    "GL_SGIX_shadow_ambient",
+    "GL_EXT_index_texture",
+    "GL_EXT_index_material",
+    "GL_EXT_index_func",
+    "GL_EXT_index_array_formats",
+    "GL_EXT_compiled_vertex_array",
+    "GL_EXT_cull_vertex",
+    "GL_SGIX_ycrcb",
+    "GL_SGIX_fragment_lighting",
+    "GL_IBM_rasterpos_clip",
+    "GL_HP_texture_lighting",
+    "GL_EXT_draw_range_elements",
+    "GL_WIN_phong_shading",
+    "GL_WIN_specular_fog",
+    "GL_EXT_light_texture",
+    "GL_SGIX_blend_alpha_minmax",
+    "GL_SGIX_impact_pixel_texture",
+    "GL_EXT_bgra",
+    "GL_SGIX_async",
+    "GL_SGIX_async_pixel",
+    "GL_SGIX_async_histogram",
+    "GL_INTEL_texture_scissor",
+    "GL_INTEL_parallel_arrays",
+    "GL_HP_occlusion_test",
+    "GL_EXT_pixel_transform",
+    "GL_EXT_pixel_transform_color_table",
+    "GL_EXT_shared_texture_palette",
+    "GL_EXT_separate_specular_color",
+    "GL_EXT_secondary_color",
+    "GL_EXT_texture_perturb_normal",
+    "GL_EXT_multi_draw_arrays",
+    "GL_EXT_fog_coord",
+    "GL_REND_screen_coordinates",
+    "GL_EXT_coordinate_frame",
+    "GL_EXT_texture_env_combine",
+    "GL_APPLE_specular_vector",
+    "GL_APPLE_transform_hint",
+    "GL_SGIX_fog_scale",
+    "GL_SUNX_constant_data",
+    "GL_SUN_global_alpha",
+    "GL_SUN_triangle_list",
+    "GL_SUN_vertex",
+    "GL_EXT_blend_func_separate",
+    "GL_INGR_color_clamp",
+    "GL_INGR_interlace_read",
+    "GL_EXT_stencil_wrap",
+    "GL_EXT_422_pixels",
+    "GL_NV_texgen_reflection",
+    "GL_EXT_texture_cube_map",
+    "GL_SUN_convolution_border_modes",
+    "GL_EXT_texture_env_add",
+    "GL_EXT_texture_lod_bias",
+    "GL_EXT_texture_filter_anisotropic",
+    "GL_EXT_vertex_weighting",
+    "GL_NV_light_max_exponent",
+    "GL_NV_vertex_array_range",
+    "GL_NV_register_combiners",
+    "GL_NV_fog_distance",
+    "GL_NV_texgen_emboss",
+    "GL_NV_blend_square",
+    "GL_NV_texture_env_combine4",
+    "GL_MESA_resize_buffers",
+    "GL_MESA_window_pos",
+    "GL_EXT_texture_compression_s3tc",
+    "GL_IBM_cull_vertex",
+    "GL_IBM_multimode_draw_arrays",
+    "GL_IBM_vertex_array_lists",
+    "GL_SGIX_subsample",
+    "GL_SGIX_ycrcb_subsample",
+    "GL_SGIX_ycrcba",
+    "GL_SGI_depth_pass_instrument",
+    "GL_3DFX_texture_compression_FXT1",
+    "GL_3DFX_multisample",
+    "GL_3DFX_tbuffer",
+    "GL_EXT_multisample",
+    "GL_SGIX_vertex_preclip",
+    "GL_SGIX_convolution_accuracy",
+    "GL_SGIX_resample",
+    "GL_SGIS_point_line_texgen",
+    "GL_SGIS_texture_color_mask",
+    "GL_EXT_texture_env_dot3",
+    "GL_ATI_texture_mirror_once",
+    "GL_NV_fence",
+    "GL_IBM_texture_mirrored_repeat",
+    "GL_NV_evaluators",
+    "GL_NV_packed_depth_stencil",
+    "GL_NV_register_combiners2",
+    "GL_NV_texture_compression_vtc",
+    "GL_NV_texture_rectangle",
+    "GL_NV_texture_shader",
+    "GL_NV_texture_shader2",
+    "GL_NV_vertex_array_range2",
+    "GL_NV_vertex_program",
+    "GL_SGIX_texture_coordinate_clamp",
+    "GL_SGIX_scalebias_hint",
+    "GL_OML_interlace",
+    "GL_OML_subsample",
+    "GL_OML_resample",
+    "GL_NV_copy_depth_to_color",
+    "GL_ATI_envmap_bumpmap",
+    "GL_ATI_fragment_shader",
+    "GL_ATI_pn_triangles",
+    "GL_ATI_vertex_array_object",
+    "GL_EXT_vertex_shader",
+    "GL_ATI_vertex_streams",
+    "GL_ATI_element_array",
+    "GL_SUN_mesh_array",
+    "GL_SUN_slice_accum",
+    "GL_NV_multisample_filter_hint",
+    "GL_NV_depth_clamp",
+    "GL_NV_occlusion_query",
+    "GL_NV_point_sprite",
+    "GL_NV_texture_shader3",
+    "GL_NV_vertex_program1_1",
+    "GL_EXT_shadow_funcs",
+    "GL_EXT_stencil_two_side",
+    "GL_ATI_text_fragment_shader",
+    "GL_APPLE_client_storage",
+    "GL_APPLE_element_array",
+    "GL_APPLE_fence",
+    "GL_APPLE_vertex_array_object",
+    "GL_APPLE_vertex_array_range",
+    "GL_APPLE_ycbcr_422",
+    "GL_S3_s3tc",
+    "GL_ATI_draw_buffers",
+    "GL_ATI_pixel_format_float",
+    "GL_ATI_texture_env_combine3",
+    "GL_ATI_texture_float",
+    "GL_NV_float_buffer",
+    "GL_NV_fragment_program",
+    "GL_NV_half_float",
+    "GL_NV_pixel_data_range",
+    "GL_NV_primitive_restart",
+    "GL_NV_texture_expand_normal",
+    "GL_NV_vertex_program2",
+    "GL_ATI_map_object_buffer",
+    "GL_ATI_separate_stencil",
+    "GL_ATI_vertex_attrib_array_object",
+    "GL_OES_read_format",
+    "GL_EXT_depth_bounds_test",
+    "GL_EXT_texture_mirror_clamp",
+    "GL_EXT_blend_equation_separate",
+    "GL_MESA_pack_invert",
+    "GL_MESA_ycbcr_texture",
+    "GL_EXT_pixel_buffer_object",
+    "GL_NV_fragment_program_option",
+    "GL_NV_fragment_program2",
+    "GL_NV_vertex_program2_option",
+    "GL_NV_vertex_program3",
+    "GL_EXT_framebuffer_object",
+    "GL_GREMEDY_string_marker",
+    "GL_EXT_packed_depth_stencil",
+    "GL_EXT_stencil_clear_tag",
+    "GL_EXT_texture_sRGB",
+    "GL_EXT_framebuffer_blit",
+    "GL_EXT_framebuffer_multisample",
+    "GL_MESAX_texture_stack",
+    "GL_EXT_timer_query",
+    "GL_EXT_gpu_program_parameters",
+    "GL_APPLE_flush_buffer_range",
+    "GL_EXT_gpu_shader4",
+    "GL_EXT_draw_instanced",
+    "GL_EXT_packed_float",
+    "GL_EXT_texture_array",
+    "GL_EXT_texture_buffer_object",
+    "GL_EXT_texture_compression_latc",
+    "GL_EXT_texture_compression_rgtc",
+    "GL_EXT_texture_shared_exponent",
+    "GL_NV_depth_buffer_float",
+    "GL_NV_framebuffer_multisample_coverage",
+    "GL_EXT_framebuffer_sRGB",
+    "GL_NV_geometry_shader4",
+    "GL_NV_parameter_buffer_object",
+    "GL_EXT_draw_buffers2",
+    "GL_NV_transform_feedback",
+    "GL_EXT_bindable_uniform",
+    "GL_EXT_texture_integer",
+    "GL_GREMEDY_frame_terminator",
+    "GL_NV_conditional_render",
+    "GL_NV_present_video",
+    "GL_EXT_transform_feedback",
+    "GL_EXT_direct_state_access",
+    "GL_EXT_vertex_array_bgra",
+    "GL_EXT_texture_swizzle",
+    "GL_NV_explicit_multisample",
+    "GL_NV_transform_feedback2",
+    "GL_ATI_meminfo",
+    "GL_AMD_performance_monitor",
+    "GL_AMD_texture_texture4",
+    "GL_AMD_vertex_shader_tesselator",
+    "GL_EXT_provoking_vertex",
+    "GL_EXT_texture_snorm",
+    "GL_AMD_draw_buffers_blend",
+    "GL_APPLE_texture_range",
+    "GL_APPLE_float_pixels",
+    "GL_APPLE_vertex_program_evaluators",
+    "GL_APPLE_aux_depth_stencil",
+    "GL_APPLE_object_purgeable",
+    "GL_APPLE_row_bytes",
+    "GL_APPLE_rgb_422",
+    "GL_NV_video_capture",
+    "GL_NV_copy_image",
+    "GL_EXT_separate_shader_objects",
+    "GL_NV_parameter_buffer_object2",
+    "GL_NV_shader_buffer_load",
+    "GL_NV_vertex_buffer_unified_memory",
+    "GL_NV_texture_barrier",
+    "GL_AMD_shader_stencil_export",
+    "GL_AMD_seamless_cubemap_per_texture",
+    "GL_AMD_conservative_depth",
+    "GL_EXT_shader_image_load_store",
+    "GL_EXT_vertex_attrib_64bit",
+    "GL_NV_gpu_program5",
+    "GL_NV_gpu_shader5",
+    "GL_NV_shader_buffer_store",
+    "GL_NV_tessellation_program5",
+    "GL_NV_vertex_attrib_integer_64bit",
+    "GL_NV_multisample_coverage",
+    "GL_AMD_name_gen_delete",
+    "GL_AMD_transform_feedback3_lines_triangles",
+    "GL_AMD_depth_clamp_separate",
+    "GL_EXT_texture_sRGB_decode",
+    "GL_NV_texture_multisample",
+    "GL_AMD_blend_minmax_factor",
+    "GL_AMD_sample_positions",
+    "GL_EXT_x11_sync_object",
+    "GL_AMD_multi_draw_indirect",
+    "GL_EXT_framebuffer_multisample_blit_scaled",
+    "GL_SGIX_texture_select",
+    "GL_INGR_blend_func_separate",
+    "GL_SGIX_depth_pass_instrument",
+    "GL_SGIX_igloo_interface",
+    "GL_OES_compressed_paletted_texture",
+    "GL_OES_fixed_point",
+    "GL_OES_single_precision",
+    "GL_OES_query_matrix",
+    "GL_OES_byte_coordinates",
+    "GL_NV_gpu_program4",
+    "GL_NV_path_rendering",
+    "GL_AMD_vertex_shader_tessellator",
+    "GL_EXT_fragment_lighting",
+    "GL_EXT_texture_compression_dxt1",
+    "GL_EXT_scene_marker",
+    "GL_EXT_geometry_shader4",
+    "GL_EXT_texture_env",
+    "GL_SGIX_texture_range",
+    "GL_SGIX_pixel_texture_bits",
+    "GL_IBM_static_data"
+};
+int __GLeeGLNumExtensions=430;
+
+/* GL_VERSION_1_2 */
+
+#ifdef __GLEE_GL_VERSION_1_2
+#ifndef GLEE_C_DEFINED_glBlendColor
+#define GLEE_C_DEFINED_glBlendColor
+  void __stdcall GLee_Lazy_glBlendColor(GLclampf  red, GLclampf  green, GLclampf  blue, GLclampf  alpha)  {if (GLeeInit()) glBlendColor(red, green, blue, alpha);}
+  GLEEPFNGLBLENDCOLORPROC GLeeFuncPtr_glBlendColor=GLee_Lazy_glBlendColor;
+#endif
+#ifndef GLEE_C_DEFINED_glBlendEquation
+#define GLEE_C_DEFINED_glBlendEquation
+  void __stdcall GLee_Lazy_glBlendEquation(GLenum  mode)  {if (GLeeInit()) glBlendEquation(mode);}
+  GLEEPFNGLBLENDEQUATIONPROC GLeeFuncPtr_glBlendEquation=GLee_Lazy_glBlendEquation;
+#endif
+#ifndef GLEE_C_DEFINED_glDrawRangeElements
+#define GLEE_C_DEFINED_glDrawRangeElements
+  void __stdcall GLee_Lazy_glDrawRangeElements(GLenum  mode, GLuint  start, GLuint  end, GLsizei  count, GLenum  type, const GLvoid * indices)  {if (GLeeInit()) glDrawRangeElements(mode, start, end, count, type, indices);}
+  GLEEPFNGLDRAWRANGEELEMENTSPROC GLeeFuncPtr_glDrawRangeElements=GLee_Lazy_glDrawRangeElements;
+#endif
+#ifndef GLEE_C_DEFINED_glTexImage3D
+#define GLEE_C_DEFINED_glTexImage3D
+  void __stdcall GLee_Lazy_glTexImage3D(GLenum  target, GLint  level, GLint  internalformat, GLsizei  width, GLsizei  height, GLsizei  depth, GLint  border, GLenum  format, GLenum  type, const GLvoid * pixels)  {if (GLeeInit()) glTexImage3D(target, level, internalformat, width, height, depth, border, format, type, pixels);}
+  GLEEPFNGLTEXIMAGE3DPROC GLeeFuncPtr_glTexImage3D=GLee_Lazy_glTexImage3D;
+#endif
+#ifndef GLEE_C_DEFINED_glTexSubImage3D
+#define GLEE_C_DEFINED_glTexSubImage3D
+  void __stdcall GLee_Lazy_glTexSubImage3D(GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLint  zoffset, GLsizei  width, GLsizei  height, GLsizei  depth, GLenum  format, GLenum  type, const GLvoid * pixels)  {if (GLeeInit()) glTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);}
+  GLEEPFNGLTEXSUBIMAGE3DPROC GLeeFuncPtr_glTexSubImage3D=GLee_Lazy_glTexSubImage3D;
+#endif
+#ifndef GLEE_C_DEFINED_glCopyTexSubImage3D
+#define GLEE_C_DEFINED_glCopyTexSubImage3D
+  void __stdcall GLee_Lazy_glCopyTexSubImage3D(GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLint  zoffset, GLint  x, GLint  y, GLsizei  width, GLsizei  height)  {if (GLeeInit()) glCopyTexSubImage3D(target, level, xoffset, yoffset, zoffset, x, y, width, height);}
+  GLEEPFNGLCOPYTEXSUBIMAGE3DPROC GLeeFuncPtr_glCopyTexSubImage3D=GLee_Lazy_glCopyTexSubImage3D;
+#endif
+#ifndef GLEE_C_DEFINED_glColorTable
+#define GLEE_C_DEFINED_glColorTable
+  void __stdcall GLee_Lazy_glColorTable(GLenum  target, GLenum  internalformat, GLsizei  width, GLenum  format, GLenum  type, const GLvoid * table)  {if (GLeeInit()) glColorTable(target, internalformat, width, format, type, table);}
+  GLEEPFNGLCOLORTABLEPROC GLeeFuncPtr_glColorTable=GLee_Lazy_glColorTable;
+#endif
+#ifndef GLEE_C_DEFINED_glColorTableParameterfv
+#define GLEE_C_DEFINED_glColorTableParameterfv
+  void __stdcall GLee_Lazy_glColorTableParameterfv(GLenum  target, GLenum  pname, const GLfloat * params)  {if (GLeeInit()) glColorTableParameterfv(target, pname, params);}
+  GLEEPFNGLCOLORTABLEPARAMETERFVPROC GLeeFuncPtr_glColorTableParameterfv=GLee_Lazy_glColorTableParameterfv;
+#endif
+#ifndef GLEE_C_DEFINED_glColorTableParameteriv
+#define GLEE_C_DEFINED_glColorTableParameteriv
+  void __stdcall GLee_Lazy_glColorTableParameteriv(GLenum  target, GLenum  pname, const GLint * params)  {if (GLeeInit()) glColorTableParameteriv(target, pname, params);}
+  GLEEPFNGLCOLORTABLEPARAMETERIVPROC GLeeFuncPtr_glColorTableParameteriv=GLee_Lazy_glColorTableParameteriv;
+#endif
+#ifndef GLEE_C_DEFINED_glCopyColorTable
+#define GLEE_C_DEFINED_glCopyColorTable
+  void __stdcall GLee_Lazy_glCopyColorTable(GLenum  target, GLenum  internalformat, GLint  x, GLint  y, GLsizei  width)  {if (GLeeInit()) glCopyColorTable(target, internalformat, x, y, width);}
+  GLEEPFNGLCOPYCOLORTABLEPROC GLeeFuncPtr_glCopyColorTable=GLee_Lazy_glCopyColorTable;
+#endif
+#ifndef GLEE_C_DEFINED_glGetColorTable
+#define GLEE_C_DEFINED_glGetColorTable
+  void __stdcall GLee_Lazy_glGetColorTable(GLenum  target, GLenum  format, GLenum  type, GLvoid * table)  {if (GLeeInit()) glGetColorTable(target, format, type, table);}
+  GLEEPFNGLGETCOLORTABLEPROC GLeeFuncPtr_glGetColorTable=GLee_Lazy_glGetColorTable;
+#endif
+#ifndef GLEE_C_DEFINED_glGetColorTableParameterfv
+#define GLEE_C_DEFINED_glGetColorTableParameterfv
+  void __stdcall GLee_Lazy_glGetColorTableParameterfv(GLenum  target, GLenum  pname, GLfloat * params)  {if (GLeeInit()) glGetColorTableParameterfv(target, pname, params);}
+  GLEEPFNGLGETCOLORTABLEPARAMETERFVPROC GLeeFuncPtr_glGetColorTableParameterfv=GLee_Lazy_glGetColorTableParameterfv;
+#endif
+#ifndef GLEE_C_DEFINED_glGetColorTableParameteriv
+#define GLEE_C_DEFINED_glGetColorTableParameteriv
+  void __stdcall GLee_Lazy_glGetColorTableParameteriv(GLenum  target, GLenum  pname, GLint * params)  {if (GLeeInit()) glGetColorTableParameteriv(target, pname, params);}
+  GLEEPFNGLGETCOLORTABLEPARAMETERIVPROC GLeeFuncPtr_glGetColorTableParameteriv=GLee_Lazy_glGetColorTableParameteriv;
+#endif
+#ifndef GLEE_C_DEFINED_glColorSubTable
+#define GLEE_C_DEFINED_glColorSubTable
+  void __stdcall GLee_Lazy_glColorSubTable(GLenum  target, GLsizei  start, GLsizei  count, GLenum  format, GLenum  type, const GLvoid * data)  {if (GLeeInit()) glColorSubTable(target, start, count, format, type, data);}
+  GLEEPFNGLCOLORSUBTABLEPROC GLeeFuncPtr_glColorSubTable=GLee_Lazy_glColorSubTable;
+#endif
+#ifndef GLEE_C_DEFINED_glCopyColorSubTable
+#define GLEE_C_DEFINED_glCopyColorSubTable
+  void __stdcall GLee_Lazy_glCopyColorSubTable(GLenum  target, GLsizei  start, GLint  x, GLint  y, GLsizei  width)  {if (GLeeInit()) glCopyColorSubTable(target, start, x, y, width);}
+  GLEEPFNGLCOPYCOLORSUBTABLEPROC GLeeFuncPtr_glCopyColorSubTable=GLee_Lazy_glCopyColorSubTable;
+#endif
+#ifndef GLEE_C_DEFINED_glConvolutionFilter1D
+#define GLEE_C_DEFINED_glConvolutionFilter1D
+  void __stdcall GLee_Lazy_glConvolutionFilter1D(GLenum  target, GLenum  internalformat, GLsizei  width, GLenum  format, GLenum  type, const GLvoid * image)  {if (GLeeInit()) glConvolutionFilter1D(target, internalformat, width, format, type, image);}
+  GLEEPFNGLCONVOLUTIONFILTER1DPROC GLeeFuncPtr_glConvolutionFilter1D=GLee_Lazy_glConvolutionFilter1D;
+#endif
+#ifndef GLEE_C_DEFINED_glConvolutionFilter2D
+#define GLEE_C_DEFINED_glConvolutionFilter2D
+  void __stdcall GLee_Lazy_glConvolutionFilter2D(GLenum  target, GLenum  internalformat, GLsizei  width, GLsizei  height, GLenum  format, GLenum  type, const GLvoid * image)  {if (GLeeInit()) glConvolutionFilter2D(target, internalformat, width, height, format, type, image);}
+  GLEEPFNGLCONVOLUTIONFILTER2DPROC GLeeFuncPtr_glConvolutionFilter2D=GLee_Lazy_glConvolutionFilter2D;
+#endif
+#ifndef GLEE_C_DEFINED_glConvolutionParameterf
+#define GLEE_C_DEFINED_glConvolutionParameterf
+  void __stdcall GLee_Lazy_glConvolutionParameterf(GLenum  target, GLenum  pname, GLfloat  params)  {if (GLeeInit()) glConvolutionParameterf(target, pname, params);}
+  GLEEPFNGLCONVOLUTIONPARAMETERFPROC GLeeFuncPtr_glConvolutionParameterf=GLee_Lazy_glConvolutionParameterf;
+#endif
+#ifndef GLEE_C_DEFINED_glConvolutionParameterfv
+#define GLEE_C_DEFINED_glConvolutionParameterfv
+  void __stdcall GLee_Lazy_glConvolutionParameterfv(GLenum  target, GLenum  pname, const GLfloat * params)  {if (GLeeInit()) glConvolutionParameterfv(target, pname, params);}
+  GLEEPFNGLCONVOLUTIONPARAMETERFVPROC GLeeFuncPtr_glConvolutionParameterfv=GLee_Lazy_glConvolutionParameterfv;
+#endif
+#ifndef GLEE_C_DEFINED_glConvolutionParameteri
+#define GLEE_C_DEFINED_glConvolutionParameteri
+  void __stdcall GLee_Lazy_glConvolutionParameteri(GLenum  target, GLenum  pname, GLint  params)  {if (GLeeInit()) glConvolutionParameteri(target, pname, params);}
+  GLEEPFNGLCONVOLUTIONPARAMETERIPROC GLeeFuncPtr_glConvolutionParameteri=GLee_Lazy_glConvolutionParameteri;
+#endif
+#ifndef GLEE_C_DEFINED_glConvolutionParameteriv
+#define GLEE_C_DEFINED_glConvolutionParameteriv
+  void __stdcall GLee_Lazy_glConvolutionParameteriv(GLenum  target, GLenum  pname, const GLint * params)  {if (GLeeInit()) glConvolutionParameteriv(target, pname, params);}
+  GLEEPFNGLCONVOLUTIONPARAMETERIVPROC GLeeFuncPtr_glConvolutionParameteriv=GLee_Lazy_glConvolutionParameteriv;
+#endif
+#ifndef GLEE_C_DEFINED_glCopyConvolutionFilter1D
+#define GLEE_C_DEFINED_glCopyConvolutionFilter1D
+  void __stdcall GLee_Lazy_glCopyConvolutionFilter1D(GLenum  target, GLenum  internalformat, GLint  x, GLint  y, GLsizei  width)  {if (GLeeInit()) glCopyConvolutionFilter1D(target, internalformat, x, y, width);}
+  GLEEPFNGLCOPYCONVOLUTIONFILTER1DPROC GLeeFuncPtr_glCopyConvolutionFilter1D=GLee_Lazy_glCopyConvolutionFilter1D;
+#endif
+#ifndef GLEE_C_DEFINED_glCopyConvolutionFilter2D
+#define GLEE_C_DEFINED_glCopyConvolutionFilter2D
+  void __stdcall GLee_Lazy_glCopyConvolutionFilter2D(GLenum  target, GLenum  internalformat, GLint  x, GLint  y, GLsizei  width, GLsizei  height)  {if (GLeeInit()) glCopyConvolutionFilter2D(target, internalformat, x, y, width, height);}
+  GLEEPFNGLCOPYCONVOLUTIONFILTER2DPROC GLeeFuncPtr_glCopyConvolutionFilter2D=GLee_Lazy_glCopyConvolutionFilter2D;
+#endif
+#ifndef GLEE_C_DEFINED_glGetConvolutionFilter
+#define GLEE_C_DEFINED_glGetConvolutionFilter
+  void __stdcall GLee_Lazy_glGetConvolutionFilter(GLenum  target, GLenum  format, GLenum  type, GLvoid * image)  {if (GLeeInit()) glGetConvolutionFilter(target, format, type, image);}
+  GLEEPFNGLGETCONVOLUTIONFILTERPROC GLeeFuncPtr_glGetConvolutionFilter=GLee_Lazy_glGetConvolutionFilter;
+#endif
+#ifndef GLEE_C_DEFINED_glGetConvolutionParameterfv
+#define GLEE_C_DEFINED_glGetConvolutionParameterfv
+  void __stdcall GLee_Lazy_glGetConvolutionParameterfv(GLenum  target, GLenum  pname, GLfloat * params)  {if (GLeeInit()) glGetConvolutionParameterfv(target, pname, params);}
+  GLEEPFNGLGETCONVOLUTIONPARAMETERFVPROC GLeeFuncPtr_glGetConvolutionParameterfv=GLee_Lazy_glGetConvolutionParameterfv;
+#endif
+#ifndef GLEE_C_DEFINED_glGetConvolutionParameteriv
+#define GLEE_C_DEFINED_glGetConvolutionParameteriv
+  void __stdcall GLee_Lazy_glGetConvolutionParameteriv(GLenum  target, GLenum  pname, GLint * params)  {if (GLeeInit()) glGetConvolutionParameteriv(target, pname, params);}
+  GLEEPFNGLGETCONVOLUTIONPARAMETERIVPROC GLeeFuncPtr_glGetConvolutionParameteriv=GLee_Lazy_glGetConvolutionParameteriv;
+#endif
+#ifndef GLEE_C_DEFINED_glGetSeparableFilter
+#define GLEE_C_DEFINED_glGetSeparableFilter
+  void __stdcall GLee_Lazy_glGetSeparableFilter(GLenum  target, GLenum  format, GLenum  type, GLvoid * row, GLvoid * column, GLvoid * span)  {if (GLeeInit()) glGetSeparableFilter(target, format, type, row, column, span);}
+  GLEEPFNGLGETSEPARABLEFILTERPROC GLeeFuncPtr_glGetSeparableFilter=GLee_Lazy_glGetSeparableFilter;
+#endif
+#ifndef GLEE_C_DEFINED_glSeparableFilter2D
+#define GLEE_C_DEFINED_glSeparableFilter2D
+  void __stdcall GLee_Lazy_glSeparableFilter2D(GLenum  target, GLenum  internalformat, GLsizei  width, GLsizei  height, GLenum  format, GLenum  type, const GLvoid * row, const GLvoid * column)  {if (GLeeInit()) glSeparableFilter2D(target, internalformat, width, height, format, type, row, column);}
+  GLEEPFNGLSEPARABLEFILTER2DPROC GLeeFuncPtr_glSeparableFilter2D=GLee_Lazy_glSeparableFilter2D;
+#endif
+#ifndef GLEE_C_DEFINED_glGetHistogram
+#define GLEE_C_DEFINED_glGetHistogram
+  void __stdcall GLee_Lazy_glGetHistogram(GLenum  target, GLboolean  reset, GLenum  format, GLenum  type, GLvoid * values)  {if (GLeeInit()) glGetHistogram(target, reset, format, type, values);}
+  GLEEPFNGLGETHISTOGRAMPROC GLeeFuncPtr_glGetHistogram=GLee_Lazy_glGetHistogram;
+#endif
+#ifndef GLEE_C_DEFINED_glGetHistogramParameterfv
+#define GLEE_C_DEFINED_glGetHistogramParameterfv
+  void __stdcall GLee_Lazy_glGetHistogramParameterfv(GLenum  target, GLenum  pname, GLfloat * params)  {if (GLeeInit()) glGetHistogramParameterfv(target, pname, params);}
+  GLEEPFNGLGETHISTOGRAMPARAMETERFVPROC GLeeFuncPtr_glGetHistogramParameterfv=GLee_Lazy_glGetHistogramParameterfv;
+#endif
+#ifndef GLEE_C_DEFINED_glGetHistogramParameteriv
+#define GLEE_C_DEFINED_glGetHistogramParameteriv
+  void __stdcall GLee_Lazy_glGetHistogramParameteriv(GLenum  target, GLenum  pname, GLint * params)  {if (GLeeInit()) glGetHistogramParameteriv(target, pname, params);}
+  GLEEPFNGLGETHISTOGRAMPARAMETERIVPROC GLeeFuncPtr_glGetHistogramParameteriv=GLee_Lazy_glGetHistogramParameteriv;
+#endif
+#ifndef GLEE_C_DEFINED_glGetMinmax
+#define GLEE_C_DEFINED_glGetMinmax
+  void __stdcall GLee_Lazy_glGetMinmax(GLenum  target, GLboolean  reset, GLenum  format, GLenum  type, GLvoid * values)  {if (GLeeInit()) glGetMinmax(target, reset, format, type, values);}
+  GLEEPFNGLGETMINMAXPROC GLeeFuncPtr_glGetMinmax=GLee_Lazy_glGetMinmax;
+#endif
+#ifndef GLEE_C_DEFINED_glGetMinmaxParameterfv
+#define GLEE_C_DEFINED_glGetMinmaxParameterfv
+  void __stdcall GLee_Lazy_glGetMinmaxParameterfv(GLenum  target, GLenum  pname, GLfloat * params)  {if (GLeeInit()) glGetMinmaxParameterfv(target, pname, params);}
+  GLEEPFNGLGETMINMAXPARAMETERFVPROC GLeeFuncPtr_glGetMinmaxParameterfv=GLee_Lazy_glGetMinmaxParameterfv;
+#endif
+#ifndef GLEE_C_DEFINED_glGetMinmaxParameteriv
+#define GLEE_C_DEFINED_glGetMinmaxParameteriv
+  void __stdcall GLee_Lazy_glGetMinmaxParameteriv(GLenum  target, GLenum  pname, GLint * params)  {if (GLeeInit()) glGetMinmaxParameteriv(target, pname, params);}
+  GLEEPFNGLGETMINMAXPARAMETERIVPROC GLeeFuncPtr_glGetMinmaxParameteriv=GLee_Lazy_glGetMinmaxParameteriv;
+#endif
+#ifndef GLEE_C_DEFINED_glHistogram
+#define GLEE_C_DEFINED_glHistogram
+  void __stdcall GLee_Lazy_glHistogram(GLenum  target, GLsizei  width, GLenum  internalformat, GLboolean  sink)  {if (GLeeInit()) glHistogram(target, width, internalformat, sink);}
+  GLEEPFNGLHISTOGRAMPROC GLeeFuncPtr_glHistogram=GLee_Lazy_glHistogram;
+#endif
+#ifndef GLEE_C_DEFINED_glMinmax
+#define GLEE_C_DEFINED_glMinmax
+  void __stdcall GLee_Lazy_glMinmax(GLenum  target, GLenum  internalformat, GLboolean  sink)  {if (GLeeInit()) glMinmax(target, internalformat, sink);}
+  GLEEPFNGLMINMAXPROC GLeeFuncPtr_glMinmax=GLee_Lazy_glMinmax;
+#endif
+#ifndef GLEE_C_DEFINED_glResetHistogram
+#define GLEE_C_DEFINED_glResetHistogram
+  void __stdcall GLee_Lazy_glResetHistogram(GLenum  target)  {if (GLeeInit()) glResetHistogram(target);}
+  GLEEPFNGLRESETHISTOGRAMPROC GLeeFuncPtr_glResetHistogram=GLee_Lazy_glResetHistogram;
+#endif
+#ifndef GLEE_C_DEFINED_glResetMinmax
+#define GLEE_C_DEFINED_glResetMinmax
+  void __stdcall GLee_Lazy_glResetMinmax(GLenum  target)  {if (GLeeInit()) glResetMinmax(target);}
+  GLEEPFNGLRESETMINMAXPROC GLeeFuncPtr_glResetMinmax=GLee_Lazy_glResetMinmax;
+#endif
+#endif 
+
+/* GL_ARB_imaging */
+
+#ifdef __GLEE_GL_ARB_imaging
+#endif 
+
+/* GL_VERSION_1_3 */
+
+#ifdef __GLEE_GL_VERSION_1_3
+#ifndef GLEE_C_DEFINED_glActiveTexture
+#define GLEE_C_DEFINED_glActiveTexture
+  void __stdcall GLee_Lazy_glActiveTexture(GLenum  texture)  {if (GLeeInit()) glActiveTexture(texture);}
+  GLEEPFNGLACTIVETEXTUREPROC GLeeFuncPtr_glActiveTexture=GLee_Lazy_glActiveTexture;
+#endif
+#ifndef GLEE_C_DEFINED_glSampleCoverage
+#define GLEE_C_DEFINED_glSampleCoverage
+  void __stdcall GLee_Lazy_glSampleCoverage(GLclampf  value, GLboolean  invert)  {if (GLeeInit()) glSampleCoverage(value, invert);}
+  GLEEPFNGLSAMPLECOVERAGEPROC GLeeFuncPtr_glSampleCoverage=GLee_Lazy_glSampleCoverage;
+#endif
+#ifndef GLEE_C_DEFINED_glCompressedTexImage3D
+#define GLEE_C_DEFINED_glCompressedTexImage3D
+  void __stdcall GLee_Lazy_glCompressedTexImage3D(GLenum  target, GLint  level, GLenum  internalformat, GLsizei  width, GLsizei  height, GLsizei  depth, GLint  border, GLsizei  imageSize, const GLvoid * data)  {if (GLeeInit()) glCompressedTexImage3D(target, level, internalformat, width, height, depth, border, imageSize, data);}
+  GLEEPFNGLCOMPRESSEDTEXIMAGE3DPROC GLeeFuncPtr_glCompressedTexImage3D=GLee_Lazy_glCompressedTexImage3D;
+#endif
+#ifndef GLEE_C_DEFINED_glCompressedTexImage2D
+#define GLEE_C_DEFINED_glCompressedTexImage2D
+  void __stdcall GLee_Lazy_glCompressedTexImage2D(GLenum  target, GLint  level, GLenum  internalformat, GLsizei  width, GLsizei  height, GLint  border, GLsizei  imageSize, const GLvoid * data)  {if (GLeeInit()) glCompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data);}
+  GLEEPFNGLCOMPRESSEDTEXIMAGE2DPROC GLeeFuncPtr_glCompressedTexImage2D=GLee_Lazy_glCompressedTexImage2D;
+#endif
+#ifndef GLEE_C_DEFINED_glCompressedTexImage1D
+#define GLEE_C_DEFINED_glCompressedTexImage1D
+  void __stdcall GLee_Lazy_glCompressedTexImage1D(GLenum  target, GLint  level, GLenum  internalformat, GLsizei  width, GLint  border, GLsizei  imageSize, const GLvoid * data)  {if (GLeeInit()) glCompressedTexImage1D(target, level, internalformat, width, border, imageSize, data);}
+  GLEEPFNGLCOMPRESSEDTEXIMAGE1DPROC GLeeFuncPtr_glCompressedTexImage1D=GLee_Lazy_glCompressedTexImage1D;
+#endif
+#ifndef GLEE_C_DEFINED_glCompressedTexSubImage3D
+#define GLEE_C_DEFINED_glCompressedTexSubImage3D
+  void __stdcall GLee_Lazy_glCompressedTexSubImage3D(GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLint  zoffset, GLsizei  width, GLsizei  height, GLsizei  depth, GLenum  format, GLsizei  imageSize, const GLvoid * data)  {if (GLeeInit()) glCompressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);}
+  GLEEPFNGLCOMPRESSEDTEXSUBIMAGE3DPROC GLeeFuncPtr_glCompressedTexSubImage3D=GLee_Lazy_glCompressedTexSubImage3D;
+#endif
+#ifndef GLEE_C_DEFINED_glCompressedTexSubImage2D
+#define GLEE_C_DEFINED_glCompressedTexSubImage2D
+  void __stdcall GLee_Lazy_glCompressedTexSubImage2D(GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLsizei  width, GLsizei  height, GLenum  format, GLsizei  imageSize, const GLvoid * data)  {if (GLeeInit()) glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data);}
+  GLEEPFNGLCOMPRESSEDTEXSUBIMAGE2DPROC GLeeFuncPtr_glCompressedTexSubImage2D=GLee_Lazy_glCompressedTexSubImage2D;
+#endif
+#ifndef GLEE_C_DEFINED_glCompressedTexSubImage1D
+#define GLEE_C_DEFINED_glCompressedTexSubImage1D
+  void __stdcall GLee_Lazy_glCompressedTexSubImage1D(GLenum  target, GLint  level, GLint  xoffset, GLsizei  width, GLenum  format, GLsizei  imageSize, const GLvoid * data)  {if (GLeeInit()) glCompressedTexSubImage1D(target, level, xoffset, width, format, imageSize, data);}
+  GLEEPFNGLCOMPRESSEDTEXSUBIMAGE1DPROC GLeeFuncPtr_glCompressedTexSubImage1D=GLee_Lazy_glCompressedTexSubImage1D;
+#endif
+#ifndef GLEE_C_DEFINED_glGetCompressedTexImage
+#define GLEE_C_DEFINED_glGetCompressedTexImage
+  void __stdcall GLee_Lazy_glGetCompressedTexImage(GLenum  target, GLint  level, GLvoid * img)  {if (GLeeInit()) glGetCompressedTexImage(target, level, img);}
+  GLEEPFNGLGETCOMPRESSEDTEXIMAGEPROC GLeeFuncPtr_glGetCompressedTexImage=GLee_Lazy_glGetCompressedTexImage;
+#endif
+#ifndef GLEE_C_DEFINED_glClientActiveTexture
+#define GLEE_C_DEFINED_glClientActiveTexture
+  void __stdcall GLee_Lazy_glClientActiveTexture(GLenum  texture)  {if (GLeeInit()) glClientActiveTexture(texture);}
+  GLEEPFNGLCLIENTACTIVETEXTUREPROC GLeeFuncPtr_glClientActiveTexture=GLee_Lazy_glClientActiveTexture;
+#endif
+#ifndef GLEE_C_DEFINED_glMultiTexCoord1d
+#define GLEE_C_DEFINED_glMultiTexCoord1d
+  void __stdcall GLee_Lazy_glMultiTexCoord1d(GLenum  target, GLdouble  s)  {if (GLeeInit()) glMultiTexCoord1d(target, s);}
+  GLEEPFNGLMULTITEXCOORD1DPROC GLeeFuncPtr_glMultiTexCoord1d=GLee_Lazy_glMultiTexCoord1d;
+#endif
+#ifndef GLEE_C_DEFINED_glMultiTexCoord1dv
+#define GLEE_C_DEFINED_glMultiTexCoord1dv
+  void __stdcall GLee_Lazy_glMultiTexCoord1dv(GLenum  target, const GLdouble * v)  {if (GLeeInit()) glMultiTexCoord1dv(target, v);}
+  GLEEPFNGLMULTITEXCOORD1DVPROC GLeeFuncPtr_glMultiTexCoord1dv=GLee_Lazy_glMultiTexCoord1dv;
+#endif
+#ifndef GLEE_C_DEFINED_glMultiTexCoord1f
+#define GLEE_C_DEFINED_glMultiTexCoord1f
+  void __stdcall GLee_Lazy_glMultiTexCoord1f(GLenum  target, GLfloat  s)  {if (GLeeInit()) glMultiTexCoord1f(target, s);}
+  GLEEPFNGLMULTITEXCOORD1FPROC GLeeFuncPtr_glMultiTexCoord1f=GLee_Lazy_glMultiTexCoord1f;
+#endif
+#ifndef GLEE_C_DEFINED_glMultiTexCoord1fv
+#define GLEE_C_DEFINED_glMultiTexCoord1fv
+  void __stdcall GLee_Lazy_glMultiTexCoord1fv(GLenum  target, const GLfloat * v)  {if (GLeeInit()) glMultiTexCoord1fv(target, v);}
+  GLEEPFNGLMULTITEXCOORD1FVPROC GLeeFuncPtr_glMultiTexCoord1fv=GLee_Lazy_glMultiTexCoord1fv;
+#endif
+#ifndef GLEE_C_DEFINED_glMultiTexCoord1i
+#define GLEE_C_DEFINED_glMultiTexCoord1i
+  void __stdcall GLee_Lazy_glMultiTexCoord1i(GLenum  target, GLint  s)  {if (GLeeInit()) glMultiTexCoord1i(target, s);}
+  GLEEPFNGLMULTITEXCOORD1IPROC GLeeFuncPtr_glMultiTexCoord1i=GLee_Lazy_glMultiTexCoord1i;
+#endif
+#ifndef GLEE_C_DEFINED_glMultiTexCoord1iv
+#define GLEE_C_DEFINED_glMultiTexCoord1iv
+  void __stdcall GLee_Lazy_glMultiTexCoord1iv(GLenum  target, const GLint * v)  {if (GLeeInit()) glMultiTexCoord1iv(target, v);}
+  GLEEPFNGLMULTITEXCOORD1IVPROC GLeeFuncPtr_glMultiTexCoord1iv=GLee_Lazy_glMultiTexCoord1iv;
+#endif
+#ifndef GLEE_C_DEFINED_glMultiTexCoord1s
+#define GLEE_C_DEFINED_glMultiTexCoord1s
+  void __stdcall GLee_Lazy_glMultiTexCoord1s(GLenum  target, GLshort  s)  {if (GLeeInit()) glMultiTexCoord1s(target, s);}
+  GLEEPFNGLMULTITEXCOORD1SPROC GLeeFuncPtr_glMultiTexCoord1s=GLee_Lazy_glMultiTexCoord1s;
+#endif
+#ifndef GLEE_C_DEFINED_glMultiTexCoord1sv
+#define GLEE_C_DEFINED_glMultiTexCoord1sv
+  void __stdcall GLee_Lazy_glMultiTexCoord1sv(GLenum  target, const GLshort * v)  {if (GLeeInit()) glMultiTexCoord1sv(target, v);}
+  GLEEPFNGLMULTITEXCOORD1SVPROC GLeeFuncPtr_glMultiTexCoord1sv=GLee_Lazy_glMultiTexCoord1sv;
+#endif
+#ifndef GLEE_C_DEFINED_glMultiTexCoord2d
+#define GLEE_C_DEFINED_glMultiTexCoord2d
+  void __stdcall GLee_Lazy_glMultiTexCoord2d(GLenum  target, GLdouble  s, GLdouble  t)  {if (GLeeInit()) glMultiTexCoord2d(target, s, t);}
+  GLEEPFNGLMULTITEXCOORD2DPROC GLeeFuncPtr_glMultiTexCoord2d=GLee_Lazy_glMultiTexCoord2d;
+#endif
+#ifndef GLEE_C_DEFINED_glMultiTexCoord2dv
+#define GLEE_C_DEFINED_glMultiTexCoord2dv
+  void __stdcall GLee_Lazy_glMultiTexCoord2dv(GLenum  target, const GLdouble * v)  {if (GLeeInit()) glMultiTexCoord2dv(target, v);}
+  GLEEPFNGLMULTITEXCOORD2DVPROC GLeeFuncPtr_glMultiTexCoord2dv=GLee_Lazy_glMultiTexCoord2dv;
+#endif
+#ifndef GLEE_C_DEFINED_glMultiTexCoord2f
+#define GLEE_C_DEFINED_glMultiTexCoord2f
+  void __stdcall GLee_Lazy_glMultiTexCoord2f(GLenum  target, GLfloat  s, GLfloat  t)  {if (GLeeInit()) glMultiTexCoord2f(target, s, t);}
+  GLEEPFNGLMULTITEXCOORD2FPROC GLeeFuncPtr_glMultiTexCoord2f=GLee_Lazy_glMultiTexCoord2f;
+#endif
+#ifndef GLEE_C_DEFINED_glMultiTexCoord2fv
+#define GLEE_C_DEFINED_glMultiTexCoord2fv
+  void __stdcall GLee_Lazy_glMultiTexCoord2fv(GLenum  target, const GLfloat * v)  {if (GLeeInit()) glMultiTexCoord2fv(target, v);}
+  GLEEPFNGLMULTITEXCOORD2FVPROC GLeeFuncPtr_glMultiTexCoord2fv=GLee_Lazy_glMultiTexCoord2fv;
+#endif
+#ifndef GLEE_C_DEFINED_glMultiTexCoord2i
+#define GLEE_C_DEFINED_glMultiTexCoord2i
+  void __stdcall GLee_Lazy_glMultiTexCoord2i(GLenum  target, GLint  s, GLint  t)  {if (GLeeInit()) glMultiTexCoord2i(target, s, t);}
+  GLEEPFNGLMULTITEXCOORD2IPROC GLeeFuncPtr_glMultiTexCoord2i=GLee_Lazy_glMultiTexCoord2i;
+#endif
+#ifndef GLEE_C_DEFINED_glMultiTexCoord2iv
+#define GLEE_C_DEFINED_glMultiTexCoord2iv
+  void __stdcall GLee_Lazy_glMultiTexCoord2iv(GLenum  target, const GLint * v)  {if (GLeeInit()) glMultiTexCoord2iv(target, v);}
+  GLEEPFNGLMULTITEXCOORD2IVPROC GLeeFuncPtr_glMultiTexCoord2iv=GLee_Lazy_glMultiTexCoord2iv;
+#endif
+#ifndef GLEE_C_DEFINED_glMultiTexCoord2s
+#define GLEE_C_DEFINED_glMultiTexCoord2s
+  void __stdcall GLee_Lazy_glMultiTexCoord2s(GLenum  target, GLshort  s, GLshort  t)  {if (GLeeInit()) glMultiTexCoord2s(target, s, t);}
+  GLEEPFNGLMULTITEXCOORD2SPROC GLeeFuncPtr_glMultiTexCoord2s=GLee_Lazy_glMultiTexCoord2s;
+#endif
+#ifndef GLEE_C_DEFINED_glMultiTexCoord2sv
+#define GLEE_C_DEFINED_glMultiTexCoord2sv
+  void __stdcall GLee_Lazy_glMultiTexCoord2sv(GLenum  target, const GLshort * v)  {if (GLeeInit()) glMultiTexCoord2sv(target, v);}
+  GLEEPFNGLMULTITEXCOORD2SVPROC GLeeFuncPtr_glMultiTexCoord2sv=GLee_Lazy_glMultiTexCoord2sv;
+#endif
+#ifndef GLEE_C_DEFINED_glMultiTexCoord3d
+#define GLEE_C_DEFINED_glMultiTexCoord3d
+  void __stdcall GLee_Lazy_glMultiTexCoord3d(GLenum  target, GLdouble  s, GLdouble  t, GLdouble  r)  {if (GLeeInit()) glMultiTexCoord3d(target, s, t, r);}
+  GLEEPFNGLMULTITEXCOORD3DPROC GLeeFuncPtr_glMultiTexCoord3d=GLee_Lazy_glMultiTexCoord3d;
+#endif
+#ifndef GLEE_C_DEFINED_glMultiTexCoord3dv
+#define GLEE_C_DEFINED_glMultiTexCoord3dv
+  void __stdcall GLee_Lazy_glMultiTexCoord3dv(GLenum  target, const GLdouble * v)  {if (GLeeInit()) glMultiTexCoord3dv(target, v);}
+  GLEEPFNGLMULTITEXCOORD3DVPROC GLeeFuncPtr_glMultiTexCoord3dv=GLee_Lazy_glMultiTexCoord3dv;
+#endif
+#ifndef GLEE_C_DEFINED_glMultiTexCoord3f
+#define GLEE_C_DEFINED_glMultiTexCoord3f
+  void __stdcall GLee_Lazy_glMultiTexCoord3f(GLenum  target, GLfloat  s, GLfloat  t, GLfloat  r)  {if (GLeeInit()) glMultiTexCoord3f(target, s, t, r);}
+  GLEEPFNGLMULTITEXCOORD3FPROC GLeeFuncPtr_glMultiTexCoord3f=GLee_Lazy_glMultiTexCoord3f;
+#endif
+#ifndef GLEE_C_DEFINED_glMultiTexCoord3fv
+#define GLEE_C_DEFINED_glMultiTexCoord3fv
+  void __stdcall GLee_Lazy_glMultiTexCoord3fv(GLenum  target, const GLfloat * v)  {if (GLeeInit()) glMultiTexCoord3fv(target, v);}
+  GLEEPFNGLMULTITEXCOORD3FVPROC GLeeFuncPtr_glMultiTexCoord3fv=GLee_Lazy_glMultiTexCoord3fv;
+#endif
+#ifndef GLEE_C_DEFINED_glMultiTexCoord3i
+#define GLEE_C_DEFINED_glMultiTexCoord3i
+  void __stdcall GLee_Lazy_glMultiTexCoord3i(GLenum  target, GLint  s, GLint  t, GLint  r)  {if (GLeeInit()) glMultiTexCoord3i(target, s, t, r);}
+  GLEEPFNGLMULTITEXCOORD3IPROC GLeeFuncPtr_glMultiTexCoord3i=GLee_Lazy_glMultiTexCoord3i;
+#endif
+#ifndef GLEE_C_DEFINED_glMultiTexCoord3iv
+#define GLEE_C_DEFINED_glMultiTexCoord3iv
+  void __stdcall GLee_Lazy_glMultiTexCoord3iv(GLenum  target, const GLint * v)  {if (GLeeInit()) glMultiTexCoord3iv(target, v);}
+  GLEEPFNGLMULTITEXCOORD3IVPROC GLeeFuncPtr_glMultiTexCoord3iv=GLee_Lazy_glMultiTexCoord3iv;
+#endif
+#ifndef GLEE_C_DEFINED_glMultiTexCoord3s
+#define GLEE_C_DEFINED_glMultiTexCoord3s
+  void __stdcall GLee_Lazy_glMultiTexCoord3s(GLenum  target, GLshort  s, GLshort  t, GLshort  r)  {if (GLeeInit()) glMultiTexCoord3s(target, s, t, r);}
+  GLEEPFNGLMULTITEXCOORD3SPROC GLeeFuncPtr_glMultiTexCoord3s=GLee_Lazy_glMultiTexCoord3s;
+#endif
+#ifndef GLEE_C_DEFINED_glMultiTexCoord3sv
+#define GLEE_C_DEFINED_glMultiTexCoord3sv
+  void __stdcall GLee_Lazy_glMultiTexCoord3sv(GLenum  target, const GLshort * v)  {if (GLeeInit()) glMultiTexCoord3sv(target, v);}
+  GLEEPFNGLMULTITEXCOORD3SVPROC GLeeFuncPtr_glMultiTexCoord3sv=GLee_Lazy_glMultiTexCoord3sv;
+#endif
+#ifndef GLEE_C_DEFINED_glMultiTexCoord4d
+#define GLEE_C_DEFINED_glMultiTexCoord4d
+  void __stdcall GLee_Lazy_glMultiTexCoord4d(GLenum  target, GLdouble  s, GLdouble  t, GLdouble  r, GLdouble  q)  {if (GLeeInit()) glMultiTexCoord4d(target, s, t, r, q);}
+  GLEEPFNGLMULTITEXCOORD4DPROC GLeeFuncPtr_glMultiTexCoord4d=GLee_Lazy_glMultiTexCoord4d;
+#endif
+#ifndef GLEE_C_DEFINED_glMultiTexCoord4dv
+#define GLEE_C_DEFINED_glMultiTexCoord4dv
+  void __stdcall GLee_Lazy_glMultiTexCoord4dv(GLenum  target, const GLdouble * v)  {if (GLeeInit()) glMultiTexCoord4dv(target, v);}
+  GLEEPFNGLMULTITEXCOORD4DVPROC GLeeFuncPtr_glMultiTexCoord4dv=GLee_Lazy_glMultiTexCoord4dv;
+#endif
+#ifndef GLEE_C_DEFINED_glMultiTexCoord4f
+#define GLEE_C_DEFINED_glMultiTexCoord4f
+  void __stdcall GLee_Lazy_glMultiTexCoord4f(GLenum  target, GLfloat  s, GLfloat  t, GLfloat  r, GLfloat  q)  {if (GLeeInit()) glMultiTexCoord4f(target, s, t, r, q);}
+  GLEEPFNGLMULTITEXCOORD4FPROC GLeeFuncPtr_glMultiTexCoord4f=GLee_Lazy_glMultiTexCoord4f;
+#endif
+#ifndef GLEE_C_DEFINED_glMultiTexCoord4fv
+#define GLEE_C_DEFINED_glMultiTexCoord4fv
+  void __stdcall GLee_Lazy_glMultiTexCoord4fv(GLenum  target, const GLfloat * v)  {if (GLeeInit()) glMultiTexCoord4fv(target, v);}
+  GLEEPFNGLMULTITEXCOORD4FVPROC GLeeFuncPtr_glMultiTexCoord4fv=GLee_Lazy_glMultiTexCoord4fv;
+#endif
+#ifndef GLEE_C_DEFINED_glMultiTexCoord4i
+#define GLEE_C_DEFINED_glMultiTexCoord4i
+  void __stdcall GLee_Lazy_glMultiTexCoord4i(GLenum  target, GLint  s, GLint  t, GLint  r, GLint  q)  {if (GLeeInit()) glMultiTexCoord4i(target, s, t, r, q);}
+  GLEEPFNGLMULTITEXCOORD4IPROC GLeeFuncPtr_glMultiTexCoord4i=GLee_Lazy_glMultiTexCoord4i;
+#endif
+#ifndef GLEE_C_DEFINED_glMultiTexCoord4iv
+#define GLEE_C_DEFINED_glMultiTexCoord4iv
+  void __stdcall GLee_Lazy_glMultiTexCoord4iv(GLenum  target, const GLint * v)  {if (GLeeInit()) glMultiTexCoord4iv(target, v);}
+  GLEEPFNGLMULTITEXCOORD4IVPROC GLeeFuncPtr_glMultiTexCoord4iv=GLee_Lazy_glMultiTexCoord4iv;
+#endif
+#ifndef GLEE_C_DEFINED_glMultiTexCoord4s
+#define GLEE_C_DEFINED_glMultiTexCoord4s
+  void __stdcall GLee_Lazy_glMultiTexCoord4s(GLenum  target, GLshort  s, GLshort  t, GLshort  r, GLshort  q)  {if (GLeeInit()) glMultiTexCoord4s(target, s, t, r, q);}
+  GLEEPFNGLMULTITEXCOORD4SPROC GLeeFuncPtr_glMultiTexCoord4s=GLee_Lazy_glMultiTexCoord4s;
+#endif
+#ifndef GLEE_C_DEFINED_glMultiTexCoord4sv
+#define GLEE_C_DEFINED_glMultiTexCoord4sv
+  void __stdcall GLee_Lazy_glMultiTexCoord4sv(GLenum  target, const GLshort * v)  {if (GLeeInit()) glMultiTexCoord4sv(target, v);}
+  GLEEPFNGLMULTITEXCOORD4SVPROC GLeeFuncPtr_glMultiTexCoord4sv=GLee_Lazy_glMultiTexCoord4sv;
+#endif
+#ifndef GLEE_C_DEFINED_glLoadTransposeMatrixf
+#define GLEE_C_DEFINED_glLoadTransposeMatrixf
+  void __stdcall GLee_Lazy_glLoadTransposeMatrixf(const GLfloat * m)  {if (GLeeInit()) glLoadTransposeMatrixf(m);}
+  GLEEPFNGLLOADTRANSPOSEMATRIXFPROC GLeeFuncPtr_glLoadTransposeMatrixf=GLee_Lazy_glLoadTransposeMatrixf;
+#endif
+#ifndef GLEE_C_DEFINED_glLoadTransposeMatrixd
+#define GLEE_C_DEFINED_glLoadTransposeMatrixd
+  void __stdcall GLee_Lazy_glLoadTransposeMatrixd(const GLdouble * m)  {if (GLeeInit()) glLoadTransposeMatrixd(m);}
+  GLEEPFNGLLOADTRANSPOSEMATRIXDPROC GLeeFuncPtr_glLoadTransposeMatrixd=GLee_Lazy_glLoadTransposeMatrixd;
+#endif
+#ifndef GLEE_C_DEFINED_glMultTransposeMatrixf
+#define GLEE_C_DEFINED_glMultTransposeMatrixf
+  void __stdcall GLee_Lazy_glMultTransposeMatrixf(const GLfloat * m)  {if (GLeeInit()) glMultTransposeMatrixf(m);}
+  GLEEPFNGLMULTTRANSPOSEMATRIXFPROC GLeeFuncPtr_glMultTransposeMatrixf=GLee_Lazy_glMultTransposeMatrixf;
+#endif
+#ifndef GLEE_C_DEFINED_glMultTransposeMatrixd
+#define GLEE_C_DEFINED_glMultTransposeMatrixd
+  void __stdcall GLee_Lazy_glMultTransposeMatrixd(const GLdouble * m)  {if (GLeeInit()) glMultTransposeMatrixd(m);}
+  GLEEPFNGLMULTTRANSPOSEMATRIXDPROC GLeeFuncPtr_glMultTransposeMatrixd=GLee_Lazy_glMultTransposeMatrixd;
+#endif
+#endif 
+
+/* GL_VERSION_1_4 */
+
+#ifdef __GLEE_GL_VERSION_1_4
+#ifndef GLEE_C_DEFINED_glBlendFuncSeparate
+#define GLEE_C_DEFINED_glBlendFuncSeparate
+  void __stdcall GLee_Lazy_glBlendFuncSeparate(GLenum  sfactorRGB, GLenum  dfactorRGB, GLenum  sfactorAlpha, GLenum  dfactorAlpha)  {if (GLeeInit()) glBlendFuncSeparate(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);}
+  GLEEPFNGLBLENDFUNCSEPARATEPROC GLeeFuncPtr_glBlendFuncSeparate=GLee_Lazy_glBlendFuncSeparate;
+#endif
+#ifndef GLEE_C_DEFINED_glMultiDrawArrays
+#define GLEE_C_DEFINED_glMultiDrawArrays
+  void __stdcall GLee_Lazy_glMultiDrawArrays(GLenum  mode, const GLint * first, const GLsizei * count, GLsizei  primcount)  {if (GLeeInit()) glMultiDrawArrays(mode, first, count, primcount);}
+  GLEEPFNGLMULTIDRAWARRAYSPROC GLeeFuncPtr_glMultiDrawArrays=GLee_Lazy_glMultiDrawArrays;
+#endif
+#ifndef GLEE_C_DEFINED_glMultiDrawElements
+#define GLEE_C_DEFINED_glMultiDrawElements
+  void __stdcall GLee_Lazy_glMultiDrawElements(GLenum  mode, const GLsizei * count, GLenum  type, const GLvoid* * indices, GLsizei  primcount)  {if (GLeeInit()) glMultiDrawElements(mode, count, type, indices, primcount);}
+  GLEEPFNGLMULTIDRAWELEMENTSPROC GLeeFuncPtr_glMultiDrawElements=GLee_Lazy_glMultiDrawElements;
+#endif
+#ifndef GLEE_C_DEFINED_glPointParameterf
+#define GLEE_C_DEFINED_glPointParameterf
+  void __stdcall GLee_Lazy_glPointParameterf(GLenum  pname, GLfloat  param)  {if (GLeeInit()) glPointParameterf(pname, param);}
+  GLEEPFNGLPOINTPARAMETERFPROC GLeeFuncPtr_glPointParameterf=GLee_Lazy_glPointParameterf;
+#endif
+#ifndef GLEE_C_DEFINED_glPointParameterfv
+#define GLEE_C_DEFINED_glPointParameterfv
+  void __stdcall GLee_Lazy_glPointParameterfv(GLenum  pname, const GLfloat * params)  {if (GLeeInit()) glPointParameterfv(pname, params);}
+  GLEEPFNGLPOINTPARAMETERFVPROC GLeeFuncPtr_glPointParameterfv=GLee_Lazy_glPointParameterfv;
+#endif
+#ifndef GLEE_C_DEFINED_glPointParameteri
+#define GLEE_C_DEFINED_glPointParameteri
+  void __stdcall GLee_Lazy_glPointParameteri(GLenum  pname, GLint  param)  {if (GLeeInit()) glPointParameteri(pname, param);}
+  GLEEPFNGLPOINTPARAMETERIPROC GLeeFuncPtr_glPointParameteri=GLee_Lazy_glPointParameteri;
+#endif
+#ifndef GLEE_C_DEFINED_glPointParameteriv
+#define GLEE_C_DEFINED_glPointParameteriv
+  void __stdcall GLee_Lazy_glPointParameteriv(GLenum  pname, const GLint * params)  {if (GLeeInit()) glPointParameteriv(pname, params);}
+  GLEEPFNGLPOINTPARAMETERIVPROC GLeeFuncPtr_glPointParameteriv=GLee_Lazy_glPointParameteriv;
+#endif
+#ifndef GLEE_C_DEFINED_glFogCoordf
+#define GLEE_C_DEFINED_glFogCoordf
+  void __stdcall GLee_Lazy_glFogCoordf(GLfloat  coord)  {if (GLeeInit()) glFogCoordf(coord);}
+  GLEEPFNGLFOGCOORDFPROC GLeeFuncPtr_glFogCoordf=GLee_Lazy_glFogCoordf;
+#endif
+#ifndef GLEE_C_DEFINED_glFogCoordfv
+#define GLEE_C_DEFINED_glFogCoordfv
+  void __stdcall GLee_Lazy_glFogCoordfv(const GLfloat * coord)  {if (GLeeInit()) glFogCoordfv(coord);}
+  GLEEPFNGLFOGCOORDFVPROC GLeeFuncPtr_glFogCoordfv=GLee_Lazy_glFogCoordfv;
+#endif
+#ifndef GLEE_C_DEFINED_glFogCoordd
+#define GLEE_C_DEFINED_glFogCoordd
+  void __stdcall GLee_Lazy_glFogCoordd(GLdouble  coord)  {if (GLeeInit()) glFogCoordd(coord);}
+  GLEEPFNGLFOGCOORDDPROC GLeeFuncPtr_glFogCoordd=GLee_Lazy_glFogCoordd;
+#endif
+#ifndef GLEE_C_DEFINED_glFogCoorddv
+#define GLEE_C_DEFINED_glFogCoorddv
+  void __stdcall GLee_Lazy_glFogCoorddv(const GLdouble * coord)  {if (GLeeInit()) glFogCoorddv(coord);}
+  GLEEPFNGLFOGCOORDDVPROC GLeeFuncPtr_glFogCoorddv=GLee_Lazy_glFogCoorddv;
+#endif
+#ifndef GLEE_C_DEFINED_glFogCoordPointer
+#define GLEE_C_DEFINED_glFogCoordPointer
+  void __stdcall GLee_Lazy_glFogCoordPointer(GLenum  type, GLsizei  stride, const GLvoid * pointer)  {if (GLeeInit()) glFogCoordPointer(type, stride, pointer);}
+  GLEEPFNGLFOGCOORDPOINTERPROC GLeeFuncPtr_glFogCoordPointer=GLee_Lazy_glFogCoordPointer;
+#endif
+#ifndef GLEE_C_DEFINED_glSecondaryColor3b
+#define GLEE_C_DEFINED_glSecondaryColor3b
+  void __stdcall GLee_Lazy_glSecondaryColor3b(GLbyte  red, GLbyte  green, GLbyte  blue)  {if (GLeeInit()) glSecondaryColor3b(red, green, blue);}
+  GLEEPFNGLSECONDARYCOLOR3BPROC GLeeFuncPtr_glSecondaryColor3b=GLee_Lazy_glSecondaryColor3b;
+#endif
+#ifndef GLEE_C_DEFINED_glSecondaryColor3bv
+#define GLEE_C_DEFINED_glSecondaryColor3bv
+  void __stdcall GLee_Lazy_glSecondaryColor3bv(const GLbyte * v)  {if (GLeeInit()) glSecondaryColor3bv(v);}
+  GLEEPFNGLSECONDARYCOLOR3BVPROC GLeeFuncPtr_glSecondaryColor3bv=GLee_Lazy_glSecondaryColor3bv;
+#endif
+#ifndef GLEE_C_DEFINED_glSecondaryColor3d
+#define GLEE_C_DEFINED_glSecondaryColor3d
+  void __stdcall GLee_Lazy_glSecondaryColor3d(GLdouble  red, GLdouble  green, GLdouble  blue)  {if (GLeeInit()) glSecondaryColor3d(red, green, blue);}
+  GLEEPFNGLSECONDARYCOLOR3DPROC GLeeFuncPtr_glSecondaryColor3d=GLee_Lazy_glSecondaryColor3d;
+#endif
+#ifndef GLEE_C_DEFINED_glSecondaryColor3dv
+#define GLEE_C_DEFINED_glSecondaryColor3dv
+  void __stdcall GLee_Lazy_glSecondaryColor3dv(const GLdouble * v)  {if (GLeeInit()) glSecondaryColor3dv(v);}
+  GLEEPFNGLSECONDARYCOLOR3DVPROC GLeeFuncPtr_glSecondaryColor3dv=GLee_Lazy_glSecondaryColor3dv;
+#endif
+#ifndef GLEE_C_DEFINED_glSecondaryColor3f
+#define GLEE_C_DEFINED_glSecondaryColor3f
+  void __stdcall GLee_Lazy_glSecondaryColor3f(GLfloat  red, GLfloat  green, GLfloat  blue)  {if (GLeeInit()) glSecondaryColor3f(red, green, blue);}
+  GLEEPFNGLSECONDARYCOLOR3FPROC GLeeFuncPtr_glSecondaryColor3f=GLee_Lazy_glSecondaryColor3f;
+#endif
+#ifndef GLEE_C_DEFINED_glSecondaryColor3fv
+#define GLEE_C_DEFINED_glSecondaryColor3fv
+  void __stdcall GLee_Lazy_glSecondaryColor3fv(const GLfloat * v)  {if (GLeeInit()) glSecondaryColor3fv(v);}
+  GLEEPFNGLSECONDARYCOLOR3FVPROC GLeeFuncPtr_glSecondaryColor3fv=GLee_Lazy_glSecondaryColor3fv;
+#endif
+#ifndef GLEE_C_DEFINED_glSecondaryColor3i
+#define GLEE_C_DEFINED_glSecondaryColor3i
+  void __stdcall GLee_Lazy_glSecondaryColor3i(GLint  red, GLint  green, GLint  blue)  {if (GLeeInit()) glSecondaryColor3i(red, green, blue);}
+  GLEEPFNGLSECONDARYCOLOR3IPROC GLeeFuncPtr_glSecondaryColor3i=GLee_Lazy_glSecondaryColor3i;
+#endif
+#ifndef GLEE_C_DEFINED_glSecondaryColor3iv
+#define GLEE_C_DEFINED_glSecondaryColor3iv
+  void __stdcall GLee_Lazy_glSecondaryColor3iv(const GLint * v)  {if (GLeeInit()) glSecondaryColor3iv(v);}
+  GLEEPFNGLSECONDARYCOLOR3IVPROC GLeeFuncPtr_glSecondaryColor3iv=GLee_Lazy_glSecondaryColor3iv;
+#endif
+#ifndef GLEE_C_DEFINED_glSecondaryColor3s
+#define GLEE_C_DEFINED_glSecondaryColor3s
+  void __stdcall GLee_Lazy_glSecondaryColor3s(GLshort  red, GLshort  green, GLshort  blue)  {if (GLeeInit()) glSecondaryColor3s(red, green, blue);}
+  GLEEPFNGLSECONDARYCOLOR3SPROC GLeeFuncPtr_glSecondaryColor3s=GLee_Lazy_glSecondaryColor3s;
+#endif
+#ifndef GLEE_C_DEFINED_glSecondaryColor3sv
+#define GLEE_C_DEFINED_glSecondaryColor3sv
+  void __stdcall GLee_Lazy_glSecondaryColor3sv(const GLshort * v)  {if (GLeeInit()) glSecondaryColor3sv(v);}
+  GLEEPFNGLSECONDARYCOLOR3SVPROC GLeeFuncPtr_glSecondaryColor3sv=GLee_Lazy_glSecondaryColor3sv;
+#endif
+#ifndef GLEE_C_DEFINED_glSecondaryColor3ub
+#define GLEE_C_DEFINED_glSecondaryColor3ub
+  void __stdcall GLee_Lazy_glSecondaryColor3ub(GLubyte  red, GLubyte  green, GLubyte  blue)  {if (GLeeInit()) glSecondaryColor3ub(red, green, blue);}
+  GLEEPFNGLSECONDARYCOLOR3UBPROC GLeeFuncPtr_glSecondaryColor3ub=GLee_Lazy_glSecondaryColor3ub;
+#endif
+#ifndef GLEE_C_DEFINED_glSecondaryColor3ubv
+#define GLEE_C_DEFINED_glSecondaryColor3ubv
+  void __stdcall GLee_Lazy_glSecondaryColor3ubv(const GLubyte * v)  {if (GLeeInit()) glSecondaryColor3ubv(v);}
+  GLEEPFNGLSECONDARYCOLOR3UBVPROC GLeeFuncPtr_glSecondaryColor3ubv=GLee_Lazy_glSecondaryColor3ubv;
+#endif
+#ifndef GLEE_C_DEFINED_glSecondaryColor3ui
+#define GLEE_C_DEFINED_glSecondaryColor3ui
+  void __stdcall GLee_Lazy_glSecondaryColor3ui(GLuint  red, GLuint  green, GLuint  blue)  {if (GLeeInit()) glSecondaryColor3ui(red, green, blue);}
+  GLEEPFNGLSECONDARYCOLOR3UIPROC GLeeFuncPtr_glSecondaryColor3ui=GLee_Lazy_glSecondaryColor3ui;
+#endif
+#ifndef GLEE_C_DEFINED_glSecondaryColor3uiv
+#define GLEE_C_DEFINED_glSecondaryColor3uiv
+  void __stdcall GLee_Lazy_glSecondaryColor3uiv(const GLuint * v)  {if (GLeeInit()) glSecondaryColor3uiv(v);}
+  GLEEPFNGLSECONDARYCOLOR3UIVPROC GLeeFuncPtr_glSecondaryColor3uiv=GLee_Lazy_glSecondaryColor3uiv;
+#endif
+#ifndef GLEE_C_DEFINED_glSecondaryColor3us
+#define GLEE_C_DEFINED_glSecondaryColor3us
+  void __stdcall GLee_Lazy_glSecondaryColor3us(GLushort  red, GLushort  green, GLushort  blue)  {if (GLeeInit()) glSecondaryColor3us(red, green, blue);}
+  GLEEPFNGLSECONDARYCOLOR3USPROC GLeeFuncPtr_glSecondaryColor3us=GLee_Lazy_glSecondaryColor3us;
+#endif
+#ifndef GLEE_C_DEFINED_glSecondaryColor3usv
+#define GLEE_C_DEFINED_glSecondaryColor3usv
+  void __stdcall GLee_Lazy_glSecondaryColor3usv(const GLushort * v)  {if (GLeeInit()) glSecondaryColor3usv(v);}
+  GLEEPFNGLSECONDARYCOLOR3USVPROC GLeeFuncPtr_glSecondaryColor3usv=GLee_Lazy_glSecondaryColor3usv;
+#endif
+#ifndef GLEE_C_DEFINED_glSecondaryColorPointer
+#define GLEE_C_DEFINED_glSecondaryColorPointer
+  void __stdcall GLee_Lazy_glSecondaryColorPointer(GLint  size, GLenum  type, GLsizei  stride, const GLvoid * pointer)  {if (GLeeInit()) glSecondaryColorPointer(size, type, stride, pointer);}
+  GLEEPFNGLSECONDARYCOLORPOINTERPROC GLeeFuncPtr_glSecondaryColorPointer=GLee_Lazy_glSecondaryColorPointer;
+#endif
+#ifndef GLEE_C_DEFINED_glWindowPos2d
+#define GLEE_C_DEFINED_glWindowPos2d
+  void __stdcall GLee_Lazy_glWindowPos2d(GLdouble  x, GLdouble  y)  {if (GLeeInit()) glWindowPos2d(x, y);}
+  GLEEPFNGLWINDOWPOS2DPROC GLeeFuncPtr_glWindowPos2d=GLee_Lazy_glWindowPos2d;
+#endif
+#ifndef GLEE_C_DEFINED_glWindowPos2dv
+#define GLEE_C_DEFINED_glWindowPos2dv
+  void __stdcall GLee_Lazy_glWindowPos2dv(const GLdouble * v)  {if (GLeeInit()) glWindowPos2dv(v);}
+  GLEEPFNGLWINDOWPOS2DVPROC GLeeFuncPtr_glWindowPos2dv=GLee_Lazy_glWindowPos2dv;
+#endif
+#ifndef GLEE_C_DEFINED_glWindowPos2f
+#define GLEE_C_DEFINED_glWindowPos2f
+  void __stdcall GLee_Lazy_glWindowPos2f(GLfloat  x, GLfloat  y)  {if (GLeeInit()) glWindowPos2f(x, y);}
+  GLEEPFNGLWINDOWPOS2FPROC GLeeFuncPtr_glWindowPos2f=GLee_Lazy_glWindowPos2f;
+#endif
+#ifndef GLEE_C_DEFINED_glWindowPos2fv
+#define GLEE_C_DEFINED_glWindowPos2fv
+  void __stdcall GLee_Lazy_glWindowPos2fv(const GLfloat * v)  {if (GLeeInit()) glWindowPos2fv(v);}
+  GLEEPFNGLWINDOWPOS2FVPROC GLeeFuncPtr_glWindowPos2fv=GLee_Lazy_glWindowPos2fv;
+#endif
+#ifndef GLEE_C_DEFINED_glWindowPos2i
+#define GLEE_C_DEFINED_glWindowPos2i
+  void __stdcall GLee_Lazy_glWindowPos2i(GLint  x, GLint  y)  {if (GLeeInit()) glWindowPos2i(x, y);}
+  GLEEPFNGLWINDOWPOS2IPROC GLeeFuncPtr_glWindowPos2i=GLee_Lazy_glWindowPos2i;
+#endif
+#ifndef GLEE_C_DEFINED_glWindowPos2iv
+#define GLEE_C_DEFINED_glWindowPos2iv
+  void __stdcall GLee_Lazy_glWindowPos2iv(const GLint * v)  {if (GLeeInit()) glWindowPos2iv(v);}
+  GLEEPFNGLWINDOWPOS2IVPROC GLeeFuncPtr_glWindowPos2iv=GLee_Lazy_glWindowPos2iv;
+#endif
+#ifndef GLEE_C_DEFINED_glWindowPos2s
+#define GLEE_C_DEFINED_glWindowPos2s
+  void __stdcall GLee_Lazy_glWindowPos2s(GLshort  x, GLshort  y)  {if (GLeeInit()) glWindowPos2s(x, y);}
+  GLEEPFNGLWINDOWPOS2SPROC GLeeFuncPtr_glWindowPos2s=GLee_Lazy_glWindowPos2s;
+#endif
+#ifndef GLEE_C_DEFINED_glWindowPos2sv
+#define GLEE_C_DEFINED_glWindowPos2sv
+  void __stdcall GLee_Lazy_glWindowPos2sv(const GLshort * v)  {if (GLeeInit()) glWindowPos2sv(v);}
+  GLEEPFNGLWINDOWPOS2SVPROC GLeeFuncPtr_glWindowPos2sv=GLee_Lazy_glWindowPos2sv;
+#endif
+#ifndef GLEE_C_DEFINED_glWindowPos3d
+#define GLEE_C_DEFINED_glWindowPos3d
+  void __stdcall GLee_Lazy_glWindowPos3d(GLdouble  x, GLdouble  y, GLdouble  z)  {if (GLeeInit()) glWindowPos3d(x, y, z);}
+  GLEEPFNGLWINDOWPOS3DPROC GLeeFuncPtr_glWindowPos3d=GLee_Lazy_glWindowPos3d;
+#endif
+#ifndef GLEE_C_DEFINED_glWindowPos3dv
+#define GLEE_C_DEFINED_glWindowPos3dv
+  void __stdcall GLee_Lazy_glWindowPos3dv(const GLdouble * v)  {if (GLeeInit()) glWindowPos3dv(v);}
+  GLEEPFNGLWINDOWPOS3DVPROC GLeeFuncPtr_glWindowPos3dv=GLee_Lazy_glWindowPos3dv;
+#endif
+#ifndef GLEE_C_DEFINED_glWindowPos3f
+#define GLEE_C_DEFINED_glWindowPos3f
+  void __stdcall GLee_Lazy_glWindowPos3f(GLfloat  x, GLfloat  y, GLfloat  z)  {if (GLeeInit()) glWindowPos3f(x, y, z);}
+  GLEEPFNGLWINDOWPOS3FPROC GLeeFuncPtr_glWindowPos3f=GLee_Lazy_glWindowPos3f;
+#endif
+#ifndef GLEE_C_DEFINED_glWindowPos3fv
+#define GLEE_C_DEFINED_glWindowPos3fv
+  void __stdcall GLee_Lazy_glWindowPos3fv(const GLfloat * v)  {if (GLeeInit()) glWindowPos3fv(v);}
+  GLEEPFNGLWINDOWPOS3FVPROC GLeeFuncPtr_glWindowPos3fv=GLee_Lazy_glWindowPos3fv;
+#endif
+#ifndef GLEE_C_DEFINED_glWindowPos3i
+#define GLEE_C_DEFINED_glWindowPos3i
+  void __stdcall GLee_Lazy_glWindowPos3i(GLint  x, GLint  y, GLint  z)  {if (GLeeInit()) glWindowPos3i(x, y, z);}
+  GLEEPFNGLWINDOWPOS3IPROC GLeeFuncPtr_glWindowPos3i=GLee_Lazy_glWindowPos3i;
+#endif
+#ifndef GLEE_C_DEFINED_glWindowPos3iv
+#define GLEE_C_DEFINED_glWindowPos3iv
+  void __stdcall GLee_Lazy_glWindowPos3iv(const GLint * v)  {if (GLeeInit()) glWindowPos3iv(v);}
+  GLEEPFNGLWINDOWPOS3IVPROC GLeeFuncPtr_glWindowPos3iv=GLee_Lazy_glWindowPos3iv;
+#endif
+#ifndef GLEE_C_DEFINED_glWindowPos3s
+#define GLEE_C_DEFINED_glWindowPos3s
+  void __stdcall GLee_Lazy_glWindowPos3s(GLshort  x, GLshort  y, GLshort  z)  {if (GLeeInit()) glWindowPos3s(x, y, z);}
+  GLEEPFNGLWINDOWPOS3SPROC GLeeFuncPtr_glWindowPos3s=GLee_Lazy_glWindowPos3s;
+#endif
+#ifndef GLEE_C_DEFINED_glWindowPos3sv
+#define GLEE_C_DEFINED_glWindowPos3sv
+  void __stdcall GLee_Lazy_glWindowPos3sv(const GLshort * v)  {if (GLeeInit()) glWindowPos3sv(v);}
+  GLEEPFNGLWINDOWPOS3SVPROC GLeeFuncPtr_glWindowPos3sv=GLee_Lazy_glWindowPos3sv;
+#endif
+#endif 
+
+/* GL_VERSION_1_5 */
+
+#ifdef __GLEE_GL_VERSION_1_5
+#ifndef GLEE_C_DEFINED_glGenQueries
+#define GLEE_C_DEFINED_glGenQueries
+  void __stdcall GLee_Lazy_glGenQueries(GLsizei  n, GLuint * ids)  {if (GLeeInit()) glGenQueries(n, ids);}
+  GLEEPFNGLGENQUERIESPROC GLeeFuncPtr_glGenQueries=GLee_Lazy_glGenQueries;
+#endif
+#ifndef GLEE_C_DEFINED_glDeleteQueries
+#define GLEE_C_DEFINED_glDeleteQueries
+  void __stdcall GLee_Lazy_glDeleteQueries(GLsizei  n, const GLuint * ids)  {if (GLeeInit()) glDeleteQueries(n, ids);}
+  GLEEPFNGLDELETEQUERIESPROC GLeeFuncPtr_glDeleteQueries=GLee_Lazy_glDeleteQueries;
+#endif
+#ifndef GLEE_C_DEFINED_glIsQuery
+#define GLEE_C_DEFINED_glIsQuery
+  GLboolean __stdcall GLee_Lazy_glIsQuery(GLuint  id)  {if (GLeeInit()) return glIsQuery(id); return (GLboolean)0;}
+  GLEEPFNGLISQUERYPROC GLeeFuncPtr_glIsQuery=GLee_Lazy_glIsQuery;
+#endif
+#ifndef GLEE_C_DEFINED_glBeginQuery
+#define GLEE_C_DEFINED_glBeginQuery
+  void __stdcall GLee_Lazy_glBeginQuery(GLenum  target, GLuint  id)  {if (GLeeInit()) glBeginQuery(target, id);}
+  GLEEPFNGLBEGINQUERYPROC GLeeFuncPtr_glBeginQuery=GLee_Lazy_glBeginQuery;
+#endif
+#ifndef GLEE_C_DEFINED_glEndQuery
+#define GLEE_C_DEFINED_glEndQuery
+  void __stdcall GLee_Lazy_glEndQuery(GLenum  target)  {if (GLeeInit()) glEndQuery(target);}
+  GLEEPFNGLENDQUERYPROC GLeeFuncPtr_glEndQuery=GLee_Lazy_glEndQuery;
+#endif
+#ifndef GLEE_C_DEFINED_glGetQueryiv
+#define GLEE_C_DEFINED_glGetQueryiv
+  void __stdcall GLee_Lazy_glGetQueryiv(GLenum  target, GLenum  pname, GLint * params)  {if (GLeeInit()) glGetQueryiv(target, pname, params);}
+  GLEEPFNGLGETQUERYIVPROC GLeeFuncPtr_glGetQueryiv=GLee_Lazy_glGetQueryiv;
+#endif
+#ifndef GLEE_C_DEFINED_glGetQueryObjectiv
+#define GLEE_C_DEFINED_glGetQueryObjectiv
+  void __stdcall GLee_Lazy_glGetQueryObjectiv(GLuint  id, GLenum  pname, GLint * params)  {if (GLeeInit()) glGetQueryObjectiv(id, pname, params);}
+  GLEEPFNGLGETQUERYOBJECTIVPROC GLeeFuncPtr_glGetQueryObjectiv=GLee_Lazy_glGetQueryObjectiv;
+#endif
+#ifndef GLEE_C_DEFINED_glGetQueryObjectuiv
+#define GLEE_C_DEFINED_glGetQueryObjectuiv
+  void __stdcall GLee_Lazy_glGetQueryObjectuiv(GLuint  id, GLenum  pname, GLuint * params)  {if (GLeeInit()) glGetQueryObjectuiv(id, pname, params);}
+  GLEEPFNGLGETQUERYOBJECTUIVPROC GLeeFuncPtr_glGetQueryObjectuiv=GLee_Lazy_glGetQueryObjectuiv;
+#endif
+#ifndef GLEE_C_DEFINED_glBindBuffer
+#define GLEE_C_DEFINED_glBindBuffer
+  void __stdcall GLee_Lazy_glBindBuffer(GLenum  target, GLuint  buffer)  {if (GLeeInit()) glBindBuffer(target, buffer);}
+  GLEEPFNGLBINDBUFFERPROC GLeeFuncPtr_glBindBuffer=GLee_Lazy_glBindBuffer;
+#endif
+#ifndef GLEE_C_DEFINED_glDeleteBuffers
+#define GLEE_C_DEFINED_glDeleteBuffers
+  void __stdcall GLee_Lazy_glDeleteBuffers(GLsizei  n, const GLuint * buffers)  {if (GLeeInit()) glDeleteBuffers(n, buffers);}
+  GLEEPFNGLDELETEBUFFERSPROC GLeeFuncPtr_glDeleteBuffers=GLee_Lazy_glDeleteBuffers;
+#endif
+#ifndef GLEE_C_DEFINED_glGenBuffers
+#define GLEE_C_DEFINED_glGenBuffers
+  void __stdcall GLee_Lazy_glGenBuffers(GLsizei  n, GLuint * buffers)  {if (GLeeInit()) glGenBuffers(n, buffers);}
+  GLEEPFNGLGENBUFFERSPROC GLeeFuncPtr_glGenBuffers=GLee_Lazy_glGenBuffers;
+#endif
+#ifndef GLEE_C_DEFINED_glIsBuffer
+#define GLEE_C_DEFINED_glIsBuffer
+  GLboolean __stdcall GLee_Lazy_glIsBuffer(GLuint  buffer)  {if (GLeeInit()) return glIsBuffer(buffer); return (GLboolean)0;}
+  GLEEPFNGLISBUFFERPROC GLeeFuncPtr_glIsBuffer=GLee_Lazy_glIsBuffer;
+#endif
+#ifndef GLEE_C_DEFINED_glBufferData
+#define GLEE_C_DEFINED_glBufferData
+  void __stdcall GLee_Lazy_glBufferData(GLenum  target, GLsizeiptr  size, const GLvoid * data, GLenum  usage)  {if (GLeeInit()) glBufferData(target, size, data, usage);}
+  GLEEPFNGLBUFFERDATAPROC GLeeFuncPtr_glBufferData=GLee_Lazy_glBufferData;
+#endif
+#ifndef GLEE_C_DEFINED_glBufferSubData
+#define GLEE_C_DEFINED_glBufferSubData
+  void __stdcall GLee_Lazy_glBufferSubData(GLenum  target, GLintptr  offset, GLsizeiptr  size, const GLvoid * data)  {if (GLeeInit()) glBufferSubData(target, offset, size, data);}
+  GLEEPFNGLBUFFERSUBDATAPROC GLeeFuncPtr_glBufferSubData=GLee_Lazy_glBufferSubData;
+#endif
+#ifndef GLEE_C_DEFINED_glGetBufferSubData
+#define GLEE_C_DEFINED_glGetBufferSubData
+  void __stdcall GLee_Lazy_glGetBufferSubData(GLenum  target, GLintptr  offset, GLsizeiptr  size, GLvoid * data)  {if (GLeeInit()) glGetBufferSubData(target, offset, size, data);}
+  GLEEPFNGLGETBUFFERSUBDATAPROC GLeeFuncPtr_glGetBufferSubData=GLee_Lazy_glGetBufferSubData;
+#endif
+#ifndef GLEE_C_DEFINED_glMapBuffer
+#define GLEE_C_DEFINED_glMapBuffer
+  GLvoid* __stdcall GLee_Lazy_glMapBuffer(GLenum  target, GLenum  access)  {if (GLeeInit()) return glMapBuffer(target, access); return (GLvoid*)0;}
+  GLEEPFNGLMAPBUFFERPROC GLeeFuncPtr_glMapBuffer=GLee_Lazy_glMapBuffer;
+#endif
+#ifndef GLEE_C_DEFINED_glUnmapBuffer
+#define GLEE_C_DEFINED_glUnmapBuffer
+  GLboolean __stdcall GLee_Lazy_glUnmapBuffer(GLenum  target)  {if (GLeeInit()) return glUnmapBuffer(target); return (GLboolean)0;}
+  GLEEPFNGLUNMAPBUFFERPROC GLeeFuncPtr_glUnmapBuffer=GLee_Lazy_glUnmapBuffer;
+#endif
+#ifndef GLEE_C_DEFINED_glGetBufferParameteriv
+#define GLEE_C_DEFINED_glGetBufferParameteriv
+  void __stdcall GLee_Lazy_glGetBufferParameteriv(GLenum  target, GLenum  pname, GLint * params)  {if (GLeeInit()) glGetBufferParameteriv(target, pname, params);}
+  GLEEPFNGLGETBUFFERPARAMETERIVPROC GLeeFuncPtr_glGetBufferParameteriv=GLee_Lazy_glGetBufferParameteriv;
+#endif
+#ifndef GLEE_C_DEFINED_glGetBufferPointerv
+#define GLEE_C_DEFINED_glGetBufferPointerv
+  void __stdcall GLee_Lazy_glGetBufferPointerv(GLenum  target, GLenum  pname, GLvoid* * params)  {if (GLeeInit()) glGetBufferPointerv(target, pname, params);}
+  GLEEPFNGLGETBUFFERPOINTERVPROC GLeeFuncPtr_glGetBufferPointerv=GLee_Lazy_glGetBufferPointerv;
+#endif
+#endif 
+
+/* GL_VERSION_2_0 */
+
+#ifdef __GLEE_GL_VERSION_2_0
+#ifndef GLEE_C_DEFINED_glBlendEquationSeparate
+#define GLEE_C_DEFINED_glBlendEquationSeparate
+  void __stdcall GLee_Lazy_glBlendEquationSeparate(GLenum  modeRGB, GLenum  modeAlpha)  {if (GLeeInit()) glBlendEquationSeparate(modeRGB, modeAlpha);}
+  GLEEPFNGLBLENDEQUATIONSEPARATEPROC GLeeFuncPtr_glBlendEquationSeparate=GLee_Lazy_glBlendEquationSeparate;
+#endif
+#ifndef GLEE_C_DEFINED_glDrawBuffers
+#define GLEE_C_DEFINED_glDrawBuffers
+  void __stdcall GLee_Lazy_glDrawBuffers(GLsizei  n, const GLenum * bufs)  {if (GLeeInit()) glDrawBuffers(n, bufs);}
+  GLEEPFNGLDRAWBUFFERSPROC GLeeFuncPtr_glDrawBuffers=GLee_Lazy_glDrawBuffers;
+#endif
+#ifndef GLEE_C_DEFINED_glStencilOpSeparate
+#define GLEE_C_DEFINED_glStencilOpSeparate
+  void __stdcall GLee_Lazy_glStencilOpSeparate(GLenum  face, GLenum  sfail, GLenum  dpfail, GLenum  dppass)  {if (GLeeInit()) glStencilOpSeparate(face, sfail, dpfail, dppass);}
+  GLEEPFNGLSTENCILOPSEPARATEPROC GLeeFuncPtr_glStencilOpSeparate=GLee_Lazy_glStencilOpSeparate;
+#endif
+#ifndef GLEE_C_DEFINED_glStencilFuncSeparate
+#define GLEE_C_DEFINED_glStencilFuncSeparate
+  void __stdcall GLee_Lazy_glStencilFuncSeparate(GLenum  face, GLenum  func, GLint  ref, GLuint  mask)  {if (GLeeInit()) glStencilFuncSeparate(face, func, ref, mask);}
+  GLEEPFNGLSTENCILFUNCSEPARATEPROC GLeeFuncPtr_glStencilFuncSeparate=GLee_Lazy_glStencilFuncSeparate;
+#endif
+#ifndef GLEE_C_DEFINED_glStencilMaskSeparate
+#define GLEE_C_DEFINED_glStencilMaskSeparate
+  void __stdcall GLee_Lazy_glStencilMaskSeparate(GLenum  face, GLuint  mask)  {if (GLeeInit()) glStencilMaskSeparate(face, mask);}
+  GLEEPFNGLSTENCILMASKSEPARATEPROC GLeeFuncPtr_glStencilMaskSeparate=GLee_Lazy_glStencilMaskSeparate;
+#endif
+#ifndef GLEE_C_DEFINED_glAttachShader
+#define GLEE_C_DEFINED_glAttachShader
+  void __stdcall GLee_Lazy_glAttachShader(GLuint  program, GLuint  shader)  {if (GLeeInit()) glAttachShader(program, shader);}
+  GLEEPFNGLATTACHSHADERPROC GLeeFuncPtr_glAttachShader=GLee_Lazy_glAttachShader;
+#endif
+#ifndef GLEE_C_DEFINED_glBindAttribLocation
+#define GLEE_C_DEFINED_glBindAttribLocation
+  void __stdcall GLee_Lazy_glBindAttribLocation(GLuint  program, GLuint  index, const GLchar * name)  {if (GLeeInit()) glBindAttribLocation(program, index, name);}
+  GLEEPFNGLBINDATTRIBLOCATIONPROC GLeeFuncPtr_glBindAttribLocation=GLee_Lazy_glBindAttribLocation;
+#endif
+#ifndef GLEE_C_DEFINED_glCompileShader
+#define GLEE_C_DEFINED_glCompileShader
+  void __stdcall GLee_Lazy_glCompileShader(GLuint  shader)  {if (GLeeInit()) glCompileShader(shader);}
+  GLEEPFNGLCOMPILESHADERPROC GLeeFuncPtr_glCompileShader=GLee_Lazy_glCompileShader;
+#endif
+#ifndef GLEE_C_DEFINED_glCreateProgram
+#define GLEE_C_DEFINED_glCreateProgram
+  GLuint __stdcall GLee_Lazy_glCreateProgram(void)  {if (GLeeInit()) return glCreateProgram(); return (GLuint)0;}
+  GLEEPFNGLCREATEPROGRAMPROC GLeeFuncPtr_glCreateProgram=GLee_Lazy_glCreateProgram;
+#endif
+#ifndef GLEE_C_DEFINED_glCreateShader
+#define GLEE_C_DEFINED_glCreateShader
+  GLuint __stdcall GLee_Lazy_glCreateShader(GLenum  type)  {if (GLeeInit()) return glCreateShader(type); return (GLuint)0;}
+  GLEEPFNGLCREATESHADERPROC GLeeFuncPtr_glCreateShader=GLee_Lazy_glCreateShader;
+#endif
+#ifndef GLEE_C_DEFINED_glDeleteProgram
+#define GLEE_C_DEFINED_glDeleteProgram
+  void __stdcall GLee_Lazy_glDeleteProgram(GLuint  program)  {if (GLeeInit()) glDeleteProgram(program);}
+  GLEEPFNGLDELETEPROGRAMPROC GLeeFuncPtr_glDeleteProgram=GLee_Lazy_glDeleteProgram;
+#endif
+#ifndef GLEE_C_DEFINED_glDeleteShader
+#define GLEE_C_DEFINED_glDeleteShader
+  void __stdcall GLee_Lazy_glDeleteShader(GLuint  shader)  {if (GLeeInit()) glDeleteShader(shader);}
+  GLEEPFNGLDELETESHADERPROC GLeeFuncPtr_glDeleteShader=GLee_Lazy_glDeleteShader;
+#endif
+#ifndef GLEE_C_DEFINED_glDetachShader
+#define GLEE_C_DEFINED_glDetachShader
+  void __stdcall GLee_Lazy_glDetachShader(GLuint  program, GLuint  shader)  {if (GLeeInit()) glDetachShader(program, shader);}
+  GLEEPFNGLDETACHSHADERPROC GLeeFuncPtr_glDetachShader=GLee_Lazy_glDetachShader;
+#endif
+#ifndef GLEE_C_DEFINED_glDisableVertexAttribArray
+#define GLEE_C_DEFINED_glDisableVertexAttribArray
+  void __stdcall GLee_Lazy_glDisableVertexAttribArray(GLuint  index)  {if (GLeeInit()) glDisableVertexAttribArray(index);}
+  GLEEPFNGLDISABLEVERTEXATTRIBARRAYPROC GLeeFuncPtr_glDisableVertexAttribArray=GLee_Lazy_glDisableVertexAttribArray;
+#endif
+#ifndef GLEE_C_DEFINED_glEnableVertexAttribArray
+#define GLEE_C_DEFINED_glEnableVertexAttribArray
+  void __stdcall GLee_Lazy_glEnableVertexAttribArray(GLuint  index)  {if (GLeeInit()) glEnableVertexAttribArray(index);}
+  GLEEPFNGLENABLEVERTEXATTRIBARRAYPROC GLeeFuncPtr_glEnableVertexAttribArray=GLee_Lazy_glEnableVertexAttribArray;
+#endif
+#ifndef GLEE_C_DEFINED_glGetActiveAttrib
+#define GLEE_C_DEFINED_glGetActiveAttrib
+  void __stdcall GLee_Lazy_glGetActiveAttrib(GLuint  program, GLuint  index, GLsizei  bufSize, GLsizei * length, GLint * size, GLenum * type, GLchar * name)  {if (GLeeInit()) glGetActiveAttrib(program, index, bufSize, length, size, type, name);}
+  GLEEPFNGLGETACTIVEATTRIBPROC GLeeFuncPtr_glGetActiveAttrib=GLee_Lazy_glGetActiveAttrib;
+#endif
+#ifndef GLEE_C_DEFINED_glGetActiveUniform
+#define GLEE_C_DEFINED_glGetActiveUniform
+  void __stdcall GLee_Lazy_glGetActiveUniform(GLuint  program, GLuint  index, GLsizei  bufSize, GLsizei * length, GLint * size, GLenum * type, GLchar * name)  {if (GLeeInit()) glGetActiveUniform(program, index, bufSize, length, size, type, name);}
+  GLEEPFNGLGETACTIVEUNIFORMPROC GLeeFuncPtr_glGetActiveUniform=GLee_Lazy_glGetActiveUniform;
+#endif
+#ifndef GLEE_C_DEFINED_glGetAttachedShaders
+#define GLEE_C_DEFINED_glGetAttachedShaders
+  void __stdcall GLee_Lazy_glGetAttachedShaders(GLuint  program, GLsizei  maxCount, GLsizei * count, GLuint * obj)  {if (GLeeInit()) glGetAttachedShaders(program, maxCount, count, obj);}
+  GLEEPFNGLGETATTACHEDSHADERSPROC GLeeFuncPtr_glGetAttachedShaders=GLee_Lazy_glGetAttachedShaders;
+#endif
+#ifndef GLEE_C_DEFINED_glGetAttribLocation
+#define GLEE_C_DEFINED_glGetAttribLocation
+  GLint __stdcall GLee_Lazy_glGetAttribLocation(GLuint  program, const GLchar * name)  {if (GLeeInit()) return glGetAttribLocation(program, name); return (GLint)0;}
+  GLEEPFNGLGETATTRIBLOCATIONPROC GLeeFuncPtr_glGetAttribLocation=GLee_Lazy_glGetAttribLocation;
+#endif
+#ifndef GLEE_C_DEFINED_glGetProgramiv
+#define GLEE_C_DEFINED_glGetProgramiv
+  void __stdcall GLee_Lazy_glGetProgramiv(GLuint  program, GLenum  pname, GLint * params)  {if (GLeeInit()) glGetProgramiv(program, pname, params);}
+  GLEEPFNGLGETPROGRAMIVPROC GLeeFuncPtr_glGetProgramiv=GLee_Lazy_glGetProgramiv;
+#endif
+#ifndef GLEE_C_DEFINED_glGetProgramInfoLog
+#define GLEE_C_DEFINED_glGetProgramInfoLog
+  void __stdcall GLee_Lazy_glGetProgramInfoLog(GLuint  program, GLsizei  bufSize, GLsizei * length, GLchar * infoLog)  {if (GLeeInit()) glGetProgramInfoLog(program, bufSize, length, infoLog);}
+  GLEEPFNGLGETPROGRAMINFOLOGPROC GLeeFuncPtr_glGetProgramInfoLog=GLee_Lazy_glGetProgramInfoLog;
+#endif
+#ifndef GLEE_C_DEFINED_glGetShaderiv
+#define GLEE_C_DEFINED_glGetShaderiv
+  void __stdcall GLee_Lazy_glGetShaderiv(GLuint  shader, GLenum  pname, GLint * params)  {if (GLeeInit()) glGetShaderiv(shader, pname, params);}
+  GLEEPFNGLGETSHADERIVPROC GLeeFuncPtr_glGetShaderiv=GLee_Lazy_glGetShaderiv;
+#endif
+#ifndef GLEE_C_DEFINED_glGetShaderInfoLog
+#define GLEE_C_DEFINED_glGetShaderInfoLog
+  void __stdcall GLee_Lazy_glGetShaderInfoLog(GLuint  shader, GLsizei  bufSize, GLsizei * length, GLchar * infoLog)  {if (GLeeInit()) glGetShaderInfoLog(shader, bufSize, length, infoLog);}
+  GLEEPFNGLGETSHADERINFOLOGPROC GLeeFuncPtr_glGetShaderInfoLog=GLee_Lazy_glGetShaderInfoLog;
+#endif
+#ifndef GLEE_C_DEFINED_glGetShaderSource
+#define GLEE_C_DEFINED_glGetShaderSource
+  void __stdcall GLee_Lazy_glGetShaderSource(GLuint  shader, GLsizei  bufSize, GLsizei * length, GLchar * source)  {if (GLeeInit()) glGetShaderSource(shader, bufSize, length, source);}
+  GLEEPFNGLGETSHADERSOURCEPROC GLeeFuncPtr_glGetShaderSource=GLee_Lazy_glGetShaderSource;
+#endif
+#ifndef GLEE_C_DEFINED_glGetUniformLocation
+#define GLEE_C_DEFINED_glGetUniformLocation
+  GLint __stdcall GLee_Lazy_glGetUniformLocation(GLuint  program, const GLchar * name)  {if (GLeeInit()) return glGetUniformLocation(program, name); return (GLint)0;}
+  GLEEPFNGLGETUNIFORMLOCATIONPROC GLeeFuncPtr_glGetUniformLocation=GLee_Lazy_glGetUniformLocation;
+#endif
+#ifndef GLEE_C_DEFINED_glGetUniformfv
+#define GLEE_C_DEFINED_glGetUniformfv
+  void __stdcall GLee_Lazy_glGetUniformfv(GLuint  program, GLint  location, GLfloat * params)  {if (GLeeInit()) glGetUniformfv(program, location, params);}
+  GLEEPFNGLGETUNIFORMFVPROC GLeeFuncPtr_glGetUniformfv=GLee_Lazy_glGetUniformfv;
+#endif
+#ifndef GLEE_C_DEFINED_glGetUniformiv
+#define GLEE_C_DEFINED_glGetUniformiv
+  void __stdcall GLee_Lazy_glGetUniformiv(GLuint  program, GLint  location, GLint * params)  {if (GLeeInit()) glGetUniformiv(program, location, params);}
+  GLEEPFNGLGETUNIFORMIVPROC GLeeFuncPtr_glGetUniformiv=GLee_Lazy_glGetUniformiv;
+#endif
+#ifndef GLEE_C_DEFINED_glGetVertexAttribdv
+#define GLEE_C_DEFINED_glGetVertexAttribdv
+  void __stdcall GLee_Lazy_glGetVertexAttribdv(GLuint  index, GLenum  pname, GLdouble * params)  {if (GLeeInit()) glGetVertexAttribdv(index, pname, params);}
+  GLEEPFNGLGETVERTEXATTRIBDVPROC GLeeFuncPtr_glGetVertexAttribdv=GLee_Lazy_glGetVertexAttribdv;
+#endif
+#ifndef GLEE_C_DEFINED_glGetVertexAttribfv
+#define GLEE_C_DEFINED_glGetVertexAttribfv
+  void __stdcall GLee_Lazy_glGetVertexAttribfv(GLuint  index, GLenum  pname, GLfloat * params)  {if (GLeeInit()) glGetVertexAttribfv(index, pname, params);}
+  GLEEPFNGLGETVERTEXATTRIBFVPROC GLeeFuncPtr_glGetVertexAttribfv=GLee_Lazy_glGetVertexAttribfv;
+#endif
+#ifndef GLEE_C_DEFINED_glGetVertexAttribiv
+#define GLEE_C_DEFINED_glGetVertexAttribiv
+  void __stdcall GLee_Lazy_glGetVertexAttribiv(GLuint  index, GLenum  pname, GLint * params)  {if (GLeeInit()) glGetVertexAttribiv(index, pname, params);}
+  GLEEPFNGLGETVERTEXATTRIBIVPROC GLeeFuncPtr_glGetVertexAttribiv=GLee_Lazy_glGetVertexAttribiv;
+#endif
+#ifndef GLEE_C_DEFINED_glGetVertexAttribPointerv
+#define GLEE_C_DEFINED_glGetVertexAttribPointerv
+  void __stdcall GLee_Lazy_glGetVertexAttribPointerv(GLuint  index, GLenum  pname, GLvoid* * pointer)  {if (GLeeInit()) glGetVertexAttribPointerv(index, pname, pointer);}
+  GLEEPFNGLGETVERTEXATTRIBPOINTERVPROC GLeeFuncPtr_glGetVertexAttribPointerv=GLee_Lazy_glGetVertexAttribPointerv;
+#endif
+#ifndef GLEE_C_DEFINED_glIsProgram
+#define GLEE_C_DEFINED_glIsProgram
+  GLboolean __stdcall GLee_Lazy_glIsProgram(GLuint  program)  {if (GLeeInit()) return glIsProgram(program); return (GLboolean)0;}
+  GLEEPFNGLISPROGRAMPROC GLeeFuncPtr_glIsProgram=GLee_Lazy_glIsProgram;
+#endif
+#ifndef GLEE_C_DEFINED_glIsShader
+#define GLEE_C_DEFINED_glIsShader
+  GLboolean __stdcall GLee_Lazy_glIsShader(GLuint  shader)  {if (GLeeInit()) return glIsShader(shader); return (GLboolean)0;}
+  GLEEPFNGLISSHADERPROC GLeeFuncPtr_glIsShader=GLee_Lazy_glIsShader;
+#endif
+#ifndef GLEE_C_DEFINED_glLinkProgram
+#define GLEE_C_DEFINED_glLinkProgram
+  void __stdcall GLee_Lazy_glLinkProgram(GLuint  program)  {if (GLeeInit()) glLinkProgram(program);}
+  GLEEPFNGLLINKPROGRAMPROC GLeeFuncPtr_glLinkProgram=GLee_Lazy_glLinkProgram;
+#endif
+#ifndef GLEE_C_DEFINED_glShaderSource
+#define GLEE_C_DEFINED_glShaderSource
+  void __stdcall GLee_Lazy_glShaderSource(GLuint  shader, GLsizei  count, const GLchar* * string, const GLint * length)  {if (GLeeInit()) glShaderSource(shader, count, string, length);}
+  GLEEPFNGLSHADERSOURCEPROC GLeeFuncPtr_glShaderSource=GLee_Lazy_glShaderSource;
+#endif
+#ifndef GLEE_C_DEFINED_glUseProgram
+#define GLEE_C_DEFINED_glUseProgram
+  void __stdcall GLee_Lazy_glUseProgram(GLuint  program)  {if (GLeeInit()) glUseProgram(program);}
+  GLEEPFNGLUSEPROGRAMPROC GLeeFuncPtr_glUseProgram=GLee_Lazy_glUseProgram;
+#endif
+#ifndef GLEE_C_DEFINED_glUniform1f
+#define GLEE_C_DEFINED_glUniform1f
+  void __stdcall GLee_Lazy_glUniform1f(GLint  location, GLfloat  v0)  {if (GLeeInit()) glUniform1f(location, v0);}
+  GLEEPFNGLUNIFORM1FPROC GLeeFuncPtr_glUniform1f=GLee_Lazy_glUniform1f;
+#endif
+#ifndef GLEE_C_DEFINED_glUniform2f
+#define GLEE_C_DEFINED_glUniform2f
+  void __stdcall GLee_Lazy_glUniform2f(GLint  location, GLfloat  v0, GLfloat  v1)  {if (GLeeInit()) glUniform2f(location, v0, v1);}
+  GLEEPFNGLUNIFORM2FPROC GLeeFuncPtr_glUniform2f=GLee_Lazy_glUniform2f;
+#endif
+#ifndef GLEE_C_DEFINED_glUniform3f
+#define GLEE_C_DEFINED_glUniform3f
+  void __stdcall GLee_Lazy_glUniform3f(GLint  location, GLfloat  v0, GLfloat  v1, GLfloat  v2)  {if (GLeeInit()) glUniform3f(location, v0, v1, v2);}
+  GLEEPFNGLUNIFORM3FPROC GLeeFuncPtr_glUniform3f=GLee_Lazy_glUniform3f;
+#endif
+#ifndef GLEE_C_DEFINED_glUniform4f
+#define GLEE_C_DEFINED_glUniform4f
+  void __stdcall GLee_Lazy_glUniform4f(GLint  location, GLfloat  v0, GLfloat  v1, GLfloat  v2, GLfloat  v3)  {if (GLeeInit()) glUniform4f(location, v0, v1, v2, v3);}
+  GLEEPFNGLUNIFORM4FPROC GLeeFuncPtr_glUniform4f=GLee_Lazy_glUniform4f;
+#endif
+#ifndef GLEE_C_DEFINED_glUniform1i
+#define GLEE_C_DEFINED_glUniform1i
+  void __stdcall GLee_Lazy_glUniform1i(GLint  location, GLint  v0)  {if (GLeeInit()) glUniform1i(location, v0);}
+  GLEEPFNGLUNIFORM1IPROC GLeeFuncPtr_glUniform1i=GLee_Lazy_glUniform1i;
+#endif
+#ifndef GLEE_C_DEFINED_glUniform2i
+#define GLEE_C_DEFINED_glUniform2i
+  void __stdcall GLee_Lazy_glUniform2i(GLint  location, GLint  v0, GLint  v1)  {if (GLeeInit()) glUniform2i(location, v0, v1);}
+  GLEEPFNGLUNIFORM2IPROC GLeeFuncPtr_glUniform2i=GLee_Lazy_glUniform2i;
+#endif
+#ifndef GLEE_C_DEFINED_glUniform3i
+#define GLEE_C_DEFINED_glUniform3i
+  void __stdcall GLee_Lazy_glUniform3i(GLint  location, GLint  v0, GLint  v1, GLint  v2)  {if (GLeeInit()) glUniform3i(location, v0, v1, v2);}
+  GLEEPFNGLUNIFORM3IPROC GLeeFuncPtr_glUniform3i=GLee_Lazy_glUniform3i;
+#endif
+#ifndef GLEE_C_DEFINED_glUniform4i
+#define GLEE_C_DEFINED_glUniform4i
+  void __stdcall GLee_Lazy_glUniform4i(GLint  location, GLint  v0, GLint  v1, GLint  v2, GLint  v3)  {if (GLeeInit()) glUniform4i(location, v0, v1, v2, v3);}
+  GLEEPFNGLUNIFORM4IPROC GLeeFuncPtr_glUniform4i=GLee_Lazy_glUniform4i;
+#endif
+#ifndef GLEE_C_DEFINED_glUniform1fv
+#define GLEE_C_DEFINED_glUniform1fv
+  void __stdcall GLee_Lazy_glUniform1fv(GLint  location, GLsizei  count, const GLfloat * value)  {if (GLeeInit()) glUniform1fv(location, count, value);}
+  GLEEPFNGLUNIFORM1FVPROC GLeeFuncPtr_glUniform1fv=GLee_Lazy_glUniform1fv;
+#endif
+#ifndef GLEE_C_DEFINED_glUniform2fv
+#define GLEE_C_DEFINED_glUniform2fv
+  void __stdcall GLee_Lazy_glUniform2fv(GLint  location, GLsizei  count, const GLfloat * value)  {if (GLeeInit()) glUniform2fv(location, count, value);}
+  GLEEPFNGLUNIFORM2FVPROC GLeeFuncPtr_glUniform2fv=GLee_Lazy_glUniform2fv;
+#endif
+#ifndef GLEE_C_DEFINED_glUniform3fv
+#define GLEE_C_DEFINED_glUniform3fv
+  void __stdcall GLee_Lazy_glUniform3fv(GLint  location, GLsizei  count, const GLfloat * value)  {if (GLeeInit()) glUniform3fv(location, count, value);}
+  GLEEPFNGLUNIFORM3FVPROC GLeeFuncPtr_glUniform3fv=GLee_Lazy_glUniform3fv;
+#endif
+#ifndef GLEE_C_DEFINED_glUniform4fv
+#define GLEE_C_DEFINED_glUniform4fv
+  void __stdcall GLee_Lazy_glUniform4fv(GLint  location, GLsizei  count, const GLfloat * value)  {if (GLeeInit()) glUniform4fv(location, count, value);}
+  GLEEPFNGLUNIFORM4FVPROC GLeeFuncPtr_glUniform4fv=GLee_Lazy_glUniform4fv;
+#endif
+#ifndef GLEE_C_DEFINED_glUniform1iv
+#define GLEE_C_DEFINED_glUniform1iv
+  void __stdcall GLee_Lazy_glUniform1iv(GLint  location, GLsizei  count, const GLint * value)  {if (GLeeInit()) glUniform1iv(location, count, value);}
+  GLEEPFNGLUNIFORM1IVPROC GLeeFuncPtr_glUniform1iv=GLee_Lazy_glUniform1iv;
+#endif
+#ifndef GLEE_C_DEFINED_glUniform2iv
+#define GLEE_C_DEFINED_glUniform2iv
+  void __stdcall GLee_Lazy_glUniform2iv(GLint  location, GLsizei  count, const GLint * value)  {if (GLeeInit()) glUniform2iv(location, count, value);}
+  GLEEPFNGLUNIFORM2IVPROC GLeeFuncPtr_glUniform2iv=GLee_Lazy_glUniform2iv;
+#endif
+#ifndef GLEE_C_DEFINED_glUniform3iv
+#define GLEE_C_DEFINED_glUniform3iv
+  void __stdcall GLee_Lazy_glUniform3iv(GLint  location, GLsizei  count, const GLint * value)  {if (GLeeInit()) glUniform3iv(location, count, value);}
+  GLEEPFNGLUNIFORM3IVPROC GLeeFuncPtr_glUniform3iv=GLee_Lazy_glUniform3iv;
+#endif
+#ifndef GLEE_C_DEFINED_glUniform4iv
+#define GLEE_C_DEFINED_glUniform4iv
+  void __stdcall GLee_Lazy_glUniform4iv(GLint  location, GLsizei  count, const GLint * value)  {if (GLeeInit()) glUniform4iv(location, count, value);}
+  GLEEPFNGLUNIFORM4IVPROC GLeeFuncPtr_glUniform4iv=GLee_Lazy_glUniform4iv;
+#endif
+#ifndef GLEE_C_DEFINED_glUniformMatrix2fv
+#define GLEE_C_DEFINED_glUniformMatrix2fv
+  void __stdcall GLee_Lazy_glUniformMatrix2fv(GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value)  {if (GLeeInit()) glUniformMatrix2fv(location, count, transpose, value);}
+  GLEEPFNGLUNIFORMMATRIX2FVPROC GLeeFuncPtr_glUniformMatrix2fv=GLee_Lazy_glUniformMatrix2fv;
+#endif
+#ifndef GLEE_C_DEFINED_glUniformMatrix3fv
+#define GLEE_C_DEFINED_glUniformMatrix3fv
+  void __stdcall GLee_Lazy_glUniformMatrix3fv(GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value)  {if (GLeeInit()) glUniformMatrix3fv(location, count, transpose, value);}
+  GLEEPFNGLUNIFORMMATRIX3FVPROC GLeeFuncPtr_glUniformMatrix3fv=GLee_Lazy_glUniformMatrix3fv;
+#endif
+#ifndef GLEE_C_DEFINED_glUniformMatrix4fv
+#define GLEE_C_DEFINED_glUniformMatrix4fv
+  void __stdcall GLee_Lazy_glUniformMatrix4fv(GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value)  {if (GLeeInit()) glUniformMatrix4fv(location, count, transpose, value);}
+  GLEEPFNGLUNIFORMMATRIX4FVPROC GLeeFuncPtr_glUniformMatrix4fv=GLee_Lazy_glUniformMatrix4fv;
+#endif
+#ifndef GLEE_C_DEFINED_glValidateProgram
+#define GLEE_C_DEFINED_glValidateProgram
+  void __stdcall GLee_Lazy_glValidateProgram(GLuint  program)  {if (GLeeInit()) glValidateProgram(program);}
+  GLEEPFNGLVALIDATEPROGRAMPROC GLeeFuncPtr_glValidateProgram=GLee_Lazy_glValidateProgram;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttrib1d
+#define GLEE_C_DEFINED_glVertexAttrib1d
+  void __stdcall GLee_Lazy_glVertexAttrib1d(GLuint  index, GLdouble  x)  {if (GLeeInit()) glVertexAttrib1d(index, x);}
+  GLEEPFNGLVERTEXATTRIB1DPROC GLeeFuncPtr_glVertexAttrib1d=GLee_Lazy_glVertexAttrib1d;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttrib1dv
+#define GLEE_C_DEFINED_glVertexAttrib1dv
+  void __stdcall GLee_Lazy_glVertexAttrib1dv(GLuint  index, const GLdouble * v)  {if (GLeeInit()) glVertexAttrib1dv(index, v);}
+  GLEEPFNGLVERTEXATTRIB1DVPROC GLeeFuncPtr_glVertexAttrib1dv=GLee_Lazy_glVertexAttrib1dv;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttrib1f
+#define GLEE_C_DEFINED_glVertexAttrib1f
+  void __stdcall GLee_Lazy_glVertexAttrib1f(GLuint  index, GLfloat  x)  {if (GLeeInit()) glVertexAttrib1f(index, x);}
+  GLEEPFNGLVERTEXATTRIB1FPROC GLeeFuncPtr_glVertexAttrib1f=GLee_Lazy_glVertexAttrib1f;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttrib1fv
+#define GLEE_C_DEFINED_glVertexAttrib1fv
+  void __stdcall GLee_Lazy_glVertexAttrib1fv(GLuint  index, const GLfloat * v)  {if (GLeeInit()) glVertexAttrib1fv(index, v);}
+  GLEEPFNGLVERTEXATTRIB1FVPROC GLeeFuncPtr_glVertexAttrib1fv=GLee_Lazy_glVertexAttrib1fv;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttrib1s
+#define GLEE_C_DEFINED_glVertexAttrib1s
+  void __stdcall GLee_Lazy_glVertexAttrib1s(GLuint  index, GLshort  x)  {if (GLeeInit()) glVertexAttrib1s(index, x);}
+  GLEEPFNGLVERTEXATTRIB1SPROC GLeeFuncPtr_glVertexAttrib1s=GLee_Lazy_glVertexAttrib1s;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttrib1sv
+#define GLEE_C_DEFINED_glVertexAttrib1sv
+  void __stdcall GLee_Lazy_glVertexAttrib1sv(GLuint  index, const GLshort * v)  {if (GLeeInit()) glVertexAttrib1sv(index, v);}
+  GLEEPFNGLVERTEXATTRIB1SVPROC GLeeFuncPtr_glVertexAttrib1sv=GLee_Lazy_glVertexAttrib1sv;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttrib2d
+#define GLEE_C_DEFINED_glVertexAttrib2d
+  void __stdcall GLee_Lazy_glVertexAttrib2d(GLuint  index, GLdouble  x, GLdouble  y)  {if (GLeeInit()) glVertexAttrib2d(index, x, y);}
+  GLEEPFNGLVERTEXATTRIB2DPROC GLeeFuncPtr_glVertexAttrib2d=GLee_Lazy_glVertexAttrib2d;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttrib2dv
+#define GLEE_C_DEFINED_glVertexAttrib2dv
+  void __stdcall GLee_Lazy_glVertexAttrib2dv(GLuint  index, const GLdouble * v)  {if (GLeeInit()) glVertexAttrib2dv(index, v);}
+  GLEEPFNGLVERTEXATTRIB2DVPROC GLeeFuncPtr_glVertexAttrib2dv=GLee_Lazy_glVertexAttrib2dv;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttrib2f
+#define GLEE_C_DEFINED_glVertexAttrib2f
+  void __stdcall GLee_Lazy_glVertexAttrib2f(GLuint  index, GLfloat  x, GLfloat  y)  {if (GLeeInit()) glVertexAttrib2f(index, x, y);}
+  GLEEPFNGLVERTEXATTRIB2FPROC GLeeFuncPtr_glVertexAttrib2f=GLee_Lazy_glVertexAttrib2f;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttrib2fv
+#define GLEE_C_DEFINED_glVertexAttrib2fv
+  void __stdcall GLee_Lazy_glVertexAttrib2fv(GLuint  index, const GLfloat * v)  {if (GLeeInit()) glVertexAttrib2fv(index, v);}
+  GLEEPFNGLVERTEXATTRIB2FVPROC GLeeFuncPtr_glVertexAttrib2fv=GLee_Lazy_glVertexAttrib2fv;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttrib2s
+#define GLEE_C_DEFINED_glVertexAttrib2s
+  void __stdcall GLee_Lazy_glVertexAttrib2s(GLuint  index, GLshort  x, GLshort  y)  {if (GLeeInit()) glVertexAttrib2s(index, x, y);}
+  GLEEPFNGLVERTEXATTRIB2SPROC GLeeFuncPtr_glVertexAttrib2s=GLee_Lazy_glVertexAttrib2s;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttrib2sv
+#define GLEE_C_DEFINED_glVertexAttrib2sv
+  void __stdcall GLee_Lazy_glVertexAttrib2sv(GLuint  index, const GLshort * v)  {if (GLeeInit()) glVertexAttrib2sv(index, v);}
+  GLEEPFNGLVERTEXATTRIB2SVPROC GLeeFuncPtr_glVertexAttrib2sv=GLee_Lazy_glVertexAttrib2sv;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttrib3d
+#define GLEE_C_DEFINED_glVertexAttrib3d
+  void __stdcall GLee_Lazy_glVertexAttrib3d(GLuint  index, GLdouble  x, GLdouble  y, GLdouble  z)  {if (GLeeInit()) glVertexAttrib3d(index, x, y, z);}
+  GLEEPFNGLVERTEXATTRIB3DPROC GLeeFuncPtr_glVertexAttrib3d=GLee_Lazy_glVertexAttrib3d;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttrib3dv
+#define GLEE_C_DEFINED_glVertexAttrib3dv
+  void __stdcall GLee_Lazy_glVertexAttrib3dv(GLuint  index, const GLdouble * v)  {if (GLeeInit()) glVertexAttrib3dv(index, v);}
+  GLEEPFNGLVERTEXATTRIB3DVPROC GLeeFuncPtr_glVertexAttrib3dv=GLee_Lazy_glVertexAttrib3dv;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttrib3f
+#define GLEE_C_DEFINED_glVertexAttrib3f
+  void __stdcall GLee_Lazy_glVertexAttrib3f(GLuint  index, GLfloat  x, GLfloat  y, GLfloat  z)  {if (GLeeInit()) glVertexAttrib3f(index, x, y, z);}
+  GLEEPFNGLVERTEXATTRIB3FPROC GLeeFuncPtr_glVertexAttrib3f=GLee_Lazy_glVertexAttrib3f;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttrib3fv
+#define GLEE_C_DEFINED_glVertexAttrib3fv
+  void __stdcall GLee_Lazy_glVertexAttrib3fv(GLuint  index, const GLfloat * v)  {if (GLeeInit()) glVertexAttrib3fv(index, v);}
+  GLEEPFNGLVERTEXATTRIB3FVPROC GLeeFuncPtr_glVertexAttrib3fv=GLee_Lazy_glVertexAttrib3fv;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttrib3s
+#define GLEE_C_DEFINED_glVertexAttrib3s
+  void __stdcall GLee_Lazy_glVertexAttrib3s(GLuint  index, GLshort  x, GLshort  y, GLshort  z)  {if (GLeeInit()) glVertexAttrib3s(index, x, y, z);}
+  GLEEPFNGLVERTEXATTRIB3SPROC GLeeFuncPtr_glVertexAttrib3s=GLee_Lazy_glVertexAttrib3s;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttrib3sv
+#define GLEE_C_DEFINED_glVertexAttrib3sv
+  void __stdcall GLee_Lazy_glVertexAttrib3sv(GLuint  index, const GLshort * v)  {if (GLeeInit()) glVertexAttrib3sv(index, v);}
+  GLEEPFNGLVERTEXATTRIB3SVPROC GLeeFuncPtr_glVertexAttrib3sv=GLee_Lazy_glVertexAttrib3sv;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttrib4Nbv
+#define GLEE_C_DEFINED_glVertexAttrib4Nbv
+  void __stdcall GLee_Lazy_glVertexAttrib4Nbv(GLuint  index, const GLbyte * v)  {if (GLeeInit()) glVertexAttrib4Nbv(index, v);}
+  GLEEPFNGLVERTEXATTRIB4NBVPROC GLeeFuncPtr_glVertexAttrib4Nbv=GLee_Lazy_glVertexAttrib4Nbv;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttrib4Niv
+#define GLEE_C_DEFINED_glVertexAttrib4Niv
+  void __stdcall GLee_Lazy_glVertexAttrib4Niv(GLuint  index, const GLint * v)  {if (GLeeInit()) glVertexAttrib4Niv(index, v);}
+  GLEEPFNGLVERTEXATTRIB4NIVPROC GLeeFuncPtr_glVertexAttrib4Niv=GLee_Lazy_glVertexAttrib4Niv;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttrib4Nsv
+#define GLEE_C_DEFINED_glVertexAttrib4Nsv
+  void __stdcall GLee_Lazy_glVertexAttrib4Nsv(GLuint  index, const GLshort * v)  {if (GLeeInit()) glVertexAttrib4Nsv(index, v);}
+  GLEEPFNGLVERTEXATTRIB4NSVPROC GLeeFuncPtr_glVertexAttrib4Nsv=GLee_Lazy_glVertexAttrib4Nsv;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttrib4Nub
+#define GLEE_C_DEFINED_glVertexAttrib4Nub
+  void __stdcall GLee_Lazy_glVertexAttrib4Nub(GLuint  index, GLubyte  x, GLubyte  y, GLubyte  z, GLubyte  w)  {if (GLeeInit()) glVertexAttrib4Nub(index, x, y, z, w);}
+  GLEEPFNGLVERTEXATTRIB4NUBPROC GLeeFuncPtr_glVertexAttrib4Nub=GLee_Lazy_glVertexAttrib4Nub;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttrib4Nubv
+#define GLEE_C_DEFINED_glVertexAttrib4Nubv
+  void __stdcall GLee_Lazy_glVertexAttrib4Nubv(GLuint  index, const GLubyte * v)  {if (GLeeInit()) glVertexAttrib4Nubv(index, v);}
+  GLEEPFNGLVERTEXATTRIB4NUBVPROC GLeeFuncPtr_glVertexAttrib4Nubv=GLee_Lazy_glVertexAttrib4Nubv;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttrib4Nuiv
+#define GLEE_C_DEFINED_glVertexAttrib4Nuiv
+  void __stdcall GLee_Lazy_glVertexAttrib4Nuiv(GLuint  index, const GLuint * v)  {if (GLeeInit()) glVertexAttrib4Nuiv(index, v);}
+  GLEEPFNGLVERTEXATTRIB4NUIVPROC GLeeFuncPtr_glVertexAttrib4Nuiv=GLee_Lazy_glVertexAttrib4Nuiv;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttrib4Nusv
+#define GLEE_C_DEFINED_glVertexAttrib4Nusv
+  void __stdcall GLee_Lazy_glVertexAttrib4Nusv(GLuint  index, const GLushort * v)  {if (GLeeInit()) glVertexAttrib4Nusv(index, v);}
+  GLEEPFNGLVERTEXATTRIB4NUSVPROC GLeeFuncPtr_glVertexAttrib4Nusv=GLee_Lazy_glVertexAttrib4Nusv;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttrib4bv
+#define GLEE_C_DEFINED_glVertexAttrib4bv
+  void __stdcall GLee_Lazy_glVertexAttrib4bv(GLuint  index, const GLbyte * v)  {if (GLeeInit()) glVertexAttrib4bv(index, v);}
+  GLEEPFNGLVERTEXATTRIB4BVPROC GLeeFuncPtr_glVertexAttrib4bv=GLee_Lazy_glVertexAttrib4bv;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttrib4d
+#define GLEE_C_DEFINED_glVertexAttrib4d
+  void __stdcall GLee_Lazy_glVertexAttrib4d(GLuint  index, GLdouble  x, GLdouble  y, GLdouble  z, GLdouble  w)  {if (GLeeInit()) glVertexAttrib4d(index, x, y, z, w);}
+  GLEEPFNGLVERTEXATTRIB4DPROC GLeeFuncPtr_glVertexAttrib4d=GLee_Lazy_glVertexAttrib4d;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttrib4dv
+#define GLEE_C_DEFINED_glVertexAttrib4dv
+  void __stdcall GLee_Lazy_glVertexAttrib4dv(GLuint  index, const GLdouble * v)  {if (GLeeInit()) glVertexAttrib4dv(index, v);}
+  GLEEPFNGLVERTEXATTRIB4DVPROC GLeeFuncPtr_glVertexAttrib4dv=GLee_Lazy_glVertexAttrib4dv;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttrib4f
+#define GLEE_C_DEFINED_glVertexAttrib4f
+  void __stdcall GLee_Lazy_glVertexAttrib4f(GLuint  index, GLfloat  x, GLfloat  y, GLfloat  z, GLfloat  w)  {if (GLeeInit()) glVertexAttrib4f(index, x, y, z, w);}
+  GLEEPFNGLVERTEXATTRIB4FPROC GLeeFuncPtr_glVertexAttrib4f=GLee_Lazy_glVertexAttrib4f;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttrib4fv
+#define GLEE_C_DEFINED_glVertexAttrib4fv
+  void __stdcall GLee_Lazy_glVertexAttrib4fv(GLuint  index, const GLfloat * v)  {if (GLeeInit()) glVertexAttrib4fv(index, v);}
+  GLEEPFNGLVERTEXATTRIB4FVPROC GLeeFuncPtr_glVertexAttrib4fv=GLee_Lazy_glVertexAttrib4fv;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttrib4iv
+#define GLEE_C_DEFINED_glVertexAttrib4iv
+  void __stdcall GLee_Lazy_glVertexAttrib4iv(GLuint  index, const GLint * v)  {if (GLeeInit()) glVertexAttrib4iv(index, v);}
+  GLEEPFNGLVERTEXATTRIB4IVPROC GLeeFuncPtr_glVertexAttrib4iv=GLee_Lazy_glVertexAttrib4iv;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttrib4s
+#define GLEE_C_DEFINED_glVertexAttrib4s
+  void __stdcall GLee_Lazy_glVertexAttrib4s(GLuint  index, GLshort  x, GLshort  y, GLshort  z, GLshort  w)  {if (GLeeInit()) glVertexAttrib4s(index, x, y, z, w);}
+  GLEEPFNGLVERTEXATTRIB4SPROC GLeeFuncPtr_glVertexAttrib4s=GLee_Lazy_glVertexAttrib4s;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttrib4sv
+#define GLEE_C_DEFINED_glVertexAttrib4sv
+  void __stdcall GLee_Lazy_glVertexAttrib4sv(GLuint  index, const GLshort * v)  {if (GLeeInit()) glVertexAttrib4sv(index, v);}
+  GLEEPFNGLVERTEXATTRIB4SVPROC GLeeFuncPtr_glVertexAttrib4sv=GLee_Lazy_glVertexAttrib4sv;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttrib4ubv
+#define GLEE_C_DEFINED_glVertexAttrib4ubv
+  void __stdcall GLee_Lazy_glVertexAttrib4ubv(GLuint  index, const GLubyte * v)  {if (GLeeInit()) glVertexAttrib4ubv(index, v);}
+  GLEEPFNGLVERTEXATTRIB4UBVPROC GLeeFuncPtr_glVertexAttrib4ubv=GLee_Lazy_glVertexAttrib4ubv;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttrib4uiv
+#define GLEE_C_DEFINED_glVertexAttrib4uiv
+  void __stdcall GLee_Lazy_glVertexAttrib4uiv(GLuint  index, const GLuint * v)  {if (GLeeInit()) glVertexAttrib4uiv(index, v);}
+  GLEEPFNGLVERTEXATTRIB4UIVPROC GLeeFuncPtr_glVertexAttrib4uiv=GLee_Lazy_glVertexAttrib4uiv;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttrib4usv
+#define GLEE_C_DEFINED_glVertexAttrib4usv
+  void __stdcall GLee_Lazy_glVertexAttrib4usv(GLuint  index, const GLushort * v)  {if (GLeeInit()) glVertexAttrib4usv(index, v);}
+  GLEEPFNGLVERTEXATTRIB4USVPROC GLeeFuncPtr_glVertexAttrib4usv=GLee_Lazy_glVertexAttrib4usv;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttribPointer
+#define GLEE_C_DEFINED_glVertexAttribPointer
+  void __stdcall GLee_Lazy_glVertexAttribPointer(GLuint  index, GLint  size, GLenum  type, GLboolean  normalized, GLsizei  stride, const GLvoid * pointer)  {if (GLeeInit()) glVertexAttribPointer(index, size, type, normalized, stride, pointer);}
+  GLEEPFNGLVERTEXATTRIBPOINTERPROC GLeeFuncPtr_glVertexAttribPointer=GLee_Lazy_glVertexAttribPointer;
+#endif
+#endif 
+
+/* GL_VERSION_2_1 */
+
+#ifdef __GLEE_GL_VERSION_2_1
+#ifndef GLEE_C_DEFINED_glUniformMatrix2x3fv
+#define GLEE_C_DEFINED_glUniformMatrix2x3fv
+  void __stdcall GLee_Lazy_glUniformMatrix2x3fv(GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value)  {if (GLeeInit()) glUniformMatrix2x3fv(location, count, transpose, value);}
+  GLEEPFNGLUNIFORMMATRIX2X3FVPROC GLeeFuncPtr_glUniformMatrix2x3fv=GLee_Lazy_glUniformMatrix2x3fv;
+#endif
+#ifndef GLEE_C_DEFINED_glUniformMatrix3x2fv
+#define GLEE_C_DEFINED_glUniformMatrix3x2fv
+  void __stdcall GLee_Lazy_glUniformMatrix3x2fv(GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value)  {if (GLeeInit()) glUniformMatrix3x2fv(location, count, transpose, value);}
+  GLEEPFNGLUNIFORMMATRIX3X2FVPROC GLeeFuncPtr_glUniformMatrix3x2fv=GLee_Lazy_glUniformMatrix3x2fv;
+#endif
+#ifndef GLEE_C_DEFINED_glUniformMatrix2x4fv
+#define GLEE_C_DEFINED_glUniformMatrix2x4fv
+  void __stdcall GLee_Lazy_glUniformMatrix2x4fv(GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value)  {if (GLeeInit()) glUniformMatrix2x4fv(location, count, transpose, value);}
+  GLEEPFNGLUNIFORMMATRIX2X4FVPROC GLeeFuncPtr_glUniformMatrix2x4fv=GLee_Lazy_glUniformMatrix2x4fv;
+#endif
+#ifndef GLEE_C_DEFINED_glUniformMatrix4x2fv
+#define GLEE_C_DEFINED_glUniformMatrix4x2fv
+  void __stdcall GLee_Lazy_glUniformMatrix4x2fv(GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value)  {if (GLeeInit()) glUniformMatrix4x2fv(location, count, transpose, value);}
+  GLEEPFNGLUNIFORMMATRIX4X2FVPROC GLeeFuncPtr_glUniformMatrix4x2fv=GLee_Lazy_glUniformMatrix4x2fv;
+#endif
+#ifndef GLEE_C_DEFINED_glUniformMatrix3x4fv
+#define GLEE_C_DEFINED_glUniformMatrix3x4fv
+  void __stdcall GLee_Lazy_glUniformMatrix3x4fv(GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value)  {if (GLeeInit()) glUniformMatrix3x4fv(location, count, transpose, value);}
+  GLEEPFNGLUNIFORMMATRIX3X4FVPROC GLeeFuncPtr_glUniformMatrix3x4fv=GLee_Lazy_glUniformMatrix3x4fv;
+#endif
+#ifndef GLEE_C_DEFINED_glUniformMatrix4x3fv
+#define GLEE_C_DEFINED_glUniformMatrix4x3fv
+  void __stdcall GLee_Lazy_glUniformMatrix4x3fv(GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value)  {if (GLeeInit()) glUniformMatrix4x3fv(location, count, transpose, value);}
+  GLEEPFNGLUNIFORMMATRIX4X3FVPROC GLeeFuncPtr_glUniformMatrix4x3fv=GLee_Lazy_glUniformMatrix4x3fv;
+#endif
+#endif 
+
+/* GL_VERSION_3_0 */
+
+#ifdef __GLEE_GL_VERSION_3_0
+#ifndef GLEE_C_DEFINED_glColorMaski
+#define GLEE_C_DEFINED_glColorMaski
+  void __stdcall GLee_Lazy_glColorMaski(GLuint  index, GLboolean  r, GLboolean  g, GLboolean  b, GLboolean  a)  {if (GLeeInit()) glColorMaski(index, r, g, b, a);}
+  GLEEPFNGLCOLORMASKIPROC GLeeFuncPtr_glColorMaski=GLee_Lazy_glColorMaski;
+#endif
+#ifndef GLEE_C_DEFINED_glGetBooleani_v
+#define GLEE_C_DEFINED_glGetBooleani_v
+  void __stdcall GLee_Lazy_glGetBooleani_v(GLenum  target, GLuint  index, GLboolean * data)  {if (GLeeInit()) glGetBooleani_v(target, index, data);}
+  GLEEPFNGLGETBOOLEANI_VPROC GLeeFuncPtr_glGetBooleani_v=GLee_Lazy_glGetBooleani_v;
+#endif
+#ifndef GLEE_C_DEFINED_glGetIntegeri_v
+#define GLEE_C_DEFINED_glGetIntegeri_v
+  void __stdcall GLee_Lazy_glGetIntegeri_v(GLenum  target, GLuint  index, GLint * data)  {if (GLeeInit()) glGetIntegeri_v(target, index, data);}
+  GLEEPFNGLGETINTEGERI_VPROC GLeeFuncPtr_glGetIntegeri_v=GLee_Lazy_glGetIntegeri_v;
+#endif
+#ifndef GLEE_C_DEFINED_glEnablei
+#define GLEE_C_DEFINED_glEnablei
+  void __stdcall GLee_Lazy_glEnablei(GLenum  target, GLuint  index)  {if (GLeeInit()) glEnablei(target, index);}
+  GLEEPFNGLENABLEIPROC GLeeFuncPtr_glEnablei=GLee_Lazy_glEnablei;
+#endif
+#ifndef GLEE_C_DEFINED_glDisablei
+#define GLEE_C_DEFINED_glDisablei
+  void __stdcall GLee_Lazy_glDisablei(GLenum  target, GLuint  index)  {if (GLeeInit()) glDisablei(target, index);}
+  GLEEPFNGLDISABLEIPROC GLeeFuncPtr_glDisablei=GLee_Lazy_glDisablei;
+#endif
+#ifndef GLEE_C_DEFINED_glIsEnabledi
+#define GLEE_C_DEFINED_glIsEnabledi
+  GLboolean __stdcall GLee_Lazy_glIsEnabledi(GLenum  target, GLuint  index)  {if (GLeeInit()) return glIsEnabledi(target, index); return (GLboolean)0;}
+  GLEEPFNGLISENABLEDIPROC GLeeFuncPtr_glIsEnabledi=GLee_Lazy_glIsEnabledi;
+#endif
+#ifndef GLEE_C_DEFINED_glBeginTransformFeedback
+#define GLEE_C_DEFINED_glBeginTransformFeedback
+  void __stdcall GLee_Lazy_glBeginTransformFeedback(GLenum  primitiveMode)  {if (GLeeInit()) glBeginTransformFeedback(primitiveMode);}
+  GLEEPFNGLBEGINTRANSFORMFEEDBACKPROC GLeeFuncPtr_glBeginTransformFeedback=GLee_Lazy_glBeginTransformFeedback;
+#endif
+#ifndef GLEE_C_DEFINED_glEndTransformFeedback
+#define GLEE_C_DEFINED_glEndTransformFeedback
+  void __stdcall GLee_Lazy_glEndTransformFeedback(void)  {if (GLeeInit()) glEndTransformFeedback();}
+  GLEEPFNGLENDTRANSFORMFEEDBACKPROC GLeeFuncPtr_glEndTransformFeedback=GLee_Lazy_glEndTransformFeedback;
+#endif
+#ifndef GLEE_C_DEFINED_glBindBufferRange
+#define GLEE_C_DEFINED_glBindBufferRange
+  void __stdcall GLee_Lazy_glBindBufferRange(GLenum  target, GLuint  index, GLuint  buffer, GLintptr  offset, GLsizeiptr  size)  {if (GLeeInit()) glBindBufferRange(target, index, buffer, offset, size);}
+  GLEEPFNGLBINDBUFFERRANGEPROC GLeeFuncPtr_glBindBufferRange=GLee_Lazy_glBindBufferRange;
+#endif
+#ifndef GLEE_C_DEFINED_glBindBufferBase
+#define GLEE_C_DEFINED_glBindBufferBase
+  void __stdcall GLee_Lazy_glBindBufferBase(GLenum  target, GLuint  index, GLuint  buffer)  {if (GLeeInit()) glBindBufferBase(target, index, buffer);}
+  GLEEPFNGLBINDBUFFERBASEPROC GLeeFuncPtr_glBindBufferBase=GLee_Lazy_glBindBufferBase;
+#endif
+#ifndef GLEE_C_DEFINED_glTransformFeedbackVaryings
+#define GLEE_C_DEFINED_glTransformFeedbackVaryings
+  void __stdcall GLee_Lazy_glTransformFeedbackVaryings(GLuint  program, GLsizei  count, const GLchar* * varyings, GLenum  bufferMode)  {if (GLeeInit()) glTransformFeedbackVaryings(program, count, varyings, bufferMode);}
+  GLEEPFNGLTRANSFORMFEEDBACKVARYINGSPROC GLeeFuncPtr_glTransformFeedbackVaryings=GLee_Lazy_glTransformFeedbackVaryings;
+#endif
+#ifndef GLEE_C_DEFINED_glGetTransformFeedbackVarying
+#define GLEE_C_DEFINED_glGetTransformFeedbackVarying
+  void __stdcall GLee_Lazy_glGetTransformFeedbackVarying(GLuint  program, GLuint  index, GLsizei  bufSize, GLsizei * length, GLsizei * size, GLenum * type, GLchar * name)  {if (GLeeInit()) glGetTransformFeedbackVarying(program, index, bufSize, length, size, type, name);}
+  GLEEPFNGLGETTRANSFORMFEEDBACKVARYINGPROC GLeeFuncPtr_glGetTransformFeedbackVarying=GLee_Lazy_glGetTransformFeedbackVarying;
+#endif
+#ifndef GLEE_C_DEFINED_glClampColor
+#define GLEE_C_DEFINED_glClampColor
+  void __stdcall GLee_Lazy_glClampColor(GLenum  target, GLenum  clamp)  {if (GLeeInit()) glClampColor(target, clamp);}
+  GLEEPFNGLCLAMPCOLORPROC GLeeFuncPtr_glClampColor=GLee_Lazy_glClampColor;
+#endif
+#ifndef GLEE_C_DEFINED_glBeginConditionalRender
+#define GLEE_C_DEFINED_glBeginConditionalRender
+  void __stdcall GLee_Lazy_glBeginConditionalRender(GLuint  id, GLenum  mode)  {if (GLeeInit()) glBeginConditionalRender(id, mode);}
+  GLEEPFNGLBEGINCONDITIONALRENDERPROC GLeeFuncPtr_glBeginConditionalRender=GLee_Lazy_glBeginConditionalRender;
+#endif
+#ifndef GLEE_C_DEFINED_glEndConditionalRender
+#define GLEE_C_DEFINED_glEndConditionalRender
+  void __stdcall GLee_Lazy_glEndConditionalRender(void)  {if (GLeeInit()) glEndConditionalRender();}
+  GLEEPFNGLENDCONDITIONALRENDERPROC GLeeFuncPtr_glEndConditionalRender=GLee_Lazy_glEndConditionalRender;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttribIPointer
+#define GLEE_C_DEFINED_glVertexAttribIPointer
+  void __stdcall GLee_Lazy_glVertexAttribIPointer(GLuint  index, GLint  size, GLenum  type, GLsizei  stride, const GLvoid * pointer)  {if (GLeeInit()) glVertexAttribIPointer(index, size, type, stride, pointer);}
+  GLEEPFNGLVERTEXATTRIBIPOINTERPROC GLeeFuncPtr_glVertexAttribIPointer=GLee_Lazy_glVertexAttribIPointer;
+#endif
+#ifndef GLEE_C_DEFINED_glGetVertexAttribIiv
+#define GLEE_C_DEFINED_glGetVertexAttribIiv
+  void __stdcall GLee_Lazy_glGetVertexAttribIiv(GLuint  index, GLenum  pname, GLint * params)  {if (GLeeInit()) glGetVertexAttribIiv(index, pname, params);}
+  GLEEPFNGLGETVERTEXATTRIBIIVPROC GLeeFuncPtr_glGetVertexAttribIiv=GLee_Lazy_glGetVertexAttribIiv;
+#endif
+#ifndef GLEE_C_DEFINED_glGetVertexAttribIuiv
+#define GLEE_C_DEFINED_glGetVertexAttribIuiv
+  void __stdcall GLee_Lazy_glGetVertexAttribIuiv(GLuint  index, GLenum  pname, GLuint * params)  {if (GLeeInit()) glGetVertexAttribIuiv(index, pname, params);}
+  GLEEPFNGLGETVERTEXATTRIBIUIVPROC GLeeFuncPtr_glGetVertexAttribIuiv=GLee_Lazy_glGetVertexAttribIuiv;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttribI1i
+#define GLEE_C_DEFINED_glVertexAttribI1i
+  void __stdcall GLee_Lazy_glVertexAttribI1i(GLuint  index, GLint  x)  {if (GLeeInit()) glVertexAttribI1i(index, x);}
+  GLEEPFNGLVERTEXATTRIBI1IPROC GLeeFuncPtr_glVertexAttribI1i=GLee_Lazy_glVertexAttribI1i;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttribI2i
+#define GLEE_C_DEFINED_glVertexAttribI2i
+  void __stdcall GLee_Lazy_glVertexAttribI2i(GLuint  index, GLint  x, GLint  y)  {if (GLeeInit()) glVertexAttribI2i(index, x, y);}
+  GLEEPFNGLVERTEXATTRIBI2IPROC GLeeFuncPtr_glVertexAttribI2i=GLee_Lazy_glVertexAttribI2i;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttribI3i
+#define GLEE_C_DEFINED_glVertexAttribI3i
+  void __stdcall GLee_Lazy_glVertexAttribI3i(GLuint  index, GLint  x, GLint  y, GLint  z)  {if (GLeeInit()) glVertexAttribI3i(index, x, y, z);}
+  GLEEPFNGLVERTEXATTRIBI3IPROC GLeeFuncPtr_glVertexAttribI3i=GLee_Lazy_glVertexAttribI3i;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttribI4i
+#define GLEE_C_DEFINED_glVertexAttribI4i
+  void __stdcall GLee_Lazy_glVertexAttribI4i(GLuint  index, GLint  x, GLint  y, GLint  z, GLint  w)  {if (GLeeInit()) glVertexAttribI4i(index, x, y, z, w);}
+  GLEEPFNGLVERTEXATTRIBI4IPROC GLeeFuncPtr_glVertexAttribI4i=GLee_Lazy_glVertexAttribI4i;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttribI1ui
+#define GLEE_C_DEFINED_glVertexAttribI1ui
+  void __stdcall GLee_Lazy_glVertexAttribI1ui(GLuint  index, GLuint  x)  {if (GLeeInit()) glVertexAttribI1ui(index, x);}
+  GLEEPFNGLVERTEXATTRIBI1UIPROC GLeeFuncPtr_glVertexAttribI1ui=GLee_Lazy_glVertexAttribI1ui;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttribI2ui
+#define GLEE_C_DEFINED_glVertexAttribI2ui
+  void __stdcall GLee_Lazy_glVertexAttribI2ui(GLuint  index, GLuint  x, GLuint  y)  {if (GLeeInit()) glVertexAttribI2ui(index, x, y);}
+  GLEEPFNGLVERTEXATTRIBI2UIPROC GLeeFuncPtr_glVertexAttribI2ui=GLee_Lazy_glVertexAttribI2ui;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttribI3ui
+#define GLEE_C_DEFINED_glVertexAttribI3ui
+  void __stdcall GLee_Lazy_glVertexAttribI3ui(GLuint  index, GLuint  x, GLuint  y, GLuint  z)  {if (GLeeInit()) glVertexAttribI3ui(index, x, y, z);}
+  GLEEPFNGLVERTEXATTRIBI3UIPROC GLeeFuncPtr_glVertexAttribI3ui=GLee_Lazy_glVertexAttribI3ui;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttribI4ui
+#define GLEE_C_DEFINED_glVertexAttribI4ui
+  void __stdcall GLee_Lazy_glVertexAttribI4ui(GLuint  index, GLuint  x, GLuint  y, GLuint  z, GLuint  w)  {if (GLeeInit()) glVertexAttribI4ui(index, x, y, z, w);}
+  GLEEPFNGLVERTEXATTRIBI4UIPROC GLeeFuncPtr_glVertexAttribI4ui=GLee_Lazy_glVertexAttribI4ui;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttribI1iv
+#define GLEE_C_DEFINED_glVertexAttribI1iv
+  void __stdcall GLee_Lazy_glVertexAttribI1iv(GLuint  index, const GLint * v)  {if (GLeeInit()) glVertexAttribI1iv(index, v);}
+  GLEEPFNGLVERTEXATTRIBI1IVPROC GLeeFuncPtr_glVertexAttribI1iv=GLee_Lazy_glVertexAttribI1iv;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttribI2iv
+#define GLEE_C_DEFINED_glVertexAttribI2iv
+  void __stdcall GLee_Lazy_glVertexAttribI2iv(GLuint  index, const GLint * v)  {if (GLeeInit()) glVertexAttribI2iv(index, v);}
+  GLEEPFNGLVERTEXATTRIBI2IVPROC GLeeFuncPtr_glVertexAttribI2iv=GLee_Lazy_glVertexAttribI2iv;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttribI3iv
+#define GLEE_C_DEFINED_glVertexAttribI3iv
+  void __stdcall GLee_Lazy_glVertexAttribI3iv(GLuint  index, const GLint * v)  {if (GLeeInit()) glVertexAttribI3iv(index, v);}
+  GLEEPFNGLVERTEXATTRIBI3IVPROC GLeeFuncPtr_glVertexAttribI3iv=GLee_Lazy_glVertexAttribI3iv;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttribI4iv
+#define GLEE_C_DEFINED_glVertexAttribI4iv
+  void __stdcall GLee_Lazy_glVertexAttribI4iv(GLuint  index, const GLint * v)  {if (GLeeInit()) glVertexAttribI4iv(index, v);}
+  GLEEPFNGLVERTEXATTRIBI4IVPROC GLeeFuncPtr_glVertexAttribI4iv=GLee_Lazy_glVertexAttribI4iv;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttribI1uiv
+#define GLEE_C_DEFINED_glVertexAttribI1uiv
+  void __stdcall GLee_Lazy_glVertexAttribI1uiv(GLuint  index, const GLuint * v)  {if (GLeeInit()) glVertexAttribI1uiv(index, v);}
+  GLEEPFNGLVERTEXATTRIBI1UIVPROC GLeeFuncPtr_glVertexAttribI1uiv=GLee_Lazy_glVertexAttribI1uiv;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttribI2uiv
+#define GLEE_C_DEFINED_glVertexAttribI2uiv
+  void __stdcall GLee_Lazy_glVertexAttribI2uiv(GLuint  index, const GLuint * v)  {if (GLeeInit()) glVertexAttribI2uiv(index, v);}
+  GLEEPFNGLVERTEXATTRIBI2UIVPROC GLeeFuncPtr_glVertexAttribI2uiv=GLee_Lazy_glVertexAttribI2uiv;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttribI3uiv
+#define GLEE_C_DEFINED_glVertexAttribI3uiv
+  void __stdcall GLee_Lazy_glVertexAttribI3uiv(GLuint  index, const GLuint * v)  {if (GLeeInit()) glVertexAttribI3uiv(index, v);}
+  GLEEPFNGLVERTEXATTRIBI3UIVPROC GLeeFuncPtr_glVertexAttribI3uiv=GLee_Lazy_glVertexAttribI3uiv;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttribI4uiv
+#define GLEE_C_DEFINED_glVertexAttribI4uiv
+  void __stdcall GLee_Lazy_glVertexAttribI4uiv(GLuint  index, const GLuint * v)  {if (GLeeInit()) glVertexAttribI4uiv(index, v);}
+  GLEEPFNGLVERTEXATTRIBI4UIVPROC GLeeFuncPtr_glVertexAttribI4uiv=GLee_Lazy_glVertexAttribI4uiv;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttribI4bv
+#define GLEE_C_DEFINED_glVertexAttribI4bv
+  void __stdcall GLee_Lazy_glVertexAttribI4bv(GLuint  index, const GLbyte * v)  {if (GLeeInit()) glVertexAttribI4bv(index, v);}
+  GLEEPFNGLVERTEXATTRIBI4BVPROC GLeeFuncPtr_glVertexAttribI4bv=GLee_Lazy_glVertexAttribI4bv;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttribI4sv
+#define GLEE_C_DEFINED_glVertexAttribI4sv
+  void __stdcall GLee_Lazy_glVertexAttribI4sv(GLuint  index, const GLshort * v)  {if (GLeeInit()) glVertexAttribI4sv(index, v);}
+  GLEEPFNGLVERTEXATTRIBI4SVPROC GLeeFuncPtr_glVertexAttribI4sv=GLee_Lazy_glVertexAttribI4sv;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttribI4ubv
+#define GLEE_C_DEFINED_glVertexAttribI4ubv
+  void __stdcall GLee_Lazy_glVertexAttribI4ubv(GLuint  index, const GLubyte * v)  {if (GLeeInit()) glVertexAttribI4ubv(index, v);}
+  GLEEPFNGLVERTEXATTRIBI4UBVPROC GLeeFuncPtr_glVertexAttribI4ubv=GLee_Lazy_glVertexAttribI4ubv;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttribI4usv
+#define GLEE_C_DEFINED_glVertexAttribI4usv
+  void __stdcall GLee_Lazy_glVertexAttribI4usv(GLuint  index, const GLushort * v)  {if (GLeeInit()) glVertexAttribI4usv(index, v);}
+  GLEEPFNGLVERTEXATTRIBI4USVPROC GLeeFuncPtr_glVertexAttribI4usv=GLee_Lazy_glVertexAttribI4usv;
+#endif
+#ifndef GLEE_C_DEFINED_glGetUniformuiv
+#define GLEE_C_DEFINED_glGetUniformuiv
+  void __stdcall GLee_Lazy_glGetUniformuiv(GLuint  program, GLint  location, GLuint * params)  {if (GLeeInit()) glGetUniformuiv(program, location, params);}
+  GLEEPFNGLGETUNIFORMUIVPROC GLeeFuncPtr_glGetUniformuiv=GLee_Lazy_glGetUniformuiv;
+#endif
+#ifndef GLEE_C_DEFINED_glBindFragDataLocation
+#define GLEE_C_DEFINED_glBindFragDataLocation
+  void __stdcall GLee_Lazy_glBindFragDataLocation(GLuint  program, GLuint  color, const GLchar * name)  {if (GLeeInit()) glBindFragDataLocation(program, color, name);}
+  GLEEPFNGLBINDFRAGDATALOCATIONPROC GLeeFuncPtr_glBindFragDataLocation=GLee_Lazy_glBindFragDataLocation;
+#endif
+#ifndef GLEE_C_DEFINED_glGetFragDataLocation
+#define GLEE_C_DEFINED_glGetFragDataLocation
+  GLint __stdcall GLee_Lazy_glGetFragDataLocation(GLuint  program, const GLchar * name)  {if (GLeeInit()) return glGetFragDataLocation(program, name); return (GLint)0;}
+  GLEEPFNGLGETFRAGDATALOCATIONPROC GLeeFuncPtr_glGetFragDataLocation=GLee_Lazy_glGetFragDataLocation;
+#endif
+#ifndef GLEE_C_DEFINED_glUniform1ui
+#define GLEE_C_DEFINED_glUniform1ui
+  void __stdcall GLee_Lazy_glUniform1ui(GLint  location, GLuint  v0)  {if (GLeeInit()) glUniform1ui(location, v0);}
+  GLEEPFNGLUNIFORM1UIPROC GLeeFuncPtr_glUniform1ui=GLee_Lazy_glUniform1ui;
+#endif
+#ifndef GLEE_C_DEFINED_glUniform2ui
+#define GLEE_C_DEFINED_glUniform2ui
+  void __stdcall GLee_Lazy_glUniform2ui(GLint  location, GLuint  v0, GLuint  v1)  {if (GLeeInit()) glUniform2ui(location, v0, v1);}
+  GLEEPFNGLUNIFORM2UIPROC GLeeFuncPtr_glUniform2ui=GLee_Lazy_glUniform2ui;
+#endif
+#ifndef GLEE_C_DEFINED_glUniform3ui
+#define GLEE_C_DEFINED_glUniform3ui
+  void __stdcall GLee_Lazy_glUniform3ui(GLint  location, GLuint  v0, GLuint  v1, GLuint  v2)  {if (GLeeInit()) glUniform3ui(location, v0, v1, v2);}
+  GLEEPFNGLUNIFORM3UIPROC GLeeFuncPtr_glUniform3ui=GLee_Lazy_glUniform3ui;
+#endif
+#ifndef GLEE_C_DEFINED_glUniform4ui
+#define GLEE_C_DEFINED_glUniform4ui
+  void __stdcall GLee_Lazy_glUniform4ui(GLint  location, GLuint  v0, GLuint  v1, GLuint  v2, GLuint  v3)  {if (GLeeInit()) glUniform4ui(location, v0, v1, v2, v3);}
+  GLEEPFNGLUNIFORM4UIPROC GLeeFuncPtr_glUniform4ui=GLee_Lazy_glUniform4ui;
+#endif
+#ifndef GLEE_C_DEFINED_glUniform1uiv
+#define GLEE_C_DEFINED_glUniform1uiv
+  void __stdcall GLee_Lazy_glUniform1uiv(GLint  location, GLsizei  count, const GLuint * value)  {if (GLeeInit()) glUniform1uiv(location, count, value);}
+  GLEEPFNGLUNIFORM1UIVPROC GLeeFuncPtr_glUniform1uiv=GLee_Lazy_glUniform1uiv;
+#endif
+#ifndef GLEE_C_DEFINED_glUniform2uiv
+#define GLEE_C_DEFINED_glUniform2uiv
+  void __stdcall GLee_Lazy_glUniform2uiv(GLint  location, GLsizei  count, const GLuint * value)  {if (GLeeInit()) glUniform2uiv(location, count, value);}
+  GLEEPFNGLUNIFORM2UIVPROC GLeeFuncPtr_glUniform2uiv=GLee_Lazy_glUniform2uiv;
+#endif
+#ifndef GLEE_C_DEFINED_glUniform3uiv
+#define GLEE_C_DEFINED_glUniform3uiv
+  void __stdcall GLee_Lazy_glUniform3uiv(GLint  location, GLsizei  count, const GLuint * value)  {if (GLeeInit()) glUniform3uiv(location, count, value);}
+  GLEEPFNGLUNIFORM3UIVPROC GLeeFuncPtr_glUniform3uiv=GLee_Lazy_glUniform3uiv;
+#endif
+#ifndef GLEE_C_DEFINED_glUniform4uiv
+#define GLEE_C_DEFINED_glUniform4uiv
+  void __stdcall GLee_Lazy_glUniform4uiv(GLint  location, GLsizei  count, const GLuint * value)  {if (GLeeInit()) glUniform4uiv(location, count, value);}
+  GLEEPFNGLUNIFORM4UIVPROC GLeeFuncPtr_glUniform4uiv=GLee_Lazy_glUniform4uiv;
+#endif
+#ifndef GLEE_C_DEFINED_glTexParameterIiv
+#define GLEE_C_DEFINED_glTexParameterIiv
+  void __stdcall GLee_Lazy_glTexParameterIiv(GLenum  target, GLenum  pname, const GLint * params)  {if (GLeeInit()) glTexParameterIiv(target, pname, params);}
+  GLEEPFNGLTEXPARAMETERIIVPROC GLeeFuncPtr_glTexParameterIiv=GLee_Lazy_glTexParameterIiv;
+#endif
+#ifndef GLEE_C_DEFINED_glTexParameterIuiv
+#define GLEE_C_DEFINED_glTexParameterIuiv
+  void __stdcall GLee_Lazy_glTexParameterIuiv(GLenum  target, GLenum  pname, const GLuint * params)  {if (GLeeInit()) glTexParameterIuiv(target, pname, params);}
+  GLEEPFNGLTEXPARAMETERIUIVPROC GLeeFuncPtr_glTexParameterIuiv=GLee_Lazy_glTexParameterIuiv;
+#endif
+#ifndef GLEE_C_DEFINED_glGetTexParameterIiv
+#define GLEE_C_DEFINED_glGetTexParameterIiv
+  void __stdcall GLee_Lazy_glGetTexParameterIiv(GLenum  target, GLenum  pname, GLint * params)  {if (GLeeInit()) glGetTexParameterIiv(target, pname, params);}
+  GLEEPFNGLGETTEXPARAMETERIIVPROC GLeeFuncPtr_glGetTexParameterIiv=GLee_Lazy_glGetTexParameterIiv;
+#endif
+#ifndef GLEE_C_DEFINED_glGetTexParameterIuiv
+#define GLEE_C_DEFINED_glGetTexParameterIuiv
+  void __stdcall GLee_Lazy_glGetTexParameterIuiv(GLenum  target, GLenum  pname, GLuint * params)  {if (GLeeInit()) glGetTexParameterIuiv(target, pname, params);}
+  GLEEPFNGLGETTEXPARAMETERIUIVPROC GLeeFuncPtr_glGetTexParameterIuiv=GLee_Lazy_glGetTexParameterIuiv;
+#endif
+#ifndef GLEE_C_DEFINED_glClearBufferiv
+#define GLEE_C_DEFINED_glClearBufferiv
+  void __stdcall GLee_Lazy_glClearBufferiv(GLenum  buffer, GLint  drawbuffer, const GLint * value)  {if (GLeeInit()) glClearBufferiv(buffer, drawbuffer, value);}
+  GLEEPFNGLCLEARBUFFERIVPROC GLeeFuncPtr_glClearBufferiv=GLee_Lazy_glClearBufferiv;
+#endif
+#ifndef GLEE_C_DEFINED_glClearBufferuiv
+#define GLEE_C_DEFINED_glClearBufferuiv
+  void __stdcall GLee_Lazy_glClearBufferuiv(GLenum  buffer, GLint  drawbuffer, const GLuint * value)  {if (GLeeInit()) glClearBufferuiv(buffer, drawbuffer, value);}
+  GLEEPFNGLCLEARBUFFERUIVPROC GLeeFuncPtr_glClearBufferuiv=GLee_Lazy_glClearBufferuiv;
+#endif
+#ifndef GLEE_C_DEFINED_glClearBufferfv
+#define GLEE_C_DEFINED_glClearBufferfv
+  void __stdcall GLee_Lazy_glClearBufferfv(GLenum  buffer, GLint  drawbuffer, const GLfloat * value)  {if (GLeeInit()) glClearBufferfv(buffer, drawbuffer, value);}
+  GLEEPFNGLCLEARBUFFERFVPROC GLeeFuncPtr_glClearBufferfv=GLee_Lazy_glClearBufferfv;
+#endif
+#ifndef GLEE_C_DEFINED_glClearBufferfi
+#define GLEE_C_DEFINED_glClearBufferfi
+  void __stdcall GLee_Lazy_glClearBufferfi(GLenum  buffer, GLint  drawbuffer, GLfloat  depth, GLint  stencil)  {if (GLeeInit()) glClearBufferfi(buffer, drawbuffer, depth, stencil);}
+  GLEEPFNGLCLEARBUFFERFIPROC GLeeFuncPtr_glClearBufferfi=GLee_Lazy_glClearBufferfi;
+#endif
+#ifndef GLEE_C_DEFINED_glGetStringi
+#define GLEE_C_DEFINED_glGetStringi
+  const GLubyte * __stdcall GLee_Lazy_glGetStringi(GLenum  name, GLuint  index)  {if (GLeeInit()) return glGetStringi(name, index); return (const GLubyte *)0;}
+  GLEEPFNGLGETSTRINGIPROC GLeeFuncPtr_glGetStringi=GLee_Lazy_glGetStringi;
+#endif
+#endif 
+
+/* GL_VERSION_3_1 */
+
+#ifdef __GLEE_GL_VERSION_3_1
+#ifndef GLEE_C_DEFINED_glDrawArraysInstanced
+#define GLEE_C_DEFINED_glDrawArraysInstanced
+  void __stdcall GLee_Lazy_glDrawArraysInstanced(GLenum  mode, GLint  first, GLsizei  count, GLsizei  primcount)  {if (GLeeInit()) glDrawArraysInstanced(mode, first, count, primcount);}
+  GLEEPFNGLDRAWARRAYSINSTANCEDPROC GLeeFuncPtr_glDrawArraysInstanced=GLee_Lazy_glDrawArraysInstanced;
+#endif
+#ifndef GLEE_C_DEFINED_glDrawElementsInstanced
+#define GLEE_C_DEFINED_glDrawElementsInstanced
+  void __stdcall GLee_Lazy_glDrawElementsInstanced(GLenum  mode, GLsizei  count, GLenum  type, const GLvoid * indices, GLsizei  primcount)  {if (GLeeInit()) glDrawElementsInstanced(mode, count, type, indices, primcount);}
+  GLEEPFNGLDRAWELEMENTSINSTANCEDPROC GLeeFuncPtr_glDrawElementsInstanced=GLee_Lazy_glDrawElementsInstanced;
+#endif
+#ifndef GLEE_C_DEFINED_glTexBuffer
+#define GLEE_C_DEFINED_glTexBuffer
+  void __stdcall GLee_Lazy_glTexBuffer(GLenum  target, GLenum  internalformat, GLuint  buffer)  {if (GLeeInit()) glTexBuffer(target, internalformat, buffer);}
+  GLEEPFNGLTEXBUFFERPROC GLeeFuncPtr_glTexBuffer=GLee_Lazy_glTexBuffer;
+#endif
+#ifndef GLEE_C_DEFINED_glPrimitiveRestartIndex
+#define GLEE_C_DEFINED_glPrimitiveRestartIndex
+  void __stdcall GLee_Lazy_glPrimitiveRestartIndex(GLuint  index)  {if (GLeeInit()) glPrimitiveRestartIndex(index);}
+  GLEEPFNGLPRIMITIVERESTARTINDEXPROC GLeeFuncPtr_glPrimitiveRestartIndex=GLee_Lazy_glPrimitiveRestartIndex;
+#endif
+#endif 
+
+/* GL_VERSION_3_2 */
+
+#ifdef __GLEE_GL_VERSION_3_2
+#ifndef GLEE_C_DEFINED_glGetInteger64i_v
+#define GLEE_C_DEFINED_glGetInteger64i_v
+  void __stdcall GLee_Lazy_glGetInteger64i_v(GLenum  target, GLuint  index, GLint64 * data)  {if (GLeeInit()) glGetInteger64i_v(target, index, data);}
+  GLEEPFNGLGETINTEGER64I_VPROC GLeeFuncPtr_glGetInteger64i_v=GLee_Lazy_glGetInteger64i_v;
+#endif
+#ifndef GLEE_C_DEFINED_glGetBufferParameteri64v
+#define GLEE_C_DEFINED_glGetBufferParameteri64v
+  void __stdcall GLee_Lazy_glGetBufferParameteri64v(GLenum  target, GLenum  pname, GLint64 * params)  {if (GLeeInit()) glGetBufferParameteri64v(target, pname, params);}
+  GLEEPFNGLGETBUFFERPARAMETERI64VPROC GLeeFuncPtr_glGetBufferParameteri64v=GLee_Lazy_glGetBufferParameteri64v;
+#endif
+#ifndef GLEE_C_DEFINED_glFramebufferTexture
+#define GLEE_C_DEFINED_glFramebufferTexture
+  void __stdcall GLee_Lazy_glFramebufferTexture(GLenum  target, GLenum  attachment, GLuint  texture, GLint  level)  {if (GLeeInit()) glFramebufferTexture(target, attachment, texture, level);}
+  GLEEPFNGLFRAMEBUFFERTEXTUREPROC GLeeFuncPtr_glFramebufferTexture=GLee_Lazy_glFramebufferTexture;
+#endif
+#endif 
+
+/* GL_VERSION_3_3 */
+
+#ifdef __GLEE_GL_VERSION_3_3
+#ifndef GLEE_C_DEFINED_glVertexAttribDivisor
+#define GLEE_C_DEFINED_glVertexAttribDivisor
+  void __stdcall GLee_Lazy_glVertexAttribDivisor(GLuint  index, GLuint  divisor)  {if (GLeeInit()) glVertexAttribDivisor(index, divisor);}
+  GLEEPFNGLVERTEXATTRIBDIVISORPROC GLeeFuncPtr_glVertexAttribDivisor=GLee_Lazy_glVertexAttribDivisor;
+#endif
+#endif 
+
+/* GL_VERSION_4_0 */
+
+#ifdef __GLEE_GL_VERSION_4_0
+#ifndef GLEE_C_DEFINED_glMinSampleShading
+#define GLEE_C_DEFINED_glMinSampleShading
+  void __stdcall GLee_Lazy_glMinSampleShading(GLclampf  value)  {if (GLeeInit()) glMinSampleShading(value);}
+  GLEEPFNGLMINSAMPLESHADINGPROC GLeeFuncPtr_glMinSampleShading=GLee_Lazy_glMinSampleShading;
+#endif
+#ifndef GLEE_C_DEFINED_glBlendEquationi
+#define GLEE_C_DEFINED_glBlendEquationi
+  void __stdcall GLee_Lazy_glBlendEquationi(GLuint  buf, GLenum  mode)  {if (GLeeInit()) glBlendEquationi(buf, mode);}
+  GLEEPFNGLBLENDEQUATIONIPROC GLeeFuncPtr_glBlendEquationi=GLee_Lazy_glBlendEquationi;
+#endif
+#ifndef GLEE_C_DEFINED_glBlendEquationSeparatei
+#define GLEE_C_DEFINED_glBlendEquationSeparatei
+  void __stdcall GLee_Lazy_glBlendEquationSeparatei(GLuint  buf, GLenum  modeRGB, GLenum  modeAlpha)  {if (GLeeInit()) glBlendEquationSeparatei(buf, modeRGB, modeAlpha);}
+  GLEEPFNGLBLENDEQUATIONSEPARATEIPROC GLeeFuncPtr_glBlendEquationSeparatei=GLee_Lazy_glBlendEquationSeparatei;
+#endif
+#ifndef GLEE_C_DEFINED_glBlendFunci
+#define GLEE_C_DEFINED_glBlendFunci
+  void __stdcall GLee_Lazy_glBlendFunci(GLuint  buf, GLenum  src, GLenum  dst)  {if (GLeeInit()) glBlendFunci(buf, src, dst);}
+  GLEEPFNGLBLENDFUNCIPROC GLeeFuncPtr_glBlendFunci=GLee_Lazy_glBlendFunci;
+#endif
+#ifndef GLEE_C_DEFINED_glBlendFuncSeparatei
+#define GLEE_C_DEFINED_glBlendFuncSeparatei
+  void __stdcall GLee_Lazy_glBlendFuncSeparatei(GLuint  buf, GLenum  srcRGB, GLenum  dstRGB, GLenum  srcAlpha, GLenum  dstAlpha)  {if (GLeeInit()) glBlendFuncSeparatei(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);}
+  GLEEPFNGLBLENDFUNCSEPARATEIPROC GLeeFuncPtr_glBlendFuncSeparatei=GLee_Lazy_glBlendFuncSeparatei;
+#endif
+#endif 
+
+/* GL_VERSION_4_1 */
+
+#ifdef __GLEE_GL_VERSION_4_1
+#endif 
+
+/* GL_VERSION_4_2 */
+
+#ifdef __GLEE_GL_VERSION_4_2
+#endif 
+
+/* GL_ARB_multitexture */
+
+#ifdef __GLEE_GL_ARB_multitexture
+#ifndef GLEE_C_DEFINED_glActiveTextureARB
+#define GLEE_C_DEFINED_glActiveTextureARB
+  void __stdcall GLee_Lazy_glActiveTextureARB(GLenum  texture)  {if (GLeeInit()) glActiveTextureARB(texture);}
+  GLEEPFNGLACTIVETEXTUREARBPROC GLeeFuncPtr_glActiveTextureARB=GLee_Lazy_glActiveTextureARB;
+#endif
+#ifndef GLEE_C_DEFINED_glClientActiveTextureARB
+#define GLEE_C_DEFINED_glClientActiveTextureARB
+  void __stdcall GLee_Lazy_glClientActiveTextureARB(GLenum  texture)  {if (GLeeInit()) glClientActiveTextureARB(texture);}
+  GLEEPFNGLCLIENTACTIVETEXTUREARBPROC GLeeFuncPtr_glClientActiveTextureARB=GLee_Lazy_glClientActiveTextureARB;
+#endif
+#ifndef GLEE_C_DEFINED_glMultiTexCoord1dARB
+#define GLEE_C_DEFINED_glMultiTexCoord1dARB
+  void __stdcall GLee_Lazy_glMultiTexCoord1dARB(GLenum  target, GLdouble  s)  {if (GLeeInit()) glMultiTexCoord1dARB(target, s);}
+  GLEEPFNGLMULTITEXCOORD1DARBPROC GLeeFuncPtr_glMultiTexCoord1dARB=GLee_Lazy_glMultiTexCoord1dARB;
+#endif
+#ifndef GLEE_C_DEFINED_glMultiTexCoord1dvARB
+#define GLEE_C_DEFINED_glMultiTexCoord1dvARB
+  void __stdcall GLee_Lazy_glMultiTexCoord1dvARB(GLenum  target, const GLdouble * v)  {if (GLeeInit()) glMultiTexCoord1dvARB(target, v);}
+  GLEEPFNGLMULTITEXCOORD1DVARBPROC GLeeFuncPtr_glMultiTexCoord1dvARB=GLee_Lazy_glMultiTexCoord1dvARB;
+#endif
+#ifndef GLEE_C_DEFINED_glMultiTexCoord1fARB
+#define GLEE_C_DEFINED_glMultiTexCoord1fARB
+  void __stdcall GLee_Lazy_glMultiTexCoord1fARB(GLenum  target, GLfloat  s)  {if (GLeeInit()) glMultiTexCoord1fARB(target, s);}
+  GLEEPFNGLMULTITEXCOORD1FARBPROC GLeeFuncPtr_glMultiTexCoord1fARB=GLee_Lazy_glMultiTexCoord1fARB;
+#endif
+#ifndef GLEE_C_DEFINED_glMultiTexCoord1fvARB
+#define GLEE_C_DEFINED_glMultiTexCoord1fvARB
+  void __stdcall GLee_Lazy_glMultiTexCoord1fvARB(GLenum  target, const GLfloat * v)  {if (GLeeInit()) glMultiTexCoord1fvARB(target, v);}
+  GLEEPFNGLMULTITEXCOORD1FVARBPROC GLeeFuncPtr_glMultiTexCoord1fvARB=GLee_Lazy_glMultiTexCoord1fvARB;
+#endif
+#ifndef GLEE_C_DEFINED_glMultiTexCoord1iARB
+#define GLEE_C_DEFINED_glMultiTexCoord1iARB
+  void __stdcall GLee_Lazy_glMultiTexCoord1iARB(GLenum  target, GLint  s)  {if (GLeeInit()) glMultiTexCoord1iARB(target, s);}
+  GLEEPFNGLMULTITEXCOORD1IARBPROC GLeeFuncPtr_glMultiTexCoord1iARB=GLee_Lazy_glMultiTexCoord1iARB;
+#endif
+#ifndef GLEE_C_DEFINED_glMultiTexCoord1ivARB
+#define GLEE_C_DEFINED_glMultiTexCoord1ivARB
+  void __stdcall GLee_Lazy_glMultiTexCoord1ivARB(GLenum  target, const GLint * v)  {if (GLeeInit()) glMultiTexCoord1ivARB(target, v);}
+  GLEEPFNGLMULTITEXCOORD1IVARBPROC GLeeFuncPtr_glMultiTexCoord1ivARB=GLee_Lazy_glMultiTexCoord1ivARB;
+#endif
+#ifndef GLEE_C_DEFINED_glMultiTexCoord1sARB
+#define GLEE_C_DEFINED_glMultiTexCoord1sARB
+  void __stdcall GLee_Lazy_glMultiTexCoord1sARB(GLenum  target, GLshort  s)  {if (GLeeInit()) glMultiTexCoord1sARB(target, s);}
+  GLEEPFNGLMULTITEXCOORD1SARBPROC GLeeFuncPtr_glMultiTexCoord1sARB=GLee_Lazy_glMultiTexCoord1sARB;
+#endif
+#ifndef GLEE_C_DEFINED_glMultiTexCoord1svARB
+#define GLEE_C_DEFINED_glMultiTexCoord1svARB
+  void __stdcall GLee_Lazy_glMultiTexCoord1svARB(GLenum  target, const GLshort * v)  {if (GLeeInit()) glMultiTexCoord1svARB(target, v);}
+  GLEEPFNGLMULTITEXCOORD1SVARBPROC GLeeFuncPtr_glMultiTexCoord1svARB=GLee_Lazy_glMultiTexCoord1svARB;
+#endif
+#ifndef GLEE_C_DEFINED_glMultiTexCoord2dARB
+#define GLEE_C_DEFINED_glMultiTexCoord2dARB
+  void __stdcall GLee_Lazy_glMultiTexCoord2dARB(GLenum  target, GLdouble  s, GLdouble  t)  {if (GLeeInit()) glMultiTexCoord2dARB(target, s, t);}
+  GLEEPFNGLMULTITEXCOORD2DARBPROC GLeeFuncPtr_glMultiTexCoord2dARB=GLee_Lazy_glMultiTexCoord2dARB;
+#endif
+#ifndef GLEE_C_DEFINED_glMultiTexCoord2dvARB
+#define GLEE_C_DEFINED_glMultiTexCoord2dvARB
+  void __stdcall GLee_Lazy_glMultiTexCoord2dvARB(GLenum  target, const GLdouble * v)  {if (GLeeInit()) glMultiTexCoord2dvARB(target, v);}
+  GLEEPFNGLMULTITEXCOORD2DVARBPROC GLeeFuncPtr_glMultiTexCoord2dvARB=GLee_Lazy_glMultiTexCoord2dvARB;
+#endif
+#ifndef GLEE_C_DEFINED_glMultiTexCoord2fARB
+#define GLEE_C_DEFINED_glMultiTexCoord2fARB
+  void __stdcall GLee_Lazy_glMultiTexCoord2fARB(GLenum  target, GLfloat  s, GLfloat  t)  {if (GLeeInit()) glMultiTexCoord2fARB(target, s, t);}
+  GLEEPFNGLMULTITEXCOORD2FARBPROC GLeeFuncPtr_glMultiTexCoord2fARB=GLee_Lazy_glMultiTexCoord2fARB;
+#endif
+#ifndef GLEE_C_DEFINED_glMultiTexCoord2fvARB
+#define GLEE_C_DEFINED_glMultiTexCoord2fvARB
+  void __stdcall GLee_Lazy_glMultiTexCoord2fvARB(GLenum  target, const GLfloat * v)  {if (GLeeInit()) glMultiTexCoord2fvARB(target, v);}
+  GLEEPFNGLMULTITEXCOORD2FVARBPROC GLeeFuncPtr_glMultiTexCoord2fvARB=GLee_Lazy_glMultiTexCoord2fvARB;
+#endif
+#ifndef GLEE_C_DEFINED_glMultiTexCoord2iARB
+#define GLEE_C_DEFINED_glMultiTexCoord2iARB
+  void __stdcall GLee_Lazy_glMultiTexCoord2iARB(GLenum  target, GLint  s, GLint  t)  {if (GLeeInit()) glMultiTexCoord2iARB(target, s, t);}
+  GLEEPFNGLMULTITEXCOORD2IARBPROC GLeeFuncPtr_glMultiTexCoord2iARB=GLee_Lazy_glMultiTexCoord2iARB;
+#endif
+#ifndef GLEE_C_DEFINED_glMultiTexCoord2ivARB
+#define GLEE_C_DEFINED_glMultiTexCoord2ivARB
+  void __stdcall GLee_Lazy_glMultiTexCoord2ivARB(GLenum  target, const GLint * v)  {if (GLeeInit()) glMultiTexCoord2ivARB(target, v);}
+  GLEEPFNGLMULTITEXCOORD2IVARBPROC GLeeFuncPtr_glMultiTexCoord2ivARB=GLee_Lazy_glMultiTexCoord2ivARB;
+#endif
+#ifndef GLEE_C_DEFINED_glMultiTexCoord2sARB
+#define GLEE_C_DEFINED_glMultiTexCoord2sARB
+  void __stdcall GLee_Lazy_glMultiTexCoord2sARB(GLenum  target, GLshort  s, GLshort  t)  {if (GLeeInit()) glMultiTexCoord2sARB(target, s, t);}
+  GLEEPFNGLMULTITEXCOORD2SARBPROC GLeeFuncPtr_glMultiTexCoord2sARB=GLee_Lazy_glMultiTexCoord2sARB;
+#endif
+#ifndef GLEE_C_DEFINED_glMultiTexCoord2svARB
+#define GLEE_C_DEFINED_glMultiTexCoord2svARB
+  void __stdcall GLee_Lazy_glMultiTexCoord2svARB(GLenum  target, const GLshort * v)  {if (GLeeInit()) glMultiTexCoord2svARB(target, v);}
+  GLEEPFNGLMULTITEXCOORD2SVARBPROC GLeeFuncPtr_glMultiTexCoord2svARB=GLee_Lazy_glMultiTexCoord2svARB;
+#endif
+#ifndef GLEE_C_DEFINED_glMultiTexCoord3dARB
+#define GLEE_C_DEFINED_glMultiTexCoord3dARB
+  void __stdcall GLee_Lazy_glMultiTexCoord3dARB(GLenum  target, GLdouble  s, GLdouble  t, GLdouble  r)  {if (GLeeInit()) glMultiTexCoord3dARB(target, s, t, r);}
+  GLEEPFNGLMULTITEXCOORD3DARBPROC GLeeFuncPtr_glMultiTexCoord3dARB=GLee_Lazy_glMultiTexCoord3dARB;
+#endif
+#ifndef GLEE_C_DEFINED_glMultiTexCoord3dvARB
+#define GLEE_C_DEFINED_glMultiTexCoord3dvARB
+  void __stdcall GLee_Lazy_glMultiTexCoord3dvARB(GLenum  target, const GLdouble * v)  {if (GLeeInit()) glMultiTexCoord3dvARB(target, v);}
+  GLEEPFNGLMULTITEXCOORD3DVARBPROC GLeeFuncPtr_glMultiTexCoord3dvARB=GLee_Lazy_glMultiTexCoord3dvARB;
+#endif
+#ifndef GLEE_C_DEFINED_glMultiTexCoord3fARB
+#define GLEE_C_DEFINED_glMultiTexCoord3fARB
+  void __stdcall GLee_Lazy_glMultiTexCoord3fARB(GLenum  target, GLfloat  s, GLfloat  t, GLfloat  r)  {if (GLeeInit()) glMultiTexCoord3fARB(target, s, t, r);}
+  GLEEPFNGLMULTITEXCOORD3FARBPROC GLeeFuncPtr_glMultiTexCoord3fARB=GLee_Lazy_glMultiTexCoord3fARB;
+#endif
+#ifndef GLEE_C_DEFINED_glMultiTexCoord3fvARB
+#define GLEE_C_DEFINED_glMultiTexCoord3fvARB
+  void __stdcall GLee_Lazy_glMultiTexCoord3fvARB(GLenum  target, const GLfloat * v)  {if (GLeeInit()) glMultiTexCoord3fvARB(target, v);}
+  GLEEPFNGLMULTITEXCOORD3FVARBPROC GLeeFuncPtr_glMultiTexCoord3fvARB=GLee_Lazy_glMultiTexCoord3fvARB;
+#endif
+#ifndef GLEE_C_DEFINED_glMultiTexCoord3iARB
+#define GLEE_C_DEFINED_glMultiTexCoord3iARB
+  void __stdcall GLee_Lazy_glMultiTexCoord3iARB(GLenum  target, GLint  s, GLint  t, GLint  r)  {if (GLeeInit()) glMultiTexCoord3iARB(target, s, t, r);}
+  GLEEPFNGLMULTITEXCOORD3IARBPROC GLeeFuncPtr_glMultiTexCoord3iARB=GLee_Lazy_glMultiTexCoord3iARB;
+#endif
+#ifndef GLEE_C_DEFINED_glMultiTexCoord3ivARB
+#define GLEE_C_DEFINED_glMultiTexCoord3ivARB
+  void __stdcall GLee_Lazy_glMultiTexCoord3ivARB(GLenum  target, const GLint * v)  {if (GLeeInit()) glMultiTexCoord3ivARB(target, v);}
+  GLEEPFNGLMULTITEXCOORD3IVARBPROC GLeeFuncPtr_glMultiTexCoord3ivARB=GLee_Lazy_glMultiTexCoord3ivARB;
+#endif
+#ifndef GLEE_C_DEFINED_glMultiTexCoord3sARB
+#define GLEE_C_DEFINED_glMultiTexCoord3sARB
+  void __stdcall GLee_Lazy_glMultiTexCoord3sARB(GLenum  target, GLshort  s, GLshort  t, GLshort  r)  {if (GLeeInit()) glMultiTexCoord3sARB(target, s, t, r);}
+  GLEEPFNGLMULTITEXCOORD3SARBPROC GLeeFuncPtr_glMultiTexCoord3sARB=GLee_Lazy_glMultiTexCoord3sARB;
+#endif
+#ifndef GLEE_C_DEFINED_glMultiTexCoord3svARB
+#define GLEE_C_DEFINED_glMultiTexCoord3svARB
+  void __stdcall GLee_Lazy_glMultiTexCoord3svARB(GLenum  target, const GLshort * v)  {if (GLeeInit()) glMultiTexCoord3svARB(target, v);}
+  GLEEPFNGLMULTITEXCOORD3SVARBPROC GLeeFuncPtr_glMultiTexCoord3svARB=GLee_Lazy_glMultiTexCoord3svARB;
+#endif
+#ifndef GLEE_C_DEFINED_glMultiTexCoord4dARB
+#define GLEE_C_DEFINED_glMultiTexCoord4dARB
+  void __stdcall GLee_Lazy_glMultiTexCoord4dARB(GLenum  target, GLdouble  s, GLdouble  t, GLdouble  r, GLdouble  q)  {if (GLeeInit()) glMultiTexCoord4dARB(target, s, t, r, q);}
+  GLEEPFNGLMULTITEXCOORD4DARBPROC GLeeFuncPtr_glMultiTexCoord4dARB=GLee_Lazy_glMultiTexCoord4dARB;
+#endif
+#ifndef GLEE_C_DEFINED_glMultiTexCoord4dvARB
+#define GLEE_C_DEFINED_glMultiTexCoord4dvARB
+  void __stdcall GLee_Lazy_glMultiTexCoord4dvARB(GLenum  target, const GLdouble * v)  {if (GLeeInit()) glMultiTexCoord4dvARB(target, v);}
+  GLEEPFNGLMULTITEXCOORD4DVARBPROC GLeeFuncPtr_glMultiTexCoord4dvARB=GLee_Lazy_glMultiTexCoord4dvARB;
+#endif
+#ifndef GLEE_C_DEFINED_glMultiTexCoord4fARB
+#define GLEE_C_DEFINED_glMultiTexCoord4fARB
+  void __stdcall GLee_Lazy_glMultiTexCoord4fARB(GLenum  target, GLfloat  s, GLfloat  t, GLfloat  r, GLfloat  q)  {if (GLeeInit()) glMultiTexCoord4fARB(target, s, t, r, q);}
+  GLEEPFNGLMULTITEXCOORD4FARBPROC GLeeFuncPtr_glMultiTexCoord4fARB=GLee_Lazy_glMultiTexCoord4fARB;
+#endif
+#ifndef GLEE_C_DEFINED_glMultiTexCoord4fvARB
+#define GLEE_C_DEFINED_glMultiTexCoord4fvARB
+  void __stdcall GLee_Lazy_glMultiTexCoord4fvARB(GLenum  target, const GLfloat * v)  {if (GLeeInit()) glMultiTexCoord4fvARB(target, v);}
+  GLEEPFNGLMULTITEXCOORD4FVARBPROC GLeeFuncPtr_glMultiTexCoord4fvARB=GLee_Lazy_glMultiTexCoord4fvARB;
+#endif
+#ifndef GLEE_C_DEFINED_glMultiTexCoord4iARB
+#define GLEE_C_DEFINED_glMultiTexCoord4iARB
+  void __stdcall GLee_Lazy_glMultiTexCoord4iARB(GLenum  target, GLint  s, GLint  t, GLint  r, GLint  q)  {if (GLeeInit()) glMultiTexCoord4iARB(target, s, t, r, q);}
+  GLEEPFNGLMULTITEXCOORD4IARBPROC GLeeFuncPtr_glMultiTexCoord4iARB=GLee_Lazy_glMultiTexCoord4iARB;
+#endif
+#ifndef GLEE_C_DEFINED_glMultiTexCoord4ivARB
+#define GLEE_C_DEFINED_glMultiTexCoord4ivARB
+  void __stdcall GLee_Lazy_glMultiTexCoord4ivARB(GLenum  target, const GLint * v)  {if (GLeeInit()) glMultiTexCoord4ivARB(target, v);}
+  GLEEPFNGLMULTITEXCOORD4IVARBPROC GLeeFuncPtr_glMultiTexCoord4ivARB=GLee_Lazy_glMultiTexCoord4ivARB;
+#endif
+#ifndef GLEE_C_DEFINED_glMultiTexCoord4sARB
+#define GLEE_C_DEFINED_glMultiTexCoord4sARB
+  void __stdcall GLee_Lazy_glMultiTexCoord4sARB(GLenum  target, GLshort  s, GLshort  t, GLshort  r, GLshort  q)  {if (GLeeInit()) glMultiTexCoord4sARB(target, s, t, r, q);}
+  GLEEPFNGLMULTITEXCOORD4SARBPROC GLeeFuncPtr_glMultiTexCoord4sARB=GLee_Lazy_glMultiTexCoord4sARB;
+#endif
+#ifndef GLEE_C_DEFINED_glMultiTexCoord4svARB
+#define GLEE_C_DEFINED_glMultiTexCoord4svARB
+  void __stdcall GLee_Lazy_glMultiTexCoord4svARB(GLenum  target, const GLshort * v)  {if (GLeeInit()) glMultiTexCoord4svARB(target, v);}
+  GLEEPFNGLMULTITEXCOORD4SVARBPROC GLeeFuncPtr_glMultiTexCoord4svARB=GLee_Lazy_glMultiTexCoord4svARB;
+#endif
+#endif 
+
+/* GL_ARB_transpose_matrix */
+
+#ifdef __GLEE_GL_ARB_transpose_matrix
+#ifndef GLEE_C_DEFINED_glLoadTransposeMatrixfARB
+#define GLEE_C_DEFINED_glLoadTransposeMatrixfARB
+  void __stdcall GLee_Lazy_glLoadTransposeMatrixfARB(const GLfloat * m)  {if (GLeeInit()) glLoadTransposeMatrixfARB(m);}
+  GLEEPFNGLLOADTRANSPOSEMATRIXFARBPROC GLeeFuncPtr_glLoadTransposeMatrixfARB=GLee_Lazy_glLoadTransposeMatrixfARB;
+#endif
+#ifndef GLEE_C_DEFINED_glLoadTransposeMatrixdARB
+#define GLEE_C_DEFINED_glLoadTransposeMatrixdARB
+  void __stdcall GLee_Lazy_glLoadTransposeMatrixdARB(const GLdouble * m)  {if (GLeeInit()) glLoadTransposeMatrixdARB(m);}
+  GLEEPFNGLLOADTRANSPOSEMATRIXDARBPROC GLeeFuncPtr_glLoadTransposeMatrixdARB=GLee_Lazy_glLoadTransposeMatrixdARB;
+#endif
+#ifndef GLEE_C_DEFINED_glMultTransposeMatrixfARB
+#define GLEE_C_DEFINED_glMultTransposeMatrixfARB
+  void __stdcall GLee_Lazy_glMultTransposeMatrixfARB(const GLfloat * m)  {if (GLeeInit()) glMultTransposeMatrixfARB(m);}
+  GLEEPFNGLMULTTRANSPOSEMATRIXFARBPROC GLeeFuncPtr_glMultTransposeMatrixfARB=GLee_Lazy_glMultTransposeMatrixfARB;
+#endif
+#ifndef GLEE_C_DEFINED_glMultTransposeMatrixdARB
+#define GLEE_C_DEFINED_glMultTransposeMatrixdARB
+  void __stdcall GLee_Lazy_glMultTransposeMatrixdARB(const GLdouble * m)  {if (GLeeInit()) glMultTransposeMatrixdARB(m);}
+  GLEEPFNGLMULTTRANSPOSEMATRIXDARBPROC GLeeFuncPtr_glMultTransposeMatrixdARB=GLee_Lazy_glMultTransposeMatrixdARB;
+#endif
+#endif 
+
+/* GL_ARB_multisample */
+
+#ifdef __GLEE_GL_ARB_multisample
+#ifndef GLEE_C_DEFINED_glSampleCoverageARB
+#define GLEE_C_DEFINED_glSampleCoverageARB
+  void __stdcall GLee_Lazy_glSampleCoverageARB(GLclampf  value, GLboolean  invert)  {if (GLeeInit()) glSampleCoverageARB(value, invert);}
+  GLEEPFNGLSAMPLECOVERAGEARBPROC GLeeFuncPtr_glSampleCoverageARB=GLee_Lazy_glSampleCoverageARB;
+#endif
+#endif 
+
+/* GL_ARB_texture_env_add */
+
+#ifdef __GLEE_GL_ARB_texture_env_add
+#endif 
+
+/* GL_ARB_texture_cube_map */
+
+#ifdef __GLEE_GL_ARB_texture_cube_map
+#endif 
+
+/* GL_ARB_texture_compression */
+
+#ifdef __GLEE_GL_ARB_texture_compression
+#ifndef GLEE_C_DEFINED_glCompressedTexImage3DARB
+#define GLEE_C_DEFINED_glCompressedTexImage3DARB
+  void __stdcall GLee_Lazy_glCompressedTexImage3DARB(GLenum  target, GLint  level, GLenum  internalformat, GLsizei  width, GLsizei  height, GLsizei  depth, GLint  border, GLsizei  imageSize, const GLvoid * data)  {if (GLeeInit()) glCompressedTexImage3DARB(target, level, internalformat, width, height, depth, border, imageSize, data);}
+  GLEEPFNGLCOMPRESSEDTEXIMAGE3DARBPROC GLeeFuncPtr_glCompressedTexImage3DARB=GLee_Lazy_glCompressedTexImage3DARB;
+#endif
+#ifndef GLEE_C_DEFINED_glCompressedTexImage2DARB
+#define GLEE_C_DEFINED_glCompressedTexImage2DARB
+  void __stdcall GLee_Lazy_glCompressedTexImage2DARB(GLenum  target, GLint  level, GLenum  internalformat, GLsizei  width, GLsizei  height, GLint  border, GLsizei  imageSize, const GLvoid * data)  {if (GLeeInit()) glCompressedTexImage2DARB(target, level, internalformat, width, height, border, imageSize, data);}
+  GLEEPFNGLCOMPRESSEDTEXIMAGE2DARBPROC GLeeFuncPtr_glCompressedTexImage2DARB=GLee_Lazy_glCompressedTexImage2DARB;
+#endif
+#ifndef GLEE_C_DEFINED_glCompressedTexImage1DARB
+#define GLEE_C_DEFINED_glCompressedTexImage1DARB
+  void __stdcall GLee_Lazy_glCompressedTexImage1DARB(GLenum  target, GLint  level, GLenum  internalformat, GLsizei  width, GLint  border, GLsizei  imageSize, const GLvoid * data)  {if (GLeeInit()) glCompressedTexImage1DARB(target, level, internalformat, width, border, imageSize, data);}
+  GLEEPFNGLCOMPRESSEDTEXIMAGE1DARBPROC GLeeFuncPtr_glCompressedTexImage1DARB=GLee_Lazy_glCompressedTexImage1DARB;
+#endif
+#ifndef GLEE_C_DEFINED_glCompressedTexSubImage3DARB
+#define GLEE_C_DEFINED_glCompressedTexSubImage3DARB
+  void __stdcall GLee_Lazy_glCompressedTexSubImage3DARB(GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLint  zoffset, GLsizei  width, GLsizei  height, GLsizei  depth, GLenum  format, GLsizei  imageSize, const GLvoid * data)  {if (GLeeInit()) glCompressedTexSubImage3DARB(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);}
+  GLEEPFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC GLeeFuncPtr_glCompressedTexSubImage3DARB=GLee_Lazy_glCompressedTexSubImage3DARB;
+#endif
+#ifndef GLEE_C_DEFINED_glCompressedTexSubImage2DARB
+#define GLEE_C_DEFINED_glCompressedTexSubImage2DARB
+  void __stdcall GLee_Lazy_glCompressedTexSubImage2DARB(GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLsizei  width, GLsizei  height, GLenum  format, GLsizei  imageSize, const GLvoid * data)  {if (GLeeInit()) glCompressedTexSubImage2DARB(target, level, xoffset, yoffset, width, height, format, imageSize, data);}
+  GLEEPFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC GLeeFuncPtr_glCompressedTexSubImage2DARB=GLee_Lazy_glCompressedTexSubImage2DARB;
+#endif
+#ifndef GLEE_C_DEFINED_glCompressedTexSubImage1DARB
+#define GLEE_C_DEFINED_glCompressedTexSubImage1DARB
+  void __stdcall GLee_Lazy_glCompressedTexSubImage1DARB(GLenum  target, GLint  level, GLint  xoffset, GLsizei  width, GLenum  format, GLsizei  imageSize, const GLvoid * data)  {if (GLeeInit()) glCompressedTexSubImage1DARB(target, level, xoffset, width, format, imageSize, data);}
+  GLEEPFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC GLeeFuncPtr_glCompressedTexSubImage1DARB=GLee_Lazy_glCompressedTexSubImage1DARB;
+#endif
+#ifndef GLEE_C_DEFINED_glGetCompressedTexImageARB
+#define GLEE_C_DEFINED_glGetCompressedTexImageARB
+  void __stdcall GLee_Lazy_glGetCompressedTexImageARB(GLenum  target, GLint  level, GLvoid * img)  {if (GLeeInit()) glGetCompressedTexImageARB(target, level, img);}
+  GLEEPFNGLGETCOMPRESSEDTEXIMAGEARBPROC GLeeFuncPtr_glGetCompressedTexImageARB=GLee_Lazy_glGetCompressedTexImageARB;
+#endif
+#endif 
+
+/* GL_ARB_texture_border_clamp */
+
+#ifdef __GLEE_GL_ARB_texture_border_clamp
+#endif 
+
+/* GL_ARB_point_parameters */
+
+#ifdef __GLEE_GL_ARB_point_parameters
+#ifndef GLEE_C_DEFINED_glPointParameterfARB
+#define GLEE_C_DEFINED_glPointParameterfARB
+  void __stdcall GLee_Lazy_glPointParameterfARB(GLenum  pname, GLfloat  param)  {if (GLeeInit()) glPointParameterfARB(pname, param);}
+  GLEEPFNGLPOINTPARAMETERFARBPROC GLeeFuncPtr_glPointParameterfARB=GLee_Lazy_glPointParameterfARB;
+#endif
+#ifndef GLEE_C_DEFINED_glPointParameterfvARB
+#define GLEE_C_DEFINED_glPointParameterfvARB
+  void __stdcall GLee_Lazy_glPointParameterfvARB(GLenum  pname, const GLfloat * params)  {if (GLeeInit()) glPointParameterfvARB(pname, params);}
+  GLEEPFNGLPOINTPARAMETERFVARBPROC GLeeFuncPtr_glPointParameterfvARB=GLee_Lazy_glPointParameterfvARB;
+#endif
+#endif 
+
+/* GL_ARB_vertex_blend */
+
+#ifdef __GLEE_GL_ARB_vertex_blend
+#ifndef GLEE_C_DEFINED_glWeightbvARB
+#define GLEE_C_DEFINED_glWeightbvARB
+  void __stdcall GLee_Lazy_glWeightbvARB(GLint  size, const GLbyte * weights)  {if (GLeeInit()) glWeightbvARB(size, weights);}
+  GLEEPFNGLWEIGHTBVARBPROC GLeeFuncPtr_glWeightbvARB=GLee_Lazy_glWeightbvARB;
+#endif
+#ifndef GLEE_C_DEFINED_glWeightsvARB
+#define GLEE_C_DEFINED_glWeightsvARB
+  void __stdcall GLee_Lazy_glWeightsvARB(GLint  size, const GLshort * weights)  {if (GLeeInit()) glWeightsvARB(size, weights);}
+  GLEEPFNGLWEIGHTSVARBPROC GLeeFuncPtr_glWeightsvARB=GLee_Lazy_glWeightsvARB;
+#endif
+#ifndef GLEE_C_DEFINED_glWeightivARB
+#define GLEE_C_DEFINED_glWeightivARB
+  void __stdcall GLee_Lazy_glWeightivARB(GLint  size, const GLint * weights)  {if (GLeeInit()) glWeightivARB(size, weights);}
+  GLEEPFNGLWEIGHTIVARBPROC GLeeFuncPtr_glWeightivARB=GLee_Lazy_glWeightivARB;
+#endif
+#ifndef GLEE_C_DEFINED_glWeightfvARB
+#define GLEE_C_DEFINED_glWeightfvARB
+  void __stdcall GLee_Lazy_glWeightfvARB(GLint  size, const GLfloat * weights)  {if (GLeeInit()) glWeightfvARB(size, weights);}
+  GLEEPFNGLWEIGHTFVARBPROC GLeeFuncPtr_glWeightfvARB=GLee_Lazy_glWeightfvARB;
+#endif
+#ifndef GLEE_C_DEFINED_glWeightdvARB
+#define GLEE_C_DEFINED_glWeightdvARB
+  void __stdcall GLee_Lazy_glWeightdvARB(GLint  size, const GLdouble * weights)  {if (GLeeInit()) glWeightdvARB(size, weights);}
+  GLEEPFNGLWEIGHTDVARBPROC GLeeFuncPtr_glWeightdvARB=GLee_Lazy_glWeightdvARB;
+#endif
+#ifndef GLEE_C_DEFINED_glWeightubvARB
+#define GLEE_C_DEFINED_glWeightubvARB
+  void __stdcall GLee_Lazy_glWeightubvARB(GLint  size, const GLubyte * weights)  {if (GLeeInit()) glWeightubvARB(size, weights);}
+  GLEEPFNGLWEIGHTUBVARBPROC GLeeFuncPtr_glWeightubvARB=GLee_Lazy_glWeightubvARB;
+#endif
+#ifndef GLEE_C_DEFINED_glWeightusvARB
+#define GLEE_C_DEFINED_glWeightusvARB
+  void __stdcall GLee_Lazy_glWeightusvARB(GLint  size, const GLushort * weights)  {if (GLeeInit()) glWeightusvARB(size, weights);}
+  GLEEPFNGLWEIGHTUSVARBPROC GLeeFuncPtr_glWeightusvARB=GLee_Lazy_glWeightusvARB;
+#endif
+#ifndef GLEE_C_DEFINED_glWeightuivARB
+#define GLEE_C_DEFINED_glWeightuivARB
+  void __stdcall GLee_Lazy_glWeightuivARB(GLint  size, const GLuint * weights)  {if (GLeeInit()) glWeightuivARB(size, weights);}
+  GLEEPFNGLWEIGHTUIVARBPROC GLeeFuncPtr_glWeightuivARB=GLee_Lazy_glWeightuivARB;
+#endif
+#ifndef GLEE_C_DEFINED_glWeightPointerARB
+#define GLEE_C_DEFINED_glWeightPointerARB
+  void __stdcall GLee_Lazy_glWeightPointerARB(GLint  size, GLenum  type, GLsizei  stride, const GLvoid * pointer)  {if (GLeeInit()) glWeightPointerARB(size, type, stride, pointer);}
+  GLEEPFNGLWEIGHTPOINTERARBPROC GLeeFuncPtr_glWeightPointerARB=GLee_Lazy_glWeightPointerARB;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexBlendARB
+#define GLEE_C_DEFINED_glVertexBlendARB
+  void __stdcall GLee_Lazy_glVertexBlendARB(GLint  count)  {if (GLeeInit()) glVertexBlendARB(count);}
+  GLEEPFNGLVERTEXBLENDARBPROC GLeeFuncPtr_glVertexBlendARB=GLee_Lazy_glVertexBlendARB;
+#endif
+#endif 
+
+/* GL_ARB_matrix_palette */
+
+#ifdef __GLEE_GL_ARB_matrix_palette
+#ifndef GLEE_C_DEFINED_glCurrentPaletteMatrixARB
+#define GLEE_C_DEFINED_glCurrentPaletteMatrixARB
+  void __stdcall GLee_Lazy_glCurrentPaletteMatrixARB(GLint  index)  {if (GLeeInit()) glCurrentPaletteMatrixARB(index);}
+  GLEEPFNGLCURRENTPALETTEMATRIXARBPROC GLeeFuncPtr_glCurrentPaletteMatrixARB=GLee_Lazy_glCurrentPaletteMatrixARB;
+#endif
+#ifndef GLEE_C_DEFINED_glMatrixIndexubvARB
+#define GLEE_C_DEFINED_glMatrixIndexubvARB
+  void __stdcall GLee_Lazy_glMatrixIndexubvARB(GLint  size, const GLubyte * indices)  {if (GLeeInit()) glMatrixIndexubvARB(size, indices);}
+  GLEEPFNGLMATRIXINDEXUBVARBPROC GLeeFuncPtr_glMatrixIndexubvARB=GLee_Lazy_glMatrixIndexubvARB;
+#endif
+#ifndef GLEE_C_DEFINED_glMatrixIndexusvARB
+#define GLEE_C_DEFINED_glMatrixIndexusvARB
+  void __stdcall GLee_Lazy_glMatrixIndexusvARB(GLint  size, const GLushort * indices)  {if (GLeeInit()) glMatrixIndexusvARB(size, indices);}
+  GLEEPFNGLMATRIXINDEXUSVARBPROC GLeeFuncPtr_glMatrixIndexusvARB=GLee_Lazy_glMatrixIndexusvARB;
+#endif
+#ifndef GLEE_C_DEFINED_glMatrixIndexuivARB
+#define GLEE_C_DEFINED_glMatrixIndexuivARB
+  void __stdcall GLee_Lazy_glMatrixIndexuivARB(GLint  size, const GLuint * indices)  {if (GLeeInit()) glMatrixIndexuivARB(size, indices);}
+  GLEEPFNGLMATRIXINDEXUIVARBPROC GLeeFuncPtr_glMatrixIndexuivARB=GLee_Lazy_glMatrixIndexuivARB;
+#endif
+#ifndef GLEE_C_DEFINED_glMatrixIndexPointerARB
+#define GLEE_C_DEFINED_glMatrixIndexPointerARB
+  void __stdcall GLee_Lazy_glMatrixIndexPointerARB(GLint  size, GLenum  type, GLsizei  stride, const GLvoid * pointer)  {if (GLeeInit()) glMatrixIndexPointerARB(size, type, stride, pointer);}
+  GLEEPFNGLMATRIXINDEXPOINTERARBPROC GLeeFuncPtr_glMatrixIndexPointerARB=GLee_Lazy_glMatrixIndexPointerARB;
+#endif
+#endif 
+
+/* GL_ARB_texture_env_combine */
+
+#ifdef __GLEE_GL_ARB_texture_env_combine
+#endif 
+
+/* GL_ARB_texture_env_crossbar */
+
+#ifdef __GLEE_GL_ARB_texture_env_crossbar
+#endif 
+
+/* GL_ARB_texture_env_dot3 */
+
+#ifdef __GLEE_GL_ARB_texture_env_dot3
+#endif 
+
+/* GL_ARB_texture_mirrored_repeat */
+
+#ifdef __GLEE_GL_ARB_texture_mirrored_repeat
+#endif 
+
+/* GL_ARB_depth_texture */
+
+#ifdef __GLEE_GL_ARB_depth_texture
+#endif 
+
+/* GL_ARB_shadow */
+
+#ifdef __GLEE_GL_ARB_shadow
+#endif 
+
+/* GL_ARB_shadow_ambient */
+
+#ifdef __GLEE_GL_ARB_shadow_ambient
+#endif 
+
+/* GL_ARB_window_pos */
+
+#ifdef __GLEE_GL_ARB_window_pos
+#ifndef GLEE_C_DEFINED_glWindowPos2dARB
+#define GLEE_C_DEFINED_glWindowPos2dARB
+  void __stdcall GLee_Lazy_glWindowPos2dARB(GLdouble  x, GLdouble  y)  {if (GLeeInit()) glWindowPos2dARB(x, y);}
+  GLEEPFNGLWINDOWPOS2DARBPROC GLeeFuncPtr_glWindowPos2dARB=GLee_Lazy_glWindowPos2dARB;
+#endif
+#ifndef GLEE_C_DEFINED_glWindowPos2dvARB
+#define GLEE_C_DEFINED_glWindowPos2dvARB
+  void __stdcall GLee_Lazy_glWindowPos2dvARB(const GLdouble * v)  {if (GLeeInit()) glWindowPos2dvARB(v);}
+  GLEEPFNGLWINDOWPOS2DVARBPROC GLeeFuncPtr_glWindowPos2dvARB=GLee_Lazy_glWindowPos2dvARB;
+#endif
+#ifndef GLEE_C_DEFINED_glWindowPos2fARB
+#define GLEE_C_DEFINED_glWindowPos2fARB
+  void __stdcall GLee_Lazy_glWindowPos2fARB(GLfloat  x, GLfloat  y)  {if (GLeeInit()) glWindowPos2fARB(x, y);}
+  GLEEPFNGLWINDOWPOS2FARBPROC GLeeFuncPtr_glWindowPos2fARB=GLee_Lazy_glWindowPos2fARB;
+#endif
+#ifndef GLEE_C_DEFINED_glWindowPos2fvARB
+#define GLEE_C_DEFINED_glWindowPos2fvARB
+  void __stdcall GLee_Lazy_glWindowPos2fvARB(const GLfloat * v)  {if (GLeeInit()) glWindowPos2fvARB(v);}
+  GLEEPFNGLWINDOWPOS2FVARBPROC GLeeFuncPtr_glWindowPos2fvARB=GLee_Lazy_glWindowPos2fvARB;
+#endif
+#ifndef GLEE_C_DEFINED_glWindowPos2iARB
+#define GLEE_C_DEFINED_glWindowPos2iARB
+  void __stdcall GLee_Lazy_glWindowPos2iARB(GLint  x, GLint  y)  {if (GLeeInit()) glWindowPos2iARB(x, y);}
+  GLEEPFNGLWINDOWPOS2IARBPROC GLeeFuncPtr_glWindowPos2iARB=GLee_Lazy_glWindowPos2iARB;
+#endif
+#ifndef GLEE_C_DEFINED_glWindowPos2ivARB
+#define GLEE_C_DEFINED_glWindowPos2ivARB
+  void __stdcall GLee_Lazy_glWindowPos2ivARB(const GLint * v)  {if (GLeeInit()) glWindowPos2ivARB(v);}
+  GLEEPFNGLWINDOWPOS2IVARBPROC GLeeFuncPtr_glWindowPos2ivARB=GLee_Lazy_glWindowPos2ivARB;
+#endif
+#ifndef GLEE_C_DEFINED_glWindowPos2sARB
+#define GLEE_C_DEFINED_glWindowPos2sARB
+  void __stdcall GLee_Lazy_glWindowPos2sARB(GLshort  x, GLshort  y)  {if (GLeeInit()) glWindowPos2sARB(x, y);}
+  GLEEPFNGLWINDOWPOS2SARBPROC GLeeFuncPtr_glWindowPos2sARB=GLee_Lazy_glWindowPos2sARB;
+#endif
+#ifndef GLEE_C_DEFINED_glWindowPos2svARB
+#define GLEE_C_DEFINED_glWindowPos2svARB
+  void __stdcall GLee_Lazy_glWindowPos2svARB(const GLshort * v)  {if (GLeeInit()) glWindowPos2svARB(v);}
+  GLEEPFNGLWINDOWPOS2SVARBPROC GLeeFuncPtr_glWindowPos2svARB=GLee_Lazy_glWindowPos2svARB;
+#endif
+#ifndef GLEE_C_DEFINED_glWindowPos3dARB
+#define GLEE_C_DEFINED_glWindowPos3dARB
+  void __stdcall GLee_Lazy_glWindowPos3dARB(GLdouble  x, GLdouble  y, GLdouble  z)  {if (GLeeInit()) glWindowPos3dARB(x, y, z);}
+  GLEEPFNGLWINDOWPOS3DARBPROC GLeeFuncPtr_glWindowPos3dARB=GLee_Lazy_glWindowPos3dARB;
+#endif
+#ifndef GLEE_C_DEFINED_glWindowPos3dvARB
+#define GLEE_C_DEFINED_glWindowPos3dvARB
+  void __stdcall GLee_Lazy_glWindowPos3dvARB(const GLdouble * v)  {if (GLeeInit()) glWindowPos3dvARB(v);}
+  GLEEPFNGLWINDOWPOS3DVARBPROC GLeeFuncPtr_glWindowPos3dvARB=GLee_Lazy_glWindowPos3dvARB;
+#endif
+#ifndef GLEE_C_DEFINED_glWindowPos3fARB
+#define GLEE_C_DEFINED_glWindowPos3fARB
+  void __stdcall GLee_Lazy_glWindowPos3fARB(GLfloat  x, GLfloat  y, GLfloat  z)  {if (GLeeInit()) glWindowPos3fARB(x, y, z);}
+  GLEEPFNGLWINDOWPOS3FARBPROC GLeeFuncPtr_glWindowPos3fARB=GLee_Lazy_glWindowPos3fARB;
+#endif
+#ifndef GLEE_C_DEFINED_glWindowPos3fvARB
+#define GLEE_C_DEFINED_glWindowPos3fvARB
+  void __stdcall GLee_Lazy_glWindowPos3fvARB(const GLfloat * v)  {if (GLeeInit()) glWindowPos3fvARB(v);}
+  GLEEPFNGLWINDOWPOS3FVARBPROC GLeeFuncPtr_glWindowPos3fvARB=GLee_Lazy_glWindowPos3fvARB;
+#endif
+#ifndef GLEE_C_DEFINED_glWindowPos3iARB
+#define GLEE_C_DEFINED_glWindowPos3iARB
+  void __stdcall GLee_Lazy_glWindowPos3iARB(GLint  x, GLint  y, GLint  z)  {if (GLeeInit()) glWindowPos3iARB(x, y, z);}
+  GLEEPFNGLWINDOWPOS3IARBPROC GLeeFuncPtr_glWindowPos3iARB=GLee_Lazy_glWindowPos3iARB;
+#endif
+#ifndef GLEE_C_DEFINED_glWindowPos3ivARB
+#define GLEE_C_DEFINED_glWindowPos3ivARB
+  void __stdcall GLee_Lazy_glWindowPos3ivARB(const GLint * v)  {if (GLeeInit()) glWindowPos3ivARB(v);}
+  GLEEPFNGLWINDOWPOS3IVARBPROC GLeeFuncPtr_glWindowPos3ivARB=GLee_Lazy_glWindowPos3ivARB;
+#endif
+#ifndef GLEE_C_DEFINED_glWindowPos3sARB
+#define GLEE_C_DEFINED_glWindowPos3sARB
+  void __stdcall GLee_Lazy_glWindowPos3sARB(GLshort  x, GLshort  y, GLshort  z)  {if (GLeeInit()) glWindowPos3sARB(x, y, z);}
+  GLEEPFNGLWINDOWPOS3SARBPROC GLeeFuncPtr_glWindowPos3sARB=GLee_Lazy_glWindowPos3sARB;
+#endif
+#ifndef GLEE_C_DEFINED_glWindowPos3svARB
+#define GLEE_C_DEFINED_glWindowPos3svARB
+  void __stdcall GLee_Lazy_glWindowPos3svARB(const GLshort * v)  {if (GLeeInit()) glWindowPos3svARB(v);}
+  GLEEPFNGLWINDOWPOS3SVARBPROC GLeeFuncPtr_glWindowPos3svARB=GLee_Lazy_glWindowPos3svARB;
+#endif
+#endif 
+
+/* GL_ARB_vertex_program */
+
+#ifdef __GLEE_GL_ARB_vertex_program
+#ifndef GLEE_C_DEFINED_glVertexAttrib1dARB
+#define GLEE_C_DEFINED_glVertexAttrib1dARB
+  void __stdcall GLee_Lazy_glVertexAttrib1dARB(GLuint  index, GLdouble  x)  {if (GLeeInit()) glVertexAttrib1dARB(index, x);}
+  GLEEPFNGLVERTEXATTRIB1DARBPROC GLeeFuncPtr_glVertexAttrib1dARB=GLee_Lazy_glVertexAttrib1dARB;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttrib1dvARB
+#define GLEE_C_DEFINED_glVertexAttrib1dvARB
+  void __stdcall GLee_Lazy_glVertexAttrib1dvARB(GLuint  index, const GLdouble * v)  {if (GLeeInit()) glVertexAttrib1dvARB(index, v);}
+  GLEEPFNGLVERTEXATTRIB1DVARBPROC GLeeFuncPtr_glVertexAttrib1dvARB=GLee_Lazy_glVertexAttrib1dvARB;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttrib1fARB
+#define GLEE_C_DEFINED_glVertexAttrib1fARB
+  void __stdcall GLee_Lazy_glVertexAttrib1fARB(GLuint  index, GLfloat  x)  {if (GLeeInit()) glVertexAttrib1fARB(index, x);}
+  GLEEPFNGLVERTEXATTRIB1FARBPROC GLeeFuncPtr_glVertexAttrib1fARB=GLee_Lazy_glVertexAttrib1fARB;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttrib1fvARB
+#define GLEE_C_DEFINED_glVertexAttrib1fvARB
+  void __stdcall GLee_Lazy_glVertexAttrib1fvARB(GLuint  index, const GLfloat * v)  {if (GLeeInit()) glVertexAttrib1fvARB(index, v);}
+  GLEEPFNGLVERTEXATTRIB1FVARBPROC GLeeFuncPtr_glVertexAttrib1fvARB=GLee_Lazy_glVertexAttrib1fvARB;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttrib1sARB
+#define GLEE_C_DEFINED_glVertexAttrib1sARB
+  void __stdcall GLee_Lazy_glVertexAttrib1sARB(GLuint  index, GLshort  x)  {if (GLeeInit()) glVertexAttrib1sARB(index, x);}
+  GLEEPFNGLVERTEXATTRIB1SARBPROC GLeeFuncPtr_glVertexAttrib1sARB=GLee_Lazy_glVertexAttrib1sARB;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttrib1svARB
+#define GLEE_C_DEFINED_glVertexAttrib1svARB
+  void __stdcall GLee_Lazy_glVertexAttrib1svARB(GLuint  index, const GLshort * v)  {if (GLeeInit()) glVertexAttrib1svARB(index, v);}
+  GLEEPFNGLVERTEXATTRIB1SVARBPROC GLeeFuncPtr_glVertexAttrib1svARB=GLee_Lazy_glVertexAttrib1svARB;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttrib2dARB
+#define GLEE_C_DEFINED_glVertexAttrib2dARB
+  void __stdcall GLee_Lazy_glVertexAttrib2dARB(GLuint  index, GLdouble  x, GLdouble  y)  {if (GLeeInit()) glVertexAttrib2dARB(index, x, y);}
+  GLEEPFNGLVERTEXATTRIB2DARBPROC GLeeFuncPtr_glVertexAttrib2dARB=GLee_Lazy_glVertexAttrib2dARB;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttrib2dvARB
+#define GLEE_C_DEFINED_glVertexAttrib2dvARB
+  void __stdcall GLee_Lazy_glVertexAttrib2dvARB(GLuint  index, const GLdouble * v)  {if (GLeeInit()) glVertexAttrib2dvARB(index, v);}
+  GLEEPFNGLVERTEXATTRIB2DVARBPROC GLeeFuncPtr_glVertexAttrib2dvARB=GLee_Lazy_glVertexAttrib2dvARB;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttrib2fARB
+#define GLEE_C_DEFINED_glVertexAttrib2fARB
+  void __stdcall GLee_Lazy_glVertexAttrib2fARB(GLuint  index, GLfloat  x, GLfloat  y)  {if (GLeeInit()) glVertexAttrib2fARB(index, x, y);}
+  GLEEPFNGLVERTEXATTRIB2FARBPROC GLeeFuncPtr_glVertexAttrib2fARB=GLee_Lazy_glVertexAttrib2fARB;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttrib2fvARB
+#define GLEE_C_DEFINED_glVertexAttrib2fvARB
+  void __stdcall GLee_Lazy_glVertexAttrib2fvARB(GLuint  index, const GLfloat * v)  {if (GLeeInit()) glVertexAttrib2fvARB(index, v);}
+  GLEEPFNGLVERTEXATTRIB2FVARBPROC GLeeFuncPtr_glVertexAttrib2fvARB=GLee_Lazy_glVertexAttrib2fvARB;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttrib2sARB
+#define GLEE_C_DEFINED_glVertexAttrib2sARB
+  void __stdcall GLee_Lazy_glVertexAttrib2sARB(GLuint  index, GLshort  x, GLshort  y)  {if (GLeeInit()) glVertexAttrib2sARB(index, x, y);}
+  GLEEPFNGLVERTEXATTRIB2SARBPROC GLeeFuncPtr_glVertexAttrib2sARB=GLee_Lazy_glVertexAttrib2sARB;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttrib2svARB
+#define GLEE_C_DEFINED_glVertexAttrib2svARB
+  void __stdcall GLee_Lazy_glVertexAttrib2svARB(GLuint  index, const GLshort * v)  {if (GLeeInit()) glVertexAttrib2svARB(index, v);}
+  GLEEPFNGLVERTEXATTRIB2SVARBPROC GLeeFuncPtr_glVertexAttrib2svARB=GLee_Lazy_glVertexAttrib2svARB;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttrib3dARB
+#define GLEE_C_DEFINED_glVertexAttrib3dARB
+  void __stdcall GLee_Lazy_glVertexAttrib3dARB(GLuint  index, GLdouble  x, GLdouble  y, GLdouble  z)  {if (GLeeInit()) glVertexAttrib3dARB(index, x, y, z);}
+  GLEEPFNGLVERTEXATTRIB3DARBPROC GLeeFuncPtr_glVertexAttrib3dARB=GLee_Lazy_glVertexAttrib3dARB;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttrib3dvARB
+#define GLEE_C_DEFINED_glVertexAttrib3dvARB
+  void __stdcall GLee_Lazy_glVertexAttrib3dvARB(GLuint  index, const GLdouble * v)  {if (GLeeInit()) glVertexAttrib3dvARB(index, v);}
+  GLEEPFNGLVERTEXATTRIB3DVARBPROC GLeeFuncPtr_glVertexAttrib3dvARB=GLee_Lazy_glVertexAttrib3dvARB;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttrib3fARB
+#define GLEE_C_DEFINED_glVertexAttrib3fARB
+  void __stdcall GLee_Lazy_glVertexAttrib3fARB(GLuint  index, GLfloat  x, GLfloat  y, GLfloat  z)  {if (GLeeInit()) glVertexAttrib3fARB(index, x, y, z);}
+  GLEEPFNGLVERTEXATTRIB3FARBPROC GLeeFuncPtr_glVertexAttrib3fARB=GLee_Lazy_glVertexAttrib3fARB;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttrib3fvARB
+#define GLEE_C_DEFINED_glVertexAttrib3fvARB
+  void __stdcall GLee_Lazy_glVertexAttrib3fvARB(GLuint  index, const GLfloat * v)  {if (GLeeInit()) glVertexAttrib3fvARB(index, v);}
+  GLEEPFNGLVERTEXATTRIB3FVARBPROC GLeeFuncPtr_glVertexAttrib3fvARB=GLee_Lazy_glVertexAttrib3fvARB;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttrib3sARB
+#define GLEE_C_DEFINED_glVertexAttrib3sARB
+  void __stdcall GLee_Lazy_glVertexAttrib3sARB(GLuint  index, GLshort  x, GLshort  y, GLshort  z)  {if (GLeeInit()) glVertexAttrib3sARB(index, x, y, z);}
+  GLEEPFNGLVERTEXATTRIB3SARBPROC GLeeFuncPtr_glVertexAttrib3sARB=GLee_Lazy_glVertexAttrib3sARB;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttrib3svARB
+#define GLEE_C_DEFINED_glVertexAttrib3svARB
+  void __stdcall GLee_Lazy_glVertexAttrib3svARB(GLuint  index, const GLshort * v)  {if (GLeeInit()) glVertexAttrib3svARB(index, v);}
+  GLEEPFNGLVERTEXATTRIB3SVARBPROC GLeeFuncPtr_glVertexAttrib3svARB=GLee_Lazy_glVertexAttrib3svARB;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttrib4NbvARB
+#define GLEE_C_DEFINED_glVertexAttrib4NbvARB
+  void __stdcall GLee_Lazy_glVertexAttrib4NbvARB(GLuint  index, const GLbyte * v)  {if (GLeeInit()) glVertexAttrib4NbvARB(index, v);}
+  GLEEPFNGLVERTEXATTRIB4NBVARBPROC GLeeFuncPtr_glVertexAttrib4NbvARB=GLee_Lazy_glVertexAttrib4NbvARB;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttrib4NivARB
+#define GLEE_C_DEFINED_glVertexAttrib4NivARB
+  void __stdcall GLee_Lazy_glVertexAttrib4NivARB(GLuint  index, const GLint * v)  {if (GLeeInit()) glVertexAttrib4NivARB(index, v);}
+  GLEEPFNGLVERTEXATTRIB4NIVARBPROC GLeeFuncPtr_glVertexAttrib4NivARB=GLee_Lazy_glVertexAttrib4NivARB;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttrib4NsvARB
+#define GLEE_C_DEFINED_glVertexAttrib4NsvARB
+  void __stdcall GLee_Lazy_glVertexAttrib4NsvARB(GLuint  index, const GLshort * v)  {if (GLeeInit()) glVertexAttrib4NsvARB(index, v);}
+  GLEEPFNGLVERTEXATTRIB4NSVARBPROC GLeeFuncPtr_glVertexAttrib4NsvARB=GLee_Lazy_glVertexAttrib4NsvARB;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttrib4NubARB
+#define GLEE_C_DEFINED_glVertexAttrib4NubARB
+  void __stdcall GLee_Lazy_glVertexAttrib4NubARB(GLuint  index, GLubyte  x, GLubyte  y, GLubyte  z, GLubyte  w)  {if (GLeeInit()) glVertexAttrib4NubARB(index, x, y, z, w);}
+  GLEEPFNGLVERTEXATTRIB4NUBARBPROC GLeeFuncPtr_glVertexAttrib4NubARB=GLee_Lazy_glVertexAttrib4NubARB;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttrib4NubvARB
+#define GLEE_C_DEFINED_glVertexAttrib4NubvARB
+  void __stdcall GLee_Lazy_glVertexAttrib4NubvARB(GLuint  index, const GLubyte * v)  {if (GLeeInit()) glVertexAttrib4NubvARB(index, v);}
+  GLEEPFNGLVERTEXATTRIB4NUBVARBPROC GLeeFuncPtr_glVertexAttrib4NubvARB=GLee_Lazy_glVertexAttrib4NubvARB;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttrib4NuivARB
+#define GLEE_C_DEFINED_glVertexAttrib4NuivARB
+  void __stdcall GLee_Lazy_glVertexAttrib4NuivARB(GLuint  index, const GLuint * v)  {if (GLeeInit()) glVertexAttrib4NuivARB(index, v);}
+  GLEEPFNGLVERTEXATTRIB4NUIVARBPROC GLeeFuncPtr_glVertexAttrib4NuivARB=GLee_Lazy_glVertexAttrib4NuivARB;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttrib4NusvARB
+#define GLEE_C_DEFINED_glVertexAttrib4NusvARB
+  void __stdcall GLee_Lazy_glVertexAttrib4NusvARB(GLuint  index, const GLushort * v)  {if (GLeeInit()) glVertexAttrib4NusvARB(index, v);}
+  GLEEPFNGLVERTEXATTRIB4NUSVARBPROC GLeeFuncPtr_glVertexAttrib4NusvARB=GLee_Lazy_glVertexAttrib4NusvARB;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttrib4bvARB
+#define GLEE_C_DEFINED_glVertexAttrib4bvARB
+  void __stdcall GLee_Lazy_glVertexAttrib4bvARB(GLuint  index, const GLbyte * v)  {if (GLeeInit()) glVertexAttrib4bvARB(index, v);}
+  GLEEPFNGLVERTEXATTRIB4BVARBPROC GLeeFuncPtr_glVertexAttrib4bvARB=GLee_Lazy_glVertexAttrib4bvARB;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttrib4dARB
+#define GLEE_C_DEFINED_glVertexAttrib4dARB
+  void __stdcall GLee_Lazy_glVertexAttrib4dARB(GLuint  index, GLdouble  x, GLdouble  y, GLdouble  z, GLdouble  w)  {if (GLeeInit()) glVertexAttrib4dARB(index, x, y, z, w);}
+  GLEEPFNGLVERTEXATTRIB4DARBPROC GLeeFuncPtr_glVertexAttrib4dARB=GLee_Lazy_glVertexAttrib4dARB;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttrib4dvARB
+#define GLEE_C_DEFINED_glVertexAttrib4dvARB
+  void __stdcall GLee_Lazy_glVertexAttrib4dvARB(GLuint  index, const GLdouble * v)  {if (GLeeInit()) glVertexAttrib4dvARB(index, v);}
+  GLEEPFNGLVERTEXATTRIB4DVARBPROC GLeeFuncPtr_glVertexAttrib4dvARB=GLee_Lazy_glVertexAttrib4dvARB;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttrib4fARB
+#define GLEE_C_DEFINED_glVertexAttrib4fARB
+  void __stdcall GLee_Lazy_glVertexAttrib4fARB(GLuint  index, GLfloat  x, GLfloat  y, GLfloat  z, GLfloat  w)  {if (GLeeInit()) glVertexAttrib4fARB(index, x, y, z, w);}
+  GLEEPFNGLVERTEXATTRIB4FARBPROC GLeeFuncPtr_glVertexAttrib4fARB=GLee_Lazy_glVertexAttrib4fARB;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttrib4fvARB
+#define GLEE_C_DEFINED_glVertexAttrib4fvARB
+  void __stdcall GLee_Lazy_glVertexAttrib4fvARB(GLuint  index, const GLfloat * v)  {if (GLeeInit()) glVertexAttrib4fvARB(index, v);}
+  GLEEPFNGLVERTEXATTRIB4FVARBPROC GLeeFuncPtr_glVertexAttrib4fvARB=GLee_Lazy_glVertexAttrib4fvARB;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttrib4ivARB
+#define GLEE_C_DEFINED_glVertexAttrib4ivARB
+  void __stdcall GLee_Lazy_glVertexAttrib4ivARB(GLuint  index, const GLint * v)  {if (GLeeInit()) glVertexAttrib4ivARB(index, v);}
+  GLEEPFNGLVERTEXATTRIB4IVARBPROC GLeeFuncPtr_glVertexAttrib4ivARB=GLee_Lazy_glVertexAttrib4ivARB;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttrib4sARB
+#define GLEE_C_DEFINED_glVertexAttrib4sARB
+  void __stdcall GLee_Lazy_glVertexAttrib4sARB(GLuint  index, GLshort  x, GLshort  y, GLshort  z, GLshort  w)  {if (GLeeInit()) glVertexAttrib4sARB(index, x, y, z, w);}
+  GLEEPFNGLVERTEXATTRIB4SARBPROC GLeeFuncPtr_glVertexAttrib4sARB=GLee_Lazy_glVertexAttrib4sARB;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttrib4svARB
+#define GLEE_C_DEFINED_glVertexAttrib4svARB
+  void __stdcall GLee_Lazy_glVertexAttrib4svARB(GLuint  index, const GLshort * v)  {if (GLeeInit()) glVertexAttrib4svARB(index, v);}
+  GLEEPFNGLVERTEXATTRIB4SVARBPROC GLeeFuncPtr_glVertexAttrib4svARB=GLee_Lazy_glVertexAttrib4svARB;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttrib4ubvARB
+#define GLEE_C_DEFINED_glVertexAttrib4ubvARB
+  void __stdcall GLee_Lazy_glVertexAttrib4ubvARB(GLuint  index, const GLubyte * v)  {if (GLeeInit()) glVertexAttrib4ubvARB(index, v);}
+  GLEEPFNGLVERTEXATTRIB4UBVARBPROC GLeeFuncPtr_glVertexAttrib4ubvARB=GLee_Lazy_glVertexAttrib4ubvARB;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttrib4uivARB
+#define GLEE_C_DEFINED_glVertexAttrib4uivARB
+  void __stdcall GLee_Lazy_glVertexAttrib4uivARB(GLuint  index, const GLuint * v)  {if (GLeeInit()) glVertexAttrib4uivARB(index, v);}
+  GLEEPFNGLVERTEXATTRIB4UIVARBPROC GLeeFuncPtr_glVertexAttrib4uivARB=GLee_Lazy_glVertexAttrib4uivARB;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttrib4usvARB
+#define GLEE_C_DEFINED_glVertexAttrib4usvARB
+  void __stdcall GLee_Lazy_glVertexAttrib4usvARB(GLuint  index, const GLushort * v)  {if (GLeeInit()) glVertexAttrib4usvARB(index, v);}
+  GLEEPFNGLVERTEXATTRIB4USVARBPROC GLeeFuncPtr_glVertexAttrib4usvARB=GLee_Lazy_glVertexAttrib4usvARB;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttribPointerARB
+#define GLEE_C_DEFINED_glVertexAttribPointerARB
+  void __stdcall GLee_Lazy_glVertexAttribPointerARB(GLuint  index, GLint  size, GLenum  type, GLboolean  normalized, GLsizei  stride, const GLvoid * pointer)  {if (GLeeInit()) glVertexAttribPointerARB(index, size, type, normalized, stride, pointer);}
+  GLEEPFNGLVERTEXATTRIBPOINTERARBPROC GLeeFuncPtr_glVertexAttribPointerARB=GLee_Lazy_glVertexAttribPointerARB;
+#endif
+#ifndef GLEE_C_DEFINED_glEnableVertexAttribArrayARB
+#define GLEE_C_DEFINED_glEnableVertexAttribArrayARB
+  void __stdcall GLee_Lazy_glEnableVertexAttribArrayARB(GLuint  index)  {if (GLeeInit()) glEnableVertexAttribArrayARB(index);}
+  GLEEPFNGLENABLEVERTEXATTRIBARRAYARBPROC GLeeFuncPtr_glEnableVertexAttribArrayARB=GLee_Lazy_glEnableVertexAttribArrayARB;
+#endif
+#ifndef GLEE_C_DEFINED_glDisableVertexAttribArrayARB
+#define GLEE_C_DEFINED_glDisableVertexAttribArrayARB
+  void __stdcall GLee_Lazy_glDisableVertexAttribArrayARB(GLuint  index)  {if (GLeeInit()) glDisableVertexAttribArrayARB(index);}
+  GLEEPFNGLDISABLEVERTEXATTRIBARRAYARBPROC GLeeFuncPtr_glDisableVertexAttribArrayARB=GLee_Lazy_glDisableVertexAttribArrayARB;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramStringARB
+#define GLEE_C_DEFINED_glProgramStringARB
+  void __stdcall GLee_Lazy_glProgramStringARB(GLenum  target, GLenum  format, GLsizei  len, const GLvoid * string)  {if (GLeeInit()) glProgramStringARB(target, format, len, string);}
+  GLEEPFNGLPROGRAMSTRINGARBPROC GLeeFuncPtr_glProgramStringARB=GLee_Lazy_glProgramStringARB;
+#endif
+#ifndef GLEE_C_DEFINED_glBindProgramARB
+#define GLEE_C_DEFINED_glBindProgramARB
+  void __stdcall GLee_Lazy_glBindProgramARB(GLenum  target, GLuint  program)  {if (GLeeInit()) glBindProgramARB(target, program);}
+  GLEEPFNGLBINDPROGRAMARBPROC GLeeFuncPtr_glBindProgramARB=GLee_Lazy_glBindProgramARB;
+#endif
+#ifndef GLEE_C_DEFINED_glDeleteProgramsARB
+#define GLEE_C_DEFINED_glDeleteProgramsARB
+  void __stdcall GLee_Lazy_glDeleteProgramsARB(GLsizei  n, const GLuint * programs)  {if (GLeeInit()) glDeleteProgramsARB(n, programs);}
+  GLEEPFNGLDELETEPROGRAMSARBPROC GLeeFuncPtr_glDeleteProgramsARB=GLee_Lazy_glDeleteProgramsARB;
+#endif
+#ifndef GLEE_C_DEFINED_glGenProgramsARB
+#define GLEE_C_DEFINED_glGenProgramsARB
+  void __stdcall GLee_Lazy_glGenProgramsARB(GLsizei  n, GLuint * programs)  {if (GLeeInit()) glGenProgramsARB(n, programs);}
+  GLEEPFNGLGENPROGRAMSARBPROC GLeeFuncPtr_glGenProgramsARB=GLee_Lazy_glGenProgramsARB;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramEnvParameter4dARB
+#define GLEE_C_DEFINED_glProgramEnvParameter4dARB
+  void __stdcall GLee_Lazy_glProgramEnvParameter4dARB(GLenum  target, GLuint  index, GLdouble  x, GLdouble  y, GLdouble  z, GLdouble  w)  {if (GLeeInit()) glProgramEnvParameter4dARB(target, index, x, y, z, w);}
+  GLEEPFNGLPROGRAMENVPARAMETER4DARBPROC GLeeFuncPtr_glProgramEnvParameter4dARB=GLee_Lazy_glProgramEnvParameter4dARB;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramEnvParameter4dvARB
+#define GLEE_C_DEFINED_glProgramEnvParameter4dvARB
+  void __stdcall GLee_Lazy_glProgramEnvParameter4dvARB(GLenum  target, GLuint  index, const GLdouble * params)  {if (GLeeInit()) glProgramEnvParameter4dvARB(target, index, params);}
+  GLEEPFNGLPROGRAMENVPARAMETER4DVARBPROC GLeeFuncPtr_glProgramEnvParameter4dvARB=GLee_Lazy_glProgramEnvParameter4dvARB;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramEnvParameter4fARB
+#define GLEE_C_DEFINED_glProgramEnvParameter4fARB
+  void __stdcall GLee_Lazy_glProgramEnvParameter4fARB(GLenum  target, GLuint  index, GLfloat  x, GLfloat  y, GLfloat  z, GLfloat  w)  {if (GLeeInit()) glProgramEnvParameter4fARB(target, index, x, y, z, w);}
+  GLEEPFNGLPROGRAMENVPARAMETER4FARBPROC GLeeFuncPtr_glProgramEnvParameter4fARB=GLee_Lazy_glProgramEnvParameter4fARB;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramEnvParameter4fvARB
+#define GLEE_C_DEFINED_glProgramEnvParameter4fvARB
+  void __stdcall GLee_Lazy_glProgramEnvParameter4fvARB(GLenum  target, GLuint  index, const GLfloat * params)  {if (GLeeInit()) glProgramEnvParameter4fvARB(target, index, params);}
+  GLEEPFNGLPROGRAMENVPARAMETER4FVARBPROC GLeeFuncPtr_glProgramEnvParameter4fvARB=GLee_Lazy_glProgramEnvParameter4fvARB;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramLocalParameter4dARB
+#define GLEE_C_DEFINED_glProgramLocalParameter4dARB
+  void __stdcall GLee_Lazy_glProgramLocalParameter4dARB(GLenum  target, GLuint  index, GLdouble  x, GLdouble  y, GLdouble  z, GLdouble  w)  {if (GLeeInit()) glProgramLocalParameter4dARB(target, index, x, y, z, w);}
+  GLEEPFNGLPROGRAMLOCALPARAMETER4DARBPROC GLeeFuncPtr_glProgramLocalParameter4dARB=GLee_Lazy_glProgramLocalParameter4dARB;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramLocalParameter4dvARB
+#define GLEE_C_DEFINED_glProgramLocalParameter4dvARB
+  void __stdcall GLee_Lazy_glProgramLocalParameter4dvARB(GLenum  target, GLuint  index, const GLdouble * params)  {if (GLeeInit()) glProgramLocalParameter4dvARB(target, index, params);}
+  GLEEPFNGLPROGRAMLOCALPARAMETER4DVARBPROC GLeeFuncPtr_glProgramLocalParameter4dvARB=GLee_Lazy_glProgramLocalParameter4dvARB;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramLocalParameter4fARB
+#define GLEE_C_DEFINED_glProgramLocalParameter4fARB
+  void __stdcall GLee_Lazy_glProgramLocalParameter4fARB(GLenum  target, GLuint  index, GLfloat  x, GLfloat  y, GLfloat  z, GLfloat  w)  {if (GLeeInit()) glProgramLocalParameter4fARB(target, index, x, y, z, w);}
+  GLEEPFNGLPROGRAMLOCALPARAMETER4FARBPROC GLeeFuncPtr_glProgramLocalParameter4fARB=GLee_Lazy_glProgramLocalParameter4fARB;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramLocalParameter4fvARB
+#define GLEE_C_DEFINED_glProgramLocalParameter4fvARB
+  void __stdcall GLee_Lazy_glProgramLocalParameter4fvARB(GLenum  target, GLuint  index, const GLfloat * params)  {if (GLeeInit()) glProgramLocalParameter4fvARB(target, index, params);}
+  GLEEPFNGLPROGRAMLOCALPARAMETER4FVARBPROC GLeeFuncPtr_glProgramLocalParameter4fvARB=GLee_Lazy_glProgramLocalParameter4fvARB;
+#endif
+#ifndef GLEE_C_DEFINED_glGetProgramEnvParameterdvARB
+#define GLEE_C_DEFINED_glGetProgramEnvParameterdvARB
+  void __stdcall GLee_Lazy_glGetProgramEnvParameterdvARB(GLenum  target, GLuint  index, GLdouble * params)  {if (GLeeInit()) glGetProgramEnvParameterdvARB(target, index, params);}
+  GLEEPFNGLGETPROGRAMENVPARAMETERDVARBPROC GLeeFuncPtr_glGetProgramEnvParameterdvARB=GLee_Lazy_glGetProgramEnvParameterdvARB;
+#endif
+#ifndef GLEE_C_DEFINED_glGetProgramEnvParameterfvARB
+#define GLEE_C_DEFINED_glGetProgramEnvParameterfvARB
+  void __stdcall GLee_Lazy_glGetProgramEnvParameterfvARB(GLenum  target, GLuint  index, GLfloat * params)  {if (GLeeInit()) glGetProgramEnvParameterfvARB(target, index, params);}
+  GLEEPFNGLGETPROGRAMENVPARAMETERFVARBPROC GLeeFuncPtr_glGetProgramEnvParameterfvARB=GLee_Lazy_glGetProgramEnvParameterfvARB;
+#endif
+#ifndef GLEE_C_DEFINED_glGetProgramLocalParameterdvARB
+#define GLEE_C_DEFINED_glGetProgramLocalParameterdvARB
+  void __stdcall GLee_Lazy_glGetProgramLocalParameterdvARB(GLenum  target, GLuint  index, GLdouble * params)  {if (GLeeInit()) glGetProgramLocalParameterdvARB(target, index, params);}
+  GLEEPFNGLGETPROGRAMLOCALPARAMETERDVARBPROC GLeeFuncPtr_glGetProgramLocalParameterdvARB=GLee_Lazy_glGetProgramLocalParameterdvARB;
+#endif
+#ifndef GLEE_C_DEFINED_glGetProgramLocalParameterfvARB
+#define GLEE_C_DEFINED_glGetProgramLocalParameterfvARB
+  void __stdcall GLee_Lazy_glGetProgramLocalParameterfvARB(GLenum  target, GLuint  index, GLfloat * params)  {if (GLeeInit()) glGetProgramLocalParameterfvARB(target, index, params);}
+  GLEEPFNGLGETPROGRAMLOCALPARAMETERFVARBPROC GLeeFuncPtr_glGetProgramLocalParameterfvARB=GLee_Lazy_glGetProgramLocalParameterfvARB;
+#endif
+#ifndef GLEE_C_DEFINED_glGetProgramivARB
+#define GLEE_C_DEFINED_glGetProgramivARB
+  void __stdcall GLee_Lazy_glGetProgramivARB(GLenum  target, GLenum  pname, GLint * params)  {if (GLeeInit()) glGetProgramivARB(target, pname, params);}
+  GLEEPFNGLGETPROGRAMIVARBPROC GLeeFuncPtr_glGetProgramivARB=GLee_Lazy_glGetProgramivARB;
+#endif
+#ifndef GLEE_C_DEFINED_glGetProgramStringARB
+#define GLEE_C_DEFINED_glGetProgramStringARB
+  void __stdcall GLee_Lazy_glGetProgramStringARB(GLenum  target, GLenum  pname, GLvoid * string)  {if (GLeeInit()) glGetProgramStringARB(target, pname, string);}
+  GLEEPFNGLGETPROGRAMSTRINGARBPROC GLeeFuncPtr_glGetProgramStringARB=GLee_Lazy_glGetProgramStringARB;
+#endif
+#ifndef GLEE_C_DEFINED_glGetVertexAttribdvARB
+#define GLEE_C_DEFINED_glGetVertexAttribdvARB
+  void __stdcall GLee_Lazy_glGetVertexAttribdvARB(GLuint  index, GLenum  pname, GLdouble * params)  {if (GLeeInit()) glGetVertexAttribdvARB(index, pname, params);}
+  GLEEPFNGLGETVERTEXATTRIBDVARBPROC GLeeFuncPtr_glGetVertexAttribdvARB=GLee_Lazy_glGetVertexAttribdvARB;
+#endif
+#ifndef GLEE_C_DEFINED_glGetVertexAttribfvARB
+#define GLEE_C_DEFINED_glGetVertexAttribfvARB
+  void __stdcall GLee_Lazy_glGetVertexAttribfvARB(GLuint  index, GLenum  pname, GLfloat * params)  {if (GLeeInit()) glGetVertexAttribfvARB(index, pname, params);}
+  GLEEPFNGLGETVERTEXATTRIBFVARBPROC GLeeFuncPtr_glGetVertexAttribfvARB=GLee_Lazy_glGetVertexAttribfvARB;
+#endif
+#ifndef GLEE_C_DEFINED_glGetVertexAttribivARB
+#define GLEE_C_DEFINED_glGetVertexAttribivARB
+  void __stdcall GLee_Lazy_glGetVertexAttribivARB(GLuint  index, GLenum  pname, GLint * params)  {if (GLeeInit()) glGetVertexAttribivARB(index, pname, params);}
+  GLEEPFNGLGETVERTEXATTRIBIVARBPROC GLeeFuncPtr_glGetVertexAttribivARB=GLee_Lazy_glGetVertexAttribivARB;
+#endif
+#ifndef GLEE_C_DEFINED_glGetVertexAttribPointervARB
+#define GLEE_C_DEFINED_glGetVertexAttribPointervARB
+  void __stdcall GLee_Lazy_glGetVertexAttribPointervARB(GLuint  index, GLenum  pname, GLvoid* * pointer)  {if (GLeeInit()) glGetVertexAttribPointervARB(index, pname, pointer);}
+  GLEEPFNGLGETVERTEXATTRIBPOINTERVARBPROC GLeeFuncPtr_glGetVertexAttribPointervARB=GLee_Lazy_glGetVertexAttribPointervARB;
+#endif
+#ifndef GLEE_C_DEFINED_glIsProgramARB
+#define GLEE_C_DEFINED_glIsProgramARB
+  GLboolean __stdcall GLee_Lazy_glIsProgramARB(GLuint  program)  {if (GLeeInit()) return glIsProgramARB(program); return (GLboolean)0;}
+  GLEEPFNGLISPROGRAMARBPROC GLeeFuncPtr_glIsProgramARB=GLee_Lazy_glIsProgramARB;
+#endif
+#endif 
+
+/* GL_ARB_fragment_program */
+
+#ifdef __GLEE_GL_ARB_fragment_program
+#endif 
+
+/* GL_ARB_vertex_buffer_object */
+
+#ifdef __GLEE_GL_ARB_vertex_buffer_object
+#ifndef GLEE_C_DEFINED_glBindBufferARB
+#define GLEE_C_DEFINED_glBindBufferARB
+  void __stdcall GLee_Lazy_glBindBufferARB(GLenum  target, GLuint  buffer)  {if (GLeeInit()) glBindBufferARB(target, buffer);}
+  GLEEPFNGLBINDBUFFERARBPROC GLeeFuncPtr_glBindBufferARB=GLee_Lazy_glBindBufferARB;
+#endif
+#ifndef GLEE_C_DEFINED_glDeleteBuffersARB
+#define GLEE_C_DEFINED_glDeleteBuffersARB
+  void __stdcall GLee_Lazy_glDeleteBuffersARB(GLsizei  n, const GLuint * buffers)  {if (GLeeInit()) glDeleteBuffersARB(n, buffers);}
+  GLEEPFNGLDELETEBUFFERSARBPROC GLeeFuncPtr_glDeleteBuffersARB=GLee_Lazy_glDeleteBuffersARB;
+#endif
+#ifndef GLEE_C_DEFINED_glGenBuffersARB
+#define GLEE_C_DEFINED_glGenBuffersARB
+  void __stdcall GLee_Lazy_glGenBuffersARB(GLsizei  n, GLuint * buffers)  {if (GLeeInit()) glGenBuffersARB(n, buffers);}
+  GLEEPFNGLGENBUFFERSARBPROC GLeeFuncPtr_glGenBuffersARB=GLee_Lazy_glGenBuffersARB;
+#endif
+#ifndef GLEE_C_DEFINED_glIsBufferARB
+#define GLEE_C_DEFINED_glIsBufferARB
+  GLboolean __stdcall GLee_Lazy_glIsBufferARB(GLuint  buffer)  {if (GLeeInit()) return glIsBufferARB(buffer); return (GLboolean)0;}
+  GLEEPFNGLISBUFFERARBPROC GLeeFuncPtr_glIsBufferARB=GLee_Lazy_glIsBufferARB;
+#endif
+#ifndef GLEE_C_DEFINED_glBufferDataARB
+#define GLEE_C_DEFINED_glBufferDataARB
+  void __stdcall GLee_Lazy_glBufferDataARB(GLenum  target, GLsizeiptrARB  size, const GLvoid * data, GLenum  usage)  {if (GLeeInit()) glBufferDataARB(target, size, data, usage);}
+  GLEEPFNGLBUFFERDATAARBPROC GLeeFuncPtr_glBufferDataARB=GLee_Lazy_glBufferDataARB;
+#endif
+#ifndef GLEE_C_DEFINED_glBufferSubDataARB
+#define GLEE_C_DEFINED_glBufferSubDataARB
+  void __stdcall GLee_Lazy_glBufferSubDataARB(GLenum  target, GLintptrARB  offset, GLsizeiptrARB  size, const GLvoid * data)  {if (GLeeInit()) glBufferSubDataARB(target, offset, size, data);}
+  GLEEPFNGLBUFFERSUBDATAARBPROC GLeeFuncPtr_glBufferSubDataARB=GLee_Lazy_glBufferSubDataARB;
+#endif
+#ifndef GLEE_C_DEFINED_glGetBufferSubDataARB
+#define GLEE_C_DEFINED_glGetBufferSubDataARB
+  void __stdcall GLee_Lazy_glGetBufferSubDataARB(GLenum  target, GLintptrARB  offset, GLsizeiptrARB  size, GLvoid * data)  {if (GLeeInit()) glGetBufferSubDataARB(target, offset, size, data);}
+  GLEEPFNGLGETBUFFERSUBDATAARBPROC GLeeFuncPtr_glGetBufferSubDataARB=GLee_Lazy_glGetBufferSubDataARB;
+#endif
+#ifndef GLEE_C_DEFINED_glMapBufferARB
+#define GLEE_C_DEFINED_glMapBufferARB
+  GLvoid* __stdcall GLee_Lazy_glMapBufferARB(GLenum  target, GLenum  access)  {if (GLeeInit()) return glMapBufferARB(target, access); return (GLvoid*)0;}
+  GLEEPFNGLMAPBUFFERARBPROC GLeeFuncPtr_glMapBufferARB=GLee_Lazy_glMapBufferARB;
+#endif
+#ifndef GLEE_C_DEFINED_glUnmapBufferARB
+#define GLEE_C_DEFINED_glUnmapBufferARB
+  GLboolean __stdcall GLee_Lazy_glUnmapBufferARB(GLenum  target)  {if (GLeeInit()) return glUnmapBufferARB(target); return (GLboolean)0;}
+  GLEEPFNGLUNMAPBUFFERARBPROC GLeeFuncPtr_glUnmapBufferARB=GLee_Lazy_glUnmapBufferARB;
+#endif
+#ifndef GLEE_C_DEFINED_glGetBufferParameterivARB
+#define GLEE_C_DEFINED_glGetBufferParameterivARB
+  void __stdcall GLee_Lazy_glGetBufferParameterivARB(GLenum  target, GLenum  pname, GLint * params)  {if (GLeeInit()) glGetBufferParameterivARB(target, pname, params);}
+  GLEEPFNGLGETBUFFERPARAMETERIVARBPROC GLeeFuncPtr_glGetBufferParameterivARB=GLee_Lazy_glGetBufferParameterivARB;
+#endif
+#ifndef GLEE_C_DEFINED_glGetBufferPointervARB
+#define GLEE_C_DEFINED_glGetBufferPointervARB
+  void __stdcall GLee_Lazy_glGetBufferPointervARB(GLenum  target, GLenum  pname, GLvoid* * params)  {if (GLeeInit()) glGetBufferPointervARB(target, pname, params);}
+  GLEEPFNGLGETBUFFERPOINTERVARBPROC GLeeFuncPtr_glGetBufferPointervARB=GLee_Lazy_glGetBufferPointervARB;
+#endif
+#endif 
+
+/* GL_ARB_occlusion_query */
+
+#ifdef __GLEE_GL_ARB_occlusion_query
+#ifndef GLEE_C_DEFINED_glGenQueriesARB
+#define GLEE_C_DEFINED_glGenQueriesARB
+  void __stdcall GLee_Lazy_glGenQueriesARB(GLsizei  n, GLuint * ids)  {if (GLeeInit()) glGenQueriesARB(n, ids);}
+  GLEEPFNGLGENQUERIESARBPROC GLeeFuncPtr_glGenQueriesARB=GLee_Lazy_glGenQueriesARB;
+#endif
+#ifndef GLEE_C_DEFINED_glDeleteQueriesARB
+#define GLEE_C_DEFINED_glDeleteQueriesARB
+  void __stdcall GLee_Lazy_glDeleteQueriesARB(GLsizei  n, const GLuint * ids)  {if (GLeeInit()) glDeleteQueriesARB(n, ids);}
+  GLEEPFNGLDELETEQUERIESARBPROC GLeeFuncPtr_glDeleteQueriesARB=GLee_Lazy_glDeleteQueriesARB;
+#endif
+#ifndef GLEE_C_DEFINED_glIsQueryARB
+#define GLEE_C_DEFINED_glIsQueryARB
+  GLboolean __stdcall GLee_Lazy_glIsQueryARB(GLuint  id)  {if (GLeeInit()) return glIsQueryARB(id); return (GLboolean)0;}
+  GLEEPFNGLISQUERYARBPROC GLeeFuncPtr_glIsQueryARB=GLee_Lazy_glIsQueryARB;
+#endif
+#ifndef GLEE_C_DEFINED_glBeginQueryARB
+#define GLEE_C_DEFINED_glBeginQueryARB
+  void __stdcall GLee_Lazy_glBeginQueryARB(GLenum  target, GLuint  id)  {if (GLeeInit()) glBeginQueryARB(target, id);}
+  GLEEPFNGLBEGINQUERYARBPROC GLeeFuncPtr_glBeginQueryARB=GLee_Lazy_glBeginQueryARB;
+#endif
+#ifndef GLEE_C_DEFINED_glEndQueryARB
+#define GLEE_C_DEFINED_glEndQueryARB
+  void __stdcall GLee_Lazy_glEndQueryARB(GLenum  target)  {if (GLeeInit()) glEndQueryARB(target);}
+  GLEEPFNGLENDQUERYARBPROC GLeeFuncPtr_glEndQueryARB=GLee_Lazy_glEndQueryARB;
+#endif
+#ifndef GLEE_C_DEFINED_glGetQueryivARB
+#define GLEE_C_DEFINED_glGetQueryivARB
+  void __stdcall GLee_Lazy_glGetQueryivARB(GLenum  target, GLenum  pname, GLint * params)  {if (GLeeInit()) glGetQueryivARB(target, pname, params);}
+  GLEEPFNGLGETQUERYIVARBPROC GLeeFuncPtr_glGetQueryivARB=GLee_Lazy_glGetQueryivARB;
+#endif
+#ifndef GLEE_C_DEFINED_glGetQueryObjectivARB
+#define GLEE_C_DEFINED_glGetQueryObjectivARB
+  void __stdcall GLee_Lazy_glGetQueryObjectivARB(GLuint  id, GLenum  pname, GLint * params)  {if (GLeeInit()) glGetQueryObjectivARB(id, pname, params);}
+  GLEEPFNGLGETQUERYOBJECTIVARBPROC GLeeFuncPtr_glGetQueryObjectivARB=GLee_Lazy_glGetQueryObjectivARB;
+#endif
+#ifndef GLEE_C_DEFINED_glGetQueryObjectuivARB
+#define GLEE_C_DEFINED_glGetQueryObjectuivARB
+  void __stdcall GLee_Lazy_glGetQueryObjectuivARB(GLuint  id, GLenum  pname, GLuint * params)  {if (GLeeInit()) glGetQueryObjectuivARB(id, pname, params);}
+  GLEEPFNGLGETQUERYOBJECTUIVARBPROC GLeeFuncPtr_glGetQueryObjectuivARB=GLee_Lazy_glGetQueryObjectuivARB;
+#endif
+#endif 
+
+/* GL_ARB_shader_objects */
+
+#ifdef __GLEE_GL_ARB_shader_objects
+#ifndef GLEE_C_DEFINED_glDeleteObjectARB
+#define GLEE_C_DEFINED_glDeleteObjectARB
+  void __stdcall GLee_Lazy_glDeleteObjectARB(GLhandleARB  obj)  {if (GLeeInit()) glDeleteObjectARB(obj);}
+  GLEEPFNGLDELETEOBJECTARBPROC GLeeFuncPtr_glDeleteObjectARB=GLee_Lazy_glDeleteObjectARB;
+#endif
+#ifndef GLEE_C_DEFINED_glGetHandleARB
+#define GLEE_C_DEFINED_glGetHandleARB
+  GLhandleARB __stdcall GLee_Lazy_glGetHandleARB(GLenum  pname)  {if (GLeeInit()) return glGetHandleARB(pname); return (GLhandleARB)0;}
+  GLEEPFNGLGETHANDLEARBPROC GLeeFuncPtr_glGetHandleARB=GLee_Lazy_glGetHandleARB;
+#endif
+#ifndef GLEE_C_DEFINED_glDetachObjectARB
+#define GLEE_C_DEFINED_glDetachObjectARB
+  void __stdcall GLee_Lazy_glDetachObjectARB(GLhandleARB  containerObj, GLhandleARB  attachedObj)  {if (GLeeInit()) glDetachObjectARB(containerObj, attachedObj);}
+  GLEEPFNGLDETACHOBJECTARBPROC GLeeFuncPtr_glDetachObjectARB=GLee_Lazy_glDetachObjectARB;
+#endif
+#ifndef GLEE_C_DEFINED_glCreateShaderObjectARB
+#define GLEE_C_DEFINED_glCreateShaderObjectARB
+  GLhandleARB __stdcall GLee_Lazy_glCreateShaderObjectARB(GLenum  shaderType)  {if (GLeeInit()) return glCreateShaderObjectARB(shaderType); return (GLhandleARB)0;}
+  GLEEPFNGLCREATESHADEROBJECTARBPROC GLeeFuncPtr_glCreateShaderObjectARB=GLee_Lazy_glCreateShaderObjectARB;
+#endif
+#ifndef GLEE_C_DEFINED_glShaderSourceARB
+#define GLEE_C_DEFINED_glShaderSourceARB
+  void __stdcall GLee_Lazy_glShaderSourceARB(GLhandleARB  shaderObj, GLsizei  count, const GLcharARB* * string, const GLint * length)  {if (GLeeInit()) glShaderSourceARB(shaderObj, count, string, length);}
+  GLEEPFNGLSHADERSOURCEARBPROC GLeeFuncPtr_glShaderSourceARB=GLee_Lazy_glShaderSourceARB;
+#endif
+#ifndef GLEE_C_DEFINED_glCompileShaderARB
+#define GLEE_C_DEFINED_glCompileShaderARB
+  void __stdcall GLee_Lazy_glCompileShaderARB(GLhandleARB  shaderObj)  {if (GLeeInit()) glCompileShaderARB(shaderObj);}
+  GLEEPFNGLCOMPILESHADERARBPROC GLeeFuncPtr_glCompileShaderARB=GLee_Lazy_glCompileShaderARB;
+#endif
+#ifndef GLEE_C_DEFINED_glCreateProgramObjectARB
+#define GLEE_C_DEFINED_glCreateProgramObjectARB
+  GLhandleARB __stdcall GLee_Lazy_glCreateProgramObjectARB(void)  {if (GLeeInit()) return glCreateProgramObjectARB(); return (GLhandleARB)0;}
+  GLEEPFNGLCREATEPROGRAMOBJECTARBPROC GLeeFuncPtr_glCreateProgramObjectARB=GLee_Lazy_glCreateProgramObjectARB;
+#endif
+#ifndef GLEE_C_DEFINED_glAttachObjectARB
+#define GLEE_C_DEFINED_glAttachObjectARB
+  void __stdcall GLee_Lazy_glAttachObjectARB(GLhandleARB  containerObj, GLhandleARB  obj)  {if (GLeeInit()) glAttachObjectARB(containerObj, obj);}
+  GLEEPFNGLATTACHOBJECTARBPROC GLeeFuncPtr_glAttachObjectARB=GLee_Lazy_glAttachObjectARB;
+#endif
+#ifndef GLEE_C_DEFINED_glLinkProgramARB
+#define GLEE_C_DEFINED_glLinkProgramARB
+  void __stdcall GLee_Lazy_glLinkProgramARB(GLhandleARB  programObj)  {if (GLeeInit()) glLinkProgramARB(programObj);}
+  GLEEPFNGLLINKPROGRAMARBPROC GLeeFuncPtr_glLinkProgramARB=GLee_Lazy_glLinkProgramARB;
+#endif
+#ifndef GLEE_C_DEFINED_glUseProgramObjectARB
+#define GLEE_C_DEFINED_glUseProgramObjectARB
+  void __stdcall GLee_Lazy_glUseProgramObjectARB(GLhandleARB  programObj)  {if (GLeeInit()) glUseProgramObjectARB(programObj);}
+  GLEEPFNGLUSEPROGRAMOBJECTARBPROC GLeeFuncPtr_glUseProgramObjectARB=GLee_Lazy_glUseProgramObjectARB;
+#endif
+#ifndef GLEE_C_DEFINED_glValidateProgramARB
+#define GLEE_C_DEFINED_glValidateProgramARB
+  void __stdcall GLee_Lazy_glValidateProgramARB(GLhandleARB  programObj)  {if (GLeeInit()) glValidateProgramARB(programObj);}
+  GLEEPFNGLVALIDATEPROGRAMARBPROC GLeeFuncPtr_glValidateProgramARB=GLee_Lazy_glValidateProgramARB;
+#endif
+#ifndef GLEE_C_DEFINED_glUniform1fARB
+#define GLEE_C_DEFINED_glUniform1fARB
+  void __stdcall GLee_Lazy_glUniform1fARB(GLint  location, GLfloat  v0)  {if (GLeeInit()) glUniform1fARB(location, v0);}
+  GLEEPFNGLUNIFORM1FARBPROC GLeeFuncPtr_glUniform1fARB=GLee_Lazy_glUniform1fARB;
+#endif
+#ifndef GLEE_C_DEFINED_glUniform2fARB
+#define GLEE_C_DEFINED_glUniform2fARB
+  void __stdcall GLee_Lazy_glUniform2fARB(GLint  location, GLfloat  v0, GLfloat  v1)  {if (GLeeInit()) glUniform2fARB(location, v0, v1);}
+  GLEEPFNGLUNIFORM2FARBPROC GLeeFuncPtr_glUniform2fARB=GLee_Lazy_glUniform2fARB;
+#endif
+#ifndef GLEE_C_DEFINED_glUniform3fARB
+#define GLEE_C_DEFINED_glUniform3fARB
+  void __stdcall GLee_Lazy_glUniform3fARB(GLint  location, GLfloat  v0, GLfloat  v1, GLfloat  v2)  {if (GLeeInit()) glUniform3fARB(location, v0, v1, v2);}
+  GLEEPFNGLUNIFORM3FARBPROC GLeeFuncPtr_glUniform3fARB=GLee_Lazy_glUniform3fARB;
+#endif
+#ifndef GLEE_C_DEFINED_glUniform4fARB
+#define GLEE_C_DEFINED_glUniform4fARB
+  void __stdcall GLee_Lazy_glUniform4fARB(GLint  location, GLfloat  v0, GLfloat  v1, GLfloat  v2, GLfloat  v3)  {if (GLeeInit()) glUniform4fARB(location, v0, v1, v2, v3);}
+  GLEEPFNGLUNIFORM4FARBPROC GLeeFuncPtr_glUniform4fARB=GLee_Lazy_glUniform4fARB;
+#endif
+#ifndef GLEE_C_DEFINED_glUniform1iARB
+#define GLEE_C_DEFINED_glUniform1iARB
+  void __stdcall GLee_Lazy_glUniform1iARB(GLint  location, GLint  v0)  {if (GLeeInit()) glUniform1iARB(location, v0);}
+  GLEEPFNGLUNIFORM1IARBPROC GLeeFuncPtr_glUniform1iARB=GLee_Lazy_glUniform1iARB;
+#endif
+#ifndef GLEE_C_DEFINED_glUniform2iARB
+#define GLEE_C_DEFINED_glUniform2iARB
+  void __stdcall GLee_Lazy_glUniform2iARB(GLint  location, GLint  v0, GLint  v1)  {if (GLeeInit()) glUniform2iARB(location, v0, v1);}
+  GLEEPFNGLUNIFORM2IARBPROC GLeeFuncPtr_glUniform2iARB=GLee_Lazy_glUniform2iARB;
+#endif
+#ifndef GLEE_C_DEFINED_glUniform3iARB
+#define GLEE_C_DEFINED_glUniform3iARB
+  void __stdcall GLee_Lazy_glUniform3iARB(GLint  location, GLint  v0, GLint  v1, GLint  v2)  {if (GLeeInit()) glUniform3iARB(location, v0, v1, v2);}
+  GLEEPFNGLUNIFORM3IARBPROC GLeeFuncPtr_glUniform3iARB=GLee_Lazy_glUniform3iARB;
+#endif
+#ifndef GLEE_C_DEFINED_glUniform4iARB
+#define GLEE_C_DEFINED_glUniform4iARB
+  void __stdcall GLee_Lazy_glUniform4iARB(GLint  location, GLint  v0, GLint  v1, GLint  v2, GLint  v3)  {if (GLeeInit()) glUniform4iARB(location, v0, v1, v2, v3);}
+  GLEEPFNGLUNIFORM4IARBPROC GLeeFuncPtr_glUniform4iARB=GLee_Lazy_glUniform4iARB;
+#endif
+#ifndef GLEE_C_DEFINED_glUniform1fvARB
+#define GLEE_C_DEFINED_glUniform1fvARB
+  void __stdcall GLee_Lazy_glUniform1fvARB(GLint  location, GLsizei  count, const GLfloat * value)  {if (GLeeInit()) glUniform1fvARB(location, count, value);}
+  GLEEPFNGLUNIFORM1FVARBPROC GLeeFuncPtr_glUniform1fvARB=GLee_Lazy_glUniform1fvARB;
+#endif
+#ifndef GLEE_C_DEFINED_glUniform2fvARB
+#define GLEE_C_DEFINED_glUniform2fvARB
+  void __stdcall GLee_Lazy_glUniform2fvARB(GLint  location, GLsizei  count, const GLfloat * value)  {if (GLeeInit()) glUniform2fvARB(location, count, value);}
+  GLEEPFNGLUNIFORM2FVARBPROC GLeeFuncPtr_glUniform2fvARB=GLee_Lazy_glUniform2fvARB;
+#endif
+#ifndef GLEE_C_DEFINED_glUniform3fvARB
+#define GLEE_C_DEFINED_glUniform3fvARB
+  void __stdcall GLee_Lazy_glUniform3fvARB(GLint  location, GLsizei  count, const GLfloat * value)  {if (GLeeInit()) glUniform3fvARB(location, count, value);}
+  GLEEPFNGLUNIFORM3FVARBPROC GLeeFuncPtr_glUniform3fvARB=GLee_Lazy_glUniform3fvARB;
+#endif
+#ifndef GLEE_C_DEFINED_glUniform4fvARB
+#define GLEE_C_DEFINED_glUniform4fvARB
+  void __stdcall GLee_Lazy_glUniform4fvARB(GLint  location, GLsizei  count, const GLfloat * value)  {if (GLeeInit()) glUniform4fvARB(location, count, value);}
+  GLEEPFNGLUNIFORM4FVARBPROC GLeeFuncPtr_glUniform4fvARB=GLee_Lazy_glUniform4fvARB;
+#endif
+#ifndef GLEE_C_DEFINED_glUniform1ivARB
+#define GLEE_C_DEFINED_glUniform1ivARB
+  void __stdcall GLee_Lazy_glUniform1ivARB(GLint  location, GLsizei  count, const GLint * value)  {if (GLeeInit()) glUniform1ivARB(location, count, value);}
+  GLEEPFNGLUNIFORM1IVARBPROC GLeeFuncPtr_glUniform1ivARB=GLee_Lazy_glUniform1ivARB;
+#endif
+#ifndef GLEE_C_DEFINED_glUniform2ivARB
+#define GLEE_C_DEFINED_glUniform2ivARB
+  void __stdcall GLee_Lazy_glUniform2ivARB(GLint  location, GLsizei  count, const GLint * value)  {if (GLeeInit()) glUniform2ivARB(location, count, value);}
+  GLEEPFNGLUNIFORM2IVARBPROC GLeeFuncPtr_glUniform2ivARB=GLee_Lazy_glUniform2ivARB;
+#endif
+#ifndef GLEE_C_DEFINED_glUniform3ivARB
+#define GLEE_C_DEFINED_glUniform3ivARB
+  void __stdcall GLee_Lazy_glUniform3ivARB(GLint  location, GLsizei  count, const GLint * value)  {if (GLeeInit()) glUniform3ivARB(location, count, value);}
+  GLEEPFNGLUNIFORM3IVARBPROC GLeeFuncPtr_glUniform3ivARB=GLee_Lazy_glUniform3ivARB;
+#endif
+#ifndef GLEE_C_DEFINED_glUniform4ivARB
+#define GLEE_C_DEFINED_glUniform4ivARB
+  void __stdcall GLee_Lazy_glUniform4ivARB(GLint  location, GLsizei  count, const GLint * value)  {if (GLeeInit()) glUniform4ivARB(location, count, value);}
+  GLEEPFNGLUNIFORM4IVARBPROC GLeeFuncPtr_glUniform4ivARB=GLee_Lazy_glUniform4ivARB;
+#endif
+#ifndef GLEE_C_DEFINED_glUniformMatrix2fvARB
+#define GLEE_C_DEFINED_glUniformMatrix2fvARB
+  void __stdcall GLee_Lazy_glUniformMatrix2fvARB(GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value)  {if (GLeeInit()) glUniformMatrix2fvARB(location, count, transpose, value);}
+  GLEEPFNGLUNIFORMMATRIX2FVARBPROC GLeeFuncPtr_glUniformMatrix2fvARB=GLee_Lazy_glUniformMatrix2fvARB;
+#endif
+#ifndef GLEE_C_DEFINED_glUniformMatrix3fvARB
+#define GLEE_C_DEFINED_glUniformMatrix3fvARB
+  void __stdcall GLee_Lazy_glUniformMatrix3fvARB(GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value)  {if (GLeeInit()) glUniformMatrix3fvARB(location, count, transpose, value);}
+  GLEEPFNGLUNIFORMMATRIX3FVARBPROC GLeeFuncPtr_glUniformMatrix3fvARB=GLee_Lazy_glUniformMatrix3fvARB;
+#endif
+#ifndef GLEE_C_DEFINED_glUniformMatrix4fvARB
+#define GLEE_C_DEFINED_glUniformMatrix4fvARB
+  void __stdcall GLee_Lazy_glUniformMatrix4fvARB(GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value)  {if (GLeeInit()) glUniformMatrix4fvARB(location, count, transpose, value);}
+  GLEEPFNGLUNIFORMMATRIX4FVARBPROC GLeeFuncPtr_glUniformMatrix4fvARB=GLee_Lazy_glUniformMatrix4fvARB;
+#endif
+#ifndef GLEE_C_DEFINED_glGetObjectParameterfvARB
+#define GLEE_C_DEFINED_glGetObjectParameterfvARB
+  void __stdcall GLee_Lazy_glGetObjectParameterfvARB(GLhandleARB  obj, GLenum  pname, GLfloat * params)  {if (GLeeInit()) glGetObjectParameterfvARB(obj, pname, params);}
+  GLEEPFNGLGETOBJECTPARAMETERFVARBPROC GLeeFuncPtr_glGetObjectParameterfvARB=GLee_Lazy_glGetObjectParameterfvARB;
+#endif
+#ifndef GLEE_C_DEFINED_glGetObjectParameterivARB
+#define GLEE_C_DEFINED_glGetObjectParameterivARB
+  void __stdcall GLee_Lazy_glGetObjectParameterivARB(GLhandleARB  obj, GLenum  pname, GLint * params)  {if (GLeeInit()) glGetObjectParameterivARB(obj, pname, params);}
+  GLEEPFNGLGETOBJECTPARAMETERIVARBPROC GLeeFuncPtr_glGetObjectParameterivARB=GLee_Lazy_glGetObjectParameterivARB;
+#endif
+#ifndef GLEE_C_DEFINED_glGetInfoLogARB
+#define GLEE_C_DEFINED_glGetInfoLogARB
+  void __stdcall GLee_Lazy_glGetInfoLogARB(GLhandleARB  obj, GLsizei  maxLength, GLsizei * length, GLcharARB * infoLog)  {if (GLeeInit()) glGetInfoLogARB(obj, maxLength, length, infoLog);}
+  GLEEPFNGLGETINFOLOGARBPROC GLeeFuncPtr_glGetInfoLogARB=GLee_Lazy_glGetInfoLogARB;
+#endif
+#ifndef GLEE_C_DEFINED_glGetAttachedObjectsARB
+#define GLEE_C_DEFINED_glGetAttachedObjectsARB
+  void __stdcall GLee_Lazy_glGetAttachedObjectsARB(GLhandleARB  containerObj, GLsizei  maxCount, GLsizei * count, GLhandleARB * obj)  {if (GLeeInit()) glGetAttachedObjectsARB(containerObj, maxCount, count, obj);}
+  GLEEPFNGLGETATTACHEDOBJECTSARBPROC GLeeFuncPtr_glGetAttachedObjectsARB=GLee_Lazy_glGetAttachedObjectsARB;
+#endif
+#ifndef GLEE_C_DEFINED_glGetUniformLocationARB
+#define GLEE_C_DEFINED_glGetUniformLocationARB
+  GLint __stdcall GLee_Lazy_glGetUniformLocationARB(GLhandleARB  programObj, const GLcharARB * name)  {if (GLeeInit()) return glGetUniformLocationARB(programObj, name); return (GLint)0;}
+  GLEEPFNGLGETUNIFORMLOCATIONARBPROC GLeeFuncPtr_glGetUniformLocationARB=GLee_Lazy_glGetUniformLocationARB;
+#endif
+#ifndef GLEE_C_DEFINED_glGetActiveUniformARB
+#define GLEE_C_DEFINED_glGetActiveUniformARB
+  void __stdcall GLee_Lazy_glGetActiveUniformARB(GLhandleARB  programObj, GLuint  index, GLsizei  maxLength, GLsizei * length, GLint * size, GLenum * type, GLcharARB * name)  {if (GLeeInit()) glGetActiveUniformARB(programObj, index, maxLength, length, size, type, name);}
+  GLEEPFNGLGETACTIVEUNIFORMARBPROC GLeeFuncPtr_glGetActiveUniformARB=GLee_Lazy_glGetActiveUniformARB;
+#endif
+#ifndef GLEE_C_DEFINED_glGetUniformfvARB
+#define GLEE_C_DEFINED_glGetUniformfvARB
+  void __stdcall GLee_Lazy_glGetUniformfvARB(GLhandleARB  programObj, GLint  location, GLfloat * params)  {if (GLeeInit()) glGetUniformfvARB(programObj, location, params);}
+  GLEEPFNGLGETUNIFORMFVARBPROC GLeeFuncPtr_glGetUniformfvARB=GLee_Lazy_glGetUniformfvARB;
+#endif
+#ifndef GLEE_C_DEFINED_glGetUniformivARB
+#define GLEE_C_DEFINED_glGetUniformivARB
+  void __stdcall GLee_Lazy_glGetUniformivARB(GLhandleARB  programObj, GLint  location, GLint * params)  {if (GLeeInit()) glGetUniformivARB(programObj, location, params);}
+  GLEEPFNGLGETUNIFORMIVARBPROC GLeeFuncPtr_glGetUniformivARB=GLee_Lazy_glGetUniformivARB;
+#endif
+#ifndef GLEE_C_DEFINED_glGetShaderSourceARB
+#define GLEE_C_DEFINED_glGetShaderSourceARB
+  void __stdcall GLee_Lazy_glGetShaderSourceARB(GLhandleARB  obj, GLsizei  maxLength, GLsizei * length, GLcharARB * source)  {if (GLeeInit()) glGetShaderSourceARB(obj, maxLength, length, source);}
+  GLEEPFNGLGETSHADERSOURCEARBPROC GLeeFuncPtr_glGetShaderSourceARB=GLee_Lazy_glGetShaderSourceARB;
+#endif
+#endif 
+
+/* GL_ARB_vertex_shader */
+
+#ifdef __GLEE_GL_ARB_vertex_shader
+#ifndef GLEE_C_DEFINED_glBindAttribLocationARB
+#define GLEE_C_DEFINED_glBindAttribLocationARB
+  void __stdcall GLee_Lazy_glBindAttribLocationARB(GLhandleARB  programObj, GLuint  index, const GLcharARB * name)  {if (GLeeInit()) glBindAttribLocationARB(programObj, index, name);}
+  GLEEPFNGLBINDATTRIBLOCATIONARBPROC GLeeFuncPtr_glBindAttribLocationARB=GLee_Lazy_glBindAttribLocationARB;
+#endif
+#ifndef GLEE_C_DEFINED_glGetActiveAttribARB
+#define GLEE_C_DEFINED_glGetActiveAttribARB
+  void __stdcall GLee_Lazy_glGetActiveAttribARB(GLhandleARB  programObj, GLuint  index, GLsizei  maxLength, GLsizei * length, GLint * size, GLenum * type, GLcharARB * name)  {if (GLeeInit()) glGetActiveAttribARB(programObj, index, maxLength, length, size, type, name);}
+  GLEEPFNGLGETACTIVEATTRIBARBPROC GLeeFuncPtr_glGetActiveAttribARB=GLee_Lazy_glGetActiveAttribARB;
+#endif
+#ifndef GLEE_C_DEFINED_glGetAttribLocationARB
+#define GLEE_C_DEFINED_glGetAttribLocationARB
+  GLint __stdcall GLee_Lazy_glGetAttribLocationARB(GLhandleARB  programObj, const GLcharARB * name)  {if (GLeeInit()) return glGetAttribLocationARB(programObj, name); return (GLint)0;}
+  GLEEPFNGLGETATTRIBLOCATIONARBPROC GLeeFuncPtr_glGetAttribLocationARB=GLee_Lazy_glGetAttribLocationARB;
+#endif
+#endif 
+
+/* GL_ARB_fragment_shader */
+
+#ifdef __GLEE_GL_ARB_fragment_shader
+#endif 
+
+/* GL_ARB_shading_language_100 */
+
+#ifdef __GLEE_GL_ARB_shading_language_100
+#endif 
+
+/* GL_ARB_texture_non_power_of_two */
+
+#ifdef __GLEE_GL_ARB_texture_non_power_of_two
+#endif 
+
+/* GL_ARB_point_sprite */
+
+#ifdef __GLEE_GL_ARB_point_sprite
+#endif 
+
+/* GL_ARB_fragment_program_shadow */
+
+#ifdef __GLEE_GL_ARB_fragment_program_shadow
+#endif 
+
+/* GL_ARB_draw_buffers */
+
+#ifdef __GLEE_GL_ARB_draw_buffers
+#ifndef GLEE_C_DEFINED_glDrawBuffersARB
+#define GLEE_C_DEFINED_glDrawBuffersARB
+  void __stdcall GLee_Lazy_glDrawBuffersARB(GLsizei  n, const GLenum * bufs)  {if (GLeeInit()) glDrawBuffersARB(n, bufs);}
+  GLEEPFNGLDRAWBUFFERSARBPROC GLeeFuncPtr_glDrawBuffersARB=GLee_Lazy_glDrawBuffersARB;
+#endif
+#endif 
+
+/* GL_ARB_texture_rectangle */
+
+#ifdef __GLEE_GL_ARB_texture_rectangle
+#endif 
+
+/* GL_ARB_color_buffer_float */
+
+#ifdef __GLEE_GL_ARB_color_buffer_float
+#ifndef GLEE_C_DEFINED_glClampColorARB
+#define GLEE_C_DEFINED_glClampColorARB
+  void __stdcall GLee_Lazy_glClampColorARB(GLenum  target, GLenum  clamp)  {if (GLeeInit()) glClampColorARB(target, clamp);}
+  GLEEPFNGLCLAMPCOLORARBPROC GLeeFuncPtr_glClampColorARB=GLee_Lazy_glClampColorARB;
+#endif
+#endif 
+
+/* GL_ARB_half_float_pixel */
+
+#ifdef __GLEE_GL_ARB_half_float_pixel
+#endif 
+
+/* GL_ARB_texture_float */
+
+#ifdef __GLEE_GL_ARB_texture_float
+#endif 
+
+/* GL_ARB_pixel_buffer_object */
+
+#ifdef __GLEE_GL_ARB_pixel_buffer_object
+#endif 
+
+/* GL_ARB_depth_buffer_float */
+
+#ifdef __GLEE_GL_ARB_depth_buffer_float
+#endif 
+
+/* GL_ARB_draw_instanced */
+
+#ifdef __GLEE_GL_ARB_draw_instanced
+#ifndef GLEE_C_DEFINED_glDrawArraysInstancedARB
+#define GLEE_C_DEFINED_glDrawArraysInstancedARB
+  void __stdcall GLee_Lazy_glDrawArraysInstancedARB(GLenum  mode, GLint  first, GLsizei  count, GLsizei  primcount)  {if (GLeeInit()) glDrawArraysInstancedARB(mode, first, count, primcount);}
+  GLEEPFNGLDRAWARRAYSINSTANCEDARBPROC GLeeFuncPtr_glDrawArraysInstancedARB=GLee_Lazy_glDrawArraysInstancedARB;
+#endif
+#ifndef GLEE_C_DEFINED_glDrawElementsInstancedARB
+#define GLEE_C_DEFINED_glDrawElementsInstancedARB
+  void __stdcall GLee_Lazy_glDrawElementsInstancedARB(GLenum  mode, GLsizei  count, GLenum  type, const GLvoid * indices, GLsizei  primcount)  {if (GLeeInit()) glDrawElementsInstancedARB(mode, count, type, indices, primcount);}
+  GLEEPFNGLDRAWELEMENTSINSTANCEDARBPROC GLeeFuncPtr_glDrawElementsInstancedARB=GLee_Lazy_glDrawElementsInstancedARB;
+#endif
+#endif 
+
+/* GL_ARB_framebuffer_object */
+
+#ifdef __GLEE_GL_ARB_framebuffer_object
+#ifndef GLEE_C_DEFINED_glIsRenderbuffer
+#define GLEE_C_DEFINED_glIsRenderbuffer
+  GLboolean __stdcall GLee_Lazy_glIsRenderbuffer(GLuint  renderbuffer)  {if (GLeeInit()) return glIsRenderbuffer(renderbuffer); return (GLboolean)0;}
+  GLEEPFNGLISRENDERBUFFERPROC GLeeFuncPtr_glIsRenderbuffer=GLee_Lazy_glIsRenderbuffer;
+#endif
+#ifndef GLEE_C_DEFINED_glBindRenderbuffer
+#define GLEE_C_DEFINED_glBindRenderbuffer
+  void __stdcall GLee_Lazy_glBindRenderbuffer(GLenum  target, GLuint  renderbuffer)  {if (GLeeInit()) glBindRenderbuffer(target, renderbuffer);}
+  GLEEPFNGLBINDRENDERBUFFERPROC GLeeFuncPtr_glBindRenderbuffer=GLee_Lazy_glBindRenderbuffer;
+#endif
+#ifndef GLEE_C_DEFINED_glDeleteRenderbuffers
+#define GLEE_C_DEFINED_glDeleteRenderbuffers
+  void __stdcall GLee_Lazy_glDeleteRenderbuffers(GLsizei  n, const GLuint * renderbuffers)  {if (GLeeInit()) glDeleteRenderbuffers(n, renderbuffers);}
+  GLEEPFNGLDELETERENDERBUFFERSPROC GLeeFuncPtr_glDeleteRenderbuffers=GLee_Lazy_glDeleteRenderbuffers;
+#endif
+#ifndef GLEE_C_DEFINED_glGenRenderbuffers
+#define GLEE_C_DEFINED_glGenRenderbuffers
+  void __stdcall GLee_Lazy_glGenRenderbuffers(GLsizei  n, GLuint * renderbuffers)  {if (GLeeInit()) glGenRenderbuffers(n, renderbuffers);}
+  GLEEPFNGLGENRENDERBUFFERSPROC GLeeFuncPtr_glGenRenderbuffers=GLee_Lazy_glGenRenderbuffers;
+#endif
+#ifndef GLEE_C_DEFINED_glRenderbufferStorage
+#define GLEE_C_DEFINED_glRenderbufferStorage
+  void __stdcall GLee_Lazy_glRenderbufferStorage(GLenum  target, GLenum  internalformat, GLsizei  width, GLsizei  height)  {if (GLeeInit()) glRenderbufferStorage(target, internalformat, width, height);}
+  GLEEPFNGLRENDERBUFFERSTORAGEPROC GLeeFuncPtr_glRenderbufferStorage=GLee_Lazy_glRenderbufferStorage;
+#endif
+#ifndef GLEE_C_DEFINED_glGetRenderbufferParameteriv
+#define GLEE_C_DEFINED_glGetRenderbufferParameteriv
+  void __stdcall GLee_Lazy_glGetRenderbufferParameteriv(GLenum  target, GLenum  pname, GLint * params)  {if (GLeeInit()) glGetRenderbufferParameteriv(target, pname, params);}
+  GLEEPFNGLGETRENDERBUFFERPARAMETERIVPROC GLeeFuncPtr_glGetRenderbufferParameteriv=GLee_Lazy_glGetRenderbufferParameteriv;
+#endif
+#ifndef GLEE_C_DEFINED_glIsFramebuffer
+#define GLEE_C_DEFINED_glIsFramebuffer
+  GLboolean __stdcall GLee_Lazy_glIsFramebuffer(GLuint  framebuffer)  {if (GLeeInit()) return glIsFramebuffer(framebuffer); return (GLboolean)0;}
+  GLEEPFNGLISFRAMEBUFFERPROC GLeeFuncPtr_glIsFramebuffer=GLee_Lazy_glIsFramebuffer;
+#endif
+#ifndef GLEE_C_DEFINED_glBindFramebuffer
+#define GLEE_C_DEFINED_glBindFramebuffer
+  void __stdcall GLee_Lazy_glBindFramebuffer(GLenum  target, GLuint  framebuffer)  {if (GLeeInit()) glBindFramebuffer(target, framebuffer);}
+  GLEEPFNGLBINDFRAMEBUFFERPROC GLeeFuncPtr_glBindFramebuffer=GLee_Lazy_glBindFramebuffer;
+#endif
+#ifndef GLEE_C_DEFINED_glDeleteFramebuffers
+#define GLEE_C_DEFINED_glDeleteFramebuffers
+  void __stdcall GLee_Lazy_glDeleteFramebuffers(GLsizei  n, const GLuint * framebuffers)  {if (GLeeInit()) glDeleteFramebuffers(n, framebuffers);}
+  GLEEPFNGLDELETEFRAMEBUFFERSPROC GLeeFuncPtr_glDeleteFramebuffers=GLee_Lazy_glDeleteFramebuffers;
+#endif
+#ifndef GLEE_C_DEFINED_glGenFramebuffers
+#define GLEE_C_DEFINED_glGenFramebuffers
+  void __stdcall GLee_Lazy_glGenFramebuffers(GLsizei  n, GLuint * framebuffers)  {if (GLeeInit()) glGenFramebuffers(n, framebuffers);}
+  GLEEPFNGLGENFRAMEBUFFERSPROC GLeeFuncPtr_glGenFramebuffers=GLee_Lazy_glGenFramebuffers;
+#endif
+#ifndef GLEE_C_DEFINED_glCheckFramebufferStatus
+#define GLEE_C_DEFINED_glCheckFramebufferStatus
+  GLenum __stdcall GLee_Lazy_glCheckFramebufferStatus(GLenum  target)  {if (GLeeInit()) return glCheckFramebufferStatus(target); return (GLenum)0;}
+  GLEEPFNGLCHECKFRAMEBUFFERSTATUSPROC GLeeFuncPtr_glCheckFramebufferStatus=GLee_Lazy_glCheckFramebufferStatus;
+#endif
+#ifndef GLEE_C_DEFINED_glFramebufferTexture1D
+#define GLEE_C_DEFINED_glFramebufferTexture1D
+  void __stdcall GLee_Lazy_glFramebufferTexture1D(GLenum  target, GLenum  attachment, GLenum  textarget, GLuint  texture, GLint  level)  {if (GLeeInit()) glFramebufferTexture1D(target, attachment, textarget, texture, level);}
+  GLEEPFNGLFRAMEBUFFERTEXTURE1DPROC GLeeFuncPtr_glFramebufferTexture1D=GLee_Lazy_glFramebufferTexture1D;
+#endif
+#ifndef GLEE_C_DEFINED_glFramebufferTexture2D
+#define GLEE_C_DEFINED_glFramebufferTexture2D
+  void __stdcall GLee_Lazy_glFramebufferTexture2D(GLenum  target, GLenum  attachment, GLenum  textarget, GLuint  texture, GLint  level)  {if (GLeeInit()) glFramebufferTexture2D(target, attachment, textarget, texture, level);}
+  GLEEPFNGLFRAMEBUFFERTEXTURE2DPROC GLeeFuncPtr_glFramebufferTexture2D=GLee_Lazy_glFramebufferTexture2D;
+#endif
+#ifndef GLEE_C_DEFINED_glFramebufferTexture3D
+#define GLEE_C_DEFINED_glFramebufferTexture3D
+  void __stdcall GLee_Lazy_glFramebufferTexture3D(GLenum  target, GLenum  attachment, GLenum  textarget, GLuint  texture, GLint  level, GLint  zoffset)  {if (GLeeInit()) glFramebufferTexture3D(target, attachment, textarget, texture, level, zoffset);}
+  GLEEPFNGLFRAMEBUFFERTEXTURE3DPROC GLeeFuncPtr_glFramebufferTexture3D=GLee_Lazy_glFramebufferTexture3D;
+#endif
+#ifndef GLEE_C_DEFINED_glFramebufferRenderbuffer
+#define GLEE_C_DEFINED_glFramebufferRenderbuffer
+  void __stdcall GLee_Lazy_glFramebufferRenderbuffer(GLenum  target, GLenum  attachment, GLenum  renderbuffertarget, GLuint  renderbuffer)  {if (GLeeInit()) glFramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer);}
+  GLEEPFNGLFRAMEBUFFERRENDERBUFFERPROC GLeeFuncPtr_glFramebufferRenderbuffer=GLee_Lazy_glFramebufferRenderbuffer;
+#endif
+#ifndef GLEE_C_DEFINED_glGetFramebufferAttachmentParameteriv
+#define GLEE_C_DEFINED_glGetFramebufferAttachmentParameteriv
+  void __stdcall GLee_Lazy_glGetFramebufferAttachmentParameteriv(GLenum  target, GLenum  attachment, GLenum  pname, GLint * params)  {if (GLeeInit()) glGetFramebufferAttachmentParameteriv(target, attachment, pname, params);}
+  GLEEPFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC GLeeFuncPtr_glGetFramebufferAttachmentParameteriv=GLee_Lazy_glGetFramebufferAttachmentParameteriv;
+#endif
+#ifndef GLEE_C_DEFINED_glGenerateMipmap
+#define GLEE_C_DEFINED_glGenerateMipmap
+  void __stdcall GLee_Lazy_glGenerateMipmap(GLenum  target)  {if (GLeeInit()) glGenerateMipmap(target);}
+  GLEEPFNGLGENERATEMIPMAPPROC GLeeFuncPtr_glGenerateMipmap=GLee_Lazy_glGenerateMipmap;
+#endif
+#ifndef GLEE_C_DEFINED_glBlitFramebuffer
+#define GLEE_C_DEFINED_glBlitFramebuffer
+  void __stdcall GLee_Lazy_glBlitFramebuffer(GLint  srcX0, GLint  srcY0, GLint  srcX1, GLint  srcY1, GLint  dstX0, GLint  dstY0, GLint  dstX1, GLint  dstY1, GLbitfield  mask, GLenum  filter)  {if (GLeeInit()) glBlitFramebuffer(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);}
+  GLEEPFNGLBLITFRAMEBUFFERPROC GLeeFuncPtr_glBlitFramebuffer=GLee_Lazy_glBlitFramebuffer;
+#endif
+#ifndef GLEE_C_DEFINED_glRenderbufferStorageMultisample
+#define GLEE_C_DEFINED_glRenderbufferStorageMultisample
+  void __stdcall GLee_Lazy_glRenderbufferStorageMultisample(GLenum  target, GLsizei  samples, GLenum  internalformat, GLsizei  width, GLsizei  height)  {if (GLeeInit()) glRenderbufferStorageMultisample(target, samples, internalformat, width, height);}
+  GLEEPFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC GLeeFuncPtr_glRenderbufferStorageMultisample=GLee_Lazy_glRenderbufferStorageMultisample;
+#endif
+#ifndef GLEE_C_DEFINED_glFramebufferTextureLayer
+#define GLEE_C_DEFINED_glFramebufferTextureLayer
+  void __stdcall GLee_Lazy_glFramebufferTextureLayer(GLenum  target, GLenum  attachment, GLuint  texture, GLint  level, GLint  layer)  {if (GLeeInit()) glFramebufferTextureLayer(target, attachment, texture, level, layer);}
+  GLEEPFNGLFRAMEBUFFERTEXTURELAYERPROC GLeeFuncPtr_glFramebufferTextureLayer=GLee_Lazy_glFramebufferTextureLayer;
+#endif
+#endif 
+
+/* GL_ARB_framebuffer_sRGB */
+
+#ifdef __GLEE_GL_ARB_framebuffer_sRGB
+#endif 
+
+/* GL_ARB_geometry_shader4 */
+
+#ifdef __GLEE_GL_ARB_geometry_shader4
+#ifndef GLEE_C_DEFINED_glProgramParameteriARB
+#define GLEE_C_DEFINED_glProgramParameteriARB
+  void __stdcall GLee_Lazy_glProgramParameteriARB(GLuint  program, GLenum  pname, GLint  value)  {if (GLeeInit()) glProgramParameteriARB(program, pname, value);}
+  GLEEPFNGLPROGRAMPARAMETERIARBPROC GLeeFuncPtr_glProgramParameteriARB=GLee_Lazy_glProgramParameteriARB;
+#endif
+#ifndef GLEE_C_DEFINED_glFramebufferTextureARB
+#define GLEE_C_DEFINED_glFramebufferTextureARB
+  void __stdcall GLee_Lazy_glFramebufferTextureARB(GLenum  target, GLenum  attachment, GLuint  texture, GLint  level)  {if (GLeeInit()) glFramebufferTextureARB(target, attachment, texture, level);}
+  GLEEPFNGLFRAMEBUFFERTEXTUREARBPROC GLeeFuncPtr_glFramebufferTextureARB=GLee_Lazy_glFramebufferTextureARB;
+#endif
+#ifndef GLEE_C_DEFINED_glFramebufferTextureLayerARB
+#define GLEE_C_DEFINED_glFramebufferTextureLayerARB
+  void __stdcall GLee_Lazy_glFramebufferTextureLayerARB(GLenum  target, GLenum  attachment, GLuint  texture, GLint  level, GLint  layer)  {if (GLeeInit()) glFramebufferTextureLayerARB(target, attachment, texture, level, layer);}
+  GLEEPFNGLFRAMEBUFFERTEXTURELAYERARBPROC GLeeFuncPtr_glFramebufferTextureLayerARB=GLee_Lazy_glFramebufferTextureLayerARB;
+#endif
+#ifndef GLEE_C_DEFINED_glFramebufferTextureFaceARB
+#define GLEE_C_DEFINED_glFramebufferTextureFaceARB
+  void __stdcall GLee_Lazy_glFramebufferTextureFaceARB(GLenum  target, GLenum  attachment, GLuint  texture, GLint  level, GLenum  face)  {if (GLeeInit()) glFramebufferTextureFaceARB(target, attachment, texture, level, face);}
+  GLEEPFNGLFRAMEBUFFERTEXTUREFACEARBPROC GLeeFuncPtr_glFramebufferTextureFaceARB=GLee_Lazy_glFramebufferTextureFaceARB;
+#endif
+#endif 
+
+/* GL_ARB_half_float_vertex */
+
+#ifdef __GLEE_GL_ARB_half_float_vertex
+#endif 
+
+/* GL_ARB_instanced_arrays */
+
+#ifdef __GLEE_GL_ARB_instanced_arrays
+#ifndef GLEE_C_DEFINED_glVertexAttribDivisorARB
+#define GLEE_C_DEFINED_glVertexAttribDivisorARB
+  void __stdcall GLee_Lazy_glVertexAttribDivisorARB(GLuint  index, GLuint  divisor)  {if (GLeeInit()) glVertexAttribDivisorARB(index, divisor);}
+  GLEEPFNGLVERTEXATTRIBDIVISORARBPROC GLeeFuncPtr_glVertexAttribDivisorARB=GLee_Lazy_glVertexAttribDivisorARB;
+#endif
+#endif 
+
+/* GL_ARB_map_buffer_range */
+
+#ifdef __GLEE_GL_ARB_map_buffer_range
+#ifndef GLEE_C_DEFINED_glMapBufferRange
+#define GLEE_C_DEFINED_glMapBufferRange
+  GLvoid* __stdcall GLee_Lazy_glMapBufferRange(GLenum  target, GLintptr  offset, GLsizeiptr  length, GLbitfield  access)  {if (GLeeInit()) return glMapBufferRange(target, offset, length, access); return (GLvoid*)0;}
+  GLEEPFNGLMAPBUFFERRANGEPROC GLeeFuncPtr_glMapBufferRange=GLee_Lazy_glMapBufferRange;
+#endif
+#ifndef GLEE_C_DEFINED_glFlushMappedBufferRange
+#define GLEE_C_DEFINED_glFlushMappedBufferRange
+  void __stdcall GLee_Lazy_glFlushMappedBufferRange(GLenum  target, GLintptr  offset, GLsizeiptr  length)  {if (GLeeInit()) glFlushMappedBufferRange(target, offset, length);}
+  GLEEPFNGLFLUSHMAPPEDBUFFERRANGEPROC GLeeFuncPtr_glFlushMappedBufferRange=GLee_Lazy_glFlushMappedBufferRange;
+#endif
+#endif 
+
+/* GL_ARB_texture_buffer_object */
+
+#ifdef __GLEE_GL_ARB_texture_buffer_object
+#ifndef GLEE_C_DEFINED_glTexBufferARB
+#define GLEE_C_DEFINED_glTexBufferARB
+  void __stdcall GLee_Lazy_glTexBufferARB(GLenum  target, GLenum  internalformat, GLuint  buffer)  {if (GLeeInit()) glTexBufferARB(target, internalformat, buffer);}
+  GLEEPFNGLTEXBUFFERARBPROC GLeeFuncPtr_glTexBufferARB=GLee_Lazy_glTexBufferARB;
+#endif
+#endif 
+
+/* GL_ARB_texture_compression_rgtc */
+
+#ifdef __GLEE_GL_ARB_texture_compression_rgtc
+#endif 
+
+/* GL_ARB_texture_rg */
+
+#ifdef __GLEE_GL_ARB_texture_rg
+#endif 
+
+/* GL_ARB_vertex_array_object */
+
+#ifdef __GLEE_GL_ARB_vertex_array_object
+#ifndef GLEE_C_DEFINED_glBindVertexArray
+#define GLEE_C_DEFINED_glBindVertexArray
+  void __stdcall GLee_Lazy_glBindVertexArray(GLuint  array)  {if (GLeeInit()) glBindVertexArray(array);}
+  GLEEPFNGLBINDVERTEXARRAYPROC GLeeFuncPtr_glBindVertexArray=GLee_Lazy_glBindVertexArray;
+#endif
+#ifndef GLEE_C_DEFINED_glDeleteVertexArrays
+#define GLEE_C_DEFINED_glDeleteVertexArrays
+  void __stdcall GLee_Lazy_glDeleteVertexArrays(GLsizei  n, const GLuint * arrays)  {if (GLeeInit()) glDeleteVertexArrays(n, arrays);}
+  GLEEPFNGLDELETEVERTEXARRAYSPROC GLeeFuncPtr_glDeleteVertexArrays=GLee_Lazy_glDeleteVertexArrays;
+#endif
+#ifndef GLEE_C_DEFINED_glGenVertexArrays
+#define GLEE_C_DEFINED_glGenVertexArrays
+  void __stdcall GLee_Lazy_glGenVertexArrays(GLsizei  n, GLuint * arrays)  {if (GLeeInit()) glGenVertexArrays(n, arrays);}
+  GLEEPFNGLGENVERTEXARRAYSPROC GLeeFuncPtr_glGenVertexArrays=GLee_Lazy_glGenVertexArrays;
+#endif
+#ifndef GLEE_C_DEFINED_glIsVertexArray
+#define GLEE_C_DEFINED_glIsVertexArray
+  GLboolean __stdcall GLee_Lazy_glIsVertexArray(GLuint  array)  {if (GLeeInit()) return glIsVertexArray(array); return (GLboolean)0;}
+  GLEEPFNGLISVERTEXARRAYPROC GLeeFuncPtr_glIsVertexArray=GLee_Lazy_glIsVertexArray;
+#endif
+#endif 
+
+/* GL_ARB_uniform_buffer_object */
+
+#ifdef __GLEE_GL_ARB_uniform_buffer_object
+#ifndef GLEE_C_DEFINED_glGetUniformIndices
+#define GLEE_C_DEFINED_glGetUniformIndices
+  void __stdcall GLee_Lazy_glGetUniformIndices(GLuint  program, GLsizei  uniformCount, const GLchar* * uniformNames, GLuint * uniformIndices)  {if (GLeeInit()) glGetUniformIndices(program, uniformCount, uniformNames, uniformIndices);}
+  GLEEPFNGLGETUNIFORMINDICESPROC GLeeFuncPtr_glGetUniformIndices=GLee_Lazy_glGetUniformIndices;
+#endif
+#ifndef GLEE_C_DEFINED_glGetActiveUniformsiv
+#define GLEE_C_DEFINED_glGetActiveUniformsiv
+  void __stdcall GLee_Lazy_glGetActiveUniformsiv(GLuint  program, GLsizei  uniformCount, const GLuint * uniformIndices, GLenum  pname, GLint * params)  {if (GLeeInit()) glGetActiveUniformsiv(program, uniformCount, uniformIndices, pname, params);}
+  GLEEPFNGLGETACTIVEUNIFORMSIVPROC GLeeFuncPtr_glGetActiveUniformsiv=GLee_Lazy_glGetActiveUniformsiv;
+#endif
+#ifndef GLEE_C_DEFINED_glGetActiveUniformName
+#define GLEE_C_DEFINED_glGetActiveUniformName
+  void __stdcall GLee_Lazy_glGetActiveUniformName(GLuint  program, GLuint  uniformIndex, GLsizei  bufSize, GLsizei * length, GLchar * uniformName)  {if (GLeeInit()) glGetActiveUniformName(program, uniformIndex, bufSize, length, uniformName);}
+  GLEEPFNGLGETACTIVEUNIFORMNAMEPROC GLeeFuncPtr_glGetActiveUniformName=GLee_Lazy_glGetActiveUniformName;
+#endif
+#ifndef GLEE_C_DEFINED_glGetUniformBlockIndex
+#define GLEE_C_DEFINED_glGetUniformBlockIndex
+  GLuint __stdcall GLee_Lazy_glGetUniformBlockIndex(GLuint  program, const GLchar * uniformBlockName)  {if (GLeeInit()) return glGetUniformBlockIndex(program, uniformBlockName); return (GLuint)0;}
+  GLEEPFNGLGETUNIFORMBLOCKINDEXPROC GLeeFuncPtr_glGetUniformBlockIndex=GLee_Lazy_glGetUniformBlockIndex;
+#endif
+#ifndef GLEE_C_DEFINED_glGetActiveUniformBlockiv
+#define GLEE_C_DEFINED_glGetActiveUniformBlockiv
+  void __stdcall GLee_Lazy_glGetActiveUniformBlockiv(GLuint  program, GLuint  uniformBlockIndex, GLenum  pname, GLint * params)  {if (GLeeInit()) glGetActiveUniformBlockiv(program, uniformBlockIndex, pname, params);}
+  GLEEPFNGLGETACTIVEUNIFORMBLOCKIVPROC GLeeFuncPtr_glGetActiveUniformBlockiv=GLee_Lazy_glGetActiveUniformBlockiv;
+#endif
+#ifndef GLEE_C_DEFINED_glGetActiveUniformBlockName
+#define GLEE_C_DEFINED_glGetActiveUniformBlockName
+  void __stdcall GLee_Lazy_glGetActiveUniformBlockName(GLuint  program, GLuint  uniformBlockIndex, GLsizei  bufSize, GLsizei * length, GLchar * uniformBlockName)  {if (GLeeInit()) glGetActiveUniformBlockName(program, uniformBlockIndex, bufSize, length, uniformBlockName);}
+  GLEEPFNGLGETACTIVEUNIFORMBLOCKNAMEPROC GLeeFuncPtr_glGetActiveUniformBlockName=GLee_Lazy_glGetActiveUniformBlockName;
+#endif
+#ifndef GLEE_C_DEFINED_glUniformBlockBinding
+#define GLEE_C_DEFINED_glUniformBlockBinding
+  void __stdcall GLee_Lazy_glUniformBlockBinding(GLuint  program, GLuint  uniformBlockIndex, GLuint  uniformBlockBinding)  {if (GLeeInit()) glUniformBlockBinding(program, uniformBlockIndex, uniformBlockBinding);}
+  GLEEPFNGLUNIFORMBLOCKBINDINGPROC GLeeFuncPtr_glUniformBlockBinding=GLee_Lazy_glUniformBlockBinding;
+#endif
+#endif 
+
+/* GL_ARB_compatibility */
+
+#ifdef __GLEE_GL_ARB_compatibility
+#endif 
+
+/* GL_ARB_copy_buffer */
+
+#ifdef __GLEE_GL_ARB_copy_buffer
+#ifndef GLEE_C_DEFINED_glCopyBufferSubData
+#define GLEE_C_DEFINED_glCopyBufferSubData
+  void __stdcall GLee_Lazy_glCopyBufferSubData(GLenum  readTarget, GLenum  writeTarget, GLintptr  readOffset, GLintptr  writeOffset, GLsizeiptr  size)  {if (GLeeInit()) glCopyBufferSubData(readTarget, writeTarget, readOffset, writeOffset, size);}
+  GLEEPFNGLCOPYBUFFERSUBDATAPROC GLeeFuncPtr_glCopyBufferSubData=GLee_Lazy_glCopyBufferSubData;
+#endif
+#endif 
+
+/* GL_ARB_shader_texture_lod */
+
+#ifdef __GLEE_GL_ARB_shader_texture_lod
+#endif 
+
+/* GL_ARB_depth_clamp */
+
+#ifdef __GLEE_GL_ARB_depth_clamp
+#endif 
+
+/* GL_ARB_draw_elements_base_vertex */
+
+#ifdef __GLEE_GL_ARB_draw_elements_base_vertex
+#ifndef GLEE_C_DEFINED_glDrawElementsBaseVertex
+#define GLEE_C_DEFINED_glDrawElementsBaseVertex
+  void __stdcall GLee_Lazy_glDrawElementsBaseVertex(GLenum  mode, GLsizei  count, GLenum  type, const GLvoid * indices, GLint  basevertex)  {if (GLeeInit()) glDrawElementsBaseVertex(mode, count, type, indices, basevertex);}
+  GLEEPFNGLDRAWELEMENTSBASEVERTEXPROC GLeeFuncPtr_glDrawElementsBaseVertex=GLee_Lazy_glDrawElementsBaseVertex;
+#endif
+#ifndef GLEE_C_DEFINED_glDrawRangeElementsBaseVertex
+#define GLEE_C_DEFINED_glDrawRangeElementsBaseVertex
+  void __stdcall GLee_Lazy_glDrawRangeElementsBaseVertex(GLenum  mode, GLuint  start, GLuint  end, GLsizei  count, GLenum  type, const GLvoid * indices, GLint  basevertex)  {if (GLeeInit()) glDrawRangeElementsBaseVertex(mode, start, end, count, type, indices, basevertex);}
+  GLEEPFNGLDRAWRANGEELEMENTSBASEVERTEXPROC GLeeFuncPtr_glDrawRangeElementsBaseVertex=GLee_Lazy_glDrawRangeElementsBaseVertex;
+#endif
+#ifndef GLEE_C_DEFINED_glDrawElementsInstancedBaseVertex
+#define GLEE_C_DEFINED_glDrawElementsInstancedBaseVertex
+  void __stdcall GLee_Lazy_glDrawElementsInstancedBaseVertex(GLenum  mode, GLsizei  count, GLenum  type, const GLvoid * indices, GLsizei  primcount, GLint  basevertex)  {if (GLeeInit()) glDrawElementsInstancedBaseVertex(mode, count, type, indices, primcount, basevertex);}
+  GLEEPFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC GLeeFuncPtr_glDrawElementsInstancedBaseVertex=GLee_Lazy_glDrawElementsInstancedBaseVertex;
+#endif
+#ifndef GLEE_C_DEFINED_glMultiDrawElementsBaseVertex
+#define GLEE_C_DEFINED_glMultiDrawElementsBaseVertex
+  void __stdcall GLee_Lazy_glMultiDrawElementsBaseVertex(GLenum  mode, const GLsizei * count, GLenum  type, const GLvoid* * indices, GLsizei  primcount, const GLint * basevertex)  {if (GLeeInit()) glMultiDrawElementsBaseVertex(mode, count, type, indices, primcount, basevertex);}
+  GLEEPFNGLMULTIDRAWELEMENTSBASEVERTEXPROC GLeeFuncPtr_glMultiDrawElementsBaseVertex=GLee_Lazy_glMultiDrawElementsBaseVertex;
+#endif
+#endif 
+
+/* GL_ARB_fragment_coord_conventions */
+
+#ifdef __GLEE_GL_ARB_fragment_coord_conventions
+#endif 
+
+/* GL_ARB_provoking_vertex */
+
+#ifdef __GLEE_GL_ARB_provoking_vertex
+#ifndef GLEE_C_DEFINED_glProvokingVertex
+#define GLEE_C_DEFINED_glProvokingVertex
+  void __stdcall GLee_Lazy_glProvokingVertex(GLenum  mode)  {if (GLeeInit()) glProvokingVertex(mode);}
+  GLEEPFNGLPROVOKINGVERTEXPROC GLeeFuncPtr_glProvokingVertex=GLee_Lazy_glProvokingVertex;
+#endif
+#endif 
+
+/* GL_ARB_seamless_cube_map */
+
+#ifdef __GLEE_GL_ARB_seamless_cube_map
+#endif 
+
+/* GL_ARB_sync */
+
+#ifdef __GLEE_GL_ARB_sync
+#ifndef GLEE_C_DEFINED_glFenceSync
+#define GLEE_C_DEFINED_glFenceSync
+  GLsync __stdcall GLee_Lazy_glFenceSync(GLenum  condition, GLbitfield  flags)  {if (GLeeInit()) return glFenceSync(condition, flags); return (GLsync)0;}
+  GLEEPFNGLFENCESYNCPROC GLeeFuncPtr_glFenceSync=GLee_Lazy_glFenceSync;
+#endif
+#ifndef GLEE_C_DEFINED_glIsSync
+#define GLEE_C_DEFINED_glIsSync
+  GLboolean __stdcall GLee_Lazy_glIsSync(GLsync  sync)  {if (GLeeInit()) return glIsSync(sync); return (GLboolean)0;}
+  GLEEPFNGLISSYNCPROC GLeeFuncPtr_glIsSync=GLee_Lazy_glIsSync;
+#endif
+#ifndef GLEE_C_DEFINED_glDeleteSync
+#define GLEE_C_DEFINED_glDeleteSync
+  void __stdcall GLee_Lazy_glDeleteSync(GLsync  sync)  {if (GLeeInit()) glDeleteSync(sync);}
+  GLEEPFNGLDELETESYNCPROC GLeeFuncPtr_glDeleteSync=GLee_Lazy_glDeleteSync;
+#endif
+#ifndef GLEE_C_DEFINED_glClientWaitSync
+#define GLEE_C_DEFINED_glClientWaitSync
+  GLenum __stdcall GLee_Lazy_glClientWaitSync(GLsync  sync, GLbitfield  flags, GLuint64  timeout)  {if (GLeeInit()) return glClientWaitSync(sync, flags, timeout); return (GLenum)0;}
+  GLEEPFNGLCLIENTWAITSYNCPROC GLeeFuncPtr_glClientWaitSync=GLee_Lazy_glClientWaitSync;
+#endif
+#ifndef GLEE_C_DEFINED_glWaitSync
+#define GLEE_C_DEFINED_glWaitSync
+  void __stdcall GLee_Lazy_glWaitSync(GLsync  sync, GLbitfield  flags, GLuint64  timeout)  {if (GLeeInit()) glWaitSync(sync, flags, timeout);}
+  GLEEPFNGLWAITSYNCPROC GLeeFuncPtr_glWaitSync=GLee_Lazy_glWaitSync;
+#endif
+#ifndef GLEE_C_DEFINED_glGetInteger64v
+#define GLEE_C_DEFINED_glGetInteger64v
+  void __stdcall GLee_Lazy_glGetInteger64v(GLenum  pname, GLint64 * params)  {if (GLeeInit()) glGetInteger64v(pname, params);}
+  GLEEPFNGLGETINTEGER64VPROC GLeeFuncPtr_glGetInteger64v=GLee_Lazy_glGetInteger64v;
+#endif
+#ifndef GLEE_C_DEFINED_glGetSynciv
+#define GLEE_C_DEFINED_glGetSynciv
+  void __stdcall GLee_Lazy_glGetSynciv(GLsync  sync, GLenum  pname, GLsizei  bufSize, GLsizei * length, GLint * values)  {if (GLeeInit()) glGetSynciv(sync, pname, bufSize, length, values);}
+  GLEEPFNGLGETSYNCIVPROC GLeeFuncPtr_glGetSynciv=GLee_Lazy_glGetSynciv;
+#endif
+#endif 
+
+/* GL_ARB_texture_multisample */
+
+#ifdef __GLEE_GL_ARB_texture_multisample
+#ifndef GLEE_C_DEFINED_glTexImage2DMultisample
+#define GLEE_C_DEFINED_glTexImage2DMultisample
+  void __stdcall GLee_Lazy_glTexImage2DMultisample(GLenum  target, GLsizei  samples, GLint  internalformat, GLsizei  width, GLsizei  height, GLboolean  fixedsamplelocations)  {if (GLeeInit()) glTexImage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations);}
+  GLEEPFNGLTEXIMAGE2DMULTISAMPLEPROC GLeeFuncPtr_glTexImage2DMultisample=GLee_Lazy_glTexImage2DMultisample;
+#endif
+#ifndef GLEE_C_DEFINED_glTexImage3DMultisample
+#define GLEE_C_DEFINED_glTexImage3DMultisample
+  void __stdcall GLee_Lazy_glTexImage3DMultisample(GLenum  target, GLsizei  samples, GLint  internalformat, GLsizei  width, GLsizei  height, GLsizei  depth, GLboolean  fixedsamplelocations)  {if (GLeeInit()) glTexImage3DMultisample(target, samples, internalformat, width, height, depth, fixedsamplelocations);}
+  GLEEPFNGLTEXIMAGE3DMULTISAMPLEPROC GLeeFuncPtr_glTexImage3DMultisample=GLee_Lazy_glTexImage3DMultisample;
+#endif
+#ifndef GLEE_C_DEFINED_glGetMultisamplefv
+#define GLEE_C_DEFINED_glGetMultisamplefv
+  void __stdcall GLee_Lazy_glGetMultisamplefv(GLenum  pname, GLuint  index, GLfloat * val)  {if (GLeeInit()) glGetMultisamplefv(pname, index, val);}
+  GLEEPFNGLGETMULTISAMPLEFVPROC GLeeFuncPtr_glGetMultisamplefv=GLee_Lazy_glGetMultisamplefv;
+#endif
+#ifndef GLEE_C_DEFINED_glSampleMaski
+#define GLEE_C_DEFINED_glSampleMaski
+  void __stdcall GLee_Lazy_glSampleMaski(GLuint  index, GLbitfield  mask)  {if (GLeeInit()) glSampleMaski(index, mask);}
+  GLEEPFNGLSAMPLEMASKIPROC GLeeFuncPtr_glSampleMaski=GLee_Lazy_glSampleMaski;
+#endif
+#endif 
+
+/* GL_ARB_vertex_array_bgra */
+
+#ifdef __GLEE_GL_ARB_vertex_array_bgra
+#endif 
+
+/* GL_ARB_draw_buffers_blend */
+
+#ifdef __GLEE_GL_ARB_draw_buffers_blend
+#ifndef GLEE_C_DEFINED_glBlendEquationiARB
+#define GLEE_C_DEFINED_glBlendEquationiARB
+  void __stdcall GLee_Lazy_glBlendEquationiARB(GLuint  buf, GLenum  mode)  {if (GLeeInit()) glBlendEquationiARB(buf, mode);}
+  GLEEPFNGLBLENDEQUATIONIARBPROC GLeeFuncPtr_glBlendEquationiARB=GLee_Lazy_glBlendEquationiARB;
+#endif
+#ifndef GLEE_C_DEFINED_glBlendEquationSeparateiARB
+#define GLEE_C_DEFINED_glBlendEquationSeparateiARB
+  void __stdcall GLee_Lazy_glBlendEquationSeparateiARB(GLuint  buf, GLenum  modeRGB, GLenum  modeAlpha)  {if (GLeeInit()) glBlendEquationSeparateiARB(buf, modeRGB, modeAlpha);}
+  GLEEPFNGLBLENDEQUATIONSEPARATEIARBPROC GLeeFuncPtr_glBlendEquationSeparateiARB=GLee_Lazy_glBlendEquationSeparateiARB;
+#endif
+#ifndef GLEE_C_DEFINED_glBlendFunciARB
+#define GLEE_C_DEFINED_glBlendFunciARB
+  void __stdcall GLee_Lazy_glBlendFunciARB(GLuint  buf, GLenum  src, GLenum  dst)  {if (GLeeInit()) glBlendFunciARB(buf, src, dst);}
+  GLEEPFNGLBLENDFUNCIARBPROC GLeeFuncPtr_glBlendFunciARB=GLee_Lazy_glBlendFunciARB;
+#endif
+#ifndef GLEE_C_DEFINED_glBlendFuncSeparateiARB
+#define GLEE_C_DEFINED_glBlendFuncSeparateiARB
+  void __stdcall GLee_Lazy_glBlendFuncSeparateiARB(GLuint  buf, GLenum  srcRGB, GLenum  dstRGB, GLenum  srcAlpha, GLenum  dstAlpha)  {if (GLeeInit()) glBlendFuncSeparateiARB(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);}
+  GLEEPFNGLBLENDFUNCSEPARATEIARBPROC GLeeFuncPtr_glBlendFuncSeparateiARB=GLee_Lazy_glBlendFuncSeparateiARB;
+#endif
+#endif 
+
+/* GL_ARB_sample_shading */
+
+#ifdef __GLEE_GL_ARB_sample_shading
+#ifndef GLEE_C_DEFINED_glMinSampleShadingARB
+#define GLEE_C_DEFINED_glMinSampleShadingARB
+  void __stdcall GLee_Lazy_glMinSampleShadingARB(GLclampf  value)  {if (GLeeInit()) glMinSampleShadingARB(value);}
+  GLEEPFNGLMINSAMPLESHADINGARBPROC GLeeFuncPtr_glMinSampleShadingARB=GLee_Lazy_glMinSampleShadingARB;
+#endif
+#endif 
+
+/* GL_ARB_texture_cube_map_array */
+
+#ifdef __GLEE_GL_ARB_texture_cube_map_array
+#endif 
+
+/* GL_ARB_texture_gather */
+
+#ifdef __GLEE_GL_ARB_texture_gather
+#endif 
+
+/* GL_ARB_texture_query_lod */
+
+#ifdef __GLEE_GL_ARB_texture_query_lod
+#endif 
+
+/* GL_ARB_shading_language_include */
+
+#ifdef __GLEE_GL_ARB_shading_language_include
+#ifndef GLEE_C_DEFINED_glNamedStringARB
+#define GLEE_C_DEFINED_glNamedStringARB
+  void __stdcall GLee_Lazy_glNamedStringARB(GLenum  type, GLint  namelen, const GLchar * name, GLint  stringlen, const GLchar * string)  {if (GLeeInit()) glNamedStringARB(type, namelen, name, stringlen, string);}
+  GLEEPFNGLNAMEDSTRINGARBPROC GLeeFuncPtr_glNamedStringARB=GLee_Lazy_glNamedStringARB;
+#endif
+#ifndef GLEE_C_DEFINED_glDeleteNamedStringARB
+#define GLEE_C_DEFINED_glDeleteNamedStringARB
+  void __stdcall GLee_Lazy_glDeleteNamedStringARB(GLint  namelen, const GLchar * name)  {if (GLeeInit()) glDeleteNamedStringARB(namelen, name);}
+  GLEEPFNGLDELETENAMEDSTRINGARBPROC GLeeFuncPtr_glDeleteNamedStringARB=GLee_Lazy_glDeleteNamedStringARB;
+#endif
+#ifndef GLEE_C_DEFINED_glCompileShaderIncludeARB
+#define GLEE_C_DEFINED_glCompileShaderIncludeARB
+  void __stdcall GLee_Lazy_glCompileShaderIncludeARB(GLuint  shader, GLsizei  count, const GLchar* * path, const GLint * length)  {if (GLeeInit()) glCompileShaderIncludeARB(shader, count, path, length);}
+  GLEEPFNGLCOMPILESHADERINCLUDEARBPROC GLeeFuncPtr_glCompileShaderIncludeARB=GLee_Lazy_glCompileShaderIncludeARB;
+#endif
+#ifndef GLEE_C_DEFINED_glIsNamedStringARB
+#define GLEE_C_DEFINED_glIsNamedStringARB
+  GLboolean __stdcall GLee_Lazy_glIsNamedStringARB(GLint  namelen, const GLchar * name)  {if (GLeeInit()) return glIsNamedStringARB(namelen, name); return (GLboolean)0;}
+  GLEEPFNGLISNAMEDSTRINGARBPROC GLeeFuncPtr_glIsNamedStringARB=GLee_Lazy_glIsNamedStringARB;
+#endif
+#ifndef GLEE_C_DEFINED_glGetNamedStringARB
+#define GLEE_C_DEFINED_glGetNamedStringARB
+  void __stdcall GLee_Lazy_glGetNamedStringARB(GLint  namelen, const GLchar * name, GLsizei  bufSize, GLint * stringlen, GLchar * string)  {if (GLeeInit()) glGetNamedStringARB(namelen, name, bufSize, stringlen, string);}
+  GLEEPFNGLGETNAMEDSTRINGARBPROC GLeeFuncPtr_glGetNamedStringARB=GLee_Lazy_glGetNamedStringARB;
+#endif
+#ifndef GLEE_C_DEFINED_glGetNamedStringivARB
+#define GLEE_C_DEFINED_glGetNamedStringivARB
+  void __stdcall GLee_Lazy_glGetNamedStringivARB(GLint  namelen, const GLchar * name, GLenum  pname, GLint * params)  {if (GLeeInit()) glGetNamedStringivARB(namelen, name, pname, params);}
+  GLEEPFNGLGETNAMEDSTRINGIVARBPROC GLeeFuncPtr_glGetNamedStringivARB=GLee_Lazy_glGetNamedStringivARB;
+#endif
+#endif 
+
+/* GL_ARB_texture_compression_bptc */
+
+#ifdef __GLEE_GL_ARB_texture_compression_bptc
+#endif 
+
+/* GL_ARB_blend_func_extended */
+
+#ifdef __GLEE_GL_ARB_blend_func_extended
+#ifndef GLEE_C_DEFINED_glBindFragDataLocationIndexed
+#define GLEE_C_DEFINED_glBindFragDataLocationIndexed
+  void __stdcall GLee_Lazy_glBindFragDataLocationIndexed(GLuint  program, GLuint  colorNumber, GLuint  index, const GLchar * name)  {if (GLeeInit()) glBindFragDataLocationIndexed(program, colorNumber, index, name);}
+  GLEEPFNGLBINDFRAGDATALOCATIONINDEXEDPROC GLeeFuncPtr_glBindFragDataLocationIndexed=GLee_Lazy_glBindFragDataLocationIndexed;
+#endif
+#ifndef GLEE_C_DEFINED_glGetFragDataIndex
+#define GLEE_C_DEFINED_glGetFragDataIndex
+  GLint __stdcall GLee_Lazy_glGetFragDataIndex(GLuint  program, const GLchar * name)  {if (GLeeInit()) return glGetFragDataIndex(program, name); return (GLint)0;}
+  GLEEPFNGLGETFRAGDATAINDEXPROC GLeeFuncPtr_glGetFragDataIndex=GLee_Lazy_glGetFragDataIndex;
+#endif
+#endif 
+
+/* GL_ARB_explicit_attrib_location */
+
+#ifdef __GLEE_GL_ARB_explicit_attrib_location
+#endif 
+
+/* GL_ARB_occlusion_query2 */
+
+#ifdef __GLEE_GL_ARB_occlusion_query2
+#endif 
+
+/* GL_ARB_sampler_objects */
+
+#ifdef __GLEE_GL_ARB_sampler_objects
+#ifndef GLEE_C_DEFINED_glGenSamplers
+#define GLEE_C_DEFINED_glGenSamplers
+  void __stdcall GLee_Lazy_glGenSamplers(GLsizei  count, GLuint * samplers)  {if (GLeeInit()) glGenSamplers(count, samplers);}
+  GLEEPFNGLGENSAMPLERSPROC GLeeFuncPtr_glGenSamplers=GLee_Lazy_glGenSamplers;
+#endif
+#ifndef GLEE_C_DEFINED_glDeleteSamplers
+#define GLEE_C_DEFINED_glDeleteSamplers
+  void __stdcall GLee_Lazy_glDeleteSamplers(GLsizei  count, const GLuint * samplers)  {if (GLeeInit()) glDeleteSamplers(count, samplers);}
+  GLEEPFNGLDELETESAMPLERSPROC GLeeFuncPtr_glDeleteSamplers=GLee_Lazy_glDeleteSamplers;
+#endif
+#ifndef GLEE_C_DEFINED_glIsSampler
+#define GLEE_C_DEFINED_glIsSampler
+  GLboolean __stdcall GLee_Lazy_glIsSampler(GLuint  sampler)  {if (GLeeInit()) return glIsSampler(sampler); return (GLboolean)0;}
+  GLEEPFNGLISSAMPLERPROC GLeeFuncPtr_glIsSampler=GLee_Lazy_glIsSampler;
+#endif
+#ifndef GLEE_C_DEFINED_glBindSampler
+#define GLEE_C_DEFINED_glBindSampler
+  void __stdcall GLee_Lazy_glBindSampler(GLuint  unit, GLuint  sampler)  {if (GLeeInit()) glBindSampler(unit, sampler);}
+  GLEEPFNGLBINDSAMPLERPROC GLeeFuncPtr_glBindSampler=GLee_Lazy_glBindSampler;
+#endif
+#ifndef GLEE_C_DEFINED_glSamplerParameteri
+#define GLEE_C_DEFINED_glSamplerParameteri
+  void __stdcall GLee_Lazy_glSamplerParameteri(GLuint  sampler, GLenum  pname, GLint  param)  {if (GLeeInit()) glSamplerParameteri(sampler, pname, param);}
+  GLEEPFNGLSAMPLERPARAMETERIPROC GLeeFuncPtr_glSamplerParameteri=GLee_Lazy_glSamplerParameteri;
+#endif
+#ifndef GLEE_C_DEFINED_glSamplerParameteriv
+#define GLEE_C_DEFINED_glSamplerParameteriv
+  void __stdcall GLee_Lazy_glSamplerParameteriv(GLuint  sampler, GLenum  pname, const GLint * param)  {if (GLeeInit()) glSamplerParameteriv(sampler, pname, param);}
+  GLEEPFNGLSAMPLERPARAMETERIVPROC GLeeFuncPtr_glSamplerParameteriv=GLee_Lazy_glSamplerParameteriv;
+#endif
+#ifndef GLEE_C_DEFINED_glSamplerParameterf
+#define GLEE_C_DEFINED_glSamplerParameterf
+  void __stdcall GLee_Lazy_glSamplerParameterf(GLuint  sampler, GLenum  pname, GLfloat  param)  {if (GLeeInit()) glSamplerParameterf(sampler, pname, param);}
+  GLEEPFNGLSAMPLERPARAMETERFPROC GLeeFuncPtr_glSamplerParameterf=GLee_Lazy_glSamplerParameterf;
+#endif
+#ifndef GLEE_C_DEFINED_glSamplerParameterfv
+#define GLEE_C_DEFINED_glSamplerParameterfv
+  void __stdcall GLee_Lazy_glSamplerParameterfv(GLuint  sampler, GLenum  pname, const GLfloat * param)  {if (GLeeInit()) glSamplerParameterfv(sampler, pname, param);}
+  GLEEPFNGLSAMPLERPARAMETERFVPROC GLeeFuncPtr_glSamplerParameterfv=GLee_Lazy_glSamplerParameterfv;
+#endif
+#ifndef GLEE_C_DEFINED_glSamplerParameterIiv
+#define GLEE_C_DEFINED_glSamplerParameterIiv
+  void __stdcall GLee_Lazy_glSamplerParameterIiv(GLuint  sampler, GLenum  pname, const GLint * param)  {if (GLeeInit()) glSamplerParameterIiv(sampler, pname, param);}
+  GLEEPFNGLSAMPLERPARAMETERIIVPROC GLeeFuncPtr_glSamplerParameterIiv=GLee_Lazy_glSamplerParameterIiv;
+#endif
+#ifndef GLEE_C_DEFINED_glSamplerParameterIuiv
+#define GLEE_C_DEFINED_glSamplerParameterIuiv
+  void __stdcall GLee_Lazy_glSamplerParameterIuiv(GLuint  sampler, GLenum  pname, const GLuint * param)  {if (GLeeInit()) glSamplerParameterIuiv(sampler, pname, param);}
+  GLEEPFNGLSAMPLERPARAMETERIUIVPROC GLeeFuncPtr_glSamplerParameterIuiv=GLee_Lazy_glSamplerParameterIuiv;
+#endif
+#ifndef GLEE_C_DEFINED_glGetSamplerParameteriv
+#define GLEE_C_DEFINED_glGetSamplerParameteriv
+  void __stdcall GLee_Lazy_glGetSamplerParameteriv(GLuint  sampler, GLenum  pname, GLint * params)  {if (GLeeInit()) glGetSamplerParameteriv(sampler, pname, params);}
+  GLEEPFNGLGETSAMPLERPARAMETERIVPROC GLeeFuncPtr_glGetSamplerParameteriv=GLee_Lazy_glGetSamplerParameteriv;
+#endif
+#ifndef GLEE_C_DEFINED_glGetSamplerParameterIiv
+#define GLEE_C_DEFINED_glGetSamplerParameterIiv
+  void __stdcall GLee_Lazy_glGetSamplerParameterIiv(GLuint  sampler, GLenum  pname, GLint * params)  {if (GLeeInit()) glGetSamplerParameterIiv(sampler, pname, params);}
+  GLEEPFNGLGETSAMPLERPARAMETERIIVPROC GLeeFuncPtr_glGetSamplerParameterIiv=GLee_Lazy_glGetSamplerParameterIiv;
+#endif
+#ifndef GLEE_C_DEFINED_glGetSamplerParameterfv
+#define GLEE_C_DEFINED_glGetSamplerParameterfv
+  void __stdcall GLee_Lazy_glGetSamplerParameterfv(GLuint  sampler, GLenum  pname, GLfloat * params)  {if (GLeeInit()) glGetSamplerParameterfv(sampler, pname, params);}
+  GLEEPFNGLGETSAMPLERPARAMETERFVPROC GLeeFuncPtr_glGetSamplerParameterfv=GLee_Lazy_glGetSamplerParameterfv;
+#endif
+#ifndef GLEE_C_DEFINED_glGetSamplerParameterIuiv
+#define GLEE_C_DEFINED_glGetSamplerParameterIuiv
+  void __stdcall GLee_Lazy_glGetSamplerParameterIuiv(GLuint  sampler, GLenum  pname, GLuint * params)  {if (GLeeInit()) glGetSamplerParameterIuiv(sampler, pname, params);}
+  GLEEPFNGLGETSAMPLERPARAMETERIUIVPROC GLeeFuncPtr_glGetSamplerParameterIuiv=GLee_Lazy_glGetSamplerParameterIuiv;
+#endif
+#endif 
+
+/* GL_ARB_shader_bit_encoding */
+
+#ifdef __GLEE_GL_ARB_shader_bit_encoding
+#endif 
+
+/* GL_ARB_texture_rgb10_a2ui */
+
+#ifdef __GLEE_GL_ARB_texture_rgb10_a2ui
+#endif 
+
+/* GL_ARB_texture_swizzle */
+
+#ifdef __GLEE_GL_ARB_texture_swizzle
+#endif 
+
+/* GL_ARB_timer_query */
+
+#ifdef __GLEE_GL_ARB_timer_query
+#ifndef GLEE_C_DEFINED_glQueryCounter
+#define GLEE_C_DEFINED_glQueryCounter
+  void __stdcall GLee_Lazy_glQueryCounter(GLuint  id, GLenum  target)  {if (GLeeInit()) glQueryCounter(id, target);}
+  GLEEPFNGLQUERYCOUNTERPROC GLeeFuncPtr_glQueryCounter=GLee_Lazy_glQueryCounter;
+#endif
+#ifndef GLEE_C_DEFINED_glGetQueryObjecti64v
+#define GLEE_C_DEFINED_glGetQueryObjecti64v
+  void __stdcall GLee_Lazy_glGetQueryObjecti64v(GLuint  id, GLenum  pname, GLint64 * params)  {if (GLeeInit()) glGetQueryObjecti64v(id, pname, params);}
+  GLEEPFNGLGETQUERYOBJECTI64VPROC GLeeFuncPtr_glGetQueryObjecti64v=GLee_Lazy_glGetQueryObjecti64v;
+#endif
+#ifndef GLEE_C_DEFINED_glGetQueryObjectui64v
+#define GLEE_C_DEFINED_glGetQueryObjectui64v
+  void __stdcall GLee_Lazy_glGetQueryObjectui64v(GLuint  id, GLenum  pname, GLuint64 * params)  {if (GLeeInit()) glGetQueryObjectui64v(id, pname, params);}
+  GLEEPFNGLGETQUERYOBJECTUI64VPROC GLeeFuncPtr_glGetQueryObjectui64v=GLee_Lazy_glGetQueryObjectui64v;
+#endif
+#endif 
+
+/* GL_ARB_vertex_type_2_10_10_10_rev */
+
+#ifdef __GLEE_GL_ARB_vertex_type_2_10_10_10_rev
+#ifndef GLEE_C_DEFINED_glVertexP2ui
+#define GLEE_C_DEFINED_glVertexP2ui
+  void __stdcall GLee_Lazy_glVertexP2ui(GLenum  type, GLuint  value)  {if (GLeeInit()) glVertexP2ui(type, value);}
+  GLEEPFNGLVERTEXP2UIPROC GLeeFuncPtr_glVertexP2ui=GLee_Lazy_glVertexP2ui;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexP2uiv
+#define GLEE_C_DEFINED_glVertexP2uiv
+  void __stdcall GLee_Lazy_glVertexP2uiv(GLenum  type, const GLuint * value)  {if (GLeeInit()) glVertexP2uiv(type, value);}
+  GLEEPFNGLVERTEXP2UIVPROC GLeeFuncPtr_glVertexP2uiv=GLee_Lazy_glVertexP2uiv;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexP3ui
+#define GLEE_C_DEFINED_glVertexP3ui
+  void __stdcall GLee_Lazy_glVertexP3ui(GLenum  type, GLuint  value)  {if (GLeeInit()) glVertexP3ui(type, value);}
+  GLEEPFNGLVERTEXP3UIPROC GLeeFuncPtr_glVertexP3ui=GLee_Lazy_glVertexP3ui;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexP3uiv
+#define GLEE_C_DEFINED_glVertexP3uiv
+  void __stdcall GLee_Lazy_glVertexP3uiv(GLenum  type, const GLuint * value)  {if (GLeeInit()) glVertexP3uiv(type, value);}
+  GLEEPFNGLVERTEXP3UIVPROC GLeeFuncPtr_glVertexP3uiv=GLee_Lazy_glVertexP3uiv;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexP4ui
+#define GLEE_C_DEFINED_glVertexP4ui
+  void __stdcall GLee_Lazy_glVertexP4ui(GLenum  type, GLuint  value)  {if (GLeeInit()) glVertexP4ui(type, value);}
+  GLEEPFNGLVERTEXP4UIPROC GLeeFuncPtr_glVertexP4ui=GLee_Lazy_glVertexP4ui;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexP4uiv
+#define GLEE_C_DEFINED_glVertexP4uiv
+  void __stdcall GLee_Lazy_glVertexP4uiv(GLenum  type, const GLuint * value)  {if (GLeeInit()) glVertexP4uiv(type, value);}
+  GLEEPFNGLVERTEXP4UIVPROC GLeeFuncPtr_glVertexP4uiv=GLee_Lazy_glVertexP4uiv;
+#endif
+#ifndef GLEE_C_DEFINED_glTexCoordP1ui
+#define GLEE_C_DEFINED_glTexCoordP1ui
+  void __stdcall GLee_Lazy_glTexCoordP1ui(GLenum  type, GLuint  coords)  {if (GLeeInit()) glTexCoordP1ui(type, coords);}
+  GLEEPFNGLTEXCOORDP1UIPROC GLeeFuncPtr_glTexCoordP1ui=GLee_Lazy_glTexCoordP1ui;
+#endif
+#ifndef GLEE_C_DEFINED_glTexCoordP1uiv
+#define GLEE_C_DEFINED_glTexCoordP1uiv
+  void __stdcall GLee_Lazy_glTexCoordP1uiv(GLenum  type, const GLuint * coords)  {if (GLeeInit()) glTexCoordP1uiv(type, coords);}
+  GLEEPFNGLTEXCOORDP1UIVPROC GLeeFuncPtr_glTexCoordP1uiv=GLee_Lazy_glTexCoordP1uiv;
+#endif
+#ifndef GLEE_C_DEFINED_glTexCoordP2ui
+#define GLEE_C_DEFINED_glTexCoordP2ui
+  void __stdcall GLee_Lazy_glTexCoordP2ui(GLenum  type, GLuint  coords)  {if (GLeeInit()) glTexCoordP2ui(type, coords);}
+  GLEEPFNGLTEXCOORDP2UIPROC GLeeFuncPtr_glTexCoordP2ui=GLee_Lazy_glTexCoordP2ui;
+#endif
+#ifndef GLEE_C_DEFINED_glTexCoordP2uiv
+#define GLEE_C_DEFINED_glTexCoordP2uiv
+  void __stdcall GLee_Lazy_glTexCoordP2uiv(GLenum  type, const GLuint * coords)  {if (GLeeInit()) glTexCoordP2uiv(type, coords);}
+  GLEEPFNGLTEXCOORDP2UIVPROC GLeeFuncPtr_glTexCoordP2uiv=GLee_Lazy_glTexCoordP2uiv;
+#endif
+#ifndef GLEE_C_DEFINED_glTexCoordP3ui
+#define GLEE_C_DEFINED_glTexCoordP3ui
+  void __stdcall GLee_Lazy_glTexCoordP3ui(GLenum  type, GLuint  coords)  {if (GLeeInit()) glTexCoordP3ui(type, coords);}
+  GLEEPFNGLTEXCOORDP3UIPROC GLeeFuncPtr_glTexCoordP3ui=GLee_Lazy_glTexCoordP3ui;
+#endif
+#ifndef GLEE_C_DEFINED_glTexCoordP3uiv
+#define GLEE_C_DEFINED_glTexCoordP3uiv
+  void __stdcall GLee_Lazy_glTexCoordP3uiv(GLenum  type, const GLuint * coords)  {if (GLeeInit()) glTexCoordP3uiv(type, coords);}
+  GLEEPFNGLTEXCOORDP3UIVPROC GLeeFuncPtr_glTexCoordP3uiv=GLee_Lazy_glTexCoordP3uiv;
+#endif
+#ifndef GLEE_C_DEFINED_glTexCoordP4ui
+#define GLEE_C_DEFINED_glTexCoordP4ui
+  void __stdcall GLee_Lazy_glTexCoordP4ui(GLenum  type, GLuint  coords)  {if (GLeeInit()) glTexCoordP4ui(type, coords);}
+  GLEEPFNGLTEXCOORDP4UIPROC GLeeFuncPtr_glTexCoordP4ui=GLee_Lazy_glTexCoordP4ui;
+#endif
+#ifndef GLEE_C_DEFINED_glTexCoordP4uiv
+#define GLEE_C_DEFINED_glTexCoordP4uiv
+  void __stdcall GLee_Lazy_glTexCoordP4uiv(GLenum  type, const GLuint * coords)  {if (GLeeInit()) glTexCoordP4uiv(type, coords);}
+  GLEEPFNGLTEXCOORDP4UIVPROC GLeeFuncPtr_glTexCoordP4uiv=GLee_Lazy_glTexCoordP4uiv;
+#endif
+#ifndef GLEE_C_DEFINED_glMultiTexCoordP1ui
+#define GLEE_C_DEFINED_glMultiTexCoordP1ui
+  void __stdcall GLee_Lazy_glMultiTexCoordP1ui(GLenum  texture, GLenum  type, GLuint  coords)  {if (GLeeInit()) glMultiTexCoordP1ui(texture, type, coords);}
+  GLEEPFNGLMULTITEXCOORDP1UIPROC GLeeFuncPtr_glMultiTexCoordP1ui=GLee_Lazy_glMultiTexCoordP1ui;
+#endif
+#ifndef GLEE_C_DEFINED_glMultiTexCoordP1uiv
+#define GLEE_C_DEFINED_glMultiTexCoordP1uiv
+  void __stdcall GLee_Lazy_glMultiTexCoordP1uiv(GLenum  texture, GLenum  type, const GLuint * coords)  {if (GLeeInit()) glMultiTexCoordP1uiv(texture, type, coords);}
+  GLEEPFNGLMULTITEXCOORDP1UIVPROC GLeeFuncPtr_glMultiTexCoordP1uiv=GLee_Lazy_glMultiTexCoordP1uiv;
+#endif
+#ifndef GLEE_C_DEFINED_glMultiTexCoordP2ui
+#define GLEE_C_DEFINED_glMultiTexCoordP2ui
+  void __stdcall GLee_Lazy_glMultiTexCoordP2ui(GLenum  texture, GLenum  type, GLuint  coords)  {if (GLeeInit()) glMultiTexCoordP2ui(texture, type, coords);}
+  GLEEPFNGLMULTITEXCOORDP2UIPROC GLeeFuncPtr_glMultiTexCoordP2ui=GLee_Lazy_glMultiTexCoordP2ui;
+#endif
+#ifndef GLEE_C_DEFINED_glMultiTexCoordP2uiv
+#define GLEE_C_DEFINED_glMultiTexCoordP2uiv
+  void __stdcall GLee_Lazy_glMultiTexCoordP2uiv(GLenum  texture, GLenum  type, const GLuint * coords)  {if (GLeeInit()) glMultiTexCoordP2uiv(texture, type, coords);}
+  GLEEPFNGLMULTITEXCOORDP2UIVPROC GLeeFuncPtr_glMultiTexCoordP2uiv=GLee_Lazy_glMultiTexCoordP2uiv;
+#endif
+#ifndef GLEE_C_DEFINED_glMultiTexCoordP3ui
+#define GLEE_C_DEFINED_glMultiTexCoordP3ui
+  void __stdcall GLee_Lazy_glMultiTexCoordP3ui(GLenum  texture, GLenum  type, GLuint  coords)  {if (GLeeInit()) glMultiTexCoordP3ui(texture, type, coords);}
+  GLEEPFNGLMULTITEXCOORDP3UIPROC GLeeFuncPtr_glMultiTexCoordP3ui=GLee_Lazy_glMultiTexCoordP3ui;
+#endif
+#ifndef GLEE_C_DEFINED_glMultiTexCoordP3uiv
+#define GLEE_C_DEFINED_glMultiTexCoordP3uiv
+  void __stdcall GLee_Lazy_glMultiTexCoordP3uiv(GLenum  texture, GLenum  type, const GLuint * coords)  {if (GLeeInit()) glMultiTexCoordP3uiv(texture, type, coords);}
+  GLEEPFNGLMULTITEXCOORDP3UIVPROC GLeeFuncPtr_glMultiTexCoordP3uiv=GLee_Lazy_glMultiTexCoordP3uiv;
+#endif
+#ifndef GLEE_C_DEFINED_glMultiTexCoordP4ui
+#define GLEE_C_DEFINED_glMultiTexCoordP4ui
+  void __stdcall GLee_Lazy_glMultiTexCoordP4ui(GLenum  texture, GLenum  type, GLuint  coords)  {if (GLeeInit()) glMultiTexCoordP4ui(texture, type, coords);}
+  GLEEPFNGLMULTITEXCOORDP4UIPROC GLeeFuncPtr_glMultiTexCoordP4ui=GLee_Lazy_glMultiTexCoordP4ui;
+#endif
+#ifndef GLEE_C_DEFINED_glMultiTexCoordP4uiv
+#define GLEE_C_DEFINED_glMultiTexCoordP4uiv
+  void __stdcall GLee_Lazy_glMultiTexCoordP4uiv(GLenum  texture, GLenum  type, const GLuint * coords)  {if (GLeeInit()) glMultiTexCoordP4uiv(texture, type, coords);}
+  GLEEPFNGLMULTITEXCOORDP4UIVPROC GLeeFuncPtr_glMultiTexCoordP4uiv=GLee_Lazy_glMultiTexCoordP4uiv;
+#endif
+#ifndef GLEE_C_DEFINED_glNormalP3ui
+#define GLEE_C_DEFINED_glNormalP3ui
+  void __stdcall GLee_Lazy_glNormalP3ui(GLenum  type, GLuint  coords)  {if (GLeeInit()) glNormalP3ui(type, coords);}
+  GLEEPFNGLNORMALP3UIPROC GLeeFuncPtr_glNormalP3ui=GLee_Lazy_glNormalP3ui;
+#endif
+#ifndef GLEE_C_DEFINED_glNormalP3uiv
+#define GLEE_C_DEFINED_glNormalP3uiv
+  void __stdcall GLee_Lazy_glNormalP3uiv(GLenum  type, const GLuint * coords)  {if (GLeeInit()) glNormalP3uiv(type, coords);}
+  GLEEPFNGLNORMALP3UIVPROC GLeeFuncPtr_glNormalP3uiv=GLee_Lazy_glNormalP3uiv;
+#endif
+#ifndef GLEE_C_DEFINED_glColorP3ui
+#define GLEE_C_DEFINED_glColorP3ui
+  void __stdcall GLee_Lazy_glColorP3ui(GLenum  type, GLuint  color)  {if (GLeeInit()) glColorP3ui(type, color);}
+  GLEEPFNGLCOLORP3UIPROC GLeeFuncPtr_glColorP3ui=GLee_Lazy_glColorP3ui;
+#endif
+#ifndef GLEE_C_DEFINED_glColorP3uiv
+#define GLEE_C_DEFINED_glColorP3uiv
+  void __stdcall GLee_Lazy_glColorP3uiv(GLenum  type, const GLuint * color)  {if (GLeeInit()) glColorP3uiv(type, color);}
+  GLEEPFNGLCOLORP3UIVPROC GLeeFuncPtr_glColorP3uiv=GLee_Lazy_glColorP3uiv;
+#endif
+#ifndef GLEE_C_DEFINED_glColorP4ui
+#define GLEE_C_DEFINED_glColorP4ui
+  void __stdcall GLee_Lazy_glColorP4ui(GLenum  type, GLuint  color)  {if (GLeeInit()) glColorP4ui(type, color);}
+  GLEEPFNGLCOLORP4UIPROC GLeeFuncPtr_glColorP4ui=GLee_Lazy_glColorP4ui;
+#endif
+#ifndef GLEE_C_DEFINED_glColorP4uiv
+#define GLEE_C_DEFINED_glColorP4uiv
+  void __stdcall GLee_Lazy_glColorP4uiv(GLenum  type, const GLuint * color)  {if (GLeeInit()) glColorP4uiv(type, color);}
+  GLEEPFNGLCOLORP4UIVPROC GLeeFuncPtr_glColorP4uiv=GLee_Lazy_glColorP4uiv;
+#endif
+#ifndef GLEE_C_DEFINED_glSecondaryColorP3ui
+#define GLEE_C_DEFINED_glSecondaryColorP3ui
+  void __stdcall GLee_Lazy_glSecondaryColorP3ui(GLenum  type, GLuint  color)  {if (GLeeInit()) glSecondaryColorP3ui(type, color);}
+  GLEEPFNGLSECONDARYCOLORP3UIPROC GLeeFuncPtr_glSecondaryColorP3ui=GLee_Lazy_glSecondaryColorP3ui;
+#endif
+#ifndef GLEE_C_DEFINED_glSecondaryColorP3uiv
+#define GLEE_C_DEFINED_glSecondaryColorP3uiv
+  void __stdcall GLee_Lazy_glSecondaryColorP3uiv(GLenum  type, const GLuint * color)  {if (GLeeInit()) glSecondaryColorP3uiv(type, color);}
+  GLEEPFNGLSECONDARYCOLORP3UIVPROC GLeeFuncPtr_glSecondaryColorP3uiv=GLee_Lazy_glSecondaryColorP3uiv;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttribP1ui
+#define GLEE_C_DEFINED_glVertexAttribP1ui
+  void __stdcall GLee_Lazy_glVertexAttribP1ui(GLuint  index, GLenum  type, GLboolean  normalized, GLuint  value)  {if (GLeeInit()) glVertexAttribP1ui(index, type, normalized, value);}
+  GLEEPFNGLVERTEXATTRIBP1UIPROC GLeeFuncPtr_glVertexAttribP1ui=GLee_Lazy_glVertexAttribP1ui;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttribP1uiv
+#define GLEE_C_DEFINED_glVertexAttribP1uiv
+  void __stdcall GLee_Lazy_glVertexAttribP1uiv(GLuint  index, GLenum  type, GLboolean  normalized, const GLuint * value)  {if (GLeeInit()) glVertexAttribP1uiv(index, type, normalized, value);}
+  GLEEPFNGLVERTEXATTRIBP1UIVPROC GLeeFuncPtr_glVertexAttribP1uiv=GLee_Lazy_glVertexAttribP1uiv;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttribP2ui
+#define GLEE_C_DEFINED_glVertexAttribP2ui
+  void __stdcall GLee_Lazy_glVertexAttribP2ui(GLuint  index, GLenum  type, GLboolean  normalized, GLuint  value)  {if (GLeeInit()) glVertexAttribP2ui(index, type, normalized, value);}
+  GLEEPFNGLVERTEXATTRIBP2UIPROC GLeeFuncPtr_glVertexAttribP2ui=GLee_Lazy_glVertexAttribP2ui;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttribP2uiv
+#define GLEE_C_DEFINED_glVertexAttribP2uiv
+  void __stdcall GLee_Lazy_glVertexAttribP2uiv(GLuint  index, GLenum  type, GLboolean  normalized, const GLuint * value)  {if (GLeeInit()) glVertexAttribP2uiv(index, type, normalized, value);}
+  GLEEPFNGLVERTEXATTRIBP2UIVPROC GLeeFuncPtr_glVertexAttribP2uiv=GLee_Lazy_glVertexAttribP2uiv;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttribP3ui
+#define GLEE_C_DEFINED_glVertexAttribP3ui
+  void __stdcall GLee_Lazy_glVertexAttribP3ui(GLuint  index, GLenum  type, GLboolean  normalized, GLuint  value)  {if (GLeeInit()) glVertexAttribP3ui(index, type, normalized, value);}
+  GLEEPFNGLVERTEXATTRIBP3UIPROC GLeeFuncPtr_glVertexAttribP3ui=GLee_Lazy_glVertexAttribP3ui;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttribP3uiv
+#define GLEE_C_DEFINED_glVertexAttribP3uiv
+  void __stdcall GLee_Lazy_glVertexAttribP3uiv(GLuint  index, GLenum  type, GLboolean  normalized, const GLuint * value)  {if (GLeeInit()) glVertexAttribP3uiv(index, type, normalized, value);}
+  GLEEPFNGLVERTEXATTRIBP3UIVPROC GLeeFuncPtr_glVertexAttribP3uiv=GLee_Lazy_glVertexAttribP3uiv;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttribP4ui
+#define GLEE_C_DEFINED_glVertexAttribP4ui
+  void __stdcall GLee_Lazy_glVertexAttribP4ui(GLuint  index, GLenum  type, GLboolean  normalized, GLuint  value)  {if (GLeeInit()) glVertexAttribP4ui(index, type, normalized, value);}
+  GLEEPFNGLVERTEXATTRIBP4UIPROC GLeeFuncPtr_glVertexAttribP4ui=GLee_Lazy_glVertexAttribP4ui;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttribP4uiv
+#define GLEE_C_DEFINED_glVertexAttribP4uiv
+  void __stdcall GLee_Lazy_glVertexAttribP4uiv(GLuint  index, GLenum  type, GLboolean  normalized, const GLuint * value)  {if (GLeeInit()) glVertexAttribP4uiv(index, type, normalized, value);}
+  GLEEPFNGLVERTEXATTRIBP4UIVPROC GLeeFuncPtr_glVertexAttribP4uiv=GLee_Lazy_glVertexAttribP4uiv;
+#endif
+#endif 
+
+/* GL_ARB_draw_indirect */
+
+#ifdef __GLEE_GL_ARB_draw_indirect
+#ifndef GLEE_C_DEFINED_glDrawArraysIndirect
+#define GLEE_C_DEFINED_glDrawArraysIndirect
+  void __stdcall GLee_Lazy_glDrawArraysIndirect(GLenum  mode, const GLvoid * indirect)  {if (GLeeInit()) glDrawArraysIndirect(mode, indirect);}
+  GLEEPFNGLDRAWARRAYSINDIRECTPROC GLeeFuncPtr_glDrawArraysIndirect=GLee_Lazy_glDrawArraysIndirect;
+#endif
+#ifndef GLEE_C_DEFINED_glDrawElementsIndirect
+#define GLEE_C_DEFINED_glDrawElementsIndirect
+  void __stdcall GLee_Lazy_glDrawElementsIndirect(GLenum  mode, GLenum  type, const GLvoid * indirect)  {if (GLeeInit()) glDrawElementsIndirect(mode, type, indirect);}
+  GLEEPFNGLDRAWELEMENTSINDIRECTPROC GLeeFuncPtr_glDrawElementsIndirect=GLee_Lazy_glDrawElementsIndirect;
+#endif
+#endif 
+
+/* GL_ARB_gpu_shader5 */
+
+#ifdef __GLEE_GL_ARB_gpu_shader5
+#endif 
+
+/* GL_ARB_gpu_shader_fp64 */
+
+#ifdef __GLEE_GL_ARB_gpu_shader_fp64
+#ifndef GLEE_C_DEFINED_glUniform1d
+#define GLEE_C_DEFINED_glUniform1d
+  void __stdcall GLee_Lazy_glUniform1d(GLint  location, GLdouble  x)  {if (GLeeInit()) glUniform1d(location, x);}
+  GLEEPFNGLUNIFORM1DPROC GLeeFuncPtr_glUniform1d=GLee_Lazy_glUniform1d;
+#endif
+#ifndef GLEE_C_DEFINED_glUniform2d
+#define GLEE_C_DEFINED_glUniform2d
+  void __stdcall GLee_Lazy_glUniform2d(GLint  location, GLdouble  x, GLdouble  y)  {if (GLeeInit()) glUniform2d(location, x, y);}
+  GLEEPFNGLUNIFORM2DPROC GLeeFuncPtr_glUniform2d=GLee_Lazy_glUniform2d;
+#endif
+#ifndef GLEE_C_DEFINED_glUniform3d
+#define GLEE_C_DEFINED_glUniform3d
+  void __stdcall GLee_Lazy_glUniform3d(GLint  location, GLdouble  x, GLdouble  y, GLdouble  z)  {if (GLeeInit()) glUniform3d(location, x, y, z);}
+  GLEEPFNGLUNIFORM3DPROC GLeeFuncPtr_glUniform3d=GLee_Lazy_glUniform3d;
+#endif
+#ifndef GLEE_C_DEFINED_glUniform4d
+#define GLEE_C_DEFINED_glUniform4d
+  void __stdcall GLee_Lazy_glUniform4d(GLint  location, GLdouble  x, GLdouble  y, GLdouble  z, GLdouble  w)  {if (GLeeInit()) glUniform4d(location, x, y, z, w);}
+  GLEEPFNGLUNIFORM4DPROC GLeeFuncPtr_glUniform4d=GLee_Lazy_glUniform4d;
+#endif
+#ifndef GLEE_C_DEFINED_glUniform1dv
+#define GLEE_C_DEFINED_glUniform1dv
+  void __stdcall GLee_Lazy_glUniform1dv(GLint  location, GLsizei  count, const GLdouble * value)  {if (GLeeInit()) glUniform1dv(location, count, value);}
+  GLEEPFNGLUNIFORM1DVPROC GLeeFuncPtr_glUniform1dv=GLee_Lazy_glUniform1dv;
+#endif
+#ifndef GLEE_C_DEFINED_glUniform2dv
+#define GLEE_C_DEFINED_glUniform2dv
+  void __stdcall GLee_Lazy_glUniform2dv(GLint  location, GLsizei  count, const GLdouble * value)  {if (GLeeInit()) glUniform2dv(location, count, value);}
+  GLEEPFNGLUNIFORM2DVPROC GLeeFuncPtr_glUniform2dv=GLee_Lazy_glUniform2dv;
+#endif
+#ifndef GLEE_C_DEFINED_glUniform3dv
+#define GLEE_C_DEFINED_glUniform3dv
+  void __stdcall GLee_Lazy_glUniform3dv(GLint  location, GLsizei  count, const GLdouble * value)  {if (GLeeInit()) glUniform3dv(location, count, value);}
+  GLEEPFNGLUNIFORM3DVPROC GLeeFuncPtr_glUniform3dv=GLee_Lazy_glUniform3dv;
+#endif
+#ifndef GLEE_C_DEFINED_glUniform4dv
+#define GLEE_C_DEFINED_glUniform4dv
+  void __stdcall GLee_Lazy_glUniform4dv(GLint  location, GLsizei  count, const GLdouble * value)  {if (GLeeInit()) glUniform4dv(location, count, value);}
+  GLEEPFNGLUNIFORM4DVPROC GLeeFuncPtr_glUniform4dv=GLee_Lazy_glUniform4dv;
+#endif
+#ifndef GLEE_C_DEFINED_glUniformMatrix2dv
+#define GLEE_C_DEFINED_glUniformMatrix2dv
+  void __stdcall GLee_Lazy_glUniformMatrix2dv(GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value)  {if (GLeeInit()) glUniformMatrix2dv(location, count, transpose, value);}
+  GLEEPFNGLUNIFORMMATRIX2DVPROC GLeeFuncPtr_glUniformMatrix2dv=GLee_Lazy_glUniformMatrix2dv;
+#endif
+#ifndef GLEE_C_DEFINED_glUniformMatrix3dv
+#define GLEE_C_DEFINED_glUniformMatrix3dv
+  void __stdcall GLee_Lazy_glUniformMatrix3dv(GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value)  {if (GLeeInit()) glUniformMatrix3dv(location, count, transpose, value);}
+  GLEEPFNGLUNIFORMMATRIX3DVPROC GLeeFuncPtr_glUniformMatrix3dv=GLee_Lazy_glUniformMatrix3dv;
+#endif
+#ifndef GLEE_C_DEFINED_glUniformMatrix4dv
+#define GLEE_C_DEFINED_glUniformMatrix4dv
+  void __stdcall GLee_Lazy_glUniformMatrix4dv(GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value)  {if (GLeeInit()) glUniformMatrix4dv(location, count, transpose, value);}
+  GLEEPFNGLUNIFORMMATRIX4DVPROC GLeeFuncPtr_glUniformMatrix4dv=GLee_Lazy_glUniformMatrix4dv;
+#endif
+#ifndef GLEE_C_DEFINED_glUniformMatrix2x3dv
+#define GLEE_C_DEFINED_glUniformMatrix2x3dv
+  void __stdcall GLee_Lazy_glUniformMatrix2x3dv(GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value)  {if (GLeeInit()) glUniformMatrix2x3dv(location, count, transpose, value);}
+  GLEEPFNGLUNIFORMMATRIX2X3DVPROC GLeeFuncPtr_glUniformMatrix2x3dv=GLee_Lazy_glUniformMatrix2x3dv;
+#endif
+#ifndef GLEE_C_DEFINED_glUniformMatrix2x4dv
+#define GLEE_C_DEFINED_glUniformMatrix2x4dv
+  void __stdcall GLee_Lazy_glUniformMatrix2x4dv(GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value)  {if (GLeeInit()) glUniformMatrix2x4dv(location, count, transpose, value);}
+  GLEEPFNGLUNIFORMMATRIX2X4DVPROC GLeeFuncPtr_glUniformMatrix2x4dv=GLee_Lazy_glUniformMatrix2x4dv;
+#endif
+#ifndef GLEE_C_DEFINED_glUniformMatrix3x2dv
+#define GLEE_C_DEFINED_glUniformMatrix3x2dv
+  void __stdcall GLee_Lazy_glUniformMatrix3x2dv(GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value)  {if (GLeeInit()) glUniformMatrix3x2dv(location, count, transpose, value);}
+  GLEEPFNGLUNIFORMMATRIX3X2DVPROC GLeeFuncPtr_glUniformMatrix3x2dv=GLee_Lazy_glUniformMatrix3x2dv;
+#endif
+#ifndef GLEE_C_DEFINED_glUniformMatrix3x4dv
+#define GLEE_C_DEFINED_glUniformMatrix3x4dv
+  void __stdcall GLee_Lazy_glUniformMatrix3x4dv(GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value)  {if (GLeeInit()) glUniformMatrix3x4dv(location, count, transpose, value);}
+  GLEEPFNGLUNIFORMMATRIX3X4DVPROC GLeeFuncPtr_glUniformMatrix3x4dv=GLee_Lazy_glUniformMatrix3x4dv;
+#endif
+#ifndef GLEE_C_DEFINED_glUniformMatrix4x2dv
+#define GLEE_C_DEFINED_glUniformMatrix4x2dv
+  void __stdcall GLee_Lazy_glUniformMatrix4x2dv(GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value)  {if (GLeeInit()) glUniformMatrix4x2dv(location, count, transpose, value);}
+  GLEEPFNGLUNIFORMMATRIX4X2DVPROC GLeeFuncPtr_glUniformMatrix4x2dv=GLee_Lazy_glUniformMatrix4x2dv;
+#endif
+#ifndef GLEE_C_DEFINED_glUniformMatrix4x3dv
+#define GLEE_C_DEFINED_glUniformMatrix4x3dv
+  void __stdcall GLee_Lazy_glUniformMatrix4x3dv(GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value)  {if (GLeeInit()) glUniformMatrix4x3dv(location, count, transpose, value);}
+  GLEEPFNGLUNIFORMMATRIX4X3DVPROC GLeeFuncPtr_glUniformMatrix4x3dv=GLee_Lazy_glUniformMatrix4x3dv;
+#endif
+#ifndef GLEE_C_DEFINED_glGetUniformdv
+#define GLEE_C_DEFINED_glGetUniformdv
+  void __stdcall GLee_Lazy_glGetUniformdv(GLuint  program, GLint  location, GLdouble * params)  {if (GLeeInit()) glGetUniformdv(program, location, params);}
+  GLEEPFNGLGETUNIFORMDVPROC GLeeFuncPtr_glGetUniformdv=GLee_Lazy_glGetUniformdv;
+#endif
+#endif 
+
+/* GL_ARB_shader_subroutine */
+
+#ifdef __GLEE_GL_ARB_shader_subroutine
+#ifndef GLEE_C_DEFINED_glGetSubroutineUniformLocation
+#define GLEE_C_DEFINED_glGetSubroutineUniformLocation
+  GLint __stdcall GLee_Lazy_glGetSubroutineUniformLocation(GLuint  program, GLenum  shadertype, const GLchar * name)  {if (GLeeInit()) return glGetSubroutineUniformLocation(program, shadertype, name); return (GLint)0;}
+  GLEEPFNGLGETSUBROUTINEUNIFORMLOCATIONPROC GLeeFuncPtr_glGetSubroutineUniformLocation=GLee_Lazy_glGetSubroutineUniformLocation;
+#endif
+#ifndef GLEE_C_DEFINED_glGetSubroutineIndex
+#define GLEE_C_DEFINED_glGetSubroutineIndex
+  GLuint __stdcall GLee_Lazy_glGetSubroutineIndex(GLuint  program, GLenum  shadertype, const GLchar * name)  {if (GLeeInit()) return glGetSubroutineIndex(program, shadertype, name); return (GLuint)0;}
+  GLEEPFNGLGETSUBROUTINEINDEXPROC GLeeFuncPtr_glGetSubroutineIndex=GLee_Lazy_glGetSubroutineIndex;
+#endif
+#ifndef GLEE_C_DEFINED_glGetActiveSubroutineUniformiv
+#define GLEE_C_DEFINED_glGetActiveSubroutineUniformiv
+  void __stdcall GLee_Lazy_glGetActiveSubroutineUniformiv(GLuint  program, GLenum  shadertype, GLuint  index, GLenum  pname, GLint * values)  {if (GLeeInit()) glGetActiveSubroutineUniformiv(program, shadertype, index, pname, values);}
+  GLEEPFNGLGETACTIVESUBROUTINEUNIFORMIVPROC GLeeFuncPtr_glGetActiveSubroutineUniformiv=GLee_Lazy_glGetActiveSubroutineUniformiv;
+#endif
+#ifndef GLEE_C_DEFINED_glGetActiveSubroutineUniformName
+#define GLEE_C_DEFINED_glGetActiveSubroutineUniformName
+  void __stdcall GLee_Lazy_glGetActiveSubroutineUniformName(GLuint  program, GLenum  shadertype, GLuint  index, GLsizei  bufsize, GLsizei * length, GLchar * name)  {if (GLeeInit()) glGetActiveSubroutineUniformName(program, shadertype, index, bufsize, length, name);}
+  GLEEPFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC GLeeFuncPtr_glGetActiveSubroutineUniformName=GLee_Lazy_glGetActiveSubroutineUniformName;
+#endif
+#ifndef GLEE_C_DEFINED_glGetActiveSubroutineName
+#define GLEE_C_DEFINED_glGetActiveSubroutineName
+  void __stdcall GLee_Lazy_glGetActiveSubroutineName(GLuint  program, GLenum  shadertype, GLuint  index, GLsizei  bufsize, GLsizei * length, GLchar * name)  {if (GLeeInit()) glGetActiveSubroutineName(program, shadertype, index, bufsize, length, name);}
+  GLEEPFNGLGETACTIVESUBROUTINENAMEPROC GLeeFuncPtr_glGetActiveSubroutineName=GLee_Lazy_glGetActiveSubroutineName;
+#endif
+#ifndef GLEE_C_DEFINED_glUniformSubroutinesuiv
+#define GLEE_C_DEFINED_glUniformSubroutinesuiv
+  void __stdcall GLee_Lazy_glUniformSubroutinesuiv(GLenum  shadertype, GLsizei  count, const GLuint * indices)  {if (GLeeInit()) glUniformSubroutinesuiv(shadertype, count, indices);}
+  GLEEPFNGLUNIFORMSUBROUTINESUIVPROC GLeeFuncPtr_glUniformSubroutinesuiv=GLee_Lazy_glUniformSubroutinesuiv;
+#endif
+#ifndef GLEE_C_DEFINED_glGetUniformSubroutineuiv
+#define GLEE_C_DEFINED_glGetUniformSubroutineuiv
+  void __stdcall GLee_Lazy_glGetUniformSubroutineuiv(GLenum  shadertype, GLint  location, GLuint * params)  {if (GLeeInit()) glGetUniformSubroutineuiv(shadertype, location, params);}
+  GLEEPFNGLGETUNIFORMSUBROUTINEUIVPROC GLeeFuncPtr_glGetUniformSubroutineuiv=GLee_Lazy_glGetUniformSubroutineuiv;
+#endif
+#ifndef GLEE_C_DEFINED_glGetProgramStageiv
+#define GLEE_C_DEFINED_glGetProgramStageiv
+  void __stdcall GLee_Lazy_glGetProgramStageiv(GLuint  program, GLenum  shadertype, GLenum  pname, GLint * values)  {if (GLeeInit()) glGetProgramStageiv(program, shadertype, pname, values);}
+  GLEEPFNGLGETPROGRAMSTAGEIVPROC GLeeFuncPtr_glGetProgramStageiv=GLee_Lazy_glGetProgramStageiv;
+#endif
+#endif 
+
+/* GL_ARB_tessellation_shader */
+
+#ifdef __GLEE_GL_ARB_tessellation_shader
+#ifndef GLEE_C_DEFINED_glPatchParameteri
+#define GLEE_C_DEFINED_glPatchParameteri
+  void __stdcall GLee_Lazy_glPatchParameteri(GLenum  pname, GLint  value)  {if (GLeeInit()) glPatchParameteri(pname, value);}
+  GLEEPFNGLPATCHPARAMETERIPROC GLeeFuncPtr_glPatchParameteri=GLee_Lazy_glPatchParameteri;
+#endif
+#ifndef GLEE_C_DEFINED_glPatchParameterfv
+#define GLEE_C_DEFINED_glPatchParameterfv
+  void __stdcall GLee_Lazy_glPatchParameterfv(GLenum  pname, const GLfloat * values)  {if (GLeeInit()) glPatchParameterfv(pname, values);}
+  GLEEPFNGLPATCHPARAMETERFVPROC GLeeFuncPtr_glPatchParameterfv=GLee_Lazy_glPatchParameterfv;
+#endif
+#endif 
+
+/* GL_ARB_texture_buffer_object_rgb32 */
+
+#ifdef __GLEE_GL_ARB_texture_buffer_object_rgb32
+#endif 
+
+/* GL_ARB_transform_feedback2 */
+
+#ifdef __GLEE_GL_ARB_transform_feedback2
+#ifndef GLEE_C_DEFINED_glBindTransformFeedback
+#define GLEE_C_DEFINED_glBindTransformFeedback
+  void __stdcall GLee_Lazy_glBindTransformFeedback(GLenum  target, GLuint  id)  {if (GLeeInit()) glBindTransformFeedback(target, id);}
+  GLEEPFNGLBINDTRANSFORMFEEDBACKPROC GLeeFuncPtr_glBindTransformFeedback=GLee_Lazy_glBindTransformFeedback;
+#endif
+#ifndef GLEE_C_DEFINED_glDeleteTransformFeedbacks
+#define GLEE_C_DEFINED_glDeleteTransformFeedbacks
+  void __stdcall GLee_Lazy_glDeleteTransformFeedbacks(GLsizei  n, const GLuint * ids)  {if (GLeeInit()) glDeleteTransformFeedbacks(n, ids);}
+  GLEEPFNGLDELETETRANSFORMFEEDBACKSPROC GLeeFuncPtr_glDeleteTransformFeedbacks=GLee_Lazy_glDeleteTransformFeedbacks;
+#endif
+#ifndef GLEE_C_DEFINED_glGenTransformFeedbacks
+#define GLEE_C_DEFINED_glGenTransformFeedbacks
+  void __stdcall GLee_Lazy_glGenTransformFeedbacks(GLsizei  n, GLuint * ids)  {if (GLeeInit()) glGenTransformFeedbacks(n, ids);}
+  GLEEPFNGLGENTRANSFORMFEEDBACKSPROC GLeeFuncPtr_glGenTransformFeedbacks=GLee_Lazy_glGenTransformFeedbacks;
+#endif
+#ifndef GLEE_C_DEFINED_glIsTransformFeedback
+#define GLEE_C_DEFINED_glIsTransformFeedback
+  GLboolean __stdcall GLee_Lazy_glIsTransformFeedback(GLuint  id)  {if (GLeeInit()) return glIsTransformFeedback(id); return (GLboolean)0;}
+  GLEEPFNGLISTRANSFORMFEEDBACKPROC GLeeFuncPtr_glIsTransformFeedback=GLee_Lazy_glIsTransformFeedback;
+#endif
+#ifndef GLEE_C_DEFINED_glPauseTransformFeedback
+#define GLEE_C_DEFINED_glPauseTransformFeedback
+  void __stdcall GLee_Lazy_glPauseTransformFeedback(void)  {if (GLeeInit()) glPauseTransformFeedback();}
+  GLEEPFNGLPAUSETRANSFORMFEEDBACKPROC GLeeFuncPtr_glPauseTransformFeedback=GLee_Lazy_glPauseTransformFeedback;
+#endif
+#ifndef GLEE_C_DEFINED_glResumeTransformFeedback
+#define GLEE_C_DEFINED_glResumeTransformFeedback
+  void __stdcall GLee_Lazy_glResumeTransformFeedback(void)  {if (GLeeInit()) glResumeTransformFeedback();}
+  GLEEPFNGLRESUMETRANSFORMFEEDBACKPROC GLeeFuncPtr_glResumeTransformFeedback=GLee_Lazy_glResumeTransformFeedback;
+#endif
+#ifndef GLEE_C_DEFINED_glDrawTransformFeedback
+#define GLEE_C_DEFINED_glDrawTransformFeedback
+  void __stdcall GLee_Lazy_glDrawTransformFeedback(GLenum  mode, GLuint  id)  {if (GLeeInit()) glDrawTransformFeedback(mode, id);}
+  GLEEPFNGLDRAWTRANSFORMFEEDBACKPROC GLeeFuncPtr_glDrawTransformFeedback=GLee_Lazy_glDrawTransformFeedback;
+#endif
+#endif 
+
+/* GL_ARB_transform_feedback3 */
+
+#ifdef __GLEE_GL_ARB_transform_feedback3
+#ifndef GLEE_C_DEFINED_glDrawTransformFeedbackStream
+#define GLEE_C_DEFINED_glDrawTransformFeedbackStream
+  void __stdcall GLee_Lazy_glDrawTransformFeedbackStream(GLenum  mode, GLuint  id, GLuint  stream)  {if (GLeeInit()) glDrawTransformFeedbackStream(mode, id, stream);}
+  GLEEPFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC GLeeFuncPtr_glDrawTransformFeedbackStream=GLee_Lazy_glDrawTransformFeedbackStream;
+#endif
+#ifndef GLEE_C_DEFINED_glBeginQueryIndexed
+#define GLEE_C_DEFINED_glBeginQueryIndexed
+  void __stdcall GLee_Lazy_glBeginQueryIndexed(GLenum  target, GLuint  index, GLuint  id)  {if (GLeeInit()) glBeginQueryIndexed(target, index, id);}
+  GLEEPFNGLBEGINQUERYINDEXEDPROC GLeeFuncPtr_glBeginQueryIndexed=GLee_Lazy_glBeginQueryIndexed;
+#endif
+#ifndef GLEE_C_DEFINED_glEndQueryIndexed
+#define GLEE_C_DEFINED_glEndQueryIndexed
+  void __stdcall GLee_Lazy_glEndQueryIndexed(GLenum  target, GLuint  index)  {if (GLeeInit()) glEndQueryIndexed(target, index);}
+  GLEEPFNGLENDQUERYINDEXEDPROC GLeeFuncPtr_glEndQueryIndexed=GLee_Lazy_glEndQueryIndexed;
+#endif
+#ifndef GLEE_C_DEFINED_glGetQueryIndexediv
+#define GLEE_C_DEFINED_glGetQueryIndexediv
+  void __stdcall GLee_Lazy_glGetQueryIndexediv(GLenum  target, GLuint  index, GLenum  pname, GLint * params)  {if (GLeeInit()) glGetQueryIndexediv(target, index, pname, params);}
+  GLEEPFNGLGETQUERYINDEXEDIVPROC GLeeFuncPtr_glGetQueryIndexediv=GLee_Lazy_glGetQueryIndexediv;
+#endif
+#endif 
+
+/* GL_ARB_ES2_compatibility */
+
+#ifdef __GLEE_GL_ARB_ES2_compatibility
+#ifndef GLEE_C_DEFINED_glReleaseShaderCompiler
+#define GLEE_C_DEFINED_glReleaseShaderCompiler
+  void __stdcall GLee_Lazy_glReleaseShaderCompiler(void)  {if (GLeeInit()) glReleaseShaderCompiler();}
+  GLEEPFNGLRELEASESHADERCOMPILERPROC GLeeFuncPtr_glReleaseShaderCompiler=GLee_Lazy_glReleaseShaderCompiler;
+#endif
+#ifndef GLEE_C_DEFINED_glShaderBinary
+#define GLEE_C_DEFINED_glShaderBinary
+  void __stdcall GLee_Lazy_glShaderBinary(GLsizei  count, const GLuint * shaders, GLenum  binaryformat, const GLvoid * binary, GLsizei  length)  {if (GLeeInit()) glShaderBinary(count, shaders, binaryformat, binary, length);}
+  GLEEPFNGLSHADERBINARYPROC GLeeFuncPtr_glShaderBinary=GLee_Lazy_glShaderBinary;
+#endif
+#ifndef GLEE_C_DEFINED_glGetShaderPrecisionFormat
+#define GLEE_C_DEFINED_glGetShaderPrecisionFormat
+  void __stdcall GLee_Lazy_glGetShaderPrecisionFormat(GLenum  shadertype, GLenum  precisiontype, GLint * range, GLint * precision)  {if (GLeeInit()) glGetShaderPrecisionFormat(shadertype, precisiontype, range, precision);}
+  GLEEPFNGLGETSHADERPRECISIONFORMATPROC GLeeFuncPtr_glGetShaderPrecisionFormat=GLee_Lazy_glGetShaderPrecisionFormat;
+#endif
+#ifndef GLEE_C_DEFINED_glDepthRangef
+#define GLEE_C_DEFINED_glDepthRangef
+  void __stdcall GLee_Lazy_glDepthRangef(GLclampf  n, GLclampf  f)  {if (GLeeInit()) glDepthRangef(n, f);}
+  GLEEPFNGLDEPTHRANGEFPROC GLeeFuncPtr_glDepthRangef=GLee_Lazy_glDepthRangef;
+#endif
+#ifndef GLEE_C_DEFINED_glClearDepthf
+#define GLEE_C_DEFINED_glClearDepthf
+  void __stdcall GLee_Lazy_glClearDepthf(GLclampf  d)  {if (GLeeInit()) glClearDepthf(d);}
+  GLEEPFNGLCLEARDEPTHFPROC GLeeFuncPtr_glClearDepthf=GLee_Lazy_glClearDepthf;
+#endif
+#endif 
+
+/* GL_ARB_get_program_binary */
+
+#ifdef __GLEE_GL_ARB_get_program_binary
+#ifndef GLEE_C_DEFINED_glGetProgramBinary
+#define GLEE_C_DEFINED_glGetProgramBinary
+  void __stdcall GLee_Lazy_glGetProgramBinary(GLuint  program, GLsizei  bufSize, GLsizei * length, GLenum * binaryFormat, GLvoid * binary)  {if (GLeeInit()) glGetProgramBinary(program, bufSize, length, binaryFormat, binary);}
+  GLEEPFNGLGETPROGRAMBINARYPROC GLeeFuncPtr_glGetProgramBinary=GLee_Lazy_glGetProgramBinary;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramBinary
+#define GLEE_C_DEFINED_glProgramBinary
+  void __stdcall GLee_Lazy_glProgramBinary(GLuint  program, GLenum  binaryFormat, const GLvoid * binary, GLsizei  length)  {if (GLeeInit()) glProgramBinary(program, binaryFormat, binary, length);}
+  GLEEPFNGLPROGRAMBINARYPROC GLeeFuncPtr_glProgramBinary=GLee_Lazy_glProgramBinary;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramParameteri
+#define GLEE_C_DEFINED_glProgramParameteri
+  void __stdcall GLee_Lazy_glProgramParameteri(GLuint  program, GLenum  pname, GLint  value)  {if (GLeeInit()) glProgramParameteri(program, pname, value);}
+  GLEEPFNGLPROGRAMPARAMETERIPROC GLeeFuncPtr_glProgramParameteri=GLee_Lazy_glProgramParameteri;
+#endif
+#endif 
+
+/* GL_ARB_separate_shader_objects */
+
+#ifdef __GLEE_GL_ARB_separate_shader_objects
+#ifndef GLEE_C_DEFINED_glUseProgramStages
+#define GLEE_C_DEFINED_glUseProgramStages
+  void __stdcall GLee_Lazy_glUseProgramStages(GLuint  pipeline, GLbitfield  stages, GLuint  program)  {if (GLeeInit()) glUseProgramStages(pipeline, stages, program);}
+  GLEEPFNGLUSEPROGRAMSTAGESPROC GLeeFuncPtr_glUseProgramStages=GLee_Lazy_glUseProgramStages;
+#endif
+#ifndef GLEE_C_DEFINED_glActiveShaderProgram
+#define GLEE_C_DEFINED_glActiveShaderProgram
+  void __stdcall GLee_Lazy_glActiveShaderProgram(GLuint  pipeline, GLuint  program)  {if (GLeeInit()) glActiveShaderProgram(pipeline, program);}
+  GLEEPFNGLACTIVESHADERPROGRAMPROC GLeeFuncPtr_glActiveShaderProgram=GLee_Lazy_glActiveShaderProgram;
+#endif
+#ifndef GLEE_C_DEFINED_glCreateShaderProgramv
+#define GLEE_C_DEFINED_glCreateShaderProgramv
+  GLuint __stdcall GLee_Lazy_glCreateShaderProgramv(GLenum  type, GLsizei  count, const GLchar* * strings)  {if (GLeeInit()) return glCreateShaderProgramv(type, count, strings); return (GLuint)0;}
+  GLEEPFNGLCREATESHADERPROGRAMVPROC GLeeFuncPtr_glCreateShaderProgramv=GLee_Lazy_glCreateShaderProgramv;
+#endif
+#ifndef GLEE_C_DEFINED_glBindProgramPipeline
+#define GLEE_C_DEFINED_glBindProgramPipeline
+  void __stdcall GLee_Lazy_glBindProgramPipeline(GLuint  pipeline)  {if (GLeeInit()) glBindProgramPipeline(pipeline);}
+  GLEEPFNGLBINDPROGRAMPIPELINEPROC GLeeFuncPtr_glBindProgramPipeline=GLee_Lazy_glBindProgramPipeline;
+#endif
+#ifndef GLEE_C_DEFINED_glDeleteProgramPipelines
+#define GLEE_C_DEFINED_glDeleteProgramPipelines
+  void __stdcall GLee_Lazy_glDeleteProgramPipelines(GLsizei  n, const GLuint * pipelines)  {if (GLeeInit()) glDeleteProgramPipelines(n, pipelines);}
+  GLEEPFNGLDELETEPROGRAMPIPELINESPROC GLeeFuncPtr_glDeleteProgramPipelines=GLee_Lazy_glDeleteProgramPipelines;
+#endif
+#ifndef GLEE_C_DEFINED_glGenProgramPipelines
+#define GLEE_C_DEFINED_glGenProgramPipelines
+  void __stdcall GLee_Lazy_glGenProgramPipelines(GLsizei  n, GLuint * pipelines)  {if (GLeeInit()) glGenProgramPipelines(n, pipelines);}
+  GLEEPFNGLGENPROGRAMPIPELINESPROC GLeeFuncPtr_glGenProgramPipelines=GLee_Lazy_glGenProgramPipelines;
+#endif
+#ifndef GLEE_C_DEFINED_glIsProgramPipeline
+#define GLEE_C_DEFINED_glIsProgramPipeline
+  GLboolean __stdcall GLee_Lazy_glIsProgramPipeline(GLuint  pipeline)  {if (GLeeInit()) return glIsProgramPipeline(pipeline); return (GLboolean)0;}
+  GLEEPFNGLISPROGRAMPIPELINEPROC GLeeFuncPtr_glIsProgramPipeline=GLee_Lazy_glIsProgramPipeline;
+#endif
+#ifndef GLEE_C_DEFINED_glGetProgramPipelineiv
+#define GLEE_C_DEFINED_glGetProgramPipelineiv
+  void __stdcall GLee_Lazy_glGetProgramPipelineiv(GLuint  pipeline, GLenum  pname, GLint * params)  {if (GLeeInit()) glGetProgramPipelineiv(pipeline, pname, params);}
+  GLEEPFNGLGETPROGRAMPIPELINEIVPROC GLeeFuncPtr_glGetProgramPipelineiv=GLee_Lazy_glGetProgramPipelineiv;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramUniform1i
+#define GLEE_C_DEFINED_glProgramUniform1i
+  void __stdcall GLee_Lazy_glProgramUniform1i(GLuint  program, GLint  location, GLint  v0)  {if (GLeeInit()) glProgramUniform1i(program, location, v0);}
+  GLEEPFNGLPROGRAMUNIFORM1IPROC GLeeFuncPtr_glProgramUniform1i=GLee_Lazy_glProgramUniform1i;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramUniform1iv
+#define GLEE_C_DEFINED_glProgramUniform1iv
+  void __stdcall GLee_Lazy_glProgramUniform1iv(GLuint  program, GLint  location, GLsizei  count, const GLint * value)  {if (GLeeInit()) glProgramUniform1iv(program, location, count, value);}
+  GLEEPFNGLPROGRAMUNIFORM1IVPROC GLeeFuncPtr_glProgramUniform1iv=GLee_Lazy_glProgramUniform1iv;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramUniform1f
+#define GLEE_C_DEFINED_glProgramUniform1f
+  void __stdcall GLee_Lazy_glProgramUniform1f(GLuint  program, GLint  location, GLfloat  v0)  {if (GLeeInit()) glProgramUniform1f(program, location, v0);}
+  GLEEPFNGLPROGRAMUNIFORM1FPROC GLeeFuncPtr_glProgramUniform1f=GLee_Lazy_glProgramUniform1f;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramUniform1fv
+#define GLEE_C_DEFINED_glProgramUniform1fv
+  void __stdcall GLee_Lazy_glProgramUniform1fv(GLuint  program, GLint  location, GLsizei  count, const GLfloat * value)  {if (GLeeInit()) glProgramUniform1fv(program, location, count, value);}
+  GLEEPFNGLPROGRAMUNIFORM1FVPROC GLeeFuncPtr_glProgramUniform1fv=GLee_Lazy_glProgramUniform1fv;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramUniform1d
+#define GLEE_C_DEFINED_glProgramUniform1d
+  void __stdcall GLee_Lazy_glProgramUniform1d(GLuint  program, GLint  location, GLdouble  v0)  {if (GLeeInit()) glProgramUniform1d(program, location, v0);}
+  GLEEPFNGLPROGRAMUNIFORM1DPROC GLeeFuncPtr_glProgramUniform1d=GLee_Lazy_glProgramUniform1d;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramUniform1dv
+#define GLEE_C_DEFINED_glProgramUniform1dv
+  void __stdcall GLee_Lazy_glProgramUniform1dv(GLuint  program, GLint  location, GLsizei  count, const GLdouble * value)  {if (GLeeInit()) glProgramUniform1dv(program, location, count, value);}
+  GLEEPFNGLPROGRAMUNIFORM1DVPROC GLeeFuncPtr_glProgramUniform1dv=GLee_Lazy_glProgramUniform1dv;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramUniform1ui
+#define GLEE_C_DEFINED_glProgramUniform1ui
+  void __stdcall GLee_Lazy_glProgramUniform1ui(GLuint  program, GLint  location, GLuint  v0)  {if (GLeeInit()) glProgramUniform1ui(program, location, v0);}
+  GLEEPFNGLPROGRAMUNIFORM1UIPROC GLeeFuncPtr_glProgramUniform1ui=GLee_Lazy_glProgramUniform1ui;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramUniform1uiv
+#define GLEE_C_DEFINED_glProgramUniform1uiv
+  void __stdcall GLee_Lazy_glProgramUniform1uiv(GLuint  program, GLint  location, GLsizei  count, const GLuint * value)  {if (GLeeInit()) glProgramUniform1uiv(program, location, count, value);}
+  GLEEPFNGLPROGRAMUNIFORM1UIVPROC GLeeFuncPtr_glProgramUniform1uiv=GLee_Lazy_glProgramUniform1uiv;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramUniform2i
+#define GLEE_C_DEFINED_glProgramUniform2i
+  void __stdcall GLee_Lazy_glProgramUniform2i(GLuint  program, GLint  location, GLint  v0, GLint  v1)  {if (GLeeInit()) glProgramUniform2i(program, location, v0, v1);}
+  GLEEPFNGLPROGRAMUNIFORM2IPROC GLeeFuncPtr_glProgramUniform2i=GLee_Lazy_glProgramUniform2i;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramUniform2iv
+#define GLEE_C_DEFINED_glProgramUniform2iv
+  void __stdcall GLee_Lazy_glProgramUniform2iv(GLuint  program, GLint  location, GLsizei  count, const GLint * value)  {if (GLeeInit()) glProgramUniform2iv(program, location, count, value);}
+  GLEEPFNGLPROGRAMUNIFORM2IVPROC GLeeFuncPtr_glProgramUniform2iv=GLee_Lazy_glProgramUniform2iv;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramUniform2f
+#define GLEE_C_DEFINED_glProgramUniform2f
+  void __stdcall GLee_Lazy_glProgramUniform2f(GLuint  program, GLint  location, GLfloat  v0, GLfloat  v1)  {if (GLeeInit()) glProgramUniform2f(program, location, v0, v1);}
+  GLEEPFNGLPROGRAMUNIFORM2FPROC GLeeFuncPtr_glProgramUniform2f=GLee_Lazy_glProgramUniform2f;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramUniform2fv
+#define GLEE_C_DEFINED_glProgramUniform2fv
+  void __stdcall GLee_Lazy_glProgramUniform2fv(GLuint  program, GLint  location, GLsizei  count, const GLfloat * value)  {if (GLeeInit()) glProgramUniform2fv(program, location, count, value);}
+  GLEEPFNGLPROGRAMUNIFORM2FVPROC GLeeFuncPtr_glProgramUniform2fv=GLee_Lazy_glProgramUniform2fv;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramUniform2d
+#define GLEE_C_DEFINED_glProgramUniform2d
+  void __stdcall GLee_Lazy_glProgramUniform2d(GLuint  program, GLint  location, GLdouble  v0, GLdouble  v1)  {if (GLeeInit()) glProgramUniform2d(program, location, v0, v1);}
+  GLEEPFNGLPROGRAMUNIFORM2DPROC GLeeFuncPtr_glProgramUniform2d=GLee_Lazy_glProgramUniform2d;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramUniform2dv
+#define GLEE_C_DEFINED_glProgramUniform2dv
+  void __stdcall GLee_Lazy_glProgramUniform2dv(GLuint  program, GLint  location, GLsizei  count, const GLdouble * value)  {if (GLeeInit()) glProgramUniform2dv(program, location, count, value);}
+  GLEEPFNGLPROGRAMUNIFORM2DVPROC GLeeFuncPtr_glProgramUniform2dv=GLee_Lazy_glProgramUniform2dv;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramUniform2ui
+#define GLEE_C_DEFINED_glProgramUniform2ui
+  void __stdcall GLee_Lazy_glProgramUniform2ui(GLuint  program, GLint  location, GLuint  v0, GLuint  v1)  {if (GLeeInit()) glProgramUniform2ui(program, location, v0, v1);}
+  GLEEPFNGLPROGRAMUNIFORM2UIPROC GLeeFuncPtr_glProgramUniform2ui=GLee_Lazy_glProgramUniform2ui;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramUniform2uiv
+#define GLEE_C_DEFINED_glProgramUniform2uiv
+  void __stdcall GLee_Lazy_glProgramUniform2uiv(GLuint  program, GLint  location, GLsizei  count, const GLuint * value)  {if (GLeeInit()) glProgramUniform2uiv(program, location, count, value);}
+  GLEEPFNGLPROGRAMUNIFORM2UIVPROC GLeeFuncPtr_glProgramUniform2uiv=GLee_Lazy_glProgramUniform2uiv;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramUniform3i
+#define GLEE_C_DEFINED_glProgramUniform3i
+  void __stdcall GLee_Lazy_glProgramUniform3i(GLuint  program, GLint  location, GLint  v0, GLint  v1, GLint  v2)  {if (GLeeInit()) glProgramUniform3i(program, location, v0, v1, v2);}
+  GLEEPFNGLPROGRAMUNIFORM3IPROC GLeeFuncPtr_glProgramUniform3i=GLee_Lazy_glProgramUniform3i;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramUniform3iv
+#define GLEE_C_DEFINED_glProgramUniform3iv
+  void __stdcall GLee_Lazy_glProgramUniform3iv(GLuint  program, GLint  location, GLsizei  count, const GLint * value)  {if (GLeeInit()) glProgramUniform3iv(program, location, count, value);}
+  GLEEPFNGLPROGRAMUNIFORM3IVPROC GLeeFuncPtr_glProgramUniform3iv=GLee_Lazy_glProgramUniform3iv;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramUniform3f
+#define GLEE_C_DEFINED_glProgramUniform3f
+  void __stdcall GLee_Lazy_glProgramUniform3f(GLuint  program, GLint  location, GLfloat  v0, GLfloat  v1, GLfloat  v2)  {if (GLeeInit()) glProgramUniform3f(program, location, v0, v1, v2);}
+  GLEEPFNGLPROGRAMUNIFORM3FPROC GLeeFuncPtr_glProgramUniform3f=GLee_Lazy_glProgramUniform3f;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramUniform3fv
+#define GLEE_C_DEFINED_glProgramUniform3fv
+  void __stdcall GLee_Lazy_glProgramUniform3fv(GLuint  program, GLint  location, GLsizei  count, const GLfloat * value)  {if (GLeeInit()) glProgramUniform3fv(program, location, count, value);}
+  GLEEPFNGLPROGRAMUNIFORM3FVPROC GLeeFuncPtr_glProgramUniform3fv=GLee_Lazy_glProgramUniform3fv;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramUniform3d
+#define GLEE_C_DEFINED_glProgramUniform3d
+  void __stdcall GLee_Lazy_glProgramUniform3d(GLuint  program, GLint  location, GLdouble  v0, GLdouble  v1, GLdouble  v2)  {if (GLeeInit()) glProgramUniform3d(program, location, v0, v1, v2);}
+  GLEEPFNGLPROGRAMUNIFORM3DPROC GLeeFuncPtr_glProgramUniform3d=GLee_Lazy_glProgramUniform3d;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramUniform3dv
+#define GLEE_C_DEFINED_glProgramUniform3dv
+  void __stdcall GLee_Lazy_glProgramUniform3dv(GLuint  program, GLint  location, GLsizei  count, const GLdouble * value)  {if (GLeeInit()) glProgramUniform3dv(program, location, count, value);}
+  GLEEPFNGLPROGRAMUNIFORM3DVPROC GLeeFuncPtr_glProgramUniform3dv=GLee_Lazy_glProgramUniform3dv;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramUniform3ui
+#define GLEE_C_DEFINED_glProgramUniform3ui
+  void __stdcall GLee_Lazy_glProgramUniform3ui(GLuint  program, GLint  location, GLuint  v0, GLuint  v1, GLuint  v2)  {if (GLeeInit()) glProgramUniform3ui(program, location, v0, v1, v2);}
+  GLEEPFNGLPROGRAMUNIFORM3UIPROC GLeeFuncPtr_glProgramUniform3ui=GLee_Lazy_glProgramUniform3ui;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramUniform3uiv
+#define GLEE_C_DEFINED_glProgramUniform3uiv
+  void __stdcall GLee_Lazy_glProgramUniform3uiv(GLuint  program, GLint  location, GLsizei  count, const GLuint * value)  {if (GLeeInit()) glProgramUniform3uiv(program, location, count, value);}
+  GLEEPFNGLPROGRAMUNIFORM3UIVPROC GLeeFuncPtr_glProgramUniform3uiv=GLee_Lazy_glProgramUniform3uiv;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramUniform4i
+#define GLEE_C_DEFINED_glProgramUniform4i
+  void __stdcall GLee_Lazy_glProgramUniform4i(GLuint  program, GLint  location, GLint  v0, GLint  v1, GLint  v2, GLint  v3)  {if (GLeeInit()) glProgramUniform4i(program, location, v0, v1, v2, v3);}
+  GLEEPFNGLPROGRAMUNIFORM4IPROC GLeeFuncPtr_glProgramUniform4i=GLee_Lazy_glProgramUniform4i;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramUniform4iv
+#define GLEE_C_DEFINED_glProgramUniform4iv
+  void __stdcall GLee_Lazy_glProgramUniform4iv(GLuint  program, GLint  location, GLsizei  count, const GLint * value)  {if (GLeeInit()) glProgramUniform4iv(program, location, count, value);}
+  GLEEPFNGLPROGRAMUNIFORM4IVPROC GLeeFuncPtr_glProgramUniform4iv=GLee_Lazy_glProgramUniform4iv;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramUniform4f
+#define GLEE_C_DEFINED_glProgramUniform4f
+  void __stdcall GLee_Lazy_glProgramUniform4f(GLuint  program, GLint  location, GLfloat  v0, GLfloat  v1, GLfloat  v2, GLfloat  v3)  {if (GLeeInit()) glProgramUniform4f(program, location, v0, v1, v2, v3);}
+  GLEEPFNGLPROGRAMUNIFORM4FPROC GLeeFuncPtr_glProgramUniform4f=GLee_Lazy_glProgramUniform4f;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramUniform4fv
+#define GLEE_C_DEFINED_glProgramUniform4fv
+  void __stdcall GLee_Lazy_glProgramUniform4fv(GLuint  program, GLint  location, GLsizei  count, const GLfloat * value)  {if (GLeeInit()) glProgramUniform4fv(program, location, count, value);}
+  GLEEPFNGLPROGRAMUNIFORM4FVPROC GLeeFuncPtr_glProgramUniform4fv=GLee_Lazy_glProgramUniform4fv;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramUniform4d
+#define GLEE_C_DEFINED_glProgramUniform4d
+  void __stdcall GLee_Lazy_glProgramUniform4d(GLuint  program, GLint  location, GLdouble  v0, GLdouble  v1, GLdouble  v2, GLdouble  v3)  {if (GLeeInit()) glProgramUniform4d(program, location, v0, v1, v2, v3);}
+  GLEEPFNGLPROGRAMUNIFORM4DPROC GLeeFuncPtr_glProgramUniform4d=GLee_Lazy_glProgramUniform4d;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramUniform4dv
+#define GLEE_C_DEFINED_glProgramUniform4dv
+  void __stdcall GLee_Lazy_glProgramUniform4dv(GLuint  program, GLint  location, GLsizei  count, const GLdouble * value)  {if (GLeeInit()) glProgramUniform4dv(program, location, count, value);}
+  GLEEPFNGLPROGRAMUNIFORM4DVPROC GLeeFuncPtr_glProgramUniform4dv=GLee_Lazy_glProgramUniform4dv;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramUniform4ui
+#define GLEE_C_DEFINED_glProgramUniform4ui
+  void __stdcall GLee_Lazy_glProgramUniform4ui(GLuint  program, GLint  location, GLuint  v0, GLuint  v1, GLuint  v2, GLuint  v3)  {if (GLeeInit()) glProgramUniform4ui(program, location, v0, v1, v2, v3);}
+  GLEEPFNGLPROGRAMUNIFORM4UIPROC GLeeFuncPtr_glProgramUniform4ui=GLee_Lazy_glProgramUniform4ui;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramUniform4uiv
+#define GLEE_C_DEFINED_glProgramUniform4uiv
+  void __stdcall GLee_Lazy_glProgramUniform4uiv(GLuint  program, GLint  location, GLsizei  count, const GLuint * value)  {if (GLeeInit()) glProgramUniform4uiv(program, location, count, value);}
+  GLEEPFNGLPROGRAMUNIFORM4UIVPROC GLeeFuncPtr_glProgramUniform4uiv=GLee_Lazy_glProgramUniform4uiv;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramUniformMatrix2fv
+#define GLEE_C_DEFINED_glProgramUniformMatrix2fv
+  void __stdcall GLee_Lazy_glProgramUniformMatrix2fv(GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value)  {if (GLeeInit()) glProgramUniformMatrix2fv(program, location, count, transpose, value);}
+  GLEEPFNGLPROGRAMUNIFORMMATRIX2FVPROC GLeeFuncPtr_glProgramUniformMatrix2fv=GLee_Lazy_glProgramUniformMatrix2fv;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramUniformMatrix3fv
+#define GLEE_C_DEFINED_glProgramUniformMatrix3fv
+  void __stdcall GLee_Lazy_glProgramUniformMatrix3fv(GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value)  {if (GLeeInit()) glProgramUniformMatrix3fv(program, location, count, transpose, value);}
+  GLEEPFNGLPROGRAMUNIFORMMATRIX3FVPROC GLeeFuncPtr_glProgramUniformMatrix3fv=GLee_Lazy_glProgramUniformMatrix3fv;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramUniformMatrix4fv
+#define GLEE_C_DEFINED_glProgramUniformMatrix4fv
+  void __stdcall GLee_Lazy_glProgramUniformMatrix4fv(GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value)  {if (GLeeInit()) glProgramUniformMatrix4fv(program, location, count, transpose, value);}
+  GLEEPFNGLPROGRAMUNIFORMMATRIX4FVPROC GLeeFuncPtr_glProgramUniformMatrix4fv=GLee_Lazy_glProgramUniformMatrix4fv;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramUniformMatrix2dv
+#define GLEE_C_DEFINED_glProgramUniformMatrix2dv
+  void __stdcall GLee_Lazy_glProgramUniformMatrix2dv(GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value)  {if (GLeeInit()) glProgramUniformMatrix2dv(program, location, count, transpose, value);}
+  GLEEPFNGLPROGRAMUNIFORMMATRIX2DVPROC GLeeFuncPtr_glProgramUniformMatrix2dv=GLee_Lazy_glProgramUniformMatrix2dv;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramUniformMatrix3dv
+#define GLEE_C_DEFINED_glProgramUniformMatrix3dv
+  void __stdcall GLee_Lazy_glProgramUniformMatrix3dv(GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value)  {if (GLeeInit()) glProgramUniformMatrix3dv(program, location, count, transpose, value);}
+  GLEEPFNGLPROGRAMUNIFORMMATRIX3DVPROC GLeeFuncPtr_glProgramUniformMatrix3dv=GLee_Lazy_glProgramUniformMatrix3dv;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramUniformMatrix4dv
+#define GLEE_C_DEFINED_glProgramUniformMatrix4dv
+  void __stdcall GLee_Lazy_glProgramUniformMatrix4dv(GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value)  {if (GLeeInit()) glProgramUniformMatrix4dv(program, location, count, transpose, value);}
+  GLEEPFNGLPROGRAMUNIFORMMATRIX4DVPROC GLeeFuncPtr_glProgramUniformMatrix4dv=GLee_Lazy_glProgramUniformMatrix4dv;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramUniformMatrix2x3fv
+#define GLEE_C_DEFINED_glProgramUniformMatrix2x3fv
+  void __stdcall GLee_Lazy_glProgramUniformMatrix2x3fv(GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value)  {if (GLeeInit()) glProgramUniformMatrix2x3fv(program, location, count, transpose, value);}
+  GLEEPFNGLPROGRAMUNIFORMMATRIX2X3FVPROC GLeeFuncPtr_glProgramUniformMatrix2x3fv=GLee_Lazy_glProgramUniformMatrix2x3fv;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramUniformMatrix3x2fv
+#define GLEE_C_DEFINED_glProgramUniformMatrix3x2fv
+  void __stdcall GLee_Lazy_glProgramUniformMatrix3x2fv(GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value)  {if (GLeeInit()) glProgramUniformMatrix3x2fv(program, location, count, transpose, value);}
+  GLEEPFNGLPROGRAMUNIFORMMATRIX3X2FVPROC GLeeFuncPtr_glProgramUniformMatrix3x2fv=GLee_Lazy_glProgramUniformMatrix3x2fv;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramUniformMatrix2x4fv
+#define GLEE_C_DEFINED_glProgramUniformMatrix2x4fv
+  void __stdcall GLee_Lazy_glProgramUniformMatrix2x4fv(GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value)  {if (GLeeInit()) glProgramUniformMatrix2x4fv(program, location, count, transpose, value);}
+  GLEEPFNGLPROGRAMUNIFORMMATRIX2X4FVPROC GLeeFuncPtr_glProgramUniformMatrix2x4fv=GLee_Lazy_glProgramUniformMatrix2x4fv;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramUniformMatrix4x2fv
+#define GLEE_C_DEFINED_glProgramUniformMatrix4x2fv
+  void __stdcall GLee_Lazy_glProgramUniformMatrix4x2fv(GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value)  {if (GLeeInit()) glProgramUniformMatrix4x2fv(program, location, count, transpose, value);}
+  GLEEPFNGLPROGRAMUNIFORMMATRIX4X2FVPROC GLeeFuncPtr_glProgramUniformMatrix4x2fv=GLee_Lazy_glProgramUniformMatrix4x2fv;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramUniformMatrix3x4fv
+#define GLEE_C_DEFINED_glProgramUniformMatrix3x4fv
+  void __stdcall GLee_Lazy_glProgramUniformMatrix3x4fv(GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value)  {if (GLeeInit()) glProgramUniformMatrix3x4fv(program, location, count, transpose, value);}
+  GLEEPFNGLPROGRAMUNIFORMMATRIX3X4FVPROC GLeeFuncPtr_glProgramUniformMatrix3x4fv=GLee_Lazy_glProgramUniformMatrix3x4fv;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramUniformMatrix4x3fv
+#define GLEE_C_DEFINED_glProgramUniformMatrix4x3fv
+  void __stdcall GLee_Lazy_glProgramUniformMatrix4x3fv(GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value)  {if (GLeeInit()) glProgramUniformMatrix4x3fv(program, location, count, transpose, value);}
+  GLEEPFNGLPROGRAMUNIFORMMATRIX4X3FVPROC GLeeFuncPtr_glProgramUniformMatrix4x3fv=GLee_Lazy_glProgramUniformMatrix4x3fv;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramUniformMatrix2x3dv
+#define GLEE_C_DEFINED_glProgramUniformMatrix2x3dv
+  void __stdcall GLee_Lazy_glProgramUniformMatrix2x3dv(GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value)  {if (GLeeInit()) glProgramUniformMatrix2x3dv(program, location, count, transpose, value);}
+  GLEEPFNGLPROGRAMUNIFORMMATRIX2X3DVPROC GLeeFuncPtr_glProgramUniformMatrix2x3dv=GLee_Lazy_glProgramUniformMatrix2x3dv;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramUniformMatrix3x2dv
+#define GLEE_C_DEFINED_glProgramUniformMatrix3x2dv
+  void __stdcall GLee_Lazy_glProgramUniformMatrix3x2dv(GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value)  {if (GLeeInit()) glProgramUniformMatrix3x2dv(program, location, count, transpose, value);}
+  GLEEPFNGLPROGRAMUNIFORMMATRIX3X2DVPROC GLeeFuncPtr_glProgramUniformMatrix3x2dv=GLee_Lazy_glProgramUniformMatrix3x2dv;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramUniformMatrix2x4dv
+#define GLEE_C_DEFINED_glProgramUniformMatrix2x4dv
+  void __stdcall GLee_Lazy_glProgramUniformMatrix2x4dv(GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value)  {if (GLeeInit()) glProgramUniformMatrix2x4dv(program, location, count, transpose, value);}
+  GLEEPFNGLPROGRAMUNIFORMMATRIX2X4DVPROC GLeeFuncPtr_glProgramUniformMatrix2x4dv=GLee_Lazy_glProgramUniformMatrix2x4dv;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramUniformMatrix4x2dv
+#define GLEE_C_DEFINED_glProgramUniformMatrix4x2dv
+  void __stdcall GLee_Lazy_glProgramUniformMatrix4x2dv(GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value)  {if (GLeeInit()) glProgramUniformMatrix4x2dv(program, location, count, transpose, value);}
+  GLEEPFNGLPROGRAMUNIFORMMATRIX4X2DVPROC GLeeFuncPtr_glProgramUniformMatrix4x2dv=GLee_Lazy_glProgramUniformMatrix4x2dv;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramUniformMatrix3x4dv
+#define GLEE_C_DEFINED_glProgramUniformMatrix3x4dv
+  void __stdcall GLee_Lazy_glProgramUniformMatrix3x4dv(GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value)  {if (GLeeInit()) glProgramUniformMatrix3x4dv(program, location, count, transpose, value);}
+  GLEEPFNGLPROGRAMUNIFORMMATRIX3X4DVPROC GLeeFuncPtr_glProgramUniformMatrix3x4dv=GLee_Lazy_glProgramUniformMatrix3x4dv;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramUniformMatrix4x3dv
+#define GLEE_C_DEFINED_glProgramUniformMatrix4x3dv
+  void __stdcall GLee_Lazy_glProgramUniformMatrix4x3dv(GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value)  {if (GLeeInit()) glProgramUniformMatrix4x3dv(program, location, count, transpose, value);}
+  GLEEPFNGLPROGRAMUNIFORMMATRIX4X3DVPROC GLeeFuncPtr_glProgramUniformMatrix4x3dv=GLee_Lazy_glProgramUniformMatrix4x3dv;
+#endif
+#ifndef GLEE_C_DEFINED_glValidateProgramPipeline
+#define GLEE_C_DEFINED_glValidateProgramPipeline
+  void __stdcall GLee_Lazy_glValidateProgramPipeline(GLuint  pipeline)  {if (GLeeInit()) glValidateProgramPipeline(pipeline);}
+  GLEEPFNGLVALIDATEPROGRAMPIPELINEPROC GLeeFuncPtr_glValidateProgramPipeline=GLee_Lazy_glValidateProgramPipeline;
+#endif
+#ifndef GLEE_C_DEFINED_glGetProgramPipelineInfoLog
+#define GLEE_C_DEFINED_glGetProgramPipelineInfoLog
+  void __stdcall GLee_Lazy_glGetProgramPipelineInfoLog(GLuint  pipeline, GLsizei  bufSize, GLsizei * length, GLchar * infoLog)  {if (GLeeInit()) glGetProgramPipelineInfoLog(pipeline, bufSize, length, infoLog);}
+  GLEEPFNGLGETPROGRAMPIPELINEINFOLOGPROC GLeeFuncPtr_glGetProgramPipelineInfoLog=GLee_Lazy_glGetProgramPipelineInfoLog;
+#endif
+#endif 
+
+/* GL_ARB_shader_precision */
+
+#ifdef __GLEE_GL_ARB_shader_precision
+#endif 
+
+/* GL_ARB_vertex_attrib_64bit */
+
+#ifdef __GLEE_GL_ARB_vertex_attrib_64bit
+#ifndef GLEE_C_DEFINED_glVertexAttribL1d
+#define GLEE_C_DEFINED_glVertexAttribL1d
+  void __stdcall GLee_Lazy_glVertexAttribL1d(GLuint  index, GLdouble  x)  {if (GLeeInit()) glVertexAttribL1d(index, x);}
+  GLEEPFNGLVERTEXATTRIBL1DPROC GLeeFuncPtr_glVertexAttribL1d=GLee_Lazy_glVertexAttribL1d;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttribL2d
+#define GLEE_C_DEFINED_glVertexAttribL2d
+  void __stdcall GLee_Lazy_glVertexAttribL2d(GLuint  index, GLdouble  x, GLdouble  y)  {if (GLeeInit()) glVertexAttribL2d(index, x, y);}
+  GLEEPFNGLVERTEXATTRIBL2DPROC GLeeFuncPtr_glVertexAttribL2d=GLee_Lazy_glVertexAttribL2d;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttribL3d
+#define GLEE_C_DEFINED_glVertexAttribL3d
+  void __stdcall GLee_Lazy_glVertexAttribL3d(GLuint  index, GLdouble  x, GLdouble  y, GLdouble  z)  {if (GLeeInit()) glVertexAttribL3d(index, x, y, z);}
+  GLEEPFNGLVERTEXATTRIBL3DPROC GLeeFuncPtr_glVertexAttribL3d=GLee_Lazy_glVertexAttribL3d;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttribL4d
+#define GLEE_C_DEFINED_glVertexAttribL4d
+  void __stdcall GLee_Lazy_glVertexAttribL4d(GLuint  index, GLdouble  x, GLdouble  y, GLdouble  z, GLdouble  w)  {if (GLeeInit()) glVertexAttribL4d(index, x, y, z, w);}
+  GLEEPFNGLVERTEXATTRIBL4DPROC GLeeFuncPtr_glVertexAttribL4d=GLee_Lazy_glVertexAttribL4d;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttribL1dv
+#define GLEE_C_DEFINED_glVertexAttribL1dv
+  void __stdcall GLee_Lazy_glVertexAttribL1dv(GLuint  index, const GLdouble * v)  {if (GLeeInit()) glVertexAttribL1dv(index, v);}
+  GLEEPFNGLVERTEXATTRIBL1DVPROC GLeeFuncPtr_glVertexAttribL1dv=GLee_Lazy_glVertexAttribL1dv;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttribL2dv
+#define GLEE_C_DEFINED_glVertexAttribL2dv
+  void __stdcall GLee_Lazy_glVertexAttribL2dv(GLuint  index, const GLdouble * v)  {if (GLeeInit()) glVertexAttribL2dv(index, v);}
+  GLEEPFNGLVERTEXATTRIBL2DVPROC GLeeFuncPtr_glVertexAttribL2dv=GLee_Lazy_glVertexAttribL2dv;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttribL3dv
+#define GLEE_C_DEFINED_glVertexAttribL3dv
+  void __stdcall GLee_Lazy_glVertexAttribL3dv(GLuint  index, const GLdouble * v)  {if (GLeeInit()) glVertexAttribL3dv(index, v);}
+  GLEEPFNGLVERTEXATTRIBL3DVPROC GLeeFuncPtr_glVertexAttribL3dv=GLee_Lazy_glVertexAttribL3dv;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttribL4dv
+#define GLEE_C_DEFINED_glVertexAttribL4dv
+  void __stdcall GLee_Lazy_glVertexAttribL4dv(GLuint  index, const GLdouble * v)  {if (GLeeInit()) glVertexAttribL4dv(index, v);}
+  GLEEPFNGLVERTEXATTRIBL4DVPROC GLeeFuncPtr_glVertexAttribL4dv=GLee_Lazy_glVertexAttribL4dv;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttribLPointer
+#define GLEE_C_DEFINED_glVertexAttribLPointer
+  void __stdcall GLee_Lazy_glVertexAttribLPointer(GLuint  index, GLint  size, GLenum  type, GLsizei  stride, const GLvoid * pointer)  {if (GLeeInit()) glVertexAttribLPointer(index, size, type, stride, pointer);}
+  GLEEPFNGLVERTEXATTRIBLPOINTERPROC GLeeFuncPtr_glVertexAttribLPointer=GLee_Lazy_glVertexAttribLPointer;
+#endif
+#ifndef GLEE_C_DEFINED_glGetVertexAttribLdv
+#define GLEE_C_DEFINED_glGetVertexAttribLdv
+  void __stdcall GLee_Lazy_glGetVertexAttribLdv(GLuint  index, GLenum  pname, GLdouble * params)  {if (GLeeInit()) glGetVertexAttribLdv(index, pname, params);}
+  GLEEPFNGLGETVERTEXATTRIBLDVPROC GLeeFuncPtr_glGetVertexAttribLdv=GLee_Lazy_glGetVertexAttribLdv;
+#endif
+#endif 
+
+/* GL_ARB_viewport_array */
+
+#ifdef __GLEE_GL_ARB_viewport_array
+#ifndef GLEE_C_DEFINED_glViewportArrayv
+#define GLEE_C_DEFINED_glViewportArrayv
+  void __stdcall GLee_Lazy_glViewportArrayv(GLuint  first, GLsizei  count, const GLfloat * v)  {if (GLeeInit()) glViewportArrayv(first, count, v);}
+  GLEEPFNGLVIEWPORTARRAYVPROC GLeeFuncPtr_glViewportArrayv=GLee_Lazy_glViewportArrayv;
+#endif
+#ifndef GLEE_C_DEFINED_glViewportIndexedf
+#define GLEE_C_DEFINED_glViewportIndexedf
+  void __stdcall GLee_Lazy_glViewportIndexedf(GLuint  index, GLfloat  x, GLfloat  y, GLfloat  w, GLfloat  h)  {if (GLeeInit()) glViewportIndexedf(index, x, y, w, h);}
+  GLEEPFNGLVIEWPORTINDEXEDFPROC GLeeFuncPtr_glViewportIndexedf=GLee_Lazy_glViewportIndexedf;
+#endif
+#ifndef GLEE_C_DEFINED_glViewportIndexedfv
+#define GLEE_C_DEFINED_glViewportIndexedfv
+  void __stdcall GLee_Lazy_glViewportIndexedfv(GLuint  index, const GLfloat * v)  {if (GLeeInit()) glViewportIndexedfv(index, v);}
+  GLEEPFNGLVIEWPORTINDEXEDFVPROC GLeeFuncPtr_glViewportIndexedfv=GLee_Lazy_glViewportIndexedfv;
+#endif
+#ifndef GLEE_C_DEFINED_glScissorArrayv
+#define GLEE_C_DEFINED_glScissorArrayv
+  void __stdcall GLee_Lazy_glScissorArrayv(GLuint  first, GLsizei  count, const GLint * v)  {if (GLeeInit()) glScissorArrayv(first, count, v);}
+  GLEEPFNGLSCISSORARRAYVPROC GLeeFuncPtr_glScissorArrayv=GLee_Lazy_glScissorArrayv;
+#endif
+#ifndef GLEE_C_DEFINED_glScissorIndexed
+#define GLEE_C_DEFINED_glScissorIndexed
+  void __stdcall GLee_Lazy_glScissorIndexed(GLuint  index, GLint  left, GLint  bottom, GLsizei  width, GLsizei  height)  {if (GLeeInit()) glScissorIndexed(index, left, bottom, width, height);}
+  GLEEPFNGLSCISSORINDEXEDPROC GLeeFuncPtr_glScissorIndexed=GLee_Lazy_glScissorIndexed;
+#endif
+#ifndef GLEE_C_DEFINED_glScissorIndexedv
+#define GLEE_C_DEFINED_glScissorIndexedv
+  void __stdcall GLee_Lazy_glScissorIndexedv(GLuint  index, const GLint * v)  {if (GLeeInit()) glScissorIndexedv(index, v);}
+  GLEEPFNGLSCISSORINDEXEDVPROC GLeeFuncPtr_glScissorIndexedv=GLee_Lazy_glScissorIndexedv;
+#endif
+#ifndef GLEE_C_DEFINED_glDepthRangeArrayv
+#define GLEE_C_DEFINED_glDepthRangeArrayv
+  void __stdcall GLee_Lazy_glDepthRangeArrayv(GLuint  first, GLsizei  count, const GLclampd * v)  {if (GLeeInit()) glDepthRangeArrayv(first, count, v);}
+  GLEEPFNGLDEPTHRANGEARRAYVPROC GLeeFuncPtr_glDepthRangeArrayv=GLee_Lazy_glDepthRangeArrayv;
+#endif
+#ifndef GLEE_C_DEFINED_glDepthRangeIndexed
+#define GLEE_C_DEFINED_glDepthRangeIndexed
+  void __stdcall GLee_Lazy_glDepthRangeIndexed(GLuint  index, GLclampd  n, GLclampd  f)  {if (GLeeInit()) glDepthRangeIndexed(index, n, f);}
+  GLEEPFNGLDEPTHRANGEINDEXEDPROC GLeeFuncPtr_glDepthRangeIndexed=GLee_Lazy_glDepthRangeIndexed;
+#endif
+#ifndef GLEE_C_DEFINED_glGetFloati_v
+#define GLEE_C_DEFINED_glGetFloati_v
+  void __stdcall GLee_Lazy_glGetFloati_v(GLenum  target, GLuint  index, GLfloat * data)  {if (GLeeInit()) glGetFloati_v(target, index, data);}
+  GLEEPFNGLGETFLOATI_VPROC GLeeFuncPtr_glGetFloati_v=GLee_Lazy_glGetFloati_v;
+#endif
+#ifndef GLEE_C_DEFINED_glGetDoublei_v
+#define GLEE_C_DEFINED_glGetDoublei_v
+  void __stdcall GLee_Lazy_glGetDoublei_v(GLenum  target, GLuint  index, GLdouble * data)  {if (GLeeInit()) glGetDoublei_v(target, index, data);}
+  GLEEPFNGLGETDOUBLEI_VPROC GLeeFuncPtr_glGetDoublei_v=GLee_Lazy_glGetDoublei_v;
+#endif
+#endif 
+
+/* GL_ARB_cl_event */
+
+#ifdef __GLEE_GL_ARB_cl_event
+#ifndef GLEE_C_DEFINED_glCreateSyncFromCLeventARB
+#define GLEE_C_DEFINED_glCreateSyncFromCLeventARB
+  GLsync __stdcall GLee_Lazy_glCreateSyncFromCLeventARB(struct _cl_context *  context, struct _cl_event *  event, GLbitfield  flags)  {if (GLeeInit()) return glCreateSyncFromCLeventARB(context, event, flags); return (GLsync)0;}
+  GLEEPFNGLCREATESYNCFROMCLEVENTARBPROC GLeeFuncPtr_glCreateSyncFromCLeventARB=GLee_Lazy_glCreateSyncFromCLeventARB;
+#endif
+#endif 
+
+/* GL_ARB_robustness */
+
+#ifdef __GLEE_GL_ARB_robustness
+#ifndef GLEE_C_DEFINED_glGetGraphicsResetStatusARB
+#define GLEE_C_DEFINED_glGetGraphicsResetStatusARB
+  GLenum __stdcall GLee_Lazy_glGetGraphicsResetStatusARB(void)  {if (GLeeInit()) return glGetGraphicsResetStatusARB(); return (GLenum)0;}
+  GLEEPFNGLGETGRAPHICSRESETSTATUSARBPROC GLeeFuncPtr_glGetGraphicsResetStatusARB=GLee_Lazy_glGetGraphicsResetStatusARB;
+#endif
+#ifndef GLEE_C_DEFINED_glGetnMapdvARB
+#define GLEE_C_DEFINED_glGetnMapdvARB
+  void __stdcall GLee_Lazy_glGetnMapdvARB(GLenum  target, GLenum  query, GLsizei  bufSize, GLdouble * v)  {if (GLeeInit()) glGetnMapdvARB(target, query, bufSize, v);}
+  GLEEPFNGLGETNMAPDVARBPROC GLeeFuncPtr_glGetnMapdvARB=GLee_Lazy_glGetnMapdvARB;
+#endif
+#ifndef GLEE_C_DEFINED_glGetnMapfvARB
+#define GLEE_C_DEFINED_glGetnMapfvARB
+  void __stdcall GLee_Lazy_glGetnMapfvARB(GLenum  target, GLenum  query, GLsizei  bufSize, GLfloat * v)  {if (GLeeInit()) glGetnMapfvARB(target, query, bufSize, v);}
+  GLEEPFNGLGETNMAPFVARBPROC GLeeFuncPtr_glGetnMapfvARB=GLee_Lazy_glGetnMapfvARB;
+#endif
+#ifndef GLEE_C_DEFINED_glGetnMapivARB
+#define GLEE_C_DEFINED_glGetnMapivARB
+  void __stdcall GLee_Lazy_glGetnMapivARB(GLenum  target, GLenum  query, GLsizei  bufSize, GLint * v)  {if (GLeeInit()) glGetnMapivARB(target, query, bufSize, v);}
+  GLEEPFNGLGETNMAPIVARBPROC GLeeFuncPtr_glGetnMapivARB=GLee_Lazy_glGetnMapivARB;
+#endif
+#ifndef GLEE_C_DEFINED_glGetnPixelMapfvARB
+#define GLEE_C_DEFINED_glGetnPixelMapfvARB
+  void __stdcall GLee_Lazy_glGetnPixelMapfvARB(GLenum  map, GLsizei  bufSize, GLfloat * values)  {if (GLeeInit()) glGetnPixelMapfvARB(map, bufSize, values);}
+  GLEEPFNGLGETNPIXELMAPFVARBPROC GLeeFuncPtr_glGetnPixelMapfvARB=GLee_Lazy_glGetnPixelMapfvARB;
+#endif
+#ifndef GLEE_C_DEFINED_glGetnPixelMapuivARB
+#define GLEE_C_DEFINED_glGetnPixelMapuivARB
+  void __stdcall GLee_Lazy_glGetnPixelMapuivARB(GLenum  map, GLsizei  bufSize, GLuint * values)  {if (GLeeInit()) glGetnPixelMapuivARB(map, bufSize, values);}
+  GLEEPFNGLGETNPIXELMAPUIVARBPROC GLeeFuncPtr_glGetnPixelMapuivARB=GLee_Lazy_glGetnPixelMapuivARB;
+#endif
+#ifndef GLEE_C_DEFINED_glGetnPixelMapusvARB
+#define GLEE_C_DEFINED_glGetnPixelMapusvARB
+  void __stdcall GLee_Lazy_glGetnPixelMapusvARB(GLenum  map, GLsizei  bufSize, GLushort * values)  {if (GLeeInit()) glGetnPixelMapusvARB(map, bufSize, values);}
+  GLEEPFNGLGETNPIXELMAPUSVARBPROC GLeeFuncPtr_glGetnPixelMapusvARB=GLee_Lazy_glGetnPixelMapusvARB;
+#endif
+#ifndef GLEE_C_DEFINED_glGetnPolygonStippleARB
+#define GLEE_C_DEFINED_glGetnPolygonStippleARB
+  void __stdcall GLee_Lazy_glGetnPolygonStippleARB(GLsizei  bufSize, GLubyte * pattern)  {if (GLeeInit()) glGetnPolygonStippleARB(bufSize, pattern);}
+  GLEEPFNGLGETNPOLYGONSTIPPLEARBPROC GLeeFuncPtr_glGetnPolygonStippleARB=GLee_Lazy_glGetnPolygonStippleARB;
+#endif
+#ifndef GLEE_C_DEFINED_glGetnColorTableARB
+#define GLEE_C_DEFINED_glGetnColorTableARB
+  void __stdcall GLee_Lazy_glGetnColorTableARB(GLenum  target, GLenum  format, GLenum  type, GLsizei  bufSize, GLvoid * table)  {if (GLeeInit()) glGetnColorTableARB(target, format, type, bufSize, table);}
+  GLEEPFNGLGETNCOLORTABLEARBPROC GLeeFuncPtr_glGetnColorTableARB=GLee_Lazy_glGetnColorTableARB;
+#endif
+#ifndef GLEE_C_DEFINED_glGetnConvolutionFilterARB
+#define GLEE_C_DEFINED_glGetnConvolutionFilterARB
+  void __stdcall GLee_Lazy_glGetnConvolutionFilterARB(GLenum  target, GLenum  format, GLenum  type, GLsizei  bufSize, GLvoid * image)  {if (GLeeInit()) glGetnConvolutionFilterARB(target, format, type, bufSize, image);}
+  GLEEPFNGLGETNCONVOLUTIONFILTERARBPROC GLeeFuncPtr_glGetnConvolutionFilterARB=GLee_Lazy_glGetnConvolutionFilterARB;
+#endif
+#ifndef GLEE_C_DEFINED_glGetnSeparableFilterARB
+#define GLEE_C_DEFINED_glGetnSeparableFilterARB
+  void __stdcall GLee_Lazy_glGetnSeparableFilterARB(GLenum  target, GLenum  format, GLenum  type, GLsizei  rowBufSize, GLvoid * row, GLsizei  columnBufSize, GLvoid * column, GLvoid * span)  {if (GLeeInit()) glGetnSeparableFilterARB(target, format, type, rowBufSize, row, columnBufSize, column, span);}
+  GLEEPFNGLGETNSEPARABLEFILTERARBPROC GLeeFuncPtr_glGetnSeparableFilterARB=GLee_Lazy_glGetnSeparableFilterARB;
+#endif
+#ifndef GLEE_C_DEFINED_glGetnHistogramARB
+#define GLEE_C_DEFINED_glGetnHistogramARB
+  void __stdcall GLee_Lazy_glGetnHistogramARB(GLenum  target, GLboolean  reset, GLenum  format, GLenum  type, GLsizei  bufSize, GLvoid * values)  {if (GLeeInit()) glGetnHistogramARB(target, reset, format, type, bufSize, values);}
+  GLEEPFNGLGETNHISTOGRAMARBPROC GLeeFuncPtr_glGetnHistogramARB=GLee_Lazy_glGetnHistogramARB;
+#endif
+#ifndef GLEE_C_DEFINED_glGetnMinmaxARB
+#define GLEE_C_DEFINED_glGetnMinmaxARB
+  void __stdcall GLee_Lazy_glGetnMinmaxARB(GLenum  target, GLboolean  reset, GLenum  format, GLenum  type, GLsizei  bufSize, GLvoid * values)  {if (GLeeInit()) glGetnMinmaxARB(target, reset, format, type, bufSize, values);}
+  GLEEPFNGLGETNMINMAXARBPROC GLeeFuncPtr_glGetnMinmaxARB=GLee_Lazy_glGetnMinmaxARB;
+#endif
+#ifndef GLEE_C_DEFINED_glGetnTexImageARB
+#define GLEE_C_DEFINED_glGetnTexImageARB
+  void __stdcall GLee_Lazy_glGetnTexImageARB(GLenum  target, GLint  level, GLenum  format, GLenum  type, GLsizei  bufSize, GLvoid * img)  {if (GLeeInit()) glGetnTexImageARB(target, level, format, type, bufSize, img);}
+  GLEEPFNGLGETNTEXIMAGEARBPROC GLeeFuncPtr_glGetnTexImageARB=GLee_Lazy_glGetnTexImageARB;
+#endif
+#ifndef GLEE_C_DEFINED_glReadnPixelsARB
+#define GLEE_C_DEFINED_glReadnPixelsARB
+  void __stdcall GLee_Lazy_glReadnPixelsARB(GLint  x, GLint  y, GLsizei  width, GLsizei  height, GLenum  format, GLenum  type, GLsizei  bufSize, GLvoid * data)  {if (GLeeInit()) glReadnPixelsARB(x, y, width, height, format, type, bufSize, data);}
+  GLEEPFNGLREADNPIXELSARBPROC GLeeFuncPtr_glReadnPixelsARB=GLee_Lazy_glReadnPixelsARB;
+#endif
+#ifndef GLEE_C_DEFINED_glGetnCompressedTexImageARB
+#define GLEE_C_DEFINED_glGetnCompressedTexImageARB
+  void __stdcall GLee_Lazy_glGetnCompressedTexImageARB(GLenum  target, GLint  lod, GLsizei  bufSize, GLvoid * img)  {if (GLeeInit()) glGetnCompressedTexImageARB(target, lod, bufSize, img);}
+  GLEEPFNGLGETNCOMPRESSEDTEXIMAGEARBPROC GLeeFuncPtr_glGetnCompressedTexImageARB=GLee_Lazy_glGetnCompressedTexImageARB;
+#endif
+#ifndef GLEE_C_DEFINED_glGetnUniformfvARB
+#define GLEE_C_DEFINED_glGetnUniformfvARB
+  void __stdcall GLee_Lazy_glGetnUniformfvARB(GLuint  program, GLint  location, GLsizei  bufSize, GLfloat * params)  {if (GLeeInit()) glGetnUniformfvARB(program, location, bufSize, params);}
+  GLEEPFNGLGETNUNIFORMFVARBPROC GLeeFuncPtr_glGetnUniformfvARB=GLee_Lazy_glGetnUniformfvARB;
+#endif
+#ifndef GLEE_C_DEFINED_glGetnUniformivARB
+#define GLEE_C_DEFINED_glGetnUniformivARB
+  void __stdcall GLee_Lazy_glGetnUniformivARB(GLuint  program, GLint  location, GLsizei  bufSize, GLint * params)  {if (GLeeInit()) glGetnUniformivARB(program, location, bufSize, params);}
+  GLEEPFNGLGETNUNIFORMIVARBPROC GLeeFuncPtr_glGetnUniformivARB=GLee_Lazy_glGetnUniformivARB;
+#endif
+#ifndef GLEE_C_DEFINED_glGetnUniformuivARB
+#define GLEE_C_DEFINED_glGetnUniformuivARB
+  void __stdcall GLee_Lazy_glGetnUniformuivARB(GLuint  program, GLint  location, GLsizei  bufSize, GLuint * params)  {if (GLeeInit()) glGetnUniformuivARB(program, location, bufSize, params);}
+  GLEEPFNGLGETNUNIFORMUIVARBPROC GLeeFuncPtr_glGetnUniformuivARB=GLee_Lazy_glGetnUniformuivARB;
+#endif
+#ifndef GLEE_C_DEFINED_glGetnUniformdvARB
+#define GLEE_C_DEFINED_glGetnUniformdvARB
+  void __stdcall GLee_Lazy_glGetnUniformdvARB(GLuint  program, GLint  location, GLsizei  bufSize, GLdouble * params)  {if (GLeeInit()) glGetnUniformdvARB(program, location, bufSize, params);}
+  GLEEPFNGLGETNUNIFORMDVARBPROC GLeeFuncPtr_glGetnUniformdvARB=GLee_Lazy_glGetnUniformdvARB;
+#endif
+#endif 
+
+/* GL_ARB_shader_stencil_export */
+
+#ifdef __GLEE_GL_ARB_shader_stencil_export
+#endif 
+
+/* GL_ARB_base_instance */
+
+#ifdef __GLEE_GL_ARB_base_instance
+#ifndef GLEE_C_DEFINED_glDrawArraysInstancedBaseInstance
+#define GLEE_C_DEFINED_glDrawArraysInstancedBaseInstance
+  void __stdcall GLee_Lazy_glDrawArraysInstancedBaseInstance(GLenum  mode, GLint  first, GLsizei  count, GLsizei  primcount, GLuint  baseinstance)  {if (GLeeInit()) glDrawArraysInstancedBaseInstance(mode, first, count, primcount, baseinstance);}
+  GLEEPFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC GLeeFuncPtr_glDrawArraysInstancedBaseInstance=GLee_Lazy_glDrawArraysInstancedBaseInstance;
+#endif
+#ifndef GLEE_C_DEFINED_glDrawElementsInstancedBaseInstance
+#define GLEE_C_DEFINED_glDrawElementsInstancedBaseInstance
+  void __stdcall GLee_Lazy_glDrawElementsInstancedBaseInstance(GLenum  mode, GLsizei  count, GLenum  type, const void * indices, GLsizei  primcount, GLuint  baseinstance)  {if (GLeeInit()) glDrawElementsInstancedBaseInstance(mode, count, type, indices, primcount, baseinstance);}
+  GLEEPFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC GLeeFuncPtr_glDrawElementsInstancedBaseInstance=GLee_Lazy_glDrawElementsInstancedBaseInstance;
+#endif
+#ifndef GLEE_C_DEFINED_glDrawElementsInstancedBaseVertexBaseInstance
+#define GLEE_C_DEFINED_glDrawElementsInstancedBaseVertexBaseInstance
+  void __stdcall GLee_Lazy_glDrawElementsInstancedBaseVertexBaseInstance(GLenum  mode, GLsizei  count, GLenum  type, const void * indices, GLsizei  primcount, GLint  basevertex, GLuint  baseinstance)  {if (GLeeInit()) glDrawElementsInstancedBaseVertexBaseInstance(mode, count, type, indices, primcount, basevertex, baseinstance);}
+  GLEEPFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC GLeeFuncPtr_glDrawElementsInstancedBaseVertexBaseInstance=GLee_Lazy_glDrawElementsInstancedBaseVertexBaseInstance;
+#endif
+#endif 
+
+/* GL_ARB_shading_language_420pack */
+
+#ifdef __GLEE_GL_ARB_shading_language_420pack
+#endif 
+
+/* GL_ARB_transform_feedback_instanced */
+
+#ifdef __GLEE_GL_ARB_transform_feedback_instanced
+#ifndef GLEE_C_DEFINED_glDrawTransformFeedbackInstanced
+#define GLEE_C_DEFINED_glDrawTransformFeedbackInstanced
+  void __stdcall GLee_Lazy_glDrawTransformFeedbackInstanced(GLenum  mode, GLuint  id, GLsizei  primcount)  {if (GLeeInit()) glDrawTransformFeedbackInstanced(mode, id, primcount);}
+  GLEEPFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC GLeeFuncPtr_glDrawTransformFeedbackInstanced=GLee_Lazy_glDrawTransformFeedbackInstanced;
+#endif
+#ifndef GLEE_C_DEFINED_glDrawTransformFeedbackStreamInstanced
+#define GLEE_C_DEFINED_glDrawTransformFeedbackStreamInstanced
+  void __stdcall GLee_Lazy_glDrawTransformFeedbackStreamInstanced(GLenum  mode, GLuint  id, GLuint  stream, GLsizei  primcount)  {if (GLeeInit()) glDrawTransformFeedbackStreamInstanced(mode, id, stream, primcount);}
+  GLEEPFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC GLeeFuncPtr_glDrawTransformFeedbackStreamInstanced=GLee_Lazy_glDrawTransformFeedbackStreamInstanced;
+#endif
+#endif 
+
+/* GL_ARB_compressed_texture_pixel_storage */
+
+#ifdef __GLEE_GL_ARB_compressed_texture_pixel_storage
+#endif 
+
+/* GL_ARB_conservative_depth */
+
+#ifdef __GLEE_GL_ARB_conservative_depth
+#endif 
+
+/* GL_ARB_internalformat_query */
+
+#ifdef __GLEE_GL_ARB_internalformat_query
+#ifndef GLEE_C_DEFINED_glGetInternalformativ
+#define GLEE_C_DEFINED_glGetInternalformativ
+  void __stdcall GLee_Lazy_glGetInternalformativ(GLenum  target, GLenum  internalformat, GLenum  pname, GLsizei  bufSize, GLint * params)  {if (GLeeInit()) glGetInternalformativ(target, internalformat, pname, bufSize, params);}
+  GLEEPFNGLGETINTERNALFORMATIVPROC GLeeFuncPtr_glGetInternalformativ=GLee_Lazy_glGetInternalformativ;
+#endif
+#endif 
+
+/* GL_ARB_map_buffer_alignment */
+
+#ifdef __GLEE_GL_ARB_map_buffer_alignment
+#endif 
+
+/* GL_ARB_shader_atomic_counters */
+
+#ifdef __GLEE_GL_ARB_shader_atomic_counters
+#ifndef GLEE_C_DEFINED_glGetActiveAtomicCounterBufferiv
+#define GLEE_C_DEFINED_glGetActiveAtomicCounterBufferiv
+  void __stdcall GLee_Lazy_glGetActiveAtomicCounterBufferiv(GLuint  program, GLuint  bufferIndex, GLenum  pname, GLint * params)  {if (GLeeInit()) glGetActiveAtomicCounterBufferiv(program, bufferIndex, pname, params);}
+  GLEEPFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC GLeeFuncPtr_glGetActiveAtomicCounterBufferiv=GLee_Lazy_glGetActiveAtomicCounterBufferiv;
+#endif
+#endif 
+
+/* GL_ARB_shader_image_load_store */
+
+#ifdef __GLEE_GL_ARB_shader_image_load_store
+#ifndef GLEE_C_DEFINED_glBindImageTexture
+#define GLEE_C_DEFINED_glBindImageTexture
+  void __stdcall GLee_Lazy_glBindImageTexture(GLuint  unit, GLuint  texture, GLint  level, GLboolean  layered, GLint  layer, GLenum  access, GLenum  format)  {if (GLeeInit()) glBindImageTexture(unit, texture, level, layered, layer, access, format);}
+  GLEEPFNGLBINDIMAGETEXTUREPROC GLeeFuncPtr_glBindImageTexture=GLee_Lazy_glBindImageTexture;
+#endif
+#ifndef GLEE_C_DEFINED_glMemoryBarrier
+#define GLEE_C_DEFINED_glMemoryBarrier
+  void __stdcall GLee_Lazy_glMemoryBarrier(GLbitfield  barriers)  {if (GLeeInit()) glMemoryBarrier(barriers);}
+  GLEEPFNGLMEMORYBARRIERPROC GLeeFuncPtr_glMemoryBarrier=GLee_Lazy_glMemoryBarrier;
+#endif
+#endif 
+
+/* GL_ARB_shading_language_packing */
+
+#ifdef __GLEE_GL_ARB_shading_language_packing
+#endif 
+
+/* GL_ARB_texture_storage */
+
+#ifdef __GLEE_GL_ARB_texture_storage
+#ifndef GLEE_C_DEFINED_glTexStorage1D
+#define GLEE_C_DEFINED_glTexStorage1D
+  void __stdcall GLee_Lazy_glTexStorage1D(GLenum  target, GLsizei  levels, GLenum  internalformat, GLsizei  width)  {if (GLeeInit()) glTexStorage1D(target, levels, internalformat, width);}
+  GLEEPFNGLTEXSTORAGE1DPROC GLeeFuncPtr_glTexStorage1D=GLee_Lazy_glTexStorage1D;
+#endif
+#ifndef GLEE_C_DEFINED_glTexStorage2D
+#define GLEE_C_DEFINED_glTexStorage2D
+  void __stdcall GLee_Lazy_glTexStorage2D(GLenum  target, GLsizei  levels, GLenum  internalformat, GLsizei  width, GLsizei  height)  {if (GLeeInit()) glTexStorage2D(target, levels, internalformat, width, height);}
+  GLEEPFNGLTEXSTORAGE2DPROC GLeeFuncPtr_glTexStorage2D=GLee_Lazy_glTexStorage2D;
+#endif
+#ifndef GLEE_C_DEFINED_glTexStorage3D
+#define GLEE_C_DEFINED_glTexStorage3D
+  void __stdcall GLee_Lazy_glTexStorage3D(GLenum  target, GLsizei  levels, GLenum  internalformat, GLsizei  width, GLsizei  height, GLsizei  depth)  {if (GLeeInit()) glTexStorage3D(target, levels, internalformat, width, height, depth);}
+  GLEEPFNGLTEXSTORAGE3DPROC GLeeFuncPtr_glTexStorage3D=GLee_Lazy_glTexStorage3D;
+#endif
+#ifndef GLEE_C_DEFINED_glTextureStorage1DEXT
+#define GLEE_C_DEFINED_glTextureStorage1DEXT
+  void __stdcall GLee_Lazy_glTextureStorage1DEXT(GLuint  texture, GLenum  target, GLsizei  levels, GLenum  internalformat, GLsizei  width)  {if (GLeeInit()) glTextureStorage1DEXT(texture, target, levels, internalformat, width);}
+  GLEEPFNGLTEXTURESTORAGE1DEXTPROC GLeeFuncPtr_glTextureStorage1DEXT=GLee_Lazy_glTextureStorage1DEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glTextureStorage2DEXT
+#define GLEE_C_DEFINED_glTextureStorage2DEXT
+  void __stdcall GLee_Lazy_glTextureStorage2DEXT(GLuint  texture, GLenum  target, GLsizei  levels, GLenum  internalformat, GLsizei  width, GLsizei  height)  {if (GLeeInit()) glTextureStorage2DEXT(texture, target, levels, internalformat, width, height);}
+  GLEEPFNGLTEXTURESTORAGE2DEXTPROC GLeeFuncPtr_glTextureStorage2DEXT=GLee_Lazy_glTextureStorage2DEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glTextureStorage3DEXT
+#define GLEE_C_DEFINED_glTextureStorage3DEXT
+  void __stdcall GLee_Lazy_glTextureStorage3DEXT(GLuint  texture, GLenum  target, GLsizei  levels, GLenum  internalformat, GLsizei  width, GLsizei  height, GLsizei  depth)  {if (GLeeInit()) glTextureStorage3DEXT(texture, target, levels, internalformat, width, height, depth);}
+  GLEEPFNGLTEXTURESTORAGE3DEXTPROC GLeeFuncPtr_glTextureStorage3DEXT=GLee_Lazy_glTextureStorage3DEXT;
+#endif
+#endif 
+
+/* GL_EXT_abgr */
+
+#ifdef __GLEE_GL_EXT_abgr
+#endif 
+
+/* GL_EXT_blend_color */
+
+#ifdef __GLEE_GL_EXT_blend_color
+#ifndef GLEE_C_DEFINED_glBlendColorEXT
+#define GLEE_C_DEFINED_glBlendColorEXT
+  void __stdcall GLee_Lazy_glBlendColorEXT(GLclampf  red, GLclampf  green, GLclampf  blue, GLclampf  alpha)  {if (GLeeInit()) glBlendColorEXT(red, green, blue, alpha);}
+  GLEEPFNGLBLENDCOLOREXTPROC GLeeFuncPtr_glBlendColorEXT=GLee_Lazy_glBlendColorEXT;
+#endif
+#endif 
+
+/* GL_EXT_polygon_offset */
+
+#ifdef __GLEE_GL_EXT_polygon_offset
+#ifndef GLEE_C_DEFINED_glPolygonOffsetEXT
+#define GLEE_C_DEFINED_glPolygonOffsetEXT
+  void __stdcall GLee_Lazy_glPolygonOffsetEXT(GLfloat  factor, GLfloat  bias)  {if (GLeeInit()) glPolygonOffsetEXT(factor, bias);}
+  GLEEPFNGLPOLYGONOFFSETEXTPROC GLeeFuncPtr_glPolygonOffsetEXT=GLee_Lazy_glPolygonOffsetEXT;
+#endif
+#endif 
+
+/* GL_EXT_texture */
+
+#ifdef __GLEE_GL_EXT_texture
+#endif 
+
+/* GL_EXT_texture3D */
+
+#ifdef __GLEE_GL_EXT_texture3D
+#ifndef GLEE_C_DEFINED_glTexImage3DEXT
+#define GLEE_C_DEFINED_glTexImage3DEXT
+  void __stdcall GLee_Lazy_glTexImage3DEXT(GLenum  target, GLint  level, GLenum  internalformat, GLsizei  width, GLsizei  height, GLsizei  depth, GLint  border, GLenum  format, GLenum  type, const GLvoid * pixels)  {if (GLeeInit()) glTexImage3DEXT(target, level, internalformat, width, height, depth, border, format, type, pixels);}
+  GLEEPFNGLTEXIMAGE3DEXTPROC GLeeFuncPtr_glTexImage3DEXT=GLee_Lazy_glTexImage3DEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glTexSubImage3DEXT
+#define GLEE_C_DEFINED_glTexSubImage3DEXT
+  void __stdcall GLee_Lazy_glTexSubImage3DEXT(GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLint  zoffset, GLsizei  width, GLsizei  height, GLsizei  depth, GLenum  format, GLenum  type, const GLvoid * pixels)  {if (GLeeInit()) glTexSubImage3DEXT(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);}
+  GLEEPFNGLTEXSUBIMAGE3DEXTPROC GLeeFuncPtr_glTexSubImage3DEXT=GLee_Lazy_glTexSubImage3DEXT;
+#endif
+#endif 
+
+/* GL_SGIS_texture_filter4 */
+
+#ifdef __GLEE_GL_SGIS_texture_filter4
+#ifndef GLEE_C_DEFINED_glGetTexFilterFuncSGIS
+#define GLEE_C_DEFINED_glGetTexFilterFuncSGIS
+  void __stdcall GLee_Lazy_glGetTexFilterFuncSGIS(GLenum  target, GLenum  filter, GLfloat * weights)  {if (GLeeInit()) glGetTexFilterFuncSGIS(target, filter, weights);}
+  GLEEPFNGLGETTEXFILTERFUNCSGISPROC GLeeFuncPtr_glGetTexFilterFuncSGIS=GLee_Lazy_glGetTexFilterFuncSGIS;
+#endif
+#ifndef GLEE_C_DEFINED_glTexFilterFuncSGIS
+#define GLEE_C_DEFINED_glTexFilterFuncSGIS
+  void __stdcall GLee_Lazy_glTexFilterFuncSGIS(GLenum  target, GLenum  filter, GLsizei  n, const GLfloat * weights)  {if (GLeeInit()) glTexFilterFuncSGIS(target, filter, n, weights);}
+  GLEEPFNGLTEXFILTERFUNCSGISPROC GLeeFuncPtr_glTexFilterFuncSGIS=GLee_Lazy_glTexFilterFuncSGIS;
+#endif
+#endif 
+
+/* GL_EXT_subtexture */
+
+#ifdef __GLEE_GL_EXT_subtexture
+#ifndef GLEE_C_DEFINED_glTexSubImage1DEXT
+#define GLEE_C_DEFINED_glTexSubImage1DEXT
+  void __stdcall GLee_Lazy_glTexSubImage1DEXT(GLenum  target, GLint  level, GLint  xoffset, GLsizei  width, GLenum  format, GLenum  type, const GLvoid * pixels)  {if (GLeeInit()) glTexSubImage1DEXT(target, level, xoffset, width, format, type, pixels);}
+  GLEEPFNGLTEXSUBIMAGE1DEXTPROC GLeeFuncPtr_glTexSubImage1DEXT=GLee_Lazy_glTexSubImage1DEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glTexSubImage2DEXT
+#define GLEE_C_DEFINED_glTexSubImage2DEXT
+  void __stdcall GLee_Lazy_glTexSubImage2DEXT(GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLsizei  width, GLsizei  height, GLenum  format, GLenum  type, const GLvoid * pixels)  {if (GLeeInit()) glTexSubImage2DEXT(target, level, xoffset, yoffset, width, height, format, type, pixels);}
+  GLEEPFNGLTEXSUBIMAGE2DEXTPROC GLeeFuncPtr_glTexSubImage2DEXT=GLee_Lazy_glTexSubImage2DEXT;
+#endif
+#endif 
+
+/* GL_EXT_copy_texture */
+
+#ifdef __GLEE_GL_EXT_copy_texture
+#ifndef GLEE_C_DEFINED_glCopyTexImage1DEXT
+#define GLEE_C_DEFINED_glCopyTexImage1DEXT
+  void __stdcall GLee_Lazy_glCopyTexImage1DEXT(GLenum  target, GLint  level, GLenum  internalformat, GLint  x, GLint  y, GLsizei  width, GLint  border)  {if (GLeeInit()) glCopyTexImage1DEXT(target, level, internalformat, x, y, width, border);}
+  GLEEPFNGLCOPYTEXIMAGE1DEXTPROC GLeeFuncPtr_glCopyTexImage1DEXT=GLee_Lazy_glCopyTexImage1DEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glCopyTexImage2DEXT
+#define GLEE_C_DEFINED_glCopyTexImage2DEXT
+  void __stdcall GLee_Lazy_glCopyTexImage2DEXT(GLenum  target, GLint  level, GLenum  internalformat, GLint  x, GLint  y, GLsizei  width, GLsizei  height, GLint  border)  {if (GLeeInit()) glCopyTexImage2DEXT(target, level, internalformat, x, y, width, height, border);}
+  GLEEPFNGLCOPYTEXIMAGE2DEXTPROC GLeeFuncPtr_glCopyTexImage2DEXT=GLee_Lazy_glCopyTexImage2DEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glCopyTexSubImage1DEXT
+#define GLEE_C_DEFINED_glCopyTexSubImage1DEXT
+  void __stdcall GLee_Lazy_glCopyTexSubImage1DEXT(GLenum  target, GLint  level, GLint  xoffset, GLint  x, GLint  y, GLsizei  width)  {if (GLeeInit()) glCopyTexSubImage1DEXT(target, level, xoffset, x, y, width);}
+  GLEEPFNGLCOPYTEXSUBIMAGE1DEXTPROC GLeeFuncPtr_glCopyTexSubImage1DEXT=GLee_Lazy_glCopyTexSubImage1DEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glCopyTexSubImage2DEXT
+#define GLEE_C_DEFINED_glCopyTexSubImage2DEXT
+  void __stdcall GLee_Lazy_glCopyTexSubImage2DEXT(GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLint  x, GLint  y, GLsizei  width, GLsizei  height)  {if (GLeeInit()) glCopyTexSubImage2DEXT(target, level, xoffset, yoffset, x, y, width, height);}
+  GLEEPFNGLCOPYTEXSUBIMAGE2DEXTPROC GLeeFuncPtr_glCopyTexSubImage2DEXT=GLee_Lazy_glCopyTexSubImage2DEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glCopyTexSubImage3DEXT
+#define GLEE_C_DEFINED_glCopyTexSubImage3DEXT
+  void __stdcall GLee_Lazy_glCopyTexSubImage3DEXT(GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLint  zoffset, GLint  x, GLint  y, GLsizei  width, GLsizei  height)  {if (GLeeInit()) glCopyTexSubImage3DEXT(target, level, xoffset, yoffset, zoffset, x, y, width, height);}
+  GLEEPFNGLCOPYTEXSUBIMAGE3DEXTPROC GLeeFuncPtr_glCopyTexSubImage3DEXT=GLee_Lazy_glCopyTexSubImage3DEXT;
+#endif
+#endif 
+
+/* GL_EXT_histogram */
+
+#ifdef __GLEE_GL_EXT_histogram
+#ifndef GLEE_C_DEFINED_glGetHistogramEXT
+#define GLEE_C_DEFINED_glGetHistogramEXT
+  void __stdcall GLee_Lazy_glGetHistogramEXT(GLenum  target, GLboolean  reset, GLenum  format, GLenum  type, GLvoid * values)  {if (GLeeInit()) glGetHistogramEXT(target, reset, format, type, values);}
+  GLEEPFNGLGETHISTOGRAMEXTPROC GLeeFuncPtr_glGetHistogramEXT=GLee_Lazy_glGetHistogramEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glGetHistogramParameterfvEXT
+#define GLEE_C_DEFINED_glGetHistogramParameterfvEXT
+  void __stdcall GLee_Lazy_glGetHistogramParameterfvEXT(GLenum  target, GLenum  pname, GLfloat * params)  {if (GLeeInit()) glGetHistogramParameterfvEXT(target, pname, params);}
+  GLEEPFNGLGETHISTOGRAMPARAMETERFVEXTPROC GLeeFuncPtr_glGetHistogramParameterfvEXT=GLee_Lazy_glGetHistogramParameterfvEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glGetHistogramParameterivEXT
+#define GLEE_C_DEFINED_glGetHistogramParameterivEXT
+  void __stdcall GLee_Lazy_glGetHistogramParameterivEXT(GLenum  target, GLenum  pname, GLint * params)  {if (GLeeInit()) glGetHistogramParameterivEXT(target, pname, params);}
+  GLEEPFNGLGETHISTOGRAMPARAMETERIVEXTPROC GLeeFuncPtr_glGetHistogramParameterivEXT=GLee_Lazy_glGetHistogramParameterivEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glGetMinmaxEXT
+#define GLEE_C_DEFINED_glGetMinmaxEXT
+  void __stdcall GLee_Lazy_glGetMinmaxEXT(GLenum  target, GLboolean  reset, GLenum  format, GLenum  type, GLvoid * values)  {if (GLeeInit()) glGetMinmaxEXT(target, reset, format, type, values);}
+  GLEEPFNGLGETMINMAXEXTPROC GLeeFuncPtr_glGetMinmaxEXT=GLee_Lazy_glGetMinmaxEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glGetMinmaxParameterfvEXT
+#define GLEE_C_DEFINED_glGetMinmaxParameterfvEXT
+  void __stdcall GLee_Lazy_glGetMinmaxParameterfvEXT(GLenum  target, GLenum  pname, GLfloat * params)  {if (GLeeInit()) glGetMinmaxParameterfvEXT(target, pname, params);}
+  GLEEPFNGLGETMINMAXPARAMETERFVEXTPROC GLeeFuncPtr_glGetMinmaxParameterfvEXT=GLee_Lazy_glGetMinmaxParameterfvEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glGetMinmaxParameterivEXT
+#define GLEE_C_DEFINED_glGetMinmaxParameterivEXT
+  void __stdcall GLee_Lazy_glGetMinmaxParameterivEXT(GLenum  target, GLenum  pname, GLint * params)  {if (GLeeInit()) glGetMinmaxParameterivEXT(target, pname, params);}
+  GLEEPFNGLGETMINMAXPARAMETERIVEXTPROC GLeeFuncPtr_glGetMinmaxParameterivEXT=GLee_Lazy_glGetMinmaxParameterivEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glHistogramEXT
+#define GLEE_C_DEFINED_glHistogramEXT
+  void __stdcall GLee_Lazy_glHistogramEXT(GLenum  target, GLsizei  width, GLenum  internalformat, GLboolean  sink)  {if (GLeeInit()) glHistogramEXT(target, width, internalformat, sink);}
+  GLEEPFNGLHISTOGRAMEXTPROC GLeeFuncPtr_glHistogramEXT=GLee_Lazy_glHistogramEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glMinmaxEXT
+#define GLEE_C_DEFINED_glMinmaxEXT
+  void __stdcall GLee_Lazy_glMinmaxEXT(GLenum  target, GLenum  internalformat, GLboolean  sink)  {if (GLeeInit()) glMinmaxEXT(target, internalformat, sink);}
+  GLEEPFNGLMINMAXEXTPROC GLeeFuncPtr_glMinmaxEXT=GLee_Lazy_glMinmaxEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glResetHistogramEXT
+#define GLEE_C_DEFINED_glResetHistogramEXT
+  void __stdcall GLee_Lazy_glResetHistogramEXT(GLenum  target)  {if (GLeeInit()) glResetHistogramEXT(target);}
+  GLEEPFNGLRESETHISTOGRAMEXTPROC GLeeFuncPtr_glResetHistogramEXT=GLee_Lazy_glResetHistogramEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glResetMinmaxEXT
+#define GLEE_C_DEFINED_glResetMinmaxEXT
+  void __stdcall GLee_Lazy_glResetMinmaxEXT(GLenum  target)  {if (GLeeInit()) glResetMinmaxEXT(target);}
+  GLEEPFNGLRESETMINMAXEXTPROC GLeeFuncPtr_glResetMinmaxEXT=GLee_Lazy_glResetMinmaxEXT;
+#endif
+#endif 
+
+/* GL_EXT_convolution */
+
+#ifdef __GLEE_GL_EXT_convolution
+#ifndef GLEE_C_DEFINED_glConvolutionFilter1DEXT
+#define GLEE_C_DEFINED_glConvolutionFilter1DEXT
+  void __stdcall GLee_Lazy_glConvolutionFilter1DEXT(GLenum  target, GLenum  internalformat, GLsizei  width, GLenum  format, GLenum  type, const GLvoid * image)  {if (GLeeInit()) glConvolutionFilter1DEXT(target, internalformat, width, format, type, image);}
+  GLEEPFNGLCONVOLUTIONFILTER1DEXTPROC GLeeFuncPtr_glConvolutionFilter1DEXT=GLee_Lazy_glConvolutionFilter1DEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glConvolutionFilter2DEXT
+#define GLEE_C_DEFINED_glConvolutionFilter2DEXT
+  void __stdcall GLee_Lazy_glConvolutionFilter2DEXT(GLenum  target, GLenum  internalformat, GLsizei  width, GLsizei  height, GLenum  format, GLenum  type, const GLvoid * image)  {if (GLeeInit()) glConvolutionFilter2DEXT(target, internalformat, width, height, format, type, image);}
+  GLEEPFNGLCONVOLUTIONFILTER2DEXTPROC GLeeFuncPtr_glConvolutionFilter2DEXT=GLee_Lazy_glConvolutionFilter2DEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glConvolutionParameterfEXT
+#define GLEE_C_DEFINED_glConvolutionParameterfEXT
+  void __stdcall GLee_Lazy_glConvolutionParameterfEXT(GLenum  target, GLenum  pname, GLfloat  params)  {if (GLeeInit()) glConvolutionParameterfEXT(target, pname, params);}
+  GLEEPFNGLCONVOLUTIONPARAMETERFEXTPROC GLeeFuncPtr_glConvolutionParameterfEXT=GLee_Lazy_glConvolutionParameterfEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glConvolutionParameterfvEXT
+#define GLEE_C_DEFINED_glConvolutionParameterfvEXT
+  void __stdcall GLee_Lazy_glConvolutionParameterfvEXT(GLenum  target, GLenum  pname, const GLfloat * params)  {if (GLeeInit()) glConvolutionParameterfvEXT(target, pname, params);}
+  GLEEPFNGLCONVOLUTIONPARAMETERFVEXTPROC GLeeFuncPtr_glConvolutionParameterfvEXT=GLee_Lazy_glConvolutionParameterfvEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glConvolutionParameteriEXT
+#define GLEE_C_DEFINED_glConvolutionParameteriEXT
+  void __stdcall GLee_Lazy_glConvolutionParameteriEXT(GLenum  target, GLenum  pname, GLint  params)  {if (GLeeInit()) glConvolutionParameteriEXT(target, pname, params);}
+  GLEEPFNGLCONVOLUTIONPARAMETERIEXTPROC GLeeFuncPtr_glConvolutionParameteriEXT=GLee_Lazy_glConvolutionParameteriEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glConvolutionParameterivEXT
+#define GLEE_C_DEFINED_glConvolutionParameterivEXT
+  void __stdcall GLee_Lazy_glConvolutionParameterivEXT(GLenum  target, GLenum  pname, const GLint * params)  {if (GLeeInit()) glConvolutionParameterivEXT(target, pname, params);}
+  GLEEPFNGLCONVOLUTIONPARAMETERIVEXTPROC GLeeFuncPtr_glConvolutionParameterivEXT=GLee_Lazy_glConvolutionParameterivEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glCopyConvolutionFilter1DEXT
+#define GLEE_C_DEFINED_glCopyConvolutionFilter1DEXT
+  void __stdcall GLee_Lazy_glCopyConvolutionFilter1DEXT(GLenum  target, GLenum  internalformat, GLint  x, GLint  y, GLsizei  width)  {if (GLeeInit()) glCopyConvolutionFilter1DEXT(target, internalformat, x, y, width);}
+  GLEEPFNGLCOPYCONVOLUTIONFILTER1DEXTPROC GLeeFuncPtr_glCopyConvolutionFilter1DEXT=GLee_Lazy_glCopyConvolutionFilter1DEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glCopyConvolutionFilter2DEXT
+#define GLEE_C_DEFINED_glCopyConvolutionFilter2DEXT
+  void __stdcall GLee_Lazy_glCopyConvolutionFilter2DEXT(GLenum  target, GLenum  internalformat, GLint  x, GLint  y, GLsizei  width, GLsizei  height)  {if (GLeeInit()) glCopyConvolutionFilter2DEXT(target, internalformat, x, y, width, height);}
+  GLEEPFNGLCOPYCONVOLUTIONFILTER2DEXTPROC GLeeFuncPtr_glCopyConvolutionFilter2DEXT=GLee_Lazy_glCopyConvolutionFilter2DEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glGetConvolutionFilterEXT
+#define GLEE_C_DEFINED_glGetConvolutionFilterEXT
+  void __stdcall GLee_Lazy_glGetConvolutionFilterEXT(GLenum  target, GLenum  format, GLenum  type, GLvoid * image)  {if (GLeeInit()) glGetConvolutionFilterEXT(target, format, type, image);}
+  GLEEPFNGLGETCONVOLUTIONFILTEREXTPROC GLeeFuncPtr_glGetConvolutionFilterEXT=GLee_Lazy_glGetConvolutionFilterEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glGetConvolutionParameterfvEXT
+#define GLEE_C_DEFINED_glGetConvolutionParameterfvEXT
+  void __stdcall GLee_Lazy_glGetConvolutionParameterfvEXT(GLenum  target, GLenum  pname, GLfloat * params)  {if (GLeeInit()) glGetConvolutionParameterfvEXT(target, pname, params);}
+  GLEEPFNGLGETCONVOLUTIONPARAMETERFVEXTPROC GLeeFuncPtr_glGetConvolutionParameterfvEXT=GLee_Lazy_glGetConvolutionParameterfvEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glGetConvolutionParameterivEXT
+#define GLEE_C_DEFINED_glGetConvolutionParameterivEXT
+  void __stdcall GLee_Lazy_glGetConvolutionParameterivEXT(GLenum  target, GLenum  pname, GLint * params)  {if (GLeeInit()) glGetConvolutionParameterivEXT(target, pname, params);}
+  GLEEPFNGLGETCONVOLUTIONPARAMETERIVEXTPROC GLeeFuncPtr_glGetConvolutionParameterivEXT=GLee_Lazy_glGetConvolutionParameterivEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glGetSeparableFilterEXT
+#define GLEE_C_DEFINED_glGetSeparableFilterEXT
+  void __stdcall GLee_Lazy_glGetSeparableFilterEXT(GLenum  target, GLenum  format, GLenum  type, GLvoid * row, GLvoid * column, GLvoid * span)  {if (GLeeInit()) glGetSeparableFilterEXT(target, format, type, row, column, span);}
+  GLEEPFNGLGETSEPARABLEFILTEREXTPROC GLeeFuncPtr_glGetSeparableFilterEXT=GLee_Lazy_glGetSeparableFilterEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glSeparableFilter2DEXT
+#define GLEE_C_DEFINED_glSeparableFilter2DEXT
+  void __stdcall GLee_Lazy_glSeparableFilter2DEXT(GLenum  target, GLenum  internalformat, GLsizei  width, GLsizei  height, GLenum  format, GLenum  type, const GLvoid * row, const GLvoid * column)  {if (GLeeInit()) glSeparableFilter2DEXT(target, internalformat, width, height, format, type, row, column);}
+  GLEEPFNGLSEPARABLEFILTER2DEXTPROC GLeeFuncPtr_glSeparableFilter2DEXT=GLee_Lazy_glSeparableFilter2DEXT;
+#endif
+#endif 
+
+/* GL_SGI_color_matrix */
+
+#ifdef __GLEE_GL_SGI_color_matrix
+#endif 
+
+/* GL_SGI_color_table */
+
+#ifdef __GLEE_GL_SGI_color_table
+#ifndef GLEE_C_DEFINED_glColorTableSGI
+#define GLEE_C_DEFINED_glColorTableSGI
+  void __stdcall GLee_Lazy_glColorTableSGI(GLenum  target, GLenum  internalformat, GLsizei  width, GLenum  format, GLenum  type, const GLvoid * table)  {if (GLeeInit()) glColorTableSGI(target, internalformat, width, format, type, table);}
+  GLEEPFNGLCOLORTABLESGIPROC GLeeFuncPtr_glColorTableSGI=GLee_Lazy_glColorTableSGI;
+#endif
+#ifndef GLEE_C_DEFINED_glColorTableParameterfvSGI
+#define GLEE_C_DEFINED_glColorTableParameterfvSGI
+  void __stdcall GLee_Lazy_glColorTableParameterfvSGI(GLenum  target, GLenum  pname, const GLfloat * params)  {if (GLeeInit()) glColorTableParameterfvSGI(target, pname, params);}
+  GLEEPFNGLCOLORTABLEPARAMETERFVSGIPROC GLeeFuncPtr_glColorTableParameterfvSGI=GLee_Lazy_glColorTableParameterfvSGI;
+#endif
+#ifndef GLEE_C_DEFINED_glColorTableParameterivSGI
+#define GLEE_C_DEFINED_glColorTableParameterivSGI
+  void __stdcall GLee_Lazy_glColorTableParameterivSGI(GLenum  target, GLenum  pname, const GLint * params)  {if (GLeeInit()) glColorTableParameterivSGI(target, pname, params);}
+  GLEEPFNGLCOLORTABLEPARAMETERIVSGIPROC GLeeFuncPtr_glColorTableParameterivSGI=GLee_Lazy_glColorTableParameterivSGI;
+#endif
+#ifndef GLEE_C_DEFINED_glCopyColorTableSGI
+#define GLEE_C_DEFINED_glCopyColorTableSGI
+  void __stdcall GLee_Lazy_glCopyColorTableSGI(GLenum  target, GLenum  internalformat, GLint  x, GLint  y, GLsizei  width)  {if (GLeeInit()) glCopyColorTableSGI(target, internalformat, x, y, width);}
+  GLEEPFNGLCOPYCOLORTABLESGIPROC GLeeFuncPtr_glCopyColorTableSGI=GLee_Lazy_glCopyColorTableSGI;
+#endif
+#ifndef GLEE_C_DEFINED_glGetColorTableSGI
+#define GLEE_C_DEFINED_glGetColorTableSGI
+  void __stdcall GLee_Lazy_glGetColorTableSGI(GLenum  target, GLenum  format, GLenum  type, GLvoid * table)  {if (GLeeInit()) glGetColorTableSGI(target, format, type, table);}
+  GLEEPFNGLGETCOLORTABLESGIPROC GLeeFuncPtr_glGetColorTableSGI=GLee_Lazy_glGetColorTableSGI;
+#endif
+#ifndef GLEE_C_DEFINED_glGetColorTableParameterfvSGI
+#define GLEE_C_DEFINED_glGetColorTableParameterfvSGI
+  void __stdcall GLee_Lazy_glGetColorTableParameterfvSGI(GLenum  target, GLenum  pname, GLfloat * params)  {if (GLeeInit()) glGetColorTableParameterfvSGI(target, pname, params);}
+  GLEEPFNGLGETCOLORTABLEPARAMETERFVSGIPROC GLeeFuncPtr_glGetColorTableParameterfvSGI=GLee_Lazy_glGetColorTableParameterfvSGI;
+#endif
+#ifndef GLEE_C_DEFINED_glGetColorTableParameterivSGI
+#define GLEE_C_DEFINED_glGetColorTableParameterivSGI
+  void __stdcall GLee_Lazy_glGetColorTableParameterivSGI(GLenum  target, GLenum  pname, GLint * params)  {if (GLeeInit()) glGetColorTableParameterivSGI(target, pname, params);}
+  GLEEPFNGLGETCOLORTABLEPARAMETERIVSGIPROC GLeeFuncPtr_glGetColorTableParameterivSGI=GLee_Lazy_glGetColorTableParameterivSGI;
+#endif
+#endif 
+
+/* GL_SGIS_pixel_texture */
+
+#ifdef __GLEE_GL_SGIS_pixel_texture
+#ifndef GLEE_C_DEFINED_glPixelTexGenParameteriSGIS
+#define GLEE_C_DEFINED_glPixelTexGenParameteriSGIS
+  void __stdcall GLee_Lazy_glPixelTexGenParameteriSGIS(GLenum  pname, GLint  param)  {if (GLeeInit()) glPixelTexGenParameteriSGIS(pname, param);}
+  GLEEPFNGLPIXELTEXGENPARAMETERISGISPROC GLeeFuncPtr_glPixelTexGenParameteriSGIS=GLee_Lazy_glPixelTexGenParameteriSGIS;
+#endif
+#ifndef GLEE_C_DEFINED_glPixelTexGenParameterivSGIS
+#define GLEE_C_DEFINED_glPixelTexGenParameterivSGIS
+  void __stdcall GLee_Lazy_glPixelTexGenParameterivSGIS(GLenum  pname, const GLint * params)  {if (GLeeInit()) glPixelTexGenParameterivSGIS(pname, params);}
+  GLEEPFNGLPIXELTEXGENPARAMETERIVSGISPROC GLeeFuncPtr_glPixelTexGenParameterivSGIS=GLee_Lazy_glPixelTexGenParameterivSGIS;
+#endif
+#ifndef GLEE_C_DEFINED_glPixelTexGenParameterfSGIS
+#define GLEE_C_DEFINED_glPixelTexGenParameterfSGIS
+  void __stdcall GLee_Lazy_glPixelTexGenParameterfSGIS(GLenum  pname, GLfloat  param)  {if (GLeeInit()) glPixelTexGenParameterfSGIS(pname, param);}
+  GLEEPFNGLPIXELTEXGENPARAMETERFSGISPROC GLeeFuncPtr_glPixelTexGenParameterfSGIS=GLee_Lazy_glPixelTexGenParameterfSGIS;
+#endif
+#ifndef GLEE_C_DEFINED_glPixelTexGenParameterfvSGIS
+#define GLEE_C_DEFINED_glPixelTexGenParameterfvSGIS
+  void __stdcall GLee_Lazy_glPixelTexGenParameterfvSGIS(GLenum  pname, const GLfloat * params)  {if (GLeeInit()) glPixelTexGenParameterfvSGIS(pname, params);}
+  GLEEPFNGLPIXELTEXGENPARAMETERFVSGISPROC GLeeFuncPtr_glPixelTexGenParameterfvSGIS=GLee_Lazy_glPixelTexGenParameterfvSGIS;
+#endif
+#ifndef GLEE_C_DEFINED_glGetPixelTexGenParameterivSGIS
+#define GLEE_C_DEFINED_glGetPixelTexGenParameterivSGIS
+  void __stdcall GLee_Lazy_glGetPixelTexGenParameterivSGIS(GLenum  pname, GLint * params)  {if (GLeeInit()) glGetPixelTexGenParameterivSGIS(pname, params);}
+  GLEEPFNGLGETPIXELTEXGENPARAMETERIVSGISPROC GLeeFuncPtr_glGetPixelTexGenParameterivSGIS=GLee_Lazy_glGetPixelTexGenParameterivSGIS;
+#endif
+#ifndef GLEE_C_DEFINED_glGetPixelTexGenParameterfvSGIS
+#define GLEE_C_DEFINED_glGetPixelTexGenParameterfvSGIS
+  void __stdcall GLee_Lazy_glGetPixelTexGenParameterfvSGIS(GLenum  pname, GLfloat * params)  {if (GLeeInit()) glGetPixelTexGenParameterfvSGIS(pname, params);}
+  GLEEPFNGLGETPIXELTEXGENPARAMETERFVSGISPROC GLeeFuncPtr_glGetPixelTexGenParameterfvSGIS=GLee_Lazy_glGetPixelTexGenParameterfvSGIS;
+#endif
+#endif 
+
+/* GL_SGIX_pixel_texture */
+
+#ifdef __GLEE_GL_SGIX_pixel_texture
+#ifndef GLEE_C_DEFINED_glPixelTexGenSGIX
+#define GLEE_C_DEFINED_glPixelTexGenSGIX
+  void __stdcall GLee_Lazy_glPixelTexGenSGIX(GLenum  mode)  {if (GLeeInit()) glPixelTexGenSGIX(mode);}
+  GLEEPFNGLPIXELTEXGENSGIXPROC GLeeFuncPtr_glPixelTexGenSGIX=GLee_Lazy_glPixelTexGenSGIX;
+#endif
+#endif 
+
+/* GL_SGIS_texture4D */
+
+#ifdef __GLEE_GL_SGIS_texture4D
+#ifndef GLEE_C_DEFINED_glTexImage4DSGIS
+#define GLEE_C_DEFINED_glTexImage4DSGIS
+  void __stdcall GLee_Lazy_glTexImage4DSGIS(GLenum  target, GLint  level, GLenum  internalformat, GLsizei  width, GLsizei  height, GLsizei  depth, GLsizei  size4d, GLint  border, GLenum  format, GLenum  type, const GLvoid * pixels)  {if (GLeeInit()) glTexImage4DSGIS(target, level, internalformat, width, height, depth, size4d, border, format, type, pixels);}
+  GLEEPFNGLTEXIMAGE4DSGISPROC GLeeFuncPtr_glTexImage4DSGIS=GLee_Lazy_glTexImage4DSGIS;
+#endif
+#ifndef GLEE_C_DEFINED_glTexSubImage4DSGIS
+#define GLEE_C_DEFINED_glTexSubImage4DSGIS
+  void __stdcall GLee_Lazy_glTexSubImage4DSGIS(GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLint  zoffset, GLint  woffset, GLsizei  width, GLsizei  height, GLsizei  depth, GLsizei  size4d, GLenum  format, GLenum  type, const GLvoid * pixels)  {if (GLeeInit()) glTexSubImage4DSGIS(target, level, xoffset, yoffset, zoffset, woffset, width, height, depth, size4d, format, type, pixels);}
+  GLEEPFNGLTEXSUBIMAGE4DSGISPROC GLeeFuncPtr_glTexSubImage4DSGIS=GLee_Lazy_glTexSubImage4DSGIS;
+#endif
+#endif 
+
+/* GL_SGI_texture_color_table */
+
+#ifdef __GLEE_GL_SGI_texture_color_table
+#endif 
+
+/* GL_EXT_cmyka */
+
+#ifdef __GLEE_GL_EXT_cmyka
+#endif 
+
+/* GL_EXT_texture_object */
+
+#ifdef __GLEE_GL_EXT_texture_object
+#ifndef GLEE_C_DEFINED_glAreTexturesResidentEXT
+#define GLEE_C_DEFINED_glAreTexturesResidentEXT
+  GLboolean __stdcall GLee_Lazy_glAreTexturesResidentEXT(GLsizei  n, const GLuint * textures, GLboolean * residences)  {if (GLeeInit()) return glAreTexturesResidentEXT(n, textures, residences); return (GLboolean)0;}
+  GLEEPFNGLARETEXTURESRESIDENTEXTPROC GLeeFuncPtr_glAreTexturesResidentEXT=GLee_Lazy_glAreTexturesResidentEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glBindTextureEXT
+#define GLEE_C_DEFINED_glBindTextureEXT
+  void __stdcall GLee_Lazy_glBindTextureEXT(GLenum  target, GLuint  texture)  {if (GLeeInit()) glBindTextureEXT(target, texture);}
+  GLEEPFNGLBINDTEXTUREEXTPROC GLeeFuncPtr_glBindTextureEXT=GLee_Lazy_glBindTextureEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glDeleteTexturesEXT
+#define GLEE_C_DEFINED_glDeleteTexturesEXT
+  void __stdcall GLee_Lazy_glDeleteTexturesEXT(GLsizei  n, const GLuint * textures)  {if (GLeeInit()) glDeleteTexturesEXT(n, textures);}
+  GLEEPFNGLDELETETEXTURESEXTPROC GLeeFuncPtr_glDeleteTexturesEXT=GLee_Lazy_glDeleteTexturesEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glGenTexturesEXT
+#define GLEE_C_DEFINED_glGenTexturesEXT
+  void __stdcall GLee_Lazy_glGenTexturesEXT(GLsizei  n, GLuint * textures)  {if (GLeeInit()) glGenTexturesEXT(n, textures);}
+  GLEEPFNGLGENTEXTURESEXTPROC GLeeFuncPtr_glGenTexturesEXT=GLee_Lazy_glGenTexturesEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glIsTextureEXT
+#define GLEE_C_DEFINED_glIsTextureEXT
+  GLboolean __stdcall GLee_Lazy_glIsTextureEXT(GLuint  texture)  {if (GLeeInit()) return glIsTextureEXT(texture); return (GLboolean)0;}
+  GLEEPFNGLISTEXTUREEXTPROC GLeeFuncPtr_glIsTextureEXT=GLee_Lazy_glIsTextureEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glPrioritizeTexturesEXT
+#define GLEE_C_DEFINED_glPrioritizeTexturesEXT
+  void __stdcall GLee_Lazy_glPrioritizeTexturesEXT(GLsizei  n, const GLuint * textures, const GLclampf * priorities)  {if (GLeeInit()) glPrioritizeTexturesEXT(n, textures, priorities);}
+  GLEEPFNGLPRIORITIZETEXTURESEXTPROC GLeeFuncPtr_glPrioritizeTexturesEXT=GLee_Lazy_glPrioritizeTexturesEXT;
+#endif
+#endif 
+
+/* GL_SGIS_detail_texture */
+
+#ifdef __GLEE_GL_SGIS_detail_texture
+#ifndef GLEE_C_DEFINED_glDetailTexFuncSGIS
+#define GLEE_C_DEFINED_glDetailTexFuncSGIS
+  void __stdcall GLee_Lazy_glDetailTexFuncSGIS(GLenum  target, GLsizei  n, const GLfloat * points)  {if (GLeeInit()) glDetailTexFuncSGIS(target, n, points);}
+  GLEEPFNGLDETAILTEXFUNCSGISPROC GLeeFuncPtr_glDetailTexFuncSGIS=GLee_Lazy_glDetailTexFuncSGIS;
+#endif
+#ifndef GLEE_C_DEFINED_glGetDetailTexFuncSGIS
+#define GLEE_C_DEFINED_glGetDetailTexFuncSGIS
+  void __stdcall GLee_Lazy_glGetDetailTexFuncSGIS(GLenum  target, GLfloat * points)  {if (GLeeInit()) glGetDetailTexFuncSGIS(target, points);}
+  GLEEPFNGLGETDETAILTEXFUNCSGISPROC GLeeFuncPtr_glGetDetailTexFuncSGIS=GLee_Lazy_glGetDetailTexFuncSGIS;
+#endif
+#endif 
+
+/* GL_SGIS_sharpen_texture */
+
+#ifdef __GLEE_GL_SGIS_sharpen_texture
+#ifndef GLEE_C_DEFINED_glSharpenTexFuncSGIS
+#define GLEE_C_DEFINED_glSharpenTexFuncSGIS
+  void __stdcall GLee_Lazy_glSharpenTexFuncSGIS(GLenum  target, GLsizei  n, const GLfloat * points)  {if (GLeeInit()) glSharpenTexFuncSGIS(target, n, points);}
+  GLEEPFNGLSHARPENTEXFUNCSGISPROC GLeeFuncPtr_glSharpenTexFuncSGIS=GLee_Lazy_glSharpenTexFuncSGIS;
+#endif
+#ifndef GLEE_C_DEFINED_glGetSharpenTexFuncSGIS
+#define GLEE_C_DEFINED_glGetSharpenTexFuncSGIS
+  void __stdcall GLee_Lazy_glGetSharpenTexFuncSGIS(GLenum  target, GLfloat * points)  {if (GLeeInit()) glGetSharpenTexFuncSGIS(target, points);}
+  GLEEPFNGLGETSHARPENTEXFUNCSGISPROC GLeeFuncPtr_glGetSharpenTexFuncSGIS=GLee_Lazy_glGetSharpenTexFuncSGIS;
+#endif
+#endif 
+
+/* GL_EXT_packed_pixels */
+
+#ifdef __GLEE_GL_EXT_packed_pixels
+#endif 
+
+/* GL_SGIS_texture_lod */
+
+#ifdef __GLEE_GL_SGIS_texture_lod
+#endif 
+
+/* GL_SGIS_multisample */
+
+#ifdef __GLEE_GL_SGIS_multisample
+#ifndef GLEE_C_DEFINED_glSampleMaskSGIS
+#define GLEE_C_DEFINED_glSampleMaskSGIS
+  void __stdcall GLee_Lazy_glSampleMaskSGIS(GLclampf  value, GLboolean  invert)  {if (GLeeInit()) glSampleMaskSGIS(value, invert);}
+  GLEEPFNGLSAMPLEMASKSGISPROC GLeeFuncPtr_glSampleMaskSGIS=GLee_Lazy_glSampleMaskSGIS;
+#endif
+#ifndef GLEE_C_DEFINED_glSamplePatternSGIS
+#define GLEE_C_DEFINED_glSamplePatternSGIS
+  void __stdcall GLee_Lazy_glSamplePatternSGIS(GLenum  pattern)  {if (GLeeInit()) glSamplePatternSGIS(pattern);}
+  GLEEPFNGLSAMPLEPATTERNSGISPROC GLeeFuncPtr_glSamplePatternSGIS=GLee_Lazy_glSamplePatternSGIS;
+#endif
+#endif 
+
+/* GL_EXT_rescale_normal */
+
+#ifdef __GLEE_GL_EXT_rescale_normal
+#endif 
+
+/* GL_EXT_vertex_array */
+
+#ifdef __GLEE_GL_EXT_vertex_array
+#ifndef GLEE_C_DEFINED_glArrayElementEXT
+#define GLEE_C_DEFINED_glArrayElementEXT
+  void __stdcall GLee_Lazy_glArrayElementEXT(GLint  i)  {if (GLeeInit()) glArrayElementEXT(i);}
+  GLEEPFNGLARRAYELEMENTEXTPROC GLeeFuncPtr_glArrayElementEXT=GLee_Lazy_glArrayElementEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glColorPointerEXT
+#define GLEE_C_DEFINED_glColorPointerEXT
+  void __stdcall GLee_Lazy_glColorPointerEXT(GLint  size, GLenum  type, GLsizei  stride, GLsizei  count, const GLvoid * pointer)  {if (GLeeInit()) glColorPointerEXT(size, type, stride, count, pointer);}
+  GLEEPFNGLCOLORPOINTEREXTPROC GLeeFuncPtr_glColorPointerEXT=GLee_Lazy_glColorPointerEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glDrawArraysEXT
+#define GLEE_C_DEFINED_glDrawArraysEXT
+  void __stdcall GLee_Lazy_glDrawArraysEXT(GLenum  mode, GLint  first, GLsizei  count)  {if (GLeeInit()) glDrawArraysEXT(mode, first, count);}
+  GLEEPFNGLDRAWARRAYSEXTPROC GLeeFuncPtr_glDrawArraysEXT=GLee_Lazy_glDrawArraysEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glEdgeFlagPointerEXT
+#define GLEE_C_DEFINED_glEdgeFlagPointerEXT
+  void __stdcall GLee_Lazy_glEdgeFlagPointerEXT(GLsizei  stride, GLsizei  count, const GLboolean * pointer)  {if (GLeeInit()) glEdgeFlagPointerEXT(stride, count, pointer);}
+  GLEEPFNGLEDGEFLAGPOINTEREXTPROC GLeeFuncPtr_glEdgeFlagPointerEXT=GLee_Lazy_glEdgeFlagPointerEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glGetPointervEXT
+#define GLEE_C_DEFINED_glGetPointervEXT
+  void __stdcall GLee_Lazy_glGetPointervEXT(GLenum  pname, GLvoid* * params)  {if (GLeeInit()) glGetPointervEXT(pname, params);}
+  GLEEPFNGLGETPOINTERVEXTPROC GLeeFuncPtr_glGetPointervEXT=GLee_Lazy_glGetPointervEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glIndexPointerEXT
+#define GLEE_C_DEFINED_glIndexPointerEXT
+  void __stdcall GLee_Lazy_glIndexPointerEXT(GLenum  type, GLsizei  stride, GLsizei  count, const GLvoid * pointer)  {if (GLeeInit()) glIndexPointerEXT(type, stride, count, pointer);}
+  GLEEPFNGLINDEXPOINTEREXTPROC GLeeFuncPtr_glIndexPointerEXT=GLee_Lazy_glIndexPointerEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glNormalPointerEXT
+#define GLEE_C_DEFINED_glNormalPointerEXT
+  void __stdcall GLee_Lazy_glNormalPointerEXT(GLenum  type, GLsizei  stride, GLsizei  count, const GLvoid * pointer)  {if (GLeeInit()) glNormalPointerEXT(type, stride, count, pointer);}
+  GLEEPFNGLNORMALPOINTEREXTPROC GLeeFuncPtr_glNormalPointerEXT=GLee_Lazy_glNormalPointerEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glTexCoordPointerEXT
+#define GLEE_C_DEFINED_glTexCoordPointerEXT
+  void __stdcall GLee_Lazy_glTexCoordPointerEXT(GLint  size, GLenum  type, GLsizei  stride, GLsizei  count, const GLvoid * pointer)  {if (GLeeInit()) glTexCoordPointerEXT(size, type, stride, count, pointer);}
+  GLEEPFNGLTEXCOORDPOINTEREXTPROC GLeeFuncPtr_glTexCoordPointerEXT=GLee_Lazy_glTexCoordPointerEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexPointerEXT
+#define GLEE_C_DEFINED_glVertexPointerEXT
+  void __stdcall GLee_Lazy_glVertexPointerEXT(GLint  size, GLenum  type, GLsizei  stride, GLsizei  count, const GLvoid * pointer)  {if (GLeeInit()) glVertexPointerEXT(size, type, stride, count, pointer);}
+  GLEEPFNGLVERTEXPOINTEREXTPROC GLeeFuncPtr_glVertexPointerEXT=GLee_Lazy_glVertexPointerEXT;
+#endif
+#endif 
+
+/* GL_EXT_misc_attribute */
+
+#ifdef __GLEE_GL_EXT_misc_attribute
+#endif 
+
+/* GL_SGIS_generate_mipmap */
+
+#ifdef __GLEE_GL_SGIS_generate_mipmap
+#endif 
+
+/* GL_SGIX_clipmap */
+
+#ifdef __GLEE_GL_SGIX_clipmap
+#endif 
+
+/* GL_SGIX_shadow */
+
+#ifdef __GLEE_GL_SGIX_shadow
+#endif 
+
+/* GL_SGIS_texture_edge_clamp */
+
+#ifdef __GLEE_GL_SGIS_texture_edge_clamp
+#endif 
+
+/* GL_SGIS_texture_border_clamp */
+
+#ifdef __GLEE_GL_SGIS_texture_border_clamp
+#endif 
+
+/* GL_EXT_blend_minmax */
+
+#ifdef __GLEE_GL_EXT_blend_minmax
+#ifndef GLEE_C_DEFINED_glBlendEquationEXT
+#define GLEE_C_DEFINED_glBlendEquationEXT
+  void __stdcall GLee_Lazy_glBlendEquationEXT(GLenum  mode)  {if (GLeeInit()) glBlendEquationEXT(mode);}
+  GLEEPFNGLBLENDEQUATIONEXTPROC GLeeFuncPtr_glBlendEquationEXT=GLee_Lazy_glBlendEquationEXT;
+#endif
+#endif 
+
+/* GL_EXT_blend_subtract */
+
+#ifdef __GLEE_GL_EXT_blend_subtract
+#endif 
+
+/* GL_EXT_blend_logic_op */
+
+#ifdef __GLEE_GL_EXT_blend_logic_op
+#endif 
+
+/* GL_SGIX_interlace */
+
+#ifdef __GLEE_GL_SGIX_interlace
+#endif 
+
+/* GL_SGIX_pixel_tiles */
+
+#ifdef __GLEE_GL_SGIX_pixel_tiles
+#endif 
+
+/* GL_SGIS_texture_select */
+
+#ifdef __GLEE_GL_SGIS_texture_select
+#endif 
+
+/* GL_SGIX_sprite */
+
+#ifdef __GLEE_GL_SGIX_sprite
+#ifndef GLEE_C_DEFINED_glSpriteParameterfSGIX
+#define GLEE_C_DEFINED_glSpriteParameterfSGIX
+  void __stdcall GLee_Lazy_glSpriteParameterfSGIX(GLenum  pname, GLfloat  param)  {if (GLeeInit()) glSpriteParameterfSGIX(pname, param);}
+  GLEEPFNGLSPRITEPARAMETERFSGIXPROC GLeeFuncPtr_glSpriteParameterfSGIX=GLee_Lazy_glSpriteParameterfSGIX;
+#endif
+#ifndef GLEE_C_DEFINED_glSpriteParameterfvSGIX
+#define GLEE_C_DEFINED_glSpriteParameterfvSGIX
+  void __stdcall GLee_Lazy_glSpriteParameterfvSGIX(GLenum  pname, const GLfloat * params)  {if (GLeeInit()) glSpriteParameterfvSGIX(pname, params);}
+  GLEEPFNGLSPRITEPARAMETERFVSGIXPROC GLeeFuncPtr_glSpriteParameterfvSGIX=GLee_Lazy_glSpriteParameterfvSGIX;
+#endif
+#ifndef GLEE_C_DEFINED_glSpriteParameteriSGIX
+#define GLEE_C_DEFINED_glSpriteParameteriSGIX
+  void __stdcall GLee_Lazy_glSpriteParameteriSGIX(GLenum  pname, GLint  param)  {if (GLeeInit()) glSpriteParameteriSGIX(pname, param);}
+  GLEEPFNGLSPRITEPARAMETERISGIXPROC GLeeFuncPtr_glSpriteParameteriSGIX=GLee_Lazy_glSpriteParameteriSGIX;
+#endif
+#ifndef GLEE_C_DEFINED_glSpriteParameterivSGIX
+#define GLEE_C_DEFINED_glSpriteParameterivSGIX
+  void __stdcall GLee_Lazy_glSpriteParameterivSGIX(GLenum  pname, const GLint * params)  {if (GLeeInit()) glSpriteParameterivSGIX(pname, params);}
+  GLEEPFNGLSPRITEPARAMETERIVSGIXPROC GLeeFuncPtr_glSpriteParameterivSGIX=GLee_Lazy_glSpriteParameterivSGIX;
+#endif
+#endif 
+
+/* GL_SGIX_texture_multi_buffer */
+
+#ifdef __GLEE_GL_SGIX_texture_multi_buffer
+#endif 
+
+/* GL_EXT_point_parameters */
+
+#ifdef __GLEE_GL_EXT_point_parameters
+#ifndef GLEE_C_DEFINED_glPointParameterfEXT
+#define GLEE_C_DEFINED_glPointParameterfEXT
+  void __stdcall GLee_Lazy_glPointParameterfEXT(GLenum  pname, GLfloat  param)  {if (GLeeInit()) glPointParameterfEXT(pname, param);}
+  GLEEPFNGLPOINTPARAMETERFEXTPROC GLeeFuncPtr_glPointParameterfEXT=GLee_Lazy_glPointParameterfEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glPointParameterfvEXT
+#define GLEE_C_DEFINED_glPointParameterfvEXT
+  void __stdcall GLee_Lazy_glPointParameterfvEXT(GLenum  pname, const GLfloat * params)  {if (GLeeInit()) glPointParameterfvEXT(pname, params);}
+  GLEEPFNGLPOINTPARAMETERFVEXTPROC GLeeFuncPtr_glPointParameterfvEXT=GLee_Lazy_glPointParameterfvEXT;
+#endif
+#endif 
+
+/* GL_SGIS_point_parameters */
+
+#ifdef __GLEE_GL_SGIS_point_parameters
+#ifndef GLEE_C_DEFINED_glPointParameterfSGIS
+#define GLEE_C_DEFINED_glPointParameterfSGIS
+  void __stdcall GLee_Lazy_glPointParameterfSGIS(GLenum  pname, GLfloat  param)  {if (GLeeInit()) glPointParameterfSGIS(pname, param);}
+  GLEEPFNGLPOINTPARAMETERFSGISPROC GLeeFuncPtr_glPointParameterfSGIS=GLee_Lazy_glPointParameterfSGIS;
+#endif
+#ifndef GLEE_C_DEFINED_glPointParameterfvSGIS
+#define GLEE_C_DEFINED_glPointParameterfvSGIS
+  void __stdcall GLee_Lazy_glPointParameterfvSGIS(GLenum  pname, const GLfloat * params)  {if (GLeeInit()) glPointParameterfvSGIS(pname, params);}
+  GLEEPFNGLPOINTPARAMETERFVSGISPROC GLeeFuncPtr_glPointParameterfvSGIS=GLee_Lazy_glPointParameterfvSGIS;
+#endif
+#endif 
+
+/* GL_SGIX_instruments */
+
+#ifdef __GLEE_GL_SGIX_instruments
+#ifndef GLEE_C_DEFINED_glGetInstrumentsSGIX
+#define GLEE_C_DEFINED_glGetInstrumentsSGIX
+  GLint __stdcall GLee_Lazy_glGetInstrumentsSGIX(void)  {if (GLeeInit()) return glGetInstrumentsSGIX(); return (GLint)0;}
+  GLEEPFNGLGETINSTRUMENTSSGIXPROC GLeeFuncPtr_glGetInstrumentsSGIX=GLee_Lazy_glGetInstrumentsSGIX;
+#endif
+#ifndef GLEE_C_DEFINED_glInstrumentsBufferSGIX
+#define GLEE_C_DEFINED_glInstrumentsBufferSGIX
+  void __stdcall GLee_Lazy_glInstrumentsBufferSGIX(GLsizei  size, GLint * buffer)  {if (GLeeInit()) glInstrumentsBufferSGIX(size, buffer);}
+  GLEEPFNGLINSTRUMENTSBUFFERSGIXPROC GLeeFuncPtr_glInstrumentsBufferSGIX=GLee_Lazy_glInstrumentsBufferSGIX;
+#endif
+#ifndef GLEE_C_DEFINED_glPollInstrumentsSGIX
+#define GLEE_C_DEFINED_glPollInstrumentsSGIX
+  GLint __stdcall GLee_Lazy_glPollInstrumentsSGIX(GLint * marker_p)  {if (GLeeInit()) return glPollInstrumentsSGIX(marker_p); return (GLint)0;}
+  GLEEPFNGLPOLLINSTRUMENTSSGIXPROC GLeeFuncPtr_glPollInstrumentsSGIX=GLee_Lazy_glPollInstrumentsSGIX;
+#endif
+#ifndef GLEE_C_DEFINED_glReadInstrumentsSGIX
+#define GLEE_C_DEFINED_glReadInstrumentsSGIX
+  void __stdcall GLee_Lazy_glReadInstrumentsSGIX(GLint  marker)  {if (GLeeInit()) glReadInstrumentsSGIX(marker);}
+  GLEEPFNGLREADINSTRUMENTSSGIXPROC GLeeFuncPtr_glReadInstrumentsSGIX=GLee_Lazy_glReadInstrumentsSGIX;
+#endif
+#ifndef GLEE_C_DEFINED_glStartInstrumentsSGIX
+#define GLEE_C_DEFINED_glStartInstrumentsSGIX
+  void __stdcall GLee_Lazy_glStartInstrumentsSGIX(void)  {if (GLeeInit()) glStartInstrumentsSGIX();}
+  GLEEPFNGLSTARTINSTRUMENTSSGIXPROC GLeeFuncPtr_glStartInstrumentsSGIX=GLee_Lazy_glStartInstrumentsSGIX;
+#endif
+#ifndef GLEE_C_DEFINED_glStopInstrumentsSGIX
+#define GLEE_C_DEFINED_glStopInstrumentsSGIX
+  void __stdcall GLee_Lazy_glStopInstrumentsSGIX(GLint  marker)  {if (GLeeInit()) glStopInstrumentsSGIX(marker);}
+  GLEEPFNGLSTOPINSTRUMENTSSGIXPROC GLeeFuncPtr_glStopInstrumentsSGIX=GLee_Lazy_glStopInstrumentsSGIX;
+#endif
+#endif 
+
+/* GL_SGIX_texture_scale_bias */
+
+#ifdef __GLEE_GL_SGIX_texture_scale_bias
+#endif 
+
+/* GL_SGIX_framezoom */
+
+#ifdef __GLEE_GL_SGIX_framezoom
+#ifndef GLEE_C_DEFINED_glFrameZoomSGIX
+#define GLEE_C_DEFINED_glFrameZoomSGIX
+  void __stdcall GLee_Lazy_glFrameZoomSGIX(GLint  factor)  {if (GLeeInit()) glFrameZoomSGIX(factor);}
+  GLEEPFNGLFRAMEZOOMSGIXPROC GLeeFuncPtr_glFrameZoomSGIX=GLee_Lazy_glFrameZoomSGIX;
+#endif
+#endif 
+
+/* GL_SGIX_tag_sample_buffer */
+
+#ifdef __GLEE_GL_SGIX_tag_sample_buffer
+#ifndef GLEE_C_DEFINED_glTagSampleBufferSGIX
+#define GLEE_C_DEFINED_glTagSampleBufferSGIX
+  void __stdcall GLee_Lazy_glTagSampleBufferSGIX(void)  {if (GLeeInit()) glTagSampleBufferSGIX();}
+  GLEEPFNGLTAGSAMPLEBUFFERSGIXPROC GLeeFuncPtr_glTagSampleBufferSGIX=GLee_Lazy_glTagSampleBufferSGIX;
+#endif
+#endif 
+
+/* GL_FfdMaskSGIX */
+
+#ifdef __GLEE_GL_FfdMaskSGIX
+#endif 
+
+/* GL_SGIX_polynomial_ffd */
+
+#ifdef __GLEE_GL_SGIX_polynomial_ffd
+#ifndef GLEE_C_DEFINED_glDeformationMap3dSGIX
+#define GLEE_C_DEFINED_glDeformationMap3dSGIX
+  void __stdcall GLee_Lazy_glDeformationMap3dSGIX(GLenum  target, GLdouble  u1, GLdouble  u2, GLint  ustride, GLint  uorder, GLdouble  v1, GLdouble  v2, GLint  vstride, GLint  vorder, GLdouble  w1, GLdouble  w2, GLint  wstride, GLint  worder, const GLdouble * points)  {if (GLeeInit()) glDeformationMap3dSGIX(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points);}
+  GLEEPFNGLDEFORMATIONMAP3DSGIXPROC GLeeFuncPtr_glDeformationMap3dSGIX=GLee_Lazy_glDeformationMap3dSGIX;
+#endif
+#ifndef GLEE_C_DEFINED_glDeformationMap3fSGIX
+#define GLEE_C_DEFINED_glDeformationMap3fSGIX
+  void __stdcall GLee_Lazy_glDeformationMap3fSGIX(GLenum  target, GLfloat  u1, GLfloat  u2, GLint  ustride, GLint  uorder, GLfloat  v1, GLfloat  v2, GLint  vstride, GLint  vorder, GLfloat  w1, GLfloat  w2, GLint  wstride, GLint  worder, const GLfloat * points)  {if (GLeeInit()) glDeformationMap3fSGIX(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points);}
+  GLEEPFNGLDEFORMATIONMAP3FSGIXPROC GLeeFuncPtr_glDeformationMap3fSGIX=GLee_Lazy_glDeformationMap3fSGIX;
+#endif
+#ifndef GLEE_C_DEFINED_glDeformSGIX
+#define GLEE_C_DEFINED_glDeformSGIX
+  void __stdcall GLee_Lazy_glDeformSGIX(GLbitfield  mask)  {if (GLeeInit()) glDeformSGIX(mask);}
+  GLEEPFNGLDEFORMSGIXPROC GLeeFuncPtr_glDeformSGIX=GLee_Lazy_glDeformSGIX;
+#endif
+#ifndef GLEE_C_DEFINED_glLoadIdentityDeformationMapSGIX
+#define GLEE_C_DEFINED_glLoadIdentityDeformationMapSGIX
+  void __stdcall GLee_Lazy_glLoadIdentityDeformationMapSGIX(GLbitfield  mask)  {if (GLeeInit()) glLoadIdentityDeformationMapSGIX(mask);}
+  GLEEPFNGLLOADIDENTITYDEFORMATIONMAPSGIXPROC GLeeFuncPtr_glLoadIdentityDeformationMapSGIX=GLee_Lazy_glLoadIdentityDeformationMapSGIX;
+#endif
+#endif 
+
+/* GL_SGIX_reference_plane */
+
+#ifdef __GLEE_GL_SGIX_reference_plane
+#ifndef GLEE_C_DEFINED_glReferencePlaneSGIX
+#define GLEE_C_DEFINED_glReferencePlaneSGIX
+  void __stdcall GLee_Lazy_glReferencePlaneSGIX(const GLdouble * equation)  {if (GLeeInit()) glReferencePlaneSGIX(equation);}
+  GLEEPFNGLREFERENCEPLANESGIXPROC GLeeFuncPtr_glReferencePlaneSGIX=GLee_Lazy_glReferencePlaneSGIX;
+#endif
+#endif 
+
+/* GL_SGIX_flush_raster */
+
+#ifdef __GLEE_GL_SGIX_flush_raster
+#ifndef GLEE_C_DEFINED_glFlushRasterSGIX
+#define GLEE_C_DEFINED_glFlushRasterSGIX
+  void __stdcall GLee_Lazy_glFlushRasterSGIX(void)  {if (GLeeInit()) glFlushRasterSGIX();}
+  GLEEPFNGLFLUSHRASTERSGIXPROC GLeeFuncPtr_glFlushRasterSGIX=GLee_Lazy_glFlushRasterSGIX;
+#endif
+#endif 
+
+/* GL_SGIX_depth_texture */
+
+#ifdef __GLEE_GL_SGIX_depth_texture
+#endif 
+
+/* GL_SGIS_fog_function */
+
+#ifdef __GLEE_GL_SGIS_fog_function
+#ifndef GLEE_C_DEFINED_glFogFuncSGIS
+#define GLEE_C_DEFINED_glFogFuncSGIS
+  void __stdcall GLee_Lazy_glFogFuncSGIS(GLsizei  n, const GLfloat * points)  {if (GLeeInit()) glFogFuncSGIS(n, points);}
+  GLEEPFNGLFOGFUNCSGISPROC GLeeFuncPtr_glFogFuncSGIS=GLee_Lazy_glFogFuncSGIS;
+#endif
+#ifndef GLEE_C_DEFINED_glGetFogFuncSGIS
+#define GLEE_C_DEFINED_glGetFogFuncSGIS
+  void __stdcall GLee_Lazy_glGetFogFuncSGIS(GLfloat * points)  {if (GLeeInit()) glGetFogFuncSGIS(points);}
+  GLEEPFNGLGETFOGFUNCSGISPROC GLeeFuncPtr_glGetFogFuncSGIS=GLee_Lazy_glGetFogFuncSGIS;
+#endif
+#endif 
+
+/* GL_SGIX_fog_offset */
+
+#ifdef __GLEE_GL_SGIX_fog_offset
+#endif 
+
+/* GL_HP_image_transform */
+
+#ifdef __GLEE_GL_HP_image_transform
+#ifndef GLEE_C_DEFINED_glImageTransformParameteriHP
+#define GLEE_C_DEFINED_glImageTransformParameteriHP
+  void __stdcall GLee_Lazy_glImageTransformParameteriHP(GLenum  target, GLenum  pname, GLint  param)  {if (GLeeInit()) glImageTransformParameteriHP(target, pname, param);}
+  GLEEPFNGLIMAGETRANSFORMPARAMETERIHPPROC GLeeFuncPtr_glImageTransformParameteriHP=GLee_Lazy_glImageTransformParameteriHP;
+#endif
+#ifndef GLEE_C_DEFINED_glImageTransformParameterfHP
+#define GLEE_C_DEFINED_glImageTransformParameterfHP
+  void __stdcall GLee_Lazy_glImageTransformParameterfHP(GLenum  target, GLenum  pname, GLfloat  param)  {if (GLeeInit()) glImageTransformParameterfHP(target, pname, param);}
+  GLEEPFNGLIMAGETRANSFORMPARAMETERFHPPROC GLeeFuncPtr_glImageTransformParameterfHP=GLee_Lazy_glImageTransformParameterfHP;
+#endif
+#ifndef GLEE_C_DEFINED_glImageTransformParameterivHP
+#define GLEE_C_DEFINED_glImageTransformParameterivHP
+  void __stdcall GLee_Lazy_glImageTransformParameterivHP(GLenum  target, GLenum  pname, const GLint * params)  {if (GLeeInit()) glImageTransformParameterivHP(target, pname, params);}
+  GLEEPFNGLIMAGETRANSFORMPARAMETERIVHPPROC GLeeFuncPtr_glImageTransformParameterivHP=GLee_Lazy_glImageTransformParameterivHP;
+#endif
+#ifndef GLEE_C_DEFINED_glImageTransformParameterfvHP
+#define GLEE_C_DEFINED_glImageTransformParameterfvHP
+  void __stdcall GLee_Lazy_glImageTransformParameterfvHP(GLenum  target, GLenum  pname, const GLfloat * params)  {if (GLeeInit()) glImageTransformParameterfvHP(target, pname, params);}
+  GLEEPFNGLIMAGETRANSFORMPARAMETERFVHPPROC GLeeFuncPtr_glImageTransformParameterfvHP=GLee_Lazy_glImageTransformParameterfvHP;
+#endif
+#ifndef GLEE_C_DEFINED_glGetImageTransformParameterivHP
+#define GLEE_C_DEFINED_glGetImageTransformParameterivHP
+  void __stdcall GLee_Lazy_glGetImageTransformParameterivHP(GLenum  target, GLenum  pname, GLint * params)  {if (GLeeInit()) glGetImageTransformParameterivHP(target, pname, params);}
+  GLEEPFNGLGETIMAGETRANSFORMPARAMETERIVHPPROC GLeeFuncPtr_glGetImageTransformParameterivHP=GLee_Lazy_glGetImageTransformParameterivHP;
+#endif
+#ifndef GLEE_C_DEFINED_glGetImageTransformParameterfvHP
+#define GLEE_C_DEFINED_glGetImageTransformParameterfvHP
+  void __stdcall GLee_Lazy_glGetImageTransformParameterfvHP(GLenum  target, GLenum  pname, GLfloat * params)  {if (GLeeInit()) glGetImageTransformParameterfvHP(target, pname, params);}
+  GLEEPFNGLGETIMAGETRANSFORMPARAMETERFVHPPROC GLeeFuncPtr_glGetImageTransformParameterfvHP=GLee_Lazy_glGetImageTransformParameterfvHP;
+#endif
+#endif 
+
+/* GL_HP_convolution_border_modes */
+
+#ifdef __GLEE_GL_HP_convolution_border_modes
+#endif 
+
+/* GL_INGR_palette_buffer */
+
+#ifdef __GLEE_GL_INGR_palette_buffer
+#endif 
+
+/* GL_SGIX_texture_add_env */
+
+#ifdef __GLEE_GL_SGIX_texture_add_env
+#endif 
+
+/* GL_EXT_color_subtable */
+
+#ifdef __GLEE_GL_EXT_color_subtable
+#ifndef GLEE_C_DEFINED_glColorSubTableEXT
+#define GLEE_C_DEFINED_glColorSubTableEXT
+  void __stdcall GLee_Lazy_glColorSubTableEXT(GLenum  target, GLsizei  start, GLsizei  count, GLenum  format, GLenum  type, const GLvoid * data)  {if (GLeeInit()) glColorSubTableEXT(target, start, count, format, type, data);}
+  GLEEPFNGLCOLORSUBTABLEEXTPROC GLeeFuncPtr_glColorSubTableEXT=GLee_Lazy_glColorSubTableEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glCopyColorSubTableEXT
+#define GLEE_C_DEFINED_glCopyColorSubTableEXT
+  void __stdcall GLee_Lazy_glCopyColorSubTableEXT(GLenum  target, GLsizei  start, GLint  x, GLint  y, GLsizei  width)  {if (GLeeInit()) glCopyColorSubTableEXT(target, start, x, y, width);}
+  GLEEPFNGLCOPYCOLORSUBTABLEEXTPROC GLeeFuncPtr_glCopyColorSubTableEXT=GLee_Lazy_glCopyColorSubTableEXT;
+#endif
+#endif 
+
+/* GL_PGI_vertex_hints */
+
+#ifdef __GLEE_GL_PGI_vertex_hints
+#endif 
+
+/* GL_PGI_misc_hints */
+
+#ifdef __GLEE_GL_PGI_misc_hints
+#ifndef GLEE_C_DEFINED_glHintPGI
+#define GLEE_C_DEFINED_glHintPGI
+  void __stdcall GLee_Lazy_glHintPGI(GLenum  target, GLint  mode)  {if (GLeeInit()) glHintPGI(target, mode);}
+  GLEEPFNGLHINTPGIPROC GLeeFuncPtr_glHintPGI=GLee_Lazy_glHintPGI;
+#endif
+#endif 
+
+/* GL_EXT_paletted_texture */
+
+#ifdef __GLEE_GL_EXT_paletted_texture
+#ifndef GLEE_C_DEFINED_glColorTableEXT
+#define GLEE_C_DEFINED_glColorTableEXT
+  void __stdcall GLee_Lazy_glColorTableEXT(GLenum  target, GLenum  internalFormat, GLsizei  width, GLenum  format, GLenum  type, const GLvoid * table)  {if (GLeeInit()) glColorTableEXT(target, internalFormat, width, format, type, table);}
+  GLEEPFNGLCOLORTABLEEXTPROC GLeeFuncPtr_glColorTableEXT=GLee_Lazy_glColorTableEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glGetColorTableEXT
+#define GLEE_C_DEFINED_glGetColorTableEXT
+  void __stdcall GLee_Lazy_glGetColorTableEXT(GLenum  target, GLenum  format, GLenum  type, GLvoid * data)  {if (GLeeInit()) glGetColorTableEXT(target, format, type, data);}
+  GLEEPFNGLGETCOLORTABLEEXTPROC GLeeFuncPtr_glGetColorTableEXT=GLee_Lazy_glGetColorTableEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glGetColorTableParameterivEXT
+#define GLEE_C_DEFINED_glGetColorTableParameterivEXT
+  void __stdcall GLee_Lazy_glGetColorTableParameterivEXT(GLenum  target, GLenum  pname, GLint * params)  {if (GLeeInit()) glGetColorTableParameterivEXT(target, pname, params);}
+  GLEEPFNGLGETCOLORTABLEPARAMETERIVEXTPROC GLeeFuncPtr_glGetColorTableParameterivEXT=GLee_Lazy_glGetColorTableParameterivEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glGetColorTableParameterfvEXT
+#define GLEE_C_DEFINED_glGetColorTableParameterfvEXT
+  void __stdcall GLee_Lazy_glGetColorTableParameterfvEXT(GLenum  target, GLenum  pname, GLfloat * params)  {if (GLeeInit()) glGetColorTableParameterfvEXT(target, pname, params);}
+  GLEEPFNGLGETCOLORTABLEPARAMETERFVEXTPROC GLeeFuncPtr_glGetColorTableParameterfvEXT=GLee_Lazy_glGetColorTableParameterfvEXT;
+#endif
+#endif 
+
+/* GL_EXT_clip_volume_hint */
+
+#ifdef __GLEE_GL_EXT_clip_volume_hint
+#endif 
+
+/* GL_SGIX_list_priority */
+
+#ifdef __GLEE_GL_SGIX_list_priority
+#ifndef GLEE_C_DEFINED_glGetListParameterfvSGIX
+#define GLEE_C_DEFINED_glGetListParameterfvSGIX
+  void __stdcall GLee_Lazy_glGetListParameterfvSGIX(GLuint  list, GLenum  pname, GLfloat * params)  {if (GLeeInit()) glGetListParameterfvSGIX(list, pname, params);}
+  GLEEPFNGLGETLISTPARAMETERFVSGIXPROC GLeeFuncPtr_glGetListParameterfvSGIX=GLee_Lazy_glGetListParameterfvSGIX;
+#endif
+#ifndef GLEE_C_DEFINED_glGetListParameterivSGIX
+#define GLEE_C_DEFINED_glGetListParameterivSGIX
+  void __stdcall GLee_Lazy_glGetListParameterivSGIX(GLuint  list, GLenum  pname, GLint * params)  {if (GLeeInit()) glGetListParameterivSGIX(list, pname, params);}
+  GLEEPFNGLGETLISTPARAMETERIVSGIXPROC GLeeFuncPtr_glGetListParameterivSGIX=GLee_Lazy_glGetListParameterivSGIX;
+#endif
+#ifndef GLEE_C_DEFINED_glListParameterfSGIX
+#define GLEE_C_DEFINED_glListParameterfSGIX
+  void __stdcall GLee_Lazy_glListParameterfSGIX(GLuint  list, GLenum  pname, GLfloat  param)  {if (GLeeInit()) glListParameterfSGIX(list, pname, param);}
+  GLEEPFNGLLISTPARAMETERFSGIXPROC GLeeFuncPtr_glListParameterfSGIX=GLee_Lazy_glListParameterfSGIX;
+#endif
+#ifndef GLEE_C_DEFINED_glListParameterfvSGIX
+#define GLEE_C_DEFINED_glListParameterfvSGIX
+  void __stdcall GLee_Lazy_glListParameterfvSGIX(GLuint  list, GLenum  pname, const GLfloat * params)  {if (GLeeInit()) glListParameterfvSGIX(list, pname, params);}
+  GLEEPFNGLLISTPARAMETERFVSGIXPROC GLeeFuncPtr_glListParameterfvSGIX=GLee_Lazy_glListParameterfvSGIX;
+#endif
+#ifndef GLEE_C_DEFINED_glListParameteriSGIX
+#define GLEE_C_DEFINED_glListParameteriSGIX
+  void __stdcall GLee_Lazy_glListParameteriSGIX(GLuint  list, GLenum  pname, GLint  param)  {if (GLeeInit()) glListParameteriSGIX(list, pname, param);}
+  GLEEPFNGLLISTPARAMETERISGIXPROC GLeeFuncPtr_glListParameteriSGIX=GLee_Lazy_glListParameteriSGIX;
+#endif
+#ifndef GLEE_C_DEFINED_glListParameterivSGIX
+#define GLEE_C_DEFINED_glListParameterivSGIX
+  void __stdcall GLee_Lazy_glListParameterivSGIX(GLuint  list, GLenum  pname, const GLint * params)  {if (GLeeInit()) glListParameterivSGIX(list, pname, params);}
+  GLEEPFNGLLISTPARAMETERIVSGIXPROC GLeeFuncPtr_glListParameterivSGIX=GLee_Lazy_glListParameterivSGIX;
+#endif
+#endif 
+
+/* GL_SGIX_ir_instrument1 */
+
+#ifdef __GLEE_GL_SGIX_ir_instrument1
+#endif 
+
+/* GL_SGIX_calligraphic_fragment */
+
+#ifdef __GLEE_GL_SGIX_calligraphic_fragment
+#endif 
+
+/* GL_SGIX_texture_lod_bias */
+
+#ifdef __GLEE_GL_SGIX_texture_lod_bias
+#endif 
+
+/* GL_SGIX_shadow_ambient */
+
+#ifdef __GLEE_GL_SGIX_shadow_ambient
+#endif 
+
+/* GL_EXT_index_texture */
+
+#ifdef __GLEE_GL_EXT_index_texture
+#endif 
+
+/* GL_EXT_index_material */
+
+#ifdef __GLEE_GL_EXT_index_material
+#ifndef GLEE_C_DEFINED_glIndexMaterialEXT
+#define GLEE_C_DEFINED_glIndexMaterialEXT
+  void __stdcall GLee_Lazy_glIndexMaterialEXT(GLenum  face, GLenum  mode)  {if (GLeeInit()) glIndexMaterialEXT(face, mode);}
+  GLEEPFNGLINDEXMATERIALEXTPROC GLeeFuncPtr_glIndexMaterialEXT=GLee_Lazy_glIndexMaterialEXT;
+#endif
+#endif 
+
+/* GL_EXT_index_func */
+
+#ifdef __GLEE_GL_EXT_index_func
+#ifndef GLEE_C_DEFINED_glIndexFuncEXT
+#define GLEE_C_DEFINED_glIndexFuncEXT
+  void __stdcall GLee_Lazy_glIndexFuncEXT(GLenum  func, GLclampf  ref)  {if (GLeeInit()) glIndexFuncEXT(func, ref);}
+  GLEEPFNGLINDEXFUNCEXTPROC GLeeFuncPtr_glIndexFuncEXT=GLee_Lazy_glIndexFuncEXT;
+#endif
+#endif 
+
+/* GL_EXT_index_array_formats */
+
+#ifdef __GLEE_GL_EXT_index_array_formats
+#endif 
+
+/* GL_EXT_compiled_vertex_array */
+
+#ifdef __GLEE_GL_EXT_compiled_vertex_array
+#ifndef GLEE_C_DEFINED_glLockArraysEXT
+#define GLEE_C_DEFINED_glLockArraysEXT
+  void __stdcall GLee_Lazy_glLockArraysEXT(GLint  first, GLsizei  count)  {if (GLeeInit()) glLockArraysEXT(first, count);}
+  GLEEPFNGLLOCKARRAYSEXTPROC GLeeFuncPtr_glLockArraysEXT=GLee_Lazy_glLockArraysEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glUnlockArraysEXT
+#define GLEE_C_DEFINED_glUnlockArraysEXT
+  void __stdcall GLee_Lazy_glUnlockArraysEXT(void)  {if (GLeeInit()) glUnlockArraysEXT();}
+  GLEEPFNGLUNLOCKARRAYSEXTPROC GLeeFuncPtr_glUnlockArraysEXT=GLee_Lazy_glUnlockArraysEXT;
+#endif
+#endif 
+
+/* GL_EXT_cull_vertex */
+
+#ifdef __GLEE_GL_EXT_cull_vertex
+#ifndef GLEE_C_DEFINED_glCullParameterdvEXT
+#define GLEE_C_DEFINED_glCullParameterdvEXT
+  void __stdcall GLee_Lazy_glCullParameterdvEXT(GLenum  pname, GLdouble * params)  {if (GLeeInit()) glCullParameterdvEXT(pname, params);}
+  GLEEPFNGLCULLPARAMETERDVEXTPROC GLeeFuncPtr_glCullParameterdvEXT=GLee_Lazy_glCullParameterdvEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glCullParameterfvEXT
+#define GLEE_C_DEFINED_glCullParameterfvEXT
+  void __stdcall GLee_Lazy_glCullParameterfvEXT(GLenum  pname, GLfloat * params)  {if (GLeeInit()) glCullParameterfvEXT(pname, params);}
+  GLEEPFNGLCULLPARAMETERFVEXTPROC GLeeFuncPtr_glCullParameterfvEXT=GLee_Lazy_glCullParameterfvEXT;
+#endif
+#endif 
+
+/* GL_SGIX_ycrcb */
+
+#ifdef __GLEE_GL_SGIX_ycrcb
+#endif 
+
+/* GL_SGIX_fragment_lighting */
+
+#ifdef __GLEE_GL_SGIX_fragment_lighting
+#ifndef GLEE_C_DEFINED_glFragmentColorMaterialSGIX
+#define GLEE_C_DEFINED_glFragmentColorMaterialSGIX
+  void __stdcall GLee_Lazy_glFragmentColorMaterialSGIX(GLenum  face, GLenum  mode)  {if (GLeeInit()) glFragmentColorMaterialSGIX(face, mode);}
+  GLEEPFNGLFRAGMENTCOLORMATERIALSGIXPROC GLeeFuncPtr_glFragmentColorMaterialSGIX=GLee_Lazy_glFragmentColorMaterialSGIX;
+#endif
+#ifndef GLEE_C_DEFINED_glFragmentLightfSGIX
+#define GLEE_C_DEFINED_glFragmentLightfSGIX
+  void __stdcall GLee_Lazy_glFragmentLightfSGIX(GLenum  light, GLenum  pname, GLfloat  param)  {if (GLeeInit()) glFragmentLightfSGIX(light, pname, param);}
+  GLEEPFNGLFRAGMENTLIGHTFSGIXPROC GLeeFuncPtr_glFragmentLightfSGIX=GLee_Lazy_glFragmentLightfSGIX;
+#endif
+#ifndef GLEE_C_DEFINED_glFragmentLightfvSGIX
+#define GLEE_C_DEFINED_glFragmentLightfvSGIX
+  void __stdcall GLee_Lazy_glFragmentLightfvSGIX(GLenum  light, GLenum  pname, const GLfloat * params)  {if (GLeeInit()) glFragmentLightfvSGIX(light, pname, params);}
+  GLEEPFNGLFRAGMENTLIGHTFVSGIXPROC GLeeFuncPtr_glFragmentLightfvSGIX=GLee_Lazy_glFragmentLightfvSGIX;
+#endif
+#ifndef GLEE_C_DEFINED_glFragmentLightiSGIX
+#define GLEE_C_DEFINED_glFragmentLightiSGIX
+  void __stdcall GLee_Lazy_glFragmentLightiSGIX(GLenum  light, GLenum  pname, GLint  param)  {if (GLeeInit()) glFragmentLightiSGIX(light, pname, param);}
+  GLEEPFNGLFRAGMENTLIGHTISGIXPROC GLeeFuncPtr_glFragmentLightiSGIX=GLee_Lazy_glFragmentLightiSGIX;
+#endif
+#ifndef GLEE_C_DEFINED_glFragmentLightivSGIX
+#define GLEE_C_DEFINED_glFragmentLightivSGIX
+  void __stdcall GLee_Lazy_glFragmentLightivSGIX(GLenum  light, GLenum  pname, const GLint * params)  {if (GLeeInit()) glFragmentLightivSGIX(light, pname, params);}
+  GLEEPFNGLFRAGMENTLIGHTIVSGIXPROC GLeeFuncPtr_glFragmentLightivSGIX=GLee_Lazy_glFragmentLightivSGIX;
+#endif
+#ifndef GLEE_C_DEFINED_glFragmentLightModelfSGIX
+#define GLEE_C_DEFINED_glFragmentLightModelfSGIX
+  void __stdcall GLee_Lazy_glFragmentLightModelfSGIX(GLenum  pname, GLfloat  param)  {if (GLeeInit()) glFragmentLightModelfSGIX(pname, param);}
+  GLEEPFNGLFRAGMENTLIGHTMODELFSGIXPROC GLeeFuncPtr_glFragmentLightModelfSGIX=GLee_Lazy_glFragmentLightModelfSGIX;
+#endif
+#ifndef GLEE_C_DEFINED_glFragmentLightModelfvSGIX
+#define GLEE_C_DEFINED_glFragmentLightModelfvSGIX
+  void __stdcall GLee_Lazy_glFragmentLightModelfvSGIX(GLenum  pname, const GLfloat * params)  {if (GLeeInit()) glFragmentLightModelfvSGIX(pname, params);}
+  GLEEPFNGLFRAGMENTLIGHTMODELFVSGIXPROC GLeeFuncPtr_glFragmentLightModelfvSGIX=GLee_Lazy_glFragmentLightModelfvSGIX;
+#endif
+#ifndef GLEE_C_DEFINED_glFragmentLightModeliSGIX
+#define GLEE_C_DEFINED_glFragmentLightModeliSGIX
+  void __stdcall GLee_Lazy_glFragmentLightModeliSGIX(GLenum  pname, GLint  param)  {if (GLeeInit()) glFragmentLightModeliSGIX(pname, param);}
+  GLEEPFNGLFRAGMENTLIGHTMODELISGIXPROC GLeeFuncPtr_glFragmentLightModeliSGIX=GLee_Lazy_glFragmentLightModeliSGIX;
+#endif
+#ifndef GLEE_C_DEFINED_glFragmentLightModelivSGIX
+#define GLEE_C_DEFINED_glFragmentLightModelivSGIX
+  void __stdcall GLee_Lazy_glFragmentLightModelivSGIX(GLenum  pname, const GLint * params)  {if (GLeeInit()) glFragmentLightModelivSGIX(pname, params);}
+  GLEEPFNGLFRAGMENTLIGHTMODELIVSGIXPROC GLeeFuncPtr_glFragmentLightModelivSGIX=GLee_Lazy_glFragmentLightModelivSGIX;
+#endif
+#ifndef GLEE_C_DEFINED_glFragmentMaterialfSGIX
+#define GLEE_C_DEFINED_glFragmentMaterialfSGIX
+  void __stdcall GLee_Lazy_glFragmentMaterialfSGIX(GLenum  face, GLenum  pname, GLfloat  param)  {if (GLeeInit()) glFragmentMaterialfSGIX(face, pname, param);}
+  GLEEPFNGLFRAGMENTMATERIALFSGIXPROC GLeeFuncPtr_glFragmentMaterialfSGIX=GLee_Lazy_glFragmentMaterialfSGIX;
+#endif
+#ifndef GLEE_C_DEFINED_glFragmentMaterialfvSGIX
+#define GLEE_C_DEFINED_glFragmentMaterialfvSGIX
+  void __stdcall GLee_Lazy_glFragmentMaterialfvSGIX(GLenum  face, GLenum  pname, const GLfloat * params)  {if (GLeeInit()) glFragmentMaterialfvSGIX(face, pname, params);}
+  GLEEPFNGLFRAGMENTMATERIALFVSGIXPROC GLeeFuncPtr_glFragmentMaterialfvSGIX=GLee_Lazy_glFragmentMaterialfvSGIX;
+#endif
+#ifndef GLEE_C_DEFINED_glFragmentMaterialiSGIX
+#define GLEE_C_DEFINED_glFragmentMaterialiSGIX
+  void __stdcall GLee_Lazy_glFragmentMaterialiSGIX(GLenum  face, GLenum  pname, GLint  param)  {if (GLeeInit()) glFragmentMaterialiSGIX(face, pname, param);}
+  GLEEPFNGLFRAGMENTMATERIALISGIXPROC GLeeFuncPtr_glFragmentMaterialiSGIX=GLee_Lazy_glFragmentMaterialiSGIX;
+#endif
+#ifndef GLEE_C_DEFINED_glFragmentMaterialivSGIX
+#define GLEE_C_DEFINED_glFragmentMaterialivSGIX
+  void __stdcall GLee_Lazy_glFragmentMaterialivSGIX(GLenum  face, GLenum  pname, const GLint * params)  {if (GLeeInit()) glFragmentMaterialivSGIX(face, pname, params);}
+  GLEEPFNGLFRAGMENTMATERIALIVSGIXPROC GLeeFuncPtr_glFragmentMaterialivSGIX=GLee_Lazy_glFragmentMaterialivSGIX;
+#endif
+#ifndef GLEE_C_DEFINED_glGetFragmentLightfvSGIX
+#define GLEE_C_DEFINED_glGetFragmentLightfvSGIX
+  void __stdcall GLee_Lazy_glGetFragmentLightfvSGIX(GLenum  light, GLenum  pname, GLfloat * params)  {if (GLeeInit()) glGetFragmentLightfvSGIX(light, pname, params);}
+  GLEEPFNGLGETFRAGMENTLIGHTFVSGIXPROC GLeeFuncPtr_glGetFragmentLightfvSGIX=GLee_Lazy_glGetFragmentLightfvSGIX;
+#endif
+#ifndef GLEE_C_DEFINED_glGetFragmentLightivSGIX
+#define GLEE_C_DEFINED_glGetFragmentLightivSGIX
+  void __stdcall GLee_Lazy_glGetFragmentLightivSGIX(GLenum  light, GLenum  pname, GLint * params)  {if (GLeeInit()) glGetFragmentLightivSGIX(light, pname, params);}
+  GLEEPFNGLGETFRAGMENTLIGHTIVSGIXPROC GLeeFuncPtr_glGetFragmentLightivSGIX=GLee_Lazy_glGetFragmentLightivSGIX;
+#endif
+#ifndef GLEE_C_DEFINED_glGetFragmentMaterialfvSGIX
+#define GLEE_C_DEFINED_glGetFragmentMaterialfvSGIX
+  void __stdcall GLee_Lazy_glGetFragmentMaterialfvSGIX(GLenum  face, GLenum  pname, GLfloat * params)  {if (GLeeInit()) glGetFragmentMaterialfvSGIX(face, pname, params);}
+  GLEEPFNGLGETFRAGMENTMATERIALFVSGIXPROC GLeeFuncPtr_glGetFragmentMaterialfvSGIX=GLee_Lazy_glGetFragmentMaterialfvSGIX;
+#endif
+#ifndef GLEE_C_DEFINED_glGetFragmentMaterialivSGIX
+#define GLEE_C_DEFINED_glGetFragmentMaterialivSGIX
+  void __stdcall GLee_Lazy_glGetFragmentMaterialivSGIX(GLenum  face, GLenum  pname, GLint * params)  {if (GLeeInit()) glGetFragmentMaterialivSGIX(face, pname, params);}
+  GLEEPFNGLGETFRAGMENTMATERIALIVSGIXPROC GLeeFuncPtr_glGetFragmentMaterialivSGIX=GLee_Lazy_glGetFragmentMaterialivSGIX;
+#endif
+#ifndef GLEE_C_DEFINED_glLightEnviSGIX
+#define GLEE_C_DEFINED_glLightEnviSGIX
+  void __stdcall GLee_Lazy_glLightEnviSGIX(GLenum  pname, GLint  param)  {if (GLeeInit()) glLightEnviSGIX(pname, param);}
+  GLEEPFNGLLIGHTENVISGIXPROC GLeeFuncPtr_glLightEnviSGIX=GLee_Lazy_glLightEnviSGIX;
+#endif
+#endif 
+
+/* GL_IBM_rasterpos_clip */
+
+#ifdef __GLEE_GL_IBM_rasterpos_clip
+#endif 
+
+/* GL_HP_texture_lighting */
+
+#ifdef __GLEE_GL_HP_texture_lighting
+#endif 
+
+/* GL_EXT_draw_range_elements */
+
+#ifdef __GLEE_GL_EXT_draw_range_elements
+#ifndef GLEE_C_DEFINED_glDrawRangeElementsEXT
+#define GLEE_C_DEFINED_glDrawRangeElementsEXT
+  void __stdcall GLee_Lazy_glDrawRangeElementsEXT(GLenum  mode, GLuint  start, GLuint  end, GLsizei  count, GLenum  type, const GLvoid * indices)  {if (GLeeInit()) glDrawRangeElementsEXT(mode, start, end, count, type, indices);}
+  GLEEPFNGLDRAWRANGEELEMENTSEXTPROC GLeeFuncPtr_glDrawRangeElementsEXT=GLee_Lazy_glDrawRangeElementsEXT;
+#endif
+#endif 
+
+/* GL_WIN_phong_shading */
+
+#ifdef __GLEE_GL_WIN_phong_shading
+#endif 
+
+/* GL_WIN_specular_fog */
+
+#ifdef __GLEE_GL_WIN_specular_fog
+#endif 
+
+/* GL_EXT_light_texture */
+
+#ifdef __GLEE_GL_EXT_light_texture
+#ifndef GLEE_C_DEFINED_glApplyTextureEXT
+#define GLEE_C_DEFINED_glApplyTextureEXT
+  void __stdcall GLee_Lazy_glApplyTextureEXT(GLenum  mode)  {if (GLeeInit()) glApplyTextureEXT(mode);}
+  GLEEPFNGLAPPLYTEXTUREEXTPROC GLeeFuncPtr_glApplyTextureEXT=GLee_Lazy_glApplyTextureEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glTextureLightEXT
+#define GLEE_C_DEFINED_glTextureLightEXT
+  void __stdcall GLee_Lazy_glTextureLightEXT(GLenum  pname)  {if (GLeeInit()) glTextureLightEXT(pname);}
+  GLEEPFNGLTEXTURELIGHTEXTPROC GLeeFuncPtr_glTextureLightEXT=GLee_Lazy_glTextureLightEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glTextureMaterialEXT
+#define GLEE_C_DEFINED_glTextureMaterialEXT
+  void __stdcall GLee_Lazy_glTextureMaterialEXT(GLenum  face, GLenum  mode)  {if (GLeeInit()) glTextureMaterialEXT(face, mode);}
+  GLEEPFNGLTEXTUREMATERIALEXTPROC GLeeFuncPtr_glTextureMaterialEXT=GLee_Lazy_glTextureMaterialEXT;
+#endif
+#endif 
+
+/* GL_SGIX_blend_alpha_minmax */
+
+#ifdef __GLEE_GL_SGIX_blend_alpha_minmax
+#endif 
+
+/* GL_SGIX_impact_pixel_texture */
+
+#ifdef __GLEE_GL_SGIX_impact_pixel_texture
+#endif 
+
+/* GL_EXT_bgra */
+
+#ifdef __GLEE_GL_EXT_bgra
+#endif 
+
+/* GL_SGIX_async */
+
+#ifdef __GLEE_GL_SGIX_async
+#ifndef GLEE_C_DEFINED_glAsyncMarkerSGIX
+#define GLEE_C_DEFINED_glAsyncMarkerSGIX
+  void __stdcall GLee_Lazy_glAsyncMarkerSGIX(GLuint  marker)  {if (GLeeInit()) glAsyncMarkerSGIX(marker);}
+  GLEEPFNGLASYNCMARKERSGIXPROC GLeeFuncPtr_glAsyncMarkerSGIX=GLee_Lazy_glAsyncMarkerSGIX;
+#endif
+#ifndef GLEE_C_DEFINED_glFinishAsyncSGIX
+#define GLEE_C_DEFINED_glFinishAsyncSGIX
+  GLint __stdcall GLee_Lazy_glFinishAsyncSGIX(GLuint * markerp)  {if (GLeeInit()) return glFinishAsyncSGIX(markerp); return (GLint)0;}
+  GLEEPFNGLFINISHASYNCSGIXPROC GLeeFuncPtr_glFinishAsyncSGIX=GLee_Lazy_glFinishAsyncSGIX;
+#endif
+#ifndef GLEE_C_DEFINED_glPollAsyncSGIX
+#define GLEE_C_DEFINED_glPollAsyncSGIX
+  GLint __stdcall GLee_Lazy_glPollAsyncSGIX(GLuint * markerp)  {if (GLeeInit()) return glPollAsyncSGIX(markerp); return (GLint)0;}
+  GLEEPFNGLPOLLASYNCSGIXPROC GLeeFuncPtr_glPollAsyncSGIX=GLee_Lazy_glPollAsyncSGIX;
+#endif
+#ifndef GLEE_C_DEFINED_glGenAsyncMarkersSGIX
+#define GLEE_C_DEFINED_glGenAsyncMarkersSGIX
+  GLuint __stdcall GLee_Lazy_glGenAsyncMarkersSGIX(GLsizei  range)  {if (GLeeInit()) return glGenAsyncMarkersSGIX(range); return (GLuint)0;}
+  GLEEPFNGLGENASYNCMARKERSSGIXPROC GLeeFuncPtr_glGenAsyncMarkersSGIX=GLee_Lazy_glGenAsyncMarkersSGIX;
+#endif
+#ifndef GLEE_C_DEFINED_glDeleteAsyncMarkersSGIX
+#define GLEE_C_DEFINED_glDeleteAsyncMarkersSGIX
+  void __stdcall GLee_Lazy_glDeleteAsyncMarkersSGIX(GLuint  marker, GLsizei  range)  {if (GLeeInit()) glDeleteAsyncMarkersSGIX(marker, range);}
+  GLEEPFNGLDELETEASYNCMARKERSSGIXPROC GLeeFuncPtr_glDeleteAsyncMarkersSGIX=GLee_Lazy_glDeleteAsyncMarkersSGIX;
+#endif
+#ifndef GLEE_C_DEFINED_glIsAsyncMarkerSGIX
+#define GLEE_C_DEFINED_glIsAsyncMarkerSGIX
+  GLboolean __stdcall GLee_Lazy_glIsAsyncMarkerSGIX(GLuint  marker)  {if (GLeeInit()) return glIsAsyncMarkerSGIX(marker); return (GLboolean)0;}
+  GLEEPFNGLISASYNCMARKERSGIXPROC GLeeFuncPtr_glIsAsyncMarkerSGIX=GLee_Lazy_glIsAsyncMarkerSGIX;
+#endif
+#endif 
+
+/* GL_SGIX_async_pixel */
+
+#ifdef __GLEE_GL_SGIX_async_pixel
+#endif 
+
+/* GL_SGIX_async_histogram */
+
+#ifdef __GLEE_GL_SGIX_async_histogram
+#endif 
+
+/* GL_INTEL_texture_scissor */
+
+#ifdef __GLEE_GL_INTEL_texture_scissor
+#endif 
+
+/* GL_INTEL_parallel_arrays */
+
+#ifdef __GLEE_GL_INTEL_parallel_arrays
+#ifndef GLEE_C_DEFINED_glVertexPointervINTEL
+#define GLEE_C_DEFINED_glVertexPointervINTEL
+  void __stdcall GLee_Lazy_glVertexPointervINTEL(GLint  size, GLenum  type, const GLvoid* * pointer)  {if (GLeeInit()) glVertexPointervINTEL(size, type, pointer);}
+  GLEEPFNGLVERTEXPOINTERVINTELPROC GLeeFuncPtr_glVertexPointervINTEL=GLee_Lazy_glVertexPointervINTEL;
+#endif
+#ifndef GLEE_C_DEFINED_glNormalPointervINTEL
+#define GLEE_C_DEFINED_glNormalPointervINTEL
+  void __stdcall GLee_Lazy_glNormalPointervINTEL(GLenum  type, const GLvoid* * pointer)  {if (GLeeInit()) glNormalPointervINTEL(type, pointer);}
+  GLEEPFNGLNORMALPOINTERVINTELPROC GLeeFuncPtr_glNormalPointervINTEL=GLee_Lazy_glNormalPointervINTEL;
+#endif
+#ifndef GLEE_C_DEFINED_glColorPointervINTEL
+#define GLEE_C_DEFINED_glColorPointervINTEL
+  void __stdcall GLee_Lazy_glColorPointervINTEL(GLint  size, GLenum  type, const GLvoid* * pointer)  {if (GLeeInit()) glColorPointervINTEL(size, type, pointer);}
+  GLEEPFNGLCOLORPOINTERVINTELPROC GLeeFuncPtr_glColorPointervINTEL=GLee_Lazy_glColorPointervINTEL;
+#endif
+#ifndef GLEE_C_DEFINED_glTexCoordPointervINTEL
+#define GLEE_C_DEFINED_glTexCoordPointervINTEL
+  void __stdcall GLee_Lazy_glTexCoordPointervINTEL(GLint  size, GLenum  type, const GLvoid* * pointer)  {if (GLeeInit()) glTexCoordPointervINTEL(size, type, pointer);}
+  GLEEPFNGLTEXCOORDPOINTERVINTELPROC GLeeFuncPtr_glTexCoordPointervINTEL=GLee_Lazy_glTexCoordPointervINTEL;
+#endif
+#endif 
+
+/* GL_HP_occlusion_test */
+
+#ifdef __GLEE_GL_HP_occlusion_test
+#endif 
+
+/* GL_EXT_pixel_transform */
+
+#ifdef __GLEE_GL_EXT_pixel_transform
+#ifndef GLEE_C_DEFINED_glPixelTransformParameteriEXT
+#define GLEE_C_DEFINED_glPixelTransformParameteriEXT
+  void __stdcall GLee_Lazy_glPixelTransformParameteriEXT(GLenum  target, GLenum  pname, GLint  param)  {if (GLeeInit()) glPixelTransformParameteriEXT(target, pname, param);}
+  GLEEPFNGLPIXELTRANSFORMPARAMETERIEXTPROC GLeeFuncPtr_glPixelTransformParameteriEXT=GLee_Lazy_glPixelTransformParameteriEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glPixelTransformParameterfEXT
+#define GLEE_C_DEFINED_glPixelTransformParameterfEXT
+  void __stdcall GLee_Lazy_glPixelTransformParameterfEXT(GLenum  target, GLenum  pname, GLfloat  param)  {if (GLeeInit()) glPixelTransformParameterfEXT(target, pname, param);}
+  GLEEPFNGLPIXELTRANSFORMPARAMETERFEXTPROC GLeeFuncPtr_glPixelTransformParameterfEXT=GLee_Lazy_glPixelTransformParameterfEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glPixelTransformParameterivEXT
+#define GLEE_C_DEFINED_glPixelTransformParameterivEXT
+  void __stdcall GLee_Lazy_glPixelTransformParameterivEXT(GLenum  target, GLenum  pname, const GLint * params)  {if (GLeeInit()) glPixelTransformParameterivEXT(target, pname, params);}
+  GLEEPFNGLPIXELTRANSFORMPARAMETERIVEXTPROC GLeeFuncPtr_glPixelTransformParameterivEXT=GLee_Lazy_glPixelTransformParameterivEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glPixelTransformParameterfvEXT
+#define GLEE_C_DEFINED_glPixelTransformParameterfvEXT
+  void __stdcall GLee_Lazy_glPixelTransformParameterfvEXT(GLenum  target, GLenum  pname, const GLfloat * params)  {if (GLeeInit()) glPixelTransformParameterfvEXT(target, pname, params);}
+  GLEEPFNGLPIXELTRANSFORMPARAMETERFVEXTPROC GLeeFuncPtr_glPixelTransformParameterfvEXT=GLee_Lazy_glPixelTransformParameterfvEXT;
+#endif
+#endif 
+
+/* GL_EXT_pixel_transform_color_table */
+
+#ifdef __GLEE_GL_EXT_pixel_transform_color_table
+#endif 
+
+/* GL_EXT_shared_texture_palette */
+
+#ifdef __GLEE_GL_EXT_shared_texture_palette
+#endif 
+
+/* GL_EXT_separate_specular_color */
+
+#ifdef __GLEE_GL_EXT_separate_specular_color
+#endif 
+
+/* GL_EXT_secondary_color */
+
+#ifdef __GLEE_GL_EXT_secondary_color
+#ifndef GLEE_C_DEFINED_glSecondaryColor3bEXT
+#define GLEE_C_DEFINED_glSecondaryColor3bEXT
+  void __stdcall GLee_Lazy_glSecondaryColor3bEXT(GLbyte  red, GLbyte  green, GLbyte  blue)  {if (GLeeInit()) glSecondaryColor3bEXT(red, green, blue);}
+  GLEEPFNGLSECONDARYCOLOR3BEXTPROC GLeeFuncPtr_glSecondaryColor3bEXT=GLee_Lazy_glSecondaryColor3bEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glSecondaryColor3bvEXT
+#define GLEE_C_DEFINED_glSecondaryColor3bvEXT
+  void __stdcall GLee_Lazy_glSecondaryColor3bvEXT(const GLbyte * v)  {if (GLeeInit()) glSecondaryColor3bvEXT(v);}
+  GLEEPFNGLSECONDARYCOLOR3BVEXTPROC GLeeFuncPtr_glSecondaryColor3bvEXT=GLee_Lazy_glSecondaryColor3bvEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glSecondaryColor3dEXT
+#define GLEE_C_DEFINED_glSecondaryColor3dEXT
+  void __stdcall GLee_Lazy_glSecondaryColor3dEXT(GLdouble  red, GLdouble  green, GLdouble  blue)  {if (GLeeInit()) glSecondaryColor3dEXT(red, green, blue);}
+  GLEEPFNGLSECONDARYCOLOR3DEXTPROC GLeeFuncPtr_glSecondaryColor3dEXT=GLee_Lazy_glSecondaryColor3dEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glSecondaryColor3dvEXT
+#define GLEE_C_DEFINED_glSecondaryColor3dvEXT
+  void __stdcall GLee_Lazy_glSecondaryColor3dvEXT(const GLdouble * v)  {if (GLeeInit()) glSecondaryColor3dvEXT(v);}
+  GLEEPFNGLSECONDARYCOLOR3DVEXTPROC GLeeFuncPtr_glSecondaryColor3dvEXT=GLee_Lazy_glSecondaryColor3dvEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glSecondaryColor3fEXT
+#define GLEE_C_DEFINED_glSecondaryColor3fEXT
+  void __stdcall GLee_Lazy_glSecondaryColor3fEXT(GLfloat  red, GLfloat  green, GLfloat  blue)  {if (GLeeInit()) glSecondaryColor3fEXT(red, green, blue);}
+  GLEEPFNGLSECONDARYCOLOR3FEXTPROC GLeeFuncPtr_glSecondaryColor3fEXT=GLee_Lazy_glSecondaryColor3fEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glSecondaryColor3fvEXT
+#define GLEE_C_DEFINED_glSecondaryColor3fvEXT
+  void __stdcall GLee_Lazy_glSecondaryColor3fvEXT(const GLfloat * v)  {if (GLeeInit()) glSecondaryColor3fvEXT(v);}
+  GLEEPFNGLSECONDARYCOLOR3FVEXTPROC GLeeFuncPtr_glSecondaryColor3fvEXT=GLee_Lazy_glSecondaryColor3fvEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glSecondaryColor3iEXT
+#define GLEE_C_DEFINED_glSecondaryColor3iEXT
+  void __stdcall GLee_Lazy_glSecondaryColor3iEXT(GLint  red, GLint  green, GLint  blue)  {if (GLeeInit()) glSecondaryColor3iEXT(red, green, blue);}
+  GLEEPFNGLSECONDARYCOLOR3IEXTPROC GLeeFuncPtr_glSecondaryColor3iEXT=GLee_Lazy_glSecondaryColor3iEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glSecondaryColor3ivEXT
+#define GLEE_C_DEFINED_glSecondaryColor3ivEXT
+  void __stdcall GLee_Lazy_glSecondaryColor3ivEXT(const GLint * v)  {if (GLeeInit()) glSecondaryColor3ivEXT(v);}
+  GLEEPFNGLSECONDARYCOLOR3IVEXTPROC GLeeFuncPtr_glSecondaryColor3ivEXT=GLee_Lazy_glSecondaryColor3ivEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glSecondaryColor3sEXT
+#define GLEE_C_DEFINED_glSecondaryColor3sEXT
+  void __stdcall GLee_Lazy_glSecondaryColor3sEXT(GLshort  red, GLshort  green, GLshort  blue)  {if (GLeeInit()) glSecondaryColor3sEXT(red, green, blue);}
+  GLEEPFNGLSECONDARYCOLOR3SEXTPROC GLeeFuncPtr_glSecondaryColor3sEXT=GLee_Lazy_glSecondaryColor3sEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glSecondaryColor3svEXT
+#define GLEE_C_DEFINED_glSecondaryColor3svEXT
+  void __stdcall GLee_Lazy_glSecondaryColor3svEXT(const GLshort * v)  {if (GLeeInit()) glSecondaryColor3svEXT(v);}
+  GLEEPFNGLSECONDARYCOLOR3SVEXTPROC GLeeFuncPtr_glSecondaryColor3svEXT=GLee_Lazy_glSecondaryColor3svEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glSecondaryColor3ubEXT
+#define GLEE_C_DEFINED_glSecondaryColor3ubEXT
+  void __stdcall GLee_Lazy_glSecondaryColor3ubEXT(GLubyte  red, GLubyte  green, GLubyte  blue)  {if (GLeeInit()) glSecondaryColor3ubEXT(red, green, blue);}
+  GLEEPFNGLSECONDARYCOLOR3UBEXTPROC GLeeFuncPtr_glSecondaryColor3ubEXT=GLee_Lazy_glSecondaryColor3ubEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glSecondaryColor3ubvEXT
+#define GLEE_C_DEFINED_glSecondaryColor3ubvEXT
+  void __stdcall GLee_Lazy_glSecondaryColor3ubvEXT(const GLubyte * v)  {if (GLeeInit()) glSecondaryColor3ubvEXT(v);}
+  GLEEPFNGLSECONDARYCOLOR3UBVEXTPROC GLeeFuncPtr_glSecondaryColor3ubvEXT=GLee_Lazy_glSecondaryColor3ubvEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glSecondaryColor3uiEXT
+#define GLEE_C_DEFINED_glSecondaryColor3uiEXT
+  void __stdcall GLee_Lazy_glSecondaryColor3uiEXT(GLuint  red, GLuint  green, GLuint  blue)  {if (GLeeInit()) glSecondaryColor3uiEXT(red, green, blue);}
+  GLEEPFNGLSECONDARYCOLOR3UIEXTPROC GLeeFuncPtr_glSecondaryColor3uiEXT=GLee_Lazy_glSecondaryColor3uiEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glSecondaryColor3uivEXT
+#define GLEE_C_DEFINED_glSecondaryColor3uivEXT
+  void __stdcall GLee_Lazy_glSecondaryColor3uivEXT(const GLuint * v)  {if (GLeeInit()) glSecondaryColor3uivEXT(v);}
+  GLEEPFNGLSECONDARYCOLOR3UIVEXTPROC GLeeFuncPtr_glSecondaryColor3uivEXT=GLee_Lazy_glSecondaryColor3uivEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glSecondaryColor3usEXT
+#define GLEE_C_DEFINED_glSecondaryColor3usEXT
+  void __stdcall GLee_Lazy_glSecondaryColor3usEXT(GLushort  red, GLushort  green, GLushort  blue)  {if (GLeeInit()) glSecondaryColor3usEXT(red, green, blue);}
+  GLEEPFNGLSECONDARYCOLOR3USEXTPROC GLeeFuncPtr_glSecondaryColor3usEXT=GLee_Lazy_glSecondaryColor3usEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glSecondaryColor3usvEXT
+#define GLEE_C_DEFINED_glSecondaryColor3usvEXT
+  void __stdcall GLee_Lazy_glSecondaryColor3usvEXT(const GLushort * v)  {if (GLeeInit()) glSecondaryColor3usvEXT(v);}
+  GLEEPFNGLSECONDARYCOLOR3USVEXTPROC GLeeFuncPtr_glSecondaryColor3usvEXT=GLee_Lazy_glSecondaryColor3usvEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glSecondaryColorPointerEXT
+#define GLEE_C_DEFINED_glSecondaryColorPointerEXT
+  void __stdcall GLee_Lazy_glSecondaryColorPointerEXT(GLint  size, GLenum  type, GLsizei  stride, const GLvoid * pointer)  {if (GLeeInit()) glSecondaryColorPointerEXT(size, type, stride, pointer);}
+  GLEEPFNGLSECONDARYCOLORPOINTEREXTPROC GLeeFuncPtr_glSecondaryColorPointerEXT=GLee_Lazy_glSecondaryColorPointerEXT;
+#endif
+#endif 
+
+/* GL_EXT_texture_perturb_normal */
+
+#ifdef __GLEE_GL_EXT_texture_perturb_normal
+#ifndef GLEE_C_DEFINED_glTextureNormalEXT
+#define GLEE_C_DEFINED_glTextureNormalEXT
+  void __stdcall GLee_Lazy_glTextureNormalEXT(GLenum  mode)  {if (GLeeInit()) glTextureNormalEXT(mode);}
+  GLEEPFNGLTEXTURENORMALEXTPROC GLeeFuncPtr_glTextureNormalEXT=GLee_Lazy_glTextureNormalEXT;
+#endif
+#endif 
+
+/* GL_EXT_multi_draw_arrays */
+
+#ifdef __GLEE_GL_EXT_multi_draw_arrays
+#ifndef GLEE_C_DEFINED_glMultiDrawArraysEXT
+#define GLEE_C_DEFINED_glMultiDrawArraysEXT
+  void __stdcall GLee_Lazy_glMultiDrawArraysEXT(GLenum  mode, const GLint * first, const GLsizei * count, GLsizei  primcount)  {if (GLeeInit()) glMultiDrawArraysEXT(mode, first, count, primcount);}
+  GLEEPFNGLMULTIDRAWARRAYSEXTPROC GLeeFuncPtr_glMultiDrawArraysEXT=GLee_Lazy_glMultiDrawArraysEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glMultiDrawElementsEXT
+#define GLEE_C_DEFINED_glMultiDrawElementsEXT
+  void __stdcall GLee_Lazy_glMultiDrawElementsEXT(GLenum  mode, const GLsizei * count, GLenum  type, const GLvoid* * indices, GLsizei  primcount)  {if (GLeeInit()) glMultiDrawElementsEXT(mode, count, type, indices, primcount);}
+  GLEEPFNGLMULTIDRAWELEMENTSEXTPROC GLeeFuncPtr_glMultiDrawElementsEXT=GLee_Lazy_glMultiDrawElementsEXT;
+#endif
+#endif 
+
+/* GL_EXT_fog_coord */
+
+#ifdef __GLEE_GL_EXT_fog_coord
+#ifndef GLEE_C_DEFINED_glFogCoordfEXT
+#define GLEE_C_DEFINED_glFogCoordfEXT
+  void __stdcall GLee_Lazy_glFogCoordfEXT(GLfloat  coord)  {if (GLeeInit()) glFogCoordfEXT(coord);}
+  GLEEPFNGLFOGCOORDFEXTPROC GLeeFuncPtr_glFogCoordfEXT=GLee_Lazy_glFogCoordfEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glFogCoordfvEXT
+#define GLEE_C_DEFINED_glFogCoordfvEXT
+  void __stdcall GLee_Lazy_glFogCoordfvEXT(const GLfloat * coord)  {if (GLeeInit()) glFogCoordfvEXT(coord);}
+  GLEEPFNGLFOGCOORDFVEXTPROC GLeeFuncPtr_glFogCoordfvEXT=GLee_Lazy_glFogCoordfvEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glFogCoorddEXT
+#define GLEE_C_DEFINED_glFogCoorddEXT
+  void __stdcall GLee_Lazy_glFogCoorddEXT(GLdouble  coord)  {if (GLeeInit()) glFogCoorddEXT(coord);}
+  GLEEPFNGLFOGCOORDDEXTPROC GLeeFuncPtr_glFogCoorddEXT=GLee_Lazy_glFogCoorddEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glFogCoorddvEXT
+#define GLEE_C_DEFINED_glFogCoorddvEXT
+  void __stdcall GLee_Lazy_glFogCoorddvEXT(const GLdouble * coord)  {if (GLeeInit()) glFogCoorddvEXT(coord);}
+  GLEEPFNGLFOGCOORDDVEXTPROC GLeeFuncPtr_glFogCoorddvEXT=GLee_Lazy_glFogCoorddvEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glFogCoordPointerEXT
+#define GLEE_C_DEFINED_glFogCoordPointerEXT
+  void __stdcall GLee_Lazy_glFogCoordPointerEXT(GLenum  type, GLsizei  stride, const GLvoid * pointer)  {if (GLeeInit()) glFogCoordPointerEXT(type, stride, pointer);}
+  GLEEPFNGLFOGCOORDPOINTEREXTPROC GLeeFuncPtr_glFogCoordPointerEXT=GLee_Lazy_glFogCoordPointerEXT;
+#endif
+#endif 
+
+/* GL_REND_screen_coordinates */
+
+#ifdef __GLEE_GL_REND_screen_coordinates
+#endif 
+
+/* GL_EXT_coordinate_frame */
+
+#ifdef __GLEE_GL_EXT_coordinate_frame
+#ifndef GLEE_C_DEFINED_glTangent3bEXT
+#define GLEE_C_DEFINED_glTangent3bEXT
+  void __stdcall GLee_Lazy_glTangent3bEXT(GLbyte  tx, GLbyte  ty, GLbyte  tz)  {if (GLeeInit()) glTangent3bEXT(tx, ty, tz);}
+  GLEEPFNGLTANGENT3BEXTPROC GLeeFuncPtr_glTangent3bEXT=GLee_Lazy_glTangent3bEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glTangent3bvEXT
+#define GLEE_C_DEFINED_glTangent3bvEXT
+  void __stdcall GLee_Lazy_glTangent3bvEXT(const GLbyte * v)  {if (GLeeInit()) glTangent3bvEXT(v);}
+  GLEEPFNGLTANGENT3BVEXTPROC GLeeFuncPtr_glTangent3bvEXT=GLee_Lazy_glTangent3bvEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glTangent3dEXT
+#define GLEE_C_DEFINED_glTangent3dEXT
+  void __stdcall GLee_Lazy_glTangent3dEXT(GLdouble  tx, GLdouble  ty, GLdouble  tz)  {if (GLeeInit()) glTangent3dEXT(tx, ty, tz);}
+  GLEEPFNGLTANGENT3DEXTPROC GLeeFuncPtr_glTangent3dEXT=GLee_Lazy_glTangent3dEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glTangent3dvEXT
+#define GLEE_C_DEFINED_glTangent3dvEXT
+  void __stdcall GLee_Lazy_glTangent3dvEXT(const GLdouble * v)  {if (GLeeInit()) glTangent3dvEXT(v);}
+  GLEEPFNGLTANGENT3DVEXTPROC GLeeFuncPtr_glTangent3dvEXT=GLee_Lazy_glTangent3dvEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glTangent3fEXT
+#define GLEE_C_DEFINED_glTangent3fEXT
+  void __stdcall GLee_Lazy_glTangent3fEXT(GLfloat  tx, GLfloat  ty, GLfloat  tz)  {if (GLeeInit()) glTangent3fEXT(tx, ty, tz);}
+  GLEEPFNGLTANGENT3FEXTPROC GLeeFuncPtr_glTangent3fEXT=GLee_Lazy_glTangent3fEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glTangent3fvEXT
+#define GLEE_C_DEFINED_glTangent3fvEXT
+  void __stdcall GLee_Lazy_glTangent3fvEXT(const GLfloat * v)  {if (GLeeInit()) glTangent3fvEXT(v);}
+  GLEEPFNGLTANGENT3FVEXTPROC GLeeFuncPtr_glTangent3fvEXT=GLee_Lazy_glTangent3fvEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glTangent3iEXT
+#define GLEE_C_DEFINED_glTangent3iEXT
+  void __stdcall GLee_Lazy_glTangent3iEXT(GLint  tx, GLint  ty, GLint  tz)  {if (GLeeInit()) glTangent3iEXT(tx, ty, tz);}
+  GLEEPFNGLTANGENT3IEXTPROC GLeeFuncPtr_glTangent3iEXT=GLee_Lazy_glTangent3iEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glTangent3ivEXT
+#define GLEE_C_DEFINED_glTangent3ivEXT
+  void __stdcall GLee_Lazy_glTangent3ivEXT(const GLint * v)  {if (GLeeInit()) glTangent3ivEXT(v);}
+  GLEEPFNGLTANGENT3IVEXTPROC GLeeFuncPtr_glTangent3ivEXT=GLee_Lazy_glTangent3ivEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glTangent3sEXT
+#define GLEE_C_DEFINED_glTangent3sEXT
+  void __stdcall GLee_Lazy_glTangent3sEXT(GLshort  tx, GLshort  ty, GLshort  tz)  {if (GLeeInit()) glTangent3sEXT(tx, ty, tz);}
+  GLEEPFNGLTANGENT3SEXTPROC GLeeFuncPtr_glTangent3sEXT=GLee_Lazy_glTangent3sEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glTangent3svEXT
+#define GLEE_C_DEFINED_glTangent3svEXT
+  void __stdcall GLee_Lazy_glTangent3svEXT(const GLshort * v)  {if (GLeeInit()) glTangent3svEXT(v);}
+  GLEEPFNGLTANGENT3SVEXTPROC GLeeFuncPtr_glTangent3svEXT=GLee_Lazy_glTangent3svEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glBinormal3bEXT
+#define GLEE_C_DEFINED_glBinormal3bEXT
+  void __stdcall GLee_Lazy_glBinormal3bEXT(GLbyte  bx, GLbyte  by, GLbyte  bz)  {if (GLeeInit()) glBinormal3bEXT(bx, by, bz);}
+  GLEEPFNGLBINORMAL3BEXTPROC GLeeFuncPtr_glBinormal3bEXT=GLee_Lazy_glBinormal3bEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glBinormal3bvEXT
+#define GLEE_C_DEFINED_glBinormal3bvEXT
+  void __stdcall GLee_Lazy_glBinormal3bvEXT(const GLbyte * v)  {if (GLeeInit()) glBinormal3bvEXT(v);}
+  GLEEPFNGLBINORMAL3BVEXTPROC GLeeFuncPtr_glBinormal3bvEXT=GLee_Lazy_glBinormal3bvEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glBinormal3dEXT
+#define GLEE_C_DEFINED_glBinormal3dEXT
+  void __stdcall GLee_Lazy_glBinormal3dEXT(GLdouble  bx, GLdouble  by, GLdouble  bz)  {if (GLeeInit()) glBinormal3dEXT(bx, by, bz);}
+  GLEEPFNGLBINORMAL3DEXTPROC GLeeFuncPtr_glBinormal3dEXT=GLee_Lazy_glBinormal3dEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glBinormal3dvEXT
+#define GLEE_C_DEFINED_glBinormal3dvEXT
+  void __stdcall GLee_Lazy_glBinormal3dvEXT(const GLdouble * v)  {if (GLeeInit()) glBinormal3dvEXT(v);}
+  GLEEPFNGLBINORMAL3DVEXTPROC GLeeFuncPtr_glBinormal3dvEXT=GLee_Lazy_glBinormal3dvEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glBinormal3fEXT
+#define GLEE_C_DEFINED_glBinormal3fEXT
+  void __stdcall GLee_Lazy_glBinormal3fEXT(GLfloat  bx, GLfloat  by, GLfloat  bz)  {if (GLeeInit()) glBinormal3fEXT(bx, by, bz);}
+  GLEEPFNGLBINORMAL3FEXTPROC GLeeFuncPtr_glBinormal3fEXT=GLee_Lazy_glBinormal3fEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glBinormal3fvEXT
+#define GLEE_C_DEFINED_glBinormal3fvEXT
+  void __stdcall GLee_Lazy_glBinormal3fvEXT(const GLfloat * v)  {if (GLeeInit()) glBinormal3fvEXT(v);}
+  GLEEPFNGLBINORMAL3FVEXTPROC GLeeFuncPtr_glBinormal3fvEXT=GLee_Lazy_glBinormal3fvEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glBinormal3iEXT
+#define GLEE_C_DEFINED_glBinormal3iEXT
+  void __stdcall GLee_Lazy_glBinormal3iEXT(GLint  bx, GLint  by, GLint  bz)  {if (GLeeInit()) glBinormal3iEXT(bx, by, bz);}
+  GLEEPFNGLBINORMAL3IEXTPROC GLeeFuncPtr_glBinormal3iEXT=GLee_Lazy_glBinormal3iEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glBinormal3ivEXT
+#define GLEE_C_DEFINED_glBinormal3ivEXT
+  void __stdcall GLee_Lazy_glBinormal3ivEXT(const GLint * v)  {if (GLeeInit()) glBinormal3ivEXT(v);}
+  GLEEPFNGLBINORMAL3IVEXTPROC GLeeFuncPtr_glBinormal3ivEXT=GLee_Lazy_glBinormal3ivEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glBinormal3sEXT
+#define GLEE_C_DEFINED_glBinormal3sEXT
+  void __stdcall GLee_Lazy_glBinormal3sEXT(GLshort  bx, GLshort  by, GLshort  bz)  {if (GLeeInit()) glBinormal3sEXT(bx, by, bz);}
+  GLEEPFNGLBINORMAL3SEXTPROC GLeeFuncPtr_glBinormal3sEXT=GLee_Lazy_glBinormal3sEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glBinormal3svEXT
+#define GLEE_C_DEFINED_glBinormal3svEXT
+  void __stdcall GLee_Lazy_glBinormal3svEXT(const GLshort * v)  {if (GLeeInit()) glBinormal3svEXT(v);}
+  GLEEPFNGLBINORMAL3SVEXTPROC GLeeFuncPtr_glBinormal3svEXT=GLee_Lazy_glBinormal3svEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glTangentPointerEXT
+#define GLEE_C_DEFINED_glTangentPointerEXT
+  void __stdcall GLee_Lazy_glTangentPointerEXT(GLenum  type, GLsizei  stride, const GLvoid * pointer)  {if (GLeeInit()) glTangentPointerEXT(type, stride, pointer);}
+  GLEEPFNGLTANGENTPOINTEREXTPROC GLeeFuncPtr_glTangentPointerEXT=GLee_Lazy_glTangentPointerEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glBinormalPointerEXT
+#define GLEE_C_DEFINED_glBinormalPointerEXT
+  void __stdcall GLee_Lazy_glBinormalPointerEXT(GLenum  type, GLsizei  stride, const GLvoid * pointer)  {if (GLeeInit()) glBinormalPointerEXT(type, stride, pointer);}
+  GLEEPFNGLBINORMALPOINTEREXTPROC GLeeFuncPtr_glBinormalPointerEXT=GLee_Lazy_glBinormalPointerEXT;
+#endif
+#endif 
+
+/* GL_EXT_texture_env_combine */
+
+#ifdef __GLEE_GL_EXT_texture_env_combine
+#endif 
+
+/* GL_APPLE_specular_vector */
+
+#ifdef __GLEE_GL_APPLE_specular_vector
+#endif 
+
+/* GL_APPLE_transform_hint */
+
+#ifdef __GLEE_GL_APPLE_transform_hint
+#endif 
+
+/* GL_SGIX_fog_scale */
+
+#ifdef __GLEE_GL_SGIX_fog_scale
+#endif 
+
+/* GL_SUNX_constant_data */
+
+#ifdef __GLEE_GL_SUNX_constant_data
+#ifndef GLEE_C_DEFINED_glFinishTextureSUNX
+#define GLEE_C_DEFINED_glFinishTextureSUNX
+  void __stdcall GLee_Lazy_glFinishTextureSUNX(void)  {if (GLeeInit()) glFinishTextureSUNX();}
+  GLEEPFNGLFINISHTEXTURESUNXPROC GLeeFuncPtr_glFinishTextureSUNX=GLee_Lazy_glFinishTextureSUNX;
+#endif
+#endif 
+
+/* GL_SUN_global_alpha */
+
+#ifdef __GLEE_GL_SUN_global_alpha
+#ifndef GLEE_C_DEFINED_glGlobalAlphaFactorbSUN
+#define GLEE_C_DEFINED_glGlobalAlphaFactorbSUN
+  void __stdcall GLee_Lazy_glGlobalAlphaFactorbSUN(GLbyte  factor)  {if (GLeeInit()) glGlobalAlphaFactorbSUN(factor);}
+  GLEEPFNGLGLOBALALPHAFACTORBSUNPROC GLeeFuncPtr_glGlobalAlphaFactorbSUN=GLee_Lazy_glGlobalAlphaFactorbSUN;
+#endif
+#ifndef GLEE_C_DEFINED_glGlobalAlphaFactorsSUN
+#define GLEE_C_DEFINED_glGlobalAlphaFactorsSUN
+  void __stdcall GLee_Lazy_glGlobalAlphaFactorsSUN(GLshort  factor)  {if (GLeeInit()) glGlobalAlphaFactorsSUN(factor);}
+  GLEEPFNGLGLOBALALPHAFACTORSSUNPROC GLeeFuncPtr_glGlobalAlphaFactorsSUN=GLee_Lazy_glGlobalAlphaFactorsSUN;
+#endif
+#ifndef GLEE_C_DEFINED_glGlobalAlphaFactoriSUN
+#define GLEE_C_DEFINED_glGlobalAlphaFactoriSUN
+  void __stdcall GLee_Lazy_glGlobalAlphaFactoriSUN(GLint  factor)  {if (GLeeInit()) glGlobalAlphaFactoriSUN(factor);}
+  GLEEPFNGLGLOBALALPHAFACTORISUNPROC GLeeFuncPtr_glGlobalAlphaFactoriSUN=GLee_Lazy_glGlobalAlphaFactoriSUN;
+#endif
+#ifndef GLEE_C_DEFINED_glGlobalAlphaFactorfSUN
+#define GLEE_C_DEFINED_glGlobalAlphaFactorfSUN
+  void __stdcall GLee_Lazy_glGlobalAlphaFactorfSUN(GLfloat  factor)  {if (GLeeInit()) glGlobalAlphaFactorfSUN(factor);}
+  GLEEPFNGLGLOBALALPHAFACTORFSUNPROC GLeeFuncPtr_glGlobalAlphaFactorfSUN=GLee_Lazy_glGlobalAlphaFactorfSUN;
+#endif
+#ifndef GLEE_C_DEFINED_glGlobalAlphaFactordSUN
+#define GLEE_C_DEFINED_glGlobalAlphaFactordSUN
+  void __stdcall GLee_Lazy_glGlobalAlphaFactordSUN(GLdouble  factor)  {if (GLeeInit()) glGlobalAlphaFactordSUN(factor);}
+  GLEEPFNGLGLOBALALPHAFACTORDSUNPROC GLeeFuncPtr_glGlobalAlphaFactordSUN=GLee_Lazy_glGlobalAlphaFactordSUN;
+#endif
+#ifndef GLEE_C_DEFINED_glGlobalAlphaFactorubSUN
+#define GLEE_C_DEFINED_glGlobalAlphaFactorubSUN
+  void __stdcall GLee_Lazy_glGlobalAlphaFactorubSUN(GLubyte  factor)  {if (GLeeInit()) glGlobalAlphaFactorubSUN(factor);}
+  GLEEPFNGLGLOBALALPHAFACTORUBSUNPROC GLeeFuncPtr_glGlobalAlphaFactorubSUN=GLee_Lazy_glGlobalAlphaFactorubSUN;
+#endif
+#ifndef GLEE_C_DEFINED_glGlobalAlphaFactorusSUN
+#define GLEE_C_DEFINED_glGlobalAlphaFactorusSUN
+  void __stdcall GLee_Lazy_glGlobalAlphaFactorusSUN(GLushort  factor)  {if (GLeeInit()) glGlobalAlphaFactorusSUN(factor);}
+  GLEEPFNGLGLOBALALPHAFACTORUSSUNPROC GLeeFuncPtr_glGlobalAlphaFactorusSUN=GLee_Lazy_glGlobalAlphaFactorusSUN;
+#endif
+#ifndef GLEE_C_DEFINED_glGlobalAlphaFactoruiSUN
+#define GLEE_C_DEFINED_glGlobalAlphaFactoruiSUN
+  void __stdcall GLee_Lazy_glGlobalAlphaFactoruiSUN(GLuint  factor)  {if (GLeeInit()) glGlobalAlphaFactoruiSUN(factor);}
+  GLEEPFNGLGLOBALALPHAFACTORUISUNPROC GLeeFuncPtr_glGlobalAlphaFactoruiSUN=GLee_Lazy_glGlobalAlphaFactoruiSUN;
+#endif
+#endif 
+
+/* GL_SUN_triangle_list */
+
+#ifdef __GLEE_GL_SUN_triangle_list
+#ifndef GLEE_C_DEFINED_glReplacementCodeuiSUN
+#define GLEE_C_DEFINED_glReplacementCodeuiSUN
+  void __stdcall GLee_Lazy_glReplacementCodeuiSUN(GLuint  code)  {if (GLeeInit()) glReplacementCodeuiSUN(code);}
+  GLEEPFNGLREPLACEMENTCODEUISUNPROC GLeeFuncPtr_glReplacementCodeuiSUN=GLee_Lazy_glReplacementCodeuiSUN;
+#endif
+#ifndef GLEE_C_DEFINED_glReplacementCodeusSUN
+#define GLEE_C_DEFINED_glReplacementCodeusSUN
+  void __stdcall GLee_Lazy_glReplacementCodeusSUN(GLushort  code)  {if (GLeeInit()) glReplacementCodeusSUN(code);}
+  GLEEPFNGLREPLACEMENTCODEUSSUNPROC GLeeFuncPtr_glReplacementCodeusSUN=GLee_Lazy_glReplacementCodeusSUN;
+#endif
+#ifndef GLEE_C_DEFINED_glReplacementCodeubSUN
+#define GLEE_C_DEFINED_glReplacementCodeubSUN
+  void __stdcall GLee_Lazy_glReplacementCodeubSUN(GLubyte  code)  {if (GLeeInit()) glReplacementCodeubSUN(code);}
+  GLEEPFNGLREPLACEMENTCODEUBSUNPROC GLeeFuncPtr_glReplacementCodeubSUN=GLee_Lazy_glReplacementCodeubSUN;
+#endif
+#ifndef GLEE_C_DEFINED_glReplacementCodeuivSUN
+#define GLEE_C_DEFINED_glReplacementCodeuivSUN
+  void __stdcall GLee_Lazy_glReplacementCodeuivSUN(const GLuint * code)  {if (GLeeInit()) glReplacementCodeuivSUN(code);}
+  GLEEPFNGLREPLACEMENTCODEUIVSUNPROC GLeeFuncPtr_glReplacementCodeuivSUN=GLee_Lazy_glReplacementCodeuivSUN;
+#endif
+#ifndef GLEE_C_DEFINED_glReplacementCodeusvSUN
+#define GLEE_C_DEFINED_glReplacementCodeusvSUN
+  void __stdcall GLee_Lazy_glReplacementCodeusvSUN(const GLushort * code)  {if (GLeeInit()) glReplacementCodeusvSUN(code);}
+  GLEEPFNGLREPLACEMENTCODEUSVSUNPROC GLeeFuncPtr_glReplacementCodeusvSUN=GLee_Lazy_glReplacementCodeusvSUN;
+#endif
+#ifndef GLEE_C_DEFINED_glReplacementCodeubvSUN
+#define GLEE_C_DEFINED_glReplacementCodeubvSUN
+  void __stdcall GLee_Lazy_glReplacementCodeubvSUN(const GLubyte * code)  {if (GLeeInit()) glReplacementCodeubvSUN(code);}
+  GLEEPFNGLREPLACEMENTCODEUBVSUNPROC GLeeFuncPtr_glReplacementCodeubvSUN=GLee_Lazy_glReplacementCodeubvSUN;
+#endif
+#ifndef GLEE_C_DEFINED_glReplacementCodePointerSUN
+#define GLEE_C_DEFINED_glReplacementCodePointerSUN
+  void __stdcall GLee_Lazy_glReplacementCodePointerSUN(GLenum  type, GLsizei  stride, const GLvoid* * pointer)  {if (GLeeInit()) glReplacementCodePointerSUN(type, stride, pointer);}
+  GLEEPFNGLREPLACEMENTCODEPOINTERSUNPROC GLeeFuncPtr_glReplacementCodePointerSUN=GLee_Lazy_glReplacementCodePointerSUN;
+#endif
+#endif 
+
+/* GL_SUN_vertex */
+
+#ifdef __GLEE_GL_SUN_vertex
+#ifndef GLEE_C_DEFINED_glColor4ubVertex2fSUN
+#define GLEE_C_DEFINED_glColor4ubVertex2fSUN
+  void __stdcall GLee_Lazy_glColor4ubVertex2fSUN(GLubyte  r, GLubyte  g, GLubyte  b, GLubyte  a, GLfloat  x, GLfloat  y)  {if (GLeeInit()) glColor4ubVertex2fSUN(r, g, b, a, x, y);}
+  GLEEPFNGLCOLOR4UBVERTEX2FSUNPROC GLeeFuncPtr_glColor4ubVertex2fSUN=GLee_Lazy_glColor4ubVertex2fSUN;
+#endif
+#ifndef GLEE_C_DEFINED_glColor4ubVertex2fvSUN
+#define GLEE_C_DEFINED_glColor4ubVertex2fvSUN
+  void __stdcall GLee_Lazy_glColor4ubVertex2fvSUN(const GLubyte * c, const GLfloat * v)  {if (GLeeInit()) glColor4ubVertex2fvSUN(c, v);}
+  GLEEPFNGLCOLOR4UBVERTEX2FVSUNPROC GLeeFuncPtr_glColor4ubVertex2fvSUN=GLee_Lazy_glColor4ubVertex2fvSUN;
+#endif
+#ifndef GLEE_C_DEFINED_glColor4ubVertex3fSUN
+#define GLEE_C_DEFINED_glColor4ubVertex3fSUN
+  void __stdcall GLee_Lazy_glColor4ubVertex3fSUN(GLubyte  r, GLubyte  g, GLubyte  b, GLubyte  a, GLfloat  x, GLfloat  y, GLfloat  z)  {if (GLeeInit()) glColor4ubVertex3fSUN(r, g, b, a, x, y, z);}
+  GLEEPFNGLCOLOR4UBVERTEX3FSUNPROC GLeeFuncPtr_glColor4ubVertex3fSUN=GLee_Lazy_glColor4ubVertex3fSUN;
+#endif
+#ifndef GLEE_C_DEFINED_glColor4ubVertex3fvSUN
+#define GLEE_C_DEFINED_glColor4ubVertex3fvSUN
+  void __stdcall GLee_Lazy_glColor4ubVertex3fvSUN(const GLubyte * c, const GLfloat * v)  {if (GLeeInit()) glColor4ubVertex3fvSUN(c, v);}
+  GLEEPFNGLCOLOR4UBVERTEX3FVSUNPROC GLeeFuncPtr_glColor4ubVertex3fvSUN=GLee_Lazy_glColor4ubVertex3fvSUN;
+#endif
+#ifndef GLEE_C_DEFINED_glColor3fVertex3fSUN
+#define GLEE_C_DEFINED_glColor3fVertex3fSUN
+  void __stdcall GLee_Lazy_glColor3fVertex3fSUN(GLfloat  r, GLfloat  g, GLfloat  b, GLfloat  x, GLfloat  y, GLfloat  z)  {if (GLeeInit()) glColor3fVertex3fSUN(r, g, b, x, y, z);}
+  GLEEPFNGLCOLOR3FVERTEX3FSUNPROC GLeeFuncPtr_glColor3fVertex3fSUN=GLee_Lazy_glColor3fVertex3fSUN;
+#endif
+#ifndef GLEE_C_DEFINED_glColor3fVertex3fvSUN
+#define GLEE_C_DEFINED_glColor3fVertex3fvSUN
+  void __stdcall GLee_Lazy_glColor3fVertex3fvSUN(const GLfloat * c, const GLfloat * v)  {if (GLeeInit()) glColor3fVertex3fvSUN(c, v);}
+  GLEEPFNGLCOLOR3FVERTEX3FVSUNPROC GLeeFuncPtr_glColor3fVertex3fvSUN=GLee_Lazy_glColor3fVertex3fvSUN;
+#endif
+#ifndef GLEE_C_DEFINED_glNormal3fVertex3fSUN
+#define GLEE_C_DEFINED_glNormal3fVertex3fSUN
+  void __stdcall GLee_Lazy_glNormal3fVertex3fSUN(GLfloat  nx, GLfloat  ny, GLfloat  nz, GLfloat  x, GLfloat  y, GLfloat  z)  {if (GLeeInit()) glNormal3fVertex3fSUN(nx, ny, nz, x, y, z);}
+  GLEEPFNGLNORMAL3FVERTEX3FSUNPROC GLeeFuncPtr_glNormal3fVertex3fSUN=GLee_Lazy_glNormal3fVertex3fSUN;
+#endif
+#ifndef GLEE_C_DEFINED_glNormal3fVertex3fvSUN
+#define GLEE_C_DEFINED_glNormal3fVertex3fvSUN
+  void __stdcall GLee_Lazy_glNormal3fVertex3fvSUN(const GLfloat * n, const GLfloat * v)  {if (GLeeInit()) glNormal3fVertex3fvSUN(n, v);}
+  GLEEPFNGLNORMAL3FVERTEX3FVSUNPROC GLeeFuncPtr_glNormal3fVertex3fvSUN=GLee_Lazy_glNormal3fVertex3fvSUN;
+#endif
+#ifndef GLEE_C_DEFINED_glColor4fNormal3fVertex3fSUN
+#define GLEE_C_DEFINED_glColor4fNormal3fVertex3fSUN
+  void __stdcall GLee_Lazy_glColor4fNormal3fVertex3fSUN(GLfloat  r, GLfloat  g, GLfloat  b, GLfloat  a, GLfloat  nx, GLfloat  ny, GLfloat  nz, GLfloat  x, GLfloat  y, GLfloat  z)  {if (GLeeInit()) glColor4fNormal3fVertex3fSUN(r, g, b, a, nx, ny, nz, x, y, z);}
+  GLEEPFNGLCOLOR4FNORMAL3FVERTEX3FSUNPROC GLeeFuncPtr_glColor4fNormal3fVertex3fSUN=GLee_Lazy_glColor4fNormal3fVertex3fSUN;
+#endif
+#ifndef GLEE_C_DEFINED_glColor4fNormal3fVertex3fvSUN
+#define GLEE_C_DEFINED_glColor4fNormal3fVertex3fvSUN
+  void __stdcall GLee_Lazy_glColor4fNormal3fVertex3fvSUN(const GLfloat * c, const GLfloat * n, const GLfloat * v)  {if (GLeeInit()) glColor4fNormal3fVertex3fvSUN(c, n, v);}
+  GLEEPFNGLCOLOR4FNORMAL3FVERTEX3FVSUNPROC GLeeFuncPtr_glColor4fNormal3fVertex3fvSUN=GLee_Lazy_glColor4fNormal3fVertex3fvSUN;
+#endif
+#ifndef GLEE_C_DEFINED_glTexCoord2fVertex3fSUN
+#define GLEE_C_DEFINED_glTexCoord2fVertex3fSUN
+  void __stdcall GLee_Lazy_glTexCoord2fVertex3fSUN(GLfloat  s, GLfloat  t, GLfloat  x, GLfloat  y, GLfloat  z)  {if (GLeeInit()) glTexCoord2fVertex3fSUN(s, t, x, y, z);}
+  GLEEPFNGLTEXCOORD2FVERTEX3FSUNPROC GLeeFuncPtr_glTexCoord2fVertex3fSUN=GLee_Lazy_glTexCoord2fVertex3fSUN;
+#endif
+#ifndef GLEE_C_DEFINED_glTexCoord2fVertex3fvSUN
+#define GLEE_C_DEFINED_glTexCoord2fVertex3fvSUN
+  void __stdcall GLee_Lazy_glTexCoord2fVertex3fvSUN(const GLfloat * tc, const GLfloat * v)  {if (GLeeInit()) glTexCoord2fVertex3fvSUN(tc, v);}
+  GLEEPFNGLTEXCOORD2FVERTEX3FVSUNPROC GLeeFuncPtr_glTexCoord2fVertex3fvSUN=GLee_Lazy_glTexCoord2fVertex3fvSUN;
+#endif
+#ifndef GLEE_C_DEFINED_glTexCoord4fVertex4fSUN
+#define GLEE_C_DEFINED_glTexCoord4fVertex4fSUN
+  void __stdcall GLee_Lazy_glTexCoord4fVertex4fSUN(GLfloat  s, GLfloat  t, GLfloat  p, GLfloat  q, GLfloat  x, GLfloat  y, GLfloat  z, GLfloat  w)  {if (GLeeInit()) glTexCoord4fVertex4fSUN(s, t, p, q, x, y, z, w);}
+  GLEEPFNGLTEXCOORD4FVERTEX4FSUNPROC GLeeFuncPtr_glTexCoord4fVertex4fSUN=GLee_Lazy_glTexCoord4fVertex4fSUN;
+#endif
+#ifndef GLEE_C_DEFINED_glTexCoord4fVertex4fvSUN
+#define GLEE_C_DEFINED_glTexCoord4fVertex4fvSUN
+  void __stdcall GLee_Lazy_glTexCoord4fVertex4fvSUN(const GLfloat * tc, const GLfloat * v)  {if (GLeeInit()) glTexCoord4fVertex4fvSUN(tc, v);}
+  GLEEPFNGLTEXCOORD4FVERTEX4FVSUNPROC GLeeFuncPtr_glTexCoord4fVertex4fvSUN=GLee_Lazy_glTexCoord4fVertex4fvSUN;
+#endif
+#ifndef GLEE_C_DEFINED_glTexCoord2fColor4ubVertex3fSUN
+#define GLEE_C_DEFINED_glTexCoord2fColor4ubVertex3fSUN
+  void __stdcall GLee_Lazy_glTexCoord2fColor4ubVertex3fSUN(GLfloat  s, GLfloat  t, GLubyte  r, GLubyte  g, GLubyte  b, GLubyte  a, GLfloat  x, GLfloat  y, GLfloat  z)  {if (GLeeInit()) glTexCoord2fColor4ubVertex3fSUN(s, t, r, g, b, a, x, y, z);}
+  GLEEPFNGLTEXCOORD2FCOLOR4UBVERTEX3FSUNPROC GLeeFuncPtr_glTexCoord2fColor4ubVertex3fSUN=GLee_Lazy_glTexCoord2fColor4ubVertex3fSUN;
+#endif
+#ifndef GLEE_C_DEFINED_glTexCoord2fColor4ubVertex3fvSUN
+#define GLEE_C_DEFINED_glTexCoord2fColor4ubVertex3fvSUN
+  void __stdcall GLee_Lazy_glTexCoord2fColor4ubVertex3fvSUN(const GLfloat * tc, const GLubyte * c, const GLfloat * v)  {if (GLeeInit()) glTexCoord2fColor4ubVertex3fvSUN(tc, c, v);}
+  GLEEPFNGLTEXCOORD2FCOLOR4UBVERTEX3FVSUNPROC GLeeFuncPtr_glTexCoord2fColor4ubVertex3fvSUN=GLee_Lazy_glTexCoord2fColor4ubVertex3fvSUN;
+#endif
+#ifndef GLEE_C_DEFINED_glTexCoord2fColor3fVertex3fSUN
+#define GLEE_C_DEFINED_glTexCoord2fColor3fVertex3fSUN
+  void __stdcall GLee_Lazy_glTexCoord2fColor3fVertex3fSUN(GLfloat  s, GLfloat  t, GLfloat  r, GLfloat  g, GLfloat  b, GLfloat  x, GLfloat  y, GLfloat  z)  {if (GLeeInit()) glTexCoord2fColor3fVertex3fSUN(s, t, r, g, b, x, y, z);}
+  GLEEPFNGLTEXCOORD2FCOLOR3FVERTEX3FSUNPROC GLeeFuncPtr_glTexCoord2fColor3fVertex3fSUN=GLee_Lazy_glTexCoord2fColor3fVertex3fSUN;
+#endif
+#ifndef GLEE_C_DEFINED_glTexCoord2fColor3fVertex3fvSUN
+#define GLEE_C_DEFINED_glTexCoord2fColor3fVertex3fvSUN
+  void __stdcall GLee_Lazy_glTexCoord2fColor3fVertex3fvSUN(const GLfloat * tc, const GLfloat * c, const GLfloat * v)  {if (GLeeInit()) glTexCoord2fColor3fVertex3fvSUN(tc, c, v);}
+  GLEEPFNGLTEXCOORD2FCOLOR3FVERTEX3FVSUNPROC GLeeFuncPtr_glTexCoord2fColor3fVertex3fvSUN=GLee_Lazy_glTexCoord2fColor3fVertex3fvSUN;
+#endif
+#ifndef GLEE_C_DEFINED_glTexCoord2fNormal3fVertex3fSUN
+#define GLEE_C_DEFINED_glTexCoord2fNormal3fVertex3fSUN
+  void __stdcall GLee_Lazy_glTexCoord2fNormal3fVertex3fSUN(GLfloat  s, GLfloat  t, GLfloat  nx, GLfloat  ny, GLfloat  nz, GLfloat  x, GLfloat  y, GLfloat  z)  {if (GLeeInit()) glTexCoord2fNormal3fVertex3fSUN(s, t, nx, ny, nz, x, y, z);}
+  GLEEPFNGLTEXCOORD2FNORMAL3FVERTEX3FSUNPROC GLeeFuncPtr_glTexCoord2fNormal3fVertex3fSUN=GLee_Lazy_glTexCoord2fNormal3fVertex3fSUN;
+#endif
+#ifndef GLEE_C_DEFINED_glTexCoord2fNormal3fVertex3fvSUN
+#define GLEE_C_DEFINED_glTexCoord2fNormal3fVertex3fvSUN
+  void __stdcall GLee_Lazy_glTexCoord2fNormal3fVertex3fvSUN(const GLfloat * tc, const GLfloat * n, const GLfloat * v)  {if (GLeeInit()) glTexCoord2fNormal3fVertex3fvSUN(tc, n, v);}
+  GLEEPFNGLTEXCOORD2FNORMAL3FVERTEX3FVSUNPROC GLeeFuncPtr_glTexCoord2fNormal3fVertex3fvSUN=GLee_Lazy_glTexCoord2fNormal3fVertex3fvSUN;
+#endif
+#ifndef GLEE_C_DEFINED_glTexCoord2fColor4fNormal3fVertex3fSUN
+#define GLEE_C_DEFINED_glTexCoord2fColor4fNormal3fVertex3fSUN
+  void __stdcall GLee_Lazy_glTexCoord2fColor4fNormal3fVertex3fSUN(GLfloat  s, GLfloat  t, GLfloat  r, GLfloat  g, GLfloat  b, GLfloat  a, GLfloat  nx, GLfloat  ny, GLfloat  nz, GLfloat  x, GLfloat  y, GLfloat  z)  {if (GLeeInit()) glTexCoord2fColor4fNormal3fVertex3fSUN(s, t, r, g, b, a, nx, ny, nz, x, y, z);}
+  GLEEPFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC GLeeFuncPtr_glTexCoord2fColor4fNormal3fVertex3fSUN=GLee_Lazy_glTexCoord2fColor4fNormal3fVertex3fSUN;
+#endif
+#ifndef GLEE_C_DEFINED_glTexCoord2fColor4fNormal3fVertex3fvSUN
+#define GLEE_C_DEFINED_glTexCoord2fColor4fNormal3fVertex3fvSUN
+  void __stdcall GLee_Lazy_glTexCoord2fColor4fNormal3fVertex3fvSUN(const GLfloat * tc, const GLfloat * c, const GLfloat * n, const GLfloat * v)  {if (GLeeInit()) glTexCoord2fColor4fNormal3fVertex3fvSUN(tc, c, n, v);}
+  GLEEPFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC GLeeFuncPtr_glTexCoord2fColor4fNormal3fVertex3fvSUN=GLee_Lazy_glTexCoord2fColor4fNormal3fVertex3fvSUN;
+#endif
+#ifndef GLEE_C_DEFINED_glTexCoord4fColor4fNormal3fVertex4fSUN
+#define GLEE_C_DEFINED_glTexCoord4fColor4fNormal3fVertex4fSUN
+  void __stdcall GLee_Lazy_glTexCoord4fColor4fNormal3fVertex4fSUN(GLfloat  s, GLfloat  t, GLfloat  p, GLfloat  q, GLfloat  r, GLfloat  g, GLfloat  b, GLfloat  a, GLfloat  nx, GLfloat  ny, GLfloat  nz, GLfloat  x, GLfloat  y, GLfloat  z, GLfloat  w)  {if (GLeeInit()) glTexCoord4fColor4fNormal3fVertex4fSUN(s, t, p, q, r, g, b, a, nx, ny, nz, x, y, z, w);}
+  GLEEPFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FSUNPROC GLeeFuncPtr_glTexCoord4fColor4fNormal3fVertex4fSUN=GLee_Lazy_glTexCoord4fColor4fNormal3fVertex4fSUN;
+#endif
+#ifndef GLEE_C_DEFINED_glTexCoord4fColor4fNormal3fVertex4fvSUN
+#define GLEE_C_DEFINED_glTexCoord4fColor4fNormal3fVertex4fvSUN
+  void __stdcall GLee_Lazy_glTexCoord4fColor4fNormal3fVertex4fvSUN(const GLfloat * tc, const GLfloat * c, const GLfloat * n, const GLfloat * v)  {if (GLeeInit()) glTexCoord4fColor4fNormal3fVertex4fvSUN(tc, c, n, v);}
+  GLEEPFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FVSUNPROC GLeeFuncPtr_glTexCoord4fColor4fNormal3fVertex4fvSUN=GLee_Lazy_glTexCoord4fColor4fNormal3fVertex4fvSUN;
+#endif
+#ifndef GLEE_C_DEFINED_glReplacementCodeuiVertex3fSUN
+#define GLEE_C_DEFINED_glReplacementCodeuiVertex3fSUN
+  void __stdcall GLee_Lazy_glReplacementCodeuiVertex3fSUN(GLuint  rc, GLfloat  x, GLfloat  y, GLfloat  z)  {if (GLeeInit()) glReplacementCodeuiVertex3fSUN(rc, x, y, z);}
+  GLEEPFNGLREPLACEMENTCODEUIVERTEX3FSUNPROC GLeeFuncPtr_glReplacementCodeuiVertex3fSUN=GLee_Lazy_glReplacementCodeuiVertex3fSUN;
+#endif
+#ifndef GLEE_C_DEFINED_glReplacementCodeuiVertex3fvSUN
+#define GLEE_C_DEFINED_glReplacementCodeuiVertex3fvSUN
+  void __stdcall GLee_Lazy_glReplacementCodeuiVertex3fvSUN(const GLuint * rc, const GLfloat * v)  {if (GLeeInit()) glReplacementCodeuiVertex3fvSUN(rc, v);}
+  GLEEPFNGLREPLACEMENTCODEUIVERTEX3FVSUNPROC GLeeFuncPtr_glReplacementCodeuiVertex3fvSUN=GLee_Lazy_glReplacementCodeuiVertex3fvSUN;
+#endif
+#ifndef GLEE_C_DEFINED_glReplacementCodeuiColor4ubVertex3fSUN
+#define GLEE_C_DEFINED_glReplacementCodeuiColor4ubVertex3fSUN
+  void __stdcall GLee_Lazy_glReplacementCodeuiColor4ubVertex3fSUN(GLuint  rc, GLubyte  r, GLubyte  g, GLubyte  b, GLubyte  a, GLfloat  x, GLfloat  y, GLfloat  z)  {if (GLeeInit()) glReplacementCodeuiColor4ubVertex3fSUN(rc, r, g, b, a, x, y, z);}
+  GLEEPFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FSUNPROC GLeeFuncPtr_glReplacementCodeuiColor4ubVertex3fSUN=GLee_Lazy_glReplacementCodeuiColor4ubVertex3fSUN;
+#endif
+#ifndef GLEE_C_DEFINED_glReplacementCodeuiColor4ubVertex3fvSUN
+#define GLEE_C_DEFINED_glReplacementCodeuiColor4ubVertex3fvSUN
+  void __stdcall GLee_Lazy_glReplacementCodeuiColor4ubVertex3fvSUN(const GLuint * rc, const GLubyte * c, const GLfloat * v)  {if (GLeeInit()) glReplacementCodeuiColor4ubVertex3fvSUN(rc, c, v);}
+  GLEEPFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FVSUNPROC GLeeFuncPtr_glReplacementCodeuiColor4ubVertex3fvSUN=GLee_Lazy_glReplacementCodeuiColor4ubVertex3fvSUN;
+#endif
+#ifndef GLEE_C_DEFINED_glReplacementCodeuiColor3fVertex3fSUN
+#define GLEE_C_DEFINED_glReplacementCodeuiColor3fVertex3fSUN
+  void __stdcall GLee_Lazy_glReplacementCodeuiColor3fVertex3fSUN(GLuint  rc, GLfloat  r, GLfloat  g, GLfloat  b, GLfloat  x, GLfloat  y, GLfloat  z)  {if (GLeeInit()) glReplacementCodeuiColor3fVertex3fSUN(rc, r, g, b, x, y, z);}
+  GLEEPFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FSUNPROC GLeeFuncPtr_glReplacementCodeuiColor3fVertex3fSUN=GLee_Lazy_glReplacementCodeuiColor3fVertex3fSUN;
+#endif
+#ifndef GLEE_C_DEFINED_glReplacementCodeuiColor3fVertex3fvSUN
+#define GLEE_C_DEFINED_glReplacementCodeuiColor3fVertex3fvSUN
+  void __stdcall GLee_Lazy_glReplacementCodeuiColor3fVertex3fvSUN(const GLuint * rc, const GLfloat * c, const GLfloat * v)  {if (GLeeInit()) glReplacementCodeuiColor3fVertex3fvSUN(rc, c, v);}
+  GLEEPFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FVSUNPROC GLeeFuncPtr_glReplacementCodeuiColor3fVertex3fvSUN=GLee_Lazy_glReplacementCodeuiColor3fVertex3fvSUN;
+#endif
+#ifndef GLEE_C_DEFINED_glReplacementCodeuiNormal3fVertex3fSUN
+#define GLEE_C_DEFINED_glReplacementCodeuiNormal3fVertex3fSUN
+  void __stdcall GLee_Lazy_glReplacementCodeuiNormal3fVertex3fSUN(GLuint  rc, GLfloat  nx, GLfloat  ny, GLfloat  nz, GLfloat  x, GLfloat  y, GLfloat  z)  {if (GLeeInit()) glReplacementCodeuiNormal3fVertex3fSUN(rc, nx, ny, nz, x, y, z);}
+  GLEEPFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FSUNPROC GLeeFuncPtr_glReplacementCodeuiNormal3fVertex3fSUN=GLee_Lazy_glReplacementCodeuiNormal3fVertex3fSUN;
+#endif
+#ifndef GLEE_C_DEFINED_glReplacementCodeuiNormal3fVertex3fvSUN
+#define GLEE_C_DEFINED_glReplacementCodeuiNormal3fVertex3fvSUN
+  void __stdcall GLee_Lazy_glReplacementCodeuiNormal3fVertex3fvSUN(const GLuint * rc, const GLfloat * n, const GLfloat * v)  {if (GLeeInit()) glReplacementCodeuiNormal3fVertex3fvSUN(rc, n, v);}
+  GLEEPFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FVSUNPROC GLeeFuncPtr_glReplacementCodeuiNormal3fVertex3fvSUN=GLee_Lazy_glReplacementCodeuiNormal3fVertex3fvSUN;
+#endif
+#ifndef GLEE_C_DEFINED_glReplacementCodeuiColor4fNormal3fVertex3fSUN
+#define GLEE_C_DEFINED_glReplacementCodeuiColor4fNormal3fVertex3fSUN
+  void __stdcall GLee_Lazy_glReplacementCodeuiColor4fNormal3fVertex3fSUN(GLuint  rc, GLfloat  r, GLfloat  g, GLfloat  b, GLfloat  a, GLfloat  nx, GLfloat  ny, GLfloat  nz, GLfloat  x, GLfloat  y, GLfloat  z)  {if (GLeeInit()) glReplacementCodeuiColor4fNormal3fVertex3fSUN(rc, r, g, b, a, nx, ny, nz, x, y, z);}
+  GLEEPFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FSUNPROC GLeeFuncPtr_glReplacementCodeuiColor4fNormal3fVertex3fSUN=GLee_Lazy_glReplacementCodeuiColor4fNormal3fVertex3fSUN;
+#endif
+#ifndef GLEE_C_DEFINED_glReplacementCodeuiColor4fNormal3fVertex3fvSUN
+#define GLEE_C_DEFINED_glReplacementCodeuiColor4fNormal3fVertex3fvSUN
+  void __stdcall GLee_Lazy_glReplacementCodeuiColor4fNormal3fVertex3fvSUN(const GLuint * rc, const GLfloat * c, const GLfloat * n, const GLfloat * v)  {if (GLeeInit()) glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, c, n, v);}
+  GLEEPFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FVSUNPROC GLeeFuncPtr_glReplacementCodeuiColor4fNormal3fVertex3fvSUN=GLee_Lazy_glReplacementCodeuiColor4fNormal3fVertex3fvSUN;
+#endif
+#ifndef GLEE_C_DEFINED_glReplacementCodeuiTexCoord2fVertex3fSUN
+#define GLEE_C_DEFINED_glReplacementCodeuiTexCoord2fVertex3fSUN
+  void __stdcall GLee_Lazy_glReplacementCodeuiTexCoord2fVertex3fSUN(GLuint  rc, GLfloat  s, GLfloat  t, GLfloat  x, GLfloat  y, GLfloat  z)  {if (GLeeInit()) glReplacementCodeuiTexCoord2fVertex3fSUN(rc, s, t, x, y, z);}
+  GLEEPFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FSUNPROC GLeeFuncPtr_glReplacementCodeuiTexCoord2fVertex3fSUN=GLee_Lazy_glReplacementCodeuiTexCoord2fVertex3fSUN;
+#endif
+#ifndef GLEE_C_DEFINED_glReplacementCodeuiTexCoord2fVertex3fvSUN
+#define GLEE_C_DEFINED_glReplacementCodeuiTexCoord2fVertex3fvSUN
+  void __stdcall GLee_Lazy_glReplacementCodeuiTexCoord2fVertex3fvSUN(const GLuint * rc, const GLfloat * tc, const GLfloat * v)  {if (GLeeInit()) glReplacementCodeuiTexCoord2fVertex3fvSUN(rc, tc, v);}
+  GLEEPFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FVSUNPROC GLeeFuncPtr_glReplacementCodeuiTexCoord2fVertex3fvSUN=GLee_Lazy_glReplacementCodeuiTexCoord2fVertex3fvSUN;
+#endif
+#ifndef GLEE_C_DEFINED_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN
+#define GLEE_C_DEFINED_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN
+  void __stdcall GLee_Lazy_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(GLuint  rc, GLfloat  s, GLfloat  t, GLfloat  nx, GLfloat  ny, GLfloat  nz, GLfloat  x, GLfloat  y, GLfloat  z)  {if (GLeeInit()) glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(rc, s, t, nx, ny, nz, x, y, z);}
+  GLEEPFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FSUNPROC GLeeFuncPtr_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN=GLee_Lazy_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN;
+#endif
+#ifndef GLEE_C_DEFINED_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN
+#define GLEE_C_DEFINED_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN
+  void __stdcall GLee_Lazy_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(const GLuint * rc, const GLfloat * tc, const GLfloat * n, const GLfloat * v)  {if (GLeeInit()) glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, tc, n, v);}
+  GLEEPFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FVSUNPROC GLeeFuncPtr_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN=GLee_Lazy_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN;
+#endif
+#ifndef GLEE_C_DEFINED_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN
+#define GLEE_C_DEFINED_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN
+  void __stdcall GLee_Lazy_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(GLuint  rc, GLfloat  s, GLfloat  t, GLfloat  r, GLfloat  g, GLfloat  b, GLfloat  a, GLfloat  nx, GLfloat  ny, GLfloat  nz, GLfloat  x, GLfloat  y, GLfloat  z)  {if (GLeeInit()) glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(rc, s, t, r, g, b, a, nx, ny, nz, x, y, z);}
+  GLEEPFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC GLeeFuncPtr_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN=GLee_Lazy_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN;
+#endif
+#ifndef GLEE_C_DEFINED_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN
+#define GLEE_C_DEFINED_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN
+  void __stdcall GLee_Lazy_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(const GLuint * rc, const GLfloat * tc, const GLfloat * c, const GLfloat * n, const GLfloat * v)  {if (GLeeInit()) glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, c, n, v);}
+  GLEEPFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC GLeeFuncPtr_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN=GLee_Lazy_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN;
+#endif
+#endif 
+
+/* GL_EXT_blend_func_separate */
+
+#ifdef __GLEE_GL_EXT_blend_func_separate
+#ifndef GLEE_C_DEFINED_glBlendFuncSeparateEXT
+#define GLEE_C_DEFINED_glBlendFuncSeparateEXT
+  void __stdcall GLee_Lazy_glBlendFuncSeparateEXT(GLenum  sfactorRGB, GLenum  dfactorRGB, GLenum  sfactorAlpha, GLenum  dfactorAlpha)  {if (GLeeInit()) glBlendFuncSeparateEXT(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);}
+  GLEEPFNGLBLENDFUNCSEPARATEEXTPROC GLeeFuncPtr_glBlendFuncSeparateEXT=GLee_Lazy_glBlendFuncSeparateEXT;
+#endif
+#endif 
+
+/* GL_INGR_color_clamp */
+
+#ifdef __GLEE_GL_INGR_color_clamp
+#endif 
+
+/* GL_INGR_interlace_read */
+
+#ifdef __GLEE_GL_INGR_interlace_read
+#endif 
+
+/* GL_EXT_stencil_wrap */
+
+#ifdef __GLEE_GL_EXT_stencil_wrap
+#endif 
+
+/* GL_EXT_422_pixels */
+
+#ifdef __GLEE_GL_EXT_422_pixels
+#endif 
+
+/* GL_NV_texgen_reflection */
+
+#ifdef __GLEE_GL_NV_texgen_reflection
+#endif 
+
+/* GL_EXT_texture_cube_map */
+
+#ifdef __GLEE_GL_EXT_texture_cube_map
+#endif 
+
+/* GL_SUN_convolution_border_modes */
+
+#ifdef __GLEE_GL_SUN_convolution_border_modes
+#endif 
+
+/* GL_EXT_texture_env_add */
+
+#ifdef __GLEE_GL_EXT_texture_env_add
+#endif 
+
+/* GL_EXT_texture_lod_bias */
+
+#ifdef __GLEE_GL_EXT_texture_lod_bias
+#endif 
+
+/* GL_EXT_texture_filter_anisotropic */
+
+#ifdef __GLEE_GL_EXT_texture_filter_anisotropic
+#endif 
+
+/* GL_EXT_vertex_weighting */
+
+#ifdef __GLEE_GL_EXT_vertex_weighting
+#ifndef GLEE_C_DEFINED_glVertexWeightfEXT
+#define GLEE_C_DEFINED_glVertexWeightfEXT
+  void __stdcall GLee_Lazy_glVertexWeightfEXT(GLfloat  weight)  {if (GLeeInit()) glVertexWeightfEXT(weight);}
+  GLEEPFNGLVERTEXWEIGHTFEXTPROC GLeeFuncPtr_glVertexWeightfEXT=GLee_Lazy_glVertexWeightfEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexWeightfvEXT
+#define GLEE_C_DEFINED_glVertexWeightfvEXT
+  void __stdcall GLee_Lazy_glVertexWeightfvEXT(const GLfloat * weight)  {if (GLeeInit()) glVertexWeightfvEXT(weight);}
+  GLEEPFNGLVERTEXWEIGHTFVEXTPROC GLeeFuncPtr_glVertexWeightfvEXT=GLee_Lazy_glVertexWeightfvEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexWeightPointerEXT
+#define GLEE_C_DEFINED_glVertexWeightPointerEXT
+  void __stdcall GLee_Lazy_glVertexWeightPointerEXT(GLsizei  size, GLenum  type, GLsizei  stride, const GLvoid * pointer)  {if (GLeeInit()) glVertexWeightPointerEXT(size, type, stride, pointer);}
+  GLEEPFNGLVERTEXWEIGHTPOINTEREXTPROC GLeeFuncPtr_glVertexWeightPointerEXT=GLee_Lazy_glVertexWeightPointerEXT;
+#endif
+#endif 
+
+/* GL_NV_light_max_exponent */
+
+#ifdef __GLEE_GL_NV_light_max_exponent
+#endif 
+
+/* GL_NV_vertex_array_range */
+
+#ifdef __GLEE_GL_NV_vertex_array_range
+#ifndef GLEE_C_DEFINED_glFlushVertexArrayRangeNV
+#define GLEE_C_DEFINED_glFlushVertexArrayRangeNV
+  void __stdcall GLee_Lazy_glFlushVertexArrayRangeNV(void)  {if (GLeeInit()) glFlushVertexArrayRangeNV();}
+  GLEEPFNGLFLUSHVERTEXARRAYRANGENVPROC GLeeFuncPtr_glFlushVertexArrayRangeNV=GLee_Lazy_glFlushVertexArrayRangeNV;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexArrayRangeNV
+#define GLEE_C_DEFINED_glVertexArrayRangeNV
+  void __stdcall GLee_Lazy_glVertexArrayRangeNV(GLsizei  length, const GLvoid * pointer)  {if (GLeeInit()) glVertexArrayRangeNV(length, pointer);}
+  GLEEPFNGLVERTEXARRAYRANGENVPROC GLeeFuncPtr_glVertexArrayRangeNV=GLee_Lazy_glVertexArrayRangeNV;
+#endif
+#endif 
+
+/* GL_NV_register_combiners */
+
+#ifdef __GLEE_GL_NV_register_combiners
+#ifndef GLEE_C_DEFINED_glCombinerParameterfvNV
+#define GLEE_C_DEFINED_glCombinerParameterfvNV
+  void __stdcall GLee_Lazy_glCombinerParameterfvNV(GLenum  pname, const GLfloat * params)  {if (GLeeInit()) glCombinerParameterfvNV(pname, params);}
+  GLEEPFNGLCOMBINERPARAMETERFVNVPROC GLeeFuncPtr_glCombinerParameterfvNV=GLee_Lazy_glCombinerParameterfvNV;
+#endif
+#ifndef GLEE_C_DEFINED_glCombinerParameterfNV
+#define GLEE_C_DEFINED_glCombinerParameterfNV
+  void __stdcall GLee_Lazy_glCombinerParameterfNV(GLenum  pname, GLfloat  param)  {if (GLeeInit()) glCombinerParameterfNV(pname, param);}
+  GLEEPFNGLCOMBINERPARAMETERFNVPROC GLeeFuncPtr_glCombinerParameterfNV=GLee_Lazy_glCombinerParameterfNV;
+#endif
+#ifndef GLEE_C_DEFINED_glCombinerParameterivNV
+#define GLEE_C_DEFINED_glCombinerParameterivNV
+  void __stdcall GLee_Lazy_glCombinerParameterivNV(GLenum  pname, const GLint * params)  {if (GLeeInit()) glCombinerParameterivNV(pname, params);}
+  GLEEPFNGLCOMBINERPARAMETERIVNVPROC GLeeFuncPtr_glCombinerParameterivNV=GLee_Lazy_glCombinerParameterivNV;
+#endif
+#ifndef GLEE_C_DEFINED_glCombinerParameteriNV
+#define GLEE_C_DEFINED_glCombinerParameteriNV
+  void __stdcall GLee_Lazy_glCombinerParameteriNV(GLenum  pname, GLint  param)  {if (GLeeInit()) glCombinerParameteriNV(pname, param);}
+  GLEEPFNGLCOMBINERPARAMETERINVPROC GLeeFuncPtr_glCombinerParameteriNV=GLee_Lazy_glCombinerParameteriNV;
+#endif
+#ifndef GLEE_C_DEFINED_glCombinerInputNV
+#define GLEE_C_DEFINED_glCombinerInputNV
+  void __stdcall GLee_Lazy_glCombinerInputNV(GLenum  stage, GLenum  portion, GLenum  variable, GLenum  input, GLenum  mapping, GLenum  componentUsage)  {if (GLeeInit()) glCombinerInputNV(stage, portion, variable, input, mapping, componentUsage);}
+  GLEEPFNGLCOMBINERINPUTNVPROC GLeeFuncPtr_glCombinerInputNV=GLee_Lazy_glCombinerInputNV;
+#endif
+#ifndef GLEE_C_DEFINED_glCombinerOutputNV
+#define GLEE_C_DEFINED_glCombinerOutputNV
+  void __stdcall GLee_Lazy_glCombinerOutputNV(GLenum  stage, GLenum  portion, GLenum  abOutput, GLenum  cdOutput, GLenum  sumOutput, GLenum  scale, GLenum  bias, GLboolean  abDotProduct, GLboolean  cdDotProduct, GLboolean  muxSum)  {if (GLeeInit()) glCombinerOutputNV(stage, portion, abOutput, cdOutput, sumOutput, scale, bias, abDotProduct, cdDotProduct, muxSum);}
+  GLEEPFNGLCOMBINEROUTPUTNVPROC GLeeFuncPtr_glCombinerOutputNV=GLee_Lazy_glCombinerOutputNV;
+#endif
+#ifndef GLEE_C_DEFINED_glFinalCombinerInputNV
+#define GLEE_C_DEFINED_glFinalCombinerInputNV
+  void __stdcall GLee_Lazy_glFinalCombinerInputNV(GLenum  variable, GLenum  input, GLenum  mapping, GLenum  componentUsage)  {if (GLeeInit()) glFinalCombinerInputNV(variable, input, mapping, componentUsage);}
+  GLEEPFNGLFINALCOMBINERINPUTNVPROC GLeeFuncPtr_glFinalCombinerInputNV=GLee_Lazy_glFinalCombinerInputNV;
+#endif
+#ifndef GLEE_C_DEFINED_glGetCombinerInputParameterfvNV
+#define GLEE_C_DEFINED_glGetCombinerInputParameterfvNV
+  void __stdcall GLee_Lazy_glGetCombinerInputParameterfvNV(GLenum  stage, GLenum  portion, GLenum  variable, GLenum  pname, GLfloat * params)  {if (GLeeInit()) glGetCombinerInputParameterfvNV(stage, portion, variable, pname, params);}
+  GLEEPFNGLGETCOMBINERINPUTPARAMETERFVNVPROC GLeeFuncPtr_glGetCombinerInputParameterfvNV=GLee_Lazy_glGetCombinerInputParameterfvNV;
+#endif
+#ifndef GLEE_C_DEFINED_glGetCombinerInputParameterivNV
+#define GLEE_C_DEFINED_glGetCombinerInputParameterivNV
+  void __stdcall GLee_Lazy_glGetCombinerInputParameterivNV(GLenum  stage, GLenum  portion, GLenum  variable, GLenum  pname, GLint * params)  {if (GLeeInit()) glGetCombinerInputParameterivNV(stage, portion, variable, pname, params);}
+  GLEEPFNGLGETCOMBINERINPUTPARAMETERIVNVPROC GLeeFuncPtr_glGetCombinerInputParameterivNV=GLee_Lazy_glGetCombinerInputParameterivNV;
+#endif
+#ifndef GLEE_C_DEFINED_glGetCombinerOutputParameterfvNV
+#define GLEE_C_DEFINED_glGetCombinerOutputParameterfvNV
+  void __stdcall GLee_Lazy_glGetCombinerOutputParameterfvNV(GLenum  stage, GLenum  portion, GLenum  pname, GLfloat * params)  {if (GLeeInit()) glGetCombinerOutputParameterfvNV(stage, portion, pname, params);}
+  GLEEPFNGLGETCOMBINEROUTPUTPARAMETERFVNVPROC GLeeFuncPtr_glGetCombinerOutputParameterfvNV=GLee_Lazy_glGetCombinerOutputParameterfvNV;
+#endif
+#ifndef GLEE_C_DEFINED_glGetCombinerOutputParameterivNV
+#define GLEE_C_DEFINED_glGetCombinerOutputParameterivNV
+  void __stdcall GLee_Lazy_glGetCombinerOutputParameterivNV(GLenum  stage, GLenum  portion, GLenum  pname, GLint * params)  {if (GLeeInit()) glGetCombinerOutputParameterivNV(stage, portion, pname, params);}
+  GLEEPFNGLGETCOMBINEROUTPUTPARAMETERIVNVPROC GLeeFuncPtr_glGetCombinerOutputParameterivNV=GLee_Lazy_glGetCombinerOutputParameterivNV;
+#endif
+#ifndef GLEE_C_DEFINED_glGetFinalCombinerInputParameterfvNV
+#define GLEE_C_DEFINED_glGetFinalCombinerInputParameterfvNV
+  void __stdcall GLee_Lazy_glGetFinalCombinerInputParameterfvNV(GLenum  variable, GLenum  pname, GLfloat * params)  {if (GLeeInit()) glGetFinalCombinerInputParameterfvNV(variable, pname, params);}
+  GLEEPFNGLGETFINALCOMBINERINPUTPARAMETERFVNVPROC GLeeFuncPtr_glGetFinalCombinerInputParameterfvNV=GLee_Lazy_glGetFinalCombinerInputParameterfvNV;
+#endif
+#ifndef GLEE_C_DEFINED_glGetFinalCombinerInputParameterivNV
+#define GLEE_C_DEFINED_glGetFinalCombinerInputParameterivNV
+  void __stdcall GLee_Lazy_glGetFinalCombinerInputParameterivNV(GLenum  variable, GLenum  pname, GLint * params)  {if (GLeeInit()) glGetFinalCombinerInputParameterivNV(variable, pname, params);}
+  GLEEPFNGLGETFINALCOMBINERINPUTPARAMETERIVNVPROC GLeeFuncPtr_glGetFinalCombinerInputParameterivNV=GLee_Lazy_glGetFinalCombinerInputParameterivNV;
+#endif
+#endif 
+
+/* GL_NV_fog_distance */
+
+#ifdef __GLEE_GL_NV_fog_distance
+#endif 
+
+/* GL_NV_texgen_emboss */
+
+#ifdef __GLEE_GL_NV_texgen_emboss
+#endif 
+
+/* GL_NV_blend_square */
+
+#ifdef __GLEE_GL_NV_blend_square
+#endif 
+
+/* GL_NV_texture_env_combine4 */
+
+#ifdef __GLEE_GL_NV_texture_env_combine4
+#endif 
+
+/* GL_MESA_resize_buffers */
+
+#ifdef __GLEE_GL_MESA_resize_buffers
+#ifndef GLEE_C_DEFINED_glResizeBuffersMESA
+#define GLEE_C_DEFINED_glResizeBuffersMESA
+  void __stdcall GLee_Lazy_glResizeBuffersMESA(void)  {if (GLeeInit()) glResizeBuffersMESA();}
+  GLEEPFNGLRESIZEBUFFERSMESAPROC GLeeFuncPtr_glResizeBuffersMESA=GLee_Lazy_glResizeBuffersMESA;
+#endif
+#endif 
+
+/* GL_MESA_window_pos */
+
+#ifdef __GLEE_GL_MESA_window_pos
+#ifndef GLEE_C_DEFINED_glWindowPos2dMESA
+#define GLEE_C_DEFINED_glWindowPos2dMESA
+  void __stdcall GLee_Lazy_glWindowPos2dMESA(GLdouble  x, GLdouble  y)  {if (GLeeInit()) glWindowPos2dMESA(x, y);}
+  GLEEPFNGLWINDOWPOS2DMESAPROC GLeeFuncPtr_glWindowPos2dMESA=GLee_Lazy_glWindowPos2dMESA;
+#endif
+#ifndef GLEE_C_DEFINED_glWindowPos2dvMESA
+#define GLEE_C_DEFINED_glWindowPos2dvMESA
+  void __stdcall GLee_Lazy_glWindowPos2dvMESA(const GLdouble * v)  {if (GLeeInit()) glWindowPos2dvMESA(v);}
+  GLEEPFNGLWINDOWPOS2DVMESAPROC GLeeFuncPtr_glWindowPos2dvMESA=GLee_Lazy_glWindowPos2dvMESA;
+#endif
+#ifndef GLEE_C_DEFINED_glWindowPos2fMESA
+#define GLEE_C_DEFINED_glWindowPos2fMESA
+  void __stdcall GLee_Lazy_glWindowPos2fMESA(GLfloat  x, GLfloat  y)  {if (GLeeInit()) glWindowPos2fMESA(x, y);}
+  GLEEPFNGLWINDOWPOS2FMESAPROC GLeeFuncPtr_glWindowPos2fMESA=GLee_Lazy_glWindowPos2fMESA;
+#endif
+#ifndef GLEE_C_DEFINED_glWindowPos2fvMESA
+#define GLEE_C_DEFINED_glWindowPos2fvMESA
+  void __stdcall GLee_Lazy_glWindowPos2fvMESA(const GLfloat * v)  {if (GLeeInit()) glWindowPos2fvMESA(v);}
+  GLEEPFNGLWINDOWPOS2FVMESAPROC GLeeFuncPtr_glWindowPos2fvMESA=GLee_Lazy_glWindowPos2fvMESA;
+#endif
+#ifndef GLEE_C_DEFINED_glWindowPos2iMESA
+#define GLEE_C_DEFINED_glWindowPos2iMESA
+  void __stdcall GLee_Lazy_glWindowPos2iMESA(GLint  x, GLint  y)  {if (GLeeInit()) glWindowPos2iMESA(x, y);}
+  GLEEPFNGLWINDOWPOS2IMESAPROC GLeeFuncPtr_glWindowPos2iMESA=GLee_Lazy_glWindowPos2iMESA;
+#endif
+#ifndef GLEE_C_DEFINED_glWindowPos2ivMESA
+#define GLEE_C_DEFINED_glWindowPos2ivMESA
+  void __stdcall GLee_Lazy_glWindowPos2ivMESA(const GLint * v)  {if (GLeeInit()) glWindowPos2ivMESA(v);}
+  GLEEPFNGLWINDOWPOS2IVMESAPROC GLeeFuncPtr_glWindowPos2ivMESA=GLee_Lazy_glWindowPos2ivMESA;
+#endif
+#ifndef GLEE_C_DEFINED_glWindowPos2sMESA
+#define GLEE_C_DEFINED_glWindowPos2sMESA
+  void __stdcall GLee_Lazy_glWindowPos2sMESA(GLshort  x, GLshort  y)  {if (GLeeInit()) glWindowPos2sMESA(x, y);}
+  GLEEPFNGLWINDOWPOS2SMESAPROC GLeeFuncPtr_glWindowPos2sMESA=GLee_Lazy_glWindowPos2sMESA;
+#endif
+#ifndef GLEE_C_DEFINED_glWindowPos2svMESA
+#define GLEE_C_DEFINED_glWindowPos2svMESA
+  void __stdcall GLee_Lazy_glWindowPos2svMESA(const GLshort * v)  {if (GLeeInit()) glWindowPos2svMESA(v);}
+  GLEEPFNGLWINDOWPOS2SVMESAPROC GLeeFuncPtr_glWindowPos2svMESA=GLee_Lazy_glWindowPos2svMESA;
+#endif
+#ifndef GLEE_C_DEFINED_glWindowPos3dMESA
+#define GLEE_C_DEFINED_glWindowPos3dMESA
+  void __stdcall GLee_Lazy_glWindowPos3dMESA(GLdouble  x, GLdouble  y, GLdouble  z)  {if (GLeeInit()) glWindowPos3dMESA(x, y, z);}
+  GLEEPFNGLWINDOWPOS3DMESAPROC GLeeFuncPtr_glWindowPos3dMESA=GLee_Lazy_glWindowPos3dMESA;
+#endif
+#ifndef GLEE_C_DEFINED_glWindowPos3dvMESA
+#define GLEE_C_DEFINED_glWindowPos3dvMESA
+  void __stdcall GLee_Lazy_glWindowPos3dvMESA(const GLdouble * v)  {if (GLeeInit()) glWindowPos3dvMESA(v);}
+  GLEEPFNGLWINDOWPOS3DVMESAPROC GLeeFuncPtr_glWindowPos3dvMESA=GLee_Lazy_glWindowPos3dvMESA;
+#endif
+#ifndef GLEE_C_DEFINED_glWindowPos3fMESA
+#define GLEE_C_DEFINED_glWindowPos3fMESA
+  void __stdcall GLee_Lazy_glWindowPos3fMESA(GLfloat  x, GLfloat  y, GLfloat  z)  {if (GLeeInit()) glWindowPos3fMESA(x, y, z);}
+  GLEEPFNGLWINDOWPOS3FMESAPROC GLeeFuncPtr_glWindowPos3fMESA=GLee_Lazy_glWindowPos3fMESA;
+#endif
+#ifndef GLEE_C_DEFINED_glWindowPos3fvMESA
+#define GLEE_C_DEFINED_glWindowPos3fvMESA
+  void __stdcall GLee_Lazy_glWindowPos3fvMESA(const GLfloat * v)  {if (GLeeInit()) glWindowPos3fvMESA(v);}
+  GLEEPFNGLWINDOWPOS3FVMESAPROC GLeeFuncPtr_glWindowPos3fvMESA=GLee_Lazy_glWindowPos3fvMESA;
+#endif
+#ifndef GLEE_C_DEFINED_glWindowPos3iMESA
+#define GLEE_C_DEFINED_glWindowPos3iMESA
+  void __stdcall GLee_Lazy_glWindowPos3iMESA(GLint  x, GLint  y, GLint  z)  {if (GLeeInit()) glWindowPos3iMESA(x, y, z);}
+  GLEEPFNGLWINDOWPOS3IMESAPROC GLeeFuncPtr_glWindowPos3iMESA=GLee_Lazy_glWindowPos3iMESA;
+#endif
+#ifndef GLEE_C_DEFINED_glWindowPos3ivMESA
+#define GLEE_C_DEFINED_glWindowPos3ivMESA
+  void __stdcall GLee_Lazy_glWindowPos3ivMESA(const GLint * v)  {if (GLeeInit()) glWindowPos3ivMESA(v);}
+  GLEEPFNGLWINDOWPOS3IVMESAPROC GLeeFuncPtr_glWindowPos3ivMESA=GLee_Lazy_glWindowPos3ivMESA;
+#endif
+#ifndef GLEE_C_DEFINED_glWindowPos3sMESA
+#define GLEE_C_DEFINED_glWindowPos3sMESA
+  void __stdcall GLee_Lazy_glWindowPos3sMESA(GLshort  x, GLshort  y, GLshort  z)  {if (GLeeInit()) glWindowPos3sMESA(x, y, z);}
+  GLEEPFNGLWINDOWPOS3SMESAPROC GLeeFuncPtr_glWindowPos3sMESA=GLee_Lazy_glWindowPos3sMESA;
+#endif
+#ifndef GLEE_C_DEFINED_glWindowPos3svMESA
+#define GLEE_C_DEFINED_glWindowPos3svMESA
+  void __stdcall GLee_Lazy_glWindowPos3svMESA(const GLshort * v)  {if (GLeeInit()) glWindowPos3svMESA(v);}
+  GLEEPFNGLWINDOWPOS3SVMESAPROC GLeeFuncPtr_glWindowPos3svMESA=GLee_Lazy_glWindowPos3svMESA;
+#endif
+#ifndef GLEE_C_DEFINED_glWindowPos4dMESA
+#define GLEE_C_DEFINED_glWindowPos4dMESA
+  void __stdcall GLee_Lazy_glWindowPos4dMESA(GLdouble  x, GLdouble  y, GLdouble  z, GLdouble  w)  {if (GLeeInit()) glWindowPos4dMESA(x, y, z, w);}
+  GLEEPFNGLWINDOWPOS4DMESAPROC GLeeFuncPtr_glWindowPos4dMESA=GLee_Lazy_glWindowPos4dMESA;
+#endif
+#ifndef GLEE_C_DEFINED_glWindowPos4dvMESA
+#define GLEE_C_DEFINED_glWindowPos4dvMESA
+  void __stdcall GLee_Lazy_glWindowPos4dvMESA(const GLdouble * v)  {if (GLeeInit()) glWindowPos4dvMESA(v);}
+  GLEEPFNGLWINDOWPOS4DVMESAPROC GLeeFuncPtr_glWindowPos4dvMESA=GLee_Lazy_glWindowPos4dvMESA;
+#endif
+#ifndef GLEE_C_DEFINED_glWindowPos4fMESA
+#define GLEE_C_DEFINED_glWindowPos4fMESA
+  void __stdcall GLee_Lazy_glWindowPos4fMESA(GLfloat  x, GLfloat  y, GLfloat  z, GLfloat  w)  {if (GLeeInit()) glWindowPos4fMESA(x, y, z, w);}
+  GLEEPFNGLWINDOWPOS4FMESAPROC GLeeFuncPtr_glWindowPos4fMESA=GLee_Lazy_glWindowPos4fMESA;
+#endif
+#ifndef GLEE_C_DEFINED_glWindowPos4fvMESA
+#define GLEE_C_DEFINED_glWindowPos4fvMESA
+  void __stdcall GLee_Lazy_glWindowPos4fvMESA(const GLfloat * v)  {if (GLeeInit()) glWindowPos4fvMESA(v);}
+  GLEEPFNGLWINDOWPOS4FVMESAPROC GLeeFuncPtr_glWindowPos4fvMESA=GLee_Lazy_glWindowPos4fvMESA;
+#endif
+#ifndef GLEE_C_DEFINED_glWindowPos4iMESA
+#define GLEE_C_DEFINED_glWindowPos4iMESA
+  void __stdcall GLee_Lazy_glWindowPos4iMESA(GLint  x, GLint  y, GLint  z, GLint  w)  {if (GLeeInit()) glWindowPos4iMESA(x, y, z, w);}
+  GLEEPFNGLWINDOWPOS4IMESAPROC GLeeFuncPtr_glWindowPos4iMESA=GLee_Lazy_glWindowPos4iMESA;
+#endif
+#ifndef GLEE_C_DEFINED_glWindowPos4ivMESA
+#define GLEE_C_DEFINED_glWindowPos4ivMESA
+  void __stdcall GLee_Lazy_glWindowPos4ivMESA(const GLint * v)  {if (GLeeInit()) glWindowPos4ivMESA(v);}
+  GLEEPFNGLWINDOWPOS4IVMESAPROC GLeeFuncPtr_glWindowPos4ivMESA=GLee_Lazy_glWindowPos4ivMESA;
+#endif
+#ifndef GLEE_C_DEFINED_glWindowPos4sMESA
+#define GLEE_C_DEFINED_glWindowPos4sMESA
+  void __stdcall GLee_Lazy_glWindowPos4sMESA(GLshort  x, GLshort  y, GLshort  z, GLshort  w)  {if (GLeeInit()) glWindowPos4sMESA(x, y, z, w);}
+  GLEEPFNGLWINDOWPOS4SMESAPROC GLeeFuncPtr_glWindowPos4sMESA=GLee_Lazy_glWindowPos4sMESA;
+#endif
+#ifndef GLEE_C_DEFINED_glWindowPos4svMESA
+#define GLEE_C_DEFINED_glWindowPos4svMESA
+  void __stdcall GLee_Lazy_glWindowPos4svMESA(const GLshort * v)  {if (GLeeInit()) glWindowPos4svMESA(v);}
+  GLEEPFNGLWINDOWPOS4SVMESAPROC GLeeFuncPtr_glWindowPos4svMESA=GLee_Lazy_glWindowPos4svMESA;
+#endif
+#endif 
+
+/* GL_EXT_texture_compression_s3tc */
+
+#ifdef __GLEE_GL_EXT_texture_compression_s3tc
+#endif 
+
+/* GL_IBM_cull_vertex */
+
+#ifdef __GLEE_GL_IBM_cull_vertex
+#endif 
+
+/* GL_IBM_multimode_draw_arrays */
+
+#ifdef __GLEE_GL_IBM_multimode_draw_arrays
+#ifndef GLEE_C_DEFINED_glMultiModeDrawArraysIBM
+#define GLEE_C_DEFINED_glMultiModeDrawArraysIBM
+  void __stdcall GLee_Lazy_glMultiModeDrawArraysIBM(const GLenum * mode, const GLint * first, const GLsizei * count, GLsizei  primcount, GLint  modestride)  {if (GLeeInit()) glMultiModeDrawArraysIBM(mode, first, count, primcount, modestride);}
+  GLEEPFNGLMULTIMODEDRAWARRAYSIBMPROC GLeeFuncPtr_glMultiModeDrawArraysIBM=GLee_Lazy_glMultiModeDrawArraysIBM;
+#endif
+#ifndef GLEE_C_DEFINED_glMultiModeDrawElementsIBM
+#define GLEE_C_DEFINED_glMultiModeDrawElementsIBM
+  void __stdcall GLee_Lazy_glMultiModeDrawElementsIBM(const GLenum * mode, const GLsizei * count, GLenum  type, const GLvoid* const * indices, GLsizei  primcount, GLint  modestride)  {if (GLeeInit()) glMultiModeDrawElementsIBM(mode, count, type, indices, primcount, modestride);}
+  GLEEPFNGLMULTIMODEDRAWELEMENTSIBMPROC GLeeFuncPtr_glMultiModeDrawElementsIBM=GLee_Lazy_glMultiModeDrawElementsIBM;
+#endif
+#endif 
+
+/* GL_IBM_vertex_array_lists */
+
+#ifdef __GLEE_GL_IBM_vertex_array_lists
+#ifndef GLEE_C_DEFINED_glColorPointerListIBM
+#define GLEE_C_DEFINED_glColorPointerListIBM
+  void __stdcall GLee_Lazy_glColorPointerListIBM(GLint  size, GLenum  type, GLint  stride, const GLvoid* * pointer, GLint  ptrstride)  {if (GLeeInit()) glColorPointerListIBM(size, type, stride, pointer, ptrstride);}
+  GLEEPFNGLCOLORPOINTERLISTIBMPROC GLeeFuncPtr_glColorPointerListIBM=GLee_Lazy_glColorPointerListIBM;
+#endif
+#ifndef GLEE_C_DEFINED_glSecondaryColorPointerListIBM
+#define GLEE_C_DEFINED_glSecondaryColorPointerListIBM
+  void __stdcall GLee_Lazy_glSecondaryColorPointerListIBM(GLint  size, GLenum  type, GLint  stride, const GLvoid* * pointer, GLint  ptrstride)  {if (GLeeInit()) glSecondaryColorPointerListIBM(size, type, stride, pointer, ptrstride);}
+  GLEEPFNGLSECONDARYCOLORPOINTERLISTIBMPROC GLeeFuncPtr_glSecondaryColorPointerListIBM=GLee_Lazy_glSecondaryColorPointerListIBM;
+#endif
+#ifndef GLEE_C_DEFINED_glEdgeFlagPointerListIBM
+#define GLEE_C_DEFINED_glEdgeFlagPointerListIBM
+  void __stdcall GLee_Lazy_glEdgeFlagPointerListIBM(GLint  stride, const GLboolean* * pointer, GLint  ptrstride)  {if (GLeeInit()) glEdgeFlagPointerListIBM(stride, pointer, ptrstride);}
+  GLEEPFNGLEDGEFLAGPOINTERLISTIBMPROC GLeeFuncPtr_glEdgeFlagPointerListIBM=GLee_Lazy_glEdgeFlagPointerListIBM;
+#endif
+#ifndef GLEE_C_DEFINED_glFogCoordPointerListIBM
+#define GLEE_C_DEFINED_glFogCoordPointerListIBM
+  void __stdcall GLee_Lazy_glFogCoordPointerListIBM(GLenum  type, GLint  stride, const GLvoid* * pointer, GLint  ptrstride)  {if (GLeeInit()) glFogCoordPointerListIBM(type, stride, pointer, ptrstride);}
+  GLEEPFNGLFOGCOORDPOINTERLISTIBMPROC GLeeFuncPtr_glFogCoordPointerListIBM=GLee_Lazy_glFogCoordPointerListIBM;
+#endif
+#ifndef GLEE_C_DEFINED_glIndexPointerListIBM
+#define GLEE_C_DEFINED_glIndexPointerListIBM
+  void __stdcall GLee_Lazy_glIndexPointerListIBM(GLenum  type, GLint  stride, const GLvoid* * pointer, GLint  ptrstride)  {if (GLeeInit()) glIndexPointerListIBM(type, stride, pointer, ptrstride);}
+  GLEEPFNGLINDEXPOINTERLISTIBMPROC GLeeFuncPtr_glIndexPointerListIBM=GLee_Lazy_glIndexPointerListIBM;
+#endif
+#ifndef GLEE_C_DEFINED_glNormalPointerListIBM
+#define GLEE_C_DEFINED_glNormalPointerListIBM
+  void __stdcall GLee_Lazy_glNormalPointerListIBM(GLenum  type, GLint  stride, const GLvoid* * pointer, GLint  ptrstride)  {if (GLeeInit()) glNormalPointerListIBM(type, stride, pointer, ptrstride);}
+  GLEEPFNGLNORMALPOINTERLISTIBMPROC GLeeFuncPtr_glNormalPointerListIBM=GLee_Lazy_glNormalPointerListIBM;
+#endif
+#ifndef GLEE_C_DEFINED_glTexCoordPointerListIBM
+#define GLEE_C_DEFINED_glTexCoordPointerListIBM
+  void __stdcall GLee_Lazy_glTexCoordPointerListIBM(GLint  size, GLenum  type, GLint  stride, const GLvoid* * pointer, GLint  ptrstride)  {if (GLeeInit()) glTexCoordPointerListIBM(size, type, stride, pointer, ptrstride);}
+  GLEEPFNGLTEXCOORDPOINTERLISTIBMPROC GLeeFuncPtr_glTexCoordPointerListIBM=GLee_Lazy_glTexCoordPointerListIBM;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexPointerListIBM
+#define GLEE_C_DEFINED_glVertexPointerListIBM
+  void __stdcall GLee_Lazy_glVertexPointerListIBM(GLint  size, GLenum  type, GLint  stride, const GLvoid* * pointer, GLint  ptrstride)  {if (GLeeInit()) glVertexPointerListIBM(size, type, stride, pointer, ptrstride);}
+  GLEEPFNGLVERTEXPOINTERLISTIBMPROC GLeeFuncPtr_glVertexPointerListIBM=GLee_Lazy_glVertexPointerListIBM;
+#endif
+#endif 
+
+/* GL_SGIX_subsample */
+
+#ifdef __GLEE_GL_SGIX_subsample
+#endif 
+
+/* GL_SGIX_ycrcb_subsample */
+
+#ifdef __GLEE_GL_SGIX_ycrcb_subsample
+#endif 
+
+/* GL_SGIX_ycrcba */
+
+#ifdef __GLEE_GL_SGIX_ycrcba
+#endif 
+
+/* GL_SGI_depth_pass_instrument */
+
+#ifdef __GLEE_GL_SGI_depth_pass_instrument
+#endif 
+
+/* GL_3DFX_texture_compression_FXT1 */
+
+#ifdef __GLEE_GL_3DFX_texture_compression_FXT1
+#endif 
+
+/* GL_3DFX_multisample */
+
+#ifdef __GLEE_GL_3DFX_multisample
+#endif 
+
+/* GL_3DFX_tbuffer */
+
+#ifdef __GLEE_GL_3DFX_tbuffer
+#ifndef GLEE_C_DEFINED_glTbufferMask3DFX
+#define GLEE_C_DEFINED_glTbufferMask3DFX
+  void __stdcall GLee_Lazy_glTbufferMask3DFX(GLuint  mask)  {if (GLeeInit()) glTbufferMask3DFX(mask);}
+  GLEEPFNGLTBUFFERMASK3DFXPROC GLeeFuncPtr_glTbufferMask3DFX=GLee_Lazy_glTbufferMask3DFX;
+#endif
+#endif 
+
+/* GL_EXT_multisample */
+
+#ifdef __GLEE_GL_EXT_multisample
+#ifndef GLEE_C_DEFINED_glSampleMaskEXT
+#define GLEE_C_DEFINED_glSampleMaskEXT
+  void __stdcall GLee_Lazy_glSampleMaskEXT(GLclampf  value, GLboolean  invert)  {if (GLeeInit()) glSampleMaskEXT(value, invert);}
+  GLEEPFNGLSAMPLEMASKEXTPROC GLeeFuncPtr_glSampleMaskEXT=GLee_Lazy_glSampleMaskEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glSamplePatternEXT
+#define GLEE_C_DEFINED_glSamplePatternEXT
+  void __stdcall GLee_Lazy_glSamplePatternEXT(GLenum  pattern)  {if (GLeeInit()) glSamplePatternEXT(pattern);}
+  GLEEPFNGLSAMPLEPATTERNEXTPROC GLeeFuncPtr_glSamplePatternEXT=GLee_Lazy_glSamplePatternEXT;
+#endif
+#endif 
+
+/* GL_SGIX_vertex_preclip */
+
+#ifdef __GLEE_GL_SGIX_vertex_preclip
+#endif 
+
+/* GL_SGIX_convolution_accuracy */
+
+#ifdef __GLEE_GL_SGIX_convolution_accuracy
+#endif 
+
+/* GL_SGIX_resample */
+
+#ifdef __GLEE_GL_SGIX_resample
+#endif 
+
+/* GL_SGIS_point_line_texgen */
+
+#ifdef __GLEE_GL_SGIS_point_line_texgen
+#endif 
+
+/* GL_SGIS_texture_color_mask */
+
+#ifdef __GLEE_GL_SGIS_texture_color_mask
+#ifndef GLEE_C_DEFINED_glTextureColorMaskSGIS
+#define GLEE_C_DEFINED_glTextureColorMaskSGIS
+  void __stdcall GLee_Lazy_glTextureColorMaskSGIS(GLboolean  red, GLboolean  green, GLboolean  blue, GLboolean  alpha)  {if (GLeeInit()) glTextureColorMaskSGIS(red, green, blue, alpha);}
+  GLEEPFNGLTEXTURECOLORMASKSGISPROC GLeeFuncPtr_glTextureColorMaskSGIS=GLee_Lazy_glTextureColorMaskSGIS;
+#endif
+#endif 
+
+/* GL_EXT_texture_env_dot3 */
+
+#ifdef __GLEE_GL_EXT_texture_env_dot3
+#endif 
+
+/* GL_ATI_texture_mirror_once */
+
+#ifdef __GLEE_GL_ATI_texture_mirror_once
+#endif 
+
+/* GL_NV_fence */
+
+#ifdef __GLEE_GL_NV_fence
+#ifndef GLEE_C_DEFINED_glDeleteFencesNV
+#define GLEE_C_DEFINED_glDeleteFencesNV
+  void __stdcall GLee_Lazy_glDeleteFencesNV(GLsizei  n, const GLuint * fences)  {if (GLeeInit()) glDeleteFencesNV(n, fences);}
+  GLEEPFNGLDELETEFENCESNVPROC GLeeFuncPtr_glDeleteFencesNV=GLee_Lazy_glDeleteFencesNV;
+#endif
+#ifndef GLEE_C_DEFINED_glGenFencesNV
+#define GLEE_C_DEFINED_glGenFencesNV
+  void __stdcall GLee_Lazy_glGenFencesNV(GLsizei  n, GLuint * fences)  {if (GLeeInit()) glGenFencesNV(n, fences);}
+  GLEEPFNGLGENFENCESNVPROC GLeeFuncPtr_glGenFencesNV=GLee_Lazy_glGenFencesNV;
+#endif
+#ifndef GLEE_C_DEFINED_glIsFenceNV
+#define GLEE_C_DEFINED_glIsFenceNV
+  GLboolean __stdcall GLee_Lazy_glIsFenceNV(GLuint  fence)  {if (GLeeInit()) return glIsFenceNV(fence); return (GLboolean)0;}
+  GLEEPFNGLISFENCENVPROC GLeeFuncPtr_glIsFenceNV=GLee_Lazy_glIsFenceNV;
+#endif
+#ifndef GLEE_C_DEFINED_glTestFenceNV
+#define GLEE_C_DEFINED_glTestFenceNV
+  GLboolean __stdcall GLee_Lazy_glTestFenceNV(GLuint  fence)  {if (GLeeInit()) return glTestFenceNV(fence); return (GLboolean)0;}
+  GLEEPFNGLTESTFENCENVPROC GLeeFuncPtr_glTestFenceNV=GLee_Lazy_glTestFenceNV;
+#endif
+#ifndef GLEE_C_DEFINED_glGetFenceivNV
+#define GLEE_C_DEFINED_glGetFenceivNV
+  void __stdcall GLee_Lazy_glGetFenceivNV(GLuint  fence, GLenum  pname, GLint * params)  {if (GLeeInit()) glGetFenceivNV(fence, pname, params);}
+  GLEEPFNGLGETFENCEIVNVPROC GLeeFuncPtr_glGetFenceivNV=GLee_Lazy_glGetFenceivNV;
+#endif
+#ifndef GLEE_C_DEFINED_glFinishFenceNV
+#define GLEE_C_DEFINED_glFinishFenceNV
+  void __stdcall GLee_Lazy_glFinishFenceNV(GLuint  fence)  {if (GLeeInit()) glFinishFenceNV(fence);}
+  GLEEPFNGLFINISHFENCENVPROC GLeeFuncPtr_glFinishFenceNV=GLee_Lazy_glFinishFenceNV;
+#endif
+#ifndef GLEE_C_DEFINED_glSetFenceNV
+#define GLEE_C_DEFINED_glSetFenceNV
+  void __stdcall GLee_Lazy_glSetFenceNV(GLuint  fence, GLenum  condition)  {if (GLeeInit()) glSetFenceNV(fence, condition);}
+  GLEEPFNGLSETFENCENVPROC GLeeFuncPtr_glSetFenceNV=GLee_Lazy_glSetFenceNV;
+#endif
+#endif 
+
+/* GL_IBM_texture_mirrored_repeat */
+
+#ifdef __GLEE_GL_IBM_texture_mirrored_repeat
+#endif 
+
+/* GL_NV_evaluators */
+
+#ifdef __GLEE_GL_NV_evaluators
+#ifndef GLEE_C_DEFINED_glMapControlPointsNV
+#define GLEE_C_DEFINED_glMapControlPointsNV
+  void __stdcall GLee_Lazy_glMapControlPointsNV(GLenum  target, GLuint  index, GLenum  type, GLsizei  ustride, GLsizei  vstride, GLint  uorder, GLint  vorder, GLboolean  packed, const GLvoid * points)  {if (GLeeInit()) glMapControlPointsNV(target, index, type, ustride, vstride, uorder, vorder, packed, points);}
+  GLEEPFNGLMAPCONTROLPOINTSNVPROC GLeeFuncPtr_glMapControlPointsNV=GLee_Lazy_glMapControlPointsNV;
+#endif
+#ifndef GLEE_C_DEFINED_glMapParameterivNV
+#define GLEE_C_DEFINED_glMapParameterivNV
+  void __stdcall GLee_Lazy_glMapParameterivNV(GLenum  target, GLenum  pname, const GLint * params)  {if (GLeeInit()) glMapParameterivNV(target, pname, params);}
+  GLEEPFNGLMAPPARAMETERIVNVPROC GLeeFuncPtr_glMapParameterivNV=GLee_Lazy_glMapParameterivNV;
+#endif
+#ifndef GLEE_C_DEFINED_glMapParameterfvNV
+#define GLEE_C_DEFINED_glMapParameterfvNV
+  void __stdcall GLee_Lazy_glMapParameterfvNV(GLenum  target, GLenum  pname, const GLfloat * params)  {if (GLeeInit()) glMapParameterfvNV(target, pname, params);}
+  GLEEPFNGLMAPPARAMETERFVNVPROC GLeeFuncPtr_glMapParameterfvNV=GLee_Lazy_glMapParameterfvNV;
+#endif
+#ifndef GLEE_C_DEFINED_glGetMapControlPointsNV
+#define GLEE_C_DEFINED_glGetMapControlPointsNV
+  void __stdcall GLee_Lazy_glGetMapControlPointsNV(GLenum  target, GLuint  index, GLenum  type, GLsizei  ustride, GLsizei  vstride, GLboolean  packed, GLvoid * points)  {if (GLeeInit()) glGetMapControlPointsNV(target, index, type, ustride, vstride, packed, points);}
+  GLEEPFNGLGETMAPCONTROLPOINTSNVPROC GLeeFuncPtr_glGetMapControlPointsNV=GLee_Lazy_glGetMapControlPointsNV;
+#endif
+#ifndef GLEE_C_DEFINED_glGetMapParameterivNV
+#define GLEE_C_DEFINED_glGetMapParameterivNV
+  void __stdcall GLee_Lazy_glGetMapParameterivNV(GLenum  target, GLenum  pname, GLint * params)  {if (GLeeInit()) glGetMapParameterivNV(target, pname, params);}
+  GLEEPFNGLGETMAPPARAMETERIVNVPROC GLeeFuncPtr_glGetMapParameterivNV=GLee_Lazy_glGetMapParameterivNV;
+#endif
+#ifndef GLEE_C_DEFINED_glGetMapParameterfvNV
+#define GLEE_C_DEFINED_glGetMapParameterfvNV
+  void __stdcall GLee_Lazy_glGetMapParameterfvNV(GLenum  target, GLenum  pname, GLfloat * params)  {if (GLeeInit()) glGetMapParameterfvNV(target, pname, params);}
+  GLEEPFNGLGETMAPPARAMETERFVNVPROC GLeeFuncPtr_glGetMapParameterfvNV=GLee_Lazy_glGetMapParameterfvNV;
+#endif
+#ifndef GLEE_C_DEFINED_glGetMapAttribParameterivNV
+#define GLEE_C_DEFINED_glGetMapAttribParameterivNV
+  void __stdcall GLee_Lazy_glGetMapAttribParameterivNV(GLenum  target, GLuint  index, GLenum  pname, GLint * params)  {if (GLeeInit()) glGetMapAttribParameterivNV(target, index, pname, params);}
+  GLEEPFNGLGETMAPATTRIBPARAMETERIVNVPROC GLeeFuncPtr_glGetMapAttribParameterivNV=GLee_Lazy_glGetMapAttribParameterivNV;
+#endif
+#ifndef GLEE_C_DEFINED_glGetMapAttribParameterfvNV
+#define GLEE_C_DEFINED_glGetMapAttribParameterfvNV
+  void __stdcall GLee_Lazy_glGetMapAttribParameterfvNV(GLenum  target, GLuint  index, GLenum  pname, GLfloat * params)  {if (GLeeInit()) glGetMapAttribParameterfvNV(target, index, pname, params);}
+  GLEEPFNGLGETMAPATTRIBPARAMETERFVNVPROC GLeeFuncPtr_glGetMapAttribParameterfvNV=GLee_Lazy_glGetMapAttribParameterfvNV;
+#endif
+#ifndef GLEE_C_DEFINED_glEvalMapsNV
+#define GLEE_C_DEFINED_glEvalMapsNV
+  void __stdcall GLee_Lazy_glEvalMapsNV(GLenum  target, GLenum  mode)  {if (GLeeInit()) glEvalMapsNV(target, mode);}
+  GLEEPFNGLEVALMAPSNVPROC GLeeFuncPtr_glEvalMapsNV=GLee_Lazy_glEvalMapsNV;
+#endif
+#endif 
+
+/* GL_NV_packed_depth_stencil */
+
+#ifdef __GLEE_GL_NV_packed_depth_stencil
+#endif 
+
+/* GL_NV_register_combiners2 */
+
+#ifdef __GLEE_GL_NV_register_combiners2
+#ifndef GLEE_C_DEFINED_glCombinerStageParameterfvNV
+#define GLEE_C_DEFINED_glCombinerStageParameterfvNV
+  void __stdcall GLee_Lazy_glCombinerStageParameterfvNV(GLenum  stage, GLenum  pname, const GLfloat * params)  {if (GLeeInit()) glCombinerStageParameterfvNV(stage, pname, params);}
+  GLEEPFNGLCOMBINERSTAGEPARAMETERFVNVPROC GLeeFuncPtr_glCombinerStageParameterfvNV=GLee_Lazy_glCombinerStageParameterfvNV;
+#endif
+#ifndef GLEE_C_DEFINED_glGetCombinerStageParameterfvNV
+#define GLEE_C_DEFINED_glGetCombinerStageParameterfvNV
+  void __stdcall GLee_Lazy_glGetCombinerStageParameterfvNV(GLenum  stage, GLenum  pname, GLfloat * params)  {if (GLeeInit()) glGetCombinerStageParameterfvNV(stage, pname, params);}
+  GLEEPFNGLGETCOMBINERSTAGEPARAMETERFVNVPROC GLeeFuncPtr_glGetCombinerStageParameterfvNV=GLee_Lazy_glGetCombinerStageParameterfvNV;
+#endif
+#endif 
+
+/* GL_NV_texture_compression_vtc */
+
+#ifdef __GLEE_GL_NV_texture_compression_vtc
+#endif 
+
+/* GL_NV_texture_rectangle */
+
+#ifdef __GLEE_GL_NV_texture_rectangle
+#endif 
+
+/* GL_NV_texture_shader */
+
+#ifdef __GLEE_GL_NV_texture_shader
+#endif 
+
+/* GL_NV_texture_shader2 */
+
+#ifdef __GLEE_GL_NV_texture_shader2
+#endif 
+
+/* GL_NV_vertex_array_range2 */
+
+#ifdef __GLEE_GL_NV_vertex_array_range2
+#endif 
+
+/* GL_NV_vertex_program */
+
+#ifdef __GLEE_GL_NV_vertex_program
+#ifndef GLEE_C_DEFINED_glAreProgramsResidentNV
+#define GLEE_C_DEFINED_glAreProgramsResidentNV
+  GLboolean __stdcall GLee_Lazy_glAreProgramsResidentNV(GLsizei  n, const GLuint * programs, GLboolean * residences)  {if (GLeeInit()) return glAreProgramsResidentNV(n, programs, residences); return (GLboolean)0;}
+  GLEEPFNGLAREPROGRAMSRESIDENTNVPROC GLeeFuncPtr_glAreProgramsResidentNV=GLee_Lazy_glAreProgramsResidentNV;
+#endif
+#ifndef GLEE_C_DEFINED_glBindProgramNV
+#define GLEE_C_DEFINED_glBindProgramNV
+  void __stdcall GLee_Lazy_glBindProgramNV(GLenum  target, GLuint  id)  {if (GLeeInit()) glBindProgramNV(target, id);}
+  GLEEPFNGLBINDPROGRAMNVPROC GLeeFuncPtr_glBindProgramNV=GLee_Lazy_glBindProgramNV;
+#endif
+#ifndef GLEE_C_DEFINED_glDeleteProgramsNV
+#define GLEE_C_DEFINED_glDeleteProgramsNV
+  void __stdcall GLee_Lazy_glDeleteProgramsNV(GLsizei  n, const GLuint * programs)  {if (GLeeInit()) glDeleteProgramsNV(n, programs);}
+  GLEEPFNGLDELETEPROGRAMSNVPROC GLeeFuncPtr_glDeleteProgramsNV=GLee_Lazy_glDeleteProgramsNV;
+#endif
+#ifndef GLEE_C_DEFINED_glExecuteProgramNV
+#define GLEE_C_DEFINED_glExecuteProgramNV
+  void __stdcall GLee_Lazy_glExecuteProgramNV(GLenum  target, GLuint  id, const GLfloat * params)  {if (GLeeInit()) glExecuteProgramNV(target, id, params);}
+  GLEEPFNGLEXECUTEPROGRAMNVPROC GLeeFuncPtr_glExecuteProgramNV=GLee_Lazy_glExecuteProgramNV;
+#endif
+#ifndef GLEE_C_DEFINED_glGenProgramsNV
+#define GLEE_C_DEFINED_glGenProgramsNV
+  void __stdcall GLee_Lazy_glGenProgramsNV(GLsizei  n, GLuint * programs)  {if (GLeeInit()) glGenProgramsNV(n, programs);}
+  GLEEPFNGLGENPROGRAMSNVPROC GLeeFuncPtr_glGenProgramsNV=GLee_Lazy_glGenProgramsNV;
+#endif
+#ifndef GLEE_C_DEFINED_glGetProgramParameterdvNV
+#define GLEE_C_DEFINED_glGetProgramParameterdvNV
+  void __stdcall GLee_Lazy_glGetProgramParameterdvNV(GLenum  target, GLuint  index, GLenum  pname, GLdouble * params)  {if (GLeeInit()) glGetProgramParameterdvNV(target, index, pname, params);}
+  GLEEPFNGLGETPROGRAMPARAMETERDVNVPROC GLeeFuncPtr_glGetProgramParameterdvNV=GLee_Lazy_glGetProgramParameterdvNV;
+#endif
+#ifndef GLEE_C_DEFINED_glGetProgramParameterfvNV
+#define GLEE_C_DEFINED_glGetProgramParameterfvNV
+  void __stdcall GLee_Lazy_glGetProgramParameterfvNV(GLenum  target, GLuint  index, GLenum  pname, GLfloat * params)  {if (GLeeInit()) glGetProgramParameterfvNV(target, index, pname, params);}
+  GLEEPFNGLGETPROGRAMPARAMETERFVNVPROC GLeeFuncPtr_glGetProgramParameterfvNV=GLee_Lazy_glGetProgramParameterfvNV;
+#endif
+#ifndef GLEE_C_DEFINED_glGetProgramivNV
+#define GLEE_C_DEFINED_glGetProgramivNV
+  void __stdcall GLee_Lazy_glGetProgramivNV(GLuint  id, GLenum  pname, GLint * params)  {if (GLeeInit()) glGetProgramivNV(id, pname, params);}
+  GLEEPFNGLGETPROGRAMIVNVPROC GLeeFuncPtr_glGetProgramivNV=GLee_Lazy_glGetProgramivNV;
+#endif
+#ifndef GLEE_C_DEFINED_glGetProgramStringNV
+#define GLEE_C_DEFINED_glGetProgramStringNV
+  void __stdcall GLee_Lazy_glGetProgramStringNV(GLuint  id, GLenum  pname, GLubyte * program)  {if (GLeeInit()) glGetProgramStringNV(id, pname, program);}
+  GLEEPFNGLGETPROGRAMSTRINGNVPROC GLeeFuncPtr_glGetProgramStringNV=GLee_Lazy_glGetProgramStringNV;
+#endif
+#ifndef GLEE_C_DEFINED_glGetTrackMatrixivNV
+#define GLEE_C_DEFINED_glGetTrackMatrixivNV
+  void __stdcall GLee_Lazy_glGetTrackMatrixivNV(GLenum  target, GLuint  address, GLenum  pname, GLint * params)  {if (GLeeInit()) glGetTrackMatrixivNV(target, address, pname, params);}
+  GLEEPFNGLGETTRACKMATRIXIVNVPROC GLeeFuncPtr_glGetTrackMatrixivNV=GLee_Lazy_glGetTrackMatrixivNV;
+#endif
+#ifndef GLEE_C_DEFINED_glGetVertexAttribdvNV
+#define GLEE_C_DEFINED_glGetVertexAttribdvNV
+  void __stdcall GLee_Lazy_glGetVertexAttribdvNV(GLuint  index, GLenum  pname, GLdouble * params)  {if (GLeeInit()) glGetVertexAttribdvNV(index, pname, params);}
+  GLEEPFNGLGETVERTEXATTRIBDVNVPROC GLeeFuncPtr_glGetVertexAttribdvNV=GLee_Lazy_glGetVertexAttribdvNV;
+#endif
+#ifndef GLEE_C_DEFINED_glGetVertexAttribfvNV
+#define GLEE_C_DEFINED_glGetVertexAttribfvNV
+  void __stdcall GLee_Lazy_glGetVertexAttribfvNV(GLuint  index, GLenum  pname, GLfloat * params)  {if (GLeeInit()) glGetVertexAttribfvNV(index, pname, params);}
+  GLEEPFNGLGETVERTEXATTRIBFVNVPROC GLeeFuncPtr_glGetVertexAttribfvNV=GLee_Lazy_glGetVertexAttribfvNV;
+#endif
+#ifndef GLEE_C_DEFINED_glGetVertexAttribivNV
+#define GLEE_C_DEFINED_glGetVertexAttribivNV
+  void __stdcall GLee_Lazy_glGetVertexAttribivNV(GLuint  index, GLenum  pname, GLint * params)  {if (GLeeInit()) glGetVertexAttribivNV(index, pname, params);}
+  GLEEPFNGLGETVERTEXATTRIBIVNVPROC GLeeFuncPtr_glGetVertexAttribivNV=GLee_Lazy_glGetVertexAttribivNV;
+#endif
+#ifndef GLEE_C_DEFINED_glGetVertexAttribPointervNV
+#define GLEE_C_DEFINED_glGetVertexAttribPointervNV
+  void __stdcall GLee_Lazy_glGetVertexAttribPointervNV(GLuint  index, GLenum  pname, GLvoid* * pointer)  {if (GLeeInit()) glGetVertexAttribPointervNV(index, pname, pointer);}
+  GLEEPFNGLGETVERTEXATTRIBPOINTERVNVPROC GLeeFuncPtr_glGetVertexAttribPointervNV=GLee_Lazy_glGetVertexAttribPointervNV;
+#endif
+#ifndef GLEE_C_DEFINED_glIsProgramNV
+#define GLEE_C_DEFINED_glIsProgramNV
+  GLboolean __stdcall GLee_Lazy_glIsProgramNV(GLuint  id)  {if (GLeeInit()) return glIsProgramNV(id); return (GLboolean)0;}
+  GLEEPFNGLISPROGRAMNVPROC GLeeFuncPtr_glIsProgramNV=GLee_Lazy_glIsProgramNV;
+#endif
+#ifndef GLEE_C_DEFINED_glLoadProgramNV
+#define GLEE_C_DEFINED_glLoadProgramNV
+  void __stdcall GLee_Lazy_glLoadProgramNV(GLenum  target, GLuint  id, GLsizei  len, const GLubyte * program)  {if (GLeeInit()) glLoadProgramNV(target, id, len, program);}
+  GLEEPFNGLLOADPROGRAMNVPROC GLeeFuncPtr_glLoadProgramNV=GLee_Lazy_glLoadProgramNV;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramParameter4dNV
+#define GLEE_C_DEFINED_glProgramParameter4dNV
+  void __stdcall GLee_Lazy_glProgramParameter4dNV(GLenum  target, GLuint  index, GLdouble  x, GLdouble  y, GLdouble  z, GLdouble  w)  {if (GLeeInit()) glProgramParameter4dNV(target, index, x, y, z, w);}
+  GLEEPFNGLPROGRAMPARAMETER4DNVPROC GLeeFuncPtr_glProgramParameter4dNV=GLee_Lazy_glProgramParameter4dNV;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramParameter4dvNV
+#define GLEE_C_DEFINED_glProgramParameter4dvNV
+  void __stdcall GLee_Lazy_glProgramParameter4dvNV(GLenum  target, GLuint  index, const GLdouble * v)  {if (GLeeInit()) glProgramParameter4dvNV(target, index, v);}
+  GLEEPFNGLPROGRAMPARAMETER4DVNVPROC GLeeFuncPtr_glProgramParameter4dvNV=GLee_Lazy_glProgramParameter4dvNV;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramParameter4fNV
+#define GLEE_C_DEFINED_glProgramParameter4fNV
+  void __stdcall GLee_Lazy_glProgramParameter4fNV(GLenum  target, GLuint  index, GLfloat  x, GLfloat  y, GLfloat  z, GLfloat  w)  {if (GLeeInit()) glProgramParameter4fNV(target, index, x, y, z, w);}
+  GLEEPFNGLPROGRAMPARAMETER4FNVPROC GLeeFuncPtr_glProgramParameter4fNV=GLee_Lazy_glProgramParameter4fNV;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramParameter4fvNV
+#define GLEE_C_DEFINED_glProgramParameter4fvNV
+  void __stdcall GLee_Lazy_glProgramParameter4fvNV(GLenum  target, GLuint  index, const GLfloat * v)  {if (GLeeInit()) glProgramParameter4fvNV(target, index, v);}
+  GLEEPFNGLPROGRAMPARAMETER4FVNVPROC GLeeFuncPtr_glProgramParameter4fvNV=GLee_Lazy_glProgramParameter4fvNV;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramParameters4dvNV
+#define GLEE_C_DEFINED_glProgramParameters4dvNV
+  void __stdcall GLee_Lazy_glProgramParameters4dvNV(GLenum  target, GLuint  index, GLsizei  count, const GLdouble * v)  {if (GLeeInit()) glProgramParameters4dvNV(target, index, count, v);}
+  GLEEPFNGLPROGRAMPARAMETERS4DVNVPROC GLeeFuncPtr_glProgramParameters4dvNV=GLee_Lazy_glProgramParameters4dvNV;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramParameters4fvNV
+#define GLEE_C_DEFINED_glProgramParameters4fvNV
+  void __stdcall GLee_Lazy_glProgramParameters4fvNV(GLenum  target, GLuint  index, GLsizei  count, const GLfloat * v)  {if (GLeeInit()) glProgramParameters4fvNV(target, index, count, v);}
+  GLEEPFNGLPROGRAMPARAMETERS4FVNVPROC GLeeFuncPtr_glProgramParameters4fvNV=GLee_Lazy_glProgramParameters4fvNV;
+#endif
+#ifndef GLEE_C_DEFINED_glRequestResidentProgramsNV
+#define GLEE_C_DEFINED_glRequestResidentProgramsNV
+  void __stdcall GLee_Lazy_glRequestResidentProgramsNV(GLsizei  n, const GLuint * programs)  {if (GLeeInit()) glRequestResidentProgramsNV(n, programs);}
+  GLEEPFNGLREQUESTRESIDENTPROGRAMSNVPROC GLeeFuncPtr_glRequestResidentProgramsNV=GLee_Lazy_glRequestResidentProgramsNV;
+#endif
+#ifndef GLEE_C_DEFINED_glTrackMatrixNV
+#define GLEE_C_DEFINED_glTrackMatrixNV
+  void __stdcall GLee_Lazy_glTrackMatrixNV(GLenum  target, GLuint  address, GLenum  matrix, GLenum  transform)  {if (GLeeInit()) glTrackMatrixNV(target, address, matrix, transform);}
+  GLEEPFNGLTRACKMATRIXNVPROC GLeeFuncPtr_glTrackMatrixNV=GLee_Lazy_glTrackMatrixNV;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttribPointerNV
+#define GLEE_C_DEFINED_glVertexAttribPointerNV
+  void __stdcall GLee_Lazy_glVertexAttribPointerNV(GLuint  index, GLint  fsize, GLenum  type, GLsizei  stride, const GLvoid * pointer)  {if (GLeeInit()) glVertexAttribPointerNV(index, fsize, type, stride, pointer);}
+  GLEEPFNGLVERTEXATTRIBPOINTERNVPROC GLeeFuncPtr_glVertexAttribPointerNV=GLee_Lazy_glVertexAttribPointerNV;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttrib1dNV
+#define GLEE_C_DEFINED_glVertexAttrib1dNV
+  void __stdcall GLee_Lazy_glVertexAttrib1dNV(GLuint  index, GLdouble  x)  {if (GLeeInit()) glVertexAttrib1dNV(index, x);}
+  GLEEPFNGLVERTEXATTRIB1DNVPROC GLeeFuncPtr_glVertexAttrib1dNV=GLee_Lazy_glVertexAttrib1dNV;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttrib1dvNV
+#define GLEE_C_DEFINED_glVertexAttrib1dvNV
+  void __stdcall GLee_Lazy_glVertexAttrib1dvNV(GLuint  index, const GLdouble * v)  {if (GLeeInit()) glVertexAttrib1dvNV(index, v);}
+  GLEEPFNGLVERTEXATTRIB1DVNVPROC GLeeFuncPtr_glVertexAttrib1dvNV=GLee_Lazy_glVertexAttrib1dvNV;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttrib1fNV
+#define GLEE_C_DEFINED_glVertexAttrib1fNV
+  void __stdcall GLee_Lazy_glVertexAttrib1fNV(GLuint  index, GLfloat  x)  {if (GLeeInit()) glVertexAttrib1fNV(index, x);}
+  GLEEPFNGLVERTEXATTRIB1FNVPROC GLeeFuncPtr_glVertexAttrib1fNV=GLee_Lazy_glVertexAttrib1fNV;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttrib1fvNV
+#define GLEE_C_DEFINED_glVertexAttrib1fvNV
+  void __stdcall GLee_Lazy_glVertexAttrib1fvNV(GLuint  index, const GLfloat * v)  {if (GLeeInit()) glVertexAttrib1fvNV(index, v);}
+  GLEEPFNGLVERTEXATTRIB1FVNVPROC GLeeFuncPtr_glVertexAttrib1fvNV=GLee_Lazy_glVertexAttrib1fvNV;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttrib1sNV
+#define GLEE_C_DEFINED_glVertexAttrib1sNV
+  void __stdcall GLee_Lazy_glVertexAttrib1sNV(GLuint  index, GLshort  x)  {if (GLeeInit()) glVertexAttrib1sNV(index, x);}
+  GLEEPFNGLVERTEXATTRIB1SNVPROC GLeeFuncPtr_glVertexAttrib1sNV=GLee_Lazy_glVertexAttrib1sNV;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttrib1svNV
+#define GLEE_C_DEFINED_glVertexAttrib1svNV
+  void __stdcall GLee_Lazy_glVertexAttrib1svNV(GLuint  index, const GLshort * v)  {if (GLeeInit()) glVertexAttrib1svNV(index, v);}
+  GLEEPFNGLVERTEXATTRIB1SVNVPROC GLeeFuncPtr_glVertexAttrib1svNV=GLee_Lazy_glVertexAttrib1svNV;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttrib2dNV
+#define GLEE_C_DEFINED_glVertexAttrib2dNV
+  void __stdcall GLee_Lazy_glVertexAttrib2dNV(GLuint  index, GLdouble  x, GLdouble  y)  {if (GLeeInit()) glVertexAttrib2dNV(index, x, y);}
+  GLEEPFNGLVERTEXATTRIB2DNVPROC GLeeFuncPtr_glVertexAttrib2dNV=GLee_Lazy_glVertexAttrib2dNV;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttrib2dvNV
+#define GLEE_C_DEFINED_glVertexAttrib2dvNV
+  void __stdcall GLee_Lazy_glVertexAttrib2dvNV(GLuint  index, const GLdouble * v)  {if (GLeeInit()) glVertexAttrib2dvNV(index, v);}
+  GLEEPFNGLVERTEXATTRIB2DVNVPROC GLeeFuncPtr_glVertexAttrib2dvNV=GLee_Lazy_glVertexAttrib2dvNV;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttrib2fNV
+#define GLEE_C_DEFINED_glVertexAttrib2fNV
+  void __stdcall GLee_Lazy_glVertexAttrib2fNV(GLuint  index, GLfloat  x, GLfloat  y)  {if (GLeeInit()) glVertexAttrib2fNV(index, x, y);}
+  GLEEPFNGLVERTEXATTRIB2FNVPROC GLeeFuncPtr_glVertexAttrib2fNV=GLee_Lazy_glVertexAttrib2fNV;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttrib2fvNV
+#define GLEE_C_DEFINED_glVertexAttrib2fvNV
+  void __stdcall GLee_Lazy_glVertexAttrib2fvNV(GLuint  index, const GLfloat * v)  {if (GLeeInit()) glVertexAttrib2fvNV(index, v);}
+  GLEEPFNGLVERTEXATTRIB2FVNVPROC GLeeFuncPtr_glVertexAttrib2fvNV=GLee_Lazy_glVertexAttrib2fvNV;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttrib2sNV
+#define GLEE_C_DEFINED_glVertexAttrib2sNV
+  void __stdcall GLee_Lazy_glVertexAttrib2sNV(GLuint  index, GLshort  x, GLshort  y)  {if (GLeeInit()) glVertexAttrib2sNV(index, x, y);}
+  GLEEPFNGLVERTEXATTRIB2SNVPROC GLeeFuncPtr_glVertexAttrib2sNV=GLee_Lazy_glVertexAttrib2sNV;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttrib2svNV
+#define GLEE_C_DEFINED_glVertexAttrib2svNV
+  void __stdcall GLee_Lazy_glVertexAttrib2svNV(GLuint  index, const GLshort * v)  {if (GLeeInit()) glVertexAttrib2svNV(index, v);}
+  GLEEPFNGLVERTEXATTRIB2SVNVPROC GLeeFuncPtr_glVertexAttrib2svNV=GLee_Lazy_glVertexAttrib2svNV;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttrib3dNV
+#define GLEE_C_DEFINED_glVertexAttrib3dNV
+  void __stdcall GLee_Lazy_glVertexAttrib3dNV(GLuint  index, GLdouble  x, GLdouble  y, GLdouble  z)  {if (GLeeInit()) glVertexAttrib3dNV(index, x, y, z);}
+  GLEEPFNGLVERTEXATTRIB3DNVPROC GLeeFuncPtr_glVertexAttrib3dNV=GLee_Lazy_glVertexAttrib3dNV;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttrib3dvNV
+#define GLEE_C_DEFINED_glVertexAttrib3dvNV
+  void __stdcall GLee_Lazy_glVertexAttrib3dvNV(GLuint  index, const GLdouble * v)  {if (GLeeInit()) glVertexAttrib3dvNV(index, v);}
+  GLEEPFNGLVERTEXATTRIB3DVNVPROC GLeeFuncPtr_glVertexAttrib3dvNV=GLee_Lazy_glVertexAttrib3dvNV;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttrib3fNV
+#define GLEE_C_DEFINED_glVertexAttrib3fNV
+  void __stdcall GLee_Lazy_glVertexAttrib3fNV(GLuint  index, GLfloat  x, GLfloat  y, GLfloat  z)  {if (GLeeInit()) glVertexAttrib3fNV(index, x, y, z);}
+  GLEEPFNGLVERTEXATTRIB3FNVPROC GLeeFuncPtr_glVertexAttrib3fNV=GLee_Lazy_glVertexAttrib3fNV;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttrib3fvNV
+#define GLEE_C_DEFINED_glVertexAttrib3fvNV
+  void __stdcall GLee_Lazy_glVertexAttrib3fvNV(GLuint  index, const GLfloat * v)  {if (GLeeInit()) glVertexAttrib3fvNV(index, v);}
+  GLEEPFNGLVERTEXATTRIB3FVNVPROC GLeeFuncPtr_glVertexAttrib3fvNV=GLee_Lazy_glVertexAttrib3fvNV;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttrib3sNV
+#define GLEE_C_DEFINED_glVertexAttrib3sNV
+  void __stdcall GLee_Lazy_glVertexAttrib3sNV(GLuint  index, GLshort  x, GLshort  y, GLshort  z)  {if (GLeeInit()) glVertexAttrib3sNV(index, x, y, z);}
+  GLEEPFNGLVERTEXATTRIB3SNVPROC GLeeFuncPtr_glVertexAttrib3sNV=GLee_Lazy_glVertexAttrib3sNV;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttrib3svNV
+#define GLEE_C_DEFINED_glVertexAttrib3svNV
+  void __stdcall GLee_Lazy_glVertexAttrib3svNV(GLuint  index, const GLshort * v)  {if (GLeeInit()) glVertexAttrib3svNV(index, v);}
+  GLEEPFNGLVERTEXATTRIB3SVNVPROC GLeeFuncPtr_glVertexAttrib3svNV=GLee_Lazy_glVertexAttrib3svNV;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttrib4dNV
+#define GLEE_C_DEFINED_glVertexAttrib4dNV
+  void __stdcall GLee_Lazy_glVertexAttrib4dNV(GLuint  index, GLdouble  x, GLdouble  y, GLdouble  z, GLdouble  w)  {if (GLeeInit()) glVertexAttrib4dNV(index, x, y, z, w);}
+  GLEEPFNGLVERTEXATTRIB4DNVPROC GLeeFuncPtr_glVertexAttrib4dNV=GLee_Lazy_glVertexAttrib4dNV;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttrib4dvNV
+#define GLEE_C_DEFINED_glVertexAttrib4dvNV
+  void __stdcall GLee_Lazy_glVertexAttrib4dvNV(GLuint  index, const GLdouble * v)  {if (GLeeInit()) glVertexAttrib4dvNV(index, v);}
+  GLEEPFNGLVERTEXATTRIB4DVNVPROC GLeeFuncPtr_glVertexAttrib4dvNV=GLee_Lazy_glVertexAttrib4dvNV;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttrib4fNV
+#define GLEE_C_DEFINED_glVertexAttrib4fNV
+  void __stdcall GLee_Lazy_glVertexAttrib4fNV(GLuint  index, GLfloat  x, GLfloat  y, GLfloat  z, GLfloat  w)  {if (GLeeInit()) glVertexAttrib4fNV(index, x, y, z, w);}
+  GLEEPFNGLVERTEXATTRIB4FNVPROC GLeeFuncPtr_glVertexAttrib4fNV=GLee_Lazy_glVertexAttrib4fNV;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttrib4fvNV
+#define GLEE_C_DEFINED_glVertexAttrib4fvNV
+  void __stdcall GLee_Lazy_glVertexAttrib4fvNV(GLuint  index, const GLfloat * v)  {if (GLeeInit()) glVertexAttrib4fvNV(index, v);}
+  GLEEPFNGLVERTEXATTRIB4FVNVPROC GLeeFuncPtr_glVertexAttrib4fvNV=GLee_Lazy_glVertexAttrib4fvNV;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttrib4sNV
+#define GLEE_C_DEFINED_glVertexAttrib4sNV
+  void __stdcall GLee_Lazy_glVertexAttrib4sNV(GLuint  index, GLshort  x, GLshort  y, GLshort  z, GLshort  w)  {if (GLeeInit()) glVertexAttrib4sNV(index, x, y, z, w);}
+  GLEEPFNGLVERTEXATTRIB4SNVPROC GLeeFuncPtr_glVertexAttrib4sNV=GLee_Lazy_glVertexAttrib4sNV;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttrib4svNV
+#define GLEE_C_DEFINED_glVertexAttrib4svNV
+  void __stdcall GLee_Lazy_glVertexAttrib4svNV(GLuint  index, const GLshort * v)  {if (GLeeInit()) glVertexAttrib4svNV(index, v);}
+  GLEEPFNGLVERTEXATTRIB4SVNVPROC GLeeFuncPtr_glVertexAttrib4svNV=GLee_Lazy_glVertexAttrib4svNV;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttrib4ubNV
+#define GLEE_C_DEFINED_glVertexAttrib4ubNV
+  void __stdcall GLee_Lazy_glVertexAttrib4ubNV(GLuint  index, GLubyte  x, GLubyte  y, GLubyte  z, GLubyte  w)  {if (GLeeInit()) glVertexAttrib4ubNV(index, x, y, z, w);}
+  GLEEPFNGLVERTEXATTRIB4UBNVPROC GLeeFuncPtr_glVertexAttrib4ubNV=GLee_Lazy_glVertexAttrib4ubNV;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttrib4ubvNV
+#define GLEE_C_DEFINED_glVertexAttrib4ubvNV
+  void __stdcall GLee_Lazy_glVertexAttrib4ubvNV(GLuint  index, const GLubyte * v)  {if (GLeeInit()) glVertexAttrib4ubvNV(index, v);}
+  GLEEPFNGLVERTEXATTRIB4UBVNVPROC GLeeFuncPtr_glVertexAttrib4ubvNV=GLee_Lazy_glVertexAttrib4ubvNV;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttribs1dvNV
+#define GLEE_C_DEFINED_glVertexAttribs1dvNV
+  void __stdcall GLee_Lazy_glVertexAttribs1dvNV(GLuint  index, GLsizei  count, const GLdouble * v)  {if (GLeeInit()) glVertexAttribs1dvNV(index, count, v);}
+  GLEEPFNGLVERTEXATTRIBS1DVNVPROC GLeeFuncPtr_glVertexAttribs1dvNV=GLee_Lazy_glVertexAttribs1dvNV;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttribs1fvNV
+#define GLEE_C_DEFINED_glVertexAttribs1fvNV
+  void __stdcall GLee_Lazy_glVertexAttribs1fvNV(GLuint  index, GLsizei  count, const GLfloat * v)  {if (GLeeInit()) glVertexAttribs1fvNV(index, count, v);}
+  GLEEPFNGLVERTEXATTRIBS1FVNVPROC GLeeFuncPtr_glVertexAttribs1fvNV=GLee_Lazy_glVertexAttribs1fvNV;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttribs1svNV
+#define GLEE_C_DEFINED_glVertexAttribs1svNV
+  void __stdcall GLee_Lazy_glVertexAttribs1svNV(GLuint  index, GLsizei  count, const GLshort * v)  {if (GLeeInit()) glVertexAttribs1svNV(index, count, v);}
+  GLEEPFNGLVERTEXATTRIBS1SVNVPROC GLeeFuncPtr_glVertexAttribs1svNV=GLee_Lazy_glVertexAttribs1svNV;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttribs2dvNV
+#define GLEE_C_DEFINED_glVertexAttribs2dvNV
+  void __stdcall GLee_Lazy_glVertexAttribs2dvNV(GLuint  index, GLsizei  count, const GLdouble * v)  {if (GLeeInit()) glVertexAttribs2dvNV(index, count, v);}
+  GLEEPFNGLVERTEXATTRIBS2DVNVPROC GLeeFuncPtr_glVertexAttribs2dvNV=GLee_Lazy_glVertexAttribs2dvNV;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttribs2fvNV
+#define GLEE_C_DEFINED_glVertexAttribs2fvNV
+  void __stdcall GLee_Lazy_glVertexAttribs2fvNV(GLuint  index, GLsizei  count, const GLfloat * v)  {if (GLeeInit()) glVertexAttribs2fvNV(index, count, v);}
+  GLEEPFNGLVERTEXATTRIBS2FVNVPROC GLeeFuncPtr_glVertexAttribs2fvNV=GLee_Lazy_glVertexAttribs2fvNV;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttribs2svNV
+#define GLEE_C_DEFINED_glVertexAttribs2svNV
+  void __stdcall GLee_Lazy_glVertexAttribs2svNV(GLuint  index, GLsizei  count, const GLshort * v)  {if (GLeeInit()) glVertexAttribs2svNV(index, count, v);}
+  GLEEPFNGLVERTEXATTRIBS2SVNVPROC GLeeFuncPtr_glVertexAttribs2svNV=GLee_Lazy_glVertexAttribs2svNV;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttribs3dvNV
+#define GLEE_C_DEFINED_glVertexAttribs3dvNV
+  void __stdcall GLee_Lazy_glVertexAttribs3dvNV(GLuint  index, GLsizei  count, const GLdouble * v)  {if (GLeeInit()) glVertexAttribs3dvNV(index, count, v);}
+  GLEEPFNGLVERTEXATTRIBS3DVNVPROC GLeeFuncPtr_glVertexAttribs3dvNV=GLee_Lazy_glVertexAttribs3dvNV;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttribs3fvNV
+#define GLEE_C_DEFINED_glVertexAttribs3fvNV
+  void __stdcall GLee_Lazy_glVertexAttribs3fvNV(GLuint  index, GLsizei  count, const GLfloat * v)  {if (GLeeInit()) glVertexAttribs3fvNV(index, count, v);}
+  GLEEPFNGLVERTEXATTRIBS3FVNVPROC GLeeFuncPtr_glVertexAttribs3fvNV=GLee_Lazy_glVertexAttribs3fvNV;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttribs3svNV
+#define GLEE_C_DEFINED_glVertexAttribs3svNV
+  void __stdcall GLee_Lazy_glVertexAttribs3svNV(GLuint  index, GLsizei  count, const GLshort * v)  {if (GLeeInit()) glVertexAttribs3svNV(index, count, v);}
+  GLEEPFNGLVERTEXATTRIBS3SVNVPROC GLeeFuncPtr_glVertexAttribs3svNV=GLee_Lazy_glVertexAttribs3svNV;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttribs4dvNV
+#define GLEE_C_DEFINED_glVertexAttribs4dvNV
+  void __stdcall GLee_Lazy_glVertexAttribs4dvNV(GLuint  index, GLsizei  count, const GLdouble * v)  {if (GLeeInit()) glVertexAttribs4dvNV(index, count, v);}
+  GLEEPFNGLVERTEXATTRIBS4DVNVPROC GLeeFuncPtr_glVertexAttribs4dvNV=GLee_Lazy_glVertexAttribs4dvNV;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttribs4fvNV
+#define GLEE_C_DEFINED_glVertexAttribs4fvNV
+  void __stdcall GLee_Lazy_glVertexAttribs4fvNV(GLuint  index, GLsizei  count, const GLfloat * v)  {if (GLeeInit()) glVertexAttribs4fvNV(index, count, v);}
+  GLEEPFNGLVERTEXATTRIBS4FVNVPROC GLeeFuncPtr_glVertexAttribs4fvNV=GLee_Lazy_glVertexAttribs4fvNV;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttribs4svNV
+#define GLEE_C_DEFINED_glVertexAttribs4svNV
+  void __stdcall GLee_Lazy_glVertexAttribs4svNV(GLuint  index, GLsizei  count, const GLshort * v)  {if (GLeeInit()) glVertexAttribs4svNV(index, count, v);}
+  GLEEPFNGLVERTEXATTRIBS4SVNVPROC GLeeFuncPtr_glVertexAttribs4svNV=GLee_Lazy_glVertexAttribs4svNV;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttribs4ubvNV
+#define GLEE_C_DEFINED_glVertexAttribs4ubvNV
+  void __stdcall GLee_Lazy_glVertexAttribs4ubvNV(GLuint  index, GLsizei  count, const GLubyte * v)  {if (GLeeInit()) glVertexAttribs4ubvNV(index, count, v);}
+  GLEEPFNGLVERTEXATTRIBS4UBVNVPROC GLeeFuncPtr_glVertexAttribs4ubvNV=GLee_Lazy_glVertexAttribs4ubvNV;
+#endif
+#endif 
+
+/* GL_SGIX_texture_coordinate_clamp */
+
+#ifdef __GLEE_GL_SGIX_texture_coordinate_clamp
+#endif 
+
+/* GL_SGIX_scalebias_hint */
+
+#ifdef __GLEE_GL_SGIX_scalebias_hint
+#endif 
+
+/* GL_OML_interlace */
+
+#ifdef __GLEE_GL_OML_interlace
+#endif 
+
+/* GL_OML_subsample */
+
+#ifdef __GLEE_GL_OML_subsample
+#endif 
+
+/* GL_OML_resample */
+
+#ifdef __GLEE_GL_OML_resample
+#endif 
+
+/* GL_NV_copy_depth_to_color */
+
+#ifdef __GLEE_GL_NV_copy_depth_to_color
+#endif 
+
+/* GL_ATI_envmap_bumpmap */
+
+#ifdef __GLEE_GL_ATI_envmap_bumpmap
+#ifndef GLEE_C_DEFINED_glTexBumpParameterivATI
+#define GLEE_C_DEFINED_glTexBumpParameterivATI
+  void __stdcall GLee_Lazy_glTexBumpParameterivATI(GLenum  pname, const GLint * param)  {if (GLeeInit()) glTexBumpParameterivATI(pname, param);}
+  GLEEPFNGLTEXBUMPPARAMETERIVATIPROC GLeeFuncPtr_glTexBumpParameterivATI=GLee_Lazy_glTexBumpParameterivATI;
+#endif
+#ifndef GLEE_C_DEFINED_glTexBumpParameterfvATI
+#define GLEE_C_DEFINED_glTexBumpParameterfvATI
+  void __stdcall GLee_Lazy_glTexBumpParameterfvATI(GLenum  pname, const GLfloat * param)  {if (GLeeInit()) glTexBumpParameterfvATI(pname, param);}
+  GLEEPFNGLTEXBUMPPARAMETERFVATIPROC GLeeFuncPtr_glTexBumpParameterfvATI=GLee_Lazy_glTexBumpParameterfvATI;
+#endif
+#ifndef GLEE_C_DEFINED_glGetTexBumpParameterivATI
+#define GLEE_C_DEFINED_glGetTexBumpParameterivATI
+  void __stdcall GLee_Lazy_glGetTexBumpParameterivATI(GLenum  pname, GLint * param)  {if (GLeeInit()) glGetTexBumpParameterivATI(pname, param);}
+  GLEEPFNGLGETTEXBUMPPARAMETERIVATIPROC GLeeFuncPtr_glGetTexBumpParameterivATI=GLee_Lazy_glGetTexBumpParameterivATI;
+#endif
+#ifndef GLEE_C_DEFINED_glGetTexBumpParameterfvATI
+#define GLEE_C_DEFINED_glGetTexBumpParameterfvATI
+  void __stdcall GLee_Lazy_glGetTexBumpParameterfvATI(GLenum  pname, GLfloat * param)  {if (GLeeInit()) glGetTexBumpParameterfvATI(pname, param);}
+  GLEEPFNGLGETTEXBUMPPARAMETERFVATIPROC GLeeFuncPtr_glGetTexBumpParameterfvATI=GLee_Lazy_glGetTexBumpParameterfvATI;
+#endif
+#endif 
+
+/* GL_ATI_fragment_shader */
+
+#ifdef __GLEE_GL_ATI_fragment_shader
+#ifndef GLEE_C_DEFINED_glGenFragmentShadersATI
+#define GLEE_C_DEFINED_glGenFragmentShadersATI
+  GLuint __stdcall GLee_Lazy_glGenFragmentShadersATI(GLuint  range)  {if (GLeeInit()) return glGenFragmentShadersATI(range); return (GLuint)0;}
+  GLEEPFNGLGENFRAGMENTSHADERSATIPROC GLeeFuncPtr_glGenFragmentShadersATI=GLee_Lazy_glGenFragmentShadersATI;
+#endif
+#ifndef GLEE_C_DEFINED_glBindFragmentShaderATI
+#define GLEE_C_DEFINED_glBindFragmentShaderATI
+  void __stdcall GLee_Lazy_glBindFragmentShaderATI(GLuint  id)  {if (GLeeInit()) glBindFragmentShaderATI(id);}
+  GLEEPFNGLBINDFRAGMENTSHADERATIPROC GLeeFuncPtr_glBindFragmentShaderATI=GLee_Lazy_glBindFragmentShaderATI;
+#endif
+#ifndef GLEE_C_DEFINED_glDeleteFragmentShaderATI
+#define GLEE_C_DEFINED_glDeleteFragmentShaderATI
+  void __stdcall GLee_Lazy_glDeleteFragmentShaderATI(GLuint  id)  {if (GLeeInit()) glDeleteFragmentShaderATI(id);}
+  GLEEPFNGLDELETEFRAGMENTSHADERATIPROC GLeeFuncPtr_glDeleteFragmentShaderATI=GLee_Lazy_glDeleteFragmentShaderATI;
+#endif
+#ifndef GLEE_C_DEFINED_glBeginFragmentShaderATI
+#define GLEE_C_DEFINED_glBeginFragmentShaderATI
+  void __stdcall GLee_Lazy_glBeginFragmentShaderATI(void)  {if (GLeeInit()) glBeginFragmentShaderATI();}
+  GLEEPFNGLBEGINFRAGMENTSHADERATIPROC GLeeFuncPtr_glBeginFragmentShaderATI=GLee_Lazy_glBeginFragmentShaderATI;
+#endif
+#ifndef GLEE_C_DEFINED_glEndFragmentShaderATI
+#define GLEE_C_DEFINED_glEndFragmentShaderATI
+  void __stdcall GLee_Lazy_glEndFragmentShaderATI(void)  {if (GLeeInit()) glEndFragmentShaderATI();}
+  GLEEPFNGLENDFRAGMENTSHADERATIPROC GLeeFuncPtr_glEndFragmentShaderATI=GLee_Lazy_glEndFragmentShaderATI;
+#endif
+#ifndef GLEE_C_DEFINED_glPassTexCoordATI
+#define GLEE_C_DEFINED_glPassTexCoordATI
+  void __stdcall GLee_Lazy_glPassTexCoordATI(GLuint  dst, GLuint  coord, GLenum  swizzle)  {if (GLeeInit()) glPassTexCoordATI(dst, coord, swizzle);}
+  GLEEPFNGLPASSTEXCOORDATIPROC GLeeFuncPtr_glPassTexCoordATI=GLee_Lazy_glPassTexCoordATI;
+#endif
+#ifndef GLEE_C_DEFINED_glSampleMapATI
+#define GLEE_C_DEFINED_glSampleMapATI
+  void __stdcall GLee_Lazy_glSampleMapATI(GLuint  dst, GLuint  interp, GLenum  swizzle)  {if (GLeeInit()) glSampleMapATI(dst, interp, swizzle);}
+  GLEEPFNGLSAMPLEMAPATIPROC GLeeFuncPtr_glSampleMapATI=GLee_Lazy_glSampleMapATI;
+#endif
+#ifndef GLEE_C_DEFINED_glColorFragmentOp1ATI
+#define GLEE_C_DEFINED_glColorFragmentOp1ATI
+  void __stdcall GLee_Lazy_glColorFragmentOp1ATI(GLenum  op, GLuint  dst, GLuint  dstMask, GLuint  dstMod, GLuint  arg1, GLuint  arg1Rep, GLuint  arg1Mod)  {if (GLeeInit()) glColorFragmentOp1ATI(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod);}
+  GLEEPFNGLCOLORFRAGMENTOP1ATIPROC GLeeFuncPtr_glColorFragmentOp1ATI=GLee_Lazy_glColorFragmentOp1ATI;
+#endif
+#ifndef GLEE_C_DEFINED_glColorFragmentOp2ATI
+#define GLEE_C_DEFINED_glColorFragmentOp2ATI
+  void __stdcall GLee_Lazy_glColorFragmentOp2ATI(GLenum  op, GLuint  dst, GLuint  dstMask, GLuint  dstMod, GLuint  arg1, GLuint  arg1Rep, GLuint  arg1Mod, GLuint  arg2, GLuint  arg2Rep, GLuint  arg2Mod)  {if (GLeeInit()) glColorFragmentOp2ATI(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod);}
+  GLEEPFNGLCOLORFRAGMENTOP2ATIPROC GLeeFuncPtr_glColorFragmentOp2ATI=GLee_Lazy_glColorFragmentOp2ATI;
+#endif
+#ifndef GLEE_C_DEFINED_glColorFragmentOp3ATI
+#define GLEE_C_DEFINED_glColorFragmentOp3ATI
+  void __stdcall GLee_Lazy_glColorFragmentOp3ATI(GLenum  op, GLuint  dst, GLuint  dstMask, GLuint  dstMod, GLuint  arg1, GLuint  arg1Rep, GLuint  arg1Mod, GLuint  arg2, GLuint  arg2Rep, GLuint  arg2Mod, GLuint  arg3, GLuint  arg3Rep, GLuint  arg3Mod)  {if (GLeeInit()) glColorFragmentOp3ATI(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod);}
+  GLEEPFNGLCOLORFRAGMENTOP3ATIPROC GLeeFuncPtr_glColorFragmentOp3ATI=GLee_Lazy_glColorFragmentOp3ATI;
+#endif
+#ifndef GLEE_C_DEFINED_glAlphaFragmentOp1ATI
+#define GLEE_C_DEFINED_glAlphaFragmentOp1ATI
+  void __stdcall GLee_Lazy_glAlphaFragmentOp1ATI(GLenum  op, GLuint  dst, GLuint  dstMod, GLuint  arg1, GLuint  arg1Rep, GLuint  arg1Mod)  {if (GLeeInit()) glAlphaFragmentOp1ATI(op, dst, dstMod, arg1, arg1Rep, arg1Mod);}
+  GLEEPFNGLALPHAFRAGMENTOP1ATIPROC GLeeFuncPtr_glAlphaFragmentOp1ATI=GLee_Lazy_glAlphaFragmentOp1ATI;
+#endif
+#ifndef GLEE_C_DEFINED_glAlphaFragmentOp2ATI
+#define GLEE_C_DEFINED_glAlphaFragmentOp2ATI
+  void __stdcall GLee_Lazy_glAlphaFragmentOp2ATI(GLenum  op, GLuint  dst, GLuint  dstMod, GLuint  arg1, GLuint  arg1Rep, GLuint  arg1Mod, GLuint  arg2, GLuint  arg2Rep, GLuint  arg2Mod)  {if (GLeeInit()) glAlphaFragmentOp2ATI(op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod);}
+  GLEEPFNGLALPHAFRAGMENTOP2ATIPROC GLeeFuncPtr_glAlphaFragmentOp2ATI=GLee_Lazy_glAlphaFragmentOp2ATI;
+#endif
+#ifndef GLEE_C_DEFINED_glAlphaFragmentOp3ATI
+#define GLEE_C_DEFINED_glAlphaFragmentOp3ATI
+  void __stdcall GLee_Lazy_glAlphaFragmentOp3ATI(GLenum  op, GLuint  dst, GLuint  dstMod, GLuint  arg1, GLuint  arg1Rep, GLuint  arg1Mod, GLuint  arg2, GLuint  arg2Rep, GLuint  arg2Mod, GLuint  arg3, GLuint  arg3Rep, GLuint  arg3Mod)  {if (GLeeInit()) glAlphaFragmentOp3ATI(op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod);}
+  GLEEPFNGLALPHAFRAGMENTOP3ATIPROC GLeeFuncPtr_glAlphaFragmentOp3ATI=GLee_Lazy_glAlphaFragmentOp3ATI;
+#endif
+#ifndef GLEE_C_DEFINED_glSetFragmentShaderConstantATI
+#define GLEE_C_DEFINED_glSetFragmentShaderConstantATI
+  void __stdcall GLee_Lazy_glSetFragmentShaderConstantATI(GLuint  dst, const GLfloat * value)  {if (GLeeInit()) glSetFragmentShaderConstantATI(dst, value);}
+  GLEEPFNGLSETFRAGMENTSHADERCONSTANTATIPROC GLeeFuncPtr_glSetFragmentShaderConstantATI=GLee_Lazy_glSetFragmentShaderConstantATI;
+#endif
+#endif 
+
+/* GL_ATI_pn_triangles */
+
+#ifdef __GLEE_GL_ATI_pn_triangles
+#ifndef GLEE_C_DEFINED_glPNTrianglesiATI
+#define GLEE_C_DEFINED_glPNTrianglesiATI
+  void __stdcall GLee_Lazy_glPNTrianglesiATI(GLenum  pname, GLint  param)  {if (GLeeInit()) glPNTrianglesiATI(pname, param);}
+  GLEEPFNGLPNTRIANGLESIATIPROC GLeeFuncPtr_glPNTrianglesiATI=GLee_Lazy_glPNTrianglesiATI;
+#endif
+#ifndef GLEE_C_DEFINED_glPNTrianglesfATI
+#define GLEE_C_DEFINED_glPNTrianglesfATI
+  void __stdcall GLee_Lazy_glPNTrianglesfATI(GLenum  pname, GLfloat  param)  {if (GLeeInit()) glPNTrianglesfATI(pname, param);}
+  GLEEPFNGLPNTRIANGLESFATIPROC GLeeFuncPtr_glPNTrianglesfATI=GLee_Lazy_glPNTrianglesfATI;
+#endif
+#endif 
+
+/* GL_ATI_vertex_array_object */
+
+#ifdef __GLEE_GL_ATI_vertex_array_object
+#ifndef GLEE_C_DEFINED_glNewObjectBufferATI
+#define GLEE_C_DEFINED_glNewObjectBufferATI
+  GLuint __stdcall GLee_Lazy_glNewObjectBufferATI(GLsizei  size, const GLvoid * pointer, GLenum  usage)  {if (GLeeInit()) return glNewObjectBufferATI(size, pointer, usage); return (GLuint)0;}
+  GLEEPFNGLNEWOBJECTBUFFERATIPROC GLeeFuncPtr_glNewObjectBufferATI=GLee_Lazy_glNewObjectBufferATI;
+#endif
+#ifndef GLEE_C_DEFINED_glIsObjectBufferATI
+#define GLEE_C_DEFINED_glIsObjectBufferATI
+  GLboolean __stdcall GLee_Lazy_glIsObjectBufferATI(GLuint  buffer)  {if (GLeeInit()) return glIsObjectBufferATI(buffer); return (GLboolean)0;}
+  GLEEPFNGLISOBJECTBUFFERATIPROC GLeeFuncPtr_glIsObjectBufferATI=GLee_Lazy_glIsObjectBufferATI;
+#endif
+#ifndef GLEE_C_DEFINED_glUpdateObjectBufferATI
+#define GLEE_C_DEFINED_glUpdateObjectBufferATI
+  void __stdcall GLee_Lazy_glUpdateObjectBufferATI(GLuint  buffer, GLuint  offset, GLsizei  size, const GLvoid * pointer, GLenum  preserve)  {if (GLeeInit()) glUpdateObjectBufferATI(buffer, offset, size, pointer, preserve);}
+  GLEEPFNGLUPDATEOBJECTBUFFERATIPROC GLeeFuncPtr_glUpdateObjectBufferATI=GLee_Lazy_glUpdateObjectBufferATI;
+#endif
+#ifndef GLEE_C_DEFINED_glGetObjectBufferfvATI
+#define GLEE_C_DEFINED_glGetObjectBufferfvATI
+  void __stdcall GLee_Lazy_glGetObjectBufferfvATI(GLuint  buffer, GLenum  pname, GLfloat * params)  {if (GLeeInit()) glGetObjectBufferfvATI(buffer, pname, params);}
+  GLEEPFNGLGETOBJECTBUFFERFVATIPROC GLeeFuncPtr_glGetObjectBufferfvATI=GLee_Lazy_glGetObjectBufferfvATI;
+#endif
+#ifndef GLEE_C_DEFINED_glGetObjectBufferivATI
+#define GLEE_C_DEFINED_glGetObjectBufferivATI
+  void __stdcall GLee_Lazy_glGetObjectBufferivATI(GLuint  buffer, GLenum  pname, GLint * params)  {if (GLeeInit()) glGetObjectBufferivATI(buffer, pname, params);}
+  GLEEPFNGLGETOBJECTBUFFERIVATIPROC GLeeFuncPtr_glGetObjectBufferivATI=GLee_Lazy_glGetObjectBufferivATI;
+#endif
+#ifndef GLEE_C_DEFINED_glFreeObjectBufferATI
+#define GLEE_C_DEFINED_glFreeObjectBufferATI
+  void __stdcall GLee_Lazy_glFreeObjectBufferATI(GLuint  buffer)  {if (GLeeInit()) glFreeObjectBufferATI(buffer);}
+  GLEEPFNGLFREEOBJECTBUFFERATIPROC GLeeFuncPtr_glFreeObjectBufferATI=GLee_Lazy_glFreeObjectBufferATI;
+#endif
+#ifndef GLEE_C_DEFINED_glArrayObjectATI
+#define GLEE_C_DEFINED_glArrayObjectATI
+  void __stdcall GLee_Lazy_glArrayObjectATI(GLenum  array, GLint  size, GLenum  type, GLsizei  stride, GLuint  buffer, GLuint  offset)  {if (GLeeInit()) glArrayObjectATI(array, size, type, stride, buffer, offset);}
+  GLEEPFNGLARRAYOBJECTATIPROC GLeeFuncPtr_glArrayObjectATI=GLee_Lazy_glArrayObjectATI;
+#endif
+#ifndef GLEE_C_DEFINED_glGetArrayObjectfvATI
+#define GLEE_C_DEFINED_glGetArrayObjectfvATI
+  void __stdcall GLee_Lazy_glGetArrayObjectfvATI(GLenum  array, GLenum  pname, GLfloat * params)  {if (GLeeInit()) glGetArrayObjectfvATI(array, pname, params);}
+  GLEEPFNGLGETARRAYOBJECTFVATIPROC GLeeFuncPtr_glGetArrayObjectfvATI=GLee_Lazy_glGetArrayObjectfvATI;
+#endif
+#ifndef GLEE_C_DEFINED_glGetArrayObjectivATI
+#define GLEE_C_DEFINED_glGetArrayObjectivATI
+  void __stdcall GLee_Lazy_glGetArrayObjectivATI(GLenum  array, GLenum  pname, GLint * params)  {if (GLeeInit()) glGetArrayObjectivATI(array, pname, params);}
+  GLEEPFNGLGETARRAYOBJECTIVATIPROC GLeeFuncPtr_glGetArrayObjectivATI=GLee_Lazy_glGetArrayObjectivATI;
+#endif
+#ifndef GLEE_C_DEFINED_glVariantArrayObjectATI
+#define GLEE_C_DEFINED_glVariantArrayObjectATI
+  void __stdcall GLee_Lazy_glVariantArrayObjectATI(GLuint  id, GLenum  type, GLsizei  stride, GLuint  buffer, GLuint  offset)  {if (GLeeInit()) glVariantArrayObjectATI(id, type, stride, buffer, offset);}
+  GLEEPFNGLVARIANTARRAYOBJECTATIPROC GLeeFuncPtr_glVariantArrayObjectATI=GLee_Lazy_glVariantArrayObjectATI;
+#endif
+#ifndef GLEE_C_DEFINED_glGetVariantArrayObjectfvATI
+#define GLEE_C_DEFINED_glGetVariantArrayObjectfvATI
+  void __stdcall GLee_Lazy_glGetVariantArrayObjectfvATI(GLuint  id, GLenum  pname, GLfloat * params)  {if (GLeeInit()) glGetVariantArrayObjectfvATI(id, pname, params);}
+  GLEEPFNGLGETVARIANTARRAYOBJECTFVATIPROC GLeeFuncPtr_glGetVariantArrayObjectfvATI=GLee_Lazy_glGetVariantArrayObjectfvATI;
+#endif
+#ifndef GLEE_C_DEFINED_glGetVariantArrayObjectivATI
+#define GLEE_C_DEFINED_glGetVariantArrayObjectivATI
+  void __stdcall GLee_Lazy_glGetVariantArrayObjectivATI(GLuint  id, GLenum  pname, GLint * params)  {if (GLeeInit()) glGetVariantArrayObjectivATI(id, pname, params);}
+  GLEEPFNGLGETVARIANTARRAYOBJECTIVATIPROC GLeeFuncPtr_glGetVariantArrayObjectivATI=GLee_Lazy_glGetVariantArrayObjectivATI;
+#endif
+#endif 
+
+/* GL_EXT_vertex_shader */
+
+#ifdef __GLEE_GL_EXT_vertex_shader
+#ifndef GLEE_C_DEFINED_glBeginVertexShaderEXT
+#define GLEE_C_DEFINED_glBeginVertexShaderEXT
+  void __stdcall GLee_Lazy_glBeginVertexShaderEXT(void)  {if (GLeeInit()) glBeginVertexShaderEXT();}
+  GLEEPFNGLBEGINVERTEXSHADEREXTPROC GLeeFuncPtr_glBeginVertexShaderEXT=GLee_Lazy_glBeginVertexShaderEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glEndVertexShaderEXT
+#define GLEE_C_DEFINED_glEndVertexShaderEXT
+  void __stdcall GLee_Lazy_glEndVertexShaderEXT(void)  {if (GLeeInit()) glEndVertexShaderEXT();}
+  GLEEPFNGLENDVERTEXSHADEREXTPROC GLeeFuncPtr_glEndVertexShaderEXT=GLee_Lazy_glEndVertexShaderEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glBindVertexShaderEXT
+#define GLEE_C_DEFINED_glBindVertexShaderEXT
+  void __stdcall GLee_Lazy_glBindVertexShaderEXT(GLuint  id)  {if (GLeeInit()) glBindVertexShaderEXT(id);}
+  GLEEPFNGLBINDVERTEXSHADEREXTPROC GLeeFuncPtr_glBindVertexShaderEXT=GLee_Lazy_glBindVertexShaderEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glGenVertexShadersEXT
+#define GLEE_C_DEFINED_glGenVertexShadersEXT
+  GLuint __stdcall GLee_Lazy_glGenVertexShadersEXT(GLuint  range)  {if (GLeeInit()) return glGenVertexShadersEXT(range); return (GLuint)0;}
+  GLEEPFNGLGENVERTEXSHADERSEXTPROC GLeeFuncPtr_glGenVertexShadersEXT=GLee_Lazy_glGenVertexShadersEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glDeleteVertexShaderEXT
+#define GLEE_C_DEFINED_glDeleteVertexShaderEXT
+  void __stdcall GLee_Lazy_glDeleteVertexShaderEXT(GLuint  id)  {if (GLeeInit()) glDeleteVertexShaderEXT(id);}
+  GLEEPFNGLDELETEVERTEXSHADEREXTPROC GLeeFuncPtr_glDeleteVertexShaderEXT=GLee_Lazy_glDeleteVertexShaderEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glShaderOp1EXT
+#define GLEE_C_DEFINED_glShaderOp1EXT
+  void __stdcall GLee_Lazy_glShaderOp1EXT(GLenum  op, GLuint  res, GLuint  arg1)  {if (GLeeInit()) glShaderOp1EXT(op, res, arg1);}
+  GLEEPFNGLSHADEROP1EXTPROC GLeeFuncPtr_glShaderOp1EXT=GLee_Lazy_glShaderOp1EXT;
+#endif
+#ifndef GLEE_C_DEFINED_glShaderOp2EXT
+#define GLEE_C_DEFINED_glShaderOp2EXT
+  void __stdcall GLee_Lazy_glShaderOp2EXT(GLenum  op, GLuint  res, GLuint  arg1, GLuint  arg2)  {if (GLeeInit()) glShaderOp2EXT(op, res, arg1, arg2);}
+  GLEEPFNGLSHADEROP2EXTPROC GLeeFuncPtr_glShaderOp2EXT=GLee_Lazy_glShaderOp2EXT;
+#endif
+#ifndef GLEE_C_DEFINED_glShaderOp3EXT
+#define GLEE_C_DEFINED_glShaderOp3EXT
+  void __stdcall GLee_Lazy_glShaderOp3EXT(GLenum  op, GLuint  res, GLuint  arg1, GLuint  arg2, GLuint  arg3)  {if (GLeeInit()) glShaderOp3EXT(op, res, arg1, arg2, arg3);}
+  GLEEPFNGLSHADEROP3EXTPROC GLeeFuncPtr_glShaderOp3EXT=GLee_Lazy_glShaderOp3EXT;
+#endif
+#ifndef GLEE_C_DEFINED_glSwizzleEXT
+#define GLEE_C_DEFINED_glSwizzleEXT
+  void __stdcall GLee_Lazy_glSwizzleEXT(GLuint  res, GLuint  in, GLenum  outX, GLenum  outY, GLenum  outZ, GLenum  outW)  {if (GLeeInit()) glSwizzleEXT(res, in, outX, outY, outZ, outW);}
+  GLEEPFNGLSWIZZLEEXTPROC GLeeFuncPtr_glSwizzleEXT=GLee_Lazy_glSwizzleEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glWriteMaskEXT
+#define GLEE_C_DEFINED_glWriteMaskEXT
+  void __stdcall GLee_Lazy_glWriteMaskEXT(GLuint  res, GLuint  in, GLenum  outX, GLenum  outY, GLenum  outZ, GLenum  outW)  {if (GLeeInit()) glWriteMaskEXT(res, in, outX, outY, outZ, outW);}
+  GLEEPFNGLWRITEMASKEXTPROC GLeeFuncPtr_glWriteMaskEXT=GLee_Lazy_glWriteMaskEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glInsertComponentEXT
+#define GLEE_C_DEFINED_glInsertComponentEXT
+  void __stdcall GLee_Lazy_glInsertComponentEXT(GLuint  res, GLuint  src, GLuint  num)  {if (GLeeInit()) glInsertComponentEXT(res, src, num);}
+  GLEEPFNGLINSERTCOMPONENTEXTPROC GLeeFuncPtr_glInsertComponentEXT=GLee_Lazy_glInsertComponentEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glExtractComponentEXT
+#define GLEE_C_DEFINED_glExtractComponentEXT
+  void __stdcall GLee_Lazy_glExtractComponentEXT(GLuint  res, GLuint  src, GLuint  num)  {if (GLeeInit()) glExtractComponentEXT(res, src, num);}
+  GLEEPFNGLEXTRACTCOMPONENTEXTPROC GLeeFuncPtr_glExtractComponentEXT=GLee_Lazy_glExtractComponentEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glGenSymbolsEXT
+#define GLEE_C_DEFINED_glGenSymbolsEXT
+  GLuint __stdcall GLee_Lazy_glGenSymbolsEXT(GLenum  datatype, GLenum  storagetype, GLenum  range, GLuint  components)  {if (GLeeInit()) return glGenSymbolsEXT(datatype, storagetype, range, components); return (GLuint)0;}
+  GLEEPFNGLGENSYMBOLSEXTPROC GLeeFuncPtr_glGenSymbolsEXT=GLee_Lazy_glGenSymbolsEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glSetInvariantEXT
+#define GLEE_C_DEFINED_glSetInvariantEXT
+  void __stdcall GLee_Lazy_glSetInvariantEXT(GLuint  id, GLenum  type, const GLvoid * addr)  {if (GLeeInit()) glSetInvariantEXT(id, type, addr);}
+  GLEEPFNGLSETINVARIANTEXTPROC GLeeFuncPtr_glSetInvariantEXT=GLee_Lazy_glSetInvariantEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glSetLocalConstantEXT
+#define GLEE_C_DEFINED_glSetLocalConstantEXT
+  void __stdcall GLee_Lazy_glSetLocalConstantEXT(GLuint  id, GLenum  type, const GLvoid * addr)  {if (GLeeInit()) glSetLocalConstantEXT(id, type, addr);}
+  GLEEPFNGLSETLOCALCONSTANTEXTPROC GLeeFuncPtr_glSetLocalConstantEXT=GLee_Lazy_glSetLocalConstantEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glVariantbvEXT
+#define GLEE_C_DEFINED_glVariantbvEXT
+  void __stdcall GLee_Lazy_glVariantbvEXT(GLuint  id, const GLbyte * addr)  {if (GLeeInit()) glVariantbvEXT(id, addr);}
+  GLEEPFNGLVARIANTBVEXTPROC GLeeFuncPtr_glVariantbvEXT=GLee_Lazy_glVariantbvEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glVariantsvEXT
+#define GLEE_C_DEFINED_glVariantsvEXT
+  void __stdcall GLee_Lazy_glVariantsvEXT(GLuint  id, const GLshort * addr)  {if (GLeeInit()) glVariantsvEXT(id, addr);}
+  GLEEPFNGLVARIANTSVEXTPROC GLeeFuncPtr_glVariantsvEXT=GLee_Lazy_glVariantsvEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glVariantivEXT
+#define GLEE_C_DEFINED_glVariantivEXT
+  void __stdcall GLee_Lazy_glVariantivEXT(GLuint  id, const GLint * addr)  {if (GLeeInit()) glVariantivEXT(id, addr);}
+  GLEEPFNGLVARIANTIVEXTPROC GLeeFuncPtr_glVariantivEXT=GLee_Lazy_glVariantivEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glVariantfvEXT
+#define GLEE_C_DEFINED_glVariantfvEXT
+  void __stdcall GLee_Lazy_glVariantfvEXT(GLuint  id, const GLfloat * addr)  {if (GLeeInit()) glVariantfvEXT(id, addr);}
+  GLEEPFNGLVARIANTFVEXTPROC GLeeFuncPtr_glVariantfvEXT=GLee_Lazy_glVariantfvEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glVariantdvEXT
+#define GLEE_C_DEFINED_glVariantdvEXT
+  void __stdcall GLee_Lazy_glVariantdvEXT(GLuint  id, const GLdouble * addr)  {if (GLeeInit()) glVariantdvEXT(id, addr);}
+  GLEEPFNGLVARIANTDVEXTPROC GLeeFuncPtr_glVariantdvEXT=GLee_Lazy_glVariantdvEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glVariantubvEXT
+#define GLEE_C_DEFINED_glVariantubvEXT
+  void __stdcall GLee_Lazy_glVariantubvEXT(GLuint  id, const GLubyte * addr)  {if (GLeeInit()) glVariantubvEXT(id, addr);}
+  GLEEPFNGLVARIANTUBVEXTPROC GLeeFuncPtr_glVariantubvEXT=GLee_Lazy_glVariantubvEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glVariantusvEXT
+#define GLEE_C_DEFINED_glVariantusvEXT
+  void __stdcall GLee_Lazy_glVariantusvEXT(GLuint  id, const GLushort * addr)  {if (GLeeInit()) glVariantusvEXT(id, addr);}
+  GLEEPFNGLVARIANTUSVEXTPROC GLeeFuncPtr_glVariantusvEXT=GLee_Lazy_glVariantusvEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glVariantuivEXT
+#define GLEE_C_DEFINED_glVariantuivEXT
+  void __stdcall GLee_Lazy_glVariantuivEXT(GLuint  id, const GLuint * addr)  {if (GLeeInit()) glVariantuivEXT(id, addr);}
+  GLEEPFNGLVARIANTUIVEXTPROC GLeeFuncPtr_glVariantuivEXT=GLee_Lazy_glVariantuivEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glVariantPointerEXT
+#define GLEE_C_DEFINED_glVariantPointerEXT
+  void __stdcall GLee_Lazy_glVariantPointerEXT(GLuint  id, GLenum  type, GLuint  stride, const GLvoid * addr)  {if (GLeeInit()) glVariantPointerEXT(id, type, stride, addr);}
+  GLEEPFNGLVARIANTPOINTEREXTPROC GLeeFuncPtr_glVariantPointerEXT=GLee_Lazy_glVariantPointerEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glEnableVariantClientStateEXT
+#define GLEE_C_DEFINED_glEnableVariantClientStateEXT
+  void __stdcall GLee_Lazy_glEnableVariantClientStateEXT(GLuint  id)  {if (GLeeInit()) glEnableVariantClientStateEXT(id);}
+  GLEEPFNGLENABLEVARIANTCLIENTSTATEEXTPROC GLeeFuncPtr_glEnableVariantClientStateEXT=GLee_Lazy_glEnableVariantClientStateEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glDisableVariantClientStateEXT
+#define GLEE_C_DEFINED_glDisableVariantClientStateEXT
+  void __stdcall GLee_Lazy_glDisableVariantClientStateEXT(GLuint  id)  {if (GLeeInit()) glDisableVariantClientStateEXT(id);}
+  GLEEPFNGLDISABLEVARIANTCLIENTSTATEEXTPROC GLeeFuncPtr_glDisableVariantClientStateEXT=GLee_Lazy_glDisableVariantClientStateEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glBindLightParameterEXT
+#define GLEE_C_DEFINED_glBindLightParameterEXT
+  GLuint __stdcall GLee_Lazy_glBindLightParameterEXT(GLenum  light, GLenum  value)  {if (GLeeInit()) return glBindLightParameterEXT(light, value); return (GLuint)0;}
+  GLEEPFNGLBINDLIGHTPARAMETEREXTPROC GLeeFuncPtr_glBindLightParameterEXT=GLee_Lazy_glBindLightParameterEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glBindMaterialParameterEXT
+#define GLEE_C_DEFINED_glBindMaterialParameterEXT
+  GLuint __stdcall GLee_Lazy_glBindMaterialParameterEXT(GLenum  face, GLenum  value)  {if (GLeeInit()) return glBindMaterialParameterEXT(face, value); return (GLuint)0;}
+  GLEEPFNGLBINDMATERIALPARAMETEREXTPROC GLeeFuncPtr_glBindMaterialParameterEXT=GLee_Lazy_glBindMaterialParameterEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glBindTexGenParameterEXT
+#define GLEE_C_DEFINED_glBindTexGenParameterEXT
+  GLuint __stdcall GLee_Lazy_glBindTexGenParameterEXT(GLenum  unit, GLenum  coord, GLenum  value)  {if (GLeeInit()) return glBindTexGenParameterEXT(unit, coord, value); return (GLuint)0;}
+  GLEEPFNGLBINDTEXGENPARAMETEREXTPROC GLeeFuncPtr_glBindTexGenParameterEXT=GLee_Lazy_glBindTexGenParameterEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glBindTextureUnitParameterEXT
+#define GLEE_C_DEFINED_glBindTextureUnitParameterEXT
+  GLuint __stdcall GLee_Lazy_glBindTextureUnitParameterEXT(GLenum  unit, GLenum  value)  {if (GLeeInit()) return glBindTextureUnitParameterEXT(unit, value); return (GLuint)0;}
+  GLEEPFNGLBINDTEXTUREUNITPARAMETEREXTPROC GLeeFuncPtr_glBindTextureUnitParameterEXT=GLee_Lazy_glBindTextureUnitParameterEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glBindParameterEXT
+#define GLEE_C_DEFINED_glBindParameterEXT
+  GLuint __stdcall GLee_Lazy_glBindParameterEXT(GLenum  value)  {if (GLeeInit()) return glBindParameterEXT(value); return (GLuint)0;}
+  GLEEPFNGLBINDPARAMETEREXTPROC GLeeFuncPtr_glBindParameterEXT=GLee_Lazy_glBindParameterEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glIsVariantEnabledEXT
+#define GLEE_C_DEFINED_glIsVariantEnabledEXT
+  GLboolean __stdcall GLee_Lazy_glIsVariantEnabledEXT(GLuint  id, GLenum  cap)  {if (GLeeInit()) return glIsVariantEnabledEXT(id, cap); return (GLboolean)0;}
+  GLEEPFNGLISVARIANTENABLEDEXTPROC GLeeFuncPtr_glIsVariantEnabledEXT=GLee_Lazy_glIsVariantEnabledEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glGetVariantBooleanvEXT
+#define GLEE_C_DEFINED_glGetVariantBooleanvEXT
+  void __stdcall GLee_Lazy_glGetVariantBooleanvEXT(GLuint  id, GLenum  value, GLboolean * data)  {if (GLeeInit()) glGetVariantBooleanvEXT(id, value, data);}
+  GLEEPFNGLGETVARIANTBOOLEANVEXTPROC GLeeFuncPtr_glGetVariantBooleanvEXT=GLee_Lazy_glGetVariantBooleanvEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glGetVariantIntegervEXT
+#define GLEE_C_DEFINED_glGetVariantIntegervEXT
+  void __stdcall GLee_Lazy_glGetVariantIntegervEXT(GLuint  id, GLenum  value, GLint * data)  {if (GLeeInit()) glGetVariantIntegervEXT(id, value, data);}
+  GLEEPFNGLGETVARIANTINTEGERVEXTPROC GLeeFuncPtr_glGetVariantIntegervEXT=GLee_Lazy_glGetVariantIntegervEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glGetVariantFloatvEXT
+#define GLEE_C_DEFINED_glGetVariantFloatvEXT
+  void __stdcall GLee_Lazy_glGetVariantFloatvEXT(GLuint  id, GLenum  value, GLfloat * data)  {if (GLeeInit()) glGetVariantFloatvEXT(id, value, data);}
+  GLEEPFNGLGETVARIANTFLOATVEXTPROC GLeeFuncPtr_glGetVariantFloatvEXT=GLee_Lazy_glGetVariantFloatvEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glGetVariantPointervEXT
+#define GLEE_C_DEFINED_glGetVariantPointervEXT
+  void __stdcall GLee_Lazy_glGetVariantPointervEXT(GLuint  id, GLenum  value, GLvoid* * data)  {if (GLeeInit()) glGetVariantPointervEXT(id, value, data);}
+  GLEEPFNGLGETVARIANTPOINTERVEXTPROC GLeeFuncPtr_glGetVariantPointervEXT=GLee_Lazy_glGetVariantPointervEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glGetInvariantBooleanvEXT
+#define GLEE_C_DEFINED_glGetInvariantBooleanvEXT
+  void __stdcall GLee_Lazy_glGetInvariantBooleanvEXT(GLuint  id, GLenum  value, GLboolean * data)  {if (GLeeInit()) glGetInvariantBooleanvEXT(id, value, data);}
+  GLEEPFNGLGETINVARIANTBOOLEANVEXTPROC GLeeFuncPtr_glGetInvariantBooleanvEXT=GLee_Lazy_glGetInvariantBooleanvEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glGetInvariantIntegervEXT
+#define GLEE_C_DEFINED_glGetInvariantIntegervEXT
+  void __stdcall GLee_Lazy_glGetInvariantIntegervEXT(GLuint  id, GLenum  value, GLint * data)  {if (GLeeInit()) glGetInvariantIntegervEXT(id, value, data);}
+  GLEEPFNGLGETINVARIANTINTEGERVEXTPROC GLeeFuncPtr_glGetInvariantIntegervEXT=GLee_Lazy_glGetInvariantIntegervEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glGetInvariantFloatvEXT
+#define GLEE_C_DEFINED_glGetInvariantFloatvEXT
+  void __stdcall GLee_Lazy_glGetInvariantFloatvEXT(GLuint  id, GLenum  value, GLfloat * data)  {if (GLeeInit()) glGetInvariantFloatvEXT(id, value, data);}
+  GLEEPFNGLGETINVARIANTFLOATVEXTPROC GLeeFuncPtr_glGetInvariantFloatvEXT=GLee_Lazy_glGetInvariantFloatvEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glGetLocalConstantBooleanvEXT
+#define GLEE_C_DEFINED_glGetLocalConstantBooleanvEXT
+  void __stdcall GLee_Lazy_glGetLocalConstantBooleanvEXT(GLuint  id, GLenum  value, GLboolean * data)  {if (GLeeInit()) glGetLocalConstantBooleanvEXT(id, value, data);}
+  GLEEPFNGLGETLOCALCONSTANTBOOLEANVEXTPROC GLeeFuncPtr_glGetLocalConstantBooleanvEXT=GLee_Lazy_glGetLocalConstantBooleanvEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glGetLocalConstantIntegervEXT
+#define GLEE_C_DEFINED_glGetLocalConstantIntegervEXT
+  void __stdcall GLee_Lazy_glGetLocalConstantIntegervEXT(GLuint  id, GLenum  value, GLint * data)  {if (GLeeInit()) glGetLocalConstantIntegervEXT(id, value, data);}
+  GLEEPFNGLGETLOCALCONSTANTINTEGERVEXTPROC GLeeFuncPtr_glGetLocalConstantIntegervEXT=GLee_Lazy_glGetLocalConstantIntegervEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glGetLocalConstantFloatvEXT
+#define GLEE_C_DEFINED_glGetLocalConstantFloatvEXT
+  void __stdcall GLee_Lazy_glGetLocalConstantFloatvEXT(GLuint  id, GLenum  value, GLfloat * data)  {if (GLeeInit()) glGetLocalConstantFloatvEXT(id, value, data);}
+  GLEEPFNGLGETLOCALCONSTANTFLOATVEXTPROC GLeeFuncPtr_glGetLocalConstantFloatvEXT=GLee_Lazy_glGetLocalConstantFloatvEXT;
+#endif
+#endif 
+
+/* GL_ATI_vertex_streams */
+
+#ifdef __GLEE_GL_ATI_vertex_streams
+#ifndef GLEE_C_DEFINED_glVertexStream1sATI
+#define GLEE_C_DEFINED_glVertexStream1sATI
+  void __stdcall GLee_Lazy_glVertexStream1sATI(GLenum  stream, GLshort  x)  {if (GLeeInit()) glVertexStream1sATI(stream, x);}
+  GLEEPFNGLVERTEXSTREAM1SATIPROC GLeeFuncPtr_glVertexStream1sATI=GLee_Lazy_glVertexStream1sATI;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexStream1svATI
+#define GLEE_C_DEFINED_glVertexStream1svATI
+  void __stdcall GLee_Lazy_glVertexStream1svATI(GLenum  stream, const GLshort * coords)  {if (GLeeInit()) glVertexStream1svATI(stream, coords);}
+  GLEEPFNGLVERTEXSTREAM1SVATIPROC GLeeFuncPtr_glVertexStream1svATI=GLee_Lazy_glVertexStream1svATI;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexStream1iATI
+#define GLEE_C_DEFINED_glVertexStream1iATI
+  void __stdcall GLee_Lazy_glVertexStream1iATI(GLenum  stream, GLint  x)  {if (GLeeInit()) glVertexStream1iATI(stream, x);}
+  GLEEPFNGLVERTEXSTREAM1IATIPROC GLeeFuncPtr_glVertexStream1iATI=GLee_Lazy_glVertexStream1iATI;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexStream1ivATI
+#define GLEE_C_DEFINED_glVertexStream1ivATI
+  void __stdcall GLee_Lazy_glVertexStream1ivATI(GLenum  stream, const GLint * coords)  {if (GLeeInit()) glVertexStream1ivATI(stream, coords);}
+  GLEEPFNGLVERTEXSTREAM1IVATIPROC GLeeFuncPtr_glVertexStream1ivATI=GLee_Lazy_glVertexStream1ivATI;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexStream1fATI
+#define GLEE_C_DEFINED_glVertexStream1fATI
+  void __stdcall GLee_Lazy_glVertexStream1fATI(GLenum  stream, GLfloat  x)  {if (GLeeInit()) glVertexStream1fATI(stream, x);}
+  GLEEPFNGLVERTEXSTREAM1FATIPROC GLeeFuncPtr_glVertexStream1fATI=GLee_Lazy_glVertexStream1fATI;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexStream1fvATI
+#define GLEE_C_DEFINED_glVertexStream1fvATI
+  void __stdcall GLee_Lazy_glVertexStream1fvATI(GLenum  stream, const GLfloat * coords)  {if (GLeeInit()) glVertexStream1fvATI(stream, coords);}
+  GLEEPFNGLVERTEXSTREAM1FVATIPROC GLeeFuncPtr_glVertexStream1fvATI=GLee_Lazy_glVertexStream1fvATI;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexStream1dATI
+#define GLEE_C_DEFINED_glVertexStream1dATI
+  void __stdcall GLee_Lazy_glVertexStream1dATI(GLenum  stream, GLdouble  x)  {if (GLeeInit()) glVertexStream1dATI(stream, x);}
+  GLEEPFNGLVERTEXSTREAM1DATIPROC GLeeFuncPtr_glVertexStream1dATI=GLee_Lazy_glVertexStream1dATI;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexStream1dvATI
+#define GLEE_C_DEFINED_glVertexStream1dvATI
+  void __stdcall GLee_Lazy_glVertexStream1dvATI(GLenum  stream, const GLdouble * coords)  {if (GLeeInit()) glVertexStream1dvATI(stream, coords);}
+  GLEEPFNGLVERTEXSTREAM1DVATIPROC GLeeFuncPtr_glVertexStream1dvATI=GLee_Lazy_glVertexStream1dvATI;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexStream2sATI
+#define GLEE_C_DEFINED_glVertexStream2sATI
+  void __stdcall GLee_Lazy_glVertexStream2sATI(GLenum  stream, GLshort  x, GLshort  y)  {if (GLeeInit()) glVertexStream2sATI(stream, x, y);}
+  GLEEPFNGLVERTEXSTREAM2SATIPROC GLeeFuncPtr_glVertexStream2sATI=GLee_Lazy_glVertexStream2sATI;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexStream2svATI
+#define GLEE_C_DEFINED_glVertexStream2svATI
+  void __stdcall GLee_Lazy_glVertexStream2svATI(GLenum  stream, const GLshort * coords)  {if (GLeeInit()) glVertexStream2svATI(stream, coords);}
+  GLEEPFNGLVERTEXSTREAM2SVATIPROC GLeeFuncPtr_glVertexStream2svATI=GLee_Lazy_glVertexStream2svATI;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexStream2iATI
+#define GLEE_C_DEFINED_glVertexStream2iATI
+  void __stdcall GLee_Lazy_glVertexStream2iATI(GLenum  stream, GLint  x, GLint  y)  {if (GLeeInit()) glVertexStream2iATI(stream, x, y);}
+  GLEEPFNGLVERTEXSTREAM2IATIPROC GLeeFuncPtr_glVertexStream2iATI=GLee_Lazy_glVertexStream2iATI;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexStream2ivATI
+#define GLEE_C_DEFINED_glVertexStream2ivATI
+  void __stdcall GLee_Lazy_glVertexStream2ivATI(GLenum  stream, const GLint * coords)  {if (GLeeInit()) glVertexStream2ivATI(stream, coords);}
+  GLEEPFNGLVERTEXSTREAM2IVATIPROC GLeeFuncPtr_glVertexStream2ivATI=GLee_Lazy_glVertexStream2ivATI;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexStream2fATI
+#define GLEE_C_DEFINED_glVertexStream2fATI
+  void __stdcall GLee_Lazy_glVertexStream2fATI(GLenum  stream, GLfloat  x, GLfloat  y)  {if (GLeeInit()) glVertexStream2fATI(stream, x, y);}
+  GLEEPFNGLVERTEXSTREAM2FATIPROC GLeeFuncPtr_glVertexStream2fATI=GLee_Lazy_glVertexStream2fATI;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexStream2fvATI
+#define GLEE_C_DEFINED_glVertexStream2fvATI
+  void __stdcall GLee_Lazy_glVertexStream2fvATI(GLenum  stream, const GLfloat * coords)  {if (GLeeInit()) glVertexStream2fvATI(stream, coords);}
+  GLEEPFNGLVERTEXSTREAM2FVATIPROC GLeeFuncPtr_glVertexStream2fvATI=GLee_Lazy_glVertexStream2fvATI;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexStream2dATI
+#define GLEE_C_DEFINED_glVertexStream2dATI
+  void __stdcall GLee_Lazy_glVertexStream2dATI(GLenum  stream, GLdouble  x, GLdouble  y)  {if (GLeeInit()) glVertexStream2dATI(stream, x, y);}
+  GLEEPFNGLVERTEXSTREAM2DATIPROC GLeeFuncPtr_glVertexStream2dATI=GLee_Lazy_glVertexStream2dATI;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexStream2dvATI
+#define GLEE_C_DEFINED_glVertexStream2dvATI
+  void __stdcall GLee_Lazy_glVertexStream2dvATI(GLenum  stream, const GLdouble * coords)  {if (GLeeInit()) glVertexStream2dvATI(stream, coords);}
+  GLEEPFNGLVERTEXSTREAM2DVATIPROC GLeeFuncPtr_glVertexStream2dvATI=GLee_Lazy_glVertexStream2dvATI;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexStream3sATI
+#define GLEE_C_DEFINED_glVertexStream3sATI
+  void __stdcall GLee_Lazy_glVertexStream3sATI(GLenum  stream, GLshort  x, GLshort  y, GLshort  z)  {if (GLeeInit()) glVertexStream3sATI(stream, x, y, z);}
+  GLEEPFNGLVERTEXSTREAM3SATIPROC GLeeFuncPtr_glVertexStream3sATI=GLee_Lazy_glVertexStream3sATI;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexStream3svATI
+#define GLEE_C_DEFINED_glVertexStream3svATI
+  void __stdcall GLee_Lazy_glVertexStream3svATI(GLenum  stream, const GLshort * coords)  {if (GLeeInit()) glVertexStream3svATI(stream, coords);}
+  GLEEPFNGLVERTEXSTREAM3SVATIPROC GLeeFuncPtr_glVertexStream3svATI=GLee_Lazy_glVertexStream3svATI;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexStream3iATI
+#define GLEE_C_DEFINED_glVertexStream3iATI
+  void __stdcall GLee_Lazy_glVertexStream3iATI(GLenum  stream, GLint  x, GLint  y, GLint  z)  {if (GLeeInit()) glVertexStream3iATI(stream, x, y, z);}
+  GLEEPFNGLVERTEXSTREAM3IATIPROC GLeeFuncPtr_glVertexStream3iATI=GLee_Lazy_glVertexStream3iATI;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexStream3ivATI
+#define GLEE_C_DEFINED_glVertexStream3ivATI
+  void __stdcall GLee_Lazy_glVertexStream3ivATI(GLenum  stream, const GLint * coords)  {if (GLeeInit()) glVertexStream3ivATI(stream, coords);}
+  GLEEPFNGLVERTEXSTREAM3IVATIPROC GLeeFuncPtr_glVertexStream3ivATI=GLee_Lazy_glVertexStream3ivATI;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexStream3fATI
+#define GLEE_C_DEFINED_glVertexStream3fATI
+  void __stdcall GLee_Lazy_glVertexStream3fATI(GLenum  stream, GLfloat  x, GLfloat  y, GLfloat  z)  {if (GLeeInit()) glVertexStream3fATI(stream, x, y, z);}
+  GLEEPFNGLVERTEXSTREAM3FATIPROC GLeeFuncPtr_glVertexStream3fATI=GLee_Lazy_glVertexStream3fATI;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexStream3fvATI
+#define GLEE_C_DEFINED_glVertexStream3fvATI
+  void __stdcall GLee_Lazy_glVertexStream3fvATI(GLenum  stream, const GLfloat * coords)  {if (GLeeInit()) glVertexStream3fvATI(stream, coords);}
+  GLEEPFNGLVERTEXSTREAM3FVATIPROC GLeeFuncPtr_glVertexStream3fvATI=GLee_Lazy_glVertexStream3fvATI;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexStream3dATI
+#define GLEE_C_DEFINED_glVertexStream3dATI
+  void __stdcall GLee_Lazy_glVertexStream3dATI(GLenum  stream, GLdouble  x, GLdouble  y, GLdouble  z)  {if (GLeeInit()) glVertexStream3dATI(stream, x, y, z);}
+  GLEEPFNGLVERTEXSTREAM3DATIPROC GLeeFuncPtr_glVertexStream3dATI=GLee_Lazy_glVertexStream3dATI;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexStream3dvATI
+#define GLEE_C_DEFINED_glVertexStream3dvATI
+  void __stdcall GLee_Lazy_glVertexStream3dvATI(GLenum  stream, const GLdouble * coords)  {if (GLeeInit()) glVertexStream3dvATI(stream, coords);}
+  GLEEPFNGLVERTEXSTREAM3DVATIPROC GLeeFuncPtr_glVertexStream3dvATI=GLee_Lazy_glVertexStream3dvATI;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexStream4sATI
+#define GLEE_C_DEFINED_glVertexStream4sATI
+  void __stdcall GLee_Lazy_glVertexStream4sATI(GLenum  stream, GLshort  x, GLshort  y, GLshort  z, GLshort  w)  {if (GLeeInit()) glVertexStream4sATI(stream, x, y, z, w);}
+  GLEEPFNGLVERTEXSTREAM4SATIPROC GLeeFuncPtr_glVertexStream4sATI=GLee_Lazy_glVertexStream4sATI;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexStream4svATI
+#define GLEE_C_DEFINED_glVertexStream4svATI
+  void __stdcall GLee_Lazy_glVertexStream4svATI(GLenum  stream, const GLshort * coords)  {if (GLeeInit()) glVertexStream4svATI(stream, coords);}
+  GLEEPFNGLVERTEXSTREAM4SVATIPROC GLeeFuncPtr_glVertexStream4svATI=GLee_Lazy_glVertexStream4svATI;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexStream4iATI
+#define GLEE_C_DEFINED_glVertexStream4iATI
+  void __stdcall GLee_Lazy_glVertexStream4iATI(GLenum  stream, GLint  x, GLint  y, GLint  z, GLint  w)  {if (GLeeInit()) glVertexStream4iATI(stream, x, y, z, w);}
+  GLEEPFNGLVERTEXSTREAM4IATIPROC GLeeFuncPtr_glVertexStream4iATI=GLee_Lazy_glVertexStream4iATI;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexStream4ivATI
+#define GLEE_C_DEFINED_glVertexStream4ivATI
+  void __stdcall GLee_Lazy_glVertexStream4ivATI(GLenum  stream, const GLint * coords)  {if (GLeeInit()) glVertexStream4ivATI(stream, coords);}
+  GLEEPFNGLVERTEXSTREAM4IVATIPROC GLeeFuncPtr_glVertexStream4ivATI=GLee_Lazy_glVertexStream4ivATI;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexStream4fATI
+#define GLEE_C_DEFINED_glVertexStream4fATI
+  void __stdcall GLee_Lazy_glVertexStream4fATI(GLenum  stream, GLfloat  x, GLfloat  y, GLfloat  z, GLfloat  w)  {if (GLeeInit()) glVertexStream4fATI(stream, x, y, z, w);}
+  GLEEPFNGLVERTEXSTREAM4FATIPROC GLeeFuncPtr_glVertexStream4fATI=GLee_Lazy_glVertexStream4fATI;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexStream4fvATI
+#define GLEE_C_DEFINED_glVertexStream4fvATI
+  void __stdcall GLee_Lazy_glVertexStream4fvATI(GLenum  stream, const GLfloat * coords)  {if (GLeeInit()) glVertexStream4fvATI(stream, coords);}
+  GLEEPFNGLVERTEXSTREAM4FVATIPROC GLeeFuncPtr_glVertexStream4fvATI=GLee_Lazy_glVertexStream4fvATI;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexStream4dATI
+#define GLEE_C_DEFINED_glVertexStream4dATI
+  void __stdcall GLee_Lazy_glVertexStream4dATI(GLenum  stream, GLdouble  x, GLdouble  y, GLdouble  z, GLdouble  w)  {if (GLeeInit()) glVertexStream4dATI(stream, x, y, z, w);}
+  GLEEPFNGLVERTEXSTREAM4DATIPROC GLeeFuncPtr_glVertexStream4dATI=GLee_Lazy_glVertexStream4dATI;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexStream4dvATI
+#define GLEE_C_DEFINED_glVertexStream4dvATI
+  void __stdcall GLee_Lazy_glVertexStream4dvATI(GLenum  stream, const GLdouble * coords)  {if (GLeeInit()) glVertexStream4dvATI(stream, coords);}
+  GLEEPFNGLVERTEXSTREAM4DVATIPROC GLeeFuncPtr_glVertexStream4dvATI=GLee_Lazy_glVertexStream4dvATI;
+#endif
+#ifndef GLEE_C_DEFINED_glNormalStream3bATI
+#define GLEE_C_DEFINED_glNormalStream3bATI
+  void __stdcall GLee_Lazy_glNormalStream3bATI(GLenum  stream, GLbyte  nx, GLbyte  ny, GLbyte  nz)  {if (GLeeInit()) glNormalStream3bATI(stream, nx, ny, nz);}
+  GLEEPFNGLNORMALSTREAM3BATIPROC GLeeFuncPtr_glNormalStream3bATI=GLee_Lazy_glNormalStream3bATI;
+#endif
+#ifndef GLEE_C_DEFINED_glNormalStream3bvATI
+#define GLEE_C_DEFINED_glNormalStream3bvATI
+  void __stdcall GLee_Lazy_glNormalStream3bvATI(GLenum  stream, const GLbyte * coords)  {if (GLeeInit()) glNormalStream3bvATI(stream, coords);}
+  GLEEPFNGLNORMALSTREAM3BVATIPROC GLeeFuncPtr_glNormalStream3bvATI=GLee_Lazy_glNormalStream3bvATI;
+#endif
+#ifndef GLEE_C_DEFINED_glNormalStream3sATI
+#define GLEE_C_DEFINED_glNormalStream3sATI
+  void __stdcall GLee_Lazy_glNormalStream3sATI(GLenum  stream, GLshort  nx, GLshort  ny, GLshort  nz)  {if (GLeeInit()) glNormalStream3sATI(stream, nx, ny, nz);}
+  GLEEPFNGLNORMALSTREAM3SATIPROC GLeeFuncPtr_glNormalStream3sATI=GLee_Lazy_glNormalStream3sATI;
+#endif
+#ifndef GLEE_C_DEFINED_glNormalStream3svATI
+#define GLEE_C_DEFINED_glNormalStream3svATI
+  void __stdcall GLee_Lazy_glNormalStream3svATI(GLenum  stream, const GLshort * coords)  {if (GLeeInit()) glNormalStream3svATI(stream, coords);}
+  GLEEPFNGLNORMALSTREAM3SVATIPROC GLeeFuncPtr_glNormalStream3svATI=GLee_Lazy_glNormalStream3svATI;
+#endif
+#ifndef GLEE_C_DEFINED_glNormalStream3iATI
+#define GLEE_C_DEFINED_glNormalStream3iATI
+  void __stdcall GLee_Lazy_glNormalStream3iATI(GLenum  stream, GLint  nx, GLint  ny, GLint  nz)  {if (GLeeInit()) glNormalStream3iATI(stream, nx, ny, nz);}
+  GLEEPFNGLNORMALSTREAM3IATIPROC GLeeFuncPtr_glNormalStream3iATI=GLee_Lazy_glNormalStream3iATI;
+#endif
+#ifndef GLEE_C_DEFINED_glNormalStream3ivATI
+#define GLEE_C_DEFINED_glNormalStream3ivATI
+  void __stdcall GLee_Lazy_glNormalStream3ivATI(GLenum  stream, const GLint * coords)  {if (GLeeInit()) glNormalStream3ivATI(stream, coords);}
+  GLEEPFNGLNORMALSTREAM3IVATIPROC GLeeFuncPtr_glNormalStream3ivATI=GLee_Lazy_glNormalStream3ivATI;
+#endif
+#ifndef GLEE_C_DEFINED_glNormalStream3fATI
+#define GLEE_C_DEFINED_glNormalStream3fATI
+  void __stdcall GLee_Lazy_glNormalStream3fATI(GLenum  stream, GLfloat  nx, GLfloat  ny, GLfloat  nz)  {if (GLeeInit()) glNormalStream3fATI(stream, nx, ny, nz);}
+  GLEEPFNGLNORMALSTREAM3FATIPROC GLeeFuncPtr_glNormalStream3fATI=GLee_Lazy_glNormalStream3fATI;
+#endif
+#ifndef GLEE_C_DEFINED_glNormalStream3fvATI
+#define GLEE_C_DEFINED_glNormalStream3fvATI
+  void __stdcall GLee_Lazy_glNormalStream3fvATI(GLenum  stream, const GLfloat * coords)  {if (GLeeInit()) glNormalStream3fvATI(stream, coords);}
+  GLEEPFNGLNORMALSTREAM3FVATIPROC GLeeFuncPtr_glNormalStream3fvATI=GLee_Lazy_glNormalStream3fvATI;
+#endif
+#ifndef GLEE_C_DEFINED_glNormalStream3dATI
+#define GLEE_C_DEFINED_glNormalStream3dATI
+  void __stdcall GLee_Lazy_glNormalStream3dATI(GLenum  stream, GLdouble  nx, GLdouble  ny, GLdouble  nz)  {if (GLeeInit()) glNormalStream3dATI(stream, nx, ny, nz);}
+  GLEEPFNGLNORMALSTREAM3DATIPROC GLeeFuncPtr_glNormalStream3dATI=GLee_Lazy_glNormalStream3dATI;
+#endif
+#ifndef GLEE_C_DEFINED_glNormalStream3dvATI
+#define GLEE_C_DEFINED_glNormalStream3dvATI
+  void __stdcall GLee_Lazy_glNormalStream3dvATI(GLenum  stream, const GLdouble * coords)  {if (GLeeInit()) glNormalStream3dvATI(stream, coords);}
+  GLEEPFNGLNORMALSTREAM3DVATIPROC GLeeFuncPtr_glNormalStream3dvATI=GLee_Lazy_glNormalStream3dvATI;
+#endif
+#ifndef GLEE_C_DEFINED_glClientActiveVertexStreamATI
+#define GLEE_C_DEFINED_glClientActiveVertexStreamATI
+  void __stdcall GLee_Lazy_glClientActiveVertexStreamATI(GLenum  stream)  {if (GLeeInit()) glClientActiveVertexStreamATI(stream);}
+  GLEEPFNGLCLIENTACTIVEVERTEXSTREAMATIPROC GLeeFuncPtr_glClientActiveVertexStreamATI=GLee_Lazy_glClientActiveVertexStreamATI;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexBlendEnviATI
+#define GLEE_C_DEFINED_glVertexBlendEnviATI
+  void __stdcall GLee_Lazy_glVertexBlendEnviATI(GLenum  pname, GLint  param)  {if (GLeeInit()) glVertexBlendEnviATI(pname, param);}
+  GLEEPFNGLVERTEXBLENDENVIATIPROC GLeeFuncPtr_glVertexBlendEnviATI=GLee_Lazy_glVertexBlendEnviATI;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexBlendEnvfATI
+#define GLEE_C_DEFINED_glVertexBlendEnvfATI
+  void __stdcall GLee_Lazy_glVertexBlendEnvfATI(GLenum  pname, GLfloat  param)  {if (GLeeInit()) glVertexBlendEnvfATI(pname, param);}
+  GLEEPFNGLVERTEXBLENDENVFATIPROC GLeeFuncPtr_glVertexBlendEnvfATI=GLee_Lazy_glVertexBlendEnvfATI;
+#endif
+#endif 
+
+/* GL_ATI_element_array */
+
+#ifdef __GLEE_GL_ATI_element_array
+#ifndef GLEE_C_DEFINED_glElementPointerATI
+#define GLEE_C_DEFINED_glElementPointerATI
+  void __stdcall GLee_Lazy_glElementPointerATI(GLenum  type, const GLvoid * pointer)  {if (GLeeInit()) glElementPointerATI(type, pointer);}
+  GLEEPFNGLELEMENTPOINTERATIPROC GLeeFuncPtr_glElementPointerATI=GLee_Lazy_glElementPointerATI;
+#endif
+#ifndef GLEE_C_DEFINED_glDrawElementArrayATI
+#define GLEE_C_DEFINED_glDrawElementArrayATI
+  void __stdcall GLee_Lazy_glDrawElementArrayATI(GLenum  mode, GLsizei  count)  {if (GLeeInit()) glDrawElementArrayATI(mode, count);}
+  GLEEPFNGLDRAWELEMENTARRAYATIPROC GLeeFuncPtr_glDrawElementArrayATI=GLee_Lazy_glDrawElementArrayATI;
+#endif
+#ifndef GLEE_C_DEFINED_glDrawRangeElementArrayATI
+#define GLEE_C_DEFINED_glDrawRangeElementArrayATI
+  void __stdcall GLee_Lazy_glDrawRangeElementArrayATI(GLenum  mode, GLuint  start, GLuint  end, GLsizei  count)  {if (GLeeInit()) glDrawRangeElementArrayATI(mode, start, end, count);}
+  GLEEPFNGLDRAWRANGEELEMENTARRAYATIPROC GLeeFuncPtr_glDrawRangeElementArrayATI=GLee_Lazy_glDrawRangeElementArrayATI;
+#endif
+#endif 
+
+/* GL_SUN_mesh_array */
+
+#ifdef __GLEE_GL_SUN_mesh_array
+#ifndef GLEE_C_DEFINED_glDrawMeshArraysSUN
+#define GLEE_C_DEFINED_glDrawMeshArraysSUN
+  void __stdcall GLee_Lazy_glDrawMeshArraysSUN(GLenum  mode, GLint  first, GLsizei  count, GLsizei  width)  {if (GLeeInit()) glDrawMeshArraysSUN(mode, first, count, width);}
+  GLEEPFNGLDRAWMESHARRAYSSUNPROC GLeeFuncPtr_glDrawMeshArraysSUN=GLee_Lazy_glDrawMeshArraysSUN;
+#endif
+#endif 
+
+/* GL_SUN_slice_accum */
+
+#ifdef __GLEE_GL_SUN_slice_accum
+#endif 
+
+/* GL_NV_multisample_filter_hint */
+
+#ifdef __GLEE_GL_NV_multisample_filter_hint
+#endif 
+
+/* GL_NV_depth_clamp */
+
+#ifdef __GLEE_GL_NV_depth_clamp
+#endif 
+
+/* GL_NV_occlusion_query */
+
+#ifdef __GLEE_GL_NV_occlusion_query
+#ifndef GLEE_C_DEFINED_glGenOcclusionQueriesNV
+#define GLEE_C_DEFINED_glGenOcclusionQueriesNV
+  void __stdcall GLee_Lazy_glGenOcclusionQueriesNV(GLsizei  n, GLuint * ids)  {if (GLeeInit()) glGenOcclusionQueriesNV(n, ids);}
+  GLEEPFNGLGENOCCLUSIONQUERIESNVPROC GLeeFuncPtr_glGenOcclusionQueriesNV=GLee_Lazy_glGenOcclusionQueriesNV;
+#endif
+#ifndef GLEE_C_DEFINED_glDeleteOcclusionQueriesNV
+#define GLEE_C_DEFINED_glDeleteOcclusionQueriesNV
+  void __stdcall GLee_Lazy_glDeleteOcclusionQueriesNV(GLsizei  n, const GLuint * ids)  {if (GLeeInit()) glDeleteOcclusionQueriesNV(n, ids);}
+  GLEEPFNGLDELETEOCCLUSIONQUERIESNVPROC GLeeFuncPtr_glDeleteOcclusionQueriesNV=GLee_Lazy_glDeleteOcclusionQueriesNV;
+#endif
+#ifndef GLEE_C_DEFINED_glIsOcclusionQueryNV
+#define GLEE_C_DEFINED_glIsOcclusionQueryNV
+  GLboolean __stdcall GLee_Lazy_glIsOcclusionQueryNV(GLuint  id)  {if (GLeeInit()) return glIsOcclusionQueryNV(id); return (GLboolean)0;}
+  GLEEPFNGLISOCCLUSIONQUERYNVPROC GLeeFuncPtr_glIsOcclusionQueryNV=GLee_Lazy_glIsOcclusionQueryNV;
+#endif
+#ifndef GLEE_C_DEFINED_glBeginOcclusionQueryNV
+#define GLEE_C_DEFINED_glBeginOcclusionQueryNV
+  void __stdcall GLee_Lazy_glBeginOcclusionQueryNV(GLuint  id)  {if (GLeeInit()) glBeginOcclusionQueryNV(id);}
+  GLEEPFNGLBEGINOCCLUSIONQUERYNVPROC GLeeFuncPtr_glBeginOcclusionQueryNV=GLee_Lazy_glBeginOcclusionQueryNV;
+#endif
+#ifndef GLEE_C_DEFINED_glEndOcclusionQueryNV
+#define GLEE_C_DEFINED_glEndOcclusionQueryNV
+  void __stdcall GLee_Lazy_glEndOcclusionQueryNV(void)  {if (GLeeInit()) glEndOcclusionQueryNV();}
+  GLEEPFNGLENDOCCLUSIONQUERYNVPROC GLeeFuncPtr_glEndOcclusionQueryNV=GLee_Lazy_glEndOcclusionQueryNV;
+#endif
+#ifndef GLEE_C_DEFINED_glGetOcclusionQueryivNV
+#define GLEE_C_DEFINED_glGetOcclusionQueryivNV
+  void __stdcall GLee_Lazy_glGetOcclusionQueryivNV(GLuint  id, GLenum  pname, GLint * params)  {if (GLeeInit()) glGetOcclusionQueryivNV(id, pname, params);}
+  GLEEPFNGLGETOCCLUSIONQUERYIVNVPROC GLeeFuncPtr_glGetOcclusionQueryivNV=GLee_Lazy_glGetOcclusionQueryivNV;
+#endif
+#ifndef GLEE_C_DEFINED_glGetOcclusionQueryuivNV
+#define GLEE_C_DEFINED_glGetOcclusionQueryuivNV
+  void __stdcall GLee_Lazy_glGetOcclusionQueryuivNV(GLuint  id, GLenum  pname, GLuint * params)  {if (GLeeInit()) glGetOcclusionQueryuivNV(id, pname, params);}
+  GLEEPFNGLGETOCCLUSIONQUERYUIVNVPROC GLeeFuncPtr_glGetOcclusionQueryuivNV=GLee_Lazy_glGetOcclusionQueryuivNV;
+#endif
+#endif 
+
+/* GL_NV_point_sprite */
+
+#ifdef __GLEE_GL_NV_point_sprite
+#ifndef GLEE_C_DEFINED_glPointParameteriNV
+#define GLEE_C_DEFINED_glPointParameteriNV
+  void __stdcall GLee_Lazy_glPointParameteriNV(GLenum  pname, GLint  param)  {if (GLeeInit()) glPointParameteriNV(pname, param);}
+  GLEEPFNGLPOINTPARAMETERINVPROC GLeeFuncPtr_glPointParameteriNV=GLee_Lazy_glPointParameteriNV;
+#endif
+#ifndef GLEE_C_DEFINED_glPointParameterivNV
+#define GLEE_C_DEFINED_glPointParameterivNV
+  void __stdcall GLee_Lazy_glPointParameterivNV(GLenum  pname, const GLint * params)  {if (GLeeInit()) glPointParameterivNV(pname, params);}
+  GLEEPFNGLPOINTPARAMETERIVNVPROC GLeeFuncPtr_glPointParameterivNV=GLee_Lazy_glPointParameterivNV;
+#endif
+#endif 
+
+/* GL_NV_texture_shader3 */
+
+#ifdef __GLEE_GL_NV_texture_shader3
+#endif 
+
+/* GL_NV_vertex_program1_1 */
+
+#ifdef __GLEE_GL_NV_vertex_program1_1
+#endif 
+
+/* GL_EXT_shadow_funcs */
+
+#ifdef __GLEE_GL_EXT_shadow_funcs
+#endif 
+
+/* GL_EXT_stencil_two_side */
+
+#ifdef __GLEE_GL_EXT_stencil_two_side
+#ifndef GLEE_C_DEFINED_glActiveStencilFaceEXT
+#define GLEE_C_DEFINED_glActiveStencilFaceEXT
+  void __stdcall GLee_Lazy_glActiveStencilFaceEXT(GLenum  face)  {if (GLeeInit()) glActiveStencilFaceEXT(face);}
+  GLEEPFNGLACTIVESTENCILFACEEXTPROC GLeeFuncPtr_glActiveStencilFaceEXT=GLee_Lazy_glActiveStencilFaceEXT;
+#endif
+#endif 
+
+/* GL_ATI_text_fragment_shader */
+
+#ifdef __GLEE_GL_ATI_text_fragment_shader
+#endif 
+
+/* GL_APPLE_client_storage */
+
+#ifdef __GLEE_GL_APPLE_client_storage
+#endif 
+
+/* GL_APPLE_element_array */
+
+#ifdef __GLEE_GL_APPLE_element_array
+#ifndef GLEE_C_DEFINED_glElementPointerAPPLE
+#define GLEE_C_DEFINED_glElementPointerAPPLE
+  void __stdcall GLee_Lazy_glElementPointerAPPLE(GLenum  type, const GLvoid * pointer)  {if (GLeeInit()) glElementPointerAPPLE(type, pointer);}
+  GLEEPFNGLELEMENTPOINTERAPPLEPROC GLeeFuncPtr_glElementPointerAPPLE=GLee_Lazy_glElementPointerAPPLE;
+#endif
+#ifndef GLEE_C_DEFINED_glDrawElementArrayAPPLE
+#define GLEE_C_DEFINED_glDrawElementArrayAPPLE
+  void __stdcall GLee_Lazy_glDrawElementArrayAPPLE(GLenum  mode, GLint  first, GLsizei  count)  {if (GLeeInit()) glDrawElementArrayAPPLE(mode, first, count);}
+  GLEEPFNGLDRAWELEMENTARRAYAPPLEPROC GLeeFuncPtr_glDrawElementArrayAPPLE=GLee_Lazy_glDrawElementArrayAPPLE;
+#endif
+#ifndef GLEE_C_DEFINED_glDrawRangeElementArrayAPPLE
+#define GLEE_C_DEFINED_glDrawRangeElementArrayAPPLE
+  void __stdcall GLee_Lazy_glDrawRangeElementArrayAPPLE(GLenum  mode, GLuint  start, GLuint  end, GLint  first, GLsizei  count)  {if (GLeeInit()) glDrawRangeElementArrayAPPLE(mode, start, end, first, count);}
+  GLEEPFNGLDRAWRANGEELEMENTARRAYAPPLEPROC GLeeFuncPtr_glDrawRangeElementArrayAPPLE=GLee_Lazy_glDrawRangeElementArrayAPPLE;
+#endif
+#ifndef GLEE_C_DEFINED_glMultiDrawElementArrayAPPLE
+#define GLEE_C_DEFINED_glMultiDrawElementArrayAPPLE
+  void __stdcall GLee_Lazy_glMultiDrawElementArrayAPPLE(GLenum  mode, const GLint * first, const GLsizei * count, GLsizei  primcount)  {if (GLeeInit()) glMultiDrawElementArrayAPPLE(mode, first, count, primcount);}
+  GLEEPFNGLMULTIDRAWELEMENTARRAYAPPLEPROC GLeeFuncPtr_glMultiDrawElementArrayAPPLE=GLee_Lazy_glMultiDrawElementArrayAPPLE;
+#endif
+#ifndef GLEE_C_DEFINED_glMultiDrawRangeElementArrayAPPLE
+#define GLEE_C_DEFINED_glMultiDrawRangeElementArrayAPPLE
+  void __stdcall GLee_Lazy_glMultiDrawRangeElementArrayAPPLE(GLenum  mode, GLuint  start, GLuint  end, const GLint * first, const GLsizei * count, GLsizei  primcount)  {if (GLeeInit()) glMultiDrawRangeElementArrayAPPLE(mode, start, end, first, count, primcount);}
+  GLEEPFNGLMULTIDRAWRANGEELEMENTARRAYAPPLEPROC GLeeFuncPtr_glMultiDrawRangeElementArrayAPPLE=GLee_Lazy_glMultiDrawRangeElementArrayAPPLE;
+#endif
+#endif 
+
+/* GL_APPLE_fence */
+
+#ifdef __GLEE_GL_APPLE_fence
+#ifndef GLEE_C_DEFINED_glGenFencesAPPLE
+#define GLEE_C_DEFINED_glGenFencesAPPLE
+  void __stdcall GLee_Lazy_glGenFencesAPPLE(GLsizei  n, GLuint * fences)  {if (GLeeInit()) glGenFencesAPPLE(n, fences);}
+  GLEEPFNGLGENFENCESAPPLEPROC GLeeFuncPtr_glGenFencesAPPLE=GLee_Lazy_glGenFencesAPPLE;
+#endif
+#ifndef GLEE_C_DEFINED_glDeleteFencesAPPLE
+#define GLEE_C_DEFINED_glDeleteFencesAPPLE
+  void __stdcall GLee_Lazy_glDeleteFencesAPPLE(GLsizei  n, const GLuint * fences)  {if (GLeeInit()) glDeleteFencesAPPLE(n, fences);}
+  GLEEPFNGLDELETEFENCESAPPLEPROC GLeeFuncPtr_glDeleteFencesAPPLE=GLee_Lazy_glDeleteFencesAPPLE;
+#endif
+#ifndef GLEE_C_DEFINED_glSetFenceAPPLE
+#define GLEE_C_DEFINED_glSetFenceAPPLE
+  void __stdcall GLee_Lazy_glSetFenceAPPLE(GLuint  fence)  {if (GLeeInit()) glSetFenceAPPLE(fence);}
+  GLEEPFNGLSETFENCEAPPLEPROC GLeeFuncPtr_glSetFenceAPPLE=GLee_Lazy_glSetFenceAPPLE;
+#endif
+#ifndef GLEE_C_DEFINED_glIsFenceAPPLE
+#define GLEE_C_DEFINED_glIsFenceAPPLE
+  GLboolean __stdcall GLee_Lazy_glIsFenceAPPLE(GLuint  fence)  {if (GLeeInit()) return glIsFenceAPPLE(fence); return (GLboolean)0;}
+  GLEEPFNGLISFENCEAPPLEPROC GLeeFuncPtr_glIsFenceAPPLE=GLee_Lazy_glIsFenceAPPLE;
+#endif
+#ifndef GLEE_C_DEFINED_glTestFenceAPPLE
+#define GLEE_C_DEFINED_glTestFenceAPPLE
+  GLboolean __stdcall GLee_Lazy_glTestFenceAPPLE(GLuint  fence)  {if (GLeeInit()) return glTestFenceAPPLE(fence); return (GLboolean)0;}
+  GLEEPFNGLTESTFENCEAPPLEPROC GLeeFuncPtr_glTestFenceAPPLE=GLee_Lazy_glTestFenceAPPLE;
+#endif
+#ifndef GLEE_C_DEFINED_glFinishFenceAPPLE
+#define GLEE_C_DEFINED_glFinishFenceAPPLE
+  void __stdcall GLee_Lazy_glFinishFenceAPPLE(GLuint  fence)  {if (GLeeInit()) glFinishFenceAPPLE(fence);}
+  GLEEPFNGLFINISHFENCEAPPLEPROC GLeeFuncPtr_glFinishFenceAPPLE=GLee_Lazy_glFinishFenceAPPLE;
+#endif
+#ifndef GLEE_C_DEFINED_glTestObjectAPPLE
+#define GLEE_C_DEFINED_glTestObjectAPPLE
+  GLboolean __stdcall GLee_Lazy_glTestObjectAPPLE(GLenum  object, GLuint  name)  {if (GLeeInit()) return glTestObjectAPPLE(object, name); return (GLboolean)0;}
+  GLEEPFNGLTESTOBJECTAPPLEPROC GLeeFuncPtr_glTestObjectAPPLE=GLee_Lazy_glTestObjectAPPLE;
+#endif
+#ifndef GLEE_C_DEFINED_glFinishObjectAPPLE
+#define GLEE_C_DEFINED_glFinishObjectAPPLE
+  void __stdcall GLee_Lazy_glFinishObjectAPPLE(GLenum  object, GLint  name)  {if (GLeeInit()) glFinishObjectAPPLE(object, name);}
+  GLEEPFNGLFINISHOBJECTAPPLEPROC GLeeFuncPtr_glFinishObjectAPPLE=GLee_Lazy_glFinishObjectAPPLE;
+#endif
+#endif 
+
+/* GL_APPLE_vertex_array_object */
+
+#ifdef __GLEE_GL_APPLE_vertex_array_object
+#ifndef GLEE_C_DEFINED_glBindVertexArrayAPPLE
+#define GLEE_C_DEFINED_glBindVertexArrayAPPLE
+  void __stdcall GLee_Lazy_glBindVertexArrayAPPLE(GLuint  array)  {if (GLeeInit()) glBindVertexArrayAPPLE(array);}
+  GLEEPFNGLBINDVERTEXARRAYAPPLEPROC GLeeFuncPtr_glBindVertexArrayAPPLE=GLee_Lazy_glBindVertexArrayAPPLE;
+#endif
+#ifndef GLEE_C_DEFINED_glDeleteVertexArraysAPPLE
+#define GLEE_C_DEFINED_glDeleteVertexArraysAPPLE
+  void __stdcall GLee_Lazy_glDeleteVertexArraysAPPLE(GLsizei  n, const GLuint * arrays)  {if (GLeeInit()) glDeleteVertexArraysAPPLE(n, arrays);}
+  GLEEPFNGLDELETEVERTEXARRAYSAPPLEPROC GLeeFuncPtr_glDeleteVertexArraysAPPLE=GLee_Lazy_glDeleteVertexArraysAPPLE;
+#endif
+#ifndef GLEE_C_DEFINED_glGenVertexArraysAPPLE
+#define GLEE_C_DEFINED_glGenVertexArraysAPPLE
+  void __stdcall GLee_Lazy_glGenVertexArraysAPPLE(GLsizei  n, GLuint * arrays)  {if (GLeeInit()) glGenVertexArraysAPPLE(n, arrays);}
+  GLEEPFNGLGENVERTEXARRAYSAPPLEPROC GLeeFuncPtr_glGenVertexArraysAPPLE=GLee_Lazy_glGenVertexArraysAPPLE;
+#endif
+#ifndef GLEE_C_DEFINED_glIsVertexArrayAPPLE
+#define GLEE_C_DEFINED_glIsVertexArrayAPPLE
+  GLboolean __stdcall GLee_Lazy_glIsVertexArrayAPPLE(GLuint  array)  {if (GLeeInit()) return glIsVertexArrayAPPLE(array); return (GLboolean)0;}
+  GLEEPFNGLISVERTEXARRAYAPPLEPROC GLeeFuncPtr_glIsVertexArrayAPPLE=GLee_Lazy_glIsVertexArrayAPPLE;
+#endif
+#endif 
+
+/* GL_APPLE_vertex_array_range */
+
+#ifdef __GLEE_GL_APPLE_vertex_array_range
+#ifndef GLEE_C_DEFINED_glVertexArrayRangeAPPLE
+#define GLEE_C_DEFINED_glVertexArrayRangeAPPLE
+  void __stdcall GLee_Lazy_glVertexArrayRangeAPPLE(GLsizei  length, GLvoid * pointer)  {if (GLeeInit()) glVertexArrayRangeAPPLE(length, pointer);}
+  GLEEPFNGLVERTEXARRAYRANGEAPPLEPROC GLeeFuncPtr_glVertexArrayRangeAPPLE=GLee_Lazy_glVertexArrayRangeAPPLE;
+#endif
+#ifndef GLEE_C_DEFINED_glFlushVertexArrayRangeAPPLE
+#define GLEE_C_DEFINED_glFlushVertexArrayRangeAPPLE
+  void __stdcall GLee_Lazy_glFlushVertexArrayRangeAPPLE(GLsizei  length, GLvoid * pointer)  {if (GLeeInit()) glFlushVertexArrayRangeAPPLE(length, pointer);}
+  GLEEPFNGLFLUSHVERTEXARRAYRANGEAPPLEPROC GLeeFuncPtr_glFlushVertexArrayRangeAPPLE=GLee_Lazy_glFlushVertexArrayRangeAPPLE;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexArrayParameteriAPPLE
+#define GLEE_C_DEFINED_glVertexArrayParameteriAPPLE
+  void __stdcall GLee_Lazy_glVertexArrayParameteriAPPLE(GLenum  pname, GLint  param)  {if (GLeeInit()) glVertexArrayParameteriAPPLE(pname, param);}
+  GLEEPFNGLVERTEXARRAYPARAMETERIAPPLEPROC GLeeFuncPtr_glVertexArrayParameteriAPPLE=GLee_Lazy_glVertexArrayParameteriAPPLE;
+#endif
+#endif 
+
+/* GL_APPLE_ycbcr_422 */
+
+#ifdef __GLEE_GL_APPLE_ycbcr_422
+#endif 
+
+/* GL_S3_s3tc */
+
+#ifdef __GLEE_GL_S3_s3tc
+#endif 
+
+/* GL_ATI_draw_buffers */
+
+#ifdef __GLEE_GL_ATI_draw_buffers
+#ifndef GLEE_C_DEFINED_glDrawBuffersATI
+#define GLEE_C_DEFINED_glDrawBuffersATI
+  void __stdcall GLee_Lazy_glDrawBuffersATI(GLsizei  n, const GLenum * bufs)  {if (GLeeInit()) glDrawBuffersATI(n, bufs);}
+  GLEEPFNGLDRAWBUFFERSATIPROC GLeeFuncPtr_glDrawBuffersATI=GLee_Lazy_glDrawBuffersATI;
+#endif
+#endif 
+
+/* GL_ATI_pixel_format_float */
+
+#ifdef __GLEE_GL_ATI_pixel_format_float
+#endif 
+
+/* GL_ATI_texture_env_combine3 */
+
+#ifdef __GLEE_GL_ATI_texture_env_combine3
+#endif 
+
+/* GL_ATI_texture_float */
+
+#ifdef __GLEE_GL_ATI_texture_float
+#endif 
+
+/* GL_NV_float_buffer */
+
+#ifdef __GLEE_GL_NV_float_buffer
+#endif 
+
+/* GL_NV_fragment_program */
+
+#ifdef __GLEE_GL_NV_fragment_program
+#ifndef GLEE_C_DEFINED_glProgramNamedParameter4fNV
+#define GLEE_C_DEFINED_glProgramNamedParameter4fNV
+  void __stdcall GLee_Lazy_glProgramNamedParameter4fNV(GLuint  id, GLsizei  len, const GLubyte * name, GLfloat  x, GLfloat  y, GLfloat  z, GLfloat  w)  {if (GLeeInit()) glProgramNamedParameter4fNV(id, len, name, x, y, z, w);}
+  GLEEPFNGLPROGRAMNAMEDPARAMETER4FNVPROC GLeeFuncPtr_glProgramNamedParameter4fNV=GLee_Lazy_glProgramNamedParameter4fNV;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramNamedParameter4dNV
+#define GLEE_C_DEFINED_glProgramNamedParameter4dNV
+  void __stdcall GLee_Lazy_glProgramNamedParameter4dNV(GLuint  id, GLsizei  len, const GLubyte * name, GLdouble  x, GLdouble  y, GLdouble  z, GLdouble  w)  {if (GLeeInit()) glProgramNamedParameter4dNV(id, len, name, x, y, z, w);}
+  GLEEPFNGLPROGRAMNAMEDPARAMETER4DNVPROC GLeeFuncPtr_glProgramNamedParameter4dNV=GLee_Lazy_glProgramNamedParameter4dNV;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramNamedParameter4fvNV
+#define GLEE_C_DEFINED_glProgramNamedParameter4fvNV
+  void __stdcall GLee_Lazy_glProgramNamedParameter4fvNV(GLuint  id, GLsizei  len, const GLubyte * name, const GLfloat * v)  {if (GLeeInit()) glProgramNamedParameter4fvNV(id, len, name, v);}
+  GLEEPFNGLPROGRAMNAMEDPARAMETER4FVNVPROC GLeeFuncPtr_glProgramNamedParameter4fvNV=GLee_Lazy_glProgramNamedParameter4fvNV;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramNamedParameter4dvNV
+#define GLEE_C_DEFINED_glProgramNamedParameter4dvNV
+  void __stdcall GLee_Lazy_glProgramNamedParameter4dvNV(GLuint  id, GLsizei  len, const GLubyte * name, const GLdouble * v)  {if (GLeeInit()) glProgramNamedParameter4dvNV(id, len, name, v);}
+  GLEEPFNGLPROGRAMNAMEDPARAMETER4DVNVPROC GLeeFuncPtr_glProgramNamedParameter4dvNV=GLee_Lazy_glProgramNamedParameter4dvNV;
+#endif
+#ifndef GLEE_C_DEFINED_glGetProgramNamedParameterfvNV
+#define GLEE_C_DEFINED_glGetProgramNamedParameterfvNV
+  void __stdcall GLee_Lazy_glGetProgramNamedParameterfvNV(GLuint  id, GLsizei  len, const GLubyte * name, GLfloat * params)  {if (GLeeInit()) glGetProgramNamedParameterfvNV(id, len, name, params);}
+  GLEEPFNGLGETPROGRAMNAMEDPARAMETERFVNVPROC GLeeFuncPtr_glGetProgramNamedParameterfvNV=GLee_Lazy_glGetProgramNamedParameterfvNV;
+#endif
+#ifndef GLEE_C_DEFINED_glGetProgramNamedParameterdvNV
+#define GLEE_C_DEFINED_glGetProgramNamedParameterdvNV
+  void __stdcall GLee_Lazy_glGetProgramNamedParameterdvNV(GLuint  id, GLsizei  len, const GLubyte * name, GLdouble * params)  {if (GLeeInit()) glGetProgramNamedParameterdvNV(id, len, name, params);}
+  GLEEPFNGLGETPROGRAMNAMEDPARAMETERDVNVPROC GLeeFuncPtr_glGetProgramNamedParameterdvNV=GLee_Lazy_glGetProgramNamedParameterdvNV;
+#endif
+#endif 
+
+/* GL_NV_half_float */
+
+#ifdef __GLEE_GL_NV_half_float
+#ifndef GLEE_C_DEFINED_glVertex2hNV
+#define GLEE_C_DEFINED_glVertex2hNV
+  void __stdcall GLee_Lazy_glVertex2hNV(GLhalfNV  x, GLhalfNV  y)  {if (GLeeInit()) glVertex2hNV(x, y);}
+  GLEEPFNGLVERTEX2HNVPROC GLeeFuncPtr_glVertex2hNV=GLee_Lazy_glVertex2hNV;
+#endif
+#ifndef GLEE_C_DEFINED_glVertex2hvNV
+#define GLEE_C_DEFINED_glVertex2hvNV
+  void __stdcall GLee_Lazy_glVertex2hvNV(const GLhalfNV * v)  {if (GLeeInit()) glVertex2hvNV(v);}
+  GLEEPFNGLVERTEX2HVNVPROC GLeeFuncPtr_glVertex2hvNV=GLee_Lazy_glVertex2hvNV;
+#endif
+#ifndef GLEE_C_DEFINED_glVertex3hNV
+#define GLEE_C_DEFINED_glVertex3hNV
+  void __stdcall GLee_Lazy_glVertex3hNV(GLhalfNV  x, GLhalfNV  y, GLhalfNV  z)  {if (GLeeInit()) glVertex3hNV(x, y, z);}
+  GLEEPFNGLVERTEX3HNVPROC GLeeFuncPtr_glVertex3hNV=GLee_Lazy_glVertex3hNV;
+#endif
+#ifndef GLEE_C_DEFINED_glVertex3hvNV
+#define GLEE_C_DEFINED_glVertex3hvNV
+  void __stdcall GLee_Lazy_glVertex3hvNV(const GLhalfNV * v)  {if (GLeeInit()) glVertex3hvNV(v);}
+  GLEEPFNGLVERTEX3HVNVPROC GLeeFuncPtr_glVertex3hvNV=GLee_Lazy_glVertex3hvNV;
+#endif
+#ifndef GLEE_C_DEFINED_glVertex4hNV
+#define GLEE_C_DEFINED_glVertex4hNV
+  void __stdcall GLee_Lazy_glVertex4hNV(GLhalfNV  x, GLhalfNV  y, GLhalfNV  z, GLhalfNV  w)  {if (GLeeInit()) glVertex4hNV(x, y, z, w);}
+  GLEEPFNGLVERTEX4HNVPROC GLeeFuncPtr_glVertex4hNV=GLee_Lazy_glVertex4hNV;
+#endif
+#ifndef GLEE_C_DEFINED_glVertex4hvNV
+#define GLEE_C_DEFINED_glVertex4hvNV
+  void __stdcall GLee_Lazy_glVertex4hvNV(const GLhalfNV * v)  {if (GLeeInit()) glVertex4hvNV(v);}
+  GLEEPFNGLVERTEX4HVNVPROC GLeeFuncPtr_glVertex4hvNV=GLee_Lazy_glVertex4hvNV;
+#endif
+#ifndef GLEE_C_DEFINED_glNormal3hNV
+#define GLEE_C_DEFINED_glNormal3hNV
+  void __stdcall GLee_Lazy_glNormal3hNV(GLhalfNV  nx, GLhalfNV  ny, GLhalfNV  nz)  {if (GLeeInit()) glNormal3hNV(nx, ny, nz);}
+  GLEEPFNGLNORMAL3HNVPROC GLeeFuncPtr_glNormal3hNV=GLee_Lazy_glNormal3hNV;
+#endif
+#ifndef GLEE_C_DEFINED_glNormal3hvNV
+#define GLEE_C_DEFINED_glNormal3hvNV
+  void __stdcall GLee_Lazy_glNormal3hvNV(const GLhalfNV * v)  {if (GLeeInit()) glNormal3hvNV(v);}
+  GLEEPFNGLNORMAL3HVNVPROC GLeeFuncPtr_glNormal3hvNV=GLee_Lazy_glNormal3hvNV;
+#endif
+#ifndef GLEE_C_DEFINED_glColor3hNV
+#define GLEE_C_DEFINED_glColor3hNV
+  void __stdcall GLee_Lazy_glColor3hNV(GLhalfNV  red, GLhalfNV  green, GLhalfNV  blue)  {if (GLeeInit()) glColor3hNV(red, green, blue);}
+  GLEEPFNGLCOLOR3HNVPROC GLeeFuncPtr_glColor3hNV=GLee_Lazy_glColor3hNV;
+#endif
+#ifndef GLEE_C_DEFINED_glColor3hvNV
+#define GLEE_C_DEFINED_glColor3hvNV
+  void __stdcall GLee_Lazy_glColor3hvNV(const GLhalfNV * v)  {if (GLeeInit()) glColor3hvNV(v);}
+  GLEEPFNGLCOLOR3HVNVPROC GLeeFuncPtr_glColor3hvNV=GLee_Lazy_glColor3hvNV;
+#endif
+#ifndef GLEE_C_DEFINED_glColor4hNV
+#define GLEE_C_DEFINED_glColor4hNV
+  void __stdcall GLee_Lazy_glColor4hNV(GLhalfNV  red, GLhalfNV  green, GLhalfNV  blue, GLhalfNV  alpha)  {if (GLeeInit()) glColor4hNV(red, green, blue, alpha);}
+  GLEEPFNGLCOLOR4HNVPROC GLeeFuncPtr_glColor4hNV=GLee_Lazy_glColor4hNV;
+#endif
+#ifndef GLEE_C_DEFINED_glColor4hvNV
+#define GLEE_C_DEFINED_glColor4hvNV
+  void __stdcall GLee_Lazy_glColor4hvNV(const GLhalfNV * v)  {if (GLeeInit()) glColor4hvNV(v);}
+  GLEEPFNGLCOLOR4HVNVPROC GLeeFuncPtr_glColor4hvNV=GLee_Lazy_glColor4hvNV;
+#endif
+#ifndef GLEE_C_DEFINED_glTexCoord1hNV
+#define GLEE_C_DEFINED_glTexCoord1hNV
+  void __stdcall GLee_Lazy_glTexCoord1hNV(GLhalfNV  s)  {if (GLeeInit()) glTexCoord1hNV(s);}
+  GLEEPFNGLTEXCOORD1HNVPROC GLeeFuncPtr_glTexCoord1hNV=GLee_Lazy_glTexCoord1hNV;
+#endif
+#ifndef GLEE_C_DEFINED_glTexCoord1hvNV
+#define GLEE_C_DEFINED_glTexCoord1hvNV
+  void __stdcall GLee_Lazy_glTexCoord1hvNV(const GLhalfNV * v)  {if (GLeeInit()) glTexCoord1hvNV(v);}
+  GLEEPFNGLTEXCOORD1HVNVPROC GLeeFuncPtr_glTexCoord1hvNV=GLee_Lazy_glTexCoord1hvNV;
+#endif
+#ifndef GLEE_C_DEFINED_glTexCoord2hNV
+#define GLEE_C_DEFINED_glTexCoord2hNV
+  void __stdcall GLee_Lazy_glTexCoord2hNV(GLhalfNV  s, GLhalfNV  t)  {if (GLeeInit()) glTexCoord2hNV(s, t);}
+  GLEEPFNGLTEXCOORD2HNVPROC GLeeFuncPtr_glTexCoord2hNV=GLee_Lazy_glTexCoord2hNV;
+#endif
+#ifndef GLEE_C_DEFINED_glTexCoord2hvNV
+#define GLEE_C_DEFINED_glTexCoord2hvNV
+  void __stdcall GLee_Lazy_glTexCoord2hvNV(const GLhalfNV * v)  {if (GLeeInit()) glTexCoord2hvNV(v);}
+  GLEEPFNGLTEXCOORD2HVNVPROC GLeeFuncPtr_glTexCoord2hvNV=GLee_Lazy_glTexCoord2hvNV;
+#endif
+#ifndef GLEE_C_DEFINED_glTexCoord3hNV
+#define GLEE_C_DEFINED_glTexCoord3hNV
+  void __stdcall GLee_Lazy_glTexCoord3hNV(GLhalfNV  s, GLhalfNV  t, GLhalfNV  r)  {if (GLeeInit()) glTexCoord3hNV(s, t, r);}
+  GLEEPFNGLTEXCOORD3HNVPROC GLeeFuncPtr_glTexCoord3hNV=GLee_Lazy_glTexCoord3hNV;
+#endif
+#ifndef GLEE_C_DEFINED_glTexCoord3hvNV
+#define GLEE_C_DEFINED_glTexCoord3hvNV
+  void __stdcall GLee_Lazy_glTexCoord3hvNV(const GLhalfNV * v)  {if (GLeeInit()) glTexCoord3hvNV(v);}
+  GLEEPFNGLTEXCOORD3HVNVPROC GLeeFuncPtr_glTexCoord3hvNV=GLee_Lazy_glTexCoord3hvNV;
+#endif
+#ifndef GLEE_C_DEFINED_glTexCoord4hNV
+#define GLEE_C_DEFINED_glTexCoord4hNV
+  void __stdcall GLee_Lazy_glTexCoord4hNV(GLhalfNV  s, GLhalfNV  t, GLhalfNV  r, GLhalfNV  q)  {if (GLeeInit()) glTexCoord4hNV(s, t, r, q);}
+  GLEEPFNGLTEXCOORD4HNVPROC GLeeFuncPtr_glTexCoord4hNV=GLee_Lazy_glTexCoord4hNV;
+#endif
+#ifndef GLEE_C_DEFINED_glTexCoord4hvNV
+#define GLEE_C_DEFINED_glTexCoord4hvNV
+  void __stdcall GLee_Lazy_glTexCoord4hvNV(const GLhalfNV * v)  {if (GLeeInit()) glTexCoord4hvNV(v);}
+  GLEEPFNGLTEXCOORD4HVNVPROC GLeeFuncPtr_glTexCoord4hvNV=GLee_Lazy_glTexCoord4hvNV;
+#endif
+#ifndef GLEE_C_DEFINED_glMultiTexCoord1hNV
+#define GLEE_C_DEFINED_glMultiTexCoord1hNV
+  void __stdcall GLee_Lazy_glMultiTexCoord1hNV(GLenum  target, GLhalfNV  s)  {if (GLeeInit()) glMultiTexCoord1hNV(target, s);}
+  GLEEPFNGLMULTITEXCOORD1HNVPROC GLeeFuncPtr_glMultiTexCoord1hNV=GLee_Lazy_glMultiTexCoord1hNV;
+#endif
+#ifndef GLEE_C_DEFINED_glMultiTexCoord1hvNV
+#define GLEE_C_DEFINED_glMultiTexCoord1hvNV
+  void __stdcall GLee_Lazy_glMultiTexCoord1hvNV(GLenum  target, const GLhalfNV * v)  {if (GLeeInit()) glMultiTexCoord1hvNV(target, v);}
+  GLEEPFNGLMULTITEXCOORD1HVNVPROC GLeeFuncPtr_glMultiTexCoord1hvNV=GLee_Lazy_glMultiTexCoord1hvNV;
+#endif
+#ifndef GLEE_C_DEFINED_glMultiTexCoord2hNV
+#define GLEE_C_DEFINED_glMultiTexCoord2hNV
+  void __stdcall GLee_Lazy_glMultiTexCoord2hNV(GLenum  target, GLhalfNV  s, GLhalfNV  t)  {if (GLeeInit()) glMultiTexCoord2hNV(target, s, t);}
+  GLEEPFNGLMULTITEXCOORD2HNVPROC GLeeFuncPtr_glMultiTexCoord2hNV=GLee_Lazy_glMultiTexCoord2hNV;
+#endif
+#ifndef GLEE_C_DEFINED_glMultiTexCoord2hvNV
+#define GLEE_C_DEFINED_glMultiTexCoord2hvNV
+  void __stdcall GLee_Lazy_glMultiTexCoord2hvNV(GLenum  target, const GLhalfNV * v)  {if (GLeeInit()) glMultiTexCoord2hvNV(target, v);}
+  GLEEPFNGLMULTITEXCOORD2HVNVPROC GLeeFuncPtr_glMultiTexCoord2hvNV=GLee_Lazy_glMultiTexCoord2hvNV;
+#endif
+#ifndef GLEE_C_DEFINED_glMultiTexCoord3hNV
+#define GLEE_C_DEFINED_glMultiTexCoord3hNV
+  void __stdcall GLee_Lazy_glMultiTexCoord3hNV(GLenum  target, GLhalfNV  s, GLhalfNV  t, GLhalfNV  r)  {if (GLeeInit()) glMultiTexCoord3hNV(target, s, t, r);}
+  GLEEPFNGLMULTITEXCOORD3HNVPROC GLeeFuncPtr_glMultiTexCoord3hNV=GLee_Lazy_glMultiTexCoord3hNV;
+#endif
+#ifndef GLEE_C_DEFINED_glMultiTexCoord3hvNV
+#define GLEE_C_DEFINED_glMultiTexCoord3hvNV
+  void __stdcall GLee_Lazy_glMultiTexCoord3hvNV(GLenum  target, const GLhalfNV * v)  {if (GLeeInit()) glMultiTexCoord3hvNV(target, v);}
+  GLEEPFNGLMULTITEXCOORD3HVNVPROC GLeeFuncPtr_glMultiTexCoord3hvNV=GLee_Lazy_glMultiTexCoord3hvNV;
+#endif
+#ifndef GLEE_C_DEFINED_glMultiTexCoord4hNV
+#define GLEE_C_DEFINED_glMultiTexCoord4hNV
+  void __stdcall GLee_Lazy_glMultiTexCoord4hNV(GLenum  target, GLhalfNV  s, GLhalfNV  t, GLhalfNV  r, GLhalfNV  q)  {if (GLeeInit()) glMultiTexCoord4hNV(target, s, t, r, q);}
+  GLEEPFNGLMULTITEXCOORD4HNVPROC GLeeFuncPtr_glMultiTexCoord4hNV=GLee_Lazy_glMultiTexCoord4hNV;
+#endif
+#ifndef GLEE_C_DEFINED_glMultiTexCoord4hvNV
+#define GLEE_C_DEFINED_glMultiTexCoord4hvNV
+  void __stdcall GLee_Lazy_glMultiTexCoord4hvNV(GLenum  target, const GLhalfNV * v)  {if (GLeeInit()) glMultiTexCoord4hvNV(target, v);}
+  GLEEPFNGLMULTITEXCOORD4HVNVPROC GLeeFuncPtr_glMultiTexCoord4hvNV=GLee_Lazy_glMultiTexCoord4hvNV;
+#endif
+#ifndef GLEE_C_DEFINED_glFogCoordhNV
+#define GLEE_C_DEFINED_glFogCoordhNV
+  void __stdcall GLee_Lazy_glFogCoordhNV(GLhalfNV  fog)  {if (GLeeInit()) glFogCoordhNV(fog);}
+  GLEEPFNGLFOGCOORDHNVPROC GLeeFuncPtr_glFogCoordhNV=GLee_Lazy_glFogCoordhNV;
+#endif
+#ifndef GLEE_C_DEFINED_glFogCoordhvNV
+#define GLEE_C_DEFINED_glFogCoordhvNV
+  void __stdcall GLee_Lazy_glFogCoordhvNV(const GLhalfNV * fog)  {if (GLeeInit()) glFogCoordhvNV(fog);}
+  GLEEPFNGLFOGCOORDHVNVPROC GLeeFuncPtr_glFogCoordhvNV=GLee_Lazy_glFogCoordhvNV;
+#endif
+#ifndef GLEE_C_DEFINED_glSecondaryColor3hNV
+#define GLEE_C_DEFINED_glSecondaryColor3hNV
+  void __stdcall GLee_Lazy_glSecondaryColor3hNV(GLhalfNV  red, GLhalfNV  green, GLhalfNV  blue)  {if (GLeeInit()) glSecondaryColor3hNV(red, green, blue);}
+  GLEEPFNGLSECONDARYCOLOR3HNVPROC GLeeFuncPtr_glSecondaryColor3hNV=GLee_Lazy_glSecondaryColor3hNV;
+#endif
+#ifndef GLEE_C_DEFINED_glSecondaryColor3hvNV
+#define GLEE_C_DEFINED_glSecondaryColor3hvNV
+  void __stdcall GLee_Lazy_glSecondaryColor3hvNV(const GLhalfNV * v)  {if (GLeeInit()) glSecondaryColor3hvNV(v);}
+  GLEEPFNGLSECONDARYCOLOR3HVNVPROC GLeeFuncPtr_glSecondaryColor3hvNV=GLee_Lazy_glSecondaryColor3hvNV;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexWeighthNV
+#define GLEE_C_DEFINED_glVertexWeighthNV
+  void __stdcall GLee_Lazy_glVertexWeighthNV(GLhalfNV  weight)  {if (GLeeInit()) glVertexWeighthNV(weight);}
+  GLEEPFNGLVERTEXWEIGHTHNVPROC GLeeFuncPtr_glVertexWeighthNV=GLee_Lazy_glVertexWeighthNV;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexWeighthvNV
+#define GLEE_C_DEFINED_glVertexWeighthvNV
+  void __stdcall GLee_Lazy_glVertexWeighthvNV(const GLhalfNV * weight)  {if (GLeeInit()) glVertexWeighthvNV(weight);}
+  GLEEPFNGLVERTEXWEIGHTHVNVPROC GLeeFuncPtr_glVertexWeighthvNV=GLee_Lazy_glVertexWeighthvNV;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttrib1hNV
+#define GLEE_C_DEFINED_glVertexAttrib1hNV
+  void __stdcall GLee_Lazy_glVertexAttrib1hNV(GLuint  index, GLhalfNV  x)  {if (GLeeInit()) glVertexAttrib1hNV(index, x);}
+  GLEEPFNGLVERTEXATTRIB1HNVPROC GLeeFuncPtr_glVertexAttrib1hNV=GLee_Lazy_glVertexAttrib1hNV;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttrib1hvNV
+#define GLEE_C_DEFINED_glVertexAttrib1hvNV
+  void __stdcall GLee_Lazy_glVertexAttrib1hvNV(GLuint  index, const GLhalfNV * v)  {if (GLeeInit()) glVertexAttrib1hvNV(index, v);}
+  GLEEPFNGLVERTEXATTRIB1HVNVPROC GLeeFuncPtr_glVertexAttrib1hvNV=GLee_Lazy_glVertexAttrib1hvNV;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttrib2hNV
+#define GLEE_C_DEFINED_glVertexAttrib2hNV
+  void __stdcall GLee_Lazy_glVertexAttrib2hNV(GLuint  index, GLhalfNV  x, GLhalfNV  y)  {if (GLeeInit()) glVertexAttrib2hNV(index, x, y);}
+  GLEEPFNGLVERTEXATTRIB2HNVPROC GLeeFuncPtr_glVertexAttrib2hNV=GLee_Lazy_glVertexAttrib2hNV;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttrib2hvNV
+#define GLEE_C_DEFINED_glVertexAttrib2hvNV
+  void __stdcall GLee_Lazy_glVertexAttrib2hvNV(GLuint  index, const GLhalfNV * v)  {if (GLeeInit()) glVertexAttrib2hvNV(index, v);}
+  GLEEPFNGLVERTEXATTRIB2HVNVPROC GLeeFuncPtr_glVertexAttrib2hvNV=GLee_Lazy_glVertexAttrib2hvNV;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttrib3hNV
+#define GLEE_C_DEFINED_glVertexAttrib3hNV
+  void __stdcall GLee_Lazy_glVertexAttrib3hNV(GLuint  index, GLhalfNV  x, GLhalfNV  y, GLhalfNV  z)  {if (GLeeInit()) glVertexAttrib3hNV(index, x, y, z);}
+  GLEEPFNGLVERTEXATTRIB3HNVPROC GLeeFuncPtr_glVertexAttrib3hNV=GLee_Lazy_glVertexAttrib3hNV;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttrib3hvNV
+#define GLEE_C_DEFINED_glVertexAttrib3hvNV
+  void __stdcall GLee_Lazy_glVertexAttrib3hvNV(GLuint  index, const GLhalfNV * v)  {if (GLeeInit()) glVertexAttrib3hvNV(index, v);}
+  GLEEPFNGLVERTEXATTRIB3HVNVPROC GLeeFuncPtr_glVertexAttrib3hvNV=GLee_Lazy_glVertexAttrib3hvNV;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttrib4hNV
+#define GLEE_C_DEFINED_glVertexAttrib4hNV
+  void __stdcall GLee_Lazy_glVertexAttrib4hNV(GLuint  index, GLhalfNV  x, GLhalfNV  y, GLhalfNV  z, GLhalfNV  w)  {if (GLeeInit()) glVertexAttrib4hNV(index, x, y, z, w);}
+  GLEEPFNGLVERTEXATTRIB4HNVPROC GLeeFuncPtr_glVertexAttrib4hNV=GLee_Lazy_glVertexAttrib4hNV;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttrib4hvNV
+#define GLEE_C_DEFINED_glVertexAttrib4hvNV
+  void __stdcall GLee_Lazy_glVertexAttrib4hvNV(GLuint  index, const GLhalfNV * v)  {if (GLeeInit()) glVertexAttrib4hvNV(index, v);}
+  GLEEPFNGLVERTEXATTRIB4HVNVPROC GLeeFuncPtr_glVertexAttrib4hvNV=GLee_Lazy_glVertexAttrib4hvNV;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttribs1hvNV
+#define GLEE_C_DEFINED_glVertexAttribs1hvNV
+  void __stdcall GLee_Lazy_glVertexAttribs1hvNV(GLuint  index, GLsizei  n, const GLhalfNV * v)  {if (GLeeInit()) glVertexAttribs1hvNV(index, n, v);}
+  GLEEPFNGLVERTEXATTRIBS1HVNVPROC GLeeFuncPtr_glVertexAttribs1hvNV=GLee_Lazy_glVertexAttribs1hvNV;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttribs2hvNV
+#define GLEE_C_DEFINED_glVertexAttribs2hvNV
+  void __stdcall GLee_Lazy_glVertexAttribs2hvNV(GLuint  index, GLsizei  n, const GLhalfNV * v)  {if (GLeeInit()) glVertexAttribs2hvNV(index, n, v);}
+  GLEEPFNGLVERTEXATTRIBS2HVNVPROC GLeeFuncPtr_glVertexAttribs2hvNV=GLee_Lazy_glVertexAttribs2hvNV;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttribs3hvNV
+#define GLEE_C_DEFINED_glVertexAttribs3hvNV
+  void __stdcall GLee_Lazy_glVertexAttribs3hvNV(GLuint  index, GLsizei  n, const GLhalfNV * v)  {if (GLeeInit()) glVertexAttribs3hvNV(index, n, v);}
+  GLEEPFNGLVERTEXATTRIBS3HVNVPROC GLeeFuncPtr_glVertexAttribs3hvNV=GLee_Lazy_glVertexAttribs3hvNV;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttribs4hvNV
+#define GLEE_C_DEFINED_glVertexAttribs4hvNV
+  void __stdcall GLee_Lazy_glVertexAttribs4hvNV(GLuint  index, GLsizei  n, const GLhalfNV * v)  {if (GLeeInit()) glVertexAttribs4hvNV(index, n, v);}
+  GLEEPFNGLVERTEXATTRIBS4HVNVPROC GLeeFuncPtr_glVertexAttribs4hvNV=GLee_Lazy_glVertexAttribs4hvNV;
+#endif
+#endif 
+
+/* GL_NV_pixel_data_range */
+
+#ifdef __GLEE_GL_NV_pixel_data_range
+#ifndef GLEE_C_DEFINED_glPixelDataRangeNV
+#define GLEE_C_DEFINED_glPixelDataRangeNV
+  void __stdcall GLee_Lazy_glPixelDataRangeNV(GLenum  target, GLsizei  length, GLvoid * pointer)  {if (GLeeInit()) glPixelDataRangeNV(target, length, pointer);}
+  GLEEPFNGLPIXELDATARANGENVPROC GLeeFuncPtr_glPixelDataRangeNV=GLee_Lazy_glPixelDataRangeNV;
+#endif
+#ifndef GLEE_C_DEFINED_glFlushPixelDataRangeNV
+#define GLEE_C_DEFINED_glFlushPixelDataRangeNV
+  void __stdcall GLee_Lazy_glFlushPixelDataRangeNV(GLenum  target)  {if (GLeeInit()) glFlushPixelDataRangeNV(target);}
+  GLEEPFNGLFLUSHPIXELDATARANGENVPROC GLeeFuncPtr_glFlushPixelDataRangeNV=GLee_Lazy_glFlushPixelDataRangeNV;
+#endif
+#endif 
+
+/* GL_NV_primitive_restart */
+
+#ifdef __GLEE_GL_NV_primitive_restart
+#ifndef GLEE_C_DEFINED_glPrimitiveRestartNV
+#define GLEE_C_DEFINED_glPrimitiveRestartNV
+  void __stdcall GLee_Lazy_glPrimitiveRestartNV(void)  {if (GLeeInit()) glPrimitiveRestartNV();}
+  GLEEPFNGLPRIMITIVERESTARTNVPROC GLeeFuncPtr_glPrimitiveRestartNV=GLee_Lazy_glPrimitiveRestartNV;
+#endif
+#ifndef GLEE_C_DEFINED_glPrimitiveRestartIndexNV
+#define GLEE_C_DEFINED_glPrimitiveRestartIndexNV
+  void __stdcall GLee_Lazy_glPrimitiveRestartIndexNV(GLuint  index)  {if (GLeeInit()) glPrimitiveRestartIndexNV(index);}
+  GLEEPFNGLPRIMITIVERESTARTINDEXNVPROC GLeeFuncPtr_glPrimitiveRestartIndexNV=GLee_Lazy_glPrimitiveRestartIndexNV;
+#endif
+#endif 
+
+/* GL_NV_texture_expand_normal */
+
+#ifdef __GLEE_GL_NV_texture_expand_normal
+#endif 
+
+/* GL_NV_vertex_program2 */
+
+#ifdef __GLEE_GL_NV_vertex_program2
+#endif 
+
+/* GL_ATI_map_object_buffer */
+
+#ifdef __GLEE_GL_ATI_map_object_buffer
+#ifndef GLEE_C_DEFINED_glMapObjectBufferATI
+#define GLEE_C_DEFINED_glMapObjectBufferATI
+  GLvoid* __stdcall GLee_Lazy_glMapObjectBufferATI(GLuint  buffer)  {if (GLeeInit()) return glMapObjectBufferATI(buffer); return (GLvoid*)0;}
+  GLEEPFNGLMAPOBJECTBUFFERATIPROC GLeeFuncPtr_glMapObjectBufferATI=GLee_Lazy_glMapObjectBufferATI;
+#endif
+#ifndef GLEE_C_DEFINED_glUnmapObjectBufferATI
+#define GLEE_C_DEFINED_glUnmapObjectBufferATI
+  void __stdcall GLee_Lazy_glUnmapObjectBufferATI(GLuint  buffer)  {if (GLeeInit()) glUnmapObjectBufferATI(buffer);}
+  GLEEPFNGLUNMAPOBJECTBUFFERATIPROC GLeeFuncPtr_glUnmapObjectBufferATI=GLee_Lazy_glUnmapObjectBufferATI;
+#endif
+#endif 
+
+/* GL_ATI_separate_stencil */
+
+#ifdef __GLEE_GL_ATI_separate_stencil
+#ifndef GLEE_C_DEFINED_glStencilOpSeparateATI
+#define GLEE_C_DEFINED_glStencilOpSeparateATI
+  void __stdcall GLee_Lazy_glStencilOpSeparateATI(GLenum  face, GLenum  sfail, GLenum  dpfail, GLenum  dppass)  {if (GLeeInit()) glStencilOpSeparateATI(face, sfail, dpfail, dppass);}
+  GLEEPFNGLSTENCILOPSEPARATEATIPROC GLeeFuncPtr_glStencilOpSeparateATI=GLee_Lazy_glStencilOpSeparateATI;
+#endif
+#ifndef GLEE_C_DEFINED_glStencilFuncSeparateATI
+#define GLEE_C_DEFINED_glStencilFuncSeparateATI
+  void __stdcall GLee_Lazy_glStencilFuncSeparateATI(GLenum  frontfunc, GLenum  backfunc, GLint  ref, GLuint  mask)  {if (GLeeInit()) glStencilFuncSeparateATI(frontfunc, backfunc, ref, mask);}
+  GLEEPFNGLSTENCILFUNCSEPARATEATIPROC GLeeFuncPtr_glStencilFuncSeparateATI=GLee_Lazy_glStencilFuncSeparateATI;
+#endif
+#endif 
+
+/* GL_ATI_vertex_attrib_array_object */
+
+#ifdef __GLEE_GL_ATI_vertex_attrib_array_object
+#ifndef GLEE_C_DEFINED_glVertexAttribArrayObjectATI
+#define GLEE_C_DEFINED_glVertexAttribArrayObjectATI
+  void __stdcall GLee_Lazy_glVertexAttribArrayObjectATI(GLuint  index, GLint  size, GLenum  type, GLboolean  normalized, GLsizei  stride, GLuint  buffer, GLuint  offset)  {if (GLeeInit()) glVertexAttribArrayObjectATI(index, size, type, normalized, stride, buffer, offset);}
+  GLEEPFNGLVERTEXATTRIBARRAYOBJECTATIPROC GLeeFuncPtr_glVertexAttribArrayObjectATI=GLee_Lazy_glVertexAttribArrayObjectATI;
+#endif
+#ifndef GLEE_C_DEFINED_glGetVertexAttribArrayObjectfvATI
+#define GLEE_C_DEFINED_glGetVertexAttribArrayObjectfvATI
+  void __stdcall GLee_Lazy_glGetVertexAttribArrayObjectfvATI(GLuint  index, GLenum  pname, GLfloat * params)  {if (GLeeInit()) glGetVertexAttribArrayObjectfvATI(index, pname, params);}
+  GLEEPFNGLGETVERTEXATTRIBARRAYOBJECTFVATIPROC GLeeFuncPtr_glGetVertexAttribArrayObjectfvATI=GLee_Lazy_glGetVertexAttribArrayObjectfvATI;
+#endif
+#ifndef GLEE_C_DEFINED_glGetVertexAttribArrayObjectivATI
+#define GLEE_C_DEFINED_glGetVertexAttribArrayObjectivATI
+  void __stdcall GLee_Lazy_glGetVertexAttribArrayObjectivATI(GLuint  index, GLenum  pname, GLint * params)  {if (GLeeInit()) glGetVertexAttribArrayObjectivATI(index, pname, params);}
+  GLEEPFNGLGETVERTEXATTRIBARRAYOBJECTIVATIPROC GLeeFuncPtr_glGetVertexAttribArrayObjectivATI=GLee_Lazy_glGetVertexAttribArrayObjectivATI;
+#endif
+#endif 
+
+/* GL_OES_read_format */
+
+#ifdef __GLEE_GL_OES_read_format
+#endif 
+
+/* GL_EXT_depth_bounds_test */
+
+#ifdef __GLEE_GL_EXT_depth_bounds_test
+#ifndef GLEE_C_DEFINED_glDepthBoundsEXT
+#define GLEE_C_DEFINED_glDepthBoundsEXT
+  void __stdcall GLee_Lazy_glDepthBoundsEXT(GLclampd  zmin, GLclampd  zmax)  {if (GLeeInit()) glDepthBoundsEXT(zmin, zmax);}
+  GLEEPFNGLDEPTHBOUNDSEXTPROC GLeeFuncPtr_glDepthBoundsEXT=GLee_Lazy_glDepthBoundsEXT;
+#endif
+#endif 
+
+/* GL_EXT_texture_mirror_clamp */
+
+#ifdef __GLEE_GL_EXT_texture_mirror_clamp
+#endif 
+
+/* GL_EXT_blend_equation_separate */
+
+#ifdef __GLEE_GL_EXT_blend_equation_separate
+#ifndef GLEE_C_DEFINED_glBlendEquationSeparateEXT
+#define GLEE_C_DEFINED_glBlendEquationSeparateEXT
+  void __stdcall GLee_Lazy_glBlendEquationSeparateEXT(GLenum  modeRGB, GLenum  modeAlpha)  {if (GLeeInit()) glBlendEquationSeparateEXT(modeRGB, modeAlpha);}
+  GLEEPFNGLBLENDEQUATIONSEPARATEEXTPROC GLeeFuncPtr_glBlendEquationSeparateEXT=GLee_Lazy_glBlendEquationSeparateEXT;
+#endif
+#endif 
+
+/* GL_MESA_pack_invert */
+
+#ifdef __GLEE_GL_MESA_pack_invert
+#endif 
+
+/* GL_MESA_ycbcr_texture */
+
+#ifdef __GLEE_GL_MESA_ycbcr_texture
+#endif 
+
+/* GL_EXT_pixel_buffer_object */
+
+#ifdef __GLEE_GL_EXT_pixel_buffer_object
+#endif 
+
+/* GL_NV_fragment_program_option */
+
+#ifdef __GLEE_GL_NV_fragment_program_option
+#endif 
+
+/* GL_NV_fragment_program2 */
+
+#ifdef __GLEE_GL_NV_fragment_program2
+#endif 
+
+/* GL_NV_vertex_program2_option */
+
+#ifdef __GLEE_GL_NV_vertex_program2_option
+#endif 
+
+/* GL_NV_vertex_program3 */
+
+#ifdef __GLEE_GL_NV_vertex_program3
+#endif 
+
+/* GL_EXT_framebuffer_object */
+
+#ifdef __GLEE_GL_EXT_framebuffer_object
+#ifndef GLEE_C_DEFINED_glIsRenderbufferEXT
+#define GLEE_C_DEFINED_glIsRenderbufferEXT
+  GLboolean __stdcall GLee_Lazy_glIsRenderbufferEXT(GLuint  renderbuffer)  {if (GLeeInit()) return glIsRenderbufferEXT(renderbuffer); return (GLboolean)0;}
+  GLEEPFNGLISRENDERBUFFEREXTPROC GLeeFuncPtr_glIsRenderbufferEXT=GLee_Lazy_glIsRenderbufferEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glBindRenderbufferEXT
+#define GLEE_C_DEFINED_glBindRenderbufferEXT
+  void __stdcall GLee_Lazy_glBindRenderbufferEXT(GLenum  target, GLuint  renderbuffer)  {if (GLeeInit()) glBindRenderbufferEXT(target, renderbuffer);}
+  GLEEPFNGLBINDRENDERBUFFEREXTPROC GLeeFuncPtr_glBindRenderbufferEXT=GLee_Lazy_glBindRenderbufferEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glDeleteRenderbuffersEXT
+#define GLEE_C_DEFINED_glDeleteRenderbuffersEXT
+  void __stdcall GLee_Lazy_glDeleteRenderbuffersEXT(GLsizei  n, const GLuint * renderbuffers)  {if (GLeeInit()) glDeleteRenderbuffersEXT(n, renderbuffers);}
+  GLEEPFNGLDELETERENDERBUFFERSEXTPROC GLeeFuncPtr_glDeleteRenderbuffersEXT=GLee_Lazy_glDeleteRenderbuffersEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glGenRenderbuffersEXT
+#define GLEE_C_DEFINED_glGenRenderbuffersEXT
+  void __stdcall GLee_Lazy_glGenRenderbuffersEXT(GLsizei  n, GLuint * renderbuffers)  {if (GLeeInit()) glGenRenderbuffersEXT(n, renderbuffers);}
+  GLEEPFNGLGENRENDERBUFFERSEXTPROC GLeeFuncPtr_glGenRenderbuffersEXT=GLee_Lazy_glGenRenderbuffersEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glRenderbufferStorageEXT
+#define GLEE_C_DEFINED_glRenderbufferStorageEXT
+  void __stdcall GLee_Lazy_glRenderbufferStorageEXT(GLenum  target, GLenum  internalformat, GLsizei  width, GLsizei  height)  {if (GLeeInit()) glRenderbufferStorageEXT(target, internalformat, width, height);}
+  GLEEPFNGLRENDERBUFFERSTORAGEEXTPROC GLeeFuncPtr_glRenderbufferStorageEXT=GLee_Lazy_glRenderbufferStorageEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glGetRenderbufferParameterivEXT
+#define GLEE_C_DEFINED_glGetRenderbufferParameterivEXT
+  void __stdcall GLee_Lazy_glGetRenderbufferParameterivEXT(GLenum  target, GLenum  pname, GLint * params)  {if (GLeeInit()) glGetRenderbufferParameterivEXT(target, pname, params);}
+  GLEEPFNGLGETRENDERBUFFERPARAMETERIVEXTPROC GLeeFuncPtr_glGetRenderbufferParameterivEXT=GLee_Lazy_glGetRenderbufferParameterivEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glIsFramebufferEXT
+#define GLEE_C_DEFINED_glIsFramebufferEXT
+  GLboolean __stdcall GLee_Lazy_glIsFramebufferEXT(GLuint  framebuffer)  {if (GLeeInit()) return glIsFramebufferEXT(framebuffer); return (GLboolean)0;}
+  GLEEPFNGLISFRAMEBUFFEREXTPROC GLeeFuncPtr_glIsFramebufferEXT=GLee_Lazy_glIsFramebufferEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glBindFramebufferEXT
+#define GLEE_C_DEFINED_glBindFramebufferEXT
+  void __stdcall GLee_Lazy_glBindFramebufferEXT(GLenum  target, GLuint  framebuffer)  {if (GLeeInit()) glBindFramebufferEXT(target, framebuffer);}
+  GLEEPFNGLBINDFRAMEBUFFEREXTPROC GLeeFuncPtr_glBindFramebufferEXT=GLee_Lazy_glBindFramebufferEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glDeleteFramebuffersEXT
+#define GLEE_C_DEFINED_glDeleteFramebuffersEXT
+  void __stdcall GLee_Lazy_glDeleteFramebuffersEXT(GLsizei  n, const GLuint * framebuffers)  {if (GLeeInit()) glDeleteFramebuffersEXT(n, framebuffers);}
+  GLEEPFNGLDELETEFRAMEBUFFERSEXTPROC GLeeFuncPtr_glDeleteFramebuffersEXT=GLee_Lazy_glDeleteFramebuffersEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glGenFramebuffersEXT
+#define GLEE_C_DEFINED_glGenFramebuffersEXT
+  void __stdcall GLee_Lazy_glGenFramebuffersEXT(GLsizei  n, GLuint * framebuffers)  {if (GLeeInit()) glGenFramebuffersEXT(n, framebuffers);}
+  GLEEPFNGLGENFRAMEBUFFERSEXTPROC GLeeFuncPtr_glGenFramebuffersEXT=GLee_Lazy_glGenFramebuffersEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glCheckFramebufferStatusEXT
+#define GLEE_C_DEFINED_glCheckFramebufferStatusEXT
+  GLenum __stdcall GLee_Lazy_glCheckFramebufferStatusEXT(GLenum  target)  {if (GLeeInit()) return glCheckFramebufferStatusEXT(target); return (GLenum)0;}
+  GLEEPFNGLCHECKFRAMEBUFFERSTATUSEXTPROC GLeeFuncPtr_glCheckFramebufferStatusEXT=GLee_Lazy_glCheckFramebufferStatusEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glFramebufferTexture1DEXT
+#define GLEE_C_DEFINED_glFramebufferTexture1DEXT
+  void __stdcall GLee_Lazy_glFramebufferTexture1DEXT(GLenum  target, GLenum  attachment, GLenum  textarget, GLuint  texture, GLint  level)  {if (GLeeInit()) glFramebufferTexture1DEXT(target, attachment, textarget, texture, level);}
+  GLEEPFNGLFRAMEBUFFERTEXTURE1DEXTPROC GLeeFuncPtr_glFramebufferTexture1DEXT=GLee_Lazy_glFramebufferTexture1DEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glFramebufferTexture2DEXT
+#define GLEE_C_DEFINED_glFramebufferTexture2DEXT
+  void __stdcall GLee_Lazy_glFramebufferTexture2DEXT(GLenum  target, GLenum  attachment, GLenum  textarget, GLuint  texture, GLint  level)  {if (GLeeInit()) glFramebufferTexture2DEXT(target, attachment, textarget, texture, level);}
+  GLEEPFNGLFRAMEBUFFERTEXTURE2DEXTPROC GLeeFuncPtr_glFramebufferTexture2DEXT=GLee_Lazy_glFramebufferTexture2DEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glFramebufferTexture3DEXT
+#define GLEE_C_DEFINED_glFramebufferTexture3DEXT
+  void __stdcall GLee_Lazy_glFramebufferTexture3DEXT(GLenum  target, GLenum  attachment, GLenum  textarget, GLuint  texture, GLint  level, GLint  zoffset)  {if (GLeeInit()) glFramebufferTexture3DEXT(target, attachment, textarget, texture, level, zoffset);}
+  GLEEPFNGLFRAMEBUFFERTEXTURE3DEXTPROC GLeeFuncPtr_glFramebufferTexture3DEXT=GLee_Lazy_glFramebufferTexture3DEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glFramebufferRenderbufferEXT
+#define GLEE_C_DEFINED_glFramebufferRenderbufferEXT
+  void __stdcall GLee_Lazy_glFramebufferRenderbufferEXT(GLenum  target, GLenum  attachment, GLenum  renderbuffertarget, GLuint  renderbuffer)  {if (GLeeInit()) glFramebufferRenderbufferEXT(target, attachment, renderbuffertarget, renderbuffer);}
+  GLEEPFNGLFRAMEBUFFERRENDERBUFFEREXTPROC GLeeFuncPtr_glFramebufferRenderbufferEXT=GLee_Lazy_glFramebufferRenderbufferEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glGetFramebufferAttachmentParameterivEXT
+#define GLEE_C_DEFINED_glGetFramebufferAttachmentParameterivEXT
+  void __stdcall GLee_Lazy_glGetFramebufferAttachmentParameterivEXT(GLenum  target, GLenum  attachment, GLenum  pname, GLint * params)  {if (GLeeInit()) glGetFramebufferAttachmentParameterivEXT(target, attachment, pname, params);}
+  GLEEPFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC GLeeFuncPtr_glGetFramebufferAttachmentParameterivEXT=GLee_Lazy_glGetFramebufferAttachmentParameterivEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glGenerateMipmapEXT
+#define GLEE_C_DEFINED_glGenerateMipmapEXT
+  void __stdcall GLee_Lazy_glGenerateMipmapEXT(GLenum  target)  {if (GLeeInit()) glGenerateMipmapEXT(target);}
+  GLEEPFNGLGENERATEMIPMAPEXTPROC GLeeFuncPtr_glGenerateMipmapEXT=GLee_Lazy_glGenerateMipmapEXT;
+#endif
+#endif 
+
+/* GL_GREMEDY_string_marker */
+
+#ifdef __GLEE_GL_GREMEDY_string_marker
+#ifndef GLEE_C_DEFINED_glStringMarkerGREMEDY
+#define GLEE_C_DEFINED_glStringMarkerGREMEDY
+  void __stdcall GLee_Lazy_glStringMarkerGREMEDY(GLsizei  len, const GLvoid * string)  {if (GLeeInit()) glStringMarkerGREMEDY(len, string);}
+  GLEEPFNGLSTRINGMARKERGREMEDYPROC GLeeFuncPtr_glStringMarkerGREMEDY=GLee_Lazy_glStringMarkerGREMEDY;
+#endif
+#endif 
+
+/* GL_EXT_packed_depth_stencil */
+
+#ifdef __GLEE_GL_EXT_packed_depth_stencil
+#endif 
+
+/* GL_EXT_stencil_clear_tag */
+
+#ifdef __GLEE_GL_EXT_stencil_clear_tag
+#ifndef GLEE_C_DEFINED_glStencilClearTagEXT
+#define GLEE_C_DEFINED_glStencilClearTagEXT
+  void __stdcall GLee_Lazy_glStencilClearTagEXT(GLsizei  stencilTagBits, GLuint  stencilClearTag)  {if (GLeeInit()) glStencilClearTagEXT(stencilTagBits, stencilClearTag);}
+  GLEEPFNGLSTENCILCLEARTAGEXTPROC GLeeFuncPtr_glStencilClearTagEXT=GLee_Lazy_glStencilClearTagEXT;
+#endif
+#endif 
+
+/* GL_EXT_texture_sRGB */
+
+#ifdef __GLEE_GL_EXT_texture_sRGB
+#endif 
+
+/* GL_EXT_framebuffer_blit */
+
+#ifdef __GLEE_GL_EXT_framebuffer_blit
+#ifndef GLEE_C_DEFINED_glBlitFramebufferEXT
+#define GLEE_C_DEFINED_glBlitFramebufferEXT
+  void __stdcall GLee_Lazy_glBlitFramebufferEXT(GLint  srcX0, GLint  srcY0, GLint  srcX1, GLint  srcY1, GLint  dstX0, GLint  dstY0, GLint  dstX1, GLint  dstY1, GLbitfield  mask, GLenum  filter)  {if (GLeeInit()) glBlitFramebufferEXT(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);}
+  GLEEPFNGLBLITFRAMEBUFFEREXTPROC GLeeFuncPtr_glBlitFramebufferEXT=GLee_Lazy_glBlitFramebufferEXT;
+#endif
+#endif 
+
+/* GL_EXT_framebuffer_multisample */
+
+#ifdef __GLEE_GL_EXT_framebuffer_multisample
+#ifndef GLEE_C_DEFINED_glRenderbufferStorageMultisampleEXT
+#define GLEE_C_DEFINED_glRenderbufferStorageMultisampleEXT
+  void __stdcall GLee_Lazy_glRenderbufferStorageMultisampleEXT(GLenum  target, GLsizei  samples, GLenum  internalformat, GLsizei  width, GLsizei  height)  {if (GLeeInit()) glRenderbufferStorageMultisampleEXT(target, samples, internalformat, width, height);}
+  GLEEPFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC GLeeFuncPtr_glRenderbufferStorageMultisampleEXT=GLee_Lazy_glRenderbufferStorageMultisampleEXT;
+#endif
+#endif 
+
+/* GL_MESAX_texture_stack */
+
+#ifdef __GLEE_GL_MESAX_texture_stack
+#endif 
+
+/* GL_EXT_timer_query */
+
+#ifdef __GLEE_GL_EXT_timer_query
+#ifndef GLEE_C_DEFINED_glGetQueryObjecti64vEXT
+#define GLEE_C_DEFINED_glGetQueryObjecti64vEXT
+  void __stdcall GLee_Lazy_glGetQueryObjecti64vEXT(GLuint  id, GLenum  pname, GLint64EXT * params)  {if (GLeeInit()) glGetQueryObjecti64vEXT(id, pname, params);}
+  GLEEPFNGLGETQUERYOBJECTI64VEXTPROC GLeeFuncPtr_glGetQueryObjecti64vEXT=GLee_Lazy_glGetQueryObjecti64vEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glGetQueryObjectui64vEXT
+#define GLEE_C_DEFINED_glGetQueryObjectui64vEXT
+  void __stdcall GLee_Lazy_glGetQueryObjectui64vEXT(GLuint  id, GLenum  pname, GLuint64EXT * params)  {if (GLeeInit()) glGetQueryObjectui64vEXT(id, pname, params);}
+  GLEEPFNGLGETQUERYOBJECTUI64VEXTPROC GLeeFuncPtr_glGetQueryObjectui64vEXT=GLee_Lazy_glGetQueryObjectui64vEXT;
+#endif
+#endif 
+
+/* GL_EXT_gpu_program_parameters */
+
+#ifdef __GLEE_GL_EXT_gpu_program_parameters
+#ifndef GLEE_C_DEFINED_glProgramEnvParameters4fvEXT
+#define GLEE_C_DEFINED_glProgramEnvParameters4fvEXT
+  void __stdcall GLee_Lazy_glProgramEnvParameters4fvEXT(GLenum  target, GLuint  index, GLsizei  count, const GLfloat * params)  {if (GLeeInit()) glProgramEnvParameters4fvEXT(target, index, count, params);}
+  GLEEPFNGLPROGRAMENVPARAMETERS4FVEXTPROC GLeeFuncPtr_glProgramEnvParameters4fvEXT=GLee_Lazy_glProgramEnvParameters4fvEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramLocalParameters4fvEXT
+#define GLEE_C_DEFINED_glProgramLocalParameters4fvEXT
+  void __stdcall GLee_Lazy_glProgramLocalParameters4fvEXT(GLenum  target, GLuint  index, GLsizei  count, const GLfloat * params)  {if (GLeeInit()) glProgramLocalParameters4fvEXT(target, index, count, params);}
+  GLEEPFNGLPROGRAMLOCALPARAMETERS4FVEXTPROC GLeeFuncPtr_glProgramLocalParameters4fvEXT=GLee_Lazy_glProgramLocalParameters4fvEXT;
+#endif
+#endif 
+
+/* GL_APPLE_flush_buffer_range */
+
+#ifdef __GLEE_GL_APPLE_flush_buffer_range
+#ifndef GLEE_C_DEFINED_glBufferParameteriAPPLE
+#define GLEE_C_DEFINED_glBufferParameteriAPPLE
+  void __stdcall GLee_Lazy_glBufferParameteriAPPLE(GLenum  target, GLenum  pname, GLint  param)  {if (GLeeInit()) glBufferParameteriAPPLE(target, pname, param);}
+  GLEEPFNGLBUFFERPARAMETERIAPPLEPROC GLeeFuncPtr_glBufferParameteriAPPLE=GLee_Lazy_glBufferParameteriAPPLE;
+#endif
+#ifndef GLEE_C_DEFINED_glFlushMappedBufferRangeAPPLE
+#define GLEE_C_DEFINED_glFlushMappedBufferRangeAPPLE
+  void __stdcall GLee_Lazy_glFlushMappedBufferRangeAPPLE(GLenum  target, GLintptr  offset, GLsizeiptr  size)  {if (GLeeInit()) glFlushMappedBufferRangeAPPLE(target, offset, size);}
+  GLEEPFNGLFLUSHMAPPEDBUFFERRANGEAPPLEPROC GLeeFuncPtr_glFlushMappedBufferRangeAPPLE=GLee_Lazy_glFlushMappedBufferRangeAPPLE;
+#endif
+#endif 
+
+/* GL_EXT_gpu_shader4 */
+
+#ifdef __GLEE_GL_EXT_gpu_shader4
+#ifndef GLEE_C_DEFINED_glGetUniformuivEXT
+#define GLEE_C_DEFINED_glGetUniformuivEXT
+  void __stdcall GLee_Lazy_glGetUniformuivEXT(GLuint  program, GLint  location, GLuint * params)  {if (GLeeInit()) glGetUniformuivEXT(program, location, params);}
+  GLEEPFNGLGETUNIFORMUIVEXTPROC GLeeFuncPtr_glGetUniformuivEXT=GLee_Lazy_glGetUniformuivEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glBindFragDataLocationEXT
+#define GLEE_C_DEFINED_glBindFragDataLocationEXT
+  void __stdcall GLee_Lazy_glBindFragDataLocationEXT(GLuint  program, GLuint  color, const GLchar * name)  {if (GLeeInit()) glBindFragDataLocationEXT(program, color, name);}
+  GLEEPFNGLBINDFRAGDATALOCATIONEXTPROC GLeeFuncPtr_glBindFragDataLocationEXT=GLee_Lazy_glBindFragDataLocationEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glGetFragDataLocationEXT
+#define GLEE_C_DEFINED_glGetFragDataLocationEXT
+  GLint __stdcall GLee_Lazy_glGetFragDataLocationEXT(GLuint  program, const GLchar * name)  {if (GLeeInit()) return glGetFragDataLocationEXT(program, name); return (GLint)0;}
+  GLEEPFNGLGETFRAGDATALOCATIONEXTPROC GLeeFuncPtr_glGetFragDataLocationEXT=GLee_Lazy_glGetFragDataLocationEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glUniform1uiEXT
+#define GLEE_C_DEFINED_glUniform1uiEXT
+  void __stdcall GLee_Lazy_glUniform1uiEXT(GLint  location, GLuint  v0)  {if (GLeeInit()) glUniform1uiEXT(location, v0);}
+  GLEEPFNGLUNIFORM1UIEXTPROC GLeeFuncPtr_glUniform1uiEXT=GLee_Lazy_glUniform1uiEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glUniform2uiEXT
+#define GLEE_C_DEFINED_glUniform2uiEXT
+  void __stdcall GLee_Lazy_glUniform2uiEXT(GLint  location, GLuint  v0, GLuint  v1)  {if (GLeeInit()) glUniform2uiEXT(location, v0, v1);}
+  GLEEPFNGLUNIFORM2UIEXTPROC GLeeFuncPtr_glUniform2uiEXT=GLee_Lazy_glUniform2uiEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glUniform3uiEXT
+#define GLEE_C_DEFINED_glUniform3uiEXT
+  void __stdcall GLee_Lazy_glUniform3uiEXT(GLint  location, GLuint  v0, GLuint  v1, GLuint  v2)  {if (GLeeInit()) glUniform3uiEXT(location, v0, v1, v2);}
+  GLEEPFNGLUNIFORM3UIEXTPROC GLeeFuncPtr_glUniform3uiEXT=GLee_Lazy_glUniform3uiEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glUniform4uiEXT
+#define GLEE_C_DEFINED_glUniform4uiEXT
+  void __stdcall GLee_Lazy_glUniform4uiEXT(GLint  location, GLuint  v0, GLuint  v1, GLuint  v2, GLuint  v3)  {if (GLeeInit()) glUniform4uiEXT(location, v0, v1, v2, v3);}
+  GLEEPFNGLUNIFORM4UIEXTPROC GLeeFuncPtr_glUniform4uiEXT=GLee_Lazy_glUniform4uiEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glUniform1uivEXT
+#define GLEE_C_DEFINED_glUniform1uivEXT
+  void __stdcall GLee_Lazy_glUniform1uivEXT(GLint  location, GLsizei  count, const GLuint * value)  {if (GLeeInit()) glUniform1uivEXT(location, count, value);}
+  GLEEPFNGLUNIFORM1UIVEXTPROC GLeeFuncPtr_glUniform1uivEXT=GLee_Lazy_glUniform1uivEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glUniform2uivEXT
+#define GLEE_C_DEFINED_glUniform2uivEXT
+  void __stdcall GLee_Lazy_glUniform2uivEXT(GLint  location, GLsizei  count, const GLuint * value)  {if (GLeeInit()) glUniform2uivEXT(location, count, value);}
+  GLEEPFNGLUNIFORM2UIVEXTPROC GLeeFuncPtr_glUniform2uivEXT=GLee_Lazy_glUniform2uivEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glUniform3uivEXT
+#define GLEE_C_DEFINED_glUniform3uivEXT
+  void __stdcall GLee_Lazy_glUniform3uivEXT(GLint  location, GLsizei  count, const GLuint * value)  {if (GLeeInit()) glUniform3uivEXT(location, count, value);}
+  GLEEPFNGLUNIFORM3UIVEXTPROC GLeeFuncPtr_glUniform3uivEXT=GLee_Lazy_glUniform3uivEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glUniform4uivEXT
+#define GLEE_C_DEFINED_glUniform4uivEXT
+  void __stdcall GLee_Lazy_glUniform4uivEXT(GLint  location, GLsizei  count, const GLuint * value)  {if (GLeeInit()) glUniform4uivEXT(location, count, value);}
+  GLEEPFNGLUNIFORM4UIVEXTPROC GLeeFuncPtr_glUniform4uivEXT=GLee_Lazy_glUniform4uivEXT;
+#endif
+#endif 
+
+/* GL_EXT_draw_instanced */
+
+#ifdef __GLEE_GL_EXT_draw_instanced
+#ifndef GLEE_C_DEFINED_glDrawArraysInstancedEXT
+#define GLEE_C_DEFINED_glDrawArraysInstancedEXT
+  void __stdcall GLee_Lazy_glDrawArraysInstancedEXT(GLenum  mode, GLint  start, GLsizei  count, GLsizei  primcount)  {if (GLeeInit()) glDrawArraysInstancedEXT(mode, start, count, primcount);}
+  GLEEPFNGLDRAWARRAYSINSTANCEDEXTPROC GLeeFuncPtr_glDrawArraysInstancedEXT=GLee_Lazy_glDrawArraysInstancedEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glDrawElementsInstancedEXT
+#define GLEE_C_DEFINED_glDrawElementsInstancedEXT
+  void __stdcall GLee_Lazy_glDrawElementsInstancedEXT(GLenum  mode, GLsizei  count, GLenum  type, const GLvoid * indices, GLsizei  primcount)  {if (GLeeInit()) glDrawElementsInstancedEXT(mode, count, type, indices, primcount);}
+  GLEEPFNGLDRAWELEMENTSINSTANCEDEXTPROC GLeeFuncPtr_glDrawElementsInstancedEXT=GLee_Lazy_glDrawElementsInstancedEXT;
+#endif
+#endif 
+
+/* GL_EXT_packed_float */
+
+#ifdef __GLEE_GL_EXT_packed_float
+#endif 
+
+/* GL_EXT_texture_array */
+
+#ifdef __GLEE_GL_EXT_texture_array
+#endif 
+
+/* GL_EXT_texture_buffer_object */
+
+#ifdef __GLEE_GL_EXT_texture_buffer_object
+#ifndef GLEE_C_DEFINED_glTexBufferEXT
+#define GLEE_C_DEFINED_glTexBufferEXT
+  void __stdcall GLee_Lazy_glTexBufferEXT(GLenum  target, GLenum  internalformat, GLuint  buffer)  {if (GLeeInit()) glTexBufferEXT(target, internalformat, buffer);}
+  GLEEPFNGLTEXBUFFEREXTPROC GLeeFuncPtr_glTexBufferEXT=GLee_Lazy_glTexBufferEXT;
+#endif
+#endif 
+
+/* GL_EXT_texture_compression_latc */
+
+#ifdef __GLEE_GL_EXT_texture_compression_latc
+#endif 
+
+/* GL_EXT_texture_compression_rgtc */
+
+#ifdef __GLEE_GL_EXT_texture_compression_rgtc
+#endif 
+
+/* GL_EXT_texture_shared_exponent */
+
+#ifdef __GLEE_GL_EXT_texture_shared_exponent
+#endif 
+
+/* GL_NV_depth_buffer_float */
+
+#ifdef __GLEE_GL_NV_depth_buffer_float
+#ifndef GLEE_C_DEFINED_glDepthRangedNV
+#define GLEE_C_DEFINED_glDepthRangedNV
+  void __stdcall GLee_Lazy_glDepthRangedNV(GLdouble  zNear, GLdouble  zFar)  {if (GLeeInit()) glDepthRangedNV(zNear, zFar);}
+  GLEEPFNGLDEPTHRANGEDNVPROC GLeeFuncPtr_glDepthRangedNV=GLee_Lazy_glDepthRangedNV;
+#endif
+#ifndef GLEE_C_DEFINED_glClearDepthdNV
+#define GLEE_C_DEFINED_glClearDepthdNV
+  void __stdcall GLee_Lazy_glClearDepthdNV(GLdouble  depth)  {if (GLeeInit()) glClearDepthdNV(depth);}
+  GLEEPFNGLCLEARDEPTHDNVPROC GLeeFuncPtr_glClearDepthdNV=GLee_Lazy_glClearDepthdNV;
+#endif
+#ifndef GLEE_C_DEFINED_glDepthBoundsdNV
+#define GLEE_C_DEFINED_glDepthBoundsdNV
+  void __stdcall GLee_Lazy_glDepthBoundsdNV(GLdouble  zmin, GLdouble  zmax)  {if (GLeeInit()) glDepthBoundsdNV(zmin, zmax);}
+  GLEEPFNGLDEPTHBOUNDSDNVPROC GLeeFuncPtr_glDepthBoundsdNV=GLee_Lazy_glDepthBoundsdNV;
+#endif
+#endif 
+
+/* GL_NV_framebuffer_multisample_coverage */
+
+#ifdef __GLEE_GL_NV_framebuffer_multisample_coverage
+#ifndef GLEE_C_DEFINED_glRenderbufferStorageMultisampleCoverageNV
+#define GLEE_C_DEFINED_glRenderbufferStorageMultisampleCoverageNV
+  void __stdcall GLee_Lazy_glRenderbufferStorageMultisampleCoverageNV(GLenum  target, GLsizei  coverageSamples, GLsizei  colorSamples, GLenum  internalformat, GLsizei  width, GLsizei  height)  {if (GLeeInit()) glRenderbufferStorageMultisampleCoverageNV(target, coverageSamples, colorSamples, internalformat, width, height);}
+  GLEEPFNGLRENDERBUFFERSTORAGEMULTISAMPLECOVERAGENVPROC GLeeFuncPtr_glRenderbufferStorageMultisampleCoverageNV=GLee_Lazy_glRenderbufferStorageMultisampleCoverageNV;
+#endif
+#endif 
+
+/* GL_EXT_framebuffer_sRGB */
+
+#ifdef __GLEE_GL_EXT_framebuffer_sRGB
+#endif 
+
+/* GL_NV_geometry_shader4 */
+
+#ifdef __GLEE_GL_NV_geometry_shader4
+#endif 
+
+/* GL_NV_parameter_buffer_object */
+
+#ifdef __GLEE_GL_NV_parameter_buffer_object
+#ifndef GLEE_C_DEFINED_glProgramBufferParametersfvNV
+#define GLEE_C_DEFINED_glProgramBufferParametersfvNV
+  void __stdcall GLee_Lazy_glProgramBufferParametersfvNV(GLenum  target, GLuint  buffer, GLuint  index, GLsizei  count, const GLfloat * params)  {if (GLeeInit()) glProgramBufferParametersfvNV(target, buffer, index, count, params);}
+  GLEEPFNGLPROGRAMBUFFERPARAMETERSFVNVPROC GLeeFuncPtr_glProgramBufferParametersfvNV=GLee_Lazy_glProgramBufferParametersfvNV;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramBufferParametersIivNV
+#define GLEE_C_DEFINED_glProgramBufferParametersIivNV
+  void __stdcall GLee_Lazy_glProgramBufferParametersIivNV(GLenum  target, GLuint  buffer, GLuint  index, GLsizei  count, const GLint * params)  {if (GLeeInit()) glProgramBufferParametersIivNV(target, buffer, index, count, params);}
+  GLEEPFNGLPROGRAMBUFFERPARAMETERSIIVNVPROC GLeeFuncPtr_glProgramBufferParametersIivNV=GLee_Lazy_glProgramBufferParametersIivNV;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramBufferParametersIuivNV
+#define GLEE_C_DEFINED_glProgramBufferParametersIuivNV
+  void __stdcall GLee_Lazy_glProgramBufferParametersIuivNV(GLenum  target, GLuint  buffer, GLuint  index, GLsizei  count, const GLuint * params)  {if (GLeeInit()) glProgramBufferParametersIuivNV(target, buffer, index, count, params);}
+  GLEEPFNGLPROGRAMBUFFERPARAMETERSIUIVNVPROC GLeeFuncPtr_glProgramBufferParametersIuivNV=GLee_Lazy_glProgramBufferParametersIuivNV;
+#endif
+#endif 
+
+/* GL_EXT_draw_buffers2 */
+
+#ifdef __GLEE_GL_EXT_draw_buffers2
+#ifndef GLEE_C_DEFINED_glColorMaskIndexedEXT
+#define GLEE_C_DEFINED_glColorMaskIndexedEXT
+  void __stdcall GLee_Lazy_glColorMaskIndexedEXT(GLuint  index, GLboolean  r, GLboolean  g, GLboolean  b, GLboolean  a)  {if (GLeeInit()) glColorMaskIndexedEXT(index, r, g, b, a);}
+  GLEEPFNGLCOLORMASKINDEXEDEXTPROC GLeeFuncPtr_glColorMaskIndexedEXT=GLee_Lazy_glColorMaskIndexedEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glGetBooleanIndexedvEXT
+#define GLEE_C_DEFINED_glGetBooleanIndexedvEXT
+  void __stdcall GLee_Lazy_glGetBooleanIndexedvEXT(GLenum  target, GLuint  index, GLboolean * data)  {if (GLeeInit()) glGetBooleanIndexedvEXT(target, index, data);}
+  GLEEPFNGLGETBOOLEANINDEXEDVEXTPROC GLeeFuncPtr_glGetBooleanIndexedvEXT=GLee_Lazy_glGetBooleanIndexedvEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glGetIntegerIndexedvEXT
+#define GLEE_C_DEFINED_glGetIntegerIndexedvEXT
+  void __stdcall GLee_Lazy_glGetIntegerIndexedvEXT(GLenum  target, GLuint  index, GLint * data)  {if (GLeeInit()) glGetIntegerIndexedvEXT(target, index, data);}
+  GLEEPFNGLGETINTEGERINDEXEDVEXTPROC GLeeFuncPtr_glGetIntegerIndexedvEXT=GLee_Lazy_glGetIntegerIndexedvEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glEnableIndexedEXT
+#define GLEE_C_DEFINED_glEnableIndexedEXT
+  void __stdcall GLee_Lazy_glEnableIndexedEXT(GLenum  target, GLuint  index)  {if (GLeeInit()) glEnableIndexedEXT(target, index);}
+  GLEEPFNGLENABLEINDEXEDEXTPROC GLeeFuncPtr_glEnableIndexedEXT=GLee_Lazy_glEnableIndexedEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glDisableIndexedEXT
+#define GLEE_C_DEFINED_glDisableIndexedEXT
+  void __stdcall GLee_Lazy_glDisableIndexedEXT(GLenum  target, GLuint  index)  {if (GLeeInit()) glDisableIndexedEXT(target, index);}
+  GLEEPFNGLDISABLEINDEXEDEXTPROC GLeeFuncPtr_glDisableIndexedEXT=GLee_Lazy_glDisableIndexedEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glIsEnabledIndexedEXT
+#define GLEE_C_DEFINED_glIsEnabledIndexedEXT
+  GLboolean __stdcall GLee_Lazy_glIsEnabledIndexedEXT(GLenum  target, GLuint  index)  {if (GLeeInit()) return glIsEnabledIndexedEXT(target, index); return (GLboolean)0;}
+  GLEEPFNGLISENABLEDINDEXEDEXTPROC GLeeFuncPtr_glIsEnabledIndexedEXT=GLee_Lazy_glIsEnabledIndexedEXT;
+#endif
+#endif 
+
+/* GL_NV_transform_feedback */
+
+#ifdef __GLEE_GL_NV_transform_feedback
+#ifndef GLEE_C_DEFINED_glBeginTransformFeedbackNV
+#define GLEE_C_DEFINED_glBeginTransformFeedbackNV
+  void __stdcall GLee_Lazy_glBeginTransformFeedbackNV(GLenum  primitiveMode)  {if (GLeeInit()) glBeginTransformFeedbackNV(primitiveMode);}
+  GLEEPFNGLBEGINTRANSFORMFEEDBACKNVPROC GLeeFuncPtr_glBeginTransformFeedbackNV=GLee_Lazy_glBeginTransformFeedbackNV;
+#endif
+#ifndef GLEE_C_DEFINED_glEndTransformFeedbackNV
+#define GLEE_C_DEFINED_glEndTransformFeedbackNV
+  void __stdcall GLee_Lazy_glEndTransformFeedbackNV(void)  {if (GLeeInit()) glEndTransformFeedbackNV();}
+  GLEEPFNGLENDTRANSFORMFEEDBACKNVPROC GLeeFuncPtr_glEndTransformFeedbackNV=GLee_Lazy_glEndTransformFeedbackNV;
+#endif
+#ifndef GLEE_C_DEFINED_glTransformFeedbackAttribsNV
+#define GLEE_C_DEFINED_glTransformFeedbackAttribsNV
+  void __stdcall GLee_Lazy_glTransformFeedbackAttribsNV(GLuint  count, const GLint * attribs, GLenum  bufferMode)  {if (GLeeInit()) glTransformFeedbackAttribsNV(count, attribs, bufferMode);}
+  GLEEPFNGLTRANSFORMFEEDBACKATTRIBSNVPROC GLeeFuncPtr_glTransformFeedbackAttribsNV=GLee_Lazy_glTransformFeedbackAttribsNV;
+#endif
+#ifndef GLEE_C_DEFINED_glBindBufferRangeNV
+#define GLEE_C_DEFINED_glBindBufferRangeNV
+  void __stdcall GLee_Lazy_glBindBufferRangeNV(GLenum  target, GLuint  index, GLuint  buffer, GLintptr  offset, GLsizeiptr  size)  {if (GLeeInit()) glBindBufferRangeNV(target, index, buffer, offset, size);}
+  GLEEPFNGLBINDBUFFERRANGENVPROC GLeeFuncPtr_glBindBufferRangeNV=GLee_Lazy_glBindBufferRangeNV;
+#endif
+#ifndef GLEE_C_DEFINED_glBindBufferOffsetNV
+#define GLEE_C_DEFINED_glBindBufferOffsetNV
+  void __stdcall GLee_Lazy_glBindBufferOffsetNV(GLenum  target, GLuint  index, GLuint  buffer, GLintptr  offset)  {if (GLeeInit()) glBindBufferOffsetNV(target, index, buffer, offset);}
+  GLEEPFNGLBINDBUFFEROFFSETNVPROC GLeeFuncPtr_glBindBufferOffsetNV=GLee_Lazy_glBindBufferOffsetNV;
+#endif
+#ifndef GLEE_C_DEFINED_glBindBufferBaseNV
+#define GLEE_C_DEFINED_glBindBufferBaseNV
+  void __stdcall GLee_Lazy_glBindBufferBaseNV(GLenum  target, GLuint  index, GLuint  buffer)  {if (GLeeInit()) glBindBufferBaseNV(target, index, buffer);}
+  GLEEPFNGLBINDBUFFERBASENVPROC GLeeFuncPtr_glBindBufferBaseNV=GLee_Lazy_glBindBufferBaseNV;
+#endif
+#ifndef GLEE_C_DEFINED_glTransformFeedbackVaryingsNV
+#define GLEE_C_DEFINED_glTransformFeedbackVaryingsNV
+  void __stdcall GLee_Lazy_glTransformFeedbackVaryingsNV(GLuint  program, GLsizei  count, const GLint * locations, GLenum  bufferMode)  {if (GLeeInit()) glTransformFeedbackVaryingsNV(program, count, locations, bufferMode);}
+  GLEEPFNGLTRANSFORMFEEDBACKVARYINGSNVPROC GLeeFuncPtr_glTransformFeedbackVaryingsNV=GLee_Lazy_glTransformFeedbackVaryingsNV;
+#endif
+#ifndef GLEE_C_DEFINED_glActiveVaryingNV
+#define GLEE_C_DEFINED_glActiveVaryingNV
+  void __stdcall GLee_Lazy_glActiveVaryingNV(GLuint  program, const GLchar * name)  {if (GLeeInit()) glActiveVaryingNV(program, name);}
+  GLEEPFNGLACTIVEVARYINGNVPROC GLeeFuncPtr_glActiveVaryingNV=GLee_Lazy_glActiveVaryingNV;
+#endif
+#ifndef GLEE_C_DEFINED_glGetVaryingLocationNV
+#define GLEE_C_DEFINED_glGetVaryingLocationNV
+  GLint __stdcall GLee_Lazy_glGetVaryingLocationNV(GLuint  program, const GLchar * name)  {if (GLeeInit()) return glGetVaryingLocationNV(program, name); return (GLint)0;}
+  GLEEPFNGLGETVARYINGLOCATIONNVPROC GLeeFuncPtr_glGetVaryingLocationNV=GLee_Lazy_glGetVaryingLocationNV;
+#endif
+#ifndef GLEE_C_DEFINED_glGetActiveVaryingNV
+#define GLEE_C_DEFINED_glGetActiveVaryingNV
+  void __stdcall GLee_Lazy_glGetActiveVaryingNV(GLuint  program, GLuint  index, GLsizei  bufSize, GLsizei * length, GLsizei * size, GLenum * type, GLchar * name)  {if (GLeeInit()) glGetActiveVaryingNV(program, index, bufSize, length, size, type, name);}
+  GLEEPFNGLGETACTIVEVARYINGNVPROC GLeeFuncPtr_glGetActiveVaryingNV=GLee_Lazy_glGetActiveVaryingNV;
+#endif
+#ifndef GLEE_C_DEFINED_glGetTransformFeedbackVaryingNV
+#define GLEE_C_DEFINED_glGetTransformFeedbackVaryingNV
+  void __stdcall GLee_Lazy_glGetTransformFeedbackVaryingNV(GLuint  program, GLuint  index, GLint * location)  {if (GLeeInit()) glGetTransformFeedbackVaryingNV(program, index, location);}
+  GLEEPFNGLGETTRANSFORMFEEDBACKVARYINGNVPROC GLeeFuncPtr_glGetTransformFeedbackVaryingNV=GLee_Lazy_glGetTransformFeedbackVaryingNV;
+#endif
+#ifndef GLEE_C_DEFINED_glTransformFeedbackStreamAttribsNV
+#define GLEE_C_DEFINED_glTransformFeedbackStreamAttribsNV
+  void __stdcall GLee_Lazy_glTransformFeedbackStreamAttribsNV(GLsizei  count, const GLint * attribs, GLsizei  nbuffers, const GLint * bufstreams, GLenum  bufferMode)  {if (GLeeInit()) glTransformFeedbackStreamAttribsNV(count, attribs, nbuffers, bufstreams, bufferMode);}
+  GLEEPFNGLTRANSFORMFEEDBACKSTREAMATTRIBSNVPROC GLeeFuncPtr_glTransformFeedbackStreamAttribsNV=GLee_Lazy_glTransformFeedbackStreamAttribsNV;
+#endif
+#endif 
+
+/* GL_EXT_bindable_uniform */
+
+#ifdef __GLEE_GL_EXT_bindable_uniform
+#ifndef GLEE_C_DEFINED_glUniformBufferEXT
+#define GLEE_C_DEFINED_glUniformBufferEXT
+  void __stdcall GLee_Lazy_glUniformBufferEXT(GLuint  program, GLint  location, GLuint  buffer)  {if (GLeeInit()) glUniformBufferEXT(program, location, buffer);}
+  GLEEPFNGLUNIFORMBUFFEREXTPROC GLeeFuncPtr_glUniformBufferEXT=GLee_Lazy_glUniformBufferEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glGetUniformBufferSizeEXT
+#define GLEE_C_DEFINED_glGetUniformBufferSizeEXT
+  GLint __stdcall GLee_Lazy_glGetUniformBufferSizeEXT(GLuint  program, GLint  location)  {if (GLeeInit()) return glGetUniformBufferSizeEXT(program, location); return (GLint)0;}
+  GLEEPFNGLGETUNIFORMBUFFERSIZEEXTPROC GLeeFuncPtr_glGetUniformBufferSizeEXT=GLee_Lazy_glGetUniformBufferSizeEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glGetUniformOffsetEXT
+#define GLEE_C_DEFINED_glGetUniformOffsetEXT
+  GLintptr __stdcall GLee_Lazy_glGetUniformOffsetEXT(GLuint  program, GLint  location)  {if (GLeeInit()) return glGetUniformOffsetEXT(program, location); return (GLintptr)0;}
+  GLEEPFNGLGETUNIFORMOFFSETEXTPROC GLeeFuncPtr_glGetUniformOffsetEXT=GLee_Lazy_glGetUniformOffsetEXT;
+#endif
+#endif 
+
+/* GL_EXT_texture_integer */
+
+#ifdef __GLEE_GL_EXT_texture_integer
+#ifndef GLEE_C_DEFINED_glTexParameterIivEXT
+#define GLEE_C_DEFINED_glTexParameterIivEXT
+  void __stdcall GLee_Lazy_glTexParameterIivEXT(GLenum  target, GLenum  pname, const GLint * params)  {if (GLeeInit()) glTexParameterIivEXT(target, pname, params);}
+  GLEEPFNGLTEXPARAMETERIIVEXTPROC GLeeFuncPtr_glTexParameterIivEXT=GLee_Lazy_glTexParameterIivEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glTexParameterIuivEXT
+#define GLEE_C_DEFINED_glTexParameterIuivEXT
+  void __stdcall GLee_Lazy_glTexParameterIuivEXT(GLenum  target, GLenum  pname, const GLuint * params)  {if (GLeeInit()) glTexParameterIuivEXT(target, pname, params);}
+  GLEEPFNGLTEXPARAMETERIUIVEXTPROC GLeeFuncPtr_glTexParameterIuivEXT=GLee_Lazy_glTexParameterIuivEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glGetTexParameterIivEXT
+#define GLEE_C_DEFINED_glGetTexParameterIivEXT
+  void __stdcall GLee_Lazy_glGetTexParameterIivEXT(GLenum  target, GLenum  pname, GLint * params)  {if (GLeeInit()) glGetTexParameterIivEXT(target, pname, params);}
+  GLEEPFNGLGETTEXPARAMETERIIVEXTPROC GLeeFuncPtr_glGetTexParameterIivEXT=GLee_Lazy_glGetTexParameterIivEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glGetTexParameterIuivEXT
+#define GLEE_C_DEFINED_glGetTexParameterIuivEXT
+  void __stdcall GLee_Lazy_glGetTexParameterIuivEXT(GLenum  target, GLenum  pname, GLuint * params)  {if (GLeeInit()) glGetTexParameterIuivEXT(target, pname, params);}
+  GLEEPFNGLGETTEXPARAMETERIUIVEXTPROC GLeeFuncPtr_glGetTexParameterIuivEXT=GLee_Lazy_glGetTexParameterIuivEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glClearColorIiEXT
+#define GLEE_C_DEFINED_glClearColorIiEXT
+  void __stdcall GLee_Lazy_glClearColorIiEXT(GLint  red, GLint  green, GLint  blue, GLint  alpha)  {if (GLeeInit()) glClearColorIiEXT(red, green, blue, alpha);}
+  GLEEPFNGLCLEARCOLORIIEXTPROC GLeeFuncPtr_glClearColorIiEXT=GLee_Lazy_glClearColorIiEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glClearColorIuiEXT
+#define GLEE_C_DEFINED_glClearColorIuiEXT
+  void __stdcall GLee_Lazy_glClearColorIuiEXT(GLuint  red, GLuint  green, GLuint  blue, GLuint  alpha)  {if (GLeeInit()) glClearColorIuiEXT(red, green, blue, alpha);}
+  GLEEPFNGLCLEARCOLORIUIEXTPROC GLeeFuncPtr_glClearColorIuiEXT=GLee_Lazy_glClearColorIuiEXT;
+#endif
+#endif 
+
+/* GL_GREMEDY_frame_terminator */
+
+#ifdef __GLEE_GL_GREMEDY_frame_terminator
+#ifndef GLEE_C_DEFINED_glFrameTerminatorGREMEDY
+#define GLEE_C_DEFINED_glFrameTerminatorGREMEDY
+  void __stdcall GLee_Lazy_glFrameTerminatorGREMEDY(void)  {if (GLeeInit()) glFrameTerminatorGREMEDY();}
+  GLEEPFNGLFRAMETERMINATORGREMEDYPROC GLeeFuncPtr_glFrameTerminatorGREMEDY=GLee_Lazy_glFrameTerminatorGREMEDY;
+#endif
+#endif 
+
+/* GL_NV_conditional_render */
+
+#ifdef __GLEE_GL_NV_conditional_render
+#ifndef GLEE_C_DEFINED_glBeginConditionalRenderNV
+#define GLEE_C_DEFINED_glBeginConditionalRenderNV
+  void __stdcall GLee_Lazy_glBeginConditionalRenderNV(GLuint  id, GLenum  mode)  {if (GLeeInit()) glBeginConditionalRenderNV(id, mode);}
+  GLEEPFNGLBEGINCONDITIONALRENDERNVPROC GLeeFuncPtr_glBeginConditionalRenderNV=GLee_Lazy_glBeginConditionalRenderNV;
+#endif
+#ifndef GLEE_C_DEFINED_glEndConditionalRenderNV
+#define GLEE_C_DEFINED_glEndConditionalRenderNV
+  void __stdcall GLee_Lazy_glEndConditionalRenderNV(void)  {if (GLeeInit()) glEndConditionalRenderNV();}
+  GLEEPFNGLENDCONDITIONALRENDERNVPROC GLeeFuncPtr_glEndConditionalRenderNV=GLee_Lazy_glEndConditionalRenderNV;
+#endif
+#endif 
+
+/* GL_NV_present_video */
+
+#ifdef __GLEE_GL_NV_present_video
+#ifndef GLEE_C_DEFINED_glPresentFrameKeyedNV
+#define GLEE_C_DEFINED_glPresentFrameKeyedNV
+  void __stdcall GLee_Lazy_glPresentFrameKeyedNV(GLuint  video_slot, GLuint64EXT  minPresentTime, GLuint  beginPresentTimeId, GLuint  presentDurationId, GLenum  type, GLenum  target0, GLuint  fill0, GLuint  key0, GLenum  target1, GLuint  fill1, GLuint  key1)  {if (GLeeInit()) glPresentFrameKeyedNV(video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0, key0, target1, fill1, key1);}
+  GLEEPFNGLPRESENTFRAMEKEYEDNVPROC GLeeFuncPtr_glPresentFrameKeyedNV=GLee_Lazy_glPresentFrameKeyedNV;
+#endif
+#ifndef GLEE_C_DEFINED_glPresentFrameDualFillNV
+#define GLEE_C_DEFINED_glPresentFrameDualFillNV
+  void __stdcall GLee_Lazy_glPresentFrameDualFillNV(GLuint  video_slot, GLuint64EXT  minPresentTime, GLuint  beginPresentTimeId, GLuint  presentDurationId, GLenum  type, GLenum  target0, GLuint  fill0, GLenum  target1, GLuint  fill1, GLenum  target2, GLuint  fill2, GLenum  target3, GLuint  fill3)  {if (GLeeInit()) glPresentFrameDualFillNV(video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0, target1, fill1, target2, fill2, target3, fill3);}
+  GLEEPFNGLPRESENTFRAMEDUALFILLNVPROC GLeeFuncPtr_glPresentFrameDualFillNV=GLee_Lazy_glPresentFrameDualFillNV;
+#endif
+#ifndef GLEE_C_DEFINED_glGetVideoivNV
+#define GLEE_C_DEFINED_glGetVideoivNV
+  void __stdcall GLee_Lazy_glGetVideoivNV(GLuint  video_slot, GLenum  pname, GLint * params)  {if (GLeeInit()) glGetVideoivNV(video_slot, pname, params);}
+  GLEEPFNGLGETVIDEOIVNVPROC GLeeFuncPtr_glGetVideoivNV=GLee_Lazy_glGetVideoivNV;
+#endif
+#ifndef GLEE_C_DEFINED_glGetVideouivNV
+#define GLEE_C_DEFINED_glGetVideouivNV
+  void __stdcall GLee_Lazy_glGetVideouivNV(GLuint  video_slot, GLenum  pname, GLuint * params)  {if (GLeeInit()) glGetVideouivNV(video_slot, pname, params);}
+  GLEEPFNGLGETVIDEOUIVNVPROC GLeeFuncPtr_glGetVideouivNV=GLee_Lazy_glGetVideouivNV;
+#endif
+#ifndef GLEE_C_DEFINED_glGetVideoi64vNV
+#define GLEE_C_DEFINED_glGetVideoi64vNV
+  void __stdcall GLee_Lazy_glGetVideoi64vNV(GLuint  video_slot, GLenum  pname, GLint64EXT * params)  {if (GLeeInit()) glGetVideoi64vNV(video_slot, pname, params);}
+  GLEEPFNGLGETVIDEOI64VNVPROC GLeeFuncPtr_glGetVideoi64vNV=GLee_Lazy_glGetVideoi64vNV;
+#endif
+#ifndef GLEE_C_DEFINED_glGetVideoui64vNV
+#define GLEE_C_DEFINED_glGetVideoui64vNV
+  void __stdcall GLee_Lazy_glGetVideoui64vNV(GLuint  video_slot, GLenum  pname, GLuint64EXT * params)  {if (GLeeInit()) glGetVideoui64vNV(video_slot, pname, params);}
+  GLEEPFNGLGETVIDEOUI64VNVPROC GLeeFuncPtr_glGetVideoui64vNV=GLee_Lazy_glGetVideoui64vNV;
+#endif
+#endif 
+
+/* GL_EXT_transform_feedback */
+
+#ifdef __GLEE_GL_EXT_transform_feedback
+#ifndef GLEE_C_DEFINED_glBeginTransformFeedbackEXT
+#define GLEE_C_DEFINED_glBeginTransformFeedbackEXT
+  void __stdcall GLee_Lazy_glBeginTransformFeedbackEXT(GLenum  primitiveMode)  {if (GLeeInit()) glBeginTransformFeedbackEXT(primitiveMode);}
+  GLEEPFNGLBEGINTRANSFORMFEEDBACKEXTPROC GLeeFuncPtr_glBeginTransformFeedbackEXT=GLee_Lazy_glBeginTransformFeedbackEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glEndTransformFeedbackEXT
+#define GLEE_C_DEFINED_glEndTransformFeedbackEXT
+  void __stdcall GLee_Lazy_glEndTransformFeedbackEXT(void)  {if (GLeeInit()) glEndTransformFeedbackEXT();}
+  GLEEPFNGLENDTRANSFORMFEEDBACKEXTPROC GLeeFuncPtr_glEndTransformFeedbackEXT=GLee_Lazy_glEndTransformFeedbackEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glBindBufferRangeEXT
+#define GLEE_C_DEFINED_glBindBufferRangeEXT
+  void __stdcall GLee_Lazy_glBindBufferRangeEXT(GLenum  target, GLuint  index, GLuint  buffer, GLintptr  offset, GLsizeiptr  size)  {if (GLeeInit()) glBindBufferRangeEXT(target, index, buffer, offset, size);}
+  GLEEPFNGLBINDBUFFERRANGEEXTPROC GLeeFuncPtr_glBindBufferRangeEXT=GLee_Lazy_glBindBufferRangeEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glBindBufferOffsetEXT
+#define GLEE_C_DEFINED_glBindBufferOffsetEXT
+  void __stdcall GLee_Lazy_glBindBufferOffsetEXT(GLenum  target, GLuint  index, GLuint  buffer, GLintptr  offset)  {if (GLeeInit()) glBindBufferOffsetEXT(target, index, buffer, offset);}
+  GLEEPFNGLBINDBUFFEROFFSETEXTPROC GLeeFuncPtr_glBindBufferOffsetEXT=GLee_Lazy_glBindBufferOffsetEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glBindBufferBaseEXT
+#define GLEE_C_DEFINED_glBindBufferBaseEXT
+  void __stdcall GLee_Lazy_glBindBufferBaseEXT(GLenum  target, GLuint  index, GLuint  buffer)  {if (GLeeInit()) glBindBufferBaseEXT(target, index, buffer);}
+  GLEEPFNGLBINDBUFFERBASEEXTPROC GLeeFuncPtr_glBindBufferBaseEXT=GLee_Lazy_glBindBufferBaseEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glTransformFeedbackVaryingsEXT
+#define GLEE_C_DEFINED_glTransformFeedbackVaryingsEXT
+  void __stdcall GLee_Lazy_glTransformFeedbackVaryingsEXT(GLuint  program, GLsizei  count, const GLchar* * varyings, GLenum  bufferMode)  {if (GLeeInit()) glTransformFeedbackVaryingsEXT(program, count, varyings, bufferMode);}
+  GLEEPFNGLTRANSFORMFEEDBACKVARYINGSEXTPROC GLeeFuncPtr_glTransformFeedbackVaryingsEXT=GLee_Lazy_glTransformFeedbackVaryingsEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glGetTransformFeedbackVaryingEXT
+#define GLEE_C_DEFINED_glGetTransformFeedbackVaryingEXT
+  void __stdcall GLee_Lazy_glGetTransformFeedbackVaryingEXT(GLuint  program, GLuint  index, GLsizei  bufSize, GLsizei * length, GLsizei * size, GLenum * type, GLchar * name)  {if (GLeeInit()) glGetTransformFeedbackVaryingEXT(program, index, bufSize, length, size, type, name);}
+  GLEEPFNGLGETTRANSFORMFEEDBACKVARYINGEXTPROC GLeeFuncPtr_glGetTransformFeedbackVaryingEXT=GLee_Lazy_glGetTransformFeedbackVaryingEXT;
+#endif
+#endif 
+
+/* GL_EXT_direct_state_access */
+
+#ifdef __GLEE_GL_EXT_direct_state_access
+#ifndef GLEE_C_DEFINED_glClientAttribDefaultEXT
+#define GLEE_C_DEFINED_glClientAttribDefaultEXT
+  void __stdcall GLee_Lazy_glClientAttribDefaultEXT(GLbitfield  mask)  {if (GLeeInit()) glClientAttribDefaultEXT(mask);}
+  GLEEPFNGLCLIENTATTRIBDEFAULTEXTPROC GLeeFuncPtr_glClientAttribDefaultEXT=GLee_Lazy_glClientAttribDefaultEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glPushClientAttribDefaultEXT
+#define GLEE_C_DEFINED_glPushClientAttribDefaultEXT
+  void __stdcall GLee_Lazy_glPushClientAttribDefaultEXT(GLbitfield  mask)  {if (GLeeInit()) glPushClientAttribDefaultEXT(mask);}
+  GLEEPFNGLPUSHCLIENTATTRIBDEFAULTEXTPROC GLeeFuncPtr_glPushClientAttribDefaultEXT=GLee_Lazy_glPushClientAttribDefaultEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glMatrixLoadfEXT
+#define GLEE_C_DEFINED_glMatrixLoadfEXT
+  void __stdcall GLee_Lazy_glMatrixLoadfEXT(GLenum  mode, const GLfloat * m)  {if (GLeeInit()) glMatrixLoadfEXT(mode, m);}
+  GLEEPFNGLMATRIXLOADFEXTPROC GLeeFuncPtr_glMatrixLoadfEXT=GLee_Lazy_glMatrixLoadfEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glMatrixLoaddEXT
+#define GLEE_C_DEFINED_glMatrixLoaddEXT
+  void __stdcall GLee_Lazy_glMatrixLoaddEXT(GLenum  mode, const GLdouble * m)  {if (GLeeInit()) glMatrixLoaddEXT(mode, m);}
+  GLEEPFNGLMATRIXLOADDEXTPROC GLeeFuncPtr_glMatrixLoaddEXT=GLee_Lazy_glMatrixLoaddEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glMatrixMultfEXT
+#define GLEE_C_DEFINED_glMatrixMultfEXT
+  void __stdcall GLee_Lazy_glMatrixMultfEXT(GLenum  mode, const GLfloat * m)  {if (GLeeInit()) glMatrixMultfEXT(mode, m);}
+  GLEEPFNGLMATRIXMULTFEXTPROC GLeeFuncPtr_glMatrixMultfEXT=GLee_Lazy_glMatrixMultfEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glMatrixMultdEXT
+#define GLEE_C_DEFINED_glMatrixMultdEXT
+  void __stdcall GLee_Lazy_glMatrixMultdEXT(GLenum  mode, const GLdouble * m)  {if (GLeeInit()) glMatrixMultdEXT(mode, m);}
+  GLEEPFNGLMATRIXMULTDEXTPROC GLeeFuncPtr_glMatrixMultdEXT=GLee_Lazy_glMatrixMultdEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glMatrixLoadIdentityEXT
+#define GLEE_C_DEFINED_glMatrixLoadIdentityEXT
+  void __stdcall GLee_Lazy_glMatrixLoadIdentityEXT(GLenum  mode)  {if (GLeeInit()) glMatrixLoadIdentityEXT(mode);}
+  GLEEPFNGLMATRIXLOADIDENTITYEXTPROC GLeeFuncPtr_glMatrixLoadIdentityEXT=GLee_Lazy_glMatrixLoadIdentityEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glMatrixRotatefEXT
+#define GLEE_C_DEFINED_glMatrixRotatefEXT
+  void __stdcall GLee_Lazy_glMatrixRotatefEXT(GLenum  mode, GLfloat  angle, GLfloat  x, GLfloat  y, GLfloat  z)  {if (GLeeInit()) glMatrixRotatefEXT(mode, angle, x, y, z);}
+  GLEEPFNGLMATRIXROTATEFEXTPROC GLeeFuncPtr_glMatrixRotatefEXT=GLee_Lazy_glMatrixRotatefEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glMatrixRotatedEXT
+#define GLEE_C_DEFINED_glMatrixRotatedEXT
+  void __stdcall GLee_Lazy_glMatrixRotatedEXT(GLenum  mode, GLdouble  angle, GLdouble  x, GLdouble  y, GLdouble  z)  {if (GLeeInit()) glMatrixRotatedEXT(mode, angle, x, y, z);}
+  GLEEPFNGLMATRIXROTATEDEXTPROC GLeeFuncPtr_glMatrixRotatedEXT=GLee_Lazy_glMatrixRotatedEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glMatrixScalefEXT
+#define GLEE_C_DEFINED_glMatrixScalefEXT
+  void __stdcall GLee_Lazy_glMatrixScalefEXT(GLenum  mode, GLfloat  x, GLfloat  y, GLfloat  z)  {if (GLeeInit()) glMatrixScalefEXT(mode, x, y, z);}
+  GLEEPFNGLMATRIXSCALEFEXTPROC GLeeFuncPtr_glMatrixScalefEXT=GLee_Lazy_glMatrixScalefEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glMatrixScaledEXT
+#define GLEE_C_DEFINED_glMatrixScaledEXT
+  void __stdcall GLee_Lazy_glMatrixScaledEXT(GLenum  mode, GLdouble  x, GLdouble  y, GLdouble  z)  {if (GLeeInit()) glMatrixScaledEXT(mode, x, y, z);}
+  GLEEPFNGLMATRIXSCALEDEXTPROC GLeeFuncPtr_glMatrixScaledEXT=GLee_Lazy_glMatrixScaledEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glMatrixTranslatefEXT
+#define GLEE_C_DEFINED_glMatrixTranslatefEXT
+  void __stdcall GLee_Lazy_glMatrixTranslatefEXT(GLenum  mode, GLfloat  x, GLfloat  y, GLfloat  z)  {if (GLeeInit()) glMatrixTranslatefEXT(mode, x, y, z);}
+  GLEEPFNGLMATRIXTRANSLATEFEXTPROC GLeeFuncPtr_glMatrixTranslatefEXT=GLee_Lazy_glMatrixTranslatefEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glMatrixTranslatedEXT
+#define GLEE_C_DEFINED_glMatrixTranslatedEXT
+  void __stdcall GLee_Lazy_glMatrixTranslatedEXT(GLenum  mode, GLdouble  x, GLdouble  y, GLdouble  z)  {if (GLeeInit()) glMatrixTranslatedEXT(mode, x, y, z);}
+  GLEEPFNGLMATRIXTRANSLATEDEXTPROC GLeeFuncPtr_glMatrixTranslatedEXT=GLee_Lazy_glMatrixTranslatedEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glMatrixFrustumEXT
+#define GLEE_C_DEFINED_glMatrixFrustumEXT
+  void __stdcall GLee_Lazy_glMatrixFrustumEXT(GLenum  mode, GLdouble  left, GLdouble  right, GLdouble  bottom, GLdouble  top, GLdouble  zNear, GLdouble  zFar)  {if (GLeeInit()) glMatrixFrustumEXT(mode, left, right, bottom, top, zNear, zFar);}
+  GLEEPFNGLMATRIXFRUSTUMEXTPROC GLeeFuncPtr_glMatrixFrustumEXT=GLee_Lazy_glMatrixFrustumEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glMatrixOrthoEXT
+#define GLEE_C_DEFINED_glMatrixOrthoEXT
+  void __stdcall GLee_Lazy_glMatrixOrthoEXT(GLenum  mode, GLdouble  left, GLdouble  right, GLdouble  bottom, GLdouble  top, GLdouble  zNear, GLdouble  zFar)  {if (GLeeInit()) glMatrixOrthoEXT(mode, left, right, bottom, top, zNear, zFar);}
+  GLEEPFNGLMATRIXORTHOEXTPROC GLeeFuncPtr_glMatrixOrthoEXT=GLee_Lazy_glMatrixOrthoEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glMatrixPopEXT
+#define GLEE_C_DEFINED_glMatrixPopEXT
+  void __stdcall GLee_Lazy_glMatrixPopEXT(GLenum  mode)  {if (GLeeInit()) glMatrixPopEXT(mode);}
+  GLEEPFNGLMATRIXPOPEXTPROC GLeeFuncPtr_glMatrixPopEXT=GLee_Lazy_glMatrixPopEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glMatrixPushEXT
+#define GLEE_C_DEFINED_glMatrixPushEXT
+  void __stdcall GLee_Lazy_glMatrixPushEXT(GLenum  mode)  {if (GLeeInit()) glMatrixPushEXT(mode);}
+  GLEEPFNGLMATRIXPUSHEXTPROC GLeeFuncPtr_glMatrixPushEXT=GLee_Lazy_glMatrixPushEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glMatrixLoadTransposefEXT
+#define GLEE_C_DEFINED_glMatrixLoadTransposefEXT
+  void __stdcall GLee_Lazy_glMatrixLoadTransposefEXT(GLenum  mode, const GLfloat * m)  {if (GLeeInit()) glMatrixLoadTransposefEXT(mode, m);}
+  GLEEPFNGLMATRIXLOADTRANSPOSEFEXTPROC GLeeFuncPtr_glMatrixLoadTransposefEXT=GLee_Lazy_glMatrixLoadTransposefEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glMatrixLoadTransposedEXT
+#define GLEE_C_DEFINED_glMatrixLoadTransposedEXT
+  void __stdcall GLee_Lazy_glMatrixLoadTransposedEXT(GLenum  mode, const GLdouble * m)  {if (GLeeInit()) glMatrixLoadTransposedEXT(mode, m);}
+  GLEEPFNGLMATRIXLOADTRANSPOSEDEXTPROC GLeeFuncPtr_glMatrixLoadTransposedEXT=GLee_Lazy_glMatrixLoadTransposedEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glMatrixMultTransposefEXT
+#define GLEE_C_DEFINED_glMatrixMultTransposefEXT
+  void __stdcall GLee_Lazy_glMatrixMultTransposefEXT(GLenum  mode, const GLfloat * m)  {if (GLeeInit()) glMatrixMultTransposefEXT(mode, m);}
+  GLEEPFNGLMATRIXMULTTRANSPOSEFEXTPROC GLeeFuncPtr_glMatrixMultTransposefEXT=GLee_Lazy_glMatrixMultTransposefEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glMatrixMultTransposedEXT
+#define GLEE_C_DEFINED_glMatrixMultTransposedEXT
+  void __stdcall GLee_Lazy_glMatrixMultTransposedEXT(GLenum  mode, const GLdouble * m)  {if (GLeeInit()) glMatrixMultTransposedEXT(mode, m);}
+  GLEEPFNGLMATRIXMULTTRANSPOSEDEXTPROC GLeeFuncPtr_glMatrixMultTransposedEXT=GLee_Lazy_glMatrixMultTransposedEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glTextureParameterfEXT
+#define GLEE_C_DEFINED_glTextureParameterfEXT
+  void __stdcall GLee_Lazy_glTextureParameterfEXT(GLuint  texture, GLenum  target, GLenum  pname, GLfloat  param)  {if (GLeeInit()) glTextureParameterfEXT(texture, target, pname, param);}
+  GLEEPFNGLTEXTUREPARAMETERFEXTPROC GLeeFuncPtr_glTextureParameterfEXT=GLee_Lazy_glTextureParameterfEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glTextureParameterfvEXT
+#define GLEE_C_DEFINED_glTextureParameterfvEXT
+  void __stdcall GLee_Lazy_glTextureParameterfvEXT(GLuint  texture, GLenum  target, GLenum  pname, const GLfloat * params)  {if (GLeeInit()) glTextureParameterfvEXT(texture, target, pname, params);}
+  GLEEPFNGLTEXTUREPARAMETERFVEXTPROC GLeeFuncPtr_glTextureParameterfvEXT=GLee_Lazy_glTextureParameterfvEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glTextureParameteriEXT
+#define GLEE_C_DEFINED_glTextureParameteriEXT
+  void __stdcall GLee_Lazy_glTextureParameteriEXT(GLuint  texture, GLenum  target, GLenum  pname, GLint  param)  {if (GLeeInit()) glTextureParameteriEXT(texture, target, pname, param);}
+  GLEEPFNGLTEXTUREPARAMETERIEXTPROC GLeeFuncPtr_glTextureParameteriEXT=GLee_Lazy_glTextureParameteriEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glTextureParameterivEXT
+#define GLEE_C_DEFINED_glTextureParameterivEXT
+  void __stdcall GLee_Lazy_glTextureParameterivEXT(GLuint  texture, GLenum  target, GLenum  pname, const GLint * params)  {if (GLeeInit()) glTextureParameterivEXT(texture, target, pname, params);}
+  GLEEPFNGLTEXTUREPARAMETERIVEXTPROC GLeeFuncPtr_glTextureParameterivEXT=GLee_Lazy_glTextureParameterivEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glTextureImage1DEXT
+#define GLEE_C_DEFINED_glTextureImage1DEXT
+  void __stdcall GLee_Lazy_glTextureImage1DEXT(GLuint  texture, GLenum  target, GLint  level, GLenum  internalformat, GLsizei  width, GLint  border, GLenum  format, GLenum  type, const GLvoid * pixels)  {if (GLeeInit()) glTextureImage1DEXT(texture, target, level, internalformat, width, border, format, type, pixels);}
+  GLEEPFNGLTEXTUREIMAGE1DEXTPROC GLeeFuncPtr_glTextureImage1DEXT=GLee_Lazy_glTextureImage1DEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glTextureImage2DEXT
+#define GLEE_C_DEFINED_glTextureImage2DEXT
+  void __stdcall GLee_Lazy_glTextureImage2DEXT(GLuint  texture, GLenum  target, GLint  level, GLenum  internalformat, GLsizei  width, GLsizei  height, GLint  border, GLenum  format, GLenum  type, const GLvoid * pixels)  {if (GLeeInit()) glTextureImage2DEXT(texture, target, level, internalformat, width, height, border, format, type, pixels);}
+  GLEEPFNGLTEXTUREIMAGE2DEXTPROC GLeeFuncPtr_glTextureImage2DEXT=GLee_Lazy_glTextureImage2DEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glTextureSubImage1DEXT
+#define GLEE_C_DEFINED_glTextureSubImage1DEXT
+  void __stdcall GLee_Lazy_glTextureSubImage1DEXT(GLuint  texture, GLenum  target, GLint  level, GLint  xoffset, GLsizei  width, GLenum  format, GLenum  type, const GLvoid * pixels)  {if (GLeeInit()) glTextureSubImage1DEXT(texture, target, level, xoffset, width, format, type, pixels);}
+  GLEEPFNGLTEXTURESUBIMAGE1DEXTPROC GLeeFuncPtr_glTextureSubImage1DEXT=GLee_Lazy_glTextureSubImage1DEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glTextureSubImage2DEXT
+#define GLEE_C_DEFINED_glTextureSubImage2DEXT
+  void __stdcall GLee_Lazy_glTextureSubImage2DEXT(GLuint  texture, GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLsizei  width, GLsizei  height, GLenum  format, GLenum  type, const GLvoid * pixels)  {if (GLeeInit()) glTextureSubImage2DEXT(texture, target, level, xoffset, yoffset, width, height, format, type, pixels);}
+  GLEEPFNGLTEXTURESUBIMAGE2DEXTPROC GLeeFuncPtr_glTextureSubImage2DEXT=GLee_Lazy_glTextureSubImage2DEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glCopyTextureImage1DEXT
+#define GLEE_C_DEFINED_glCopyTextureImage1DEXT
+  void __stdcall GLee_Lazy_glCopyTextureImage1DEXT(GLuint  texture, GLenum  target, GLint  level, GLenum  internalformat, GLint  x, GLint  y, GLsizei  width, GLint  border)  {if (GLeeInit()) glCopyTextureImage1DEXT(texture, target, level, internalformat, x, y, width, border);}
+  GLEEPFNGLCOPYTEXTUREIMAGE1DEXTPROC GLeeFuncPtr_glCopyTextureImage1DEXT=GLee_Lazy_glCopyTextureImage1DEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glCopyTextureImage2DEXT
+#define GLEE_C_DEFINED_glCopyTextureImage2DEXT
+  void __stdcall GLee_Lazy_glCopyTextureImage2DEXT(GLuint  texture, GLenum  target, GLint  level, GLenum  internalformat, GLint  x, GLint  y, GLsizei  width, GLsizei  height, GLint  border)  {if (GLeeInit()) glCopyTextureImage2DEXT(texture, target, level, internalformat, x, y, width, height, border);}
+  GLEEPFNGLCOPYTEXTUREIMAGE2DEXTPROC GLeeFuncPtr_glCopyTextureImage2DEXT=GLee_Lazy_glCopyTextureImage2DEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glCopyTextureSubImage1DEXT
+#define GLEE_C_DEFINED_glCopyTextureSubImage1DEXT
+  void __stdcall GLee_Lazy_glCopyTextureSubImage1DEXT(GLuint  texture, GLenum  target, GLint  level, GLint  xoffset, GLint  x, GLint  y, GLsizei  width)  {if (GLeeInit()) glCopyTextureSubImage1DEXT(texture, target, level, xoffset, x, y, width);}
+  GLEEPFNGLCOPYTEXTURESUBIMAGE1DEXTPROC GLeeFuncPtr_glCopyTextureSubImage1DEXT=GLee_Lazy_glCopyTextureSubImage1DEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glCopyTextureSubImage2DEXT
+#define GLEE_C_DEFINED_glCopyTextureSubImage2DEXT
+  void __stdcall GLee_Lazy_glCopyTextureSubImage2DEXT(GLuint  texture, GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLint  x, GLint  y, GLsizei  width, GLsizei  height)  {if (GLeeInit()) glCopyTextureSubImage2DEXT(texture, target, level, xoffset, yoffset, x, y, width, height);}
+  GLEEPFNGLCOPYTEXTURESUBIMAGE2DEXTPROC GLeeFuncPtr_glCopyTextureSubImage2DEXT=GLee_Lazy_glCopyTextureSubImage2DEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glGetTextureImageEXT
+#define GLEE_C_DEFINED_glGetTextureImageEXT
+  void __stdcall GLee_Lazy_glGetTextureImageEXT(GLuint  texture, GLenum  target, GLint  level, GLenum  format, GLenum  type, GLvoid * pixels)  {if (GLeeInit()) glGetTextureImageEXT(texture, target, level, format, type, pixels);}
+  GLEEPFNGLGETTEXTUREIMAGEEXTPROC GLeeFuncPtr_glGetTextureImageEXT=GLee_Lazy_glGetTextureImageEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glGetTextureParameterfvEXT
+#define GLEE_C_DEFINED_glGetTextureParameterfvEXT
+  void __stdcall GLee_Lazy_glGetTextureParameterfvEXT(GLuint  texture, GLenum  target, GLenum  pname, GLfloat * params)  {if (GLeeInit()) glGetTextureParameterfvEXT(texture, target, pname, params);}
+  GLEEPFNGLGETTEXTUREPARAMETERFVEXTPROC GLeeFuncPtr_glGetTextureParameterfvEXT=GLee_Lazy_glGetTextureParameterfvEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glGetTextureParameterivEXT
+#define GLEE_C_DEFINED_glGetTextureParameterivEXT
+  void __stdcall GLee_Lazy_glGetTextureParameterivEXT(GLuint  texture, GLenum  target, GLenum  pname, GLint * params)  {if (GLeeInit()) glGetTextureParameterivEXT(texture, target, pname, params);}
+  GLEEPFNGLGETTEXTUREPARAMETERIVEXTPROC GLeeFuncPtr_glGetTextureParameterivEXT=GLee_Lazy_glGetTextureParameterivEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glGetTextureLevelParameterfvEXT
+#define GLEE_C_DEFINED_glGetTextureLevelParameterfvEXT
+  void __stdcall GLee_Lazy_glGetTextureLevelParameterfvEXT(GLuint  texture, GLenum  target, GLint  level, GLenum  pname, GLfloat * params)  {if (GLeeInit()) glGetTextureLevelParameterfvEXT(texture, target, level, pname, params);}
+  GLEEPFNGLGETTEXTURELEVELPARAMETERFVEXTPROC GLeeFuncPtr_glGetTextureLevelParameterfvEXT=GLee_Lazy_glGetTextureLevelParameterfvEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glGetTextureLevelParameterivEXT
+#define GLEE_C_DEFINED_glGetTextureLevelParameterivEXT
+  void __stdcall GLee_Lazy_glGetTextureLevelParameterivEXT(GLuint  texture, GLenum  target, GLint  level, GLenum  pname, GLint * params)  {if (GLeeInit()) glGetTextureLevelParameterivEXT(texture, target, level, pname, params);}
+  GLEEPFNGLGETTEXTURELEVELPARAMETERIVEXTPROC GLeeFuncPtr_glGetTextureLevelParameterivEXT=GLee_Lazy_glGetTextureLevelParameterivEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glTextureImage3DEXT
+#define GLEE_C_DEFINED_glTextureImage3DEXT
+  void __stdcall GLee_Lazy_glTextureImage3DEXT(GLuint  texture, GLenum  target, GLint  level, GLenum  internalformat, GLsizei  width, GLsizei  height, GLsizei  depth, GLint  border, GLenum  format, GLenum  type, const GLvoid * pixels)  {if (GLeeInit()) glTextureImage3DEXT(texture, target, level, internalformat, width, height, depth, border, format, type, pixels);}
+  GLEEPFNGLTEXTUREIMAGE3DEXTPROC GLeeFuncPtr_glTextureImage3DEXT=GLee_Lazy_glTextureImage3DEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glTextureSubImage3DEXT
+#define GLEE_C_DEFINED_glTextureSubImage3DEXT
+  void __stdcall GLee_Lazy_glTextureSubImage3DEXT(GLuint  texture, GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLint  zoffset, GLsizei  width, GLsizei  height, GLsizei  depth, GLenum  format, GLenum  type, const GLvoid * pixels)  {if (GLeeInit()) glTextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);}
+  GLEEPFNGLTEXTURESUBIMAGE3DEXTPROC GLeeFuncPtr_glTextureSubImage3DEXT=GLee_Lazy_glTextureSubImage3DEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glCopyTextureSubImage3DEXT
+#define GLEE_C_DEFINED_glCopyTextureSubImage3DEXT
+  void __stdcall GLee_Lazy_glCopyTextureSubImage3DEXT(GLuint  texture, GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLint  zoffset, GLint  x, GLint  y, GLsizei  width, GLsizei  height)  {if (GLeeInit()) glCopyTextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, x, y, width, height);}
+  GLEEPFNGLCOPYTEXTURESUBIMAGE3DEXTPROC GLeeFuncPtr_glCopyTextureSubImage3DEXT=GLee_Lazy_glCopyTextureSubImage3DEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glMultiTexParameterfEXT
+#define GLEE_C_DEFINED_glMultiTexParameterfEXT
+  void __stdcall GLee_Lazy_glMultiTexParameterfEXT(GLenum  texunit, GLenum  target, GLenum  pname, GLfloat  param)  {if (GLeeInit()) glMultiTexParameterfEXT(texunit, target, pname, param);}
+  GLEEPFNGLMULTITEXPARAMETERFEXTPROC GLeeFuncPtr_glMultiTexParameterfEXT=GLee_Lazy_glMultiTexParameterfEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glMultiTexParameterfvEXT
+#define GLEE_C_DEFINED_glMultiTexParameterfvEXT
+  void __stdcall GLee_Lazy_glMultiTexParameterfvEXT(GLenum  texunit, GLenum  target, GLenum  pname, const GLfloat * params)  {if (GLeeInit()) glMultiTexParameterfvEXT(texunit, target, pname, params);}
+  GLEEPFNGLMULTITEXPARAMETERFVEXTPROC GLeeFuncPtr_glMultiTexParameterfvEXT=GLee_Lazy_glMultiTexParameterfvEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glMultiTexParameteriEXT
+#define GLEE_C_DEFINED_glMultiTexParameteriEXT
+  void __stdcall GLee_Lazy_glMultiTexParameteriEXT(GLenum  texunit, GLenum  target, GLenum  pname, GLint  param)  {if (GLeeInit()) glMultiTexParameteriEXT(texunit, target, pname, param);}
+  GLEEPFNGLMULTITEXPARAMETERIEXTPROC GLeeFuncPtr_glMultiTexParameteriEXT=GLee_Lazy_glMultiTexParameteriEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glMultiTexParameterivEXT
+#define GLEE_C_DEFINED_glMultiTexParameterivEXT
+  void __stdcall GLee_Lazy_glMultiTexParameterivEXT(GLenum  texunit, GLenum  target, GLenum  pname, const GLint * params)  {if (GLeeInit()) glMultiTexParameterivEXT(texunit, target, pname, params);}
+  GLEEPFNGLMULTITEXPARAMETERIVEXTPROC GLeeFuncPtr_glMultiTexParameterivEXT=GLee_Lazy_glMultiTexParameterivEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glMultiTexImage1DEXT
+#define GLEE_C_DEFINED_glMultiTexImage1DEXT
+  void __stdcall GLee_Lazy_glMultiTexImage1DEXT(GLenum  texunit, GLenum  target, GLint  level, GLenum  internalformat, GLsizei  width, GLint  border, GLenum  format, GLenum  type, const GLvoid * pixels)  {if (GLeeInit()) glMultiTexImage1DEXT(texunit, target, level, internalformat, width, border, format, type, pixels);}
+  GLEEPFNGLMULTITEXIMAGE1DEXTPROC GLeeFuncPtr_glMultiTexImage1DEXT=GLee_Lazy_glMultiTexImage1DEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glMultiTexImage2DEXT
+#define GLEE_C_DEFINED_glMultiTexImage2DEXT
+  void __stdcall GLee_Lazy_glMultiTexImage2DEXT(GLenum  texunit, GLenum  target, GLint  level, GLenum  internalformat, GLsizei  width, GLsizei  height, GLint  border, GLenum  format, GLenum  type, const GLvoid * pixels)  {if (GLeeInit()) glMultiTexImage2DEXT(texunit, target, level, internalformat, width, height, border, format, type, pixels);}
+  GLEEPFNGLMULTITEXIMAGE2DEXTPROC GLeeFuncPtr_glMultiTexImage2DEXT=GLee_Lazy_glMultiTexImage2DEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glMultiTexSubImage1DEXT
+#define GLEE_C_DEFINED_glMultiTexSubImage1DEXT
+  void __stdcall GLee_Lazy_glMultiTexSubImage1DEXT(GLenum  texunit, GLenum  target, GLint  level, GLint  xoffset, GLsizei  width, GLenum  format, GLenum  type, const GLvoid * pixels)  {if (GLeeInit()) glMultiTexSubImage1DEXT(texunit, target, level, xoffset, width, format, type, pixels);}
+  GLEEPFNGLMULTITEXSUBIMAGE1DEXTPROC GLeeFuncPtr_glMultiTexSubImage1DEXT=GLee_Lazy_glMultiTexSubImage1DEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glMultiTexSubImage2DEXT
+#define GLEE_C_DEFINED_glMultiTexSubImage2DEXT
+  void __stdcall GLee_Lazy_glMultiTexSubImage2DEXT(GLenum  texunit, GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLsizei  width, GLsizei  height, GLenum  format, GLenum  type, const GLvoid * pixels)  {if (GLeeInit()) glMultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, width, height, format, type, pixels);}
+  GLEEPFNGLMULTITEXSUBIMAGE2DEXTPROC GLeeFuncPtr_glMultiTexSubImage2DEXT=GLee_Lazy_glMultiTexSubImage2DEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glCopyMultiTexImage1DEXT
+#define GLEE_C_DEFINED_glCopyMultiTexImage1DEXT
+  void __stdcall GLee_Lazy_glCopyMultiTexImage1DEXT(GLenum  texunit, GLenum  target, GLint  level, GLenum  internalformat, GLint  x, GLint  y, GLsizei  width, GLint  border)  {if (GLeeInit()) glCopyMultiTexImage1DEXT(texunit, target, level, internalformat, x, y, width, border);}
+  GLEEPFNGLCOPYMULTITEXIMAGE1DEXTPROC GLeeFuncPtr_glCopyMultiTexImage1DEXT=GLee_Lazy_glCopyMultiTexImage1DEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glCopyMultiTexImage2DEXT
+#define GLEE_C_DEFINED_glCopyMultiTexImage2DEXT
+  void __stdcall GLee_Lazy_glCopyMultiTexImage2DEXT(GLenum  texunit, GLenum  target, GLint  level, GLenum  internalformat, GLint  x, GLint  y, GLsizei  width, GLsizei  height, GLint  border)  {if (GLeeInit()) glCopyMultiTexImage2DEXT(texunit, target, level, internalformat, x, y, width, height, border);}
+  GLEEPFNGLCOPYMULTITEXIMAGE2DEXTPROC GLeeFuncPtr_glCopyMultiTexImage2DEXT=GLee_Lazy_glCopyMultiTexImage2DEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glCopyMultiTexSubImage1DEXT
+#define GLEE_C_DEFINED_glCopyMultiTexSubImage1DEXT
+  void __stdcall GLee_Lazy_glCopyMultiTexSubImage1DEXT(GLenum  texunit, GLenum  target, GLint  level, GLint  xoffset, GLint  x, GLint  y, GLsizei  width)  {if (GLeeInit()) glCopyMultiTexSubImage1DEXT(texunit, target, level, xoffset, x, y, width);}
+  GLEEPFNGLCOPYMULTITEXSUBIMAGE1DEXTPROC GLeeFuncPtr_glCopyMultiTexSubImage1DEXT=GLee_Lazy_glCopyMultiTexSubImage1DEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glCopyMultiTexSubImage2DEXT
+#define GLEE_C_DEFINED_glCopyMultiTexSubImage2DEXT
+  void __stdcall GLee_Lazy_glCopyMultiTexSubImage2DEXT(GLenum  texunit, GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLint  x, GLint  y, GLsizei  width, GLsizei  height)  {if (GLeeInit()) glCopyMultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, x, y, width, height);}
+  GLEEPFNGLCOPYMULTITEXSUBIMAGE2DEXTPROC GLeeFuncPtr_glCopyMultiTexSubImage2DEXT=GLee_Lazy_glCopyMultiTexSubImage2DEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glGetMultiTexImageEXT
+#define GLEE_C_DEFINED_glGetMultiTexImageEXT
+  void __stdcall GLee_Lazy_glGetMultiTexImageEXT(GLenum  texunit, GLenum  target, GLint  level, GLenum  format, GLenum  type, GLvoid * pixels)  {if (GLeeInit()) glGetMultiTexImageEXT(texunit, target, level, format, type, pixels);}
+  GLEEPFNGLGETMULTITEXIMAGEEXTPROC GLeeFuncPtr_glGetMultiTexImageEXT=GLee_Lazy_glGetMultiTexImageEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glGetMultiTexParameterfvEXT
+#define GLEE_C_DEFINED_glGetMultiTexParameterfvEXT
+  void __stdcall GLee_Lazy_glGetMultiTexParameterfvEXT(GLenum  texunit, GLenum  target, GLenum  pname, GLfloat * params)  {if (GLeeInit()) glGetMultiTexParameterfvEXT(texunit, target, pname, params);}
+  GLEEPFNGLGETMULTITEXPARAMETERFVEXTPROC GLeeFuncPtr_glGetMultiTexParameterfvEXT=GLee_Lazy_glGetMultiTexParameterfvEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glGetMultiTexParameterivEXT
+#define GLEE_C_DEFINED_glGetMultiTexParameterivEXT
+  void __stdcall GLee_Lazy_glGetMultiTexParameterivEXT(GLenum  texunit, GLenum  target, GLenum  pname, GLint * params)  {if (GLeeInit()) glGetMultiTexParameterivEXT(texunit, target, pname, params);}
+  GLEEPFNGLGETMULTITEXPARAMETERIVEXTPROC GLeeFuncPtr_glGetMultiTexParameterivEXT=GLee_Lazy_glGetMultiTexParameterivEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glGetMultiTexLevelParameterfvEXT
+#define GLEE_C_DEFINED_glGetMultiTexLevelParameterfvEXT
+  void __stdcall GLee_Lazy_glGetMultiTexLevelParameterfvEXT(GLenum  texunit, GLenum  target, GLint  level, GLenum  pname, GLfloat * params)  {if (GLeeInit()) glGetMultiTexLevelParameterfvEXT(texunit, target, level, pname, params);}
+  GLEEPFNGLGETMULTITEXLEVELPARAMETERFVEXTPROC GLeeFuncPtr_glGetMultiTexLevelParameterfvEXT=GLee_Lazy_glGetMultiTexLevelParameterfvEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glGetMultiTexLevelParameterivEXT
+#define GLEE_C_DEFINED_glGetMultiTexLevelParameterivEXT
+  void __stdcall GLee_Lazy_glGetMultiTexLevelParameterivEXT(GLenum  texunit, GLenum  target, GLint  level, GLenum  pname, GLint * params)  {if (GLeeInit()) glGetMultiTexLevelParameterivEXT(texunit, target, level, pname, params);}
+  GLEEPFNGLGETMULTITEXLEVELPARAMETERIVEXTPROC GLeeFuncPtr_glGetMultiTexLevelParameterivEXT=GLee_Lazy_glGetMultiTexLevelParameterivEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glMultiTexImage3DEXT
+#define GLEE_C_DEFINED_glMultiTexImage3DEXT
+  void __stdcall GLee_Lazy_glMultiTexImage3DEXT(GLenum  texunit, GLenum  target, GLint  level, GLenum  internalformat, GLsizei  width, GLsizei  height, GLsizei  depth, GLint  border, GLenum  format, GLenum  type, const GLvoid * pixels)  {if (GLeeInit()) glMultiTexImage3DEXT(texunit, target, level, internalformat, width, height, depth, border, format, type, pixels);}
+  GLEEPFNGLMULTITEXIMAGE3DEXTPROC GLeeFuncPtr_glMultiTexImage3DEXT=GLee_Lazy_glMultiTexImage3DEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glMultiTexSubImage3DEXT
+#define GLEE_C_DEFINED_glMultiTexSubImage3DEXT
+  void __stdcall GLee_Lazy_glMultiTexSubImage3DEXT(GLenum  texunit, GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLint  zoffset, GLsizei  width, GLsizei  height, GLsizei  depth, GLenum  format, GLenum  type, const GLvoid * pixels)  {if (GLeeInit()) glMultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);}
+  GLEEPFNGLMULTITEXSUBIMAGE3DEXTPROC GLeeFuncPtr_glMultiTexSubImage3DEXT=GLee_Lazy_glMultiTexSubImage3DEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glCopyMultiTexSubImage3DEXT
+#define GLEE_C_DEFINED_glCopyMultiTexSubImage3DEXT
+  void __stdcall GLee_Lazy_glCopyMultiTexSubImage3DEXT(GLenum  texunit, GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLint  zoffset, GLint  x, GLint  y, GLsizei  width, GLsizei  height)  {if (GLeeInit()) glCopyMultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, x, y, width, height);}
+  GLEEPFNGLCOPYMULTITEXSUBIMAGE3DEXTPROC GLeeFuncPtr_glCopyMultiTexSubImage3DEXT=GLee_Lazy_glCopyMultiTexSubImage3DEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glBindMultiTextureEXT
+#define GLEE_C_DEFINED_glBindMultiTextureEXT
+  void __stdcall GLee_Lazy_glBindMultiTextureEXT(GLenum  texunit, GLenum  target, GLuint  texture)  {if (GLeeInit()) glBindMultiTextureEXT(texunit, target, texture);}
+  GLEEPFNGLBINDMULTITEXTUREEXTPROC GLeeFuncPtr_glBindMultiTextureEXT=GLee_Lazy_glBindMultiTextureEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glEnableClientStateIndexedEXT
+#define GLEE_C_DEFINED_glEnableClientStateIndexedEXT
+  void __stdcall GLee_Lazy_glEnableClientStateIndexedEXT(GLenum  array, GLuint  index)  {if (GLeeInit()) glEnableClientStateIndexedEXT(array, index);}
+  GLEEPFNGLENABLECLIENTSTATEINDEXEDEXTPROC GLeeFuncPtr_glEnableClientStateIndexedEXT=GLee_Lazy_glEnableClientStateIndexedEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glDisableClientStateIndexedEXT
+#define GLEE_C_DEFINED_glDisableClientStateIndexedEXT
+  void __stdcall GLee_Lazy_glDisableClientStateIndexedEXT(GLenum  array, GLuint  index)  {if (GLeeInit()) glDisableClientStateIndexedEXT(array, index);}
+  GLEEPFNGLDISABLECLIENTSTATEINDEXEDEXTPROC GLeeFuncPtr_glDisableClientStateIndexedEXT=GLee_Lazy_glDisableClientStateIndexedEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glMultiTexCoordPointerEXT
+#define GLEE_C_DEFINED_glMultiTexCoordPointerEXT
+  void __stdcall GLee_Lazy_glMultiTexCoordPointerEXT(GLenum  texunit, GLint  size, GLenum  type, GLsizei  stride, const GLvoid * pointer)  {if (GLeeInit()) glMultiTexCoordPointerEXT(texunit, size, type, stride, pointer);}
+  GLEEPFNGLMULTITEXCOORDPOINTEREXTPROC GLeeFuncPtr_glMultiTexCoordPointerEXT=GLee_Lazy_glMultiTexCoordPointerEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glMultiTexEnvfEXT
+#define GLEE_C_DEFINED_glMultiTexEnvfEXT
+  void __stdcall GLee_Lazy_glMultiTexEnvfEXT(GLenum  texunit, GLenum  target, GLenum  pname, GLfloat  param)  {if (GLeeInit()) glMultiTexEnvfEXT(texunit, target, pname, param);}
+  GLEEPFNGLMULTITEXENVFEXTPROC GLeeFuncPtr_glMultiTexEnvfEXT=GLee_Lazy_glMultiTexEnvfEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glMultiTexEnvfvEXT
+#define GLEE_C_DEFINED_glMultiTexEnvfvEXT
+  void __stdcall GLee_Lazy_glMultiTexEnvfvEXT(GLenum  texunit, GLenum  target, GLenum  pname, const GLfloat * params)  {if (GLeeInit()) glMultiTexEnvfvEXT(texunit, target, pname, params);}
+  GLEEPFNGLMULTITEXENVFVEXTPROC GLeeFuncPtr_glMultiTexEnvfvEXT=GLee_Lazy_glMultiTexEnvfvEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glMultiTexEnviEXT
+#define GLEE_C_DEFINED_glMultiTexEnviEXT
+  void __stdcall GLee_Lazy_glMultiTexEnviEXT(GLenum  texunit, GLenum  target, GLenum  pname, GLint  param)  {if (GLeeInit()) glMultiTexEnviEXT(texunit, target, pname, param);}
+  GLEEPFNGLMULTITEXENVIEXTPROC GLeeFuncPtr_glMultiTexEnviEXT=GLee_Lazy_glMultiTexEnviEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glMultiTexEnvivEXT
+#define GLEE_C_DEFINED_glMultiTexEnvivEXT
+  void __stdcall GLee_Lazy_glMultiTexEnvivEXT(GLenum  texunit, GLenum  target, GLenum  pname, const GLint * params)  {if (GLeeInit()) glMultiTexEnvivEXT(texunit, target, pname, params);}
+  GLEEPFNGLMULTITEXENVIVEXTPROC GLeeFuncPtr_glMultiTexEnvivEXT=GLee_Lazy_glMultiTexEnvivEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glMultiTexGendEXT
+#define GLEE_C_DEFINED_glMultiTexGendEXT
+  void __stdcall GLee_Lazy_glMultiTexGendEXT(GLenum  texunit, GLenum  coord, GLenum  pname, GLdouble  param)  {if (GLeeInit()) glMultiTexGendEXT(texunit, coord, pname, param);}
+  GLEEPFNGLMULTITEXGENDEXTPROC GLeeFuncPtr_glMultiTexGendEXT=GLee_Lazy_glMultiTexGendEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glMultiTexGendvEXT
+#define GLEE_C_DEFINED_glMultiTexGendvEXT
+  void __stdcall GLee_Lazy_glMultiTexGendvEXT(GLenum  texunit, GLenum  coord, GLenum  pname, const GLdouble * params)  {if (GLeeInit()) glMultiTexGendvEXT(texunit, coord, pname, params);}
+  GLEEPFNGLMULTITEXGENDVEXTPROC GLeeFuncPtr_glMultiTexGendvEXT=GLee_Lazy_glMultiTexGendvEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glMultiTexGenfEXT
+#define GLEE_C_DEFINED_glMultiTexGenfEXT
+  void __stdcall GLee_Lazy_glMultiTexGenfEXT(GLenum  texunit, GLenum  coord, GLenum  pname, GLfloat  param)  {if (GLeeInit()) glMultiTexGenfEXT(texunit, coord, pname, param);}
+  GLEEPFNGLMULTITEXGENFEXTPROC GLeeFuncPtr_glMultiTexGenfEXT=GLee_Lazy_glMultiTexGenfEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glMultiTexGenfvEXT
+#define GLEE_C_DEFINED_glMultiTexGenfvEXT
+  void __stdcall GLee_Lazy_glMultiTexGenfvEXT(GLenum  texunit, GLenum  coord, GLenum  pname, const GLfloat * params)  {if (GLeeInit()) glMultiTexGenfvEXT(texunit, coord, pname, params);}
+  GLEEPFNGLMULTITEXGENFVEXTPROC GLeeFuncPtr_glMultiTexGenfvEXT=GLee_Lazy_glMultiTexGenfvEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glMultiTexGeniEXT
+#define GLEE_C_DEFINED_glMultiTexGeniEXT
+  void __stdcall GLee_Lazy_glMultiTexGeniEXT(GLenum  texunit, GLenum  coord, GLenum  pname, GLint  param)  {if (GLeeInit()) glMultiTexGeniEXT(texunit, coord, pname, param);}
+  GLEEPFNGLMULTITEXGENIEXTPROC GLeeFuncPtr_glMultiTexGeniEXT=GLee_Lazy_glMultiTexGeniEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glMultiTexGenivEXT
+#define GLEE_C_DEFINED_glMultiTexGenivEXT
+  void __stdcall GLee_Lazy_glMultiTexGenivEXT(GLenum  texunit, GLenum  coord, GLenum  pname, const GLint * params)  {if (GLeeInit()) glMultiTexGenivEXT(texunit, coord, pname, params);}
+  GLEEPFNGLMULTITEXGENIVEXTPROC GLeeFuncPtr_glMultiTexGenivEXT=GLee_Lazy_glMultiTexGenivEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glGetMultiTexEnvfvEXT
+#define GLEE_C_DEFINED_glGetMultiTexEnvfvEXT
+  void __stdcall GLee_Lazy_glGetMultiTexEnvfvEXT(GLenum  texunit, GLenum  target, GLenum  pname, GLfloat * params)  {if (GLeeInit()) glGetMultiTexEnvfvEXT(texunit, target, pname, params);}
+  GLEEPFNGLGETMULTITEXENVFVEXTPROC GLeeFuncPtr_glGetMultiTexEnvfvEXT=GLee_Lazy_glGetMultiTexEnvfvEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glGetMultiTexEnvivEXT
+#define GLEE_C_DEFINED_glGetMultiTexEnvivEXT
+  void __stdcall GLee_Lazy_glGetMultiTexEnvivEXT(GLenum  texunit, GLenum  target, GLenum  pname, GLint * params)  {if (GLeeInit()) glGetMultiTexEnvivEXT(texunit, target, pname, params);}
+  GLEEPFNGLGETMULTITEXENVIVEXTPROC GLeeFuncPtr_glGetMultiTexEnvivEXT=GLee_Lazy_glGetMultiTexEnvivEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glGetMultiTexGendvEXT
+#define GLEE_C_DEFINED_glGetMultiTexGendvEXT
+  void __stdcall GLee_Lazy_glGetMultiTexGendvEXT(GLenum  texunit, GLenum  coord, GLenum  pname, GLdouble * params)  {if (GLeeInit()) glGetMultiTexGendvEXT(texunit, coord, pname, params);}
+  GLEEPFNGLGETMULTITEXGENDVEXTPROC GLeeFuncPtr_glGetMultiTexGendvEXT=GLee_Lazy_glGetMultiTexGendvEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glGetMultiTexGenfvEXT
+#define GLEE_C_DEFINED_glGetMultiTexGenfvEXT
+  void __stdcall GLee_Lazy_glGetMultiTexGenfvEXT(GLenum  texunit, GLenum  coord, GLenum  pname, GLfloat * params)  {if (GLeeInit()) glGetMultiTexGenfvEXT(texunit, coord, pname, params);}
+  GLEEPFNGLGETMULTITEXGENFVEXTPROC GLeeFuncPtr_glGetMultiTexGenfvEXT=GLee_Lazy_glGetMultiTexGenfvEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glGetMultiTexGenivEXT
+#define GLEE_C_DEFINED_glGetMultiTexGenivEXT
+  void __stdcall GLee_Lazy_glGetMultiTexGenivEXT(GLenum  texunit, GLenum  coord, GLenum  pname, GLint * params)  {if (GLeeInit()) glGetMultiTexGenivEXT(texunit, coord, pname, params);}
+  GLEEPFNGLGETMULTITEXGENIVEXTPROC GLeeFuncPtr_glGetMultiTexGenivEXT=GLee_Lazy_glGetMultiTexGenivEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glGetFloatIndexedvEXT
+#define GLEE_C_DEFINED_glGetFloatIndexedvEXT
+  void __stdcall GLee_Lazy_glGetFloatIndexedvEXT(GLenum  target, GLuint  index, GLfloat * data)  {if (GLeeInit()) glGetFloatIndexedvEXT(target, index, data);}
+  GLEEPFNGLGETFLOATINDEXEDVEXTPROC GLeeFuncPtr_glGetFloatIndexedvEXT=GLee_Lazy_glGetFloatIndexedvEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glGetDoubleIndexedvEXT
+#define GLEE_C_DEFINED_glGetDoubleIndexedvEXT
+  void __stdcall GLee_Lazy_glGetDoubleIndexedvEXT(GLenum  target, GLuint  index, GLdouble * data)  {if (GLeeInit()) glGetDoubleIndexedvEXT(target, index, data);}
+  GLEEPFNGLGETDOUBLEINDEXEDVEXTPROC GLeeFuncPtr_glGetDoubleIndexedvEXT=GLee_Lazy_glGetDoubleIndexedvEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glGetPointerIndexedvEXT
+#define GLEE_C_DEFINED_glGetPointerIndexedvEXT
+  void __stdcall GLee_Lazy_glGetPointerIndexedvEXT(GLenum  target, GLuint  index, GLvoid* * data)  {if (GLeeInit()) glGetPointerIndexedvEXT(target, index, data);}
+  GLEEPFNGLGETPOINTERINDEXEDVEXTPROC GLeeFuncPtr_glGetPointerIndexedvEXT=GLee_Lazy_glGetPointerIndexedvEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glCompressedTextureImage3DEXT
+#define GLEE_C_DEFINED_glCompressedTextureImage3DEXT
+  void __stdcall GLee_Lazy_glCompressedTextureImage3DEXT(GLuint  texture, GLenum  target, GLint  level, GLenum  internalformat, GLsizei  width, GLsizei  height, GLsizei  depth, GLint  border, GLsizei  imageSize, const GLvoid * bits)  {if (GLeeInit()) glCompressedTextureImage3DEXT(texture, target, level, internalformat, width, height, depth, border, imageSize, bits);}
+  GLEEPFNGLCOMPRESSEDTEXTUREIMAGE3DEXTPROC GLeeFuncPtr_glCompressedTextureImage3DEXT=GLee_Lazy_glCompressedTextureImage3DEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glCompressedTextureImage2DEXT
+#define GLEE_C_DEFINED_glCompressedTextureImage2DEXT
+  void __stdcall GLee_Lazy_glCompressedTextureImage2DEXT(GLuint  texture, GLenum  target, GLint  level, GLenum  internalformat, GLsizei  width, GLsizei  height, GLint  border, GLsizei  imageSize, const GLvoid * bits)  {if (GLeeInit()) glCompressedTextureImage2DEXT(texture, target, level, internalformat, width, height, border, imageSize, bits);}
+  GLEEPFNGLCOMPRESSEDTEXTUREIMAGE2DEXTPROC GLeeFuncPtr_glCompressedTextureImage2DEXT=GLee_Lazy_glCompressedTextureImage2DEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glCompressedTextureImage1DEXT
+#define GLEE_C_DEFINED_glCompressedTextureImage1DEXT
+  void __stdcall GLee_Lazy_glCompressedTextureImage1DEXT(GLuint  texture, GLenum  target, GLint  level, GLenum  internalformat, GLsizei  width, GLint  border, GLsizei  imageSize, const GLvoid * bits)  {if (GLeeInit()) glCompressedTextureImage1DEXT(texture, target, level, internalformat, width, border, imageSize, bits);}
+  GLEEPFNGLCOMPRESSEDTEXTUREIMAGE1DEXTPROC GLeeFuncPtr_glCompressedTextureImage1DEXT=GLee_Lazy_glCompressedTextureImage1DEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glCompressedTextureSubImage3DEXT
+#define GLEE_C_DEFINED_glCompressedTextureSubImage3DEXT
+  void __stdcall GLee_Lazy_glCompressedTextureSubImage3DEXT(GLuint  texture, GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLint  zoffset, GLsizei  width, GLsizei  height, GLsizei  depth, GLenum  format, GLsizei  imageSize, const GLvoid * bits)  {if (GLeeInit()) glCompressedTextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits);}
+  GLEEPFNGLCOMPRESSEDTEXTURESUBIMAGE3DEXTPROC GLeeFuncPtr_glCompressedTextureSubImage3DEXT=GLee_Lazy_glCompressedTextureSubImage3DEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glCompressedTextureSubImage2DEXT
+#define GLEE_C_DEFINED_glCompressedTextureSubImage2DEXT
+  void __stdcall GLee_Lazy_glCompressedTextureSubImage2DEXT(GLuint  texture, GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLsizei  width, GLsizei  height, GLenum  format, GLsizei  imageSize, const GLvoid * bits)  {if (GLeeInit()) glCompressedTextureSubImage2DEXT(texture, target, level, xoffset, yoffset, width, height, format, imageSize, bits);}
+  GLEEPFNGLCOMPRESSEDTEXTURESUBIMAGE2DEXTPROC GLeeFuncPtr_glCompressedTextureSubImage2DEXT=GLee_Lazy_glCompressedTextureSubImage2DEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glCompressedTextureSubImage1DEXT
+#define GLEE_C_DEFINED_glCompressedTextureSubImage1DEXT
+  void __stdcall GLee_Lazy_glCompressedTextureSubImage1DEXT(GLuint  texture, GLenum  target, GLint  level, GLint  xoffset, GLsizei  width, GLenum  format, GLsizei  imageSize, const GLvoid * bits)  {if (GLeeInit()) glCompressedTextureSubImage1DEXT(texture, target, level, xoffset, width, format, imageSize, bits);}
+  GLEEPFNGLCOMPRESSEDTEXTURESUBIMAGE1DEXTPROC GLeeFuncPtr_glCompressedTextureSubImage1DEXT=GLee_Lazy_glCompressedTextureSubImage1DEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glGetCompressedTextureImageEXT
+#define GLEE_C_DEFINED_glGetCompressedTextureImageEXT
+  void __stdcall GLee_Lazy_glGetCompressedTextureImageEXT(GLuint  texture, GLenum  target, GLint  lod, GLvoid * img)  {if (GLeeInit()) glGetCompressedTextureImageEXT(texture, target, lod, img);}
+  GLEEPFNGLGETCOMPRESSEDTEXTUREIMAGEEXTPROC GLeeFuncPtr_glGetCompressedTextureImageEXT=GLee_Lazy_glGetCompressedTextureImageEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glCompressedMultiTexImage3DEXT
+#define GLEE_C_DEFINED_glCompressedMultiTexImage3DEXT
+  void __stdcall GLee_Lazy_glCompressedMultiTexImage3DEXT(GLenum  texunit, GLenum  target, GLint  level, GLenum  internalformat, GLsizei  width, GLsizei  height, GLsizei  depth, GLint  border, GLsizei  imageSize, const GLvoid * bits)  {if (GLeeInit()) glCompressedMultiTexImage3DEXT(texunit, target, level, internalformat, width, height, depth, border, imageSize, bits);}
+  GLEEPFNGLCOMPRESSEDMULTITEXIMAGE3DEXTPROC GLeeFuncPtr_glCompressedMultiTexImage3DEXT=GLee_Lazy_glCompressedMultiTexImage3DEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glCompressedMultiTexImage2DEXT
+#define GLEE_C_DEFINED_glCompressedMultiTexImage2DEXT
+  void __stdcall GLee_Lazy_glCompressedMultiTexImage2DEXT(GLenum  texunit, GLenum  target, GLint  level, GLenum  internalformat, GLsizei  width, GLsizei  height, GLint  border, GLsizei  imageSize, const GLvoid * bits)  {if (GLeeInit()) glCompressedMultiTexImage2DEXT(texunit, target, level, internalformat, width, height, border, imageSize, bits);}
+  GLEEPFNGLCOMPRESSEDMULTITEXIMAGE2DEXTPROC GLeeFuncPtr_glCompressedMultiTexImage2DEXT=GLee_Lazy_glCompressedMultiTexImage2DEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glCompressedMultiTexImage1DEXT
+#define GLEE_C_DEFINED_glCompressedMultiTexImage1DEXT
+  void __stdcall GLee_Lazy_glCompressedMultiTexImage1DEXT(GLenum  texunit, GLenum  target, GLint  level, GLenum  internalformat, GLsizei  width, GLint  border, GLsizei  imageSize, const GLvoid * bits)  {if (GLeeInit()) glCompressedMultiTexImage1DEXT(texunit, target, level, internalformat, width, border, imageSize, bits);}
+  GLEEPFNGLCOMPRESSEDMULTITEXIMAGE1DEXTPROC GLeeFuncPtr_glCompressedMultiTexImage1DEXT=GLee_Lazy_glCompressedMultiTexImage1DEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glCompressedMultiTexSubImage3DEXT
+#define GLEE_C_DEFINED_glCompressedMultiTexSubImage3DEXT
+  void __stdcall GLee_Lazy_glCompressedMultiTexSubImage3DEXT(GLenum  texunit, GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLint  zoffset, GLsizei  width, GLsizei  height, GLsizei  depth, GLenum  format, GLsizei  imageSize, const GLvoid * bits)  {if (GLeeInit()) glCompressedMultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits);}
+  GLEEPFNGLCOMPRESSEDMULTITEXSUBIMAGE3DEXTPROC GLeeFuncPtr_glCompressedMultiTexSubImage3DEXT=GLee_Lazy_glCompressedMultiTexSubImage3DEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glCompressedMultiTexSubImage2DEXT
+#define GLEE_C_DEFINED_glCompressedMultiTexSubImage2DEXT
+  void __stdcall GLee_Lazy_glCompressedMultiTexSubImage2DEXT(GLenum  texunit, GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLsizei  width, GLsizei  height, GLenum  format, GLsizei  imageSize, const GLvoid * bits)  {if (GLeeInit()) glCompressedMultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, width, height, format, imageSize, bits);}
+  GLEEPFNGLCOMPRESSEDMULTITEXSUBIMAGE2DEXTPROC GLeeFuncPtr_glCompressedMultiTexSubImage2DEXT=GLee_Lazy_glCompressedMultiTexSubImage2DEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glCompressedMultiTexSubImage1DEXT
+#define GLEE_C_DEFINED_glCompressedMultiTexSubImage1DEXT
+  void __stdcall GLee_Lazy_glCompressedMultiTexSubImage1DEXT(GLenum  texunit, GLenum  target, GLint  level, GLint  xoffset, GLsizei  width, GLenum  format, GLsizei  imageSize, const GLvoid * bits)  {if (GLeeInit()) glCompressedMultiTexSubImage1DEXT(texunit, target, level, xoffset, width, format, imageSize, bits);}
+  GLEEPFNGLCOMPRESSEDMULTITEXSUBIMAGE1DEXTPROC GLeeFuncPtr_glCompressedMultiTexSubImage1DEXT=GLee_Lazy_glCompressedMultiTexSubImage1DEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glGetCompressedMultiTexImageEXT
+#define GLEE_C_DEFINED_glGetCompressedMultiTexImageEXT
+  void __stdcall GLee_Lazy_glGetCompressedMultiTexImageEXT(GLenum  texunit, GLenum  target, GLint  lod, GLvoid * img)  {if (GLeeInit()) glGetCompressedMultiTexImageEXT(texunit, target, lod, img);}
+  GLEEPFNGLGETCOMPRESSEDMULTITEXIMAGEEXTPROC GLeeFuncPtr_glGetCompressedMultiTexImageEXT=GLee_Lazy_glGetCompressedMultiTexImageEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glNamedProgramStringEXT
+#define GLEE_C_DEFINED_glNamedProgramStringEXT
+  void __stdcall GLee_Lazy_glNamedProgramStringEXT(GLuint  program, GLenum  target, GLenum  format, GLsizei  len, const GLvoid * string)  {if (GLeeInit()) glNamedProgramStringEXT(program, target, format, len, string);}
+  GLEEPFNGLNAMEDPROGRAMSTRINGEXTPROC GLeeFuncPtr_glNamedProgramStringEXT=GLee_Lazy_glNamedProgramStringEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glNamedProgramLocalParameter4dEXT
+#define GLEE_C_DEFINED_glNamedProgramLocalParameter4dEXT
+  void __stdcall GLee_Lazy_glNamedProgramLocalParameter4dEXT(GLuint  program, GLenum  target, GLuint  index, GLdouble  x, GLdouble  y, GLdouble  z, GLdouble  w)  {if (GLeeInit()) glNamedProgramLocalParameter4dEXT(program, target, index, x, y, z, w);}
+  GLEEPFNGLNAMEDPROGRAMLOCALPARAMETER4DEXTPROC GLeeFuncPtr_glNamedProgramLocalParameter4dEXT=GLee_Lazy_glNamedProgramLocalParameter4dEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glNamedProgramLocalParameter4dvEXT
+#define GLEE_C_DEFINED_glNamedProgramLocalParameter4dvEXT
+  void __stdcall GLee_Lazy_glNamedProgramLocalParameter4dvEXT(GLuint  program, GLenum  target, GLuint  index, const GLdouble * params)  {if (GLeeInit()) glNamedProgramLocalParameter4dvEXT(program, target, index, params);}
+  GLEEPFNGLNAMEDPROGRAMLOCALPARAMETER4DVEXTPROC GLeeFuncPtr_glNamedProgramLocalParameter4dvEXT=GLee_Lazy_glNamedProgramLocalParameter4dvEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glNamedProgramLocalParameter4fEXT
+#define GLEE_C_DEFINED_glNamedProgramLocalParameter4fEXT
+  void __stdcall GLee_Lazy_glNamedProgramLocalParameter4fEXT(GLuint  program, GLenum  target, GLuint  index, GLfloat  x, GLfloat  y, GLfloat  z, GLfloat  w)  {if (GLeeInit()) glNamedProgramLocalParameter4fEXT(program, target, index, x, y, z, w);}
+  GLEEPFNGLNAMEDPROGRAMLOCALPARAMETER4FEXTPROC GLeeFuncPtr_glNamedProgramLocalParameter4fEXT=GLee_Lazy_glNamedProgramLocalParameter4fEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glNamedProgramLocalParameter4fvEXT
+#define GLEE_C_DEFINED_glNamedProgramLocalParameter4fvEXT
+  void __stdcall GLee_Lazy_glNamedProgramLocalParameter4fvEXT(GLuint  program, GLenum  target, GLuint  index, const GLfloat * params)  {if (GLeeInit()) glNamedProgramLocalParameter4fvEXT(program, target, index, params);}
+  GLEEPFNGLNAMEDPROGRAMLOCALPARAMETER4FVEXTPROC GLeeFuncPtr_glNamedProgramLocalParameter4fvEXT=GLee_Lazy_glNamedProgramLocalParameter4fvEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glGetNamedProgramLocalParameterdvEXT
+#define GLEE_C_DEFINED_glGetNamedProgramLocalParameterdvEXT
+  void __stdcall GLee_Lazy_glGetNamedProgramLocalParameterdvEXT(GLuint  program, GLenum  target, GLuint  index, GLdouble * params)  {if (GLeeInit()) glGetNamedProgramLocalParameterdvEXT(program, target, index, params);}
+  GLEEPFNGLGETNAMEDPROGRAMLOCALPARAMETERDVEXTPROC GLeeFuncPtr_glGetNamedProgramLocalParameterdvEXT=GLee_Lazy_glGetNamedProgramLocalParameterdvEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glGetNamedProgramLocalParameterfvEXT
+#define GLEE_C_DEFINED_glGetNamedProgramLocalParameterfvEXT
+  void __stdcall GLee_Lazy_glGetNamedProgramLocalParameterfvEXT(GLuint  program, GLenum  target, GLuint  index, GLfloat * params)  {if (GLeeInit()) glGetNamedProgramLocalParameterfvEXT(program, target, index, params);}
+  GLEEPFNGLGETNAMEDPROGRAMLOCALPARAMETERFVEXTPROC GLeeFuncPtr_glGetNamedProgramLocalParameterfvEXT=GLee_Lazy_glGetNamedProgramLocalParameterfvEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glGetNamedProgramivEXT
+#define GLEE_C_DEFINED_glGetNamedProgramivEXT
+  void __stdcall GLee_Lazy_glGetNamedProgramivEXT(GLuint  program, GLenum  target, GLenum  pname, GLint * params)  {if (GLeeInit()) glGetNamedProgramivEXT(program, target, pname, params);}
+  GLEEPFNGLGETNAMEDPROGRAMIVEXTPROC GLeeFuncPtr_glGetNamedProgramivEXT=GLee_Lazy_glGetNamedProgramivEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glGetNamedProgramStringEXT
+#define GLEE_C_DEFINED_glGetNamedProgramStringEXT
+  void __stdcall GLee_Lazy_glGetNamedProgramStringEXT(GLuint  program, GLenum  target, GLenum  pname, GLvoid * string)  {if (GLeeInit()) glGetNamedProgramStringEXT(program, target, pname, string);}
+  GLEEPFNGLGETNAMEDPROGRAMSTRINGEXTPROC GLeeFuncPtr_glGetNamedProgramStringEXT=GLee_Lazy_glGetNamedProgramStringEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glNamedProgramLocalParameters4fvEXT
+#define GLEE_C_DEFINED_glNamedProgramLocalParameters4fvEXT
+  void __stdcall GLee_Lazy_glNamedProgramLocalParameters4fvEXT(GLuint  program, GLenum  target, GLuint  index, GLsizei  count, const GLfloat * params)  {if (GLeeInit()) glNamedProgramLocalParameters4fvEXT(program, target, index, count, params);}
+  GLEEPFNGLNAMEDPROGRAMLOCALPARAMETERS4FVEXTPROC GLeeFuncPtr_glNamedProgramLocalParameters4fvEXT=GLee_Lazy_glNamedProgramLocalParameters4fvEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glNamedProgramLocalParameterI4iEXT
+#define GLEE_C_DEFINED_glNamedProgramLocalParameterI4iEXT
+  void __stdcall GLee_Lazy_glNamedProgramLocalParameterI4iEXT(GLuint  program, GLenum  target, GLuint  index, GLint  x, GLint  y, GLint  z, GLint  w)  {if (GLeeInit()) glNamedProgramLocalParameterI4iEXT(program, target, index, x, y, z, w);}
+  GLEEPFNGLNAMEDPROGRAMLOCALPARAMETERI4IEXTPROC GLeeFuncPtr_glNamedProgramLocalParameterI4iEXT=GLee_Lazy_glNamedProgramLocalParameterI4iEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glNamedProgramLocalParameterI4ivEXT
+#define GLEE_C_DEFINED_glNamedProgramLocalParameterI4ivEXT
+  void __stdcall GLee_Lazy_glNamedProgramLocalParameterI4ivEXT(GLuint  program, GLenum  target, GLuint  index, const GLint * params)  {if (GLeeInit()) glNamedProgramLocalParameterI4ivEXT(program, target, index, params);}
+  GLEEPFNGLNAMEDPROGRAMLOCALPARAMETERI4IVEXTPROC GLeeFuncPtr_glNamedProgramLocalParameterI4ivEXT=GLee_Lazy_glNamedProgramLocalParameterI4ivEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glNamedProgramLocalParametersI4ivEXT
+#define GLEE_C_DEFINED_glNamedProgramLocalParametersI4ivEXT
+  void __stdcall GLee_Lazy_glNamedProgramLocalParametersI4ivEXT(GLuint  program, GLenum  target, GLuint  index, GLsizei  count, const GLint * params)  {if (GLeeInit()) glNamedProgramLocalParametersI4ivEXT(program, target, index, count, params);}
+  GLEEPFNGLNAMEDPROGRAMLOCALPARAMETERSI4IVEXTPROC GLeeFuncPtr_glNamedProgramLocalParametersI4ivEXT=GLee_Lazy_glNamedProgramLocalParametersI4ivEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glNamedProgramLocalParameterI4uiEXT
+#define GLEE_C_DEFINED_glNamedProgramLocalParameterI4uiEXT
+  void __stdcall GLee_Lazy_glNamedProgramLocalParameterI4uiEXT(GLuint  program, GLenum  target, GLuint  index, GLuint  x, GLuint  y, GLuint  z, GLuint  w)  {if (GLeeInit()) glNamedProgramLocalParameterI4uiEXT(program, target, index, x, y, z, w);}
+  GLEEPFNGLNAMEDPROGRAMLOCALPARAMETERI4UIEXTPROC GLeeFuncPtr_glNamedProgramLocalParameterI4uiEXT=GLee_Lazy_glNamedProgramLocalParameterI4uiEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glNamedProgramLocalParameterI4uivEXT
+#define GLEE_C_DEFINED_glNamedProgramLocalParameterI4uivEXT
+  void __stdcall GLee_Lazy_glNamedProgramLocalParameterI4uivEXT(GLuint  program, GLenum  target, GLuint  index, const GLuint * params)  {if (GLeeInit()) glNamedProgramLocalParameterI4uivEXT(program, target, index, params);}
+  GLEEPFNGLNAMEDPROGRAMLOCALPARAMETERI4UIVEXTPROC GLeeFuncPtr_glNamedProgramLocalParameterI4uivEXT=GLee_Lazy_glNamedProgramLocalParameterI4uivEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glNamedProgramLocalParametersI4uivEXT
+#define GLEE_C_DEFINED_glNamedProgramLocalParametersI4uivEXT
+  void __stdcall GLee_Lazy_glNamedProgramLocalParametersI4uivEXT(GLuint  program, GLenum  target, GLuint  index, GLsizei  count, const GLuint * params)  {if (GLeeInit()) glNamedProgramLocalParametersI4uivEXT(program, target, index, count, params);}
+  GLEEPFNGLNAMEDPROGRAMLOCALPARAMETERSI4UIVEXTPROC GLeeFuncPtr_glNamedProgramLocalParametersI4uivEXT=GLee_Lazy_glNamedProgramLocalParametersI4uivEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glGetNamedProgramLocalParameterIivEXT
+#define GLEE_C_DEFINED_glGetNamedProgramLocalParameterIivEXT
+  void __stdcall GLee_Lazy_glGetNamedProgramLocalParameterIivEXT(GLuint  program, GLenum  target, GLuint  index, GLint * params)  {if (GLeeInit()) glGetNamedProgramLocalParameterIivEXT(program, target, index, params);}
+  GLEEPFNGLGETNAMEDPROGRAMLOCALPARAMETERIIVEXTPROC GLeeFuncPtr_glGetNamedProgramLocalParameterIivEXT=GLee_Lazy_glGetNamedProgramLocalParameterIivEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glGetNamedProgramLocalParameterIuivEXT
+#define GLEE_C_DEFINED_glGetNamedProgramLocalParameterIuivEXT
+  void __stdcall GLee_Lazy_glGetNamedProgramLocalParameterIuivEXT(GLuint  program, GLenum  target, GLuint  index, GLuint * params)  {if (GLeeInit()) glGetNamedProgramLocalParameterIuivEXT(program, target, index, params);}
+  GLEEPFNGLGETNAMEDPROGRAMLOCALPARAMETERIUIVEXTPROC GLeeFuncPtr_glGetNamedProgramLocalParameterIuivEXT=GLee_Lazy_glGetNamedProgramLocalParameterIuivEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glTextureParameterIivEXT
+#define GLEE_C_DEFINED_glTextureParameterIivEXT
+  void __stdcall GLee_Lazy_glTextureParameterIivEXT(GLuint  texture, GLenum  target, GLenum  pname, const GLint * params)  {if (GLeeInit()) glTextureParameterIivEXT(texture, target, pname, params);}
+  GLEEPFNGLTEXTUREPARAMETERIIVEXTPROC GLeeFuncPtr_glTextureParameterIivEXT=GLee_Lazy_glTextureParameterIivEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glTextureParameterIuivEXT
+#define GLEE_C_DEFINED_glTextureParameterIuivEXT
+  void __stdcall GLee_Lazy_glTextureParameterIuivEXT(GLuint  texture, GLenum  target, GLenum  pname, const GLuint * params)  {if (GLeeInit()) glTextureParameterIuivEXT(texture, target, pname, params);}
+  GLEEPFNGLTEXTUREPARAMETERIUIVEXTPROC GLeeFuncPtr_glTextureParameterIuivEXT=GLee_Lazy_glTextureParameterIuivEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glGetTextureParameterIivEXT
+#define GLEE_C_DEFINED_glGetTextureParameterIivEXT
+  void __stdcall GLee_Lazy_glGetTextureParameterIivEXT(GLuint  texture, GLenum  target, GLenum  pname, GLint * params)  {if (GLeeInit()) glGetTextureParameterIivEXT(texture, target, pname, params);}
+  GLEEPFNGLGETTEXTUREPARAMETERIIVEXTPROC GLeeFuncPtr_glGetTextureParameterIivEXT=GLee_Lazy_glGetTextureParameterIivEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glGetTextureParameterIuivEXT
+#define GLEE_C_DEFINED_glGetTextureParameterIuivEXT
+  void __stdcall GLee_Lazy_glGetTextureParameterIuivEXT(GLuint  texture, GLenum  target, GLenum  pname, GLuint * params)  {if (GLeeInit()) glGetTextureParameterIuivEXT(texture, target, pname, params);}
+  GLEEPFNGLGETTEXTUREPARAMETERIUIVEXTPROC GLeeFuncPtr_glGetTextureParameterIuivEXT=GLee_Lazy_glGetTextureParameterIuivEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glMultiTexParameterIivEXT
+#define GLEE_C_DEFINED_glMultiTexParameterIivEXT
+  void __stdcall GLee_Lazy_glMultiTexParameterIivEXT(GLenum  texunit, GLenum  target, GLenum  pname, const GLint * params)  {if (GLeeInit()) glMultiTexParameterIivEXT(texunit, target, pname, params);}
+  GLEEPFNGLMULTITEXPARAMETERIIVEXTPROC GLeeFuncPtr_glMultiTexParameterIivEXT=GLee_Lazy_glMultiTexParameterIivEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glMultiTexParameterIuivEXT
+#define GLEE_C_DEFINED_glMultiTexParameterIuivEXT
+  void __stdcall GLee_Lazy_glMultiTexParameterIuivEXT(GLenum  texunit, GLenum  target, GLenum  pname, const GLuint * params)  {if (GLeeInit()) glMultiTexParameterIuivEXT(texunit, target, pname, params);}
+  GLEEPFNGLMULTITEXPARAMETERIUIVEXTPROC GLeeFuncPtr_glMultiTexParameterIuivEXT=GLee_Lazy_glMultiTexParameterIuivEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glGetMultiTexParameterIivEXT
+#define GLEE_C_DEFINED_glGetMultiTexParameterIivEXT
+  void __stdcall GLee_Lazy_glGetMultiTexParameterIivEXT(GLenum  texunit, GLenum  target, GLenum  pname, GLint * params)  {if (GLeeInit()) glGetMultiTexParameterIivEXT(texunit, target, pname, params);}
+  GLEEPFNGLGETMULTITEXPARAMETERIIVEXTPROC GLeeFuncPtr_glGetMultiTexParameterIivEXT=GLee_Lazy_glGetMultiTexParameterIivEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glGetMultiTexParameterIuivEXT
+#define GLEE_C_DEFINED_glGetMultiTexParameterIuivEXT
+  void __stdcall GLee_Lazy_glGetMultiTexParameterIuivEXT(GLenum  texunit, GLenum  target, GLenum  pname, GLuint * params)  {if (GLeeInit()) glGetMultiTexParameterIuivEXT(texunit, target, pname, params);}
+  GLEEPFNGLGETMULTITEXPARAMETERIUIVEXTPROC GLeeFuncPtr_glGetMultiTexParameterIuivEXT=GLee_Lazy_glGetMultiTexParameterIuivEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramUniform1fEXT
+#define GLEE_C_DEFINED_glProgramUniform1fEXT
+  void __stdcall GLee_Lazy_glProgramUniform1fEXT(GLuint  program, GLint  location, GLfloat  v0)  {if (GLeeInit()) glProgramUniform1fEXT(program, location, v0);}
+  GLEEPFNGLPROGRAMUNIFORM1FEXTPROC GLeeFuncPtr_glProgramUniform1fEXT=GLee_Lazy_glProgramUniform1fEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramUniform2fEXT
+#define GLEE_C_DEFINED_glProgramUniform2fEXT
+  void __stdcall GLee_Lazy_glProgramUniform2fEXT(GLuint  program, GLint  location, GLfloat  v0, GLfloat  v1)  {if (GLeeInit()) glProgramUniform2fEXT(program, location, v0, v1);}
+  GLEEPFNGLPROGRAMUNIFORM2FEXTPROC GLeeFuncPtr_glProgramUniform2fEXT=GLee_Lazy_glProgramUniform2fEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramUniform3fEXT
+#define GLEE_C_DEFINED_glProgramUniform3fEXT
+  void __stdcall GLee_Lazy_glProgramUniform3fEXT(GLuint  program, GLint  location, GLfloat  v0, GLfloat  v1, GLfloat  v2)  {if (GLeeInit()) glProgramUniform3fEXT(program, location, v0, v1, v2);}
+  GLEEPFNGLPROGRAMUNIFORM3FEXTPROC GLeeFuncPtr_glProgramUniform3fEXT=GLee_Lazy_glProgramUniform3fEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramUniform4fEXT
+#define GLEE_C_DEFINED_glProgramUniform4fEXT
+  void __stdcall GLee_Lazy_glProgramUniform4fEXT(GLuint  program, GLint  location, GLfloat  v0, GLfloat  v1, GLfloat  v2, GLfloat  v3)  {if (GLeeInit()) glProgramUniform4fEXT(program, location, v0, v1, v2, v3);}
+  GLEEPFNGLPROGRAMUNIFORM4FEXTPROC GLeeFuncPtr_glProgramUniform4fEXT=GLee_Lazy_glProgramUniform4fEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramUniform1iEXT
+#define GLEE_C_DEFINED_glProgramUniform1iEXT
+  void __stdcall GLee_Lazy_glProgramUniform1iEXT(GLuint  program, GLint  location, GLint  v0)  {if (GLeeInit()) glProgramUniform1iEXT(program, location, v0);}
+  GLEEPFNGLPROGRAMUNIFORM1IEXTPROC GLeeFuncPtr_glProgramUniform1iEXT=GLee_Lazy_glProgramUniform1iEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramUniform2iEXT
+#define GLEE_C_DEFINED_glProgramUniform2iEXT
+  void __stdcall GLee_Lazy_glProgramUniform2iEXT(GLuint  program, GLint  location, GLint  v0, GLint  v1)  {if (GLeeInit()) glProgramUniform2iEXT(program, location, v0, v1);}
+  GLEEPFNGLPROGRAMUNIFORM2IEXTPROC GLeeFuncPtr_glProgramUniform2iEXT=GLee_Lazy_glProgramUniform2iEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramUniform3iEXT
+#define GLEE_C_DEFINED_glProgramUniform3iEXT
+  void __stdcall GLee_Lazy_glProgramUniform3iEXT(GLuint  program, GLint  location, GLint  v0, GLint  v1, GLint  v2)  {if (GLeeInit()) glProgramUniform3iEXT(program, location, v0, v1, v2);}
+  GLEEPFNGLPROGRAMUNIFORM3IEXTPROC GLeeFuncPtr_glProgramUniform3iEXT=GLee_Lazy_glProgramUniform3iEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramUniform4iEXT
+#define GLEE_C_DEFINED_glProgramUniform4iEXT
+  void __stdcall GLee_Lazy_glProgramUniform4iEXT(GLuint  program, GLint  location, GLint  v0, GLint  v1, GLint  v2, GLint  v3)  {if (GLeeInit()) glProgramUniform4iEXT(program, location, v0, v1, v2, v3);}
+  GLEEPFNGLPROGRAMUNIFORM4IEXTPROC GLeeFuncPtr_glProgramUniform4iEXT=GLee_Lazy_glProgramUniform4iEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramUniform1fvEXT
+#define GLEE_C_DEFINED_glProgramUniform1fvEXT
+  void __stdcall GLee_Lazy_glProgramUniform1fvEXT(GLuint  program, GLint  location, GLsizei  count, const GLfloat * value)  {if (GLeeInit()) glProgramUniform1fvEXT(program, location, count, value);}
+  GLEEPFNGLPROGRAMUNIFORM1FVEXTPROC GLeeFuncPtr_glProgramUniform1fvEXT=GLee_Lazy_glProgramUniform1fvEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramUniform2fvEXT
+#define GLEE_C_DEFINED_glProgramUniform2fvEXT
+  void __stdcall GLee_Lazy_glProgramUniform2fvEXT(GLuint  program, GLint  location, GLsizei  count, const GLfloat * value)  {if (GLeeInit()) glProgramUniform2fvEXT(program, location, count, value);}
+  GLEEPFNGLPROGRAMUNIFORM2FVEXTPROC GLeeFuncPtr_glProgramUniform2fvEXT=GLee_Lazy_glProgramUniform2fvEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramUniform3fvEXT
+#define GLEE_C_DEFINED_glProgramUniform3fvEXT
+  void __stdcall GLee_Lazy_glProgramUniform3fvEXT(GLuint  program, GLint  location, GLsizei  count, const GLfloat * value)  {if (GLeeInit()) glProgramUniform3fvEXT(program, location, count, value);}
+  GLEEPFNGLPROGRAMUNIFORM3FVEXTPROC GLeeFuncPtr_glProgramUniform3fvEXT=GLee_Lazy_glProgramUniform3fvEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramUniform4fvEXT
+#define GLEE_C_DEFINED_glProgramUniform4fvEXT
+  void __stdcall GLee_Lazy_glProgramUniform4fvEXT(GLuint  program, GLint  location, GLsizei  count, const GLfloat * value)  {if (GLeeInit()) glProgramUniform4fvEXT(program, location, count, value);}
+  GLEEPFNGLPROGRAMUNIFORM4FVEXTPROC GLeeFuncPtr_glProgramUniform4fvEXT=GLee_Lazy_glProgramUniform4fvEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramUniform1ivEXT
+#define GLEE_C_DEFINED_glProgramUniform1ivEXT
+  void __stdcall GLee_Lazy_glProgramUniform1ivEXT(GLuint  program, GLint  location, GLsizei  count, const GLint * value)  {if (GLeeInit()) glProgramUniform1ivEXT(program, location, count, value);}
+  GLEEPFNGLPROGRAMUNIFORM1IVEXTPROC GLeeFuncPtr_glProgramUniform1ivEXT=GLee_Lazy_glProgramUniform1ivEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramUniform2ivEXT
+#define GLEE_C_DEFINED_glProgramUniform2ivEXT
+  void __stdcall GLee_Lazy_glProgramUniform2ivEXT(GLuint  program, GLint  location, GLsizei  count, const GLint * value)  {if (GLeeInit()) glProgramUniform2ivEXT(program, location, count, value);}
+  GLEEPFNGLPROGRAMUNIFORM2IVEXTPROC GLeeFuncPtr_glProgramUniform2ivEXT=GLee_Lazy_glProgramUniform2ivEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramUniform3ivEXT
+#define GLEE_C_DEFINED_glProgramUniform3ivEXT
+  void __stdcall GLee_Lazy_glProgramUniform3ivEXT(GLuint  program, GLint  location, GLsizei  count, const GLint * value)  {if (GLeeInit()) glProgramUniform3ivEXT(program, location, count, value);}
+  GLEEPFNGLPROGRAMUNIFORM3IVEXTPROC GLeeFuncPtr_glProgramUniform3ivEXT=GLee_Lazy_glProgramUniform3ivEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramUniform4ivEXT
+#define GLEE_C_DEFINED_glProgramUniform4ivEXT
+  void __stdcall GLee_Lazy_glProgramUniform4ivEXT(GLuint  program, GLint  location, GLsizei  count, const GLint * value)  {if (GLeeInit()) glProgramUniform4ivEXT(program, location, count, value);}
+  GLEEPFNGLPROGRAMUNIFORM4IVEXTPROC GLeeFuncPtr_glProgramUniform4ivEXT=GLee_Lazy_glProgramUniform4ivEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramUniformMatrix2fvEXT
+#define GLEE_C_DEFINED_glProgramUniformMatrix2fvEXT
+  void __stdcall GLee_Lazy_glProgramUniformMatrix2fvEXT(GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value)  {if (GLeeInit()) glProgramUniformMatrix2fvEXT(program, location, count, transpose, value);}
+  GLEEPFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC GLeeFuncPtr_glProgramUniformMatrix2fvEXT=GLee_Lazy_glProgramUniformMatrix2fvEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramUniformMatrix3fvEXT
+#define GLEE_C_DEFINED_glProgramUniformMatrix3fvEXT
+  void __stdcall GLee_Lazy_glProgramUniformMatrix3fvEXT(GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value)  {if (GLeeInit()) glProgramUniformMatrix3fvEXT(program, location, count, transpose, value);}
+  GLEEPFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC GLeeFuncPtr_glProgramUniformMatrix3fvEXT=GLee_Lazy_glProgramUniformMatrix3fvEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramUniformMatrix4fvEXT
+#define GLEE_C_DEFINED_glProgramUniformMatrix4fvEXT
+  void __stdcall GLee_Lazy_glProgramUniformMatrix4fvEXT(GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value)  {if (GLeeInit()) glProgramUniformMatrix4fvEXT(program, location, count, transpose, value);}
+  GLEEPFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC GLeeFuncPtr_glProgramUniformMatrix4fvEXT=GLee_Lazy_glProgramUniformMatrix4fvEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramUniformMatrix2x3fvEXT
+#define GLEE_C_DEFINED_glProgramUniformMatrix2x3fvEXT
+  void __stdcall GLee_Lazy_glProgramUniformMatrix2x3fvEXT(GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value)  {if (GLeeInit()) glProgramUniformMatrix2x3fvEXT(program, location, count, transpose, value);}
+  GLEEPFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC GLeeFuncPtr_glProgramUniformMatrix2x3fvEXT=GLee_Lazy_glProgramUniformMatrix2x3fvEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramUniformMatrix3x2fvEXT
+#define GLEE_C_DEFINED_glProgramUniformMatrix3x2fvEXT
+  void __stdcall GLee_Lazy_glProgramUniformMatrix3x2fvEXT(GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value)  {if (GLeeInit()) glProgramUniformMatrix3x2fvEXT(program, location, count, transpose, value);}
+  GLEEPFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC GLeeFuncPtr_glProgramUniformMatrix3x2fvEXT=GLee_Lazy_glProgramUniformMatrix3x2fvEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramUniformMatrix2x4fvEXT
+#define GLEE_C_DEFINED_glProgramUniformMatrix2x4fvEXT
+  void __stdcall GLee_Lazy_glProgramUniformMatrix2x4fvEXT(GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value)  {if (GLeeInit()) glProgramUniformMatrix2x4fvEXT(program, location, count, transpose, value);}
+  GLEEPFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC GLeeFuncPtr_glProgramUniformMatrix2x4fvEXT=GLee_Lazy_glProgramUniformMatrix2x4fvEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramUniformMatrix4x2fvEXT
+#define GLEE_C_DEFINED_glProgramUniformMatrix4x2fvEXT
+  void __stdcall GLee_Lazy_glProgramUniformMatrix4x2fvEXT(GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value)  {if (GLeeInit()) glProgramUniformMatrix4x2fvEXT(program, location, count, transpose, value);}
+  GLEEPFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC GLeeFuncPtr_glProgramUniformMatrix4x2fvEXT=GLee_Lazy_glProgramUniformMatrix4x2fvEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramUniformMatrix3x4fvEXT
+#define GLEE_C_DEFINED_glProgramUniformMatrix3x4fvEXT
+  void __stdcall GLee_Lazy_glProgramUniformMatrix3x4fvEXT(GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value)  {if (GLeeInit()) glProgramUniformMatrix3x4fvEXT(program, location, count, transpose, value);}
+  GLEEPFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC GLeeFuncPtr_glProgramUniformMatrix3x4fvEXT=GLee_Lazy_glProgramUniformMatrix3x4fvEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramUniformMatrix4x3fvEXT
+#define GLEE_C_DEFINED_glProgramUniformMatrix4x3fvEXT
+  void __stdcall GLee_Lazy_glProgramUniformMatrix4x3fvEXT(GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value)  {if (GLeeInit()) glProgramUniformMatrix4x3fvEXT(program, location, count, transpose, value);}
+  GLEEPFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC GLeeFuncPtr_glProgramUniformMatrix4x3fvEXT=GLee_Lazy_glProgramUniformMatrix4x3fvEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramUniform1uiEXT
+#define GLEE_C_DEFINED_glProgramUniform1uiEXT
+  void __stdcall GLee_Lazy_glProgramUniform1uiEXT(GLuint  program, GLint  location, GLuint  v0)  {if (GLeeInit()) glProgramUniform1uiEXT(program, location, v0);}
+  GLEEPFNGLPROGRAMUNIFORM1UIEXTPROC GLeeFuncPtr_glProgramUniform1uiEXT=GLee_Lazy_glProgramUniform1uiEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramUniform2uiEXT
+#define GLEE_C_DEFINED_glProgramUniform2uiEXT
+  void __stdcall GLee_Lazy_glProgramUniform2uiEXT(GLuint  program, GLint  location, GLuint  v0, GLuint  v1)  {if (GLeeInit()) glProgramUniform2uiEXT(program, location, v0, v1);}
+  GLEEPFNGLPROGRAMUNIFORM2UIEXTPROC GLeeFuncPtr_glProgramUniform2uiEXT=GLee_Lazy_glProgramUniform2uiEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramUniform3uiEXT
+#define GLEE_C_DEFINED_glProgramUniform3uiEXT
+  void __stdcall GLee_Lazy_glProgramUniform3uiEXT(GLuint  program, GLint  location, GLuint  v0, GLuint  v1, GLuint  v2)  {if (GLeeInit()) glProgramUniform3uiEXT(program, location, v0, v1, v2);}
+  GLEEPFNGLPROGRAMUNIFORM3UIEXTPROC GLeeFuncPtr_glProgramUniform3uiEXT=GLee_Lazy_glProgramUniform3uiEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramUniform4uiEXT
+#define GLEE_C_DEFINED_glProgramUniform4uiEXT
+  void __stdcall GLee_Lazy_glProgramUniform4uiEXT(GLuint  program, GLint  location, GLuint  v0, GLuint  v1, GLuint  v2, GLuint  v3)  {if (GLeeInit()) glProgramUniform4uiEXT(program, location, v0, v1, v2, v3);}
+  GLEEPFNGLPROGRAMUNIFORM4UIEXTPROC GLeeFuncPtr_glProgramUniform4uiEXT=GLee_Lazy_glProgramUniform4uiEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramUniform1uivEXT
+#define GLEE_C_DEFINED_glProgramUniform1uivEXT
+  void __stdcall GLee_Lazy_glProgramUniform1uivEXT(GLuint  program, GLint  location, GLsizei  count, const GLuint * value)  {if (GLeeInit()) glProgramUniform1uivEXT(program, location, count, value);}
+  GLEEPFNGLPROGRAMUNIFORM1UIVEXTPROC GLeeFuncPtr_glProgramUniform1uivEXT=GLee_Lazy_glProgramUniform1uivEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramUniform2uivEXT
+#define GLEE_C_DEFINED_glProgramUniform2uivEXT
+  void __stdcall GLee_Lazy_glProgramUniform2uivEXT(GLuint  program, GLint  location, GLsizei  count, const GLuint * value)  {if (GLeeInit()) glProgramUniform2uivEXT(program, location, count, value);}
+  GLEEPFNGLPROGRAMUNIFORM2UIVEXTPROC GLeeFuncPtr_glProgramUniform2uivEXT=GLee_Lazy_glProgramUniform2uivEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramUniform3uivEXT
+#define GLEE_C_DEFINED_glProgramUniform3uivEXT
+  void __stdcall GLee_Lazy_glProgramUniform3uivEXT(GLuint  program, GLint  location, GLsizei  count, const GLuint * value)  {if (GLeeInit()) glProgramUniform3uivEXT(program, location, count, value);}
+  GLEEPFNGLPROGRAMUNIFORM3UIVEXTPROC GLeeFuncPtr_glProgramUniform3uivEXT=GLee_Lazy_glProgramUniform3uivEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramUniform4uivEXT
+#define GLEE_C_DEFINED_glProgramUniform4uivEXT
+  void __stdcall GLee_Lazy_glProgramUniform4uivEXT(GLuint  program, GLint  location, GLsizei  count, const GLuint * value)  {if (GLeeInit()) glProgramUniform4uivEXT(program, location, count, value);}
+  GLEEPFNGLPROGRAMUNIFORM4UIVEXTPROC GLeeFuncPtr_glProgramUniform4uivEXT=GLee_Lazy_glProgramUniform4uivEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glNamedBufferDataEXT
+#define GLEE_C_DEFINED_glNamedBufferDataEXT
+  void __stdcall GLee_Lazy_glNamedBufferDataEXT(GLuint  buffer, GLsizeiptr  size, const GLvoid * data, GLenum  usage)  {if (GLeeInit()) glNamedBufferDataEXT(buffer, size, data, usage);}
+  GLEEPFNGLNAMEDBUFFERDATAEXTPROC GLeeFuncPtr_glNamedBufferDataEXT=GLee_Lazy_glNamedBufferDataEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glNamedBufferSubDataEXT
+#define GLEE_C_DEFINED_glNamedBufferSubDataEXT
+  void __stdcall GLee_Lazy_glNamedBufferSubDataEXT(GLuint  buffer, GLintptr  offset, GLsizeiptr  size, const GLvoid * data)  {if (GLeeInit()) glNamedBufferSubDataEXT(buffer, offset, size, data);}
+  GLEEPFNGLNAMEDBUFFERSUBDATAEXTPROC GLeeFuncPtr_glNamedBufferSubDataEXT=GLee_Lazy_glNamedBufferSubDataEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glMapNamedBufferEXT
+#define GLEE_C_DEFINED_glMapNamedBufferEXT
+  GLvoid* __stdcall GLee_Lazy_glMapNamedBufferEXT(GLuint  buffer, GLenum  access)  {if (GLeeInit()) return glMapNamedBufferEXT(buffer, access); return (GLvoid*)0;}
+  GLEEPFNGLMAPNAMEDBUFFEREXTPROC GLeeFuncPtr_glMapNamedBufferEXT=GLee_Lazy_glMapNamedBufferEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glUnmapNamedBufferEXT
+#define GLEE_C_DEFINED_glUnmapNamedBufferEXT
+  GLboolean __stdcall GLee_Lazy_glUnmapNamedBufferEXT(GLuint  buffer)  {if (GLeeInit()) return glUnmapNamedBufferEXT(buffer); return (GLboolean)0;}
+  GLEEPFNGLUNMAPNAMEDBUFFEREXTPROC GLeeFuncPtr_glUnmapNamedBufferEXT=GLee_Lazy_glUnmapNamedBufferEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glMapNamedBufferRangeEXT
+#define GLEE_C_DEFINED_glMapNamedBufferRangeEXT
+  GLvoid* __stdcall GLee_Lazy_glMapNamedBufferRangeEXT(GLuint  buffer, GLintptr  offset, GLsizeiptr  length, GLbitfield  access)  {if (GLeeInit()) return glMapNamedBufferRangeEXT(buffer, offset, length, access); return (GLvoid*)0;}
+  GLEEPFNGLMAPNAMEDBUFFERRANGEEXTPROC GLeeFuncPtr_glMapNamedBufferRangeEXT=GLee_Lazy_glMapNamedBufferRangeEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glFlushMappedNamedBufferRangeEXT
+#define GLEE_C_DEFINED_glFlushMappedNamedBufferRangeEXT
+  void __stdcall GLee_Lazy_glFlushMappedNamedBufferRangeEXT(GLuint  buffer, GLintptr  offset, GLsizeiptr  length)  {if (GLeeInit()) glFlushMappedNamedBufferRangeEXT(buffer, offset, length);}
+  GLEEPFNGLFLUSHMAPPEDNAMEDBUFFERRANGEEXTPROC GLeeFuncPtr_glFlushMappedNamedBufferRangeEXT=GLee_Lazy_glFlushMappedNamedBufferRangeEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glNamedCopyBufferSubDataEXT
+#define GLEE_C_DEFINED_glNamedCopyBufferSubDataEXT
+  void __stdcall GLee_Lazy_glNamedCopyBufferSubDataEXT(GLuint  readBuffer, GLuint  writeBuffer, GLintptr  readOffset, GLintptr  writeOffset, GLsizeiptr  size)  {if (GLeeInit()) glNamedCopyBufferSubDataEXT(readBuffer, writeBuffer, readOffset, writeOffset, size);}
+  GLEEPFNGLNAMEDCOPYBUFFERSUBDATAEXTPROC GLeeFuncPtr_glNamedCopyBufferSubDataEXT=GLee_Lazy_glNamedCopyBufferSubDataEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glGetNamedBufferParameterivEXT
+#define GLEE_C_DEFINED_glGetNamedBufferParameterivEXT
+  void __stdcall GLee_Lazy_glGetNamedBufferParameterivEXT(GLuint  buffer, GLenum  pname, GLint * params)  {if (GLeeInit()) glGetNamedBufferParameterivEXT(buffer, pname, params);}
+  GLEEPFNGLGETNAMEDBUFFERPARAMETERIVEXTPROC GLeeFuncPtr_glGetNamedBufferParameterivEXT=GLee_Lazy_glGetNamedBufferParameterivEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glGetNamedBufferPointervEXT
+#define GLEE_C_DEFINED_glGetNamedBufferPointervEXT
+  void __stdcall GLee_Lazy_glGetNamedBufferPointervEXT(GLuint  buffer, GLenum  pname, GLvoid* * params)  {if (GLeeInit()) glGetNamedBufferPointervEXT(buffer, pname, params);}
+  GLEEPFNGLGETNAMEDBUFFERPOINTERVEXTPROC GLeeFuncPtr_glGetNamedBufferPointervEXT=GLee_Lazy_glGetNamedBufferPointervEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glGetNamedBufferSubDataEXT
+#define GLEE_C_DEFINED_glGetNamedBufferSubDataEXT
+  void __stdcall GLee_Lazy_glGetNamedBufferSubDataEXT(GLuint  buffer, GLintptr  offset, GLsizeiptr  size, GLvoid * data)  {if (GLeeInit()) glGetNamedBufferSubDataEXT(buffer, offset, size, data);}
+  GLEEPFNGLGETNAMEDBUFFERSUBDATAEXTPROC GLeeFuncPtr_glGetNamedBufferSubDataEXT=GLee_Lazy_glGetNamedBufferSubDataEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glTextureBufferEXT
+#define GLEE_C_DEFINED_glTextureBufferEXT
+  void __stdcall GLee_Lazy_glTextureBufferEXT(GLuint  texture, GLenum  target, GLenum  internalformat, GLuint  buffer)  {if (GLeeInit()) glTextureBufferEXT(texture, target, internalformat, buffer);}
+  GLEEPFNGLTEXTUREBUFFEREXTPROC GLeeFuncPtr_glTextureBufferEXT=GLee_Lazy_glTextureBufferEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glMultiTexBufferEXT
+#define GLEE_C_DEFINED_glMultiTexBufferEXT
+  void __stdcall GLee_Lazy_glMultiTexBufferEXT(GLenum  texunit, GLenum  target, GLenum  internalformat, GLuint  buffer)  {if (GLeeInit()) glMultiTexBufferEXT(texunit, target, internalformat, buffer);}
+  GLEEPFNGLMULTITEXBUFFEREXTPROC GLeeFuncPtr_glMultiTexBufferEXT=GLee_Lazy_glMultiTexBufferEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glNamedRenderbufferStorageEXT
+#define GLEE_C_DEFINED_glNamedRenderbufferStorageEXT
+  void __stdcall GLee_Lazy_glNamedRenderbufferStorageEXT(GLuint  renderbuffer, GLenum  internalformat, GLsizei  width, GLsizei  height)  {if (GLeeInit()) glNamedRenderbufferStorageEXT(renderbuffer, internalformat, width, height);}
+  GLEEPFNGLNAMEDRENDERBUFFERSTORAGEEXTPROC GLeeFuncPtr_glNamedRenderbufferStorageEXT=GLee_Lazy_glNamedRenderbufferStorageEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glGetNamedRenderbufferParameterivEXT
+#define GLEE_C_DEFINED_glGetNamedRenderbufferParameterivEXT
+  void __stdcall GLee_Lazy_glGetNamedRenderbufferParameterivEXT(GLuint  renderbuffer, GLenum  pname, GLint * params)  {if (GLeeInit()) glGetNamedRenderbufferParameterivEXT(renderbuffer, pname, params);}
+  GLEEPFNGLGETNAMEDRENDERBUFFERPARAMETERIVEXTPROC GLeeFuncPtr_glGetNamedRenderbufferParameterivEXT=GLee_Lazy_glGetNamedRenderbufferParameterivEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glCheckNamedFramebufferStatusEXT
+#define GLEE_C_DEFINED_glCheckNamedFramebufferStatusEXT
+  GLenum __stdcall GLee_Lazy_glCheckNamedFramebufferStatusEXT(GLuint  framebuffer, GLenum  target)  {if (GLeeInit()) return glCheckNamedFramebufferStatusEXT(framebuffer, target); return (GLenum)0;}
+  GLEEPFNGLCHECKNAMEDFRAMEBUFFERSTATUSEXTPROC GLeeFuncPtr_glCheckNamedFramebufferStatusEXT=GLee_Lazy_glCheckNamedFramebufferStatusEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glNamedFramebufferTexture1DEXT
+#define GLEE_C_DEFINED_glNamedFramebufferTexture1DEXT
+  void __stdcall GLee_Lazy_glNamedFramebufferTexture1DEXT(GLuint  framebuffer, GLenum  attachment, GLenum  textarget, GLuint  texture, GLint  level)  {if (GLeeInit()) glNamedFramebufferTexture1DEXT(framebuffer, attachment, textarget, texture, level);}
+  GLEEPFNGLNAMEDFRAMEBUFFERTEXTURE1DEXTPROC GLeeFuncPtr_glNamedFramebufferTexture1DEXT=GLee_Lazy_glNamedFramebufferTexture1DEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glNamedFramebufferTexture2DEXT
+#define GLEE_C_DEFINED_glNamedFramebufferTexture2DEXT
+  void __stdcall GLee_Lazy_glNamedFramebufferTexture2DEXT(GLuint  framebuffer, GLenum  attachment, GLenum  textarget, GLuint  texture, GLint  level)  {if (GLeeInit()) glNamedFramebufferTexture2DEXT(framebuffer, attachment, textarget, texture, level);}
+  GLEEPFNGLNAMEDFRAMEBUFFERTEXTURE2DEXTPROC GLeeFuncPtr_glNamedFramebufferTexture2DEXT=GLee_Lazy_glNamedFramebufferTexture2DEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glNamedFramebufferTexture3DEXT
+#define GLEE_C_DEFINED_glNamedFramebufferTexture3DEXT
+  void __stdcall GLee_Lazy_glNamedFramebufferTexture3DEXT(GLuint  framebuffer, GLenum  attachment, GLenum  textarget, GLuint  texture, GLint  level, GLint  zoffset)  {if (GLeeInit()) glNamedFramebufferTexture3DEXT(framebuffer, attachment, textarget, texture, level, zoffset);}
+  GLEEPFNGLNAMEDFRAMEBUFFERTEXTURE3DEXTPROC GLeeFuncPtr_glNamedFramebufferTexture3DEXT=GLee_Lazy_glNamedFramebufferTexture3DEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glNamedFramebufferRenderbufferEXT
+#define GLEE_C_DEFINED_glNamedFramebufferRenderbufferEXT
+  void __stdcall GLee_Lazy_glNamedFramebufferRenderbufferEXT(GLuint  framebuffer, GLenum  attachment, GLenum  renderbuffertarget, GLuint  renderbuffer)  {if (GLeeInit()) glNamedFramebufferRenderbufferEXT(framebuffer, attachment, renderbuffertarget, renderbuffer);}
+  GLEEPFNGLNAMEDFRAMEBUFFERRENDERBUFFEREXTPROC GLeeFuncPtr_glNamedFramebufferRenderbufferEXT=GLee_Lazy_glNamedFramebufferRenderbufferEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glGetNamedFramebufferAttachmentParameterivEXT
+#define GLEE_C_DEFINED_glGetNamedFramebufferAttachmentParameterivEXT
+  void __stdcall GLee_Lazy_glGetNamedFramebufferAttachmentParameterivEXT(GLuint  framebuffer, GLenum  attachment, GLenum  pname, GLint * params)  {if (GLeeInit()) glGetNamedFramebufferAttachmentParameterivEXT(framebuffer, attachment, pname, params);}
+  GLEEPFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC GLeeFuncPtr_glGetNamedFramebufferAttachmentParameterivEXT=GLee_Lazy_glGetNamedFramebufferAttachmentParameterivEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glGenerateTextureMipmapEXT
+#define GLEE_C_DEFINED_glGenerateTextureMipmapEXT
+  void __stdcall GLee_Lazy_glGenerateTextureMipmapEXT(GLuint  texture, GLenum  target)  {if (GLeeInit()) glGenerateTextureMipmapEXT(texture, target);}
+  GLEEPFNGLGENERATETEXTUREMIPMAPEXTPROC GLeeFuncPtr_glGenerateTextureMipmapEXT=GLee_Lazy_glGenerateTextureMipmapEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glGenerateMultiTexMipmapEXT
+#define GLEE_C_DEFINED_glGenerateMultiTexMipmapEXT
+  void __stdcall GLee_Lazy_glGenerateMultiTexMipmapEXT(GLenum  texunit, GLenum  target)  {if (GLeeInit()) glGenerateMultiTexMipmapEXT(texunit, target);}
+  GLEEPFNGLGENERATEMULTITEXMIPMAPEXTPROC GLeeFuncPtr_glGenerateMultiTexMipmapEXT=GLee_Lazy_glGenerateMultiTexMipmapEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glFramebufferDrawBufferEXT
+#define GLEE_C_DEFINED_glFramebufferDrawBufferEXT
+  void __stdcall GLee_Lazy_glFramebufferDrawBufferEXT(GLuint  framebuffer, GLenum  mode)  {if (GLeeInit()) glFramebufferDrawBufferEXT(framebuffer, mode);}
+  GLEEPFNGLFRAMEBUFFERDRAWBUFFEREXTPROC GLeeFuncPtr_glFramebufferDrawBufferEXT=GLee_Lazy_glFramebufferDrawBufferEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glFramebufferDrawBuffersEXT
+#define GLEE_C_DEFINED_glFramebufferDrawBuffersEXT
+  void __stdcall GLee_Lazy_glFramebufferDrawBuffersEXT(GLuint  framebuffer, GLsizei  n, const GLenum * bufs)  {if (GLeeInit()) glFramebufferDrawBuffersEXT(framebuffer, n, bufs);}
+  GLEEPFNGLFRAMEBUFFERDRAWBUFFERSEXTPROC GLeeFuncPtr_glFramebufferDrawBuffersEXT=GLee_Lazy_glFramebufferDrawBuffersEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glFramebufferReadBufferEXT
+#define GLEE_C_DEFINED_glFramebufferReadBufferEXT
+  void __stdcall GLee_Lazy_glFramebufferReadBufferEXT(GLuint  framebuffer, GLenum  mode)  {if (GLeeInit()) glFramebufferReadBufferEXT(framebuffer, mode);}
+  GLEEPFNGLFRAMEBUFFERREADBUFFEREXTPROC GLeeFuncPtr_glFramebufferReadBufferEXT=GLee_Lazy_glFramebufferReadBufferEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glGetFramebufferParameterivEXT
+#define GLEE_C_DEFINED_glGetFramebufferParameterivEXT
+  void __stdcall GLee_Lazy_glGetFramebufferParameterivEXT(GLuint  framebuffer, GLenum  pname, GLint * params)  {if (GLeeInit()) glGetFramebufferParameterivEXT(framebuffer, pname, params);}
+  GLEEPFNGLGETFRAMEBUFFERPARAMETERIVEXTPROC GLeeFuncPtr_glGetFramebufferParameterivEXT=GLee_Lazy_glGetFramebufferParameterivEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glNamedRenderbufferStorageMultisampleEXT
+#define GLEE_C_DEFINED_glNamedRenderbufferStorageMultisampleEXT
+  void __stdcall GLee_Lazy_glNamedRenderbufferStorageMultisampleEXT(GLuint  renderbuffer, GLsizei  samples, GLenum  internalformat, GLsizei  width, GLsizei  height)  {if (GLeeInit()) glNamedRenderbufferStorageMultisampleEXT(renderbuffer, samples, internalformat, width, height);}
+  GLEEPFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC GLeeFuncPtr_glNamedRenderbufferStorageMultisampleEXT=GLee_Lazy_glNamedRenderbufferStorageMultisampleEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glNamedRenderbufferStorageMultisampleCoverageEXT
+#define GLEE_C_DEFINED_glNamedRenderbufferStorageMultisampleCoverageEXT
+  void __stdcall GLee_Lazy_glNamedRenderbufferStorageMultisampleCoverageEXT(GLuint  renderbuffer, GLsizei  coverageSamples, GLsizei  colorSamples, GLenum  internalformat, GLsizei  width, GLsizei  height)  {if (GLeeInit()) glNamedRenderbufferStorageMultisampleCoverageEXT(renderbuffer, coverageSamples, colorSamples, internalformat, width, height);}
+  GLEEPFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXTPROC GLeeFuncPtr_glNamedRenderbufferStorageMultisampleCoverageEXT=GLee_Lazy_glNamedRenderbufferStorageMultisampleCoverageEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glNamedFramebufferTextureEXT
+#define GLEE_C_DEFINED_glNamedFramebufferTextureEXT
+  void __stdcall GLee_Lazy_glNamedFramebufferTextureEXT(GLuint  framebuffer, GLenum  attachment, GLuint  texture, GLint  level)  {if (GLeeInit()) glNamedFramebufferTextureEXT(framebuffer, attachment, texture, level);}
+  GLEEPFNGLNAMEDFRAMEBUFFERTEXTUREEXTPROC GLeeFuncPtr_glNamedFramebufferTextureEXT=GLee_Lazy_glNamedFramebufferTextureEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glNamedFramebufferTextureLayerEXT
+#define GLEE_C_DEFINED_glNamedFramebufferTextureLayerEXT
+  void __stdcall GLee_Lazy_glNamedFramebufferTextureLayerEXT(GLuint  framebuffer, GLenum  attachment, GLuint  texture, GLint  level, GLint  layer)  {if (GLeeInit()) glNamedFramebufferTextureLayerEXT(framebuffer, attachment, texture, level, layer);}
+  GLEEPFNGLNAMEDFRAMEBUFFERTEXTURELAYEREXTPROC GLeeFuncPtr_glNamedFramebufferTextureLayerEXT=GLee_Lazy_glNamedFramebufferTextureLayerEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glNamedFramebufferTextureFaceEXT
+#define GLEE_C_DEFINED_glNamedFramebufferTextureFaceEXT
+  void __stdcall GLee_Lazy_glNamedFramebufferTextureFaceEXT(GLuint  framebuffer, GLenum  attachment, GLuint  texture, GLint  level, GLenum  face)  {if (GLeeInit()) glNamedFramebufferTextureFaceEXT(framebuffer, attachment, texture, level, face);}
+  GLEEPFNGLNAMEDFRAMEBUFFERTEXTUREFACEEXTPROC GLeeFuncPtr_glNamedFramebufferTextureFaceEXT=GLee_Lazy_glNamedFramebufferTextureFaceEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glTextureRenderbufferEXT
+#define GLEE_C_DEFINED_glTextureRenderbufferEXT
+  void __stdcall GLee_Lazy_glTextureRenderbufferEXT(GLuint  texture, GLenum  target, GLuint  renderbuffer)  {if (GLeeInit()) glTextureRenderbufferEXT(texture, target, renderbuffer);}
+  GLEEPFNGLTEXTURERENDERBUFFEREXTPROC GLeeFuncPtr_glTextureRenderbufferEXT=GLee_Lazy_glTextureRenderbufferEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glMultiTexRenderbufferEXT
+#define GLEE_C_DEFINED_glMultiTexRenderbufferEXT
+  void __stdcall GLee_Lazy_glMultiTexRenderbufferEXT(GLenum  texunit, GLenum  target, GLuint  renderbuffer)  {if (GLeeInit()) glMultiTexRenderbufferEXT(texunit, target, renderbuffer);}
+  GLEEPFNGLMULTITEXRENDERBUFFEREXTPROC GLeeFuncPtr_glMultiTexRenderbufferEXT=GLee_Lazy_glMultiTexRenderbufferEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramUniform1dEXT
+#define GLEE_C_DEFINED_glProgramUniform1dEXT
+  void __stdcall GLee_Lazy_glProgramUniform1dEXT(GLuint  program, GLint  location, GLdouble  x)  {if (GLeeInit()) glProgramUniform1dEXT(program, location, x);}
+  GLEEPFNGLPROGRAMUNIFORM1DEXTPROC GLeeFuncPtr_glProgramUniform1dEXT=GLee_Lazy_glProgramUniform1dEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramUniform2dEXT
+#define GLEE_C_DEFINED_glProgramUniform2dEXT
+  void __stdcall GLee_Lazy_glProgramUniform2dEXT(GLuint  program, GLint  location, GLdouble  x, GLdouble  y)  {if (GLeeInit()) glProgramUniform2dEXT(program, location, x, y);}
+  GLEEPFNGLPROGRAMUNIFORM2DEXTPROC GLeeFuncPtr_glProgramUniform2dEXT=GLee_Lazy_glProgramUniform2dEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramUniform3dEXT
+#define GLEE_C_DEFINED_glProgramUniform3dEXT
+  void __stdcall GLee_Lazy_glProgramUniform3dEXT(GLuint  program, GLint  location, GLdouble  x, GLdouble  y, GLdouble  z)  {if (GLeeInit()) glProgramUniform3dEXT(program, location, x, y, z);}
+  GLEEPFNGLPROGRAMUNIFORM3DEXTPROC GLeeFuncPtr_glProgramUniform3dEXT=GLee_Lazy_glProgramUniform3dEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramUniform4dEXT
+#define GLEE_C_DEFINED_glProgramUniform4dEXT
+  void __stdcall GLee_Lazy_glProgramUniform4dEXT(GLuint  program, GLint  location, GLdouble  x, GLdouble  y, GLdouble  z, GLdouble  w)  {if (GLeeInit()) glProgramUniform4dEXT(program, location, x, y, z, w);}
+  GLEEPFNGLPROGRAMUNIFORM4DEXTPROC GLeeFuncPtr_glProgramUniform4dEXT=GLee_Lazy_glProgramUniform4dEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramUniform1dvEXT
+#define GLEE_C_DEFINED_glProgramUniform1dvEXT
+  void __stdcall GLee_Lazy_glProgramUniform1dvEXT(GLuint  program, GLint  location, GLsizei  count, const GLdouble * value)  {if (GLeeInit()) glProgramUniform1dvEXT(program, location, count, value);}
+  GLEEPFNGLPROGRAMUNIFORM1DVEXTPROC GLeeFuncPtr_glProgramUniform1dvEXT=GLee_Lazy_glProgramUniform1dvEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramUniform2dvEXT
+#define GLEE_C_DEFINED_glProgramUniform2dvEXT
+  void __stdcall GLee_Lazy_glProgramUniform2dvEXT(GLuint  program, GLint  location, GLsizei  count, const GLdouble * value)  {if (GLeeInit()) glProgramUniform2dvEXT(program, location, count, value);}
+  GLEEPFNGLPROGRAMUNIFORM2DVEXTPROC GLeeFuncPtr_glProgramUniform2dvEXT=GLee_Lazy_glProgramUniform2dvEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramUniform3dvEXT
+#define GLEE_C_DEFINED_glProgramUniform3dvEXT
+  void __stdcall GLee_Lazy_glProgramUniform3dvEXT(GLuint  program, GLint  location, GLsizei  count, const GLdouble * value)  {if (GLeeInit()) glProgramUniform3dvEXT(program, location, count, value);}
+  GLEEPFNGLPROGRAMUNIFORM3DVEXTPROC GLeeFuncPtr_glProgramUniform3dvEXT=GLee_Lazy_glProgramUniform3dvEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramUniform4dvEXT
+#define GLEE_C_DEFINED_glProgramUniform4dvEXT
+  void __stdcall GLee_Lazy_glProgramUniform4dvEXT(GLuint  program, GLint  location, GLsizei  count, const GLdouble * value)  {if (GLeeInit()) glProgramUniform4dvEXT(program, location, count, value);}
+  GLEEPFNGLPROGRAMUNIFORM4DVEXTPROC GLeeFuncPtr_glProgramUniform4dvEXT=GLee_Lazy_glProgramUniform4dvEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramUniformMatrix2dvEXT
+#define GLEE_C_DEFINED_glProgramUniformMatrix2dvEXT
+  void __stdcall GLee_Lazy_glProgramUniformMatrix2dvEXT(GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value)  {if (GLeeInit()) glProgramUniformMatrix2dvEXT(program, location, count, transpose, value);}
+  GLEEPFNGLPROGRAMUNIFORMMATRIX2DVEXTPROC GLeeFuncPtr_glProgramUniformMatrix2dvEXT=GLee_Lazy_glProgramUniformMatrix2dvEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramUniformMatrix3dvEXT
+#define GLEE_C_DEFINED_glProgramUniformMatrix3dvEXT
+  void __stdcall GLee_Lazy_glProgramUniformMatrix3dvEXT(GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value)  {if (GLeeInit()) glProgramUniformMatrix3dvEXT(program, location, count, transpose, value);}
+  GLEEPFNGLPROGRAMUNIFORMMATRIX3DVEXTPROC GLeeFuncPtr_glProgramUniformMatrix3dvEXT=GLee_Lazy_glProgramUniformMatrix3dvEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramUniformMatrix4dvEXT
+#define GLEE_C_DEFINED_glProgramUniformMatrix4dvEXT
+  void __stdcall GLee_Lazy_glProgramUniformMatrix4dvEXT(GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value)  {if (GLeeInit()) glProgramUniformMatrix4dvEXT(program, location, count, transpose, value);}
+  GLEEPFNGLPROGRAMUNIFORMMATRIX4DVEXTPROC GLeeFuncPtr_glProgramUniformMatrix4dvEXT=GLee_Lazy_glProgramUniformMatrix4dvEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramUniformMatrix2x3dvEXT
+#define GLEE_C_DEFINED_glProgramUniformMatrix2x3dvEXT
+  void __stdcall GLee_Lazy_glProgramUniformMatrix2x3dvEXT(GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value)  {if (GLeeInit()) glProgramUniformMatrix2x3dvEXT(program, location, count, transpose, value);}
+  GLEEPFNGLPROGRAMUNIFORMMATRIX2X3DVEXTPROC GLeeFuncPtr_glProgramUniformMatrix2x3dvEXT=GLee_Lazy_glProgramUniformMatrix2x3dvEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramUniformMatrix2x4dvEXT
+#define GLEE_C_DEFINED_glProgramUniformMatrix2x4dvEXT
+  void __stdcall GLee_Lazy_glProgramUniformMatrix2x4dvEXT(GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value)  {if (GLeeInit()) glProgramUniformMatrix2x4dvEXT(program, location, count, transpose, value);}
+  GLEEPFNGLPROGRAMUNIFORMMATRIX2X4DVEXTPROC GLeeFuncPtr_glProgramUniformMatrix2x4dvEXT=GLee_Lazy_glProgramUniformMatrix2x4dvEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramUniformMatrix3x2dvEXT
+#define GLEE_C_DEFINED_glProgramUniformMatrix3x2dvEXT
+  void __stdcall GLee_Lazy_glProgramUniformMatrix3x2dvEXT(GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value)  {if (GLeeInit()) glProgramUniformMatrix3x2dvEXT(program, location, count, transpose, value);}
+  GLEEPFNGLPROGRAMUNIFORMMATRIX3X2DVEXTPROC GLeeFuncPtr_glProgramUniformMatrix3x2dvEXT=GLee_Lazy_glProgramUniformMatrix3x2dvEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramUniformMatrix3x4dvEXT
+#define GLEE_C_DEFINED_glProgramUniformMatrix3x4dvEXT
+  void __stdcall GLee_Lazy_glProgramUniformMatrix3x4dvEXT(GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value)  {if (GLeeInit()) glProgramUniformMatrix3x4dvEXT(program, location, count, transpose, value);}
+  GLEEPFNGLPROGRAMUNIFORMMATRIX3X4DVEXTPROC GLeeFuncPtr_glProgramUniformMatrix3x4dvEXT=GLee_Lazy_glProgramUniformMatrix3x4dvEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramUniformMatrix4x2dvEXT
+#define GLEE_C_DEFINED_glProgramUniformMatrix4x2dvEXT
+  void __stdcall GLee_Lazy_glProgramUniformMatrix4x2dvEXT(GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value)  {if (GLeeInit()) glProgramUniformMatrix4x2dvEXT(program, location, count, transpose, value);}
+  GLEEPFNGLPROGRAMUNIFORMMATRIX4X2DVEXTPROC GLeeFuncPtr_glProgramUniformMatrix4x2dvEXT=GLee_Lazy_glProgramUniformMatrix4x2dvEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramUniformMatrix4x3dvEXT
+#define GLEE_C_DEFINED_glProgramUniformMatrix4x3dvEXT
+  void __stdcall GLee_Lazy_glProgramUniformMatrix4x3dvEXT(GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value)  {if (GLeeInit()) glProgramUniformMatrix4x3dvEXT(program, location, count, transpose, value);}
+  GLEEPFNGLPROGRAMUNIFORMMATRIX4X3DVEXTPROC GLeeFuncPtr_glProgramUniformMatrix4x3dvEXT=GLee_Lazy_glProgramUniformMatrix4x3dvEXT;
+#endif
+#endif 
+
+/* GL_EXT_vertex_array_bgra */
+
+#ifdef __GLEE_GL_EXT_vertex_array_bgra
+#endif 
+
+/* GL_EXT_texture_swizzle */
+
+#ifdef __GLEE_GL_EXT_texture_swizzle
+#endif 
+
+/* GL_NV_explicit_multisample */
+
+#ifdef __GLEE_GL_NV_explicit_multisample
+#ifndef GLEE_C_DEFINED_glGetMultisamplefvNV
+#define GLEE_C_DEFINED_glGetMultisamplefvNV
+  void __stdcall GLee_Lazy_glGetMultisamplefvNV(GLenum  pname, GLuint  index, GLfloat * val)  {if (GLeeInit()) glGetMultisamplefvNV(pname, index, val);}
+  GLEEPFNGLGETMULTISAMPLEFVNVPROC GLeeFuncPtr_glGetMultisamplefvNV=GLee_Lazy_glGetMultisamplefvNV;
+#endif
+#ifndef GLEE_C_DEFINED_glSampleMaskIndexedNV
+#define GLEE_C_DEFINED_glSampleMaskIndexedNV
+  void __stdcall GLee_Lazy_glSampleMaskIndexedNV(GLuint  index, GLbitfield  mask)  {if (GLeeInit()) glSampleMaskIndexedNV(index, mask);}
+  GLEEPFNGLSAMPLEMASKINDEXEDNVPROC GLeeFuncPtr_glSampleMaskIndexedNV=GLee_Lazy_glSampleMaskIndexedNV;
+#endif
+#ifndef GLEE_C_DEFINED_glTexRenderbufferNV
+#define GLEE_C_DEFINED_glTexRenderbufferNV
+  void __stdcall GLee_Lazy_glTexRenderbufferNV(GLenum  target, GLuint  renderbuffer)  {if (GLeeInit()) glTexRenderbufferNV(target, renderbuffer);}
+  GLEEPFNGLTEXRENDERBUFFERNVPROC GLeeFuncPtr_glTexRenderbufferNV=GLee_Lazy_glTexRenderbufferNV;
+#endif
+#endif 
+
+/* GL_NV_transform_feedback2 */
+
+#ifdef __GLEE_GL_NV_transform_feedback2
+#ifndef GLEE_C_DEFINED_glBindTransformFeedbackNV
+#define GLEE_C_DEFINED_glBindTransformFeedbackNV
+  void __stdcall GLee_Lazy_glBindTransformFeedbackNV(GLenum  target, GLuint  id)  {if (GLeeInit()) glBindTransformFeedbackNV(target, id);}
+  GLEEPFNGLBINDTRANSFORMFEEDBACKNVPROC GLeeFuncPtr_glBindTransformFeedbackNV=GLee_Lazy_glBindTransformFeedbackNV;
+#endif
+#ifndef GLEE_C_DEFINED_glDeleteTransformFeedbacksNV
+#define GLEE_C_DEFINED_glDeleteTransformFeedbacksNV
+  void __stdcall GLee_Lazy_glDeleteTransformFeedbacksNV(GLsizei  n, const GLuint * ids)  {if (GLeeInit()) glDeleteTransformFeedbacksNV(n, ids);}
+  GLEEPFNGLDELETETRANSFORMFEEDBACKSNVPROC GLeeFuncPtr_glDeleteTransformFeedbacksNV=GLee_Lazy_glDeleteTransformFeedbacksNV;
+#endif
+#ifndef GLEE_C_DEFINED_glGenTransformFeedbacksNV
+#define GLEE_C_DEFINED_glGenTransformFeedbacksNV
+  void __stdcall GLee_Lazy_glGenTransformFeedbacksNV(GLsizei  n, GLuint * ids)  {if (GLeeInit()) glGenTransformFeedbacksNV(n, ids);}
+  GLEEPFNGLGENTRANSFORMFEEDBACKSNVPROC GLeeFuncPtr_glGenTransformFeedbacksNV=GLee_Lazy_glGenTransformFeedbacksNV;
+#endif
+#ifndef GLEE_C_DEFINED_glIsTransformFeedbackNV
+#define GLEE_C_DEFINED_glIsTransformFeedbackNV
+  GLboolean __stdcall GLee_Lazy_glIsTransformFeedbackNV(GLuint  id)  {if (GLeeInit()) return glIsTransformFeedbackNV(id); return (GLboolean)0;}
+  GLEEPFNGLISTRANSFORMFEEDBACKNVPROC GLeeFuncPtr_glIsTransformFeedbackNV=GLee_Lazy_glIsTransformFeedbackNV;
+#endif
+#ifndef GLEE_C_DEFINED_glPauseTransformFeedbackNV
+#define GLEE_C_DEFINED_glPauseTransformFeedbackNV
+  void __stdcall GLee_Lazy_glPauseTransformFeedbackNV(void)  {if (GLeeInit()) glPauseTransformFeedbackNV();}
+  GLEEPFNGLPAUSETRANSFORMFEEDBACKNVPROC GLeeFuncPtr_glPauseTransformFeedbackNV=GLee_Lazy_glPauseTransformFeedbackNV;
+#endif
+#ifndef GLEE_C_DEFINED_glResumeTransformFeedbackNV
+#define GLEE_C_DEFINED_glResumeTransformFeedbackNV
+  void __stdcall GLee_Lazy_glResumeTransformFeedbackNV(void)  {if (GLeeInit()) glResumeTransformFeedbackNV();}
+  GLEEPFNGLRESUMETRANSFORMFEEDBACKNVPROC GLeeFuncPtr_glResumeTransformFeedbackNV=GLee_Lazy_glResumeTransformFeedbackNV;
+#endif
+#ifndef GLEE_C_DEFINED_glDrawTransformFeedbackNV
+#define GLEE_C_DEFINED_glDrawTransformFeedbackNV
+  void __stdcall GLee_Lazy_glDrawTransformFeedbackNV(GLenum  mode, GLuint  id)  {if (GLeeInit()) glDrawTransformFeedbackNV(mode, id);}
+  GLEEPFNGLDRAWTRANSFORMFEEDBACKNVPROC GLeeFuncPtr_glDrawTransformFeedbackNV=GLee_Lazy_glDrawTransformFeedbackNV;
+#endif
+#endif 
+
+/* GL_ATI_meminfo */
+
+#ifdef __GLEE_GL_ATI_meminfo
+#endif 
+
+/* GL_AMD_performance_monitor */
+
+#ifdef __GLEE_GL_AMD_performance_monitor
+#ifndef GLEE_C_DEFINED_glGetPerfMonitorGroupsAMD
+#define GLEE_C_DEFINED_glGetPerfMonitorGroupsAMD
+  void __stdcall GLee_Lazy_glGetPerfMonitorGroupsAMD(GLint * numGroups, GLsizei  groupsSize, GLuint * groups)  {if (GLeeInit()) glGetPerfMonitorGroupsAMD(numGroups, groupsSize, groups);}
+  GLEEPFNGLGETPERFMONITORGROUPSAMDPROC GLeeFuncPtr_glGetPerfMonitorGroupsAMD=GLee_Lazy_glGetPerfMonitorGroupsAMD;
+#endif
+#ifndef GLEE_C_DEFINED_glGetPerfMonitorCountersAMD
+#define GLEE_C_DEFINED_glGetPerfMonitorCountersAMD
+  void __stdcall GLee_Lazy_glGetPerfMonitorCountersAMD(GLuint  group, GLint * numCounters, GLint * maxActiveCounters, GLsizei  counterSize, GLuint * counters)  {if (GLeeInit()) glGetPerfMonitorCountersAMD(group, numCounters, maxActiveCounters, counterSize, counters);}
+  GLEEPFNGLGETPERFMONITORCOUNTERSAMDPROC GLeeFuncPtr_glGetPerfMonitorCountersAMD=GLee_Lazy_glGetPerfMonitorCountersAMD;
+#endif
+#ifndef GLEE_C_DEFINED_glGetPerfMonitorGroupStringAMD
+#define GLEE_C_DEFINED_glGetPerfMonitorGroupStringAMD
+  void __stdcall GLee_Lazy_glGetPerfMonitorGroupStringAMD(GLuint  group, GLsizei  bufSize, GLsizei * length, GLchar * groupString)  {if (GLeeInit()) glGetPerfMonitorGroupStringAMD(group, bufSize, length, groupString);}
+  GLEEPFNGLGETPERFMONITORGROUPSTRINGAMDPROC GLeeFuncPtr_glGetPerfMonitorGroupStringAMD=GLee_Lazy_glGetPerfMonitorGroupStringAMD;
+#endif
+#ifndef GLEE_C_DEFINED_glGetPerfMonitorCounterStringAMD
+#define GLEE_C_DEFINED_glGetPerfMonitorCounterStringAMD
+  void __stdcall GLee_Lazy_glGetPerfMonitorCounterStringAMD(GLuint  group, GLuint  counter, GLsizei  bufSize, GLsizei * length, GLchar * counterString)  {if (GLeeInit()) glGetPerfMonitorCounterStringAMD(group, counter, bufSize, length, counterString);}
+  GLEEPFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC GLeeFuncPtr_glGetPerfMonitorCounterStringAMD=GLee_Lazy_glGetPerfMonitorCounterStringAMD;
+#endif
+#ifndef GLEE_C_DEFINED_glGetPerfMonitorCounterInfoAMD
+#define GLEE_C_DEFINED_glGetPerfMonitorCounterInfoAMD
+  void __stdcall GLee_Lazy_glGetPerfMonitorCounterInfoAMD(GLuint  group, GLuint  counter, GLenum  pname, GLvoid * data)  {if (GLeeInit()) glGetPerfMonitorCounterInfoAMD(group, counter, pname, data);}
+  GLEEPFNGLGETPERFMONITORCOUNTERINFOAMDPROC GLeeFuncPtr_glGetPerfMonitorCounterInfoAMD=GLee_Lazy_glGetPerfMonitorCounterInfoAMD;
+#endif
+#ifndef GLEE_C_DEFINED_glGenPerfMonitorsAMD
+#define GLEE_C_DEFINED_glGenPerfMonitorsAMD
+  void __stdcall GLee_Lazy_glGenPerfMonitorsAMD(GLsizei  n, GLuint * monitors)  {if (GLeeInit()) glGenPerfMonitorsAMD(n, monitors);}
+  GLEEPFNGLGENPERFMONITORSAMDPROC GLeeFuncPtr_glGenPerfMonitorsAMD=GLee_Lazy_glGenPerfMonitorsAMD;
+#endif
+#ifndef GLEE_C_DEFINED_glDeletePerfMonitorsAMD
+#define GLEE_C_DEFINED_glDeletePerfMonitorsAMD
+  void __stdcall GLee_Lazy_glDeletePerfMonitorsAMD(GLsizei  n, GLuint * monitors)  {if (GLeeInit()) glDeletePerfMonitorsAMD(n, monitors);}
+  GLEEPFNGLDELETEPERFMONITORSAMDPROC GLeeFuncPtr_glDeletePerfMonitorsAMD=GLee_Lazy_glDeletePerfMonitorsAMD;
+#endif
+#ifndef GLEE_C_DEFINED_glSelectPerfMonitorCountersAMD
+#define GLEE_C_DEFINED_glSelectPerfMonitorCountersAMD
+  void __stdcall GLee_Lazy_glSelectPerfMonitorCountersAMD(GLuint  monitor, GLboolean  enable, GLuint  group, GLint  numCounters, GLuint * counterList)  {if (GLeeInit()) glSelectPerfMonitorCountersAMD(monitor, enable, group, numCounters, counterList);}
+  GLEEPFNGLSELECTPERFMONITORCOUNTERSAMDPROC GLeeFuncPtr_glSelectPerfMonitorCountersAMD=GLee_Lazy_glSelectPerfMonitorCountersAMD;
+#endif
+#ifndef GLEE_C_DEFINED_glBeginPerfMonitorAMD
+#define GLEE_C_DEFINED_glBeginPerfMonitorAMD
+  void __stdcall GLee_Lazy_glBeginPerfMonitorAMD(GLuint  monitor)  {if (GLeeInit()) glBeginPerfMonitorAMD(monitor);}
+  GLEEPFNGLBEGINPERFMONITORAMDPROC GLeeFuncPtr_glBeginPerfMonitorAMD=GLee_Lazy_glBeginPerfMonitorAMD;
+#endif
+#ifndef GLEE_C_DEFINED_glEndPerfMonitorAMD
+#define GLEE_C_DEFINED_glEndPerfMonitorAMD
+  void __stdcall GLee_Lazy_glEndPerfMonitorAMD(GLuint  monitor)  {if (GLeeInit()) glEndPerfMonitorAMD(monitor);}
+  GLEEPFNGLENDPERFMONITORAMDPROC GLeeFuncPtr_glEndPerfMonitorAMD=GLee_Lazy_glEndPerfMonitorAMD;
+#endif
+#ifndef GLEE_C_DEFINED_glGetPerfMonitorCounterDataAMD
+#define GLEE_C_DEFINED_glGetPerfMonitorCounterDataAMD
+  void __stdcall GLee_Lazy_glGetPerfMonitorCounterDataAMD(GLuint  monitor, GLenum  pname, GLsizei  dataSize, GLuint * data, GLint * bytesWritten)  {if (GLeeInit()) glGetPerfMonitorCounterDataAMD(monitor, pname, dataSize, data, bytesWritten);}
+  GLEEPFNGLGETPERFMONITORCOUNTERDATAAMDPROC GLeeFuncPtr_glGetPerfMonitorCounterDataAMD=GLee_Lazy_glGetPerfMonitorCounterDataAMD;
+#endif
+#endif 
+
+/* GL_AMD_texture_texture4 */
+
+#ifdef __GLEE_GL_AMD_texture_texture4
+#endif 
+
+/* GL_AMD_vertex_shader_tesselator */
+
+#ifdef __GLEE_GL_AMD_vertex_shader_tesselator
+#ifndef GLEE_C_DEFINED_glTessellationFactorAMD
+#define GLEE_C_DEFINED_glTessellationFactorAMD
+  void __stdcall GLee_Lazy_glTessellationFactorAMD(GLfloat  factor)  {if (GLeeInit()) glTessellationFactorAMD(factor);}
+  GLEEPFNGLTESSELLATIONFACTORAMDPROC GLeeFuncPtr_glTessellationFactorAMD=GLee_Lazy_glTessellationFactorAMD;
+#endif
+#ifndef GLEE_C_DEFINED_glTessellationModeAMD
+#define GLEE_C_DEFINED_glTessellationModeAMD
+  void __stdcall GLee_Lazy_glTessellationModeAMD(GLenum  mode)  {if (GLeeInit()) glTessellationModeAMD(mode);}
+  GLEEPFNGLTESSELLATIONMODEAMDPROC GLeeFuncPtr_glTessellationModeAMD=GLee_Lazy_glTessellationModeAMD;
+#endif
+#endif 
+
+/* GL_EXT_provoking_vertex */
+
+#ifdef __GLEE_GL_EXT_provoking_vertex
+#ifndef GLEE_C_DEFINED_glProvokingVertexEXT
+#define GLEE_C_DEFINED_glProvokingVertexEXT
+  void __stdcall GLee_Lazy_glProvokingVertexEXT(GLenum  mode)  {if (GLeeInit()) glProvokingVertexEXT(mode);}
+  GLEEPFNGLPROVOKINGVERTEXEXTPROC GLeeFuncPtr_glProvokingVertexEXT=GLee_Lazy_glProvokingVertexEXT;
+#endif
+#endif 
+
+/* GL_EXT_texture_snorm */
+
+#ifdef __GLEE_GL_EXT_texture_snorm
+#endif 
+
+/* GL_AMD_draw_buffers_blend */
+
+#ifdef __GLEE_GL_AMD_draw_buffers_blend
+#ifndef GLEE_C_DEFINED_glBlendFuncIndexedAMD
+#define GLEE_C_DEFINED_glBlendFuncIndexedAMD
+  void __stdcall GLee_Lazy_glBlendFuncIndexedAMD(GLuint  buf, GLenum  src, GLenum  dst)  {if (GLeeInit()) glBlendFuncIndexedAMD(buf, src, dst);}
+  GLEEPFNGLBLENDFUNCINDEXEDAMDPROC GLeeFuncPtr_glBlendFuncIndexedAMD=GLee_Lazy_glBlendFuncIndexedAMD;
+#endif
+#ifndef GLEE_C_DEFINED_glBlendFuncSeparateIndexedAMD
+#define GLEE_C_DEFINED_glBlendFuncSeparateIndexedAMD
+  void __stdcall GLee_Lazy_glBlendFuncSeparateIndexedAMD(GLuint  buf, GLenum  srcRGB, GLenum  dstRGB, GLenum  srcAlpha, GLenum  dstAlpha)  {if (GLeeInit()) glBlendFuncSeparateIndexedAMD(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);}
+  GLEEPFNGLBLENDFUNCSEPARATEINDEXEDAMDPROC GLeeFuncPtr_glBlendFuncSeparateIndexedAMD=GLee_Lazy_glBlendFuncSeparateIndexedAMD;
+#endif
+#ifndef GLEE_C_DEFINED_glBlendEquationIndexedAMD
+#define GLEE_C_DEFINED_glBlendEquationIndexedAMD
+  void __stdcall GLee_Lazy_glBlendEquationIndexedAMD(GLuint  buf, GLenum  mode)  {if (GLeeInit()) glBlendEquationIndexedAMD(buf, mode);}
+  GLEEPFNGLBLENDEQUATIONINDEXEDAMDPROC GLeeFuncPtr_glBlendEquationIndexedAMD=GLee_Lazy_glBlendEquationIndexedAMD;
+#endif
+#ifndef GLEE_C_DEFINED_glBlendEquationSeparateIndexedAMD
+#define GLEE_C_DEFINED_glBlendEquationSeparateIndexedAMD
+  void __stdcall GLee_Lazy_glBlendEquationSeparateIndexedAMD(GLuint  buf, GLenum  modeRGB, GLenum  modeAlpha)  {if (GLeeInit()) glBlendEquationSeparateIndexedAMD(buf, modeRGB, modeAlpha);}
+  GLEEPFNGLBLENDEQUATIONSEPARATEINDEXEDAMDPROC GLeeFuncPtr_glBlendEquationSeparateIndexedAMD=GLee_Lazy_glBlendEquationSeparateIndexedAMD;
+#endif
+#endif 
+
+/* GL_APPLE_texture_range */
+
+#ifdef __GLEE_GL_APPLE_texture_range
+#ifndef GLEE_C_DEFINED_glTextureRangeAPPLE
+#define GLEE_C_DEFINED_glTextureRangeAPPLE
+  void __stdcall GLee_Lazy_glTextureRangeAPPLE(GLenum  target, GLsizei  length, const GLvoid * pointer)  {if (GLeeInit()) glTextureRangeAPPLE(target, length, pointer);}
+  GLEEPFNGLTEXTURERANGEAPPLEPROC GLeeFuncPtr_glTextureRangeAPPLE=GLee_Lazy_glTextureRangeAPPLE;
+#endif
+#ifndef GLEE_C_DEFINED_glGetTexParameterPointervAPPLE
+#define GLEE_C_DEFINED_glGetTexParameterPointervAPPLE
+  void __stdcall GLee_Lazy_glGetTexParameterPointervAPPLE(GLenum  target, GLenum  pname, GLvoid* * params)  {if (GLeeInit()) glGetTexParameterPointervAPPLE(target, pname, params);}
+  GLEEPFNGLGETTEXPARAMETERPOINTERVAPPLEPROC GLeeFuncPtr_glGetTexParameterPointervAPPLE=GLee_Lazy_glGetTexParameterPointervAPPLE;
+#endif
+#endif 
+
+/* GL_APPLE_float_pixels */
+
+#ifdef __GLEE_GL_APPLE_float_pixels
+#endif 
+
+/* GL_APPLE_vertex_program_evaluators */
+
+#ifdef __GLEE_GL_APPLE_vertex_program_evaluators
+#ifndef GLEE_C_DEFINED_glEnableVertexAttribAPPLE
+#define GLEE_C_DEFINED_glEnableVertexAttribAPPLE
+  void __stdcall GLee_Lazy_glEnableVertexAttribAPPLE(GLuint  index, GLenum  pname)  {if (GLeeInit()) glEnableVertexAttribAPPLE(index, pname);}
+  GLEEPFNGLENABLEVERTEXATTRIBAPPLEPROC GLeeFuncPtr_glEnableVertexAttribAPPLE=GLee_Lazy_glEnableVertexAttribAPPLE;
+#endif
+#ifndef GLEE_C_DEFINED_glDisableVertexAttribAPPLE
+#define GLEE_C_DEFINED_glDisableVertexAttribAPPLE
+  void __stdcall GLee_Lazy_glDisableVertexAttribAPPLE(GLuint  index, GLenum  pname)  {if (GLeeInit()) glDisableVertexAttribAPPLE(index, pname);}
+  GLEEPFNGLDISABLEVERTEXATTRIBAPPLEPROC GLeeFuncPtr_glDisableVertexAttribAPPLE=GLee_Lazy_glDisableVertexAttribAPPLE;
+#endif
+#ifndef GLEE_C_DEFINED_glIsVertexAttribEnabledAPPLE
+#define GLEE_C_DEFINED_glIsVertexAttribEnabledAPPLE
+  GLboolean __stdcall GLee_Lazy_glIsVertexAttribEnabledAPPLE(GLuint  index, GLenum  pname)  {if (GLeeInit()) return glIsVertexAttribEnabledAPPLE(index, pname); return (GLboolean)0;}
+  GLEEPFNGLISVERTEXATTRIBENABLEDAPPLEPROC GLeeFuncPtr_glIsVertexAttribEnabledAPPLE=GLee_Lazy_glIsVertexAttribEnabledAPPLE;
+#endif
+#ifndef GLEE_C_DEFINED_glMapVertexAttrib1dAPPLE
+#define GLEE_C_DEFINED_glMapVertexAttrib1dAPPLE
+  void __stdcall GLee_Lazy_glMapVertexAttrib1dAPPLE(GLuint  index, GLuint  size, GLdouble  u1, GLdouble  u2, GLint  stride, GLint  order, const GLdouble * points)  {if (GLeeInit()) glMapVertexAttrib1dAPPLE(index, size, u1, u2, stride, order, points);}
+  GLEEPFNGLMAPVERTEXATTRIB1DAPPLEPROC GLeeFuncPtr_glMapVertexAttrib1dAPPLE=GLee_Lazy_glMapVertexAttrib1dAPPLE;
+#endif
+#ifndef GLEE_C_DEFINED_glMapVertexAttrib1fAPPLE
+#define GLEE_C_DEFINED_glMapVertexAttrib1fAPPLE
+  void __stdcall GLee_Lazy_glMapVertexAttrib1fAPPLE(GLuint  index, GLuint  size, GLfloat  u1, GLfloat  u2, GLint  stride, GLint  order, const GLfloat * points)  {if (GLeeInit()) glMapVertexAttrib1fAPPLE(index, size, u1, u2, stride, order, points);}
+  GLEEPFNGLMAPVERTEXATTRIB1FAPPLEPROC GLeeFuncPtr_glMapVertexAttrib1fAPPLE=GLee_Lazy_glMapVertexAttrib1fAPPLE;
+#endif
+#ifndef GLEE_C_DEFINED_glMapVertexAttrib2dAPPLE
+#define GLEE_C_DEFINED_glMapVertexAttrib2dAPPLE
+  void __stdcall GLee_Lazy_glMapVertexAttrib2dAPPLE(GLuint  index, GLuint  size, GLdouble  u1, GLdouble  u2, GLint  ustride, GLint  uorder, GLdouble  v1, GLdouble  v2, GLint  vstride, GLint  vorder, const GLdouble * points)  {if (GLeeInit()) glMapVertexAttrib2dAPPLE(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);}
+  GLEEPFNGLMAPVERTEXATTRIB2DAPPLEPROC GLeeFuncPtr_glMapVertexAttrib2dAPPLE=GLee_Lazy_glMapVertexAttrib2dAPPLE;
+#endif
+#ifndef GLEE_C_DEFINED_glMapVertexAttrib2fAPPLE
+#define GLEE_C_DEFINED_glMapVertexAttrib2fAPPLE
+  void __stdcall GLee_Lazy_glMapVertexAttrib2fAPPLE(GLuint  index, GLuint  size, GLfloat  u1, GLfloat  u2, GLint  ustride, GLint  uorder, GLfloat  v1, GLfloat  v2, GLint  vstride, GLint  vorder, const GLfloat * points)  {if (GLeeInit()) glMapVertexAttrib2fAPPLE(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);}
+  GLEEPFNGLMAPVERTEXATTRIB2FAPPLEPROC GLeeFuncPtr_glMapVertexAttrib2fAPPLE=GLee_Lazy_glMapVertexAttrib2fAPPLE;
+#endif
+#endif 
+
+/* GL_APPLE_aux_depth_stencil */
+
+#ifdef __GLEE_GL_APPLE_aux_depth_stencil
+#endif 
+
+/* GL_APPLE_object_purgeable */
+
+#ifdef __GLEE_GL_APPLE_object_purgeable
+#ifndef GLEE_C_DEFINED_glObjectPurgeableAPPLE
+#define GLEE_C_DEFINED_glObjectPurgeableAPPLE
+  GLenum __stdcall GLee_Lazy_glObjectPurgeableAPPLE(GLenum  objectType, GLuint  name, GLenum  option)  {if (GLeeInit()) return glObjectPurgeableAPPLE(objectType, name, option); return (GLenum)0;}
+  GLEEPFNGLOBJECTPURGEABLEAPPLEPROC GLeeFuncPtr_glObjectPurgeableAPPLE=GLee_Lazy_glObjectPurgeableAPPLE;
+#endif
+#ifndef GLEE_C_DEFINED_glObjectUnpurgeableAPPLE
+#define GLEE_C_DEFINED_glObjectUnpurgeableAPPLE
+  GLenum __stdcall GLee_Lazy_glObjectUnpurgeableAPPLE(GLenum  objectType, GLuint  name, GLenum  option)  {if (GLeeInit()) return glObjectUnpurgeableAPPLE(objectType, name, option); return (GLenum)0;}
+  GLEEPFNGLOBJECTUNPURGEABLEAPPLEPROC GLeeFuncPtr_glObjectUnpurgeableAPPLE=GLee_Lazy_glObjectUnpurgeableAPPLE;
+#endif
+#ifndef GLEE_C_DEFINED_glGetObjectParameterivAPPLE
+#define GLEE_C_DEFINED_glGetObjectParameterivAPPLE
+  void __stdcall GLee_Lazy_glGetObjectParameterivAPPLE(GLenum  objectType, GLuint  name, GLenum  pname, GLint * params)  {if (GLeeInit()) glGetObjectParameterivAPPLE(objectType, name, pname, params);}
+  GLEEPFNGLGETOBJECTPARAMETERIVAPPLEPROC GLeeFuncPtr_glGetObjectParameterivAPPLE=GLee_Lazy_glGetObjectParameterivAPPLE;
+#endif
+#endif 
+
+/* GL_APPLE_row_bytes */
+
+#ifdef __GLEE_GL_APPLE_row_bytes
+#endif 
+
+/* GL_APPLE_rgb_422 */
+
+#ifdef __GLEE_GL_APPLE_rgb_422
+#endif 
+
+/* GL_NV_video_capture */
+
+#ifdef __GLEE_GL_NV_video_capture
+#ifndef GLEE_C_DEFINED_glBeginVideoCaptureNV
+#define GLEE_C_DEFINED_glBeginVideoCaptureNV
+  void __stdcall GLee_Lazy_glBeginVideoCaptureNV(GLuint  video_capture_slot)  {if (GLeeInit()) glBeginVideoCaptureNV(video_capture_slot);}
+  GLEEPFNGLBEGINVIDEOCAPTURENVPROC GLeeFuncPtr_glBeginVideoCaptureNV=GLee_Lazy_glBeginVideoCaptureNV;
+#endif
+#ifndef GLEE_C_DEFINED_glBindVideoCaptureStreamBufferNV
+#define GLEE_C_DEFINED_glBindVideoCaptureStreamBufferNV
+  void __stdcall GLee_Lazy_glBindVideoCaptureStreamBufferNV(GLuint  video_capture_slot, GLuint  stream, GLenum  frame_region, GLintptrARB  offset)  {if (GLeeInit()) glBindVideoCaptureStreamBufferNV(video_capture_slot, stream, frame_region, offset);}
+  GLEEPFNGLBINDVIDEOCAPTURESTREAMBUFFERNVPROC GLeeFuncPtr_glBindVideoCaptureStreamBufferNV=GLee_Lazy_glBindVideoCaptureStreamBufferNV;
+#endif
+#ifndef GLEE_C_DEFINED_glBindVideoCaptureStreamTextureNV
+#define GLEE_C_DEFINED_glBindVideoCaptureStreamTextureNV
+  void __stdcall GLee_Lazy_glBindVideoCaptureStreamTextureNV(GLuint  video_capture_slot, GLuint  stream, GLenum  frame_region, GLenum  target, GLuint  texture)  {if (GLeeInit()) glBindVideoCaptureStreamTextureNV(video_capture_slot, stream, frame_region, target, texture);}
+  GLEEPFNGLBINDVIDEOCAPTURESTREAMTEXTURENVPROC GLeeFuncPtr_glBindVideoCaptureStreamTextureNV=GLee_Lazy_glBindVideoCaptureStreamTextureNV;
+#endif
+#ifndef GLEE_C_DEFINED_glEndVideoCaptureNV
+#define GLEE_C_DEFINED_glEndVideoCaptureNV
+  void __stdcall GLee_Lazy_glEndVideoCaptureNV(GLuint  video_capture_slot)  {if (GLeeInit()) glEndVideoCaptureNV(video_capture_slot);}
+  GLEEPFNGLENDVIDEOCAPTURENVPROC GLeeFuncPtr_glEndVideoCaptureNV=GLee_Lazy_glEndVideoCaptureNV;
+#endif
+#ifndef GLEE_C_DEFINED_glGetVideoCaptureivNV
+#define GLEE_C_DEFINED_glGetVideoCaptureivNV
+  void __stdcall GLee_Lazy_glGetVideoCaptureivNV(GLuint  video_capture_slot, GLenum  pname, GLint * params)  {if (GLeeInit()) glGetVideoCaptureivNV(video_capture_slot, pname, params);}
+  GLEEPFNGLGETVIDEOCAPTUREIVNVPROC GLeeFuncPtr_glGetVideoCaptureivNV=GLee_Lazy_glGetVideoCaptureivNV;
+#endif
+#ifndef GLEE_C_DEFINED_glGetVideoCaptureStreamivNV
+#define GLEE_C_DEFINED_glGetVideoCaptureStreamivNV
+  void __stdcall GLee_Lazy_glGetVideoCaptureStreamivNV(GLuint  video_capture_slot, GLuint  stream, GLenum  pname, GLint * params)  {if (GLeeInit()) glGetVideoCaptureStreamivNV(video_capture_slot, stream, pname, params);}
+  GLEEPFNGLGETVIDEOCAPTURESTREAMIVNVPROC GLeeFuncPtr_glGetVideoCaptureStreamivNV=GLee_Lazy_glGetVideoCaptureStreamivNV;
+#endif
+#ifndef GLEE_C_DEFINED_glGetVideoCaptureStreamfvNV
+#define GLEE_C_DEFINED_glGetVideoCaptureStreamfvNV
+  void __stdcall GLee_Lazy_glGetVideoCaptureStreamfvNV(GLuint  video_capture_slot, GLuint  stream, GLenum  pname, GLfloat * params)  {if (GLeeInit()) glGetVideoCaptureStreamfvNV(video_capture_slot, stream, pname, params);}
+  GLEEPFNGLGETVIDEOCAPTURESTREAMFVNVPROC GLeeFuncPtr_glGetVideoCaptureStreamfvNV=GLee_Lazy_glGetVideoCaptureStreamfvNV;
+#endif
+#ifndef GLEE_C_DEFINED_glGetVideoCaptureStreamdvNV
+#define GLEE_C_DEFINED_glGetVideoCaptureStreamdvNV
+  void __stdcall GLee_Lazy_glGetVideoCaptureStreamdvNV(GLuint  video_capture_slot, GLuint  stream, GLenum  pname, GLdouble * params)  {if (GLeeInit()) glGetVideoCaptureStreamdvNV(video_capture_slot, stream, pname, params);}
+  GLEEPFNGLGETVIDEOCAPTURESTREAMDVNVPROC GLeeFuncPtr_glGetVideoCaptureStreamdvNV=GLee_Lazy_glGetVideoCaptureStreamdvNV;
+#endif
+#ifndef GLEE_C_DEFINED_glVideoCaptureNV
+#define GLEE_C_DEFINED_glVideoCaptureNV
+  GLenum __stdcall GLee_Lazy_glVideoCaptureNV(GLuint  video_capture_slot, GLuint * sequence_num, GLuint64EXT * capture_time)  {if (GLeeInit()) return glVideoCaptureNV(video_capture_slot, sequence_num, capture_time); return (GLenum)0;}
+  GLEEPFNGLVIDEOCAPTURENVPROC GLeeFuncPtr_glVideoCaptureNV=GLee_Lazy_glVideoCaptureNV;
+#endif
+#ifndef GLEE_C_DEFINED_glVideoCaptureStreamParameterivNV
+#define GLEE_C_DEFINED_glVideoCaptureStreamParameterivNV
+  void __stdcall GLee_Lazy_glVideoCaptureStreamParameterivNV(GLuint  video_capture_slot, GLuint  stream, GLenum  pname, const GLint * params)  {if (GLeeInit()) glVideoCaptureStreamParameterivNV(video_capture_slot, stream, pname, params);}
+  GLEEPFNGLVIDEOCAPTURESTREAMPARAMETERIVNVPROC GLeeFuncPtr_glVideoCaptureStreamParameterivNV=GLee_Lazy_glVideoCaptureStreamParameterivNV;
+#endif
+#ifndef GLEE_C_DEFINED_glVideoCaptureStreamParameterfvNV
+#define GLEE_C_DEFINED_glVideoCaptureStreamParameterfvNV
+  void __stdcall GLee_Lazy_glVideoCaptureStreamParameterfvNV(GLuint  video_capture_slot, GLuint  stream, GLenum  pname, const GLfloat * params)  {if (GLeeInit()) glVideoCaptureStreamParameterfvNV(video_capture_slot, stream, pname, params);}
+  GLEEPFNGLVIDEOCAPTURESTREAMPARAMETERFVNVPROC GLeeFuncPtr_glVideoCaptureStreamParameterfvNV=GLee_Lazy_glVideoCaptureStreamParameterfvNV;
+#endif
+#ifndef GLEE_C_DEFINED_glVideoCaptureStreamParameterdvNV
+#define GLEE_C_DEFINED_glVideoCaptureStreamParameterdvNV
+  void __stdcall GLee_Lazy_glVideoCaptureStreamParameterdvNV(GLuint  video_capture_slot, GLuint  stream, GLenum  pname, const GLdouble * params)  {if (GLeeInit()) glVideoCaptureStreamParameterdvNV(video_capture_slot, stream, pname, params);}
+  GLEEPFNGLVIDEOCAPTURESTREAMPARAMETERDVNVPROC GLeeFuncPtr_glVideoCaptureStreamParameterdvNV=GLee_Lazy_glVideoCaptureStreamParameterdvNV;
+#endif
+#endif 
+
+/* GL_NV_copy_image */
+
+#ifdef __GLEE_GL_NV_copy_image
+#ifndef GLEE_C_DEFINED_glCopyImageSubDataNV
+#define GLEE_C_DEFINED_glCopyImageSubDataNV
+  void __stdcall GLee_Lazy_glCopyImageSubDataNV(GLuint  srcName, GLenum  srcTarget, GLint  srcLevel, GLint  srcX, GLint  srcY, GLint  srcZ, GLuint  dstName, GLenum  dstTarget, GLint  dstLevel, GLint  dstX, GLint  dstY, GLint  dstZ, GLsizei  width, GLsizei  height, GLsizei  depth)  {if (GLeeInit()) glCopyImageSubDataNV(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth);}
+  GLEEPFNGLCOPYIMAGESUBDATANVPROC GLeeFuncPtr_glCopyImageSubDataNV=GLee_Lazy_glCopyImageSubDataNV;
+#endif
+#endif 
+
+/* GL_EXT_separate_shader_objects */
+
+#ifdef __GLEE_GL_EXT_separate_shader_objects
+#ifndef GLEE_C_DEFINED_glUseShaderProgramEXT
+#define GLEE_C_DEFINED_glUseShaderProgramEXT
+  void __stdcall GLee_Lazy_glUseShaderProgramEXT(GLenum  type, GLuint  program)  {if (GLeeInit()) glUseShaderProgramEXT(type, program);}
+  GLEEPFNGLUSESHADERPROGRAMEXTPROC GLeeFuncPtr_glUseShaderProgramEXT=GLee_Lazy_glUseShaderProgramEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glActiveProgramEXT
+#define GLEE_C_DEFINED_glActiveProgramEXT
+  void __stdcall GLee_Lazy_glActiveProgramEXT(GLuint  program)  {if (GLeeInit()) glActiveProgramEXT(program);}
+  GLEEPFNGLACTIVEPROGRAMEXTPROC GLeeFuncPtr_glActiveProgramEXT=GLee_Lazy_glActiveProgramEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glCreateShaderProgramEXT
+#define GLEE_C_DEFINED_glCreateShaderProgramEXT
+  GLuint __stdcall GLee_Lazy_glCreateShaderProgramEXT(GLenum  type, const GLchar * string)  {if (GLeeInit()) return glCreateShaderProgramEXT(type, string); return (GLuint)0;}
+  GLEEPFNGLCREATESHADERPROGRAMEXTPROC GLeeFuncPtr_glCreateShaderProgramEXT=GLee_Lazy_glCreateShaderProgramEXT;
+#endif
+#endif 
+
+/* GL_NV_parameter_buffer_object2 */
+
+#ifdef __GLEE_GL_NV_parameter_buffer_object2
+#endif 
+
+/* GL_NV_shader_buffer_load */
+
+#ifdef __GLEE_GL_NV_shader_buffer_load
+#ifndef GLEE_C_DEFINED_glMakeBufferResidentNV
+#define GLEE_C_DEFINED_glMakeBufferResidentNV
+  void __stdcall GLee_Lazy_glMakeBufferResidentNV(GLenum  target, GLenum  access)  {if (GLeeInit()) glMakeBufferResidentNV(target, access);}
+  GLEEPFNGLMAKEBUFFERRESIDENTNVPROC GLeeFuncPtr_glMakeBufferResidentNV=GLee_Lazy_glMakeBufferResidentNV;
+#endif
+#ifndef GLEE_C_DEFINED_glMakeBufferNonResidentNV
+#define GLEE_C_DEFINED_glMakeBufferNonResidentNV
+  void __stdcall GLee_Lazy_glMakeBufferNonResidentNV(GLenum  target)  {if (GLeeInit()) glMakeBufferNonResidentNV(target);}
+  GLEEPFNGLMAKEBUFFERNONRESIDENTNVPROC GLeeFuncPtr_glMakeBufferNonResidentNV=GLee_Lazy_glMakeBufferNonResidentNV;
+#endif
+#ifndef GLEE_C_DEFINED_glIsBufferResidentNV
+#define GLEE_C_DEFINED_glIsBufferResidentNV
+  GLboolean __stdcall GLee_Lazy_glIsBufferResidentNV(GLenum  target)  {if (GLeeInit()) return glIsBufferResidentNV(target); return (GLboolean)0;}
+  GLEEPFNGLISBUFFERRESIDENTNVPROC GLeeFuncPtr_glIsBufferResidentNV=GLee_Lazy_glIsBufferResidentNV;
+#endif
+#ifndef GLEE_C_DEFINED_glMakeNamedBufferResidentNV
+#define GLEE_C_DEFINED_glMakeNamedBufferResidentNV
+  void __stdcall GLee_Lazy_glMakeNamedBufferResidentNV(GLuint  buffer, GLenum  access)  {if (GLeeInit()) glMakeNamedBufferResidentNV(buffer, access);}
+  GLEEPFNGLMAKENAMEDBUFFERRESIDENTNVPROC GLeeFuncPtr_glMakeNamedBufferResidentNV=GLee_Lazy_glMakeNamedBufferResidentNV;
+#endif
+#ifndef GLEE_C_DEFINED_glMakeNamedBufferNonResidentNV
+#define GLEE_C_DEFINED_glMakeNamedBufferNonResidentNV
+  void __stdcall GLee_Lazy_glMakeNamedBufferNonResidentNV(GLuint  buffer)  {if (GLeeInit()) glMakeNamedBufferNonResidentNV(buffer);}
+  GLEEPFNGLMAKENAMEDBUFFERNONRESIDENTNVPROC GLeeFuncPtr_glMakeNamedBufferNonResidentNV=GLee_Lazy_glMakeNamedBufferNonResidentNV;
+#endif
+#ifndef GLEE_C_DEFINED_glIsNamedBufferResidentNV
+#define GLEE_C_DEFINED_glIsNamedBufferResidentNV
+  GLboolean __stdcall GLee_Lazy_glIsNamedBufferResidentNV(GLuint  buffer)  {if (GLeeInit()) return glIsNamedBufferResidentNV(buffer); return (GLboolean)0;}
+  GLEEPFNGLISNAMEDBUFFERRESIDENTNVPROC GLeeFuncPtr_glIsNamedBufferResidentNV=GLee_Lazy_glIsNamedBufferResidentNV;
+#endif
+#ifndef GLEE_C_DEFINED_glGetBufferParameterui64vNV
+#define GLEE_C_DEFINED_glGetBufferParameterui64vNV
+  void __stdcall GLee_Lazy_glGetBufferParameterui64vNV(GLenum  target, GLenum  pname, GLuint64EXT * params)  {if (GLeeInit()) glGetBufferParameterui64vNV(target, pname, params);}
+  GLEEPFNGLGETBUFFERPARAMETERUI64VNVPROC GLeeFuncPtr_glGetBufferParameterui64vNV=GLee_Lazy_glGetBufferParameterui64vNV;
+#endif
+#ifndef GLEE_C_DEFINED_glGetNamedBufferParameterui64vNV
+#define GLEE_C_DEFINED_glGetNamedBufferParameterui64vNV
+  void __stdcall GLee_Lazy_glGetNamedBufferParameterui64vNV(GLuint  buffer, GLenum  pname, GLuint64EXT * params)  {if (GLeeInit()) glGetNamedBufferParameterui64vNV(buffer, pname, params);}
+  GLEEPFNGLGETNAMEDBUFFERPARAMETERUI64VNVPROC GLeeFuncPtr_glGetNamedBufferParameterui64vNV=GLee_Lazy_glGetNamedBufferParameterui64vNV;
+#endif
+#ifndef GLEE_C_DEFINED_glGetIntegerui64vNV
+#define GLEE_C_DEFINED_glGetIntegerui64vNV
+  void __stdcall GLee_Lazy_glGetIntegerui64vNV(GLenum  value, GLuint64EXT * result)  {if (GLeeInit()) glGetIntegerui64vNV(value, result);}
+  GLEEPFNGLGETINTEGERUI64VNVPROC GLeeFuncPtr_glGetIntegerui64vNV=GLee_Lazy_glGetIntegerui64vNV;
+#endif
+#ifndef GLEE_C_DEFINED_glUniformui64NV
+#define GLEE_C_DEFINED_glUniformui64NV
+  void __stdcall GLee_Lazy_glUniformui64NV(GLint  location, GLuint64EXT  value)  {if (GLeeInit()) glUniformui64NV(location, value);}
+  GLEEPFNGLUNIFORMUI64NVPROC GLeeFuncPtr_glUniformui64NV=GLee_Lazy_glUniformui64NV;
+#endif
+#ifndef GLEE_C_DEFINED_glUniformui64vNV
+#define GLEE_C_DEFINED_glUniformui64vNV
+  void __stdcall GLee_Lazy_glUniformui64vNV(GLint  location, GLsizei  count, const GLuint64EXT * value)  {if (GLeeInit()) glUniformui64vNV(location, count, value);}
+  GLEEPFNGLUNIFORMUI64VNVPROC GLeeFuncPtr_glUniformui64vNV=GLee_Lazy_glUniformui64vNV;
+#endif
+#ifndef GLEE_C_DEFINED_glGetUniformui64vNV
+#define GLEE_C_DEFINED_glGetUniformui64vNV
+  void __stdcall GLee_Lazy_glGetUniformui64vNV(GLuint  program, GLint  location, GLuint64EXT * params)  {if (GLeeInit()) glGetUniformui64vNV(program, location, params);}
+  GLEEPFNGLGETUNIFORMUI64VNVPROC GLeeFuncPtr_glGetUniformui64vNV=GLee_Lazy_glGetUniformui64vNV;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramUniformui64NV
+#define GLEE_C_DEFINED_glProgramUniformui64NV
+  void __stdcall GLee_Lazy_glProgramUniformui64NV(GLuint  program, GLint  location, GLuint64EXT  value)  {if (GLeeInit()) glProgramUniformui64NV(program, location, value);}
+  GLEEPFNGLPROGRAMUNIFORMUI64NVPROC GLeeFuncPtr_glProgramUniformui64NV=GLee_Lazy_glProgramUniformui64NV;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramUniformui64vNV
+#define GLEE_C_DEFINED_glProgramUniformui64vNV
+  void __stdcall GLee_Lazy_glProgramUniformui64vNV(GLuint  program, GLint  location, GLsizei  count, const GLuint64EXT * value)  {if (GLeeInit()) glProgramUniformui64vNV(program, location, count, value);}
+  GLEEPFNGLPROGRAMUNIFORMUI64VNVPROC GLeeFuncPtr_glProgramUniformui64vNV=GLee_Lazy_glProgramUniformui64vNV;
+#endif
+#endif 
+
+/* GL_NV_vertex_buffer_unified_memory */
+
+#ifdef __GLEE_GL_NV_vertex_buffer_unified_memory
+#ifndef GLEE_C_DEFINED_glBufferAddressRangeNV
+#define GLEE_C_DEFINED_glBufferAddressRangeNV
+  void __stdcall GLee_Lazy_glBufferAddressRangeNV(GLenum  pname, GLuint  index, GLuint64EXT  address, GLsizeiptr  length)  {if (GLeeInit()) glBufferAddressRangeNV(pname, index, address, length);}
+  GLEEPFNGLBUFFERADDRESSRANGENVPROC GLeeFuncPtr_glBufferAddressRangeNV=GLee_Lazy_glBufferAddressRangeNV;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexFormatNV
+#define GLEE_C_DEFINED_glVertexFormatNV
+  void __stdcall GLee_Lazy_glVertexFormatNV(GLint  size, GLenum  type, GLsizei  stride)  {if (GLeeInit()) glVertexFormatNV(size, type, stride);}
+  GLEEPFNGLVERTEXFORMATNVPROC GLeeFuncPtr_glVertexFormatNV=GLee_Lazy_glVertexFormatNV;
+#endif
+#ifndef GLEE_C_DEFINED_glNormalFormatNV
+#define GLEE_C_DEFINED_glNormalFormatNV
+  void __stdcall GLee_Lazy_glNormalFormatNV(GLenum  type, GLsizei  stride)  {if (GLeeInit()) glNormalFormatNV(type, stride);}
+  GLEEPFNGLNORMALFORMATNVPROC GLeeFuncPtr_glNormalFormatNV=GLee_Lazy_glNormalFormatNV;
+#endif
+#ifndef GLEE_C_DEFINED_glColorFormatNV
+#define GLEE_C_DEFINED_glColorFormatNV
+  void __stdcall GLee_Lazy_glColorFormatNV(GLint  size, GLenum  type, GLsizei  stride)  {if (GLeeInit()) glColorFormatNV(size, type, stride);}
+  GLEEPFNGLCOLORFORMATNVPROC GLeeFuncPtr_glColorFormatNV=GLee_Lazy_glColorFormatNV;
+#endif
+#ifndef GLEE_C_DEFINED_glIndexFormatNV
+#define GLEE_C_DEFINED_glIndexFormatNV
+  void __stdcall GLee_Lazy_glIndexFormatNV(GLenum  type, GLsizei  stride)  {if (GLeeInit()) glIndexFormatNV(type, stride);}
+  GLEEPFNGLINDEXFORMATNVPROC GLeeFuncPtr_glIndexFormatNV=GLee_Lazy_glIndexFormatNV;
+#endif
+#ifndef GLEE_C_DEFINED_glTexCoordFormatNV
+#define GLEE_C_DEFINED_glTexCoordFormatNV
+  void __stdcall GLee_Lazy_glTexCoordFormatNV(GLint  size, GLenum  type, GLsizei  stride)  {if (GLeeInit()) glTexCoordFormatNV(size, type, stride);}
+  GLEEPFNGLTEXCOORDFORMATNVPROC GLeeFuncPtr_glTexCoordFormatNV=GLee_Lazy_glTexCoordFormatNV;
+#endif
+#ifndef GLEE_C_DEFINED_glEdgeFlagFormatNV
+#define GLEE_C_DEFINED_glEdgeFlagFormatNV
+  void __stdcall GLee_Lazy_glEdgeFlagFormatNV(GLsizei  stride)  {if (GLeeInit()) glEdgeFlagFormatNV(stride);}
+  GLEEPFNGLEDGEFLAGFORMATNVPROC GLeeFuncPtr_glEdgeFlagFormatNV=GLee_Lazy_glEdgeFlagFormatNV;
+#endif
+#ifndef GLEE_C_DEFINED_glSecondaryColorFormatNV
+#define GLEE_C_DEFINED_glSecondaryColorFormatNV
+  void __stdcall GLee_Lazy_glSecondaryColorFormatNV(GLint  size, GLenum  type, GLsizei  stride)  {if (GLeeInit()) glSecondaryColorFormatNV(size, type, stride);}
+  GLEEPFNGLSECONDARYCOLORFORMATNVPROC GLeeFuncPtr_glSecondaryColorFormatNV=GLee_Lazy_glSecondaryColorFormatNV;
+#endif
+#ifndef GLEE_C_DEFINED_glFogCoordFormatNV
+#define GLEE_C_DEFINED_glFogCoordFormatNV
+  void __stdcall GLee_Lazy_glFogCoordFormatNV(GLenum  type, GLsizei  stride)  {if (GLeeInit()) glFogCoordFormatNV(type, stride);}
+  GLEEPFNGLFOGCOORDFORMATNVPROC GLeeFuncPtr_glFogCoordFormatNV=GLee_Lazy_glFogCoordFormatNV;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttribFormatNV
+#define GLEE_C_DEFINED_glVertexAttribFormatNV
+  void __stdcall GLee_Lazy_glVertexAttribFormatNV(GLuint  index, GLint  size, GLenum  type, GLboolean  normalized, GLsizei  stride)  {if (GLeeInit()) glVertexAttribFormatNV(index, size, type, normalized, stride);}
+  GLEEPFNGLVERTEXATTRIBFORMATNVPROC GLeeFuncPtr_glVertexAttribFormatNV=GLee_Lazy_glVertexAttribFormatNV;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttribIFormatNV
+#define GLEE_C_DEFINED_glVertexAttribIFormatNV
+  void __stdcall GLee_Lazy_glVertexAttribIFormatNV(GLuint  index, GLint  size, GLenum  type, GLsizei  stride)  {if (GLeeInit()) glVertexAttribIFormatNV(index, size, type, stride);}
+  GLEEPFNGLVERTEXATTRIBIFORMATNVPROC GLeeFuncPtr_glVertexAttribIFormatNV=GLee_Lazy_glVertexAttribIFormatNV;
+#endif
+#ifndef GLEE_C_DEFINED_glGetIntegerui64i_vNV
+#define GLEE_C_DEFINED_glGetIntegerui64i_vNV
+  void __stdcall GLee_Lazy_glGetIntegerui64i_vNV(GLenum  value, GLuint  index, GLuint64EXT * result)  {if (GLeeInit()) glGetIntegerui64i_vNV(value, index, result);}
+  GLEEPFNGLGETINTEGERUI64I_VNVPROC GLeeFuncPtr_glGetIntegerui64i_vNV=GLee_Lazy_glGetIntegerui64i_vNV;
+#endif
+#endif 
+
+/* GL_NV_texture_barrier */
+
+#ifdef __GLEE_GL_NV_texture_barrier
+#ifndef GLEE_C_DEFINED_glTextureBarrierNV
+#define GLEE_C_DEFINED_glTextureBarrierNV
+  void __stdcall GLee_Lazy_glTextureBarrierNV(void)  {if (GLeeInit()) glTextureBarrierNV();}
+  GLEEPFNGLTEXTUREBARRIERNVPROC GLeeFuncPtr_glTextureBarrierNV=GLee_Lazy_glTextureBarrierNV;
+#endif
+#endif 
+
+/* GL_AMD_shader_stencil_export */
+
+#ifdef __GLEE_GL_AMD_shader_stencil_export
+#endif 
+
+/* GL_AMD_seamless_cubemap_per_texture */
+
+#ifdef __GLEE_GL_AMD_seamless_cubemap_per_texture
+#endif 
+
+/* GL_AMD_conservative_depth */
+
+#ifdef __GLEE_GL_AMD_conservative_depth
+#endif 
+
+/* GL_EXT_shader_image_load_store */
+
+#ifdef __GLEE_GL_EXT_shader_image_load_store
+#ifndef GLEE_C_DEFINED_glBindImageTextureEXT
+#define GLEE_C_DEFINED_glBindImageTextureEXT
+  void __stdcall GLee_Lazy_glBindImageTextureEXT(GLuint  index, GLuint  texture, GLint  level, GLboolean  layered, GLint  layer, GLenum  access, GLint  format)  {if (GLeeInit()) glBindImageTextureEXT(index, texture, level, layered, layer, access, format);}
+  GLEEPFNGLBINDIMAGETEXTUREEXTPROC GLeeFuncPtr_glBindImageTextureEXT=GLee_Lazy_glBindImageTextureEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glMemoryBarrierEXT
+#define GLEE_C_DEFINED_glMemoryBarrierEXT
+  void __stdcall GLee_Lazy_glMemoryBarrierEXT(GLbitfield  barriers)  {if (GLeeInit()) glMemoryBarrierEXT(barriers);}
+  GLEEPFNGLMEMORYBARRIEREXTPROC GLeeFuncPtr_glMemoryBarrierEXT=GLee_Lazy_glMemoryBarrierEXT;
+#endif
+#endif 
+
+/* GL_EXT_vertex_attrib_64bit */
+
+#ifdef __GLEE_GL_EXT_vertex_attrib_64bit
+#ifndef GLEE_C_DEFINED_glVertexAttribL1dEXT
+#define GLEE_C_DEFINED_glVertexAttribL1dEXT
+  void __stdcall GLee_Lazy_glVertexAttribL1dEXT(GLuint  index, GLdouble  x)  {if (GLeeInit()) glVertexAttribL1dEXT(index, x);}
+  GLEEPFNGLVERTEXATTRIBL1DEXTPROC GLeeFuncPtr_glVertexAttribL1dEXT=GLee_Lazy_glVertexAttribL1dEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttribL2dEXT
+#define GLEE_C_DEFINED_glVertexAttribL2dEXT
+  void __stdcall GLee_Lazy_glVertexAttribL2dEXT(GLuint  index, GLdouble  x, GLdouble  y)  {if (GLeeInit()) glVertexAttribL2dEXT(index, x, y);}
+  GLEEPFNGLVERTEXATTRIBL2DEXTPROC GLeeFuncPtr_glVertexAttribL2dEXT=GLee_Lazy_glVertexAttribL2dEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttribL3dEXT
+#define GLEE_C_DEFINED_glVertexAttribL3dEXT
+  void __stdcall GLee_Lazy_glVertexAttribL3dEXT(GLuint  index, GLdouble  x, GLdouble  y, GLdouble  z)  {if (GLeeInit()) glVertexAttribL3dEXT(index, x, y, z);}
+  GLEEPFNGLVERTEXATTRIBL3DEXTPROC GLeeFuncPtr_glVertexAttribL3dEXT=GLee_Lazy_glVertexAttribL3dEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttribL4dEXT
+#define GLEE_C_DEFINED_glVertexAttribL4dEXT
+  void __stdcall GLee_Lazy_glVertexAttribL4dEXT(GLuint  index, GLdouble  x, GLdouble  y, GLdouble  z, GLdouble  w)  {if (GLeeInit()) glVertexAttribL4dEXT(index, x, y, z, w);}
+  GLEEPFNGLVERTEXATTRIBL4DEXTPROC GLeeFuncPtr_glVertexAttribL4dEXT=GLee_Lazy_glVertexAttribL4dEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttribL1dvEXT
+#define GLEE_C_DEFINED_glVertexAttribL1dvEXT
+  void __stdcall GLee_Lazy_glVertexAttribL1dvEXT(GLuint  index, const GLdouble * v)  {if (GLeeInit()) glVertexAttribL1dvEXT(index, v);}
+  GLEEPFNGLVERTEXATTRIBL1DVEXTPROC GLeeFuncPtr_glVertexAttribL1dvEXT=GLee_Lazy_glVertexAttribL1dvEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttribL2dvEXT
+#define GLEE_C_DEFINED_glVertexAttribL2dvEXT
+  void __stdcall GLee_Lazy_glVertexAttribL2dvEXT(GLuint  index, const GLdouble * v)  {if (GLeeInit()) glVertexAttribL2dvEXT(index, v);}
+  GLEEPFNGLVERTEXATTRIBL2DVEXTPROC GLeeFuncPtr_glVertexAttribL2dvEXT=GLee_Lazy_glVertexAttribL2dvEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttribL3dvEXT
+#define GLEE_C_DEFINED_glVertexAttribL3dvEXT
+  void __stdcall GLee_Lazy_glVertexAttribL3dvEXT(GLuint  index, const GLdouble * v)  {if (GLeeInit()) glVertexAttribL3dvEXT(index, v);}
+  GLEEPFNGLVERTEXATTRIBL3DVEXTPROC GLeeFuncPtr_glVertexAttribL3dvEXT=GLee_Lazy_glVertexAttribL3dvEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttribL4dvEXT
+#define GLEE_C_DEFINED_glVertexAttribL4dvEXT
+  void __stdcall GLee_Lazy_glVertexAttribL4dvEXT(GLuint  index, const GLdouble * v)  {if (GLeeInit()) glVertexAttribL4dvEXT(index, v);}
+  GLEEPFNGLVERTEXATTRIBL4DVEXTPROC GLeeFuncPtr_glVertexAttribL4dvEXT=GLee_Lazy_glVertexAttribL4dvEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttribLPointerEXT
+#define GLEE_C_DEFINED_glVertexAttribLPointerEXT
+  void __stdcall GLee_Lazy_glVertexAttribLPointerEXT(GLuint  index, GLint  size, GLenum  type, GLsizei  stride, const GLvoid * pointer)  {if (GLeeInit()) glVertexAttribLPointerEXT(index, size, type, stride, pointer);}
+  GLEEPFNGLVERTEXATTRIBLPOINTEREXTPROC GLeeFuncPtr_glVertexAttribLPointerEXT=GLee_Lazy_glVertexAttribLPointerEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glGetVertexAttribLdvEXT
+#define GLEE_C_DEFINED_glGetVertexAttribLdvEXT
+  void __stdcall GLee_Lazy_glGetVertexAttribLdvEXT(GLuint  index, GLenum  pname, GLdouble * params)  {if (GLeeInit()) glGetVertexAttribLdvEXT(index, pname, params);}
+  GLEEPFNGLGETVERTEXATTRIBLDVEXTPROC GLeeFuncPtr_glGetVertexAttribLdvEXT=GLee_Lazy_glGetVertexAttribLdvEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexArrayVertexAttribLOffsetEXT
+#define GLEE_C_DEFINED_glVertexArrayVertexAttribLOffsetEXT
+  void __stdcall GLee_Lazy_glVertexArrayVertexAttribLOffsetEXT(GLuint  vaobj, GLuint  buffer, GLuint  index, GLint  size, GLenum  type, GLsizei  stride, GLintptr  offset)  {if (GLeeInit()) glVertexArrayVertexAttribLOffsetEXT(vaobj, buffer, index, size, type, stride, offset);}
+  GLEEPFNGLVERTEXARRAYVERTEXATTRIBLOFFSETEXTPROC GLeeFuncPtr_glVertexArrayVertexAttribLOffsetEXT=GLee_Lazy_glVertexArrayVertexAttribLOffsetEXT;
+#endif
+#endif 
+
+/* GL_NV_gpu_program5 */
+
+#ifdef __GLEE_GL_NV_gpu_program5
+#ifndef GLEE_C_DEFINED_glProgramSubroutineParametersuivNV
+#define GLEE_C_DEFINED_glProgramSubroutineParametersuivNV
+  void __stdcall GLee_Lazy_glProgramSubroutineParametersuivNV(GLenum  target, GLsizei  count, const GLuint * params)  {if (GLeeInit()) glProgramSubroutineParametersuivNV(target, count, params);}
+  GLEEPFNGLPROGRAMSUBROUTINEPARAMETERSUIVNVPROC GLeeFuncPtr_glProgramSubroutineParametersuivNV=GLee_Lazy_glProgramSubroutineParametersuivNV;
+#endif
+#ifndef GLEE_C_DEFINED_glGetProgramSubroutineParameteruivNV
+#define GLEE_C_DEFINED_glGetProgramSubroutineParameteruivNV
+  void __stdcall GLee_Lazy_glGetProgramSubroutineParameteruivNV(GLenum  target, GLuint  index, GLuint * param)  {if (GLeeInit()) glGetProgramSubroutineParameteruivNV(target, index, param);}
+  GLEEPFNGLGETPROGRAMSUBROUTINEPARAMETERUIVNVPROC GLeeFuncPtr_glGetProgramSubroutineParameteruivNV=GLee_Lazy_glGetProgramSubroutineParameteruivNV;
+#endif
+#endif 
+
+/* GL_NV_gpu_shader5 */
+
+#ifdef __GLEE_GL_NV_gpu_shader5
+#ifndef GLEE_C_DEFINED_glUniform1i64NV
+#define GLEE_C_DEFINED_glUniform1i64NV
+  void __stdcall GLee_Lazy_glUniform1i64NV(GLint  location, GLint64EXT  x)  {if (GLeeInit()) glUniform1i64NV(location, x);}
+  GLEEPFNGLUNIFORM1I64NVPROC GLeeFuncPtr_glUniform1i64NV=GLee_Lazy_glUniform1i64NV;
+#endif
+#ifndef GLEE_C_DEFINED_glUniform2i64NV
+#define GLEE_C_DEFINED_glUniform2i64NV
+  void __stdcall GLee_Lazy_glUniform2i64NV(GLint  location, GLint64EXT  x, GLint64EXT  y)  {if (GLeeInit()) glUniform2i64NV(location, x, y);}
+  GLEEPFNGLUNIFORM2I64NVPROC GLeeFuncPtr_glUniform2i64NV=GLee_Lazy_glUniform2i64NV;
+#endif
+#ifndef GLEE_C_DEFINED_glUniform3i64NV
+#define GLEE_C_DEFINED_glUniform3i64NV
+  void __stdcall GLee_Lazy_glUniform3i64NV(GLint  location, GLint64EXT  x, GLint64EXT  y, GLint64EXT  z)  {if (GLeeInit()) glUniform3i64NV(location, x, y, z);}
+  GLEEPFNGLUNIFORM3I64NVPROC GLeeFuncPtr_glUniform3i64NV=GLee_Lazy_glUniform3i64NV;
+#endif
+#ifndef GLEE_C_DEFINED_glUniform4i64NV
+#define GLEE_C_DEFINED_glUniform4i64NV
+  void __stdcall GLee_Lazy_glUniform4i64NV(GLint  location, GLint64EXT  x, GLint64EXT  y, GLint64EXT  z, GLint64EXT  w)  {if (GLeeInit()) glUniform4i64NV(location, x, y, z, w);}
+  GLEEPFNGLUNIFORM4I64NVPROC GLeeFuncPtr_glUniform4i64NV=GLee_Lazy_glUniform4i64NV;
+#endif
+#ifndef GLEE_C_DEFINED_glUniform1i64vNV
+#define GLEE_C_DEFINED_glUniform1i64vNV
+  void __stdcall GLee_Lazy_glUniform1i64vNV(GLint  location, GLsizei  count, const GLint64EXT * value)  {if (GLeeInit()) glUniform1i64vNV(location, count, value);}
+  GLEEPFNGLUNIFORM1I64VNVPROC GLeeFuncPtr_glUniform1i64vNV=GLee_Lazy_glUniform1i64vNV;
+#endif
+#ifndef GLEE_C_DEFINED_glUniform2i64vNV
+#define GLEE_C_DEFINED_glUniform2i64vNV
+  void __stdcall GLee_Lazy_glUniform2i64vNV(GLint  location, GLsizei  count, const GLint64EXT * value)  {if (GLeeInit()) glUniform2i64vNV(location, count, value);}
+  GLEEPFNGLUNIFORM2I64VNVPROC GLeeFuncPtr_glUniform2i64vNV=GLee_Lazy_glUniform2i64vNV;
+#endif
+#ifndef GLEE_C_DEFINED_glUniform3i64vNV
+#define GLEE_C_DEFINED_glUniform3i64vNV
+  void __stdcall GLee_Lazy_glUniform3i64vNV(GLint  location, GLsizei  count, const GLint64EXT * value)  {if (GLeeInit()) glUniform3i64vNV(location, count, value);}
+  GLEEPFNGLUNIFORM3I64VNVPROC GLeeFuncPtr_glUniform3i64vNV=GLee_Lazy_glUniform3i64vNV;
+#endif
+#ifndef GLEE_C_DEFINED_glUniform4i64vNV
+#define GLEE_C_DEFINED_glUniform4i64vNV
+  void __stdcall GLee_Lazy_glUniform4i64vNV(GLint  location, GLsizei  count, const GLint64EXT * value)  {if (GLeeInit()) glUniform4i64vNV(location, count, value);}
+  GLEEPFNGLUNIFORM4I64VNVPROC GLeeFuncPtr_glUniform4i64vNV=GLee_Lazy_glUniform4i64vNV;
+#endif
+#ifndef GLEE_C_DEFINED_glUniform1ui64NV
+#define GLEE_C_DEFINED_glUniform1ui64NV
+  void __stdcall GLee_Lazy_glUniform1ui64NV(GLint  location, GLuint64EXT  x)  {if (GLeeInit()) glUniform1ui64NV(location, x);}
+  GLEEPFNGLUNIFORM1UI64NVPROC GLeeFuncPtr_glUniform1ui64NV=GLee_Lazy_glUniform1ui64NV;
+#endif
+#ifndef GLEE_C_DEFINED_glUniform2ui64NV
+#define GLEE_C_DEFINED_glUniform2ui64NV
+  void __stdcall GLee_Lazy_glUniform2ui64NV(GLint  location, GLuint64EXT  x, GLuint64EXT  y)  {if (GLeeInit()) glUniform2ui64NV(location, x, y);}
+  GLEEPFNGLUNIFORM2UI64NVPROC GLeeFuncPtr_glUniform2ui64NV=GLee_Lazy_glUniform2ui64NV;
+#endif
+#ifndef GLEE_C_DEFINED_glUniform3ui64NV
+#define GLEE_C_DEFINED_glUniform3ui64NV
+  void __stdcall GLee_Lazy_glUniform3ui64NV(GLint  location, GLuint64EXT  x, GLuint64EXT  y, GLuint64EXT  z)  {if (GLeeInit()) glUniform3ui64NV(location, x, y, z);}
+  GLEEPFNGLUNIFORM3UI64NVPROC GLeeFuncPtr_glUniform3ui64NV=GLee_Lazy_glUniform3ui64NV;
+#endif
+#ifndef GLEE_C_DEFINED_glUniform4ui64NV
+#define GLEE_C_DEFINED_glUniform4ui64NV
+  void __stdcall GLee_Lazy_glUniform4ui64NV(GLint  location, GLuint64EXT  x, GLuint64EXT  y, GLuint64EXT  z, GLuint64EXT  w)  {if (GLeeInit()) glUniform4ui64NV(location, x, y, z, w);}
+  GLEEPFNGLUNIFORM4UI64NVPROC GLeeFuncPtr_glUniform4ui64NV=GLee_Lazy_glUniform4ui64NV;
+#endif
+#ifndef GLEE_C_DEFINED_glUniform1ui64vNV
+#define GLEE_C_DEFINED_glUniform1ui64vNV
+  void __stdcall GLee_Lazy_glUniform1ui64vNV(GLint  location, GLsizei  count, const GLuint64EXT * value)  {if (GLeeInit()) glUniform1ui64vNV(location, count, value);}
+  GLEEPFNGLUNIFORM1UI64VNVPROC GLeeFuncPtr_glUniform1ui64vNV=GLee_Lazy_glUniform1ui64vNV;
+#endif
+#ifndef GLEE_C_DEFINED_glUniform2ui64vNV
+#define GLEE_C_DEFINED_glUniform2ui64vNV
+  void __stdcall GLee_Lazy_glUniform2ui64vNV(GLint  location, GLsizei  count, const GLuint64EXT * value)  {if (GLeeInit()) glUniform2ui64vNV(location, count, value);}
+  GLEEPFNGLUNIFORM2UI64VNVPROC GLeeFuncPtr_glUniform2ui64vNV=GLee_Lazy_glUniform2ui64vNV;
+#endif
+#ifndef GLEE_C_DEFINED_glUniform3ui64vNV
+#define GLEE_C_DEFINED_glUniform3ui64vNV
+  void __stdcall GLee_Lazy_glUniform3ui64vNV(GLint  location, GLsizei  count, const GLuint64EXT * value)  {if (GLeeInit()) glUniform3ui64vNV(location, count, value);}
+  GLEEPFNGLUNIFORM3UI64VNVPROC GLeeFuncPtr_glUniform3ui64vNV=GLee_Lazy_glUniform3ui64vNV;
+#endif
+#ifndef GLEE_C_DEFINED_glUniform4ui64vNV
+#define GLEE_C_DEFINED_glUniform4ui64vNV
+  void __stdcall GLee_Lazy_glUniform4ui64vNV(GLint  location, GLsizei  count, const GLuint64EXT * value)  {if (GLeeInit()) glUniform4ui64vNV(location, count, value);}
+  GLEEPFNGLUNIFORM4UI64VNVPROC GLeeFuncPtr_glUniform4ui64vNV=GLee_Lazy_glUniform4ui64vNV;
+#endif
+#ifndef GLEE_C_DEFINED_glGetUniformi64vNV
+#define GLEE_C_DEFINED_glGetUniformi64vNV
+  void __stdcall GLee_Lazy_glGetUniformi64vNV(GLuint  program, GLint  location, GLint64EXT * params)  {if (GLeeInit()) glGetUniformi64vNV(program, location, params);}
+  GLEEPFNGLGETUNIFORMI64VNVPROC GLeeFuncPtr_glGetUniformi64vNV=GLee_Lazy_glGetUniformi64vNV;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramUniform1i64NV
+#define GLEE_C_DEFINED_glProgramUniform1i64NV
+  void __stdcall GLee_Lazy_glProgramUniform1i64NV(GLuint  program, GLint  location, GLint64EXT  x)  {if (GLeeInit()) glProgramUniform1i64NV(program, location, x);}
+  GLEEPFNGLPROGRAMUNIFORM1I64NVPROC GLeeFuncPtr_glProgramUniform1i64NV=GLee_Lazy_glProgramUniform1i64NV;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramUniform2i64NV
+#define GLEE_C_DEFINED_glProgramUniform2i64NV
+  void __stdcall GLee_Lazy_glProgramUniform2i64NV(GLuint  program, GLint  location, GLint64EXT  x, GLint64EXT  y)  {if (GLeeInit()) glProgramUniform2i64NV(program, location, x, y);}
+  GLEEPFNGLPROGRAMUNIFORM2I64NVPROC GLeeFuncPtr_glProgramUniform2i64NV=GLee_Lazy_glProgramUniform2i64NV;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramUniform3i64NV
+#define GLEE_C_DEFINED_glProgramUniform3i64NV
+  void __stdcall GLee_Lazy_glProgramUniform3i64NV(GLuint  program, GLint  location, GLint64EXT  x, GLint64EXT  y, GLint64EXT  z)  {if (GLeeInit()) glProgramUniform3i64NV(program, location, x, y, z);}
+  GLEEPFNGLPROGRAMUNIFORM3I64NVPROC GLeeFuncPtr_glProgramUniform3i64NV=GLee_Lazy_glProgramUniform3i64NV;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramUniform4i64NV
+#define GLEE_C_DEFINED_glProgramUniform4i64NV
+  void __stdcall GLee_Lazy_glProgramUniform4i64NV(GLuint  program, GLint  location, GLint64EXT  x, GLint64EXT  y, GLint64EXT  z, GLint64EXT  w)  {if (GLeeInit()) glProgramUniform4i64NV(program, location, x, y, z, w);}
+  GLEEPFNGLPROGRAMUNIFORM4I64NVPROC GLeeFuncPtr_glProgramUniform4i64NV=GLee_Lazy_glProgramUniform4i64NV;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramUniform1i64vNV
+#define GLEE_C_DEFINED_glProgramUniform1i64vNV
+  void __stdcall GLee_Lazy_glProgramUniform1i64vNV(GLuint  program, GLint  location, GLsizei  count, const GLint64EXT * value)  {if (GLeeInit()) glProgramUniform1i64vNV(program, location, count, value);}
+  GLEEPFNGLPROGRAMUNIFORM1I64VNVPROC GLeeFuncPtr_glProgramUniform1i64vNV=GLee_Lazy_glProgramUniform1i64vNV;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramUniform2i64vNV
+#define GLEE_C_DEFINED_glProgramUniform2i64vNV
+  void __stdcall GLee_Lazy_glProgramUniform2i64vNV(GLuint  program, GLint  location, GLsizei  count, const GLint64EXT * value)  {if (GLeeInit()) glProgramUniform2i64vNV(program, location, count, value);}
+  GLEEPFNGLPROGRAMUNIFORM2I64VNVPROC GLeeFuncPtr_glProgramUniform2i64vNV=GLee_Lazy_glProgramUniform2i64vNV;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramUniform3i64vNV
+#define GLEE_C_DEFINED_glProgramUniform3i64vNV
+  void __stdcall GLee_Lazy_glProgramUniform3i64vNV(GLuint  program, GLint  location, GLsizei  count, const GLint64EXT * value)  {if (GLeeInit()) glProgramUniform3i64vNV(program, location, count, value);}
+  GLEEPFNGLPROGRAMUNIFORM3I64VNVPROC GLeeFuncPtr_glProgramUniform3i64vNV=GLee_Lazy_glProgramUniform3i64vNV;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramUniform4i64vNV
+#define GLEE_C_DEFINED_glProgramUniform4i64vNV
+  void __stdcall GLee_Lazy_glProgramUniform4i64vNV(GLuint  program, GLint  location, GLsizei  count, const GLint64EXT * value)  {if (GLeeInit()) glProgramUniform4i64vNV(program, location, count, value);}
+  GLEEPFNGLPROGRAMUNIFORM4I64VNVPROC GLeeFuncPtr_glProgramUniform4i64vNV=GLee_Lazy_glProgramUniform4i64vNV;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramUniform1ui64NV
+#define GLEE_C_DEFINED_glProgramUniform1ui64NV
+  void __stdcall GLee_Lazy_glProgramUniform1ui64NV(GLuint  program, GLint  location, GLuint64EXT  x)  {if (GLeeInit()) glProgramUniform1ui64NV(program, location, x);}
+  GLEEPFNGLPROGRAMUNIFORM1UI64NVPROC GLeeFuncPtr_glProgramUniform1ui64NV=GLee_Lazy_glProgramUniform1ui64NV;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramUniform2ui64NV
+#define GLEE_C_DEFINED_glProgramUniform2ui64NV
+  void __stdcall GLee_Lazy_glProgramUniform2ui64NV(GLuint  program, GLint  location, GLuint64EXT  x, GLuint64EXT  y)  {if (GLeeInit()) glProgramUniform2ui64NV(program, location, x, y);}
+  GLEEPFNGLPROGRAMUNIFORM2UI64NVPROC GLeeFuncPtr_glProgramUniform2ui64NV=GLee_Lazy_glProgramUniform2ui64NV;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramUniform3ui64NV
+#define GLEE_C_DEFINED_glProgramUniform3ui64NV
+  void __stdcall GLee_Lazy_glProgramUniform3ui64NV(GLuint  program, GLint  location, GLuint64EXT  x, GLuint64EXT  y, GLuint64EXT  z)  {if (GLeeInit()) glProgramUniform3ui64NV(program, location, x, y, z);}
+  GLEEPFNGLPROGRAMUNIFORM3UI64NVPROC GLeeFuncPtr_glProgramUniform3ui64NV=GLee_Lazy_glProgramUniform3ui64NV;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramUniform4ui64NV
+#define GLEE_C_DEFINED_glProgramUniform4ui64NV
+  void __stdcall GLee_Lazy_glProgramUniform4ui64NV(GLuint  program, GLint  location, GLuint64EXT  x, GLuint64EXT  y, GLuint64EXT  z, GLuint64EXT  w)  {if (GLeeInit()) glProgramUniform4ui64NV(program, location, x, y, z, w);}
+  GLEEPFNGLPROGRAMUNIFORM4UI64NVPROC GLeeFuncPtr_glProgramUniform4ui64NV=GLee_Lazy_glProgramUniform4ui64NV;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramUniform1ui64vNV
+#define GLEE_C_DEFINED_glProgramUniform1ui64vNV
+  void __stdcall GLee_Lazy_glProgramUniform1ui64vNV(GLuint  program, GLint  location, GLsizei  count, const GLuint64EXT * value)  {if (GLeeInit()) glProgramUniform1ui64vNV(program, location, count, value);}
+  GLEEPFNGLPROGRAMUNIFORM1UI64VNVPROC GLeeFuncPtr_glProgramUniform1ui64vNV=GLee_Lazy_glProgramUniform1ui64vNV;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramUniform2ui64vNV
+#define GLEE_C_DEFINED_glProgramUniform2ui64vNV
+  void __stdcall GLee_Lazy_glProgramUniform2ui64vNV(GLuint  program, GLint  location, GLsizei  count, const GLuint64EXT * value)  {if (GLeeInit()) glProgramUniform2ui64vNV(program, location, count, value);}
+  GLEEPFNGLPROGRAMUNIFORM2UI64VNVPROC GLeeFuncPtr_glProgramUniform2ui64vNV=GLee_Lazy_glProgramUniform2ui64vNV;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramUniform3ui64vNV
+#define GLEE_C_DEFINED_glProgramUniform3ui64vNV
+  void __stdcall GLee_Lazy_glProgramUniform3ui64vNV(GLuint  program, GLint  location, GLsizei  count, const GLuint64EXT * value)  {if (GLeeInit()) glProgramUniform3ui64vNV(program, location, count, value);}
+  GLEEPFNGLPROGRAMUNIFORM3UI64VNVPROC GLeeFuncPtr_glProgramUniform3ui64vNV=GLee_Lazy_glProgramUniform3ui64vNV;
+#endif
+#ifndef GLEE_C_DEFINED_glProgramUniform4ui64vNV
+#define GLEE_C_DEFINED_glProgramUniform4ui64vNV
+  void __stdcall GLee_Lazy_glProgramUniform4ui64vNV(GLuint  program, GLint  location, GLsizei  count, const GLuint64EXT * value)  {if (GLeeInit()) glProgramUniform4ui64vNV(program, location, count, value);}
+  GLEEPFNGLPROGRAMUNIFORM4UI64VNVPROC GLeeFuncPtr_glProgramUniform4ui64vNV=GLee_Lazy_glProgramUniform4ui64vNV;
+#endif
+#endif 
+
+/* GL_NV_shader_buffer_store */
+
+#ifdef __GLEE_GL_NV_shader_buffer_store
+#endif 
+
+/* GL_NV_tessellation_program5 */
+
+#ifdef __GLEE_GL_NV_tessellation_program5
+#endif 
+
+/* GL_NV_vertex_attrib_integer_64bit */
+
+#ifdef __GLEE_GL_NV_vertex_attrib_integer_64bit
+#ifndef GLEE_C_DEFINED_glVertexAttribL1i64NV
+#define GLEE_C_DEFINED_glVertexAttribL1i64NV
+  void __stdcall GLee_Lazy_glVertexAttribL1i64NV(GLuint  index, GLint64EXT  x)  {if (GLeeInit()) glVertexAttribL1i64NV(index, x);}
+  GLEEPFNGLVERTEXATTRIBL1I64NVPROC GLeeFuncPtr_glVertexAttribL1i64NV=GLee_Lazy_glVertexAttribL1i64NV;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttribL2i64NV
+#define GLEE_C_DEFINED_glVertexAttribL2i64NV
+  void __stdcall GLee_Lazy_glVertexAttribL2i64NV(GLuint  index, GLint64EXT  x, GLint64EXT  y)  {if (GLeeInit()) glVertexAttribL2i64NV(index, x, y);}
+  GLEEPFNGLVERTEXATTRIBL2I64NVPROC GLeeFuncPtr_glVertexAttribL2i64NV=GLee_Lazy_glVertexAttribL2i64NV;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttribL3i64NV
+#define GLEE_C_DEFINED_glVertexAttribL3i64NV
+  void __stdcall GLee_Lazy_glVertexAttribL3i64NV(GLuint  index, GLint64EXT  x, GLint64EXT  y, GLint64EXT  z)  {if (GLeeInit()) glVertexAttribL3i64NV(index, x, y, z);}
+  GLEEPFNGLVERTEXATTRIBL3I64NVPROC GLeeFuncPtr_glVertexAttribL3i64NV=GLee_Lazy_glVertexAttribL3i64NV;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttribL4i64NV
+#define GLEE_C_DEFINED_glVertexAttribL4i64NV
+  void __stdcall GLee_Lazy_glVertexAttribL4i64NV(GLuint  index, GLint64EXT  x, GLint64EXT  y, GLint64EXT  z, GLint64EXT  w)  {if (GLeeInit()) glVertexAttribL4i64NV(index, x, y, z, w);}
+  GLEEPFNGLVERTEXATTRIBL4I64NVPROC GLeeFuncPtr_glVertexAttribL4i64NV=GLee_Lazy_glVertexAttribL4i64NV;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttribL1i64vNV
+#define GLEE_C_DEFINED_glVertexAttribL1i64vNV
+  void __stdcall GLee_Lazy_glVertexAttribL1i64vNV(GLuint  index, const GLint64EXT * v)  {if (GLeeInit()) glVertexAttribL1i64vNV(index, v);}
+  GLEEPFNGLVERTEXATTRIBL1I64VNVPROC GLeeFuncPtr_glVertexAttribL1i64vNV=GLee_Lazy_glVertexAttribL1i64vNV;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttribL2i64vNV
+#define GLEE_C_DEFINED_glVertexAttribL2i64vNV
+  void __stdcall GLee_Lazy_glVertexAttribL2i64vNV(GLuint  index, const GLint64EXT * v)  {if (GLeeInit()) glVertexAttribL2i64vNV(index, v);}
+  GLEEPFNGLVERTEXATTRIBL2I64VNVPROC GLeeFuncPtr_glVertexAttribL2i64vNV=GLee_Lazy_glVertexAttribL2i64vNV;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttribL3i64vNV
+#define GLEE_C_DEFINED_glVertexAttribL3i64vNV
+  void __stdcall GLee_Lazy_glVertexAttribL3i64vNV(GLuint  index, const GLint64EXT * v)  {if (GLeeInit()) glVertexAttribL3i64vNV(index, v);}
+  GLEEPFNGLVERTEXATTRIBL3I64VNVPROC GLeeFuncPtr_glVertexAttribL3i64vNV=GLee_Lazy_glVertexAttribL3i64vNV;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttribL4i64vNV
+#define GLEE_C_DEFINED_glVertexAttribL4i64vNV
+  void __stdcall GLee_Lazy_glVertexAttribL4i64vNV(GLuint  index, const GLint64EXT * v)  {if (GLeeInit()) glVertexAttribL4i64vNV(index, v);}
+  GLEEPFNGLVERTEXATTRIBL4I64VNVPROC GLeeFuncPtr_glVertexAttribL4i64vNV=GLee_Lazy_glVertexAttribL4i64vNV;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttribL1ui64NV
+#define GLEE_C_DEFINED_glVertexAttribL1ui64NV
+  void __stdcall GLee_Lazy_glVertexAttribL1ui64NV(GLuint  index, GLuint64EXT  x)  {if (GLeeInit()) glVertexAttribL1ui64NV(index, x);}
+  GLEEPFNGLVERTEXATTRIBL1UI64NVPROC GLeeFuncPtr_glVertexAttribL1ui64NV=GLee_Lazy_glVertexAttribL1ui64NV;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttribL2ui64NV
+#define GLEE_C_DEFINED_glVertexAttribL2ui64NV
+  void __stdcall GLee_Lazy_glVertexAttribL2ui64NV(GLuint  index, GLuint64EXT  x, GLuint64EXT  y)  {if (GLeeInit()) glVertexAttribL2ui64NV(index, x, y);}
+  GLEEPFNGLVERTEXATTRIBL2UI64NVPROC GLeeFuncPtr_glVertexAttribL2ui64NV=GLee_Lazy_glVertexAttribL2ui64NV;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttribL3ui64NV
+#define GLEE_C_DEFINED_glVertexAttribL3ui64NV
+  void __stdcall GLee_Lazy_glVertexAttribL3ui64NV(GLuint  index, GLuint64EXT  x, GLuint64EXT  y, GLuint64EXT  z)  {if (GLeeInit()) glVertexAttribL3ui64NV(index, x, y, z);}
+  GLEEPFNGLVERTEXATTRIBL3UI64NVPROC GLeeFuncPtr_glVertexAttribL3ui64NV=GLee_Lazy_glVertexAttribL3ui64NV;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttribL4ui64NV
+#define GLEE_C_DEFINED_glVertexAttribL4ui64NV
+  void __stdcall GLee_Lazy_glVertexAttribL4ui64NV(GLuint  index, GLuint64EXT  x, GLuint64EXT  y, GLuint64EXT  z, GLuint64EXT  w)  {if (GLeeInit()) glVertexAttribL4ui64NV(index, x, y, z, w);}
+  GLEEPFNGLVERTEXATTRIBL4UI64NVPROC GLeeFuncPtr_glVertexAttribL4ui64NV=GLee_Lazy_glVertexAttribL4ui64NV;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttribL1ui64vNV
+#define GLEE_C_DEFINED_glVertexAttribL1ui64vNV
+  void __stdcall GLee_Lazy_glVertexAttribL1ui64vNV(GLuint  index, const GLuint64EXT * v)  {if (GLeeInit()) glVertexAttribL1ui64vNV(index, v);}
+  GLEEPFNGLVERTEXATTRIBL1UI64VNVPROC GLeeFuncPtr_glVertexAttribL1ui64vNV=GLee_Lazy_glVertexAttribL1ui64vNV;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttribL2ui64vNV
+#define GLEE_C_DEFINED_glVertexAttribL2ui64vNV
+  void __stdcall GLee_Lazy_glVertexAttribL2ui64vNV(GLuint  index, const GLuint64EXT * v)  {if (GLeeInit()) glVertexAttribL2ui64vNV(index, v);}
+  GLEEPFNGLVERTEXATTRIBL2UI64VNVPROC GLeeFuncPtr_glVertexAttribL2ui64vNV=GLee_Lazy_glVertexAttribL2ui64vNV;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttribL3ui64vNV
+#define GLEE_C_DEFINED_glVertexAttribL3ui64vNV
+  void __stdcall GLee_Lazy_glVertexAttribL3ui64vNV(GLuint  index, const GLuint64EXT * v)  {if (GLeeInit()) glVertexAttribL3ui64vNV(index, v);}
+  GLEEPFNGLVERTEXATTRIBL3UI64VNVPROC GLeeFuncPtr_glVertexAttribL3ui64vNV=GLee_Lazy_glVertexAttribL3ui64vNV;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttribL4ui64vNV
+#define GLEE_C_DEFINED_glVertexAttribL4ui64vNV
+  void __stdcall GLee_Lazy_glVertexAttribL4ui64vNV(GLuint  index, const GLuint64EXT * v)  {if (GLeeInit()) glVertexAttribL4ui64vNV(index, v);}
+  GLEEPFNGLVERTEXATTRIBL4UI64VNVPROC GLeeFuncPtr_glVertexAttribL4ui64vNV=GLee_Lazy_glVertexAttribL4ui64vNV;
+#endif
+#ifndef GLEE_C_DEFINED_glGetVertexAttribLi64vNV
+#define GLEE_C_DEFINED_glGetVertexAttribLi64vNV
+  void __stdcall GLee_Lazy_glGetVertexAttribLi64vNV(GLuint  index, GLenum  pname, GLint64EXT * params)  {if (GLeeInit()) glGetVertexAttribLi64vNV(index, pname, params);}
+  GLEEPFNGLGETVERTEXATTRIBLI64VNVPROC GLeeFuncPtr_glGetVertexAttribLi64vNV=GLee_Lazy_glGetVertexAttribLi64vNV;
+#endif
+#ifndef GLEE_C_DEFINED_glGetVertexAttribLui64vNV
+#define GLEE_C_DEFINED_glGetVertexAttribLui64vNV
+  void __stdcall GLee_Lazy_glGetVertexAttribLui64vNV(GLuint  index, GLenum  pname, GLuint64EXT * params)  {if (GLeeInit()) glGetVertexAttribLui64vNV(index, pname, params);}
+  GLEEPFNGLGETVERTEXATTRIBLUI64VNVPROC GLeeFuncPtr_glGetVertexAttribLui64vNV=GLee_Lazy_glGetVertexAttribLui64vNV;
+#endif
+#ifndef GLEE_C_DEFINED_glVertexAttribLFormatNV
+#define GLEE_C_DEFINED_glVertexAttribLFormatNV
+  void __stdcall GLee_Lazy_glVertexAttribLFormatNV(GLuint  index, GLint  size, GLenum  type, GLsizei  stride)  {if (GLeeInit()) glVertexAttribLFormatNV(index, size, type, stride);}
+  GLEEPFNGLVERTEXATTRIBLFORMATNVPROC GLeeFuncPtr_glVertexAttribLFormatNV=GLee_Lazy_glVertexAttribLFormatNV;
+#endif
+#endif 
+
+/* GL_NV_multisample_coverage */
+
+#ifdef __GLEE_GL_NV_multisample_coverage
+#endif 
+
+/* GL_AMD_name_gen_delete */
+
+#ifdef __GLEE_GL_AMD_name_gen_delete
+#ifndef GLEE_C_DEFINED_glGenNamesAMD
+#define GLEE_C_DEFINED_glGenNamesAMD
+  void __stdcall GLee_Lazy_glGenNamesAMD(GLenum  identifier, GLuint  num, GLuint * names)  {if (GLeeInit()) glGenNamesAMD(identifier, num, names);}
+  GLEEPFNGLGENNAMESAMDPROC GLeeFuncPtr_glGenNamesAMD=GLee_Lazy_glGenNamesAMD;
+#endif
+#ifndef GLEE_C_DEFINED_glDeleteNamesAMD
+#define GLEE_C_DEFINED_glDeleteNamesAMD
+  void __stdcall GLee_Lazy_glDeleteNamesAMD(GLenum  identifier, GLuint  num, const GLuint * names)  {if (GLeeInit()) glDeleteNamesAMD(identifier, num, names);}
+  GLEEPFNGLDELETENAMESAMDPROC GLeeFuncPtr_glDeleteNamesAMD=GLee_Lazy_glDeleteNamesAMD;
+#endif
+#ifndef GLEE_C_DEFINED_glIsNameAMD
+#define GLEE_C_DEFINED_glIsNameAMD
+  GLboolean __stdcall GLee_Lazy_glIsNameAMD(GLenum  identifier, GLuint  name)  {if (GLeeInit()) return glIsNameAMD(identifier, name); return (GLboolean)0;}
+  GLEEPFNGLISNAMEAMDPROC GLeeFuncPtr_glIsNameAMD=GLee_Lazy_glIsNameAMD;
+#endif
+#endif 
+
+/* GL_AMD_transform_feedback3_lines_triangles */
+
+#ifdef __GLEE_GL_AMD_transform_feedback3_lines_triangles
+#endif 
+
+/* GL_AMD_depth_clamp_separate */
+
+#ifdef __GLEE_GL_AMD_depth_clamp_separate
+#endif 
+
+/* GL_EXT_texture_sRGB_decode */
+
+#ifdef __GLEE_GL_EXT_texture_sRGB_decode
+#endif 
+
+/* GL_NV_texture_multisample */
+
+#ifdef __GLEE_GL_NV_texture_multisample
+#ifndef GLEE_C_DEFINED_glTexImage2DMultisampleCoverageNV
+#define GLEE_C_DEFINED_glTexImage2DMultisampleCoverageNV
+  void __stdcall GLee_Lazy_glTexImage2DMultisampleCoverageNV(GLenum  target, GLsizei  coverageSamples, GLsizei  colorSamples, GLint  internalFormat, GLsizei  width, GLsizei  height, GLboolean  fixedSampleLocations)  {if (GLeeInit()) glTexImage2DMultisampleCoverageNV(target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations);}
+  GLEEPFNGLTEXIMAGE2DMULTISAMPLECOVERAGENVPROC GLeeFuncPtr_glTexImage2DMultisampleCoverageNV=GLee_Lazy_glTexImage2DMultisampleCoverageNV;
+#endif
+#ifndef GLEE_C_DEFINED_glTexImage3DMultisampleCoverageNV
+#define GLEE_C_DEFINED_glTexImage3DMultisampleCoverageNV
+  void __stdcall GLee_Lazy_glTexImage3DMultisampleCoverageNV(GLenum  target, GLsizei  coverageSamples, GLsizei  colorSamples, GLint  internalFormat, GLsizei  width, GLsizei  height, GLsizei  depth, GLboolean  fixedSampleLocations)  {if (GLeeInit()) glTexImage3DMultisampleCoverageNV(target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations);}
+  GLEEPFNGLTEXIMAGE3DMULTISAMPLECOVERAGENVPROC GLeeFuncPtr_glTexImage3DMultisampleCoverageNV=GLee_Lazy_glTexImage3DMultisampleCoverageNV;
+#endif
+#ifndef GLEE_C_DEFINED_glTextureImage2DMultisampleNV
+#define GLEE_C_DEFINED_glTextureImage2DMultisampleNV
+  void __stdcall GLee_Lazy_glTextureImage2DMultisampleNV(GLuint  texture, GLenum  target, GLsizei  samples, GLint  internalFormat, GLsizei  width, GLsizei  height, GLboolean  fixedSampleLocations)  {if (GLeeInit()) glTextureImage2DMultisampleNV(texture, target, samples, internalFormat, width, height, fixedSampleLocations);}
+  GLEEPFNGLTEXTUREIMAGE2DMULTISAMPLENVPROC GLeeFuncPtr_glTextureImage2DMultisampleNV=GLee_Lazy_glTextureImage2DMultisampleNV;
+#endif
+#ifndef GLEE_C_DEFINED_glTextureImage3DMultisampleNV
+#define GLEE_C_DEFINED_glTextureImage3DMultisampleNV
+  void __stdcall GLee_Lazy_glTextureImage3DMultisampleNV(GLuint  texture, GLenum  target, GLsizei  samples, GLint  internalFormat, GLsizei  width, GLsizei  height, GLsizei  depth, GLboolean  fixedSampleLocations)  {if (GLeeInit()) glTextureImage3DMultisampleNV(texture, target, samples, internalFormat, width, height, depth, fixedSampleLocations);}
+  GLEEPFNGLTEXTUREIMAGE3DMULTISAMPLENVPROC GLeeFuncPtr_glTextureImage3DMultisampleNV=GLee_Lazy_glTextureImage3DMultisampleNV;
+#endif
+#ifndef GLEE_C_DEFINED_glTextureImage2DMultisampleCoverageNV
+#define GLEE_C_DEFINED_glTextureImage2DMultisampleCoverageNV
+  void __stdcall GLee_Lazy_glTextureImage2DMultisampleCoverageNV(GLuint  texture, GLenum  target, GLsizei  coverageSamples, GLsizei  colorSamples, GLint  internalFormat, GLsizei  width, GLsizei  height, GLboolean  fixedSampleLocations)  {if (GLeeInit()) glTextureImage2DMultisampleCoverageNV(texture, target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations);}
+  GLEEPFNGLTEXTUREIMAGE2DMULTISAMPLECOVERAGENVPROC GLeeFuncPtr_glTextureImage2DMultisampleCoverageNV=GLee_Lazy_glTextureImage2DMultisampleCoverageNV;
+#endif
+#ifndef GLEE_C_DEFINED_glTextureImage3DMultisampleCoverageNV
+#define GLEE_C_DEFINED_glTextureImage3DMultisampleCoverageNV
+  void __stdcall GLee_Lazy_glTextureImage3DMultisampleCoverageNV(GLuint  texture, GLenum  target, GLsizei  coverageSamples, GLsizei  colorSamples, GLint  internalFormat, GLsizei  width, GLsizei  height, GLsizei  depth, GLboolean  fixedSampleLocations)  {if (GLeeInit()) glTextureImage3DMultisampleCoverageNV(texture, target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations);}
+  GLEEPFNGLTEXTUREIMAGE3DMULTISAMPLECOVERAGENVPROC GLeeFuncPtr_glTextureImage3DMultisampleCoverageNV=GLee_Lazy_glTextureImage3DMultisampleCoverageNV;
+#endif
+#endif 
+
+/* GL_AMD_blend_minmax_factor */
+
+#ifdef __GLEE_GL_AMD_blend_minmax_factor
+#endif 
+
+/* GL_AMD_sample_positions */
+
+#ifdef __GLEE_GL_AMD_sample_positions
+#ifndef GLEE_C_DEFINED_glSetMultisamplefvAMD
+#define GLEE_C_DEFINED_glSetMultisamplefvAMD
+  void __stdcall GLee_Lazy_glSetMultisamplefvAMD(GLenum  pname, GLuint  index, const GLfloat * val)  {if (GLeeInit()) glSetMultisamplefvAMD(pname, index, val);}
+  GLEEPFNGLSETMULTISAMPLEFVAMDPROC GLeeFuncPtr_glSetMultisamplefvAMD=GLee_Lazy_glSetMultisamplefvAMD;
+#endif
+#endif 
+
+/* GL_EXT_x11_sync_object */
+
+#ifdef __GLEE_GL_EXT_x11_sync_object
+#ifndef GLEE_C_DEFINED_glImportSyncEXT
+#define GLEE_C_DEFINED_glImportSyncEXT
+  GLsync __stdcall GLee_Lazy_glImportSyncEXT(GLenum  external_sync_type, GLintptr  external_sync, GLbitfield  flags)  {if (GLeeInit()) return glImportSyncEXT(external_sync_type, external_sync, flags); return (GLsync)0;}
+  GLEEPFNGLIMPORTSYNCEXTPROC GLeeFuncPtr_glImportSyncEXT=GLee_Lazy_glImportSyncEXT;
+#endif
+#endif 
+
+/* GL_AMD_multi_draw_indirect */
+
+#ifdef __GLEE_GL_AMD_multi_draw_indirect
+#ifndef GLEE_C_DEFINED_glMultiDrawArraysIndirectAMD
+#define GLEE_C_DEFINED_glMultiDrawArraysIndirectAMD
+  void __stdcall GLee_Lazy_glMultiDrawArraysIndirectAMD(GLenum  mode, const GLvoid * indirect, GLsizei  primcount, GLsizei  stride)  {if (GLeeInit()) glMultiDrawArraysIndirectAMD(mode, indirect, primcount, stride);}
+  GLEEPFNGLMULTIDRAWARRAYSINDIRECTAMDPROC GLeeFuncPtr_glMultiDrawArraysIndirectAMD=GLee_Lazy_glMultiDrawArraysIndirectAMD;
+#endif
+#ifndef GLEE_C_DEFINED_glMultiDrawElementsIndirectAMD
+#define GLEE_C_DEFINED_glMultiDrawElementsIndirectAMD
+  void __stdcall GLee_Lazy_glMultiDrawElementsIndirectAMD(GLenum  mode, GLenum  type, const GLvoid * indirect, GLsizei  primcount, GLsizei  stride)  {if (GLeeInit()) glMultiDrawElementsIndirectAMD(mode, type, indirect, primcount, stride);}
+  GLEEPFNGLMULTIDRAWELEMENTSINDIRECTAMDPROC GLeeFuncPtr_glMultiDrawElementsIndirectAMD=GLee_Lazy_glMultiDrawElementsIndirectAMD;
+#endif
+#endif 
+
+/* GL_EXT_framebuffer_multisample_blit_scaled */
+
+#ifdef __GLEE_GL_EXT_framebuffer_multisample_blit_scaled
+#endif 
+
+/* GL_SGIX_texture_select */
+
+#ifdef __GLEE_GL_SGIX_texture_select
+#endif 
+
+/* GL_INGR_blend_func_separate */
+
+#ifdef __GLEE_GL_INGR_blend_func_separate
+#ifndef GLEE_C_DEFINED_glBlendFuncSeparateINGR
+#define GLEE_C_DEFINED_glBlendFuncSeparateINGR
+  void __stdcall GLee_Lazy_glBlendFuncSeparateINGR(GLenum  sfactorRGB, GLenum  dfactorRGB, GLenum  sfactorAlpha, GLenum  dfactorAlpha)  {if (GLeeInit()) glBlendFuncSeparateINGR(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);}
+  GLEEPFNGLBLENDFUNCSEPARATEINGRPROC GLeeFuncPtr_glBlendFuncSeparateINGR=GLee_Lazy_glBlendFuncSeparateINGR;
+#endif
+#endif 
+
+/* GL_SGIX_depth_pass_instrument */
+
+#ifdef __GLEE_GL_SGIX_depth_pass_instrument
+#endif 
+
+/* GL_SGIX_igloo_interface */
+
+#ifdef __GLEE_GL_SGIX_igloo_interface
+#ifndef GLEE_C_DEFINED_glIglooInterfaceSGIX
+#define GLEE_C_DEFINED_glIglooInterfaceSGIX
+  void __stdcall GLee_Lazy_glIglooInterfaceSGIX(GLenum  pname, const GLvoid * params)  {if (GLeeInit()) glIglooInterfaceSGIX(pname, params);}
+  GLEEPFNGLIGLOOINTERFACESGIXPROC GLeeFuncPtr_glIglooInterfaceSGIX=GLee_Lazy_glIglooInterfaceSGIX;
+#endif
+#endif 
+
+/* GL_OES_compressed_paletted_texture */
+
+#ifdef __GLEE_GL_OES_compressed_paletted_texture
+#endif 
+
+/* GL_OES_fixed_point */
+
+#ifdef __GLEE_GL_OES_fixed_point
+#endif 
+
+/* GL_OES_single_precision */
+
+#ifdef __GLEE_GL_OES_single_precision
+#ifndef GLEE_C_DEFINED_glClearDepthfOES
+#define GLEE_C_DEFINED_glClearDepthfOES
+  GLvoid __stdcall GLee_Lazy_glClearDepthfOES(GLclampd depth)  {if (GLeeInit()) glClearDepthfOES(depth);}
+  GLEEPFNGLCLEARDEPTHFOESPROC GLeeFuncPtr_glClearDepthfOES=GLee_Lazy_glClearDepthfOES;
+#endif
+#endif 
+
+/* GL_OES_query_matrix */
+
+#ifdef __GLEE_GL_OES_query_matrix
+#endif 
+
+/* GL_OES_byte_coordinates */
+
+#ifdef __GLEE_GL_OES_byte_coordinates
+#endif 
+
+/* GL_NV_gpu_program4 */
+
+#ifdef __GLEE_GL_NV_gpu_program4
+#endif 
+
+/* GL_NV_path_rendering */
+
+#ifdef __GLEE_GL_NV_path_rendering
+#endif 
+
+/* GL_AMD_vertex_shader_tessellator */
+
+#ifdef __GLEE_GL_AMD_vertex_shader_tessellator
+#ifndef GLEE_C_DEFINED_glTessellationModeAMD
+#define GLEE_C_DEFINED_glTessellationModeAMD
+  GLvoid __stdcall GLee_Lazy_glTessellationModeAMD(GLenum mode)  {if (GLeeInit()) glTessellationModeAMD(mode);}
+  GLEEPFNGLTESSELLATIONMODEAMDPROC GLeeFuncPtr_glTessellationModeAMD=GLee_Lazy_glTessellationModeAMD;
+#endif
+#endif 
+
+/* GL_EXT_fragment_lighting */
+
+#ifdef __GLEE_GL_EXT_fragment_lighting
+#endif 
+
+/* GL_EXT_texture_compression_dxt1 */
+
+#ifdef __GLEE_GL_EXT_texture_compression_dxt1
+#endif 
+
+/* GL_EXT_scene_marker */
+
+#ifdef __GLEE_GL_EXT_scene_marker
+#ifndef GLEE_C_DEFINED_glEndSceneEXT
+#define GLEE_C_DEFINED_glEndSceneEXT
+  GLvoid __stdcall GLee_Lazy_glEndSceneEXT(void)  {if (GLeeInit()) glEndSceneEXT();}
+  GLEEPFNGLENDSCENEEXTPROC GLeeFuncPtr_glEndSceneEXT=GLee_Lazy_glEndSceneEXT;
+#endif
+#endif 
+
+/* GL_EXT_geometry_shader4 */
+
+#ifdef __GLEE_GL_EXT_geometry_shader4
+#endif 
+
+/* GL_EXT_texture_env */
+
+#ifdef __GLEE_GL_EXT_texture_env
+#endif 
+
+/* GL_SGIX_texture_range */
+
+#ifdef __GLEE_GL_SGIX_texture_range
+#endif 
+
+/* GL_SGIX_pixel_texture_bits */
+
+#ifdef __GLEE_GL_SGIX_pixel_texture_bits
+#endif 
+
+/* GL_IBM_static_data */
+
+#ifdef __GLEE_GL_IBM_static_data
+#endif 
+
+/* WGL */
+
+#ifdef _WIN32
+
+/* Extension querying variables */
+
+GLboolean _GLEE_WGL_ARB_buffer_region = GL_FALSE;
+GLboolean _GLEE_WGL_ARB_multisample = GL_FALSE;
+GLboolean _GLEE_WGL_ARB_extensions_string = GL_FALSE;
+GLboolean _GLEE_WGL_ARB_pixel_format = GL_FALSE;
+GLboolean _GLEE_WGL_ARB_make_current_read = GL_FALSE;
+GLboolean _GLEE_WGL_ARB_pbuffer = GL_FALSE;
+GLboolean _GLEE_WGL_ARB_render_texture = GL_FALSE;
+GLboolean _GLEE_WGL_ARB_pixel_format_float = GL_FALSE;
+GLboolean _GLEE_WGL_ARB_framebuffer_sRGB = GL_FALSE;
+GLboolean _GLEE_WGL_ARB_create_context = GL_FALSE;
+GLboolean _GLEE_WGL_ARB_create_context_profile = GL_FALSE;
+GLboolean _GLEE_WGL_ARB_create_context_robustness = GL_FALSE;
+GLboolean _GLEE_WGL_EXT_make_current_read = GL_FALSE;
+GLboolean _GLEE_WGL_EXT_pixel_format = GL_FALSE;
+GLboolean _GLEE_WGL_EXT_pbuffer = GL_FALSE;
+GLboolean _GLEE_WGL_EXT_depth_float = GL_FALSE;
+GLboolean _GLEE_WGL_3DFX_multisample = GL_FALSE;
+GLboolean _GLEE_WGL_EXT_multisample = GL_FALSE;
+GLboolean _GLEE_WGL_I3D_digital_video_control = GL_FALSE;
+GLboolean _GLEE_WGL_I3D_gamma = GL_FALSE;
+GLboolean _GLEE_WGL_I3D_genlock = GL_FALSE;
+GLboolean _GLEE_WGL_I3D_image_buffer = GL_FALSE;
+GLboolean _GLEE_WGL_I3D_swap_frame_lock = GL_FALSE;
+GLboolean _GLEE_WGL_NV_render_depth_texture = GL_FALSE;
+GLboolean _GLEE_WGL_NV_render_texture_rectangle = GL_FALSE;
+GLboolean _GLEE_WGL_ATI_pixel_format_float = GL_FALSE;
+GLboolean _GLEE_WGL_NV_float_buffer = GL_FALSE;
+GLboolean _GLEE_WGL_3DL_stereo_control = GL_FALSE;
+GLboolean _GLEE_WGL_EXT_pixel_format_packed_float = GL_FALSE;
+GLboolean _GLEE_WGL_EXT_framebuffer_sRGB = GL_FALSE;
+GLboolean _GLEE_WGL_NV_present_video = GL_FALSE;
+GLboolean _GLEE_WGL_NV_swap_group = GL_FALSE;
+GLboolean _GLEE_WGL_NV_gpu_affinity = GL_FALSE;
+GLboolean _GLEE_WGL_AMD_gpu_association = GL_FALSE;
+GLboolean _GLEE_WGL_NV_copy_image = GL_FALSE;
+GLboolean _GLEE_WGL_NV_multisample_coverage = GL_FALSE;
+GLboolean _GLEE_WGL_EXT_create_context_es2_profile = GL_FALSE;
+GLboolean _GLEE_WGL_NV_DX_interop = GL_FALSE;
+GLboolean _GLEE_WGL_EXT_display_color_table = GL_FALSE;
+GLboolean _GLEE_WGL_EXT_extensions_string = GL_FALSE;
+GLboolean _GLEE_WGL_EXT_swap_control = GL_FALSE;
+GLboolean _GLEE_WGL_NV_vertex_array_range = GL_FALSE;
+GLboolean _GLEE_WGL_OML_sync_control = GL_FALSE;
+GLboolean _GLEE_WGL_I3D_swap_frame_usage = GL_FALSE;
+GLboolean _GLEE_WGL_NV_video_output = GL_FALSE;
+
+/*  WGL Extension names */
+
+char __GLeeWGLExtensionNames[45][35]={
+    "WGL_ARB_buffer_region",
+    "WGL_ARB_multisample",
+    "WGL_ARB_extensions_string",
+    "WGL_ARB_pixel_format",
+    "WGL_ARB_make_current_read",
+    "WGL_ARB_pbuffer",
+    "WGL_ARB_render_texture",
+    "WGL_ARB_pixel_format_float",
+    "WGL_ARB_framebuffer_sRGB",
+    "WGL_ARB_create_context",
+    "WGL_ARB_create_context_profile",
+    "WGL_ARB_create_context_robustness",
+    "WGL_EXT_make_current_read",
+    "WGL_EXT_pixel_format",
+    "WGL_EXT_pbuffer",
+    "WGL_EXT_depth_float",
+    "WGL_3DFX_multisample",
+    "WGL_EXT_multisample",
+    "WGL_I3D_digital_video_control",
+    "WGL_I3D_gamma",
+    "WGL_I3D_genlock",
+    "WGL_I3D_image_buffer",
+    "WGL_I3D_swap_frame_lock",
+    "WGL_NV_render_depth_texture",
+    "WGL_NV_render_texture_rectangle",
+    "WGL_ATI_pixel_format_float",
+    "WGL_NV_float_buffer",
+    "WGL_3DL_stereo_control",
+    "WGL_EXT_pixel_format_packed_float",
+    "WGL_EXT_framebuffer_sRGB",
+    "WGL_NV_present_video",
+    "WGL_NV_swap_group",
+    "WGL_NV_gpu_affinity",
+    "WGL_AMD_gpu_association",
+    "WGL_NV_copy_image",
+    "WGL_NV_multisample_coverage",
+    "WGL_EXT_create_context_es2_profile",
+    "WGL_NV_DX_interop",
+    "WGL_EXT_display_color_table",
+    "WGL_EXT_extensions_string",
+    "WGL_EXT_swap_control",
+    "WGL_NV_vertex_array_range",
+    "WGL_OML_sync_control",
+    "WGL_I3D_swap_frame_usage",
+    "WGL_NV_video_output"
+};
+int __GLeeWGLNumExtensions=45;
+
+/* WGL_ARB_buffer_region */
+
+#ifdef __GLEE_WGL_ARB_buffer_region
+#ifndef GLEE_C_DEFINED_wglCreateBufferRegionARB
+#define GLEE_C_DEFINED_wglCreateBufferRegionARB
+  HANDLE __stdcall GLee_Lazy_wglCreateBufferRegionARB(HDC  hDC, int  iLayerPlane, UINT  uType)  {if (GLeeInit()) return wglCreateBufferRegionARB(hDC, iLayerPlane, uType); return (HANDLE)0;}
+  GLEEPFNWGLCREATEBUFFERREGIONARBPROC GLeeFuncPtr_wglCreateBufferRegionARB=GLee_Lazy_wglCreateBufferRegionARB;
+#endif
+#ifndef GLEE_C_DEFINED_wglDeleteBufferRegionARB
+#define GLEE_C_DEFINED_wglDeleteBufferRegionARB
+  VOID __stdcall GLee_Lazy_wglDeleteBufferRegionARB(HANDLE  hRegion)  {if (GLeeInit()) wglDeleteBufferRegionARB(hRegion);}
+  GLEEPFNWGLDELETEBUFFERREGIONARBPROC GLeeFuncPtr_wglDeleteBufferRegionARB=GLee_Lazy_wglDeleteBufferRegionARB;
+#endif
+#ifndef GLEE_C_DEFINED_wglSaveBufferRegionARB
+#define GLEE_C_DEFINED_wglSaveBufferRegionARB
+  BOOL __stdcall GLee_Lazy_wglSaveBufferRegionARB(HANDLE  hRegion, int  x, int  y, int  width, int  height)  {if (GLeeInit()) return wglSaveBufferRegionARB(hRegion, x, y, width, height); return (BOOL)0;}
+  GLEEPFNWGLSAVEBUFFERREGIONARBPROC GLeeFuncPtr_wglSaveBufferRegionARB=GLee_Lazy_wglSaveBufferRegionARB;
+#endif
+#ifndef GLEE_C_DEFINED_wglRestoreBufferRegionARB
+#define GLEE_C_DEFINED_wglRestoreBufferRegionARB
+  BOOL __stdcall GLee_Lazy_wglRestoreBufferRegionARB(HANDLE  hRegion, int  x, int  y, int  width, int  height, int  xSrc, int  ySrc)  {if (GLeeInit()) return wglRestoreBufferRegionARB(hRegion, x, y, width, height, xSrc, ySrc); return (BOOL)0;}
+  GLEEPFNWGLRESTOREBUFFERREGIONARBPROC GLeeFuncPtr_wglRestoreBufferRegionARB=GLee_Lazy_wglRestoreBufferRegionARB;
+#endif
+#endif 
+
+/* WGL_ARB_multisample */
+
+#ifdef __GLEE_WGL_ARB_multisample
+#endif 
+
+/* WGL_ARB_extensions_string */
+
+#ifdef __GLEE_WGL_ARB_extensions_string
+#ifndef GLEE_C_DEFINED_wglGetExtensionsStringARB
+#define GLEE_C_DEFINED_wglGetExtensionsStringARB
+  const char * __stdcall GLee_Lazy_wglGetExtensionsStringARB(HDC  hdc)  {if (GLeeInit()) return wglGetExtensionsStringARB(hdc); return (const char *)0;}
+  GLEEPFNWGLGETEXTENSIONSSTRINGARBPROC GLeeFuncPtr_wglGetExtensionsStringARB=GLee_Lazy_wglGetExtensionsStringARB;
+#endif
+#endif 
+
+/* WGL_ARB_pixel_format */
+
+#ifdef __GLEE_WGL_ARB_pixel_format
+#ifndef GLEE_C_DEFINED_wglGetPixelFormatAttribivARB
+#define GLEE_C_DEFINED_wglGetPixelFormatAttribivARB
+  BOOL __stdcall GLee_Lazy_wglGetPixelFormatAttribivARB(HDC  hdc, int  iPixelFormat, int  iLayerPlane, UINT  nAttributes, const int * piAttributes, int * piValues)  {if (GLeeInit()) return wglGetPixelFormatAttribivARB(hdc, iPixelFormat, iLayerPlane, nAttributes, piAttributes, piValues); return (BOOL)0;}
+  GLEEPFNWGLGETPIXELFORMATATTRIBIVARBPROC GLeeFuncPtr_wglGetPixelFormatAttribivARB=GLee_Lazy_wglGetPixelFormatAttribivARB;
+#endif
+#ifndef GLEE_C_DEFINED_wglGetPixelFormatAttribfvARB
+#define GLEE_C_DEFINED_wglGetPixelFormatAttribfvARB
+  BOOL __stdcall GLee_Lazy_wglGetPixelFormatAttribfvARB(HDC  hdc, int  iPixelFormat, int  iLayerPlane, UINT  nAttributes, const int * piAttributes, FLOAT * pfValues)  {if (GLeeInit()) return wglGetPixelFormatAttribfvARB(hdc, iPixelFormat, iLayerPlane, nAttributes, piAttributes, pfValues); return (BOOL)0;}
+  GLEEPFNWGLGETPIXELFORMATATTRIBFVARBPROC GLeeFuncPtr_wglGetPixelFormatAttribfvARB=GLee_Lazy_wglGetPixelFormatAttribfvARB;
+#endif
+#ifndef GLEE_C_DEFINED_wglChoosePixelFormatARB
+#define GLEE_C_DEFINED_wglChoosePixelFormatARB
+  BOOL __stdcall GLee_Lazy_wglChoosePixelFormatARB(HDC  hdc, const int * piAttribIList, const FLOAT * pfAttribFList, UINT  nMaxFormats, int * piFormats, UINT * nNumFormats)  {if (GLeeInit()) return wglChoosePixelFormatARB(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats); return (BOOL)0;}
+  GLEEPFNWGLCHOOSEPIXELFORMATARBPROC GLeeFuncPtr_wglChoosePixelFormatARB=GLee_Lazy_wglChoosePixelFormatARB;
+#endif
+#endif 
+
+/* WGL_ARB_make_current_read */
+
+#ifdef __GLEE_WGL_ARB_make_current_read
+#ifndef GLEE_C_DEFINED_wglMakeContextCurrentARB
+#define GLEE_C_DEFINED_wglMakeContextCurrentARB
+  BOOL __stdcall GLee_Lazy_wglMakeContextCurrentARB(HDC  hDrawDC, HDC  hReadDC, HGLRC  hglrc)  {if (GLeeInit()) return wglMakeContextCurrentARB(hDrawDC, hReadDC, hglrc); return (BOOL)0;}
+  GLEEPFNWGLMAKECONTEXTCURRENTARBPROC GLeeFuncPtr_wglMakeContextCurrentARB=GLee_Lazy_wglMakeContextCurrentARB;
+#endif
+#ifndef GLEE_C_DEFINED_wglGetCurrentReadDCARB
+#define GLEE_C_DEFINED_wglGetCurrentReadDCARB
+  HDC __stdcall GLee_Lazy_wglGetCurrentReadDCARB(void)  {if (GLeeInit()) return wglGetCurrentReadDCARB(); return (HDC)0;}
+  GLEEPFNWGLGETCURRENTREADDCARBPROC GLeeFuncPtr_wglGetCurrentReadDCARB=GLee_Lazy_wglGetCurrentReadDCARB;
+#endif
+#endif 
+
+/* WGL_ARB_pbuffer */
+
+#ifdef __GLEE_WGL_ARB_pbuffer
+#ifndef GLEE_C_DEFINED_wglCreatePbufferARB
+#define GLEE_C_DEFINED_wglCreatePbufferARB
+  HPBUFFERARB __stdcall GLee_Lazy_wglCreatePbufferARB(HDC  hDC, int  iPixelFormat, int  iWidth, int  iHeight, const int * piAttribList)  {if (GLeeInit()) return wglCreatePbufferARB(hDC, iPixelFormat, iWidth, iHeight, piAttribList); return (HPBUFFERARB)0;}
+  GLEEPFNWGLCREATEPBUFFERARBPROC GLeeFuncPtr_wglCreatePbufferARB=GLee_Lazy_wglCreatePbufferARB;
+#endif
+#ifndef GLEE_C_DEFINED_wglGetPbufferDCARB
+#define GLEE_C_DEFINED_wglGetPbufferDCARB
+  HDC __stdcall GLee_Lazy_wglGetPbufferDCARB(HPBUFFERARB  hPbuffer)  {if (GLeeInit()) return wglGetPbufferDCARB(hPbuffer); return (HDC)0;}
+  GLEEPFNWGLGETPBUFFERDCARBPROC GLeeFuncPtr_wglGetPbufferDCARB=GLee_Lazy_wglGetPbufferDCARB;
+#endif
+#ifndef GLEE_C_DEFINED_wglReleasePbufferDCARB
+#define GLEE_C_DEFINED_wglReleasePbufferDCARB
+  int __stdcall GLee_Lazy_wglReleasePbufferDCARB(HPBUFFERARB  hPbuffer, HDC  hDC)  {if (GLeeInit()) return wglReleasePbufferDCARB(hPbuffer, hDC); return (int)0;}
+  GLEEPFNWGLRELEASEPBUFFERDCARBPROC GLeeFuncPtr_wglReleasePbufferDCARB=GLee_Lazy_wglReleasePbufferDCARB;
+#endif
+#ifndef GLEE_C_DEFINED_wglDestroyPbufferARB
+#define GLEE_C_DEFINED_wglDestroyPbufferARB
+  BOOL __stdcall GLee_Lazy_wglDestroyPbufferARB(HPBUFFERARB  hPbuffer)  {if (GLeeInit()) return wglDestroyPbufferARB(hPbuffer); return (BOOL)0;}
+  GLEEPFNWGLDESTROYPBUFFERARBPROC GLeeFuncPtr_wglDestroyPbufferARB=GLee_Lazy_wglDestroyPbufferARB;
+#endif
+#ifndef GLEE_C_DEFINED_wglQueryPbufferARB
+#define GLEE_C_DEFINED_wglQueryPbufferARB
+  BOOL __stdcall GLee_Lazy_wglQueryPbufferARB(HPBUFFERARB  hPbuffer, int  iAttribute, int * piValue)  {if (GLeeInit()) return wglQueryPbufferARB(hPbuffer, iAttribute, piValue); return (BOOL)0;}
+  GLEEPFNWGLQUERYPBUFFERARBPROC GLeeFuncPtr_wglQueryPbufferARB=GLee_Lazy_wglQueryPbufferARB;
+#endif
+#endif 
+
+/* WGL_ARB_render_texture */
+
+#ifdef __GLEE_WGL_ARB_render_texture
+#ifndef GLEE_C_DEFINED_wglBindTexImageARB
+#define GLEE_C_DEFINED_wglBindTexImageARB
+  BOOL __stdcall GLee_Lazy_wglBindTexImageARB(HPBUFFERARB  hPbuffer, int  iBuffer)  {if (GLeeInit()) return wglBindTexImageARB(hPbuffer, iBuffer); return (BOOL)0;}
+  GLEEPFNWGLBINDTEXIMAGEARBPROC GLeeFuncPtr_wglBindTexImageARB=GLee_Lazy_wglBindTexImageARB;
+#endif
+#ifndef GLEE_C_DEFINED_wglReleaseTexImageARB
+#define GLEE_C_DEFINED_wglReleaseTexImageARB
+  BOOL __stdcall GLee_Lazy_wglReleaseTexImageARB(HPBUFFERARB  hPbuffer, int  iBuffer)  {if (GLeeInit()) return wglReleaseTexImageARB(hPbuffer, iBuffer); return (BOOL)0;}
+  GLEEPFNWGLRELEASETEXIMAGEARBPROC GLeeFuncPtr_wglReleaseTexImageARB=GLee_Lazy_wglReleaseTexImageARB;
+#endif
+#ifndef GLEE_C_DEFINED_wglSetPbufferAttribARB
+#define GLEE_C_DEFINED_wglSetPbufferAttribARB
+  BOOL __stdcall GLee_Lazy_wglSetPbufferAttribARB(HPBUFFERARB  hPbuffer, const int * piAttribList)  {if (GLeeInit()) return wglSetPbufferAttribARB(hPbuffer, piAttribList); return (BOOL)0;}
+  GLEEPFNWGLSETPBUFFERATTRIBARBPROC GLeeFuncPtr_wglSetPbufferAttribARB=GLee_Lazy_wglSetPbufferAttribARB;
+#endif
+#endif 
+
+/* WGL_ARB_pixel_format_float */
+
+#ifdef __GLEE_WGL_ARB_pixel_format_float
+#endif 
+
+/* WGL_ARB_framebuffer_sRGB */
+
+#ifdef __GLEE_WGL_ARB_framebuffer_sRGB
+#endif 
+
+/* WGL_ARB_create_context */
+
+#ifdef __GLEE_WGL_ARB_create_context
+#ifndef GLEE_C_DEFINED_wglCreateContextAttribsARB
+#define GLEE_C_DEFINED_wglCreateContextAttribsARB
+  HGLRC __stdcall GLee_Lazy_wglCreateContextAttribsARB(HDC  hDC, HGLRC  hShareContext, const int * attribList)  {if (GLeeInit()) return wglCreateContextAttribsARB(hDC, hShareContext, attribList); return (HGLRC)0;}
+  GLEEPFNWGLCREATECONTEXTATTRIBSARBPROC GLeeFuncPtr_wglCreateContextAttribsARB=GLee_Lazy_wglCreateContextAttribsARB;
+#endif
+#endif 
+
+/* WGL_ARB_create_context_profile */
+
+#ifdef __GLEE_WGL_ARB_create_context_profile
+#endif 
+
+/* WGL_ARB_create_context_robustness */
+
+#ifdef __GLEE_WGL_ARB_create_context_robustness
+#endif 
+
+/* WGL_EXT_make_current_read */
+
+#ifdef __GLEE_WGL_EXT_make_current_read
+#ifndef GLEE_C_DEFINED_wglMakeContextCurrentEXT
+#define GLEE_C_DEFINED_wglMakeContextCurrentEXT
+  BOOL __stdcall GLee_Lazy_wglMakeContextCurrentEXT(HDC  hDrawDC, HDC  hReadDC, HGLRC  hglrc)  {if (GLeeInit()) return wglMakeContextCurrentEXT(hDrawDC, hReadDC, hglrc); return (BOOL)0;}
+  GLEEPFNWGLMAKECONTEXTCURRENTEXTPROC GLeeFuncPtr_wglMakeContextCurrentEXT=GLee_Lazy_wglMakeContextCurrentEXT;
+#endif
+#ifndef GLEE_C_DEFINED_wglGetCurrentReadDCEXT
+#define GLEE_C_DEFINED_wglGetCurrentReadDCEXT
+  HDC __stdcall GLee_Lazy_wglGetCurrentReadDCEXT(void)  {if (GLeeInit()) return wglGetCurrentReadDCEXT(); return (HDC)0;}
+  GLEEPFNWGLGETCURRENTREADDCEXTPROC GLeeFuncPtr_wglGetCurrentReadDCEXT=GLee_Lazy_wglGetCurrentReadDCEXT;
+#endif
+#endif 
+
+/* WGL_EXT_pixel_format */
+
+#ifdef __GLEE_WGL_EXT_pixel_format
+#ifndef GLEE_C_DEFINED_wglGetPixelFormatAttribivEXT
+#define GLEE_C_DEFINED_wglGetPixelFormatAttribivEXT
+  BOOL __stdcall GLee_Lazy_wglGetPixelFormatAttribivEXT(HDC  hdc, int  iPixelFormat, int  iLayerPlane, UINT  nAttributes, int * piAttributes, int * piValues)  {if (GLeeInit()) return wglGetPixelFormatAttribivEXT(hdc, iPixelFormat, iLayerPlane, nAttributes, piAttributes, piValues); return (BOOL)0;}
+  GLEEPFNWGLGETPIXELFORMATATTRIBIVEXTPROC GLeeFuncPtr_wglGetPixelFormatAttribivEXT=GLee_Lazy_wglGetPixelFormatAttribivEXT;
+#endif
+#ifndef GLEE_C_DEFINED_wglGetPixelFormatAttribfvEXT
+#define GLEE_C_DEFINED_wglGetPixelFormatAttribfvEXT
+  BOOL __stdcall GLee_Lazy_wglGetPixelFormatAttribfvEXT(HDC  hdc, int  iPixelFormat, int  iLayerPlane, UINT  nAttributes, int * piAttributes, FLOAT * pfValues)  {if (GLeeInit()) return wglGetPixelFormatAttribfvEXT(hdc, iPixelFormat, iLayerPlane, nAttributes, piAttributes, pfValues); return (BOOL)0;}
+  GLEEPFNWGLGETPIXELFORMATATTRIBFVEXTPROC GLeeFuncPtr_wglGetPixelFormatAttribfvEXT=GLee_Lazy_wglGetPixelFormatAttribfvEXT;
+#endif
+#ifndef GLEE_C_DEFINED_wglChoosePixelFormatEXT
+#define GLEE_C_DEFINED_wglChoosePixelFormatEXT
+  BOOL __stdcall GLee_Lazy_wglChoosePixelFormatEXT(HDC  hdc, const int * piAttribIList, const FLOAT * pfAttribFList, UINT  nMaxFormats, int * piFormats, UINT * nNumFormats)  {if (GLeeInit()) return wglChoosePixelFormatEXT(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats); return (BOOL)0;}
+  GLEEPFNWGLCHOOSEPIXELFORMATEXTPROC GLeeFuncPtr_wglChoosePixelFormatEXT=GLee_Lazy_wglChoosePixelFormatEXT;
+#endif
+#endif 
+
+/* WGL_EXT_pbuffer */
+
+#ifdef __GLEE_WGL_EXT_pbuffer
+#ifndef GLEE_C_DEFINED_wglCreatePbufferEXT
+#define GLEE_C_DEFINED_wglCreatePbufferEXT
+  HPBUFFEREXT __stdcall GLee_Lazy_wglCreatePbufferEXT(HDC  hDC, int  iPixelFormat, int  iWidth, int  iHeight, const int * piAttribList)  {if (GLeeInit()) return wglCreatePbufferEXT(hDC, iPixelFormat, iWidth, iHeight, piAttribList); return (HPBUFFEREXT)0;}
+  GLEEPFNWGLCREATEPBUFFEREXTPROC GLeeFuncPtr_wglCreatePbufferEXT=GLee_Lazy_wglCreatePbufferEXT;
+#endif
+#ifndef GLEE_C_DEFINED_wglGetPbufferDCEXT
+#define GLEE_C_DEFINED_wglGetPbufferDCEXT
+  HDC __stdcall GLee_Lazy_wglGetPbufferDCEXT(HPBUFFEREXT  hPbuffer)  {if (GLeeInit()) return wglGetPbufferDCEXT(hPbuffer); return (HDC)0;}
+  GLEEPFNWGLGETPBUFFERDCEXTPROC GLeeFuncPtr_wglGetPbufferDCEXT=GLee_Lazy_wglGetPbufferDCEXT;
+#endif
+#ifndef GLEE_C_DEFINED_wglReleasePbufferDCEXT
+#define GLEE_C_DEFINED_wglReleasePbufferDCEXT
+  int __stdcall GLee_Lazy_wglReleasePbufferDCEXT(HPBUFFEREXT  hPbuffer, HDC  hDC)  {if (GLeeInit()) return wglReleasePbufferDCEXT(hPbuffer, hDC); return (int)0;}
+  GLEEPFNWGLRELEASEPBUFFERDCEXTPROC GLeeFuncPtr_wglReleasePbufferDCEXT=GLee_Lazy_wglReleasePbufferDCEXT;
+#endif
+#ifndef GLEE_C_DEFINED_wglDestroyPbufferEXT
+#define GLEE_C_DEFINED_wglDestroyPbufferEXT
+  BOOL __stdcall GLee_Lazy_wglDestroyPbufferEXT(HPBUFFEREXT  hPbuffer)  {if (GLeeInit()) return wglDestroyPbufferEXT(hPbuffer); return (BOOL)0;}
+  GLEEPFNWGLDESTROYPBUFFEREXTPROC GLeeFuncPtr_wglDestroyPbufferEXT=GLee_Lazy_wglDestroyPbufferEXT;
+#endif
+#ifndef GLEE_C_DEFINED_wglQueryPbufferEXT
+#define GLEE_C_DEFINED_wglQueryPbufferEXT
+  BOOL __stdcall GLee_Lazy_wglQueryPbufferEXT(HPBUFFEREXT  hPbuffer, int  iAttribute, int * piValue)  {if (GLeeInit()) return wglQueryPbufferEXT(hPbuffer, iAttribute, piValue); return (BOOL)0;}
+  GLEEPFNWGLQUERYPBUFFEREXTPROC GLeeFuncPtr_wglQueryPbufferEXT=GLee_Lazy_wglQueryPbufferEXT;
+#endif
+#endif 
+
+/* WGL_EXT_depth_float */
+
+#ifdef __GLEE_WGL_EXT_depth_float
+#endif 
+
+/* WGL_3DFX_multisample */
+
+#ifdef __GLEE_WGL_3DFX_multisample
+#endif 
+
+/* WGL_EXT_multisample */
+
+#ifdef __GLEE_WGL_EXT_multisample
+#endif 
+
+/* WGL_I3D_digital_video_control */
+
+#ifdef __GLEE_WGL_I3D_digital_video_control
+#ifndef GLEE_C_DEFINED_wglGetDigitalVideoParametersI3D
+#define GLEE_C_DEFINED_wglGetDigitalVideoParametersI3D
+  BOOL __stdcall GLee_Lazy_wglGetDigitalVideoParametersI3D(HDC  hDC, int  iAttribute, int * piValue)  {if (GLeeInit()) return wglGetDigitalVideoParametersI3D(hDC, iAttribute, piValue); return (BOOL)0;}
+  GLEEPFNWGLGETDIGITALVIDEOPARAMETERSI3DPROC GLeeFuncPtr_wglGetDigitalVideoParametersI3D=GLee_Lazy_wglGetDigitalVideoParametersI3D;
+#endif
+#ifndef GLEE_C_DEFINED_wglSetDigitalVideoParametersI3D
+#define GLEE_C_DEFINED_wglSetDigitalVideoParametersI3D
+  BOOL __stdcall GLee_Lazy_wglSetDigitalVideoParametersI3D(HDC  hDC, int  iAttribute, const int * piValue)  {if (GLeeInit()) return wglSetDigitalVideoParametersI3D(hDC, iAttribute, piValue); return (BOOL)0;}
+  GLEEPFNWGLSETDIGITALVIDEOPARAMETERSI3DPROC GLeeFuncPtr_wglSetDigitalVideoParametersI3D=GLee_Lazy_wglSetDigitalVideoParametersI3D;
+#endif
+#endif 
+
+/* WGL_I3D_gamma */
+
+#ifdef __GLEE_WGL_I3D_gamma
+#ifndef GLEE_C_DEFINED_wglGetGammaTableParametersI3D
+#define GLEE_C_DEFINED_wglGetGammaTableParametersI3D
+  BOOL __stdcall GLee_Lazy_wglGetGammaTableParametersI3D(HDC  hDC, int  iAttribute, int * piValue)  {if (GLeeInit()) return wglGetGammaTableParametersI3D(hDC, iAttribute, piValue); return (BOOL)0;}
+  GLEEPFNWGLGETGAMMATABLEPARAMETERSI3DPROC GLeeFuncPtr_wglGetGammaTableParametersI3D=GLee_Lazy_wglGetGammaTableParametersI3D;
+#endif
+#ifndef GLEE_C_DEFINED_wglSetGammaTableParametersI3D
+#define GLEE_C_DEFINED_wglSetGammaTableParametersI3D
+  BOOL __stdcall GLee_Lazy_wglSetGammaTableParametersI3D(HDC  hDC, int  iAttribute, const int * piValue)  {if (GLeeInit()) return wglSetGammaTableParametersI3D(hDC, iAttribute, piValue); return (BOOL)0;}
+  GLEEPFNWGLSETGAMMATABLEPARAMETERSI3DPROC GLeeFuncPtr_wglSetGammaTableParametersI3D=GLee_Lazy_wglSetGammaTableParametersI3D;
+#endif
+#ifndef GLEE_C_DEFINED_wglGetGammaTableI3D
+#define GLEE_C_DEFINED_wglGetGammaTableI3D
+  BOOL __stdcall GLee_Lazy_wglGetGammaTableI3D(HDC  hDC, int  iEntries, USHORT * puRed, USHORT * puGreen, USHORT * puBlue)  {if (GLeeInit()) return wglGetGammaTableI3D(hDC, iEntries, puRed, puGreen, puBlue); return (BOOL)0;}
+  GLEEPFNWGLGETGAMMATABLEI3DPROC GLeeFuncPtr_wglGetGammaTableI3D=GLee_Lazy_wglGetGammaTableI3D;
+#endif
+#ifndef GLEE_C_DEFINED_wglSetGammaTableI3D
+#define GLEE_C_DEFINED_wglSetGammaTableI3D
+  BOOL __stdcall GLee_Lazy_wglSetGammaTableI3D(HDC  hDC, int  iEntries, const USHORT * puRed, const USHORT * puGreen, const USHORT * puBlue)  {if (GLeeInit()) return wglSetGammaTableI3D(hDC, iEntries, puRed, puGreen, puBlue); return (BOOL)0;}
+  GLEEPFNWGLSETGAMMATABLEI3DPROC GLeeFuncPtr_wglSetGammaTableI3D=GLee_Lazy_wglSetGammaTableI3D;
+#endif
+#endif 
+
+/* WGL_I3D_genlock */
+
+#ifdef __GLEE_WGL_I3D_genlock
+#ifndef GLEE_C_DEFINED_wglEnableGenlockI3D
+#define GLEE_C_DEFINED_wglEnableGenlockI3D
+  BOOL __stdcall GLee_Lazy_wglEnableGenlockI3D(HDC  hDC)  {if (GLeeInit()) return wglEnableGenlockI3D(hDC); return (BOOL)0;}
+  GLEEPFNWGLENABLEGENLOCKI3DPROC GLeeFuncPtr_wglEnableGenlockI3D=GLee_Lazy_wglEnableGenlockI3D;
+#endif
+#ifndef GLEE_C_DEFINED_wglDisableGenlockI3D
+#define GLEE_C_DEFINED_wglDisableGenlockI3D
+  BOOL __stdcall GLee_Lazy_wglDisableGenlockI3D(HDC  hDC)  {if (GLeeInit()) return wglDisableGenlockI3D(hDC); return (BOOL)0;}
+  GLEEPFNWGLDISABLEGENLOCKI3DPROC GLeeFuncPtr_wglDisableGenlockI3D=GLee_Lazy_wglDisableGenlockI3D;
+#endif
+#ifndef GLEE_C_DEFINED_wglIsEnabledGenlockI3D
+#define GLEE_C_DEFINED_wglIsEnabledGenlockI3D
+  BOOL __stdcall GLee_Lazy_wglIsEnabledGenlockI3D(HDC  hDC, BOOL * pFlag)  {if (GLeeInit()) return wglIsEnabledGenlockI3D(hDC, pFlag); return (BOOL)0;}
+  GLEEPFNWGLISENABLEDGENLOCKI3DPROC GLeeFuncPtr_wglIsEnabledGenlockI3D=GLee_Lazy_wglIsEnabledGenlockI3D;
+#endif
+#ifndef GLEE_C_DEFINED_wglGenlockSourceI3D
+#define GLEE_C_DEFINED_wglGenlockSourceI3D
+  BOOL __stdcall GLee_Lazy_wglGenlockSourceI3D(HDC  hDC, UINT  uSource)  {if (GLeeInit()) return wglGenlockSourceI3D(hDC, uSource); return (BOOL)0;}
+  GLEEPFNWGLGENLOCKSOURCEI3DPROC GLeeFuncPtr_wglGenlockSourceI3D=GLee_Lazy_wglGenlockSourceI3D;
+#endif
+#ifndef GLEE_C_DEFINED_wglGetGenlockSourceI3D
+#define GLEE_C_DEFINED_wglGetGenlockSourceI3D
+  BOOL __stdcall GLee_Lazy_wglGetGenlockSourceI3D(HDC  hDC, UINT * uSource)  {if (GLeeInit()) return wglGetGenlockSourceI3D(hDC, uSource); return (BOOL)0;}
+  GLEEPFNWGLGETGENLOCKSOURCEI3DPROC GLeeFuncPtr_wglGetGenlockSourceI3D=GLee_Lazy_wglGetGenlockSourceI3D;
+#endif
+#ifndef GLEE_C_DEFINED_wglGenlockSourceEdgeI3D
+#define GLEE_C_DEFINED_wglGenlockSourceEdgeI3D
+  BOOL __stdcall GLee_Lazy_wglGenlockSourceEdgeI3D(HDC  hDC, UINT  uEdge)  {if (GLeeInit()) return wglGenlockSourceEdgeI3D(hDC, uEdge); return (BOOL)0;}
+  GLEEPFNWGLGENLOCKSOURCEEDGEI3DPROC GLeeFuncPtr_wglGenlockSourceEdgeI3D=GLee_Lazy_wglGenlockSourceEdgeI3D;
+#endif
+#ifndef GLEE_C_DEFINED_wglGetGenlockSourceEdgeI3D
+#define GLEE_C_DEFINED_wglGetGenlockSourceEdgeI3D
+  BOOL __stdcall GLee_Lazy_wglGetGenlockSourceEdgeI3D(HDC  hDC, UINT * uEdge)  {if (GLeeInit()) return wglGetGenlockSourceEdgeI3D(hDC, uEdge); return (BOOL)0;}
+  GLEEPFNWGLGETGENLOCKSOURCEEDGEI3DPROC GLeeFuncPtr_wglGetGenlockSourceEdgeI3D=GLee_Lazy_wglGetGenlockSourceEdgeI3D;
+#endif
+#ifndef GLEE_C_DEFINED_wglGenlockSampleRateI3D
+#define GLEE_C_DEFINED_wglGenlockSampleRateI3D
+  BOOL __stdcall GLee_Lazy_wglGenlockSampleRateI3D(HDC  hDC, UINT  uRate)  {if (GLeeInit()) return wglGenlockSampleRateI3D(hDC, uRate); return (BOOL)0;}
+  GLEEPFNWGLGENLOCKSAMPLERATEI3DPROC GLeeFuncPtr_wglGenlockSampleRateI3D=GLee_Lazy_wglGenlockSampleRateI3D;
+#endif
+#ifndef GLEE_C_DEFINED_wglGetGenlockSampleRateI3D
+#define GLEE_C_DEFINED_wglGetGenlockSampleRateI3D
+  BOOL __stdcall GLee_Lazy_wglGetGenlockSampleRateI3D(HDC  hDC, UINT * uRate)  {if (GLeeInit()) return wglGetGenlockSampleRateI3D(hDC, uRate); return (BOOL)0;}
+  GLEEPFNWGLGETGENLOCKSAMPLERATEI3DPROC GLeeFuncPtr_wglGetGenlockSampleRateI3D=GLee_Lazy_wglGetGenlockSampleRateI3D;
+#endif
+#ifndef GLEE_C_DEFINED_wglGenlockSourceDelayI3D
+#define GLEE_C_DEFINED_wglGenlockSourceDelayI3D
+  BOOL __stdcall GLee_Lazy_wglGenlockSourceDelayI3D(HDC  hDC, UINT  uDelay)  {if (GLeeInit()) return wglGenlockSourceDelayI3D(hDC, uDelay); return (BOOL)0;}
+  GLEEPFNWGLGENLOCKSOURCEDELAYI3DPROC GLeeFuncPtr_wglGenlockSourceDelayI3D=GLee_Lazy_wglGenlockSourceDelayI3D;
+#endif
+#ifndef GLEE_C_DEFINED_wglGetGenlockSourceDelayI3D
+#define GLEE_C_DEFINED_wglGetGenlockSourceDelayI3D
+  BOOL __stdcall GLee_Lazy_wglGetGenlockSourceDelayI3D(HDC  hDC, UINT * uDelay)  {if (GLeeInit()) return wglGetGenlockSourceDelayI3D(hDC, uDelay); return (BOOL)0;}
+  GLEEPFNWGLGETGENLOCKSOURCEDELAYI3DPROC GLeeFuncPtr_wglGetGenlockSourceDelayI3D=GLee_Lazy_wglGetGenlockSourceDelayI3D;
+#endif
+#ifndef GLEE_C_DEFINED_wglQueryGenlockMaxSourceDelayI3D
+#define GLEE_C_DEFINED_wglQueryGenlockMaxSourceDelayI3D
+  BOOL __stdcall GLee_Lazy_wglQueryGenlockMaxSourceDelayI3D(HDC  hDC, UINT * uMaxLineDelay, UINT * uMaxPixelDelay)  {if (GLeeInit()) return wglQueryGenlockMaxSourceDelayI3D(hDC, uMaxLineDelay, uMaxPixelDelay); return (BOOL)0;}
+  GLEEPFNWGLQUERYGENLOCKMAXSOURCEDELAYI3DPROC GLeeFuncPtr_wglQueryGenlockMaxSourceDelayI3D=GLee_Lazy_wglQueryGenlockMaxSourceDelayI3D;
+#endif
+#endif 
+
+/* WGL_I3D_image_buffer */
+
+#ifdef __GLEE_WGL_I3D_image_buffer
+#ifndef GLEE_C_DEFINED_wglCreateImageBufferI3D
+#define GLEE_C_DEFINED_wglCreateImageBufferI3D
+  LPVOID __stdcall GLee_Lazy_wglCreateImageBufferI3D(HDC  hDC, DWORD  dwSize, UINT  uFlags)  {if (GLeeInit()) return wglCreateImageBufferI3D(hDC, dwSize, uFlags); return (LPVOID)0;}
+  GLEEPFNWGLCREATEIMAGEBUFFERI3DPROC GLeeFuncPtr_wglCreateImageBufferI3D=GLee_Lazy_wglCreateImageBufferI3D;
+#endif
+#ifndef GLEE_C_DEFINED_wglDestroyImageBufferI3D
+#define GLEE_C_DEFINED_wglDestroyImageBufferI3D
+  BOOL __stdcall GLee_Lazy_wglDestroyImageBufferI3D(HDC  hDC, LPVOID  pAddress)  {if (GLeeInit()) return wglDestroyImageBufferI3D(hDC, pAddress); return (BOOL)0;}
+  GLEEPFNWGLDESTROYIMAGEBUFFERI3DPROC GLeeFuncPtr_wglDestroyImageBufferI3D=GLee_Lazy_wglDestroyImageBufferI3D;
+#endif
+#ifndef GLEE_C_DEFINED_wglAssociateImageBufferEventsI3D
+#define GLEE_C_DEFINED_wglAssociateImageBufferEventsI3D
+  BOOL __stdcall GLee_Lazy_wglAssociateImageBufferEventsI3D(HDC  hDC, const HANDLE * pEvent, const LPVOID * pAddress, const DWORD * pSize, UINT  count)  {if (GLeeInit()) return wglAssociateImageBufferEventsI3D(hDC, pEvent, pAddress, pSize, count); return (BOOL)0;}
+  GLEEPFNWGLASSOCIATEIMAGEBUFFEREVENTSI3DPROC GLeeFuncPtr_wglAssociateImageBufferEventsI3D=GLee_Lazy_wglAssociateImageBufferEventsI3D;
+#endif
+#ifndef GLEE_C_DEFINED_wglReleaseImageBufferEventsI3D
+#define GLEE_C_DEFINED_wglReleaseImageBufferEventsI3D
+  BOOL __stdcall GLee_Lazy_wglReleaseImageBufferEventsI3D(HDC  hDC, const LPVOID * pAddress, UINT  count)  {if (GLeeInit()) return wglReleaseImageBufferEventsI3D(hDC, pAddress, count); return (BOOL)0;}
+  GLEEPFNWGLRELEASEIMAGEBUFFEREVENTSI3DPROC GLeeFuncPtr_wglReleaseImageBufferEventsI3D=GLee_Lazy_wglReleaseImageBufferEventsI3D;
+#endif
+#endif 
+
+/* WGL_I3D_swap_frame_lock */
+
+#ifdef __GLEE_WGL_I3D_swap_frame_lock
+#ifndef GLEE_C_DEFINED_wglEnableFrameLockI3D
+#define GLEE_C_DEFINED_wglEnableFrameLockI3D
+  BOOL __stdcall GLee_Lazy_wglEnableFrameLockI3D(void)  {if (GLeeInit()) return wglEnableFrameLockI3D(); return (BOOL)0;}
+  GLEEPFNWGLENABLEFRAMELOCKI3DPROC GLeeFuncPtr_wglEnableFrameLockI3D=GLee_Lazy_wglEnableFrameLockI3D;
+#endif
+#ifndef GLEE_C_DEFINED_wglDisableFrameLockI3D
+#define GLEE_C_DEFINED_wglDisableFrameLockI3D
+  BOOL __stdcall GLee_Lazy_wglDisableFrameLockI3D(void)  {if (GLeeInit()) return wglDisableFrameLockI3D(); return (BOOL)0;}
+  GLEEPFNWGLDISABLEFRAMELOCKI3DPROC GLeeFuncPtr_wglDisableFrameLockI3D=GLee_Lazy_wglDisableFrameLockI3D;
+#endif
+#ifndef GLEE_C_DEFINED_wglIsEnabledFrameLockI3D
+#define GLEE_C_DEFINED_wglIsEnabledFrameLockI3D
+  BOOL __stdcall GLee_Lazy_wglIsEnabledFrameLockI3D(BOOL * pFlag)  {if (GLeeInit()) return wglIsEnabledFrameLockI3D(pFlag); return (BOOL)0;}
+  GLEEPFNWGLISENABLEDFRAMELOCKI3DPROC GLeeFuncPtr_wglIsEnabledFrameLockI3D=GLee_Lazy_wglIsEnabledFrameLockI3D;
+#endif
+#ifndef GLEE_C_DEFINED_wglQueryFrameLockMasterI3D
+#define GLEE_C_DEFINED_wglQueryFrameLockMasterI3D
+  BOOL __stdcall GLee_Lazy_wglQueryFrameLockMasterI3D(BOOL * pFlag)  {if (GLeeInit()) return wglQueryFrameLockMasterI3D(pFlag); return (BOOL)0;}
+  GLEEPFNWGLQUERYFRAMELOCKMASTERI3DPROC GLeeFuncPtr_wglQueryFrameLockMasterI3D=GLee_Lazy_wglQueryFrameLockMasterI3D;
+#endif
+#endif 
+
+/* WGL_NV_render_depth_texture */
+
+#ifdef __GLEE_WGL_NV_render_depth_texture
+#endif 
+
+/* WGL_NV_render_texture_rectangle */
+
+#ifdef __GLEE_WGL_NV_render_texture_rectangle
+#endif 
+
+/* WGL_ATI_pixel_format_float */
+
+#ifdef __GLEE_WGL_ATI_pixel_format_float
+#endif 
+
+/* WGL_NV_float_buffer */
+
+#ifdef __GLEE_WGL_NV_float_buffer
+#endif 
+
+/* WGL_3DL_stereo_control */
+
+#ifdef __GLEE_WGL_3DL_stereo_control
+#ifndef GLEE_C_DEFINED_wglSetStereoEmitterState3DL
+#define GLEE_C_DEFINED_wglSetStereoEmitterState3DL
+  BOOL __stdcall GLee_Lazy_wglSetStereoEmitterState3DL(HDC  hDC, UINT  uState)  {if (GLeeInit()) return wglSetStereoEmitterState3DL(hDC, uState); return (BOOL)0;}
+  GLEEPFNWGLSETSTEREOEMITTERSTATE3DLPROC GLeeFuncPtr_wglSetStereoEmitterState3DL=GLee_Lazy_wglSetStereoEmitterState3DL;
+#endif
+#endif 
+
+/* WGL_EXT_pixel_format_packed_float */
+
+#ifdef __GLEE_WGL_EXT_pixel_format_packed_float
+#endif 
+
+/* WGL_EXT_framebuffer_sRGB */
+
+#ifdef __GLEE_WGL_EXT_framebuffer_sRGB
+#endif 
+
+/* WGL_NV_present_video */
+
+#ifdef __GLEE_WGL_NV_present_video
+#ifndef GLEE_C_DEFINED_wglEnumerateVideoDevicesNV
+#define GLEE_C_DEFINED_wglEnumerateVideoDevicesNV
+  int __stdcall GLee_Lazy_wglEnumerateVideoDevicesNV(HDC  hDC, HVIDEOOUTPUTDEVICENV * phDeviceList)  {if (GLeeInit()) return wglEnumerateVideoDevicesNV(hDC, phDeviceList); return (int)0;}
+  GLEEPFNWGLENUMERATEVIDEODEVICESNVPROC GLeeFuncPtr_wglEnumerateVideoDevicesNV=GLee_Lazy_wglEnumerateVideoDevicesNV;
+#endif
+#ifndef GLEE_C_DEFINED_wglBindVideoDeviceNV
+#define GLEE_C_DEFINED_wglBindVideoDeviceNV
+  BOOL __stdcall GLee_Lazy_wglBindVideoDeviceNV(HDC  hDC, unsigned int  uVideoSlot, HVIDEOOUTPUTDEVICENV  hVideoDevice, const int * piAttribList)  {if (GLeeInit()) return wglBindVideoDeviceNV(hDC, uVideoSlot, hVideoDevice, piAttribList); return (BOOL)0;}
+  GLEEPFNWGLBINDVIDEODEVICENVPROC GLeeFuncPtr_wglBindVideoDeviceNV=GLee_Lazy_wglBindVideoDeviceNV;
+#endif
+#ifndef GLEE_C_DEFINED_wglQueryCurrentContextNV
+#define GLEE_C_DEFINED_wglQueryCurrentContextNV
+  BOOL __stdcall GLee_Lazy_wglQueryCurrentContextNV(int  iAttribute, int * piValue)  {if (GLeeInit()) return wglQueryCurrentContextNV(iAttribute, piValue); return (BOOL)0;}
+  GLEEPFNWGLQUERYCURRENTCONTEXTNVPROC GLeeFuncPtr_wglQueryCurrentContextNV=GLee_Lazy_wglQueryCurrentContextNV;
+#endif
+#endif 
+
+/* WGL_NV_swap_group */
+
+#ifdef __GLEE_WGL_NV_swap_group
+#ifndef GLEE_C_DEFINED_wglJoinSwapGroupNV
+#define GLEE_C_DEFINED_wglJoinSwapGroupNV
+  BOOL __stdcall GLee_Lazy_wglJoinSwapGroupNV(HDC  hDC, GLuint  group)  {if (GLeeInit()) return wglJoinSwapGroupNV(hDC, group); return (BOOL)0;}
+  GLEEPFNWGLJOINSWAPGROUPNVPROC GLeeFuncPtr_wglJoinSwapGroupNV=GLee_Lazy_wglJoinSwapGroupNV;
+#endif
+#ifndef GLEE_C_DEFINED_wglBindSwapBarrierNV
+#define GLEE_C_DEFINED_wglBindSwapBarrierNV
+  BOOL __stdcall GLee_Lazy_wglBindSwapBarrierNV(GLuint  group, GLuint  barrier)  {if (GLeeInit()) return wglBindSwapBarrierNV(group, barrier); return (BOOL)0;}
+  GLEEPFNWGLBINDSWAPBARRIERNVPROC GLeeFuncPtr_wglBindSwapBarrierNV=GLee_Lazy_wglBindSwapBarrierNV;
+#endif
+#ifndef GLEE_C_DEFINED_wglQuerySwapGroupNV
+#define GLEE_C_DEFINED_wglQuerySwapGroupNV
+  BOOL __stdcall GLee_Lazy_wglQuerySwapGroupNV(HDC  hDC, GLuint * group, GLuint * barrier)  {if (GLeeInit()) return wglQuerySwapGroupNV(hDC, group, barrier); return (BOOL)0;}
+  GLEEPFNWGLQUERYSWAPGROUPNVPROC GLeeFuncPtr_wglQuerySwapGroupNV=GLee_Lazy_wglQuerySwapGroupNV;
+#endif
+#ifndef GLEE_C_DEFINED_wglQueryMaxSwapGroupsNV
+#define GLEE_C_DEFINED_wglQueryMaxSwapGroupsNV
+  BOOL __stdcall GLee_Lazy_wglQueryMaxSwapGroupsNV(HDC  hDC, GLuint * maxGroups, GLuint * maxBarriers)  {if (GLeeInit()) return wglQueryMaxSwapGroupsNV(hDC, maxGroups, maxBarriers); return (BOOL)0;}
+  GLEEPFNWGLQUERYMAXSWAPGROUPSNVPROC GLeeFuncPtr_wglQueryMaxSwapGroupsNV=GLee_Lazy_wglQueryMaxSwapGroupsNV;
+#endif
+#ifndef GLEE_C_DEFINED_wglQueryFrameCountNV
+#define GLEE_C_DEFINED_wglQueryFrameCountNV
+  BOOL __stdcall GLee_Lazy_wglQueryFrameCountNV(HDC  hDC, GLuint * count)  {if (GLeeInit()) return wglQueryFrameCountNV(hDC, count); return (BOOL)0;}
+  GLEEPFNWGLQUERYFRAMECOUNTNVPROC GLeeFuncPtr_wglQueryFrameCountNV=GLee_Lazy_wglQueryFrameCountNV;
+#endif
+#ifndef GLEE_C_DEFINED_wglResetFrameCountNV
+#define GLEE_C_DEFINED_wglResetFrameCountNV
+  BOOL __stdcall GLee_Lazy_wglResetFrameCountNV(HDC  hDC)  {if (GLeeInit()) return wglResetFrameCountNV(hDC); return (BOOL)0;}
+  GLEEPFNWGLRESETFRAMECOUNTNVPROC GLeeFuncPtr_wglResetFrameCountNV=GLee_Lazy_wglResetFrameCountNV;
+#endif
+#endif 
+
+/* WGL_NV_gpu_affinity */
+
+#ifdef __GLEE_WGL_NV_gpu_affinity
+#ifndef GLEE_C_DEFINED_wglEnumGpusNV
+#define GLEE_C_DEFINED_wglEnumGpusNV
+  BOOL __stdcall GLee_Lazy_wglEnumGpusNV(UINT  iGpuIndex, HGPUNV * phGpu)  {if (GLeeInit()) return wglEnumGpusNV(iGpuIndex, phGpu); return (BOOL)0;}
+  GLEEPFNWGLENUMGPUSNVPROC GLeeFuncPtr_wglEnumGpusNV=GLee_Lazy_wglEnumGpusNV;
+#endif
+#ifndef GLEE_C_DEFINED_wglEnumGpuDevicesNV
+#define GLEE_C_DEFINED_wglEnumGpuDevicesNV
+  BOOL __stdcall GLee_Lazy_wglEnumGpuDevicesNV(HGPUNV  hGpu, UINT  iDeviceIndex, PGPU_DEVICE  lpGpuDevice)  {if (GLeeInit()) return wglEnumGpuDevicesNV(hGpu, iDeviceIndex, lpGpuDevice); return (BOOL)0;}
+  GLEEPFNWGLENUMGPUDEVICESNVPROC GLeeFuncPtr_wglEnumGpuDevicesNV=GLee_Lazy_wglEnumGpuDevicesNV;
+#endif
+#ifndef GLEE_C_DEFINED_wglCreateAffinityDCNV
+#define GLEE_C_DEFINED_wglCreateAffinityDCNV
+  HDC __stdcall GLee_Lazy_wglCreateAffinityDCNV(const HGPUNV * phGpuList)  {if (GLeeInit()) return wglCreateAffinityDCNV(phGpuList); return (HDC)0;}
+  GLEEPFNWGLCREATEAFFINITYDCNVPROC GLeeFuncPtr_wglCreateAffinityDCNV=GLee_Lazy_wglCreateAffinityDCNV;
+#endif
+#ifndef GLEE_C_DEFINED_wglEnumGpusFromAffinityDCNV
+#define GLEE_C_DEFINED_wglEnumGpusFromAffinityDCNV
+  BOOL __stdcall GLee_Lazy_wglEnumGpusFromAffinityDCNV(HDC  hAffinityDC, UINT  iGpuIndex, HGPUNV * hGpu)  {if (GLeeInit()) return wglEnumGpusFromAffinityDCNV(hAffinityDC, iGpuIndex, hGpu); return (BOOL)0;}
+  GLEEPFNWGLENUMGPUSFROMAFFINITYDCNVPROC GLeeFuncPtr_wglEnumGpusFromAffinityDCNV=GLee_Lazy_wglEnumGpusFromAffinityDCNV;
+#endif
+#ifndef GLEE_C_DEFINED_wglDeleteDCNV
+#define GLEE_C_DEFINED_wglDeleteDCNV
+  BOOL __stdcall GLee_Lazy_wglDeleteDCNV(HDC  hdc)  {if (GLeeInit()) return wglDeleteDCNV(hdc); return (BOOL)0;}
+  GLEEPFNWGLDELETEDCNVPROC GLeeFuncPtr_wglDeleteDCNV=GLee_Lazy_wglDeleteDCNV;
+#endif
+#endif 
+
+/* WGL_AMD_gpu_association */
+
+#ifdef __GLEE_WGL_AMD_gpu_association
+#ifndef GLEE_C_DEFINED_wglGetGPUIDsAMD
+#define GLEE_C_DEFINED_wglGetGPUIDsAMD
+  UINT __stdcall GLee_Lazy_wglGetGPUIDsAMD(UINT  maxCount, UINT * ids)  {if (GLeeInit()) return wglGetGPUIDsAMD(maxCount, ids); return (UINT)0;}
+  GLEEPFNWGLGETGPUIDSAMDPROC GLeeFuncPtr_wglGetGPUIDsAMD=GLee_Lazy_wglGetGPUIDsAMD;
+#endif
+#ifndef GLEE_C_DEFINED_wglGetGPUInfoAMD
+#define GLEE_C_DEFINED_wglGetGPUInfoAMD
+  INT __stdcall GLee_Lazy_wglGetGPUInfoAMD(UINT  id, int  property, GLenum  dataType, UINT  size, void * data)  {if (GLeeInit()) return wglGetGPUInfoAMD(id, property, dataType, size, data); return (INT)0;}
+  GLEEPFNWGLGETGPUINFOAMDPROC GLeeFuncPtr_wglGetGPUInfoAMD=GLee_Lazy_wglGetGPUInfoAMD;
+#endif
+#ifndef GLEE_C_DEFINED_wglGetContextGPUIDAMD
+#define GLEE_C_DEFINED_wglGetContextGPUIDAMD
+  UINT __stdcall GLee_Lazy_wglGetContextGPUIDAMD(HGLRC  hglrc)  {if (GLeeInit()) return wglGetContextGPUIDAMD(hglrc); return (UINT)0;}
+  GLEEPFNWGLGETCONTEXTGPUIDAMDPROC GLeeFuncPtr_wglGetContextGPUIDAMD=GLee_Lazy_wglGetContextGPUIDAMD;
+#endif
+#ifndef GLEE_C_DEFINED_wglCreateAssociatedContextAMD
+#define GLEE_C_DEFINED_wglCreateAssociatedContextAMD
+  HGLRC __stdcall GLee_Lazy_wglCreateAssociatedContextAMD(UINT  id)  {if (GLeeInit()) return wglCreateAssociatedContextAMD(id); return (HGLRC)0;}
+  GLEEPFNWGLCREATEASSOCIATEDCONTEXTAMDPROC GLeeFuncPtr_wglCreateAssociatedContextAMD=GLee_Lazy_wglCreateAssociatedContextAMD;
+#endif
+#ifndef GLEE_C_DEFINED_wglCreateAssociatedContextAttribsAMD
+#define GLEE_C_DEFINED_wglCreateAssociatedContextAttribsAMD
+  HGLRC __stdcall GLee_Lazy_wglCreateAssociatedContextAttribsAMD(UINT  id, HGLRC  hShareContext, const int * attribList)  {if (GLeeInit()) return wglCreateAssociatedContextAttribsAMD(id, hShareContext, attribList); return (HGLRC)0;}
+  GLEEPFNWGLCREATEASSOCIATEDCONTEXTATTRIBSAMDPROC GLeeFuncPtr_wglCreateAssociatedContextAttribsAMD=GLee_Lazy_wglCreateAssociatedContextAttribsAMD;
+#endif
+#ifndef GLEE_C_DEFINED_wglDeleteAssociatedContextAMD
+#define GLEE_C_DEFINED_wglDeleteAssociatedContextAMD
+  BOOL __stdcall GLee_Lazy_wglDeleteAssociatedContextAMD(HGLRC  hglrc)  {if (GLeeInit()) return wglDeleteAssociatedContextAMD(hglrc); return (BOOL)0;}
+  GLEEPFNWGLDELETEASSOCIATEDCONTEXTAMDPROC GLeeFuncPtr_wglDeleteAssociatedContextAMD=GLee_Lazy_wglDeleteAssociatedContextAMD;
+#endif
+#ifndef GLEE_C_DEFINED_wglMakeAssociatedContextCurrentAMD
+#define GLEE_C_DEFINED_wglMakeAssociatedContextCurrentAMD
+  BOOL __stdcall GLee_Lazy_wglMakeAssociatedContextCurrentAMD(HGLRC  hglrc)  {if (GLeeInit()) return wglMakeAssociatedContextCurrentAMD(hglrc); return (BOOL)0;}
+  GLEEPFNWGLMAKEASSOCIATEDCONTEXTCURRENTAMDPROC GLeeFuncPtr_wglMakeAssociatedContextCurrentAMD=GLee_Lazy_wglMakeAssociatedContextCurrentAMD;
+#endif
+#ifndef GLEE_C_DEFINED_wglGetCurrentAssociatedContextAMD
+#define GLEE_C_DEFINED_wglGetCurrentAssociatedContextAMD
+  HGLRC __stdcall GLee_Lazy_wglGetCurrentAssociatedContextAMD(void)  {if (GLeeInit()) return wglGetCurrentAssociatedContextAMD(); return (HGLRC)0;}
+  GLEEPFNWGLGETCURRENTASSOCIATEDCONTEXTAMDPROC GLeeFuncPtr_wglGetCurrentAssociatedContextAMD=GLee_Lazy_wglGetCurrentAssociatedContextAMD;
+#endif
+#ifndef GLEE_C_DEFINED_wglBlitContextFramebufferAMD
+#define GLEE_C_DEFINED_wglBlitContextFramebufferAMD
+  VOID __stdcall GLee_Lazy_wglBlitContextFramebufferAMD(HGLRC  dstCtx, GLint  srcX0, GLint  srcY0, GLint  srcX1, GLint  srcY1, GLint  dstX0, GLint  dstY0, GLint  dstX1, GLint  dstY1, GLbitfield  mask, GLenum  filter)  {if (GLeeInit()) wglBlitContextFramebufferAMD(dstCtx, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);}
+  GLEEPFNWGLBLITCONTEXTFRAMEBUFFERAMDPROC GLeeFuncPtr_wglBlitContextFramebufferAMD=GLee_Lazy_wglBlitContextFramebufferAMD;
+#endif
+#endif 
+
+/* WGL_NV_copy_image */
+
+#ifdef __GLEE_WGL_NV_copy_image
+#ifndef GLEE_C_DEFINED_wglCopyImageSubDataNV
+#define GLEE_C_DEFINED_wglCopyImageSubDataNV
+  BOOL __stdcall GLee_Lazy_wglCopyImageSubDataNV(HGLRC  hSrcRC, GLuint  srcName, GLenum  srcTarget, GLint  srcLevel, GLint  srcX, GLint  srcY, GLint  srcZ, HGLRC  hDstRC, GLuint  dstName, GLenum  dstTarget, GLint  dstLevel, GLint  dstX, GLint  dstY, GLint  dstZ, GLsizei  width, GLsizei  height, GLsizei  depth)  {if (GLeeInit()) return wglCopyImageSubDataNV(hSrcRC, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, hDstRC, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth); return (BOOL)0;}
+  GLEEPFNWGLCOPYIMAGESUBDATANVPROC GLeeFuncPtr_wglCopyImageSubDataNV=GLee_Lazy_wglCopyImageSubDataNV;
+#endif
+#endif 
+
+/* WGL_NV_multisample_coverage */
+
+#ifdef __GLEE_WGL_NV_multisample_coverage
+#endif 
+
+/* WGL_EXT_create_context_es2_profile */
+
+#ifdef __GLEE_WGL_EXT_create_context_es2_profile
+#endif 
+
+/* WGL_NV_DX_interop */
+
+#ifdef __GLEE_WGL_NV_DX_interop
+#ifndef GLEE_C_DEFINED_wglDXSetResourceShareHandleNV
+#define GLEE_C_DEFINED_wglDXSetResourceShareHandleNV
+  BOOL __stdcall GLee_Lazy_wglDXSetResourceShareHandleNV(void * dxObject, HANDLE  shareHandle)  {if (GLeeInit()) return wglDXSetResourceShareHandleNV(dxObject, shareHandle); return (BOOL)0;}
+  GLEEPFNWGLDXSETRESOURCESHAREHANDLENVPROC GLeeFuncPtr_wglDXSetResourceShareHandleNV=GLee_Lazy_wglDXSetResourceShareHandleNV;
+#endif
+#ifndef GLEE_C_DEFINED_wglDXOpenDeviceNV
+#define GLEE_C_DEFINED_wglDXOpenDeviceNV
+  HANDLE __stdcall GLee_Lazy_wglDXOpenDeviceNV(void * dxDevice)  {if (GLeeInit()) return wglDXOpenDeviceNV(dxDevice); return (HANDLE)0;}
+  GLEEPFNWGLDXOPENDEVICENVPROC GLeeFuncPtr_wglDXOpenDeviceNV=GLee_Lazy_wglDXOpenDeviceNV;
+#endif
+#ifndef GLEE_C_DEFINED_wglDXCloseDeviceNV
+#define GLEE_C_DEFINED_wglDXCloseDeviceNV
+  BOOL __stdcall GLee_Lazy_wglDXCloseDeviceNV(HANDLE  hDevice)  {if (GLeeInit()) return wglDXCloseDeviceNV(hDevice); return (BOOL)0;}
+  GLEEPFNWGLDXCLOSEDEVICENVPROC GLeeFuncPtr_wglDXCloseDeviceNV=GLee_Lazy_wglDXCloseDeviceNV;
+#endif
+#ifndef GLEE_C_DEFINED_wglDXRegisterObjectNV
+#define GLEE_C_DEFINED_wglDXRegisterObjectNV
+  HANDLE __stdcall GLee_Lazy_wglDXRegisterObjectNV(HANDLE  hDevice, void * dxObject, GLuint  name, GLenum  type, GLenum  access)  {if (GLeeInit()) return wglDXRegisterObjectNV(hDevice, dxObject, name, type, access); return (HANDLE)0;}
+  GLEEPFNWGLDXREGISTEROBJECTNVPROC GLeeFuncPtr_wglDXRegisterObjectNV=GLee_Lazy_wglDXRegisterObjectNV;
+#endif
+#ifndef GLEE_C_DEFINED_wglDXUnregisterObjectNV
+#define GLEE_C_DEFINED_wglDXUnregisterObjectNV
+  BOOL __stdcall GLee_Lazy_wglDXUnregisterObjectNV(HANDLE  hDevice, HANDLE  hObject)  {if (GLeeInit()) return wglDXUnregisterObjectNV(hDevice, hObject); return (BOOL)0;}
+  GLEEPFNWGLDXUNREGISTEROBJECTNVPROC GLeeFuncPtr_wglDXUnregisterObjectNV=GLee_Lazy_wglDXUnregisterObjectNV;
+#endif
+#ifndef GLEE_C_DEFINED_wglDXObjectAccessNV
+#define GLEE_C_DEFINED_wglDXObjectAccessNV
+  BOOL __stdcall GLee_Lazy_wglDXObjectAccessNV(HANDLE  hObject, GLenum  access)  {if (GLeeInit()) return wglDXObjectAccessNV(hObject, access); return (BOOL)0;}
+  GLEEPFNWGLDXOBJECTACCESSNVPROC GLeeFuncPtr_wglDXObjectAccessNV=GLee_Lazy_wglDXObjectAccessNV;
+#endif
+#ifndef GLEE_C_DEFINED_wglDXLockObjectsNV
+#define GLEE_C_DEFINED_wglDXLockObjectsNV
+  BOOL __stdcall GLee_Lazy_wglDXLockObjectsNV(HANDLE  hDevice, GLint  count, HANDLE * hObjects)  {if (GLeeInit()) return wglDXLockObjectsNV(hDevice, count, hObjects); return (BOOL)0;}
+  GLEEPFNWGLDXLOCKOBJECTSNVPROC GLeeFuncPtr_wglDXLockObjectsNV=GLee_Lazy_wglDXLockObjectsNV;
+#endif
+#ifndef GLEE_C_DEFINED_wglDXUnlockObjectsNV
+#define GLEE_C_DEFINED_wglDXUnlockObjectsNV
+  BOOL __stdcall GLee_Lazy_wglDXUnlockObjectsNV(HANDLE  hDevice, GLint  count, HANDLE * hObjects)  {if (GLeeInit()) return wglDXUnlockObjectsNV(hDevice, count, hObjects); return (BOOL)0;}
+  GLEEPFNWGLDXUNLOCKOBJECTSNVPROC GLeeFuncPtr_wglDXUnlockObjectsNV=GLee_Lazy_wglDXUnlockObjectsNV;
+#endif
+#endif 
+
+/* WGL_EXT_display_color_table */
+
+#ifdef __GLEE_WGL_EXT_display_color_table
+#ifndef GLEE_C_DEFINED_wglCreateDisplayColorTableEXT
+#define GLEE_C_DEFINED_wglCreateDisplayColorTableEXT
+  GLboolean __stdcall GLee_Lazy_wglCreateDisplayColorTableEXT(GLushort  id)  {if (GLeeInit()) return wglCreateDisplayColorTableEXT(id); return (GLboolean)0;}
+  GLEEPFNWGLCREATEDISPLAYCOLORTABLEEXTPROC GLeeFuncPtr_wglCreateDisplayColorTableEXT=GLee_Lazy_wglCreateDisplayColorTableEXT;
+#endif
+#ifndef GLEE_C_DEFINED_wglLoadDisplayColorTableEXT
+#define GLEE_C_DEFINED_wglLoadDisplayColorTableEXT
+  GLboolean __stdcall GLee_Lazy_wglLoadDisplayColorTableEXT(const GLushort * table, GLuint  length)  {if (GLeeInit()) return wglLoadDisplayColorTableEXT(table, length); return (GLboolean)0;}
+  GLEEPFNWGLLOADDISPLAYCOLORTABLEEXTPROC GLeeFuncPtr_wglLoadDisplayColorTableEXT=GLee_Lazy_wglLoadDisplayColorTableEXT;
+#endif
+#ifndef GLEE_C_DEFINED_wglBindDisplayColorTableEXT
+#define GLEE_C_DEFINED_wglBindDisplayColorTableEXT
+  GLboolean __stdcall GLee_Lazy_wglBindDisplayColorTableEXT(GLushort  id)  {if (GLeeInit()) return wglBindDisplayColorTableEXT(id); return (GLboolean)0;}
+  GLEEPFNWGLBINDDISPLAYCOLORTABLEEXTPROC GLeeFuncPtr_wglBindDisplayColorTableEXT=GLee_Lazy_wglBindDisplayColorTableEXT;
+#endif
+#ifndef GLEE_C_DEFINED_wglDestroyDisplayColorTableEXT
+#define GLEE_C_DEFINED_wglDestroyDisplayColorTableEXT
+  VOID __stdcall GLee_Lazy_wglDestroyDisplayColorTableEXT(GLushort  id)  {if (GLeeInit()) wglDestroyDisplayColorTableEXT(id);}
+  GLEEPFNWGLDESTROYDISPLAYCOLORTABLEEXTPROC GLeeFuncPtr_wglDestroyDisplayColorTableEXT=GLee_Lazy_wglDestroyDisplayColorTableEXT;
+#endif
+#endif 
+
+/* WGL_EXT_extensions_string */
+
+#ifdef __GLEE_WGL_EXT_extensions_string
+#ifndef GLEE_C_DEFINED_wglGetExtensionsStringEXT
+#define GLEE_C_DEFINED_wglGetExtensionsStringEXT
+  const char * __stdcall GLee_Lazy_wglGetExtensionsStringEXT(void)  {if (GLeeInit()) return wglGetExtensionsStringEXT(); return (const char *)0;}
+  GLEEPFNWGLGETEXTENSIONSSTRINGEXTPROC GLeeFuncPtr_wglGetExtensionsStringEXT=GLee_Lazy_wglGetExtensionsStringEXT;
+#endif
+#endif 
+
+/* WGL_EXT_swap_control */
+
+#ifdef __GLEE_WGL_EXT_swap_control
+#ifndef GLEE_C_DEFINED_wglSwapIntervalEXT
+#define GLEE_C_DEFINED_wglSwapIntervalEXT
+  BOOL __stdcall GLee_Lazy_wglSwapIntervalEXT(int  interval)  {if (GLeeInit()) return wglSwapIntervalEXT(interval); return (BOOL)0;}
+  GLEEPFNWGLSWAPINTERVALEXTPROC GLeeFuncPtr_wglSwapIntervalEXT=GLee_Lazy_wglSwapIntervalEXT;
+#endif
+#ifndef GLEE_C_DEFINED_wglGetSwapIntervalEXT
+#define GLEE_C_DEFINED_wglGetSwapIntervalEXT
+  int __stdcall GLee_Lazy_wglGetSwapIntervalEXT(void)  {if (GLeeInit()) return wglGetSwapIntervalEXT(); return (int)0;}
+  GLEEPFNWGLGETSWAPINTERVALEXTPROC GLeeFuncPtr_wglGetSwapIntervalEXT=GLee_Lazy_wglGetSwapIntervalEXT;
+#endif
+#endif 
+
+/* WGL_NV_vertex_array_range */
+
+#ifdef __GLEE_WGL_NV_vertex_array_range
+#ifndef GLEE_C_DEFINED_wglAllocateMemoryNV
+#define GLEE_C_DEFINED_wglAllocateMemoryNV
+  void* __stdcall GLee_Lazy_wglAllocateMemoryNV(GLsizei  size, GLfloat  readfreq, GLfloat  writefreq, GLfloat  priority)  {if (GLeeInit()) return wglAllocateMemoryNV(size, readfreq, writefreq, priority); return (void*)0;}
+  GLEEPFNWGLALLOCATEMEMORYNVPROC GLeeFuncPtr_wglAllocateMemoryNV=GLee_Lazy_wglAllocateMemoryNV;
+#endif
+#ifndef GLEE_C_DEFINED_wglFreeMemoryNV
+#define GLEE_C_DEFINED_wglFreeMemoryNV
+  void __stdcall GLee_Lazy_wglFreeMemoryNV(void * pointer)  {if (GLeeInit()) wglFreeMemoryNV(pointer);}
+  GLEEPFNWGLFREEMEMORYNVPROC GLeeFuncPtr_wglFreeMemoryNV=GLee_Lazy_wglFreeMemoryNV;
+#endif
+#endif 
+
+/* WGL_OML_sync_control */
+
+#ifdef __GLEE_WGL_OML_sync_control
+#ifndef GLEE_C_DEFINED_wglGetSyncValuesOML
+#define GLEE_C_DEFINED_wglGetSyncValuesOML
+  BOOL __stdcall GLee_Lazy_wglGetSyncValuesOML(HDC  hdc, INT64 * ust, INT64 * msc, INT64 * sbc)  {if (GLeeInit()) return wglGetSyncValuesOML(hdc, ust, msc, sbc); return (BOOL)0;}
+  GLEEPFNWGLGETSYNCVALUESOMLPROC GLeeFuncPtr_wglGetSyncValuesOML=GLee_Lazy_wglGetSyncValuesOML;
+#endif
+#ifndef GLEE_C_DEFINED_wglGetMscRateOML
+#define GLEE_C_DEFINED_wglGetMscRateOML
+  BOOL __stdcall GLee_Lazy_wglGetMscRateOML(HDC  hdc, INT32 * numerator, INT32 * denominator)  {if (GLeeInit()) return wglGetMscRateOML(hdc, numerator, denominator); return (BOOL)0;}
+  GLEEPFNWGLGETMSCRATEOMLPROC GLeeFuncPtr_wglGetMscRateOML=GLee_Lazy_wglGetMscRateOML;
+#endif
+#ifndef GLEE_C_DEFINED_wglSwapBuffersMscOML
+#define GLEE_C_DEFINED_wglSwapBuffersMscOML
+  INT64 __stdcall GLee_Lazy_wglSwapBuffersMscOML(HDC  hdc, INT64  target_msc, INT64  divisor, INT64  remainder)  {if (GLeeInit()) return wglSwapBuffersMscOML(hdc, target_msc, divisor, remainder); return (INT64)0;}
+  GLEEPFNWGLSWAPBUFFERSMSCOMLPROC GLeeFuncPtr_wglSwapBuffersMscOML=GLee_Lazy_wglSwapBuffersMscOML;
+#endif
+#ifndef GLEE_C_DEFINED_wglSwapLayerBuffersMscOML
+#define GLEE_C_DEFINED_wglSwapLayerBuffersMscOML
+  INT64 __stdcall GLee_Lazy_wglSwapLayerBuffersMscOML(HDC  hdc, int  fuPlanes, INT64  target_msc, INT64  divisor, INT64  remainder)  {if (GLeeInit()) return wglSwapLayerBuffersMscOML(hdc, fuPlanes, target_msc, divisor, remainder); return (INT64)0;}
+  GLEEPFNWGLSWAPLAYERBUFFERSMSCOMLPROC GLeeFuncPtr_wglSwapLayerBuffersMscOML=GLee_Lazy_wglSwapLayerBuffersMscOML;
+#endif
+#ifndef GLEE_C_DEFINED_wglWaitForMscOML
+#define GLEE_C_DEFINED_wglWaitForMscOML
+  BOOL __stdcall GLee_Lazy_wglWaitForMscOML(HDC  hdc, INT64  target_msc, INT64  divisor, INT64  remainder, INT64 * ust, INT64 * msc, INT64 * sbc)  {if (GLeeInit()) return wglWaitForMscOML(hdc, target_msc, divisor, remainder, ust, msc, sbc); return (BOOL)0;}
+  GLEEPFNWGLWAITFORMSCOMLPROC GLeeFuncPtr_wglWaitForMscOML=GLee_Lazy_wglWaitForMscOML;
+#endif
+#ifndef GLEE_C_DEFINED_wglWaitForSbcOML
+#define GLEE_C_DEFINED_wglWaitForSbcOML
+  BOOL __stdcall GLee_Lazy_wglWaitForSbcOML(HDC  hdc, INT64  target_sbc, INT64 * ust, INT64 * msc, INT64 * sbc)  {if (GLeeInit()) return wglWaitForSbcOML(hdc, target_sbc, ust, msc, sbc); return (BOOL)0;}
+  GLEEPFNWGLWAITFORSBCOMLPROC GLeeFuncPtr_wglWaitForSbcOML=GLee_Lazy_wglWaitForSbcOML;
+#endif
+#endif 
+
+/* WGL_I3D_swap_frame_usage */
+
+#ifdef __GLEE_WGL_I3D_swap_frame_usage
+#ifndef GLEE_C_DEFINED_wglGetFrameUsageI3D
+#define GLEE_C_DEFINED_wglGetFrameUsageI3D
+  BOOL __stdcall GLee_Lazy_wglGetFrameUsageI3D(float * pUsage)  {if (GLeeInit()) return wglGetFrameUsageI3D(pUsage); return (BOOL)0;}
+  GLEEPFNWGLGETFRAMEUSAGEI3DPROC GLeeFuncPtr_wglGetFrameUsageI3D=GLee_Lazy_wglGetFrameUsageI3D;
+#endif
+#ifndef GLEE_C_DEFINED_wglBeginFrameTrackingI3D
+#define GLEE_C_DEFINED_wglBeginFrameTrackingI3D
+  BOOL __stdcall GLee_Lazy_wglBeginFrameTrackingI3D(void)  {if (GLeeInit()) return wglBeginFrameTrackingI3D(); return (BOOL)0;}
+  GLEEPFNWGLBEGINFRAMETRACKINGI3DPROC GLeeFuncPtr_wglBeginFrameTrackingI3D=GLee_Lazy_wglBeginFrameTrackingI3D;
+#endif
+#ifndef GLEE_C_DEFINED_wglEndFrameTrackingI3D
+#define GLEE_C_DEFINED_wglEndFrameTrackingI3D
+  BOOL __stdcall GLee_Lazy_wglEndFrameTrackingI3D(void)  {if (GLeeInit()) return wglEndFrameTrackingI3D(); return (BOOL)0;}
+  GLEEPFNWGLENDFRAMETRACKINGI3DPROC GLeeFuncPtr_wglEndFrameTrackingI3D=GLee_Lazy_wglEndFrameTrackingI3D;
+#endif
+#ifndef GLEE_C_DEFINED_wglQueryFrameTrackingI3D
+#define GLEE_C_DEFINED_wglQueryFrameTrackingI3D
+  BOOL __stdcall GLee_Lazy_wglQueryFrameTrackingI3D(DWORD * pFrameCount, DWORD * pMissedFrames, float * pLastMissedUsage)  {if (GLeeInit()) return wglQueryFrameTrackingI3D(pFrameCount, pMissedFrames, pLastMissedUsage); return (BOOL)0;}
+  GLEEPFNWGLQUERYFRAMETRACKINGI3DPROC GLeeFuncPtr_wglQueryFrameTrackingI3D=GLee_Lazy_wglQueryFrameTrackingI3D;
+#endif
+#endif 
+
+/* WGL_NV_video_output */
+
+#ifdef __GLEE_WGL_NV_video_output
+#ifndef GLEE_C_DEFINED_wglGetVideoDeviceNV
+#define GLEE_C_DEFINED_wglGetVideoDeviceNV
+  BOOL __stdcall GLee_Lazy_wglGetVideoDeviceNV(HDC  hDC, int  numDevices, HPVIDEODEV * hVideoDevice)  {if (GLeeInit()) return wglGetVideoDeviceNV(hDC, numDevices, hVideoDevice); return (BOOL)0;}
+  GLEEPFNWGLGETVIDEODEVICENVPROC GLeeFuncPtr_wglGetVideoDeviceNV=GLee_Lazy_wglGetVideoDeviceNV;
+#endif
+#ifndef GLEE_C_DEFINED_wglReleaseVideoDeviceNV
+#define GLEE_C_DEFINED_wglReleaseVideoDeviceNV
+  BOOL __stdcall GLee_Lazy_wglReleaseVideoDeviceNV(HPVIDEODEV  hVideoDevice)  {if (GLeeInit()) return wglReleaseVideoDeviceNV(hVideoDevice); return (BOOL)0;}
+  GLEEPFNWGLRELEASEVIDEODEVICENVPROC GLeeFuncPtr_wglReleaseVideoDeviceNV=GLee_Lazy_wglReleaseVideoDeviceNV;
+#endif
+#ifndef GLEE_C_DEFINED_wglBindVideoImageNV
+#define GLEE_C_DEFINED_wglBindVideoImageNV
+  BOOL __stdcall GLee_Lazy_wglBindVideoImageNV(HPVIDEODEV  hVideoDevice, HPBUFFERARB  hPbuffer, int  iVideoBuffer)  {if (GLeeInit()) return wglBindVideoImageNV(hVideoDevice, hPbuffer, iVideoBuffer); return (BOOL)0;}
+  GLEEPFNWGLBINDVIDEOIMAGENVPROC GLeeFuncPtr_wglBindVideoImageNV=GLee_Lazy_wglBindVideoImageNV;
+#endif
+#ifndef GLEE_C_DEFINED_wglReleaseVideoImageNV
+#define GLEE_C_DEFINED_wglReleaseVideoImageNV
+  BOOL __stdcall GLee_Lazy_wglReleaseVideoImageNV(HPBUFFERARB  hPbuffer, int  iVideoBuffer)  {if (GLeeInit()) return wglReleaseVideoImageNV(hPbuffer, iVideoBuffer); return (BOOL)0;}
+  GLEEPFNWGLRELEASEVIDEOIMAGENVPROC GLeeFuncPtr_wglReleaseVideoImageNV=GLee_Lazy_wglReleaseVideoImageNV;
+#endif
+#ifndef GLEE_C_DEFINED_wglSendPbufferToVideoNV
+#define GLEE_C_DEFINED_wglSendPbufferToVideoNV
+  BOOL __stdcall GLee_Lazy_wglSendPbufferToVideoNV(HPBUFFERARB  hPbuffer, int  iBufferType, unsigned long * pulCounterPbuffer, BOOL  bBlock)  {if (GLeeInit()) return wglSendPbufferToVideoNV(hPbuffer, iBufferType, pulCounterPbuffer, bBlock); return (BOOL)0;}
+  GLEEPFNWGLSENDPBUFFERTOVIDEONVPROC GLeeFuncPtr_wglSendPbufferToVideoNV=GLee_Lazy_wglSendPbufferToVideoNV;
+#endif
+#ifndef GLEE_C_DEFINED_wglGetVideoInfoNV
+#define GLEE_C_DEFINED_wglGetVideoInfoNV
+  BOOL __stdcall GLee_Lazy_wglGetVideoInfoNV(HPVIDEODEV  hpVideoDevice, unsigned long * pulCounterOutputPbuffer, unsigned long * pulCounterOutputVideo)  {if (GLeeInit()) return wglGetVideoInfoNV(hpVideoDevice, pulCounterOutputPbuffer, pulCounterOutputVideo); return (BOOL)0;}
+  GLEEPFNWGLGETVIDEOINFONVPROC GLeeFuncPtr_wglGetVideoInfoNV=GLee_Lazy_wglGetVideoInfoNV;
+#endif
+#endif 
+#elif defined(__APPLE__) || defined(__APPLE_CC__)
+#else /* GLX */
+
+/* Extension querying variables */
+
+GLboolean _GLEE_GLX_VERSION_1_3 = GL_FALSE;
+GLboolean _GLEE_GLX_VERSION_1_4 = GL_FALSE;
+GLboolean _GLEE_GLX_ARB_multisample = GL_FALSE;
+GLboolean _GLEE_GLX_ARB_vertex_buffer_object = GL_FALSE;
+GLboolean _GLEE_GLX_ARB_fbconfig_float = GL_FALSE;
+GLboolean _GLEE_GLX_ARB_framebuffer_sRGB = GL_FALSE;
+GLboolean _GLEE_GLX_ARB_create_context = GL_FALSE;
+GLboolean _GLEE_GLX_ARB_create_context_profile = GL_FALSE;
+GLboolean _GLEE_GLX_ARB_create_context_robustness = GL_FALSE;
+GLboolean _GLEE_GLX_SGIS_multisample = GL_FALSE;
+GLboolean _GLEE_GLX_EXT_visual_info = GL_FALSE;
+GLboolean _GLEE_GLX_SGI_swap_control = GL_FALSE;
+GLboolean _GLEE_GLX_SGI_video_sync = GL_FALSE;
+GLboolean _GLEE_GLX_SGI_make_current_read = GL_FALSE;
+GLboolean _GLEE_GLX_EXT_visual_rating = GL_FALSE;
+GLboolean _GLEE_GLX_EXT_import_context = GL_FALSE;
+GLboolean _GLEE_GLX_SGIX_fbconfig = GL_FALSE;
+GLboolean _GLEE_GLX_SGIX_pbuffer = GL_FALSE;
+GLboolean _GLEE_GLX_SGI_cushion = GL_FALSE;
+GLboolean _GLEE_GLX_SGIX_video_resize = GL_FALSE;
+GLboolean _GLEE_GLX_SGIX_swap_group = GL_FALSE;
+GLboolean _GLEE_GLX_SGIX_swap_barrier = GL_FALSE;
+GLboolean _GLEE_GLX_SGIS_blended_overlay = GL_FALSE;
+GLboolean _GLEE_GLX_SGIS_shared_multisample = GL_FALSE;
+GLboolean _GLEE_GLX_SUN_get_transparent_index = GL_FALSE;
+GLboolean _GLEE_GLX_3DFX_multisample = GL_FALSE;
+GLboolean _GLEE_GLX_MESA_copy_sub_buffer = GL_FALSE;
+GLboolean _GLEE_GLX_MESA_pixmap_colormap = GL_FALSE;
+GLboolean _GLEE_GLX_MESA_release_buffers = GL_FALSE;
+GLboolean _GLEE_GLX_MESA_set_3dfx_mode = GL_FALSE;
+GLboolean _GLEE_GLX_SGIX_visual_select_group = GL_FALSE;
+GLboolean _GLEE_GLX_OML_swap_method = GL_FALSE;
+GLboolean _GLEE_GLX_OML_sync_control = GL_FALSE;
+GLboolean _GLEE_GLX_NV_float_buffer = GL_FALSE;
+GLboolean _GLEE_GLX_SGIX_hyperpipe = GL_FALSE;
+GLboolean _GLEE_GLX_MESA_agp_offset = GL_FALSE;
+GLboolean _GLEE_GLX_EXT_fbconfig_packed_float = GL_FALSE;
+GLboolean _GLEE_GLX_EXT_framebuffer_sRGB = GL_FALSE;
+GLboolean _GLEE_GLX_EXT_texture_from_pixmap = GL_FALSE;
+GLboolean _GLEE_GLX_NV_present_video = GL_FALSE;
+GLboolean _GLEE_GLX_NV_video_out = GL_FALSE;
+GLboolean _GLEE_GLX_NV_swap_group = GL_FALSE;
+GLboolean _GLEE_GLX_NV_video_capture = GL_FALSE;
+GLboolean _GLEE_GLX_EXT_swap_control = GL_FALSE;
+GLboolean _GLEE_GLX_NV_copy_image = GL_FALSE;
+GLboolean _GLEE_GLX_INTEL_swap_event = GL_FALSE;
+GLboolean _GLEE_GLX_NV_multisample_coverage = GL_FALSE;
+GLboolean _GLEE_GLX_AMD_gpu_association = GL_FALSE;
+GLboolean _GLEE_GLX_EXT_create_context_es2_profile = GL_FALSE;
+GLboolean _GLEE_GLX_NV_video_output = GL_FALSE;
+GLboolean _GLEE_GLX_EXT_scene_marker = GL_FALSE;
+
+/*  GLX Extension names */
+
+char __GLeeGLXExtensionNames[51][35]={
+    "GLX_VERSION_1_3",
+    "GLX_VERSION_1_4",
+    "GLX_ARB_multisample",
+    "GLX_ARB_vertex_buffer_object",
+    "GLX_ARB_fbconfig_float",
+    "GLX_ARB_framebuffer_sRGB",
+    "GLX_ARB_create_context",
+    "GLX_ARB_create_context_profile",
+    "GLX_ARB_create_context_robustness",
+    "GLX_SGIS_multisample",
+    "GLX_EXT_visual_info",
+    "GLX_SGI_swap_control",
+    "GLX_SGI_video_sync",
+    "GLX_SGI_make_current_read",
+    "GLX_EXT_visual_rating",
+    "GLX_EXT_import_context",
+    "GLX_SGIX_fbconfig",
+    "GLX_SGIX_pbuffer",
+    "GLX_SGI_cushion",
+    "GLX_SGIX_video_resize",
+    "GLX_SGIX_swap_group",
+    "GLX_SGIX_swap_barrier",
+    "GLX_SGIS_blended_overlay",
+    "GLX_SGIS_shared_multisample",
+    "GLX_SUN_get_transparent_index",
+    "GLX_3DFX_multisample",
+    "GLX_MESA_copy_sub_buffer",
+    "GLX_MESA_pixmap_colormap",
+    "GLX_MESA_release_buffers",
+    "GLX_MESA_set_3dfx_mode",
+    "GLX_SGIX_visual_select_group",
+    "GLX_OML_swap_method",
+    "GLX_OML_sync_control",
+    "GLX_NV_float_buffer",
+    "GLX_SGIX_hyperpipe",
+    "GLX_MESA_agp_offset",
+    "GLX_EXT_fbconfig_packed_float",
+    "GLX_EXT_framebuffer_sRGB",
+    "GLX_EXT_texture_from_pixmap",
+    "GLX_NV_present_video",
+    "GLX_NV_video_out",
+    "GLX_NV_swap_group",
+    "GLX_NV_video_capture",
+    "GLX_EXT_swap_control",
+    "GLX_NV_copy_image",
+    "GLX_INTEL_swap_event",
+    "GLX_NV_multisample_coverage",
+    "GLX_AMD_gpu_association",
+    "GLX_EXT_create_context_es2_profile",
+    "GLX_NV_video_output",
+    "GLX_EXT_scene_marker"
+};
+int __GLeeGLXNumExtensions=51;
+
+/* GLX_VERSION_1_3 */
+
+#ifdef __GLEE_GLX_VERSION_1_3
+#ifndef GLEE_C_DEFINED_glXGetFBConfigs
+#define GLEE_C_DEFINED_glXGetFBConfigs
+  GLXFBConfig * __stdcall GLee_Lazy_glXGetFBConfigs(Display * dpy, int  screen, int * nelements)  {if (GLeeInit()) return glXGetFBConfigs(dpy, screen, nelements); return (GLXFBConfig *)0;}
+  GLEEPFNGLXGETFBCONFIGSPROC GLeeFuncPtr_glXGetFBConfigs=GLee_Lazy_glXGetFBConfigs;
+#endif
+#ifndef GLEE_C_DEFINED_glXChooseFBConfig
+#define GLEE_C_DEFINED_glXChooseFBConfig
+  GLXFBConfig * __stdcall GLee_Lazy_glXChooseFBConfig(Display * dpy, int  screen, const int * attrib_list, int * nelements)  {if (GLeeInit()) return glXChooseFBConfig(dpy, screen, attrib_list, nelements); return (GLXFBConfig *)0;}
+  GLEEPFNGLXCHOOSEFBCONFIGPROC GLeeFuncPtr_glXChooseFBConfig=GLee_Lazy_glXChooseFBConfig;
+#endif
+#ifndef GLEE_C_DEFINED_glXGetFBConfigAttrib
+#define GLEE_C_DEFINED_glXGetFBConfigAttrib
+  int __stdcall GLee_Lazy_glXGetFBConfigAttrib(Display * dpy, GLXFBConfig  config, int  attribute, int * value)  {if (GLeeInit()) return glXGetFBConfigAttrib(dpy, config, attribute, value); return (int)0;}
+  GLEEPFNGLXGETFBCONFIGATTRIBPROC GLeeFuncPtr_glXGetFBConfigAttrib=GLee_Lazy_glXGetFBConfigAttrib;
+#endif
+#ifndef GLEE_C_DEFINED_glXGetVisualFromFBConfig
+#define GLEE_C_DEFINED_glXGetVisualFromFBConfig
+  XVisualInfo * __stdcall GLee_Lazy_glXGetVisualFromFBConfig(Display * dpy, GLXFBConfig  config)  {if (GLeeInit()) return glXGetVisualFromFBConfig(dpy, config); return (XVisualInfo *)0;}
+  GLEEPFNGLXGETVISUALFROMFBCONFIGPROC GLeeFuncPtr_glXGetVisualFromFBConfig=GLee_Lazy_glXGetVisualFromFBConfig;
+#endif
+#ifndef GLEE_C_DEFINED_glXCreateWindow
+#define GLEE_C_DEFINED_glXCreateWindow
+  GLXWindow __stdcall GLee_Lazy_glXCreateWindow(Display * dpy, GLXFBConfig  config, Window  win, const int * attrib_list)  {if (GLeeInit()) return glXCreateWindow(dpy, config, win, attrib_list); return (GLXWindow)0;}
+  GLEEPFNGLXCREATEWINDOWPROC GLeeFuncPtr_glXCreateWindow=GLee_Lazy_glXCreateWindow;
+#endif
+#ifndef GLEE_C_DEFINED_glXDestroyWindow
+#define GLEE_C_DEFINED_glXDestroyWindow
+  void __stdcall GLee_Lazy_glXDestroyWindow(Display * dpy, GLXWindow  win)  {if (GLeeInit()) glXDestroyWindow(dpy, win);}
+  GLEEPFNGLXDESTROYWINDOWPROC GLeeFuncPtr_glXDestroyWindow=GLee_Lazy_glXDestroyWindow;
+#endif
+#ifndef GLEE_C_DEFINED_glXCreatePixmap
+#define GLEE_C_DEFINED_glXCreatePixmap
+  GLXPixmap __stdcall GLee_Lazy_glXCreatePixmap(Display * dpy, GLXFBConfig  config, Pixmap  pixmap, const int * attrib_list)  {if (GLeeInit()) return glXCreatePixmap(dpy, config, pixmap, attrib_list); return (GLXPixmap)0;}
+  GLEEPFNGLXCREATEPIXMAPPROC GLeeFuncPtr_glXCreatePixmap=GLee_Lazy_glXCreatePixmap;
+#endif
+#ifndef GLEE_C_DEFINED_glXDestroyPixmap
+#define GLEE_C_DEFINED_glXDestroyPixmap
+  void __stdcall GLee_Lazy_glXDestroyPixmap(Display * dpy, GLXPixmap  pixmap)  {if (GLeeInit()) glXDestroyPixmap(dpy, pixmap);}
+  GLEEPFNGLXDESTROYPIXMAPPROC GLeeFuncPtr_glXDestroyPixmap=GLee_Lazy_glXDestroyPixmap;
+#endif
+#ifndef GLEE_C_DEFINED_glXCreatePbuffer
+#define GLEE_C_DEFINED_glXCreatePbuffer
+  GLXPbuffer __stdcall GLee_Lazy_glXCreatePbuffer(Display * dpy, GLXFBConfig  config, const int * attrib_list)  {if (GLeeInit()) return glXCreatePbuffer(dpy, config, attrib_list); return (GLXPbuffer)0;}
+  GLEEPFNGLXCREATEPBUFFERPROC GLeeFuncPtr_glXCreatePbuffer=GLee_Lazy_glXCreatePbuffer;
+#endif
+#ifndef GLEE_C_DEFINED_glXDestroyPbuffer
+#define GLEE_C_DEFINED_glXDestroyPbuffer
+  void __stdcall GLee_Lazy_glXDestroyPbuffer(Display * dpy, GLXPbuffer  pbuf)  {if (GLeeInit()) glXDestroyPbuffer(dpy, pbuf);}
+  GLEEPFNGLXDESTROYPBUFFERPROC GLeeFuncPtr_glXDestroyPbuffer=GLee_Lazy_glXDestroyPbuffer;
+#endif
+#ifndef GLEE_C_DEFINED_glXQueryDrawable
+#define GLEE_C_DEFINED_glXQueryDrawable
+  void __stdcall GLee_Lazy_glXQueryDrawable(Display * dpy, GLXDrawable  draw, int  attribute, unsigned int * value)  {if (GLeeInit()) glXQueryDrawable(dpy, draw, attribute, value);}
+  GLEEPFNGLXQUERYDRAWABLEPROC GLeeFuncPtr_glXQueryDrawable=GLee_Lazy_glXQueryDrawable;
+#endif
+#ifndef GLEE_C_DEFINED_glXCreateNewContext
+#define GLEE_C_DEFINED_glXCreateNewContext
+  GLXContext __stdcall GLee_Lazy_glXCreateNewContext(Display * dpy, GLXFBConfig  config, int  render_type, GLXContext  share_list, Bool  direct)  {if (GLeeInit()) return glXCreateNewContext(dpy, config, render_type, share_list, direct); return (GLXContext)0;}
+  GLEEPFNGLXCREATENEWCONTEXTPROC GLeeFuncPtr_glXCreateNewContext=GLee_Lazy_glXCreateNewContext;
+#endif
+#ifndef GLEE_C_DEFINED_glXMakeContextCurrent
+#define GLEE_C_DEFINED_glXMakeContextCurrent
+  Bool __stdcall GLee_Lazy_glXMakeContextCurrent(Display * dpy, GLXDrawable  draw, GLXDrawable  read, GLXContext  ctx)  {if (GLeeInit()) return glXMakeContextCurrent(dpy, draw, read, ctx); return (Bool)0;}
+  GLEEPFNGLXMAKECONTEXTCURRENTPROC GLeeFuncPtr_glXMakeContextCurrent=GLee_Lazy_glXMakeContextCurrent;
+#endif
+#ifndef GLEE_C_DEFINED_glXGetCurrentReadDrawable
+#define GLEE_C_DEFINED_glXGetCurrentReadDrawable
+  GLXDrawable __stdcall GLee_Lazy_glXGetCurrentReadDrawable(void)  {if (GLeeInit()) return glXGetCurrentReadDrawable(); return (GLXDrawable)0;}
+  GLEEPFNGLXGETCURRENTREADDRAWABLEPROC GLeeFuncPtr_glXGetCurrentReadDrawable=GLee_Lazy_glXGetCurrentReadDrawable;
+#endif
+#ifndef GLEE_C_DEFINED_glXGetCurrentDisplay
+#define GLEE_C_DEFINED_glXGetCurrentDisplay
+  Display * __stdcall GLee_Lazy_glXGetCurrentDisplay(void)  {if (GLeeInit()) return glXGetCurrentDisplay(); return (Display *)0;}
+  GLEEPFNGLXGETCURRENTDISPLAYPROC GLeeFuncPtr_glXGetCurrentDisplay=GLee_Lazy_glXGetCurrentDisplay;
+#endif
+#ifndef GLEE_C_DEFINED_glXQueryContext
+#define GLEE_C_DEFINED_glXQueryContext
+  int __stdcall GLee_Lazy_glXQueryContext(Display * dpy, GLXContext  ctx, int  attribute, int * value)  {if (GLeeInit()) return glXQueryContext(dpy, ctx, attribute, value); return (int)0;}
+  GLEEPFNGLXQUERYCONTEXTPROC GLeeFuncPtr_glXQueryContext=GLee_Lazy_glXQueryContext;
+#endif
+#ifndef GLEE_C_DEFINED_glXSelectEvent
+#define GLEE_C_DEFINED_glXSelectEvent
+  void __stdcall GLee_Lazy_glXSelectEvent(Display * dpy, GLXDrawable  draw, unsigned long  event_mask)  {if (GLeeInit()) glXSelectEvent(dpy, draw, event_mask);}
+  GLEEPFNGLXSELECTEVENTPROC GLeeFuncPtr_glXSelectEvent=GLee_Lazy_glXSelectEvent;
+#endif
+#ifndef GLEE_C_DEFINED_glXGetSelectedEvent
+#define GLEE_C_DEFINED_glXGetSelectedEvent
+  void __stdcall GLee_Lazy_glXGetSelectedEvent(Display * dpy, GLXDrawable  draw, unsigned long * event_mask)  {if (GLeeInit()) glXGetSelectedEvent(dpy, draw, event_mask);}
+  GLEEPFNGLXGETSELECTEDEVENTPROC GLeeFuncPtr_glXGetSelectedEvent=GLee_Lazy_glXGetSelectedEvent;
+#endif
+#endif 
+
+/* GLX_VERSION_1_4 */
+
+#ifdef __GLEE_GLX_VERSION_1_4
+#ifndef GLEE_C_DEFINED_glXGetProcAddress
+#define GLEE_C_DEFINED_glXGetProcAddress
+  __GLXextFuncPtr __stdcall GLee_Lazy_glXGetProcAddress(const GLubyte * procName)  {if (GLeeInit()) return glXGetProcAddress(procName); return (__GLXextFuncPtr)0;}
+  GLEEPFNGLXGETPROCADDRESSPROC GLeeFuncPtr_glXGetProcAddress=GLee_Lazy_glXGetProcAddress;
+#endif
+#endif 
+
+/* GLX_ARB_multisample */
+
+#ifdef __GLEE_GLX_ARB_multisample
+#endif 
+
+/* GLX_ARB_vertex_buffer_object */
+
+#ifdef __GLEE_GLX_ARB_vertex_buffer_object
+#endif 
+
+/* GLX_ARB_fbconfig_float */
+
+#ifdef __GLEE_GLX_ARB_fbconfig_float
+#endif 
+
+/* GLX_ARB_framebuffer_sRGB */
+
+#ifdef __GLEE_GLX_ARB_framebuffer_sRGB
+#endif 
+
+/* GLX_ARB_create_context */
+
+#ifdef __GLEE_GLX_ARB_create_context
+#ifndef GLEE_C_DEFINED_glXCreateContextAttribsARB
+#define GLEE_C_DEFINED_glXCreateContextAttribsARB
+  GLXContext __stdcall GLee_Lazy_glXCreateContextAttribsARB(Display * dpy, GLXFBConfig  config, GLXContext  share_context, Bool  direct, const int * attrib_list)  {if (GLeeInit()) return glXCreateContextAttribsARB(dpy, config, share_context, direct, attrib_list); return (GLXContext)0;}
+  GLEEPFNGLXCREATECONTEXTATTRIBSARBPROC GLeeFuncPtr_glXCreateContextAttribsARB=GLee_Lazy_glXCreateContextAttribsARB;
+#endif
+#endif 
+
+/* GLX_ARB_create_context_profile */
+
+#ifdef __GLEE_GLX_ARB_create_context_profile
+#endif 
+
+/* GLX_ARB_create_context_robustness */
+
+#ifdef __GLEE_GLX_ARB_create_context_robustness
+#endif 
+
+/* GLX_SGIS_multisample */
+
+#ifdef __GLEE_GLX_SGIS_multisample
+#endif 
+
+/* GLX_EXT_visual_info */
+
+#ifdef __GLEE_GLX_EXT_visual_info
+#endif 
+
+/* GLX_SGI_swap_control */
+
+#ifdef __GLEE_GLX_SGI_swap_control
+#ifndef GLEE_C_DEFINED_glXSwapIntervalSGI
+#define GLEE_C_DEFINED_glXSwapIntervalSGI
+  int __stdcall GLee_Lazy_glXSwapIntervalSGI(int  interval)  {if (GLeeInit()) return glXSwapIntervalSGI(interval); return (int)0;}
+  GLEEPFNGLXSWAPINTERVALSGIPROC GLeeFuncPtr_glXSwapIntervalSGI=GLee_Lazy_glXSwapIntervalSGI;
+#endif
+#endif 
+
+/* GLX_SGI_video_sync */
+
+#ifdef __GLEE_GLX_SGI_video_sync
+#ifndef GLEE_C_DEFINED_glXGetVideoSyncSGI
+#define GLEE_C_DEFINED_glXGetVideoSyncSGI
+  int __stdcall GLee_Lazy_glXGetVideoSyncSGI(unsigned int * count)  {if (GLeeInit()) return glXGetVideoSyncSGI(count); return (int)0;}
+  GLEEPFNGLXGETVIDEOSYNCSGIPROC GLeeFuncPtr_glXGetVideoSyncSGI=GLee_Lazy_glXGetVideoSyncSGI;
+#endif
+#ifndef GLEE_C_DEFINED_glXWaitVideoSyncSGI
+#define GLEE_C_DEFINED_glXWaitVideoSyncSGI
+  int __stdcall GLee_Lazy_glXWaitVideoSyncSGI(int  divisor, int  remainder, unsigned int * count)  {if (GLeeInit()) return glXWaitVideoSyncSGI(divisor, remainder, count); return (int)0;}
+  GLEEPFNGLXWAITVIDEOSYNCSGIPROC GLeeFuncPtr_glXWaitVideoSyncSGI=GLee_Lazy_glXWaitVideoSyncSGI;
+#endif
+#endif 
+
+/* GLX_SGI_make_current_read */
+
+#ifdef __GLEE_GLX_SGI_make_current_read
+#ifndef GLEE_C_DEFINED_glXMakeCurrentReadSGI
+#define GLEE_C_DEFINED_glXMakeCurrentReadSGI
+  Bool __stdcall GLee_Lazy_glXMakeCurrentReadSGI(Display * dpy, GLXDrawable  draw, GLXDrawable  read, GLXContext  ctx)  {if (GLeeInit()) return glXMakeCurrentReadSGI(dpy, draw, read, ctx); return (Bool)0;}
+  GLEEPFNGLXMAKECURRENTREADSGIPROC GLeeFuncPtr_glXMakeCurrentReadSGI=GLee_Lazy_glXMakeCurrentReadSGI;
+#endif
+#ifndef GLEE_C_DEFINED_glXGetCurrentReadDrawableSGI
+#define GLEE_C_DEFINED_glXGetCurrentReadDrawableSGI
+  GLXDrawable __stdcall GLee_Lazy_glXGetCurrentReadDrawableSGI(void)  {if (GLeeInit()) return glXGetCurrentReadDrawableSGI(); return (GLXDrawable)0;}
+  GLEEPFNGLXGETCURRENTREADDRAWABLESGIPROC GLeeFuncPtr_glXGetCurrentReadDrawableSGI=GLee_Lazy_glXGetCurrentReadDrawableSGI;
+#endif
+#endif 
+
+/* GLX_EXT_visual_rating */
+
+#ifdef __GLEE_GLX_EXT_visual_rating
+#endif 
+
+/* GLX_EXT_import_context */
+
+#ifdef __GLEE_GLX_EXT_import_context
+#ifndef GLEE_C_DEFINED_glXGetCurrentDisplayEXT
+#define GLEE_C_DEFINED_glXGetCurrentDisplayEXT
+  Display * __stdcall GLee_Lazy_glXGetCurrentDisplayEXT(void)  {if (GLeeInit()) return glXGetCurrentDisplayEXT(); return (Display *)0;}
+  GLEEPFNGLXGETCURRENTDISPLAYEXTPROC GLeeFuncPtr_glXGetCurrentDisplayEXT=GLee_Lazy_glXGetCurrentDisplayEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glXQueryContextInfoEXT
+#define GLEE_C_DEFINED_glXQueryContextInfoEXT
+  int __stdcall GLee_Lazy_glXQueryContextInfoEXT(Display * dpy, GLXContext  context, int  attribute, int * value)  {if (GLeeInit()) return glXQueryContextInfoEXT(dpy, context, attribute, value); return (int)0;}
+  GLEEPFNGLXQUERYCONTEXTINFOEXTPROC GLeeFuncPtr_glXQueryContextInfoEXT=GLee_Lazy_glXQueryContextInfoEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glXGetContextIDEXT
+#define GLEE_C_DEFINED_glXGetContextIDEXT
+  GLXContextID __stdcall GLee_Lazy_glXGetContextIDEXT(const GLXContext  context)  {if (GLeeInit()) return glXGetContextIDEXT(context); return (GLXContextID)0;}
+  GLEEPFNGLXGETCONTEXTIDEXTPROC GLeeFuncPtr_glXGetContextIDEXT=GLee_Lazy_glXGetContextIDEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glXImportContextEXT
+#define GLEE_C_DEFINED_glXImportContextEXT
+  GLXContext __stdcall GLee_Lazy_glXImportContextEXT(Display * dpy, GLXContextID  contextID)  {if (GLeeInit()) return glXImportContextEXT(dpy, contextID); return (GLXContext)0;}
+  GLEEPFNGLXIMPORTCONTEXTEXTPROC GLeeFuncPtr_glXImportContextEXT=GLee_Lazy_glXImportContextEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glXFreeContextEXT
+#define GLEE_C_DEFINED_glXFreeContextEXT
+  void __stdcall GLee_Lazy_glXFreeContextEXT(Display * dpy, GLXContext  context)  {if (GLeeInit()) glXFreeContextEXT(dpy, context);}
+  GLEEPFNGLXFREECONTEXTEXTPROC GLeeFuncPtr_glXFreeContextEXT=GLee_Lazy_glXFreeContextEXT;
+#endif
+#endif 
+
+/* GLX_SGIX_fbconfig */
+
+#ifdef __GLEE_GLX_SGIX_fbconfig
+#ifndef GLEE_C_DEFINED_glXGetFBConfigAttribSGIX
+#define GLEE_C_DEFINED_glXGetFBConfigAttribSGIX
+  int __stdcall GLee_Lazy_glXGetFBConfigAttribSGIX(Display * dpy, GLXFBConfigSGIX  config, int  attribute, int * value)  {if (GLeeInit()) return glXGetFBConfigAttribSGIX(dpy, config, attribute, value); return (int)0;}
+  GLEEPFNGLXGETFBCONFIGATTRIBSGIXPROC GLeeFuncPtr_glXGetFBConfigAttribSGIX=GLee_Lazy_glXGetFBConfigAttribSGIX;
+#endif
+#ifndef GLEE_C_DEFINED_glXChooseFBConfigSGIX
+#define GLEE_C_DEFINED_glXChooseFBConfigSGIX
+  GLXFBConfigSGIX * __stdcall GLee_Lazy_glXChooseFBConfigSGIX(Display * dpy, int  screen, int * attrib_list, int * nelements)  {if (GLeeInit()) return glXChooseFBConfigSGIX(dpy, screen, attrib_list, nelements); return (GLXFBConfigSGIX *)0;}
+  GLEEPFNGLXCHOOSEFBCONFIGSGIXPROC GLeeFuncPtr_glXChooseFBConfigSGIX=GLee_Lazy_glXChooseFBConfigSGIX;
+#endif
+#ifndef GLEE_C_DEFINED_glXCreateGLXPixmapWithConfigSGIX
+#define GLEE_C_DEFINED_glXCreateGLXPixmapWithConfigSGIX
+  GLXPixmap __stdcall GLee_Lazy_glXCreateGLXPixmapWithConfigSGIX(Display * dpy, GLXFBConfigSGIX  config, Pixmap  pixmap)  {if (GLeeInit()) return glXCreateGLXPixmapWithConfigSGIX(dpy, config, pixmap); return (GLXPixmap)0;}
+  GLEEPFNGLXCREATEGLXPIXMAPWITHCONFIGSGIXPROC GLeeFuncPtr_glXCreateGLXPixmapWithConfigSGIX=GLee_Lazy_glXCreateGLXPixmapWithConfigSGIX;
+#endif
+#ifndef GLEE_C_DEFINED_glXCreateContextWithConfigSGIX
+#define GLEE_C_DEFINED_glXCreateContextWithConfigSGIX
+  GLXContext __stdcall GLee_Lazy_glXCreateContextWithConfigSGIX(Display * dpy, GLXFBConfigSGIX  config, int  render_type, GLXContext  share_list, Bool  direct)  {if (GLeeInit()) return glXCreateContextWithConfigSGIX(dpy, config, render_type, share_list, direct); return (GLXContext)0;}
+  GLEEPFNGLXCREATECONTEXTWITHCONFIGSGIXPROC GLeeFuncPtr_glXCreateContextWithConfigSGIX=GLee_Lazy_glXCreateContextWithConfigSGIX;
+#endif
+#ifndef GLEE_C_DEFINED_glXGetVisualFromFBConfigSGIX
+#define GLEE_C_DEFINED_glXGetVisualFromFBConfigSGIX
+  XVisualInfo * __stdcall GLee_Lazy_glXGetVisualFromFBConfigSGIX(Display * dpy, GLXFBConfigSGIX  config)  {if (GLeeInit()) return glXGetVisualFromFBConfigSGIX(dpy, config); return (XVisualInfo *)0;}
+  GLEEPFNGLXGETVISUALFROMFBCONFIGSGIXPROC GLeeFuncPtr_glXGetVisualFromFBConfigSGIX=GLee_Lazy_glXGetVisualFromFBConfigSGIX;
+#endif
+#ifndef GLEE_C_DEFINED_glXGetFBConfigFromVisualSGIX
+#define GLEE_C_DEFINED_glXGetFBConfigFromVisualSGIX
+  GLXFBConfigSGIX __stdcall GLee_Lazy_glXGetFBConfigFromVisualSGIX(Display * dpy, XVisualInfo * vis)  {if (GLeeInit()) return glXGetFBConfigFromVisualSGIX(dpy, vis); return (GLXFBConfigSGIX)0;}
+  GLEEPFNGLXGETFBCONFIGFROMVISUALSGIXPROC GLeeFuncPtr_glXGetFBConfigFromVisualSGIX=GLee_Lazy_glXGetFBConfigFromVisualSGIX;
+#endif
+#endif 
+
+/* GLX_SGIX_pbuffer */
+
+#ifdef __GLEE_GLX_SGIX_pbuffer
+#ifndef GLEE_C_DEFINED_glXCreateGLXPbufferSGIX
+#define GLEE_C_DEFINED_glXCreateGLXPbufferSGIX
+  GLXPbufferSGIX __stdcall GLee_Lazy_glXCreateGLXPbufferSGIX(Display * dpy, GLXFBConfigSGIX  config, unsigned int  width, unsigned int  height, int * attrib_list)  {if (GLeeInit()) return glXCreateGLXPbufferSGIX(dpy, config, width, height, attrib_list); return (GLXPbufferSGIX)0;}
+  GLEEPFNGLXCREATEGLXPBUFFERSGIXPROC GLeeFuncPtr_glXCreateGLXPbufferSGIX=GLee_Lazy_glXCreateGLXPbufferSGIX;
+#endif
+#ifndef GLEE_C_DEFINED_glXDestroyGLXPbufferSGIX
+#define GLEE_C_DEFINED_glXDestroyGLXPbufferSGIX
+  void __stdcall GLee_Lazy_glXDestroyGLXPbufferSGIX(Display * dpy, GLXPbufferSGIX  pbuf)  {if (GLeeInit()) glXDestroyGLXPbufferSGIX(dpy, pbuf);}
+  GLEEPFNGLXDESTROYGLXPBUFFERSGIXPROC GLeeFuncPtr_glXDestroyGLXPbufferSGIX=GLee_Lazy_glXDestroyGLXPbufferSGIX;
+#endif
+#ifndef GLEE_C_DEFINED_glXQueryGLXPbufferSGIX
+#define GLEE_C_DEFINED_glXQueryGLXPbufferSGIX
+  int __stdcall GLee_Lazy_glXQueryGLXPbufferSGIX(Display * dpy, GLXPbufferSGIX  pbuf, int  attribute, unsigned int * value)  {if (GLeeInit()) return glXQueryGLXPbufferSGIX(dpy, pbuf, attribute, value); return (int)0;}
+  GLEEPFNGLXQUERYGLXPBUFFERSGIXPROC GLeeFuncPtr_glXQueryGLXPbufferSGIX=GLee_Lazy_glXQueryGLXPbufferSGIX;
+#endif
+#ifndef GLEE_C_DEFINED_glXSelectEventSGIX
+#define GLEE_C_DEFINED_glXSelectEventSGIX
+  void __stdcall GLee_Lazy_glXSelectEventSGIX(Display * dpy, GLXDrawable  drawable, unsigned long  mask)  {if (GLeeInit()) glXSelectEventSGIX(dpy, drawable, mask);}
+  GLEEPFNGLXSELECTEVENTSGIXPROC GLeeFuncPtr_glXSelectEventSGIX=GLee_Lazy_glXSelectEventSGIX;
+#endif
+#ifndef GLEE_C_DEFINED_glXGetSelectedEventSGIX
+#define GLEE_C_DEFINED_glXGetSelectedEventSGIX
+  void __stdcall GLee_Lazy_glXGetSelectedEventSGIX(Display * dpy, GLXDrawable  drawable, unsigned long * mask)  {if (GLeeInit()) glXGetSelectedEventSGIX(dpy, drawable, mask);}
+  GLEEPFNGLXGETSELECTEDEVENTSGIXPROC GLeeFuncPtr_glXGetSelectedEventSGIX=GLee_Lazy_glXGetSelectedEventSGIX;
+#endif
+#endif 
+
+/* GLX_SGI_cushion */
+
+#ifdef __GLEE_GLX_SGI_cushion
+#ifndef GLEE_C_DEFINED_glXCushionSGI
+#define GLEE_C_DEFINED_glXCushionSGI
+  void __stdcall GLee_Lazy_glXCushionSGI(Display * dpy, Window  window, float  cushion)  {if (GLeeInit()) glXCushionSGI(dpy, window, cushion);}
+  GLEEPFNGLXCUSHIONSGIPROC GLeeFuncPtr_glXCushionSGI=GLee_Lazy_glXCushionSGI;
+#endif
+#endif 
+
+/* GLX_SGIX_video_resize */
+
+#ifdef __GLEE_GLX_SGIX_video_resize
+#ifndef GLEE_C_DEFINED_glXBindChannelToWindowSGIX
+#define GLEE_C_DEFINED_glXBindChannelToWindowSGIX
+  int __stdcall GLee_Lazy_glXBindChannelToWindowSGIX(Display * display, int  screen, int  channel, Window  window)  {if (GLeeInit()) return glXBindChannelToWindowSGIX(display, screen, channel, window); return (int)0;}
+  GLEEPFNGLXBINDCHANNELTOWINDOWSGIXPROC GLeeFuncPtr_glXBindChannelToWindowSGIX=GLee_Lazy_glXBindChannelToWindowSGIX;
+#endif
+#ifndef GLEE_C_DEFINED_glXChannelRectSGIX
+#define GLEE_C_DEFINED_glXChannelRectSGIX
+  int __stdcall GLee_Lazy_glXChannelRectSGIX(Display * display, int  screen, int  channel, int  x, int  y, int  w, int  h)  {if (GLeeInit()) return glXChannelRectSGIX(display, screen, channel, x, y, w, h); return (int)0;}
+  GLEEPFNGLXCHANNELRECTSGIXPROC GLeeFuncPtr_glXChannelRectSGIX=GLee_Lazy_glXChannelRectSGIX;
+#endif
+#ifndef GLEE_C_DEFINED_glXQueryChannelRectSGIX
+#define GLEE_C_DEFINED_glXQueryChannelRectSGIX
+  int __stdcall GLee_Lazy_glXQueryChannelRectSGIX(Display * display, int  screen, int  channel, int * dx, int * dy, int * dw, int * dh)  {if (GLeeInit()) return glXQueryChannelRectSGIX(display, screen, channel, dx, dy, dw, dh); return (int)0;}
+  GLEEPFNGLXQUERYCHANNELRECTSGIXPROC GLeeFuncPtr_glXQueryChannelRectSGIX=GLee_Lazy_glXQueryChannelRectSGIX;
+#endif
+#ifndef GLEE_C_DEFINED_glXQueryChannelDeltasSGIX
+#define GLEE_C_DEFINED_glXQueryChannelDeltasSGIX
+  int __stdcall GLee_Lazy_glXQueryChannelDeltasSGIX(Display * display, int  screen, int  channel, int * x, int * y, int * w, int * h)  {if (GLeeInit()) return glXQueryChannelDeltasSGIX(display, screen, channel, x, y, w, h); return (int)0;}
+  GLEEPFNGLXQUERYCHANNELDELTASSGIXPROC GLeeFuncPtr_glXQueryChannelDeltasSGIX=GLee_Lazy_glXQueryChannelDeltasSGIX;
+#endif
+#ifndef GLEE_C_DEFINED_glXChannelRectSyncSGIX
+#define GLEE_C_DEFINED_glXChannelRectSyncSGIX
+  int __stdcall GLee_Lazy_glXChannelRectSyncSGIX(Display * display, int  screen, int  channel, GLenum  synctype)  {if (GLeeInit()) return glXChannelRectSyncSGIX(display, screen, channel, synctype); return (int)0;}
+  GLEEPFNGLXCHANNELRECTSYNCSGIXPROC GLeeFuncPtr_glXChannelRectSyncSGIX=GLee_Lazy_glXChannelRectSyncSGIX;
+#endif
+#endif 
+
+/* GLX_SGIX_swap_group */
+
+#ifdef __GLEE_GLX_SGIX_swap_group
+#ifndef GLEE_C_DEFINED_glXJoinSwapGroupSGIX
+#define GLEE_C_DEFINED_glXJoinSwapGroupSGIX
+  void __stdcall GLee_Lazy_glXJoinSwapGroupSGIX(Display * dpy, GLXDrawable  drawable, GLXDrawable  member)  {if (GLeeInit()) glXJoinSwapGroupSGIX(dpy, drawable, member);}
+  GLEEPFNGLXJOINSWAPGROUPSGIXPROC GLeeFuncPtr_glXJoinSwapGroupSGIX=GLee_Lazy_glXJoinSwapGroupSGIX;
+#endif
+#endif 
+
+/* GLX_SGIX_swap_barrier */
+
+#ifdef __GLEE_GLX_SGIX_swap_barrier
+#ifndef GLEE_C_DEFINED_glXBindSwapBarrierSGIX
+#define GLEE_C_DEFINED_glXBindSwapBarrierSGIX
+  void __stdcall GLee_Lazy_glXBindSwapBarrierSGIX(Display * dpy, GLXDrawable  drawable, int  barrier)  {if (GLeeInit()) glXBindSwapBarrierSGIX(dpy, drawable, barrier);}
+  GLEEPFNGLXBINDSWAPBARRIERSGIXPROC GLeeFuncPtr_glXBindSwapBarrierSGIX=GLee_Lazy_glXBindSwapBarrierSGIX;
+#endif
+#ifndef GLEE_C_DEFINED_glXQueryMaxSwapBarriersSGIX
+#define GLEE_C_DEFINED_glXQueryMaxSwapBarriersSGIX
+  Bool __stdcall GLee_Lazy_glXQueryMaxSwapBarriersSGIX(Display * dpy, int  screen, int * max)  {if (GLeeInit()) return glXQueryMaxSwapBarriersSGIX(dpy, screen, max); return (Bool)0;}
+  GLEEPFNGLXQUERYMAXSWAPBARRIERSSGIXPROC GLeeFuncPtr_glXQueryMaxSwapBarriersSGIX=GLee_Lazy_glXQueryMaxSwapBarriersSGIX;
+#endif
+#endif 
+
+/* GLX_SGIS_blended_overlay */
+
+#ifdef __GLEE_GLX_SGIS_blended_overlay
+#endif 
+
+/* GLX_SGIS_shared_multisample */
+
+#ifdef __GLEE_GLX_SGIS_shared_multisample
+#endif 
+
+/* GLX_SUN_get_transparent_index */
+
+#ifdef __GLEE_GLX_SUN_get_transparent_index
+#ifndef GLEE_C_DEFINED_glXGetTransparentIndexSUN
+#define GLEE_C_DEFINED_glXGetTransparentIndexSUN
+  Status __stdcall GLee_Lazy_glXGetTransparentIndexSUN(Display * dpy, Window  overlay, Window  underlay, long * pTransparentIndex)  {if (GLeeInit()) return glXGetTransparentIndexSUN(dpy, overlay, underlay, pTransparentIndex); return (Status)0;}
+  GLEEPFNGLXGETTRANSPARENTINDEXSUNPROC GLeeFuncPtr_glXGetTransparentIndexSUN=GLee_Lazy_glXGetTransparentIndexSUN;
+#endif
+#endif 
+
+/* GLX_3DFX_multisample */
+
+#ifdef __GLEE_GLX_3DFX_multisample
+#endif 
+
+/* GLX_MESA_copy_sub_buffer */
+
+#ifdef __GLEE_GLX_MESA_copy_sub_buffer
+#ifndef GLEE_C_DEFINED_glXCopySubBufferMESA
+#define GLEE_C_DEFINED_glXCopySubBufferMESA
+  void __stdcall GLee_Lazy_glXCopySubBufferMESA(Display * dpy, GLXDrawable  drawable, int  x, int  y, int  width, int  height)  {if (GLeeInit()) glXCopySubBufferMESA(dpy, drawable, x, y, width, height);}
+  GLEEPFNGLXCOPYSUBBUFFERMESAPROC GLeeFuncPtr_glXCopySubBufferMESA=GLee_Lazy_glXCopySubBufferMESA;
+#endif
+#endif 
+
+/* GLX_MESA_pixmap_colormap */
+
+#ifdef __GLEE_GLX_MESA_pixmap_colormap
+#ifndef GLEE_C_DEFINED_glXCreateGLXPixmapMESA
+#define GLEE_C_DEFINED_glXCreateGLXPixmapMESA
+  GLXPixmap __stdcall GLee_Lazy_glXCreateGLXPixmapMESA(Display * dpy, XVisualInfo * visual, Pixmap  pixmap, Colormap  cmap)  {if (GLeeInit()) return glXCreateGLXPixmapMESA(dpy, visual, pixmap, cmap); return (GLXPixmap)0;}
+  GLEEPFNGLXCREATEGLXPIXMAPMESAPROC GLeeFuncPtr_glXCreateGLXPixmapMESA=GLee_Lazy_glXCreateGLXPixmapMESA;
+#endif
+#endif 
+
+/* GLX_MESA_release_buffers */
+
+#ifdef __GLEE_GLX_MESA_release_buffers
+#ifndef GLEE_C_DEFINED_glXReleaseBuffersMESA
+#define GLEE_C_DEFINED_glXReleaseBuffersMESA
+  Bool __stdcall GLee_Lazy_glXReleaseBuffersMESA(Display * dpy, GLXDrawable  drawable)  {if (GLeeInit()) return glXReleaseBuffersMESA(dpy, drawable); return (Bool)0;}
+  GLEEPFNGLXRELEASEBUFFERSMESAPROC GLeeFuncPtr_glXReleaseBuffersMESA=GLee_Lazy_glXReleaseBuffersMESA;
+#endif
+#endif 
+
+/* GLX_MESA_set_3dfx_mode */
+
+#ifdef __GLEE_GLX_MESA_set_3dfx_mode
+#ifndef GLEE_C_DEFINED_glXSet3DfxModeMESA
+#define GLEE_C_DEFINED_glXSet3DfxModeMESA
+  Bool __stdcall GLee_Lazy_glXSet3DfxModeMESA(int  mode)  {if (GLeeInit()) return glXSet3DfxModeMESA(mode); return (Bool)0;}
+  GLEEPFNGLXSET3DFXMODEMESAPROC GLeeFuncPtr_glXSet3DfxModeMESA=GLee_Lazy_glXSet3DfxModeMESA;
+#endif
+#endif 
+
+/* GLX_SGIX_visual_select_group */
+
+#ifdef __GLEE_GLX_SGIX_visual_select_group
+#endif 
+
+/* GLX_OML_swap_method */
+
+#ifdef __GLEE_GLX_OML_swap_method
+#endif 
+
+/* GLX_OML_sync_control */
+
+#ifdef __GLEE_GLX_OML_sync_control
+#ifndef GLEE_C_DEFINED_glXGetSyncValuesOML
+#define GLEE_C_DEFINED_glXGetSyncValuesOML
+  Bool __stdcall GLee_Lazy_glXGetSyncValuesOML(Display * dpy, GLXDrawable  drawable, int64_t * ust, int64_t * msc, int64_t * sbc)  {if (GLeeInit()) return glXGetSyncValuesOML(dpy, drawable, ust, msc, sbc); return (Bool)0;}
+  GLEEPFNGLXGETSYNCVALUESOMLPROC GLeeFuncPtr_glXGetSyncValuesOML=GLee_Lazy_glXGetSyncValuesOML;
+#endif
+#ifndef GLEE_C_DEFINED_glXGetMscRateOML
+#define GLEE_C_DEFINED_glXGetMscRateOML
+  Bool __stdcall GLee_Lazy_glXGetMscRateOML(Display * dpy, GLXDrawable  drawable, int32_t * numerator, int32_t * denominator)  {if (GLeeInit()) return glXGetMscRateOML(dpy, drawable, numerator, denominator); return (Bool)0;}
+  GLEEPFNGLXGETMSCRATEOMLPROC GLeeFuncPtr_glXGetMscRateOML=GLee_Lazy_glXGetMscRateOML;
+#endif
+#ifndef GLEE_C_DEFINED_glXSwapBuffersMscOML
+#define GLEE_C_DEFINED_glXSwapBuffersMscOML
+  int64_t __stdcall GLee_Lazy_glXSwapBuffersMscOML(Display * dpy, GLXDrawable  drawable, int64_t  target_msc, int64_t  divisor, int64_t  remainder)  {if (GLeeInit()) return glXSwapBuffersMscOML(dpy, drawable, target_msc, divisor, remainder); return (int64_t)0;}
+  GLEEPFNGLXSWAPBUFFERSMSCOMLPROC GLeeFuncPtr_glXSwapBuffersMscOML=GLee_Lazy_glXSwapBuffersMscOML;
+#endif
+#ifndef GLEE_C_DEFINED_glXWaitForMscOML
+#define GLEE_C_DEFINED_glXWaitForMscOML
+  Bool __stdcall GLee_Lazy_glXWaitForMscOML(Display * dpy, GLXDrawable  drawable, int64_t  target_msc, int64_t  divisor, int64_t  remainder, int64_t * ust, int64_t * msc, int64_t * sbc)  {if (GLeeInit()) return glXWaitForMscOML(dpy, drawable, target_msc, divisor, remainder, ust, msc, sbc); return (Bool)0;}
+  GLEEPFNGLXWAITFORMSCOMLPROC GLeeFuncPtr_glXWaitForMscOML=GLee_Lazy_glXWaitForMscOML;
+#endif
+#ifndef GLEE_C_DEFINED_glXWaitForSbcOML
+#define GLEE_C_DEFINED_glXWaitForSbcOML
+  Bool __stdcall GLee_Lazy_glXWaitForSbcOML(Display * dpy, GLXDrawable  drawable, int64_t  target_sbc, int64_t * ust, int64_t * msc, int64_t * sbc)  {if (GLeeInit()) return glXWaitForSbcOML(dpy, drawable, target_sbc, ust, msc, sbc); return (Bool)0;}
+  GLEEPFNGLXWAITFORSBCOMLPROC GLeeFuncPtr_glXWaitForSbcOML=GLee_Lazy_glXWaitForSbcOML;
+#endif
+#endif 
+
+/* GLX_NV_float_buffer */
+
+#ifdef __GLEE_GLX_NV_float_buffer
+#endif 
+
+/* GLX_SGIX_hyperpipe */
+
+#ifdef __GLEE_GLX_SGIX_hyperpipe
+#ifndef GLEE_C_DEFINED_glXQueryHyperpipeNetworkSGIX
+#define GLEE_C_DEFINED_glXQueryHyperpipeNetworkSGIX
+  GLXHyperpipeNetworkSGIX * __stdcall GLee_Lazy_glXQueryHyperpipeNetworkSGIX(Display * dpy, int * npipes)  {if (GLeeInit()) return glXQueryHyperpipeNetworkSGIX(dpy, npipes); return (GLXHyperpipeNetworkSGIX *)0;}
+  GLEEPFNGLXQUERYHYPERPIPENETWORKSGIXPROC GLeeFuncPtr_glXQueryHyperpipeNetworkSGIX=GLee_Lazy_glXQueryHyperpipeNetworkSGIX;
+#endif
+#ifndef GLEE_C_DEFINED_glXHyperpipeConfigSGIX
+#define GLEE_C_DEFINED_glXHyperpipeConfigSGIX
+  int __stdcall GLee_Lazy_glXHyperpipeConfigSGIX(Display * dpy, int  networkId, int  npipes, GLXHyperpipeConfigSGIX * cfg, int * hpId)  {if (GLeeInit()) return glXHyperpipeConfigSGIX(dpy, networkId, npipes, cfg, hpId); return (int)0;}
+  GLEEPFNGLXHYPERPIPECONFIGSGIXPROC GLeeFuncPtr_glXHyperpipeConfigSGIX=GLee_Lazy_glXHyperpipeConfigSGIX;
+#endif
+#ifndef GLEE_C_DEFINED_glXQueryHyperpipeConfigSGIX
+#define GLEE_C_DEFINED_glXQueryHyperpipeConfigSGIX
+  GLXHyperpipeConfigSGIX * __stdcall GLee_Lazy_glXQueryHyperpipeConfigSGIX(Display * dpy, int  hpId, int * npipes)  {if (GLeeInit()) return glXQueryHyperpipeConfigSGIX(dpy, hpId, npipes); return (GLXHyperpipeConfigSGIX *)0;}
+  GLEEPFNGLXQUERYHYPERPIPECONFIGSGIXPROC GLeeFuncPtr_glXQueryHyperpipeConfigSGIX=GLee_Lazy_glXQueryHyperpipeConfigSGIX;
+#endif
+#ifndef GLEE_C_DEFINED_glXDestroyHyperpipeConfigSGIX
+#define GLEE_C_DEFINED_glXDestroyHyperpipeConfigSGIX
+  int __stdcall GLee_Lazy_glXDestroyHyperpipeConfigSGIX(Display * dpy, int  hpId)  {if (GLeeInit()) return glXDestroyHyperpipeConfigSGIX(dpy, hpId); return (int)0;}
+  GLEEPFNGLXDESTROYHYPERPIPECONFIGSGIXPROC GLeeFuncPtr_glXDestroyHyperpipeConfigSGIX=GLee_Lazy_glXDestroyHyperpipeConfigSGIX;
+#endif
+#ifndef GLEE_C_DEFINED_glXBindHyperpipeSGIX
+#define GLEE_C_DEFINED_glXBindHyperpipeSGIX
+  int __stdcall GLee_Lazy_glXBindHyperpipeSGIX(Display * dpy, int  hpId)  {if (GLeeInit()) return glXBindHyperpipeSGIX(dpy, hpId); return (int)0;}
+  GLEEPFNGLXBINDHYPERPIPESGIXPROC GLeeFuncPtr_glXBindHyperpipeSGIX=GLee_Lazy_glXBindHyperpipeSGIX;
+#endif
+#ifndef GLEE_C_DEFINED_glXQueryHyperpipeBestAttribSGIX
+#define GLEE_C_DEFINED_glXQueryHyperpipeBestAttribSGIX
+  int __stdcall GLee_Lazy_glXQueryHyperpipeBestAttribSGIX(Display * dpy, int  timeSlice, int  attrib, int  size, void * attribList, void * returnAttribList)  {if (GLeeInit()) return glXQueryHyperpipeBestAttribSGIX(dpy, timeSlice, attrib, size, attribList, returnAttribList); return (int)0;}
+  GLEEPFNGLXQUERYHYPERPIPEBESTATTRIBSGIXPROC GLeeFuncPtr_glXQueryHyperpipeBestAttribSGIX=GLee_Lazy_glXQueryHyperpipeBestAttribSGIX;
+#endif
+#ifndef GLEE_C_DEFINED_glXHyperpipeAttribSGIX
+#define GLEE_C_DEFINED_glXHyperpipeAttribSGIX
+  int __stdcall GLee_Lazy_glXHyperpipeAttribSGIX(Display * dpy, int  timeSlice, int  attrib, int  size, void * attribList)  {if (GLeeInit()) return glXHyperpipeAttribSGIX(dpy, timeSlice, attrib, size, attribList); return (int)0;}
+  GLEEPFNGLXHYPERPIPEATTRIBSGIXPROC GLeeFuncPtr_glXHyperpipeAttribSGIX=GLee_Lazy_glXHyperpipeAttribSGIX;
+#endif
+#ifndef GLEE_C_DEFINED_glXQueryHyperpipeAttribSGIX
+#define GLEE_C_DEFINED_glXQueryHyperpipeAttribSGIX
+  int __stdcall GLee_Lazy_glXQueryHyperpipeAttribSGIX(Display * dpy, int  timeSlice, int  attrib, int  size, void * returnAttribList)  {if (GLeeInit()) return glXQueryHyperpipeAttribSGIX(dpy, timeSlice, attrib, size, returnAttribList); return (int)0;}
+  GLEEPFNGLXQUERYHYPERPIPEATTRIBSGIXPROC GLeeFuncPtr_glXQueryHyperpipeAttribSGIX=GLee_Lazy_glXQueryHyperpipeAttribSGIX;
+#endif
+#endif 
+
+/* GLX_MESA_agp_offset */
+
+#ifdef __GLEE_GLX_MESA_agp_offset
+#ifndef GLEE_C_DEFINED_glXGetAGPOffsetMESA
+#define GLEE_C_DEFINED_glXGetAGPOffsetMESA
+  unsigned int __stdcall GLee_Lazy_glXGetAGPOffsetMESA(const void * pointer)  {if (GLeeInit()) return glXGetAGPOffsetMESA(pointer); return (unsigned int)0;}
+  GLEEPFNGLXGETAGPOFFSETMESAPROC GLeeFuncPtr_glXGetAGPOffsetMESA=GLee_Lazy_glXGetAGPOffsetMESA;
+#endif
+#endif 
+
+/* GLX_EXT_fbconfig_packed_float */
+
+#ifdef __GLEE_GLX_EXT_fbconfig_packed_float
+#endif 
+
+/* GLX_EXT_framebuffer_sRGB */
+
+#ifdef __GLEE_GLX_EXT_framebuffer_sRGB
+#endif 
+
+/* GLX_EXT_texture_from_pixmap */
+
+#ifdef __GLEE_GLX_EXT_texture_from_pixmap
+#ifndef GLEE_C_DEFINED_glXBindTexImageEXT
+#define GLEE_C_DEFINED_glXBindTexImageEXT
+  void __stdcall GLee_Lazy_glXBindTexImageEXT(Display * dpy, GLXDrawable  drawable, int  buffer, const int * attrib_list)  {if (GLeeInit()) glXBindTexImageEXT(dpy, drawable, buffer, attrib_list);}
+  GLEEPFNGLXBINDTEXIMAGEEXTPROC GLeeFuncPtr_glXBindTexImageEXT=GLee_Lazy_glXBindTexImageEXT;
+#endif
+#ifndef GLEE_C_DEFINED_glXReleaseTexImageEXT
+#define GLEE_C_DEFINED_glXReleaseTexImageEXT
+  void __stdcall GLee_Lazy_glXReleaseTexImageEXT(Display * dpy, GLXDrawable  drawable, int  buffer)  {if (GLeeInit()) glXReleaseTexImageEXT(dpy, drawable, buffer);}
+  GLEEPFNGLXRELEASETEXIMAGEEXTPROC GLeeFuncPtr_glXReleaseTexImageEXT=GLee_Lazy_glXReleaseTexImageEXT;
+#endif
+#endif 
+
+/* GLX_NV_present_video */
+
+#ifdef __GLEE_GLX_NV_present_video
+#ifndef GLEE_C_DEFINED_glXEnumerateVideoDevicesNV
+#define GLEE_C_DEFINED_glXEnumerateVideoDevicesNV
+  unsigned int * __stdcall GLee_Lazy_glXEnumerateVideoDevicesNV(Display * dpy, int  screen, int * nelements)  {if (GLeeInit()) return glXEnumerateVideoDevicesNV(dpy, screen, nelements); return (unsigned int *)0;}
+  GLEEPFNGLXENUMERATEVIDEODEVICESNVPROC GLeeFuncPtr_glXEnumerateVideoDevicesNV=GLee_Lazy_glXEnumerateVideoDevicesNV;
+#endif
+#ifndef GLEE_C_DEFINED_glXBindVideoDeviceNV
+#define GLEE_C_DEFINED_glXBindVideoDeviceNV
+  int __stdcall GLee_Lazy_glXBindVideoDeviceNV(Display * dpy, unsigned int  video_slot, unsigned int  video_device, const int * attrib_list)  {if (GLeeInit()) return glXBindVideoDeviceNV(dpy, video_slot, video_device, attrib_list); return (int)0;}
+  GLEEPFNGLXBINDVIDEODEVICENVPROC GLeeFuncPtr_glXBindVideoDeviceNV=GLee_Lazy_glXBindVideoDeviceNV;
+#endif
+#endif 
+
+/* GLX_NV_video_out */
+
+#ifdef __GLEE_GLX_NV_video_out
+#endif 
+
+/* GLX_NV_swap_group */
+
+#ifdef __GLEE_GLX_NV_swap_group
+#ifndef GLEE_C_DEFINED_glXJoinSwapGroupNV
+#define GLEE_C_DEFINED_glXJoinSwapGroupNV
+  Bool __stdcall GLee_Lazy_glXJoinSwapGroupNV(Display * dpy, GLXDrawable  drawable, GLuint  group)  {if (GLeeInit()) return glXJoinSwapGroupNV(dpy, drawable, group); return (Bool)0;}
+  GLEEPFNGLXJOINSWAPGROUPNVPROC GLeeFuncPtr_glXJoinSwapGroupNV=GLee_Lazy_glXJoinSwapGroupNV;
+#endif
+#ifndef GLEE_C_DEFINED_glXBindSwapBarrierNV
+#define GLEE_C_DEFINED_glXBindSwapBarrierNV
+  Bool __stdcall GLee_Lazy_glXBindSwapBarrierNV(Display * dpy, GLuint  group, GLuint  barrier)  {if (GLeeInit()) return glXBindSwapBarrierNV(dpy, group, barrier); return (Bool)0;}
+  GLEEPFNGLXBINDSWAPBARRIERNVPROC GLeeFuncPtr_glXBindSwapBarrierNV=GLee_Lazy_glXBindSwapBarrierNV;
+#endif
+#ifndef GLEE_C_DEFINED_glXQuerySwapGroupNV
+#define GLEE_C_DEFINED_glXQuerySwapGroupNV
+  Bool __stdcall GLee_Lazy_glXQuerySwapGroupNV(Display * dpy, GLXDrawable  drawable, GLuint * group, GLuint * barrier)  {if (GLeeInit()) return glXQuerySwapGroupNV(dpy, drawable, group, barrier); return (Bool)0;}
+  GLEEPFNGLXQUERYSWAPGROUPNVPROC GLeeFuncPtr_glXQuerySwapGroupNV=GLee_Lazy_glXQuerySwapGroupNV;
+#endif
+#ifndef GLEE_C_DEFINED_glXQueryMaxSwapGroupsNV
+#define GLEE_C_DEFINED_glXQueryMaxSwapGroupsNV
+  Bool __stdcall GLee_Lazy_glXQueryMaxSwapGroupsNV(Display * dpy, int  screen, GLuint * maxGroups, GLuint * maxBarriers)  {if (GLeeInit()) return glXQueryMaxSwapGroupsNV(dpy, screen, maxGroups, maxBarriers); return (Bool)0;}
+  GLEEPFNGLXQUERYMAXSWAPGROUPSNVPROC GLeeFuncPtr_glXQueryMaxSwapGroupsNV=GLee_Lazy_glXQueryMaxSwapGroupsNV;
+#endif
+#ifndef GLEE_C_DEFINED_glXQueryFrameCountNV
+#define GLEE_C_DEFINED_glXQueryFrameCountNV
+  Bool __stdcall GLee_Lazy_glXQueryFrameCountNV(Display * dpy, int  screen, GLuint * count)  {if (GLeeInit()) return glXQueryFrameCountNV(dpy, screen, count); return (Bool)0;}
+  GLEEPFNGLXQUERYFRAMECOUNTNVPROC GLeeFuncPtr_glXQueryFrameCountNV=GLee_Lazy_glXQueryFrameCountNV;
+#endif
+#ifndef GLEE_C_DEFINED_glXResetFrameCountNV
+#define GLEE_C_DEFINED_glXResetFrameCountNV
+  Bool __stdcall GLee_Lazy_glXResetFrameCountNV(Display * dpy, int  screen)  {if (GLeeInit()) return glXResetFrameCountNV(dpy, screen); return (Bool)0;}
+  GLEEPFNGLXRESETFRAMECOUNTNVPROC GLeeFuncPtr_glXResetFrameCountNV=GLee_Lazy_glXResetFrameCountNV;
+#endif
+#endif 
+
+/* GLX_NV_video_capture */
+
+#ifdef __GLEE_GLX_NV_video_capture
+#ifndef GLEE_C_DEFINED_glXBindVideoCaptureDeviceNV
+#define GLEE_C_DEFINED_glXBindVideoCaptureDeviceNV
+  int __stdcall GLee_Lazy_glXBindVideoCaptureDeviceNV(Display * dpy, unsigned int  video_capture_slot, GLXVideoCaptureDeviceNV  device)  {if (GLeeInit()) return glXBindVideoCaptureDeviceNV(dpy, video_capture_slot, device); return (int)0;}
+  GLEEPFNGLXBINDVIDEOCAPTUREDEVICENVPROC GLeeFuncPtr_glXBindVideoCaptureDeviceNV=GLee_Lazy_glXBindVideoCaptureDeviceNV;
+#endif
+#ifndef GLEE_C_DEFINED_glXEnumerateVideoCaptureDevicesNV
+#define GLEE_C_DEFINED_glXEnumerateVideoCaptureDevicesNV
+  GLXVideoCaptureDeviceNV * __stdcall GLee_Lazy_glXEnumerateVideoCaptureDevicesNV(Display * dpy, int  screen, int * nelements)  {if (GLeeInit()) return glXEnumerateVideoCaptureDevicesNV(dpy, screen, nelements); return (GLXVideoCaptureDeviceNV *)0;}
+  GLEEPFNGLXENUMERATEVIDEOCAPTUREDEVICESNVPROC GLeeFuncPtr_glXEnumerateVideoCaptureDevicesNV=GLee_Lazy_glXEnumerateVideoCaptureDevicesNV;
+#endif
+#ifndef GLEE_C_DEFINED_glXLockVideoCaptureDeviceNV
+#define GLEE_C_DEFINED_glXLockVideoCaptureDeviceNV
+  void __stdcall GLee_Lazy_glXLockVideoCaptureDeviceNV(Display * dpy, GLXVideoCaptureDeviceNV  device)  {if (GLeeInit()) glXLockVideoCaptureDeviceNV(dpy, device);}
+  GLEEPFNGLXLOCKVIDEOCAPTUREDEVICENVPROC GLeeFuncPtr_glXLockVideoCaptureDeviceNV=GLee_Lazy_glXLockVideoCaptureDeviceNV;
+#endif
+#ifndef GLEE_C_DEFINED_glXQueryVideoCaptureDeviceNV
+#define GLEE_C_DEFINED_glXQueryVideoCaptureDeviceNV
+  int __stdcall GLee_Lazy_glXQueryVideoCaptureDeviceNV(Display * dpy, GLXVideoCaptureDeviceNV  device, int  attribute, int * value)  {if (GLeeInit()) return glXQueryVideoCaptureDeviceNV(dpy, device, attribute, value); return (int)0;}
+  GLEEPFNGLXQUERYVIDEOCAPTUREDEVICENVPROC GLeeFuncPtr_glXQueryVideoCaptureDeviceNV=GLee_Lazy_glXQueryVideoCaptureDeviceNV;
+#endif
+#ifndef GLEE_C_DEFINED_glXReleaseVideoCaptureDeviceNV
+#define GLEE_C_DEFINED_glXReleaseVideoCaptureDeviceNV
+  void __stdcall GLee_Lazy_glXReleaseVideoCaptureDeviceNV(Display * dpy, GLXVideoCaptureDeviceNV  device)  {if (GLeeInit()) glXReleaseVideoCaptureDeviceNV(dpy, device);}
+  GLEEPFNGLXRELEASEVIDEOCAPTUREDEVICENVPROC GLeeFuncPtr_glXReleaseVideoCaptureDeviceNV=GLee_Lazy_glXReleaseVideoCaptureDeviceNV;
+#endif
+#endif 
+
+/* GLX_EXT_swap_control */
+
+#ifdef __GLEE_GLX_EXT_swap_control
+#ifndef GLEE_C_DEFINED_glXSwapIntervalEXT
+#define GLEE_C_DEFINED_glXSwapIntervalEXT
+  int __stdcall GLee_Lazy_glXSwapIntervalEXT(Display * dpy, GLXDrawable  drawable, int  interval)  {if (GLeeInit()) return glXSwapIntervalEXT(dpy, drawable, interval); return (int)0;}
+  GLEEPFNGLXSWAPINTERVALEXTPROC GLeeFuncPtr_glXSwapIntervalEXT=GLee_Lazy_glXSwapIntervalEXT;
+#endif
+#endif 
+
+/* GLX_NV_copy_image */
+
+#ifdef __GLEE_GLX_NV_copy_image
+#ifndef GLEE_C_DEFINED_glXCopyImageSubDataNV
+#define GLEE_C_DEFINED_glXCopyImageSubDataNV
+  void __stdcall GLee_Lazy_glXCopyImageSubDataNV(Display * dpy, GLXContext  srcCtx, GLuint  srcName, GLenum  srcTarget, GLint  srcLevel, GLint  srcX, GLint  srcY, GLint  srcZ, GLXContext  dstCtx, GLuint  dstName, GLenum  dstTarget, GLint  dstLevel, GLint  dstX, GLint  dstY, GLint  dstZ, GLsizei  width, GLsizei  height, GLsizei  depth)  {if (GLeeInit()) glXCopyImageSubDataNV(dpy, srcCtx, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstCtx, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth);}
+  GLEEPFNGLXCOPYIMAGESUBDATANVPROC GLeeFuncPtr_glXCopyImageSubDataNV=GLee_Lazy_glXCopyImageSubDataNV;
+#endif
+#endif 
+
+/* GLX_INTEL_swap_event */
+
+#ifdef __GLEE_GLX_INTEL_swap_event
+#endif 
+
+/* GLX_NV_multisample_coverage */
+
+#ifdef __GLEE_GLX_NV_multisample_coverage
+#endif 
+
+/* GLX_AMD_gpu_association */
+
+#ifdef __GLEE_GLX_AMD_gpu_association
+#endif 
+
+/* GLX_EXT_create_context_es2_profile */
+
+#ifdef __GLEE_GLX_EXT_create_context_es2_profile
+#endif 
+
+/* GLX_NV_video_output */
+
+#ifdef __GLEE_GLX_NV_video_output
+#ifndef GLEE_C_DEFINED_glXGetVideoDeviceNV
+#define GLEE_C_DEFINED_glXGetVideoDeviceNV
+  int __stdcall GLee_Lazy_glXGetVideoDeviceNV(Display * dpy, int  screen, int  numVideoDevices, GLXVideoDeviceNV * pVideoDevice)  {if (GLeeInit()) return glXGetVideoDeviceNV(dpy, screen, numVideoDevices, pVideoDevice); return (int)0;}
+  GLEEPFNGLXGETVIDEODEVICENVPROC GLeeFuncPtr_glXGetVideoDeviceNV=GLee_Lazy_glXGetVideoDeviceNV;
+#endif
+#ifndef GLEE_C_DEFINED_glXReleaseVideoDeviceNV
+#define GLEE_C_DEFINED_glXReleaseVideoDeviceNV
+  int __stdcall GLee_Lazy_glXReleaseVideoDeviceNV(Display * dpy, int  screen, GLXVideoDeviceNV  VideoDevice)  {if (GLeeInit()) return glXReleaseVideoDeviceNV(dpy, screen, VideoDevice); return (int)0;}
+  GLEEPFNGLXRELEASEVIDEODEVICENVPROC GLeeFuncPtr_glXReleaseVideoDeviceNV=GLee_Lazy_glXReleaseVideoDeviceNV;
+#endif
+#ifndef GLEE_C_DEFINED_glXBindVideoImageNV
+#define GLEE_C_DEFINED_glXBindVideoImageNV
+  int __stdcall GLee_Lazy_glXBindVideoImageNV(Display * dpy, GLXVideoDeviceNV  VideoDevice, GLXPbuffer  pbuf, int  iVideoBuffer)  {if (GLeeInit()) return glXBindVideoImageNV(dpy, VideoDevice, pbuf, iVideoBuffer); return (int)0;}
+  GLEEPFNGLXBINDVIDEOIMAGENVPROC GLeeFuncPtr_glXBindVideoImageNV=GLee_Lazy_glXBindVideoImageNV;
+#endif
+#ifndef GLEE_C_DEFINED_glXReleaseVideoImageNV
+#define GLEE_C_DEFINED_glXReleaseVideoImageNV
+  int __stdcall GLee_Lazy_glXReleaseVideoImageNV(Display * dpy, GLXPbuffer  pbuf)  {if (GLeeInit()) return glXReleaseVideoImageNV(dpy, pbuf); return (int)0;}
+  GLEEPFNGLXRELEASEVIDEOIMAGENVPROC GLeeFuncPtr_glXReleaseVideoImageNV=GLee_Lazy_glXReleaseVideoImageNV;
+#endif
+#ifndef GLEE_C_DEFINED_glXSendPbufferToVideoNV
+#define GLEE_C_DEFINED_glXSendPbufferToVideoNV
+  int __stdcall GLee_Lazy_glXSendPbufferToVideoNV(Display * dpy, GLXPbuffer  pbuf, int  iBufferType, unsigned long * pulCounterPbuffer, GLboolean  bBlock)  {if (GLeeInit()) return glXSendPbufferToVideoNV(dpy, pbuf, iBufferType, pulCounterPbuffer, bBlock); return (int)0;}
+  GLEEPFNGLXSENDPBUFFERTOVIDEONVPROC GLeeFuncPtr_glXSendPbufferToVideoNV=GLee_Lazy_glXSendPbufferToVideoNV;
+#endif
+#ifndef GLEE_C_DEFINED_glXGetVideoInfoNV
+#define GLEE_C_DEFINED_glXGetVideoInfoNV
+  int __stdcall GLee_Lazy_glXGetVideoInfoNV(Display * dpy, int  screen, GLXVideoDeviceNV  VideoDevice, unsigned long * pulCounterOutputPbuffer, unsigned long * pulCounterOutputVideo)  {if (GLeeInit()) return glXGetVideoInfoNV(dpy, screen, VideoDevice, pulCounterOutputPbuffer, pulCounterOutputVideo); return (int)0;}
+  GLEEPFNGLXGETVIDEOINFONVPROC GLeeFuncPtr_glXGetVideoInfoNV=GLee_Lazy_glXGetVideoInfoNV;
+#endif
+#endif 
+
+/* GLX_EXT_scene_marker */
+
+#ifdef __GLEE_GLX_EXT_scene_marker
+#endif 
+#endif /* end GLX */
+/*****************************************************************
+* Extension link functions
+*****************************************************************/
+
+GLuint __GLeeLink_GL_VERSION_1_2(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_VERSION_1_2
+    if ((GLeeFuncPtr_glBlendColor = (GLEEPFNGLBLENDCOLORPROC) __GLeeGetProcAddress("glBlendColor"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glBlendEquation = (GLEEPFNGLBLENDEQUATIONPROC) __GLeeGetProcAddress("glBlendEquation"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glDrawRangeElements = (GLEEPFNGLDRAWRANGEELEMENTSPROC) __GLeeGetProcAddress("glDrawRangeElements"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glTexImage3D = (GLEEPFNGLTEXIMAGE3DPROC) __GLeeGetProcAddress("glTexImage3D"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glTexSubImage3D = (GLEEPFNGLTEXSUBIMAGE3DPROC) __GLeeGetProcAddress("glTexSubImage3D"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glCopyTexSubImage3D = (GLEEPFNGLCOPYTEXSUBIMAGE3DPROC) __GLeeGetProcAddress("glCopyTexSubImage3D"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glColorTable = (GLEEPFNGLCOLORTABLEPROC) __GLeeGetProcAddress("glColorTable"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glColorTableParameterfv = (GLEEPFNGLCOLORTABLEPARAMETERFVPROC) __GLeeGetProcAddress("glColorTableParameterfv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glColorTableParameteriv = (GLEEPFNGLCOLORTABLEPARAMETERIVPROC) __GLeeGetProcAddress("glColorTableParameteriv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glCopyColorTable = (GLEEPFNGLCOPYCOLORTABLEPROC) __GLeeGetProcAddress("glCopyColorTable"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetColorTable = (GLEEPFNGLGETCOLORTABLEPROC) __GLeeGetProcAddress("glGetColorTable"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetColorTableParameterfv = (GLEEPFNGLGETCOLORTABLEPARAMETERFVPROC) __GLeeGetProcAddress("glGetColorTableParameterfv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetColorTableParameteriv = (GLEEPFNGLGETCOLORTABLEPARAMETERIVPROC) __GLeeGetProcAddress("glGetColorTableParameteriv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glColorSubTable = (GLEEPFNGLCOLORSUBTABLEPROC) __GLeeGetProcAddress("glColorSubTable"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glCopyColorSubTable = (GLEEPFNGLCOPYCOLORSUBTABLEPROC) __GLeeGetProcAddress("glCopyColorSubTable"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glConvolutionFilter1D = (GLEEPFNGLCONVOLUTIONFILTER1DPROC) __GLeeGetProcAddress("glConvolutionFilter1D"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glConvolutionFilter2D = (GLEEPFNGLCONVOLUTIONFILTER2DPROC) __GLeeGetProcAddress("glConvolutionFilter2D"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glConvolutionParameterf = (GLEEPFNGLCONVOLUTIONPARAMETERFPROC) __GLeeGetProcAddress("glConvolutionParameterf"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glConvolutionParameterfv = (GLEEPFNGLCONVOLUTIONPARAMETERFVPROC) __GLeeGetProcAddress("glConvolutionParameterfv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glConvolutionParameteri = (GLEEPFNGLCONVOLUTIONPARAMETERIPROC) __GLeeGetProcAddress("glConvolutionParameteri"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glConvolutionParameteriv = (GLEEPFNGLCONVOLUTIONPARAMETERIVPROC) __GLeeGetProcAddress("glConvolutionParameteriv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glCopyConvolutionFilter1D = (GLEEPFNGLCOPYCONVOLUTIONFILTER1DPROC) __GLeeGetProcAddress("glCopyConvolutionFilter1D"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glCopyConvolutionFilter2D = (GLEEPFNGLCOPYCONVOLUTIONFILTER2DPROC) __GLeeGetProcAddress("glCopyConvolutionFilter2D"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetConvolutionFilter = (GLEEPFNGLGETCONVOLUTIONFILTERPROC) __GLeeGetProcAddress("glGetConvolutionFilter"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetConvolutionParameterfv = (GLEEPFNGLGETCONVOLUTIONPARAMETERFVPROC) __GLeeGetProcAddress("glGetConvolutionParameterfv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetConvolutionParameteriv = (GLEEPFNGLGETCONVOLUTIONPARAMETERIVPROC) __GLeeGetProcAddress("glGetConvolutionParameteriv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetSeparableFilter = (GLEEPFNGLGETSEPARABLEFILTERPROC) __GLeeGetProcAddress("glGetSeparableFilter"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glSeparableFilter2D = (GLEEPFNGLSEPARABLEFILTER2DPROC) __GLeeGetProcAddress("glSeparableFilter2D"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetHistogram = (GLEEPFNGLGETHISTOGRAMPROC) __GLeeGetProcAddress("glGetHistogram"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetHistogramParameterfv = (GLEEPFNGLGETHISTOGRAMPARAMETERFVPROC) __GLeeGetProcAddress("glGetHistogramParameterfv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetHistogramParameteriv = (GLEEPFNGLGETHISTOGRAMPARAMETERIVPROC) __GLeeGetProcAddress("glGetHistogramParameteriv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetMinmax = (GLEEPFNGLGETMINMAXPROC) __GLeeGetProcAddress("glGetMinmax"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetMinmaxParameterfv = (GLEEPFNGLGETMINMAXPARAMETERFVPROC) __GLeeGetProcAddress("glGetMinmaxParameterfv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetMinmaxParameteriv = (GLEEPFNGLGETMINMAXPARAMETERIVPROC) __GLeeGetProcAddress("glGetMinmaxParameteriv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glHistogram = (GLEEPFNGLHISTOGRAMPROC) __GLeeGetProcAddress("glHistogram"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMinmax = (GLEEPFNGLMINMAXPROC) __GLeeGetProcAddress("glMinmax"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glResetHistogram = (GLEEPFNGLRESETHISTOGRAMPROC) __GLeeGetProcAddress("glResetHistogram"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glResetMinmax = (GLEEPFNGLRESETMINMAXPROC) __GLeeGetProcAddress("glResetMinmax"))!=0) nLinked++;
+#endif
+    if (nLinked==38) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_ARB_imaging(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_VERSION_1_3(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_VERSION_1_3
+    if ((GLeeFuncPtr_glActiveTexture = (GLEEPFNGLACTIVETEXTUREPROC) __GLeeGetProcAddress("glActiveTexture"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glSampleCoverage = (GLEEPFNGLSAMPLECOVERAGEPROC) __GLeeGetProcAddress("glSampleCoverage"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glCompressedTexImage3D = (GLEEPFNGLCOMPRESSEDTEXIMAGE3DPROC) __GLeeGetProcAddress("glCompressedTexImage3D"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glCompressedTexImage2D = (GLEEPFNGLCOMPRESSEDTEXIMAGE2DPROC) __GLeeGetProcAddress("glCompressedTexImage2D"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glCompressedTexImage1D = (GLEEPFNGLCOMPRESSEDTEXIMAGE1DPROC) __GLeeGetProcAddress("glCompressedTexImage1D"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glCompressedTexSubImage3D = (GLEEPFNGLCOMPRESSEDTEXSUBIMAGE3DPROC) __GLeeGetProcAddress("glCompressedTexSubImage3D"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glCompressedTexSubImage2D = (GLEEPFNGLCOMPRESSEDTEXSUBIMAGE2DPROC) __GLeeGetProcAddress("glCompressedTexSubImage2D"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glCompressedTexSubImage1D = (GLEEPFNGLCOMPRESSEDTEXSUBIMAGE1DPROC) __GLeeGetProcAddress("glCompressedTexSubImage1D"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetCompressedTexImage = (GLEEPFNGLGETCOMPRESSEDTEXIMAGEPROC) __GLeeGetProcAddress("glGetCompressedTexImage"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glClientActiveTexture = (GLEEPFNGLCLIENTACTIVETEXTUREPROC) __GLeeGetProcAddress("glClientActiveTexture"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMultiTexCoord1d = (GLEEPFNGLMULTITEXCOORD1DPROC) __GLeeGetProcAddress("glMultiTexCoord1d"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMultiTexCoord1dv = (GLEEPFNGLMULTITEXCOORD1DVPROC) __GLeeGetProcAddress("glMultiTexCoord1dv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMultiTexCoord1f = (GLEEPFNGLMULTITEXCOORD1FPROC) __GLeeGetProcAddress("glMultiTexCoord1f"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMultiTexCoord1fv = (GLEEPFNGLMULTITEXCOORD1FVPROC) __GLeeGetProcAddress("glMultiTexCoord1fv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMultiTexCoord1i = (GLEEPFNGLMULTITEXCOORD1IPROC) __GLeeGetProcAddress("glMultiTexCoord1i"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMultiTexCoord1iv = (GLEEPFNGLMULTITEXCOORD1IVPROC) __GLeeGetProcAddress("glMultiTexCoord1iv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMultiTexCoord1s = (GLEEPFNGLMULTITEXCOORD1SPROC) __GLeeGetProcAddress("glMultiTexCoord1s"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMultiTexCoord1sv = (GLEEPFNGLMULTITEXCOORD1SVPROC) __GLeeGetProcAddress("glMultiTexCoord1sv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMultiTexCoord2d = (GLEEPFNGLMULTITEXCOORD2DPROC) __GLeeGetProcAddress("glMultiTexCoord2d"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMultiTexCoord2dv = (GLEEPFNGLMULTITEXCOORD2DVPROC) __GLeeGetProcAddress("glMultiTexCoord2dv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMultiTexCoord2f = (GLEEPFNGLMULTITEXCOORD2FPROC) __GLeeGetProcAddress("glMultiTexCoord2f"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMultiTexCoord2fv = (GLEEPFNGLMULTITEXCOORD2FVPROC) __GLeeGetProcAddress("glMultiTexCoord2fv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMultiTexCoord2i = (GLEEPFNGLMULTITEXCOORD2IPROC) __GLeeGetProcAddress("glMultiTexCoord2i"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMultiTexCoord2iv = (GLEEPFNGLMULTITEXCOORD2IVPROC) __GLeeGetProcAddress("glMultiTexCoord2iv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMultiTexCoord2s = (GLEEPFNGLMULTITEXCOORD2SPROC) __GLeeGetProcAddress("glMultiTexCoord2s"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMultiTexCoord2sv = (GLEEPFNGLMULTITEXCOORD2SVPROC) __GLeeGetProcAddress("glMultiTexCoord2sv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMultiTexCoord3d = (GLEEPFNGLMULTITEXCOORD3DPROC) __GLeeGetProcAddress("glMultiTexCoord3d"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMultiTexCoord3dv = (GLEEPFNGLMULTITEXCOORD3DVPROC) __GLeeGetProcAddress("glMultiTexCoord3dv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMultiTexCoord3f = (GLEEPFNGLMULTITEXCOORD3FPROC) __GLeeGetProcAddress("glMultiTexCoord3f"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMultiTexCoord3fv = (GLEEPFNGLMULTITEXCOORD3FVPROC) __GLeeGetProcAddress("glMultiTexCoord3fv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMultiTexCoord3i = (GLEEPFNGLMULTITEXCOORD3IPROC) __GLeeGetProcAddress("glMultiTexCoord3i"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMultiTexCoord3iv = (GLEEPFNGLMULTITEXCOORD3IVPROC) __GLeeGetProcAddress("glMultiTexCoord3iv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMultiTexCoord3s = (GLEEPFNGLMULTITEXCOORD3SPROC) __GLeeGetProcAddress("glMultiTexCoord3s"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMultiTexCoord3sv = (GLEEPFNGLMULTITEXCOORD3SVPROC) __GLeeGetProcAddress("glMultiTexCoord3sv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMultiTexCoord4d = (GLEEPFNGLMULTITEXCOORD4DPROC) __GLeeGetProcAddress("glMultiTexCoord4d"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMultiTexCoord4dv = (GLEEPFNGLMULTITEXCOORD4DVPROC) __GLeeGetProcAddress("glMultiTexCoord4dv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMultiTexCoord4f = (GLEEPFNGLMULTITEXCOORD4FPROC) __GLeeGetProcAddress("glMultiTexCoord4f"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMultiTexCoord4fv = (GLEEPFNGLMULTITEXCOORD4FVPROC) __GLeeGetProcAddress("glMultiTexCoord4fv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMultiTexCoord4i = (GLEEPFNGLMULTITEXCOORD4IPROC) __GLeeGetProcAddress("glMultiTexCoord4i"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMultiTexCoord4iv = (GLEEPFNGLMULTITEXCOORD4IVPROC) __GLeeGetProcAddress("glMultiTexCoord4iv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMultiTexCoord4s = (GLEEPFNGLMULTITEXCOORD4SPROC) __GLeeGetProcAddress("glMultiTexCoord4s"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMultiTexCoord4sv = (GLEEPFNGLMULTITEXCOORD4SVPROC) __GLeeGetProcAddress("glMultiTexCoord4sv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glLoadTransposeMatrixf = (GLEEPFNGLLOADTRANSPOSEMATRIXFPROC) __GLeeGetProcAddress("glLoadTransposeMatrixf"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glLoadTransposeMatrixd = (GLEEPFNGLLOADTRANSPOSEMATRIXDPROC) __GLeeGetProcAddress("glLoadTransposeMatrixd"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMultTransposeMatrixf = (GLEEPFNGLMULTTRANSPOSEMATRIXFPROC) __GLeeGetProcAddress("glMultTransposeMatrixf"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMultTransposeMatrixd = (GLEEPFNGLMULTTRANSPOSEMATRIXDPROC) __GLeeGetProcAddress("glMultTransposeMatrixd"))!=0) nLinked++;
+#endif
+    if (nLinked==46) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_VERSION_1_4(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_VERSION_1_4
+    if ((GLeeFuncPtr_glBlendFuncSeparate = (GLEEPFNGLBLENDFUNCSEPARATEPROC) __GLeeGetProcAddress("glBlendFuncSeparate"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMultiDrawArrays = (GLEEPFNGLMULTIDRAWARRAYSPROC) __GLeeGetProcAddress("glMultiDrawArrays"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMultiDrawElements = (GLEEPFNGLMULTIDRAWELEMENTSPROC) __GLeeGetProcAddress("glMultiDrawElements"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glPointParameterf = (GLEEPFNGLPOINTPARAMETERFPROC) __GLeeGetProcAddress("glPointParameterf"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glPointParameterfv = (GLEEPFNGLPOINTPARAMETERFVPROC) __GLeeGetProcAddress("glPointParameterfv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glPointParameteri = (GLEEPFNGLPOINTPARAMETERIPROC) __GLeeGetProcAddress("glPointParameteri"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glPointParameteriv = (GLEEPFNGLPOINTPARAMETERIVPROC) __GLeeGetProcAddress("glPointParameteriv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glFogCoordf = (GLEEPFNGLFOGCOORDFPROC) __GLeeGetProcAddress("glFogCoordf"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glFogCoordfv = (GLEEPFNGLFOGCOORDFVPROC) __GLeeGetProcAddress("glFogCoordfv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glFogCoordd = (GLEEPFNGLFOGCOORDDPROC) __GLeeGetProcAddress("glFogCoordd"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glFogCoorddv = (GLEEPFNGLFOGCOORDDVPROC) __GLeeGetProcAddress("glFogCoorddv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glFogCoordPointer = (GLEEPFNGLFOGCOORDPOINTERPROC) __GLeeGetProcAddress("glFogCoordPointer"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glSecondaryColor3b = (GLEEPFNGLSECONDARYCOLOR3BPROC) __GLeeGetProcAddress("glSecondaryColor3b"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glSecondaryColor3bv = (GLEEPFNGLSECONDARYCOLOR3BVPROC) __GLeeGetProcAddress("glSecondaryColor3bv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glSecondaryColor3d = (GLEEPFNGLSECONDARYCOLOR3DPROC) __GLeeGetProcAddress("glSecondaryColor3d"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glSecondaryColor3dv = (GLEEPFNGLSECONDARYCOLOR3DVPROC) __GLeeGetProcAddress("glSecondaryColor3dv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glSecondaryColor3f = (GLEEPFNGLSECONDARYCOLOR3FPROC) __GLeeGetProcAddress("glSecondaryColor3f"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glSecondaryColor3fv = (GLEEPFNGLSECONDARYCOLOR3FVPROC) __GLeeGetProcAddress("glSecondaryColor3fv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glSecondaryColor3i = (GLEEPFNGLSECONDARYCOLOR3IPROC) __GLeeGetProcAddress("glSecondaryColor3i"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glSecondaryColor3iv = (GLEEPFNGLSECONDARYCOLOR3IVPROC) __GLeeGetProcAddress("glSecondaryColor3iv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glSecondaryColor3s = (GLEEPFNGLSECONDARYCOLOR3SPROC) __GLeeGetProcAddress("glSecondaryColor3s"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glSecondaryColor3sv = (GLEEPFNGLSECONDARYCOLOR3SVPROC) __GLeeGetProcAddress("glSecondaryColor3sv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glSecondaryColor3ub = (GLEEPFNGLSECONDARYCOLOR3UBPROC) __GLeeGetProcAddress("glSecondaryColor3ub"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glSecondaryColor3ubv = (GLEEPFNGLSECONDARYCOLOR3UBVPROC) __GLeeGetProcAddress("glSecondaryColor3ubv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glSecondaryColor3ui = (GLEEPFNGLSECONDARYCOLOR3UIPROC) __GLeeGetProcAddress("glSecondaryColor3ui"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glSecondaryColor3uiv = (GLEEPFNGLSECONDARYCOLOR3UIVPROC) __GLeeGetProcAddress("glSecondaryColor3uiv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glSecondaryColor3us = (GLEEPFNGLSECONDARYCOLOR3USPROC) __GLeeGetProcAddress("glSecondaryColor3us"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glSecondaryColor3usv = (GLEEPFNGLSECONDARYCOLOR3USVPROC) __GLeeGetProcAddress("glSecondaryColor3usv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glSecondaryColorPointer = (GLEEPFNGLSECONDARYCOLORPOINTERPROC) __GLeeGetProcAddress("glSecondaryColorPointer"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glWindowPos2d = (GLEEPFNGLWINDOWPOS2DPROC) __GLeeGetProcAddress("glWindowPos2d"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glWindowPos2dv = (GLEEPFNGLWINDOWPOS2DVPROC) __GLeeGetProcAddress("glWindowPos2dv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glWindowPos2f = (GLEEPFNGLWINDOWPOS2FPROC) __GLeeGetProcAddress("glWindowPos2f"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glWindowPos2fv = (GLEEPFNGLWINDOWPOS2FVPROC) __GLeeGetProcAddress("glWindowPos2fv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glWindowPos2i = (GLEEPFNGLWINDOWPOS2IPROC) __GLeeGetProcAddress("glWindowPos2i"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glWindowPos2iv = (GLEEPFNGLWINDOWPOS2IVPROC) __GLeeGetProcAddress("glWindowPos2iv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glWindowPos2s = (GLEEPFNGLWINDOWPOS2SPROC) __GLeeGetProcAddress("glWindowPos2s"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glWindowPos2sv = (GLEEPFNGLWINDOWPOS2SVPROC) __GLeeGetProcAddress("glWindowPos2sv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glWindowPos3d = (GLEEPFNGLWINDOWPOS3DPROC) __GLeeGetProcAddress("glWindowPos3d"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glWindowPos3dv = (GLEEPFNGLWINDOWPOS3DVPROC) __GLeeGetProcAddress("glWindowPos3dv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glWindowPos3f = (GLEEPFNGLWINDOWPOS3FPROC) __GLeeGetProcAddress("glWindowPos3f"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glWindowPos3fv = (GLEEPFNGLWINDOWPOS3FVPROC) __GLeeGetProcAddress("glWindowPos3fv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glWindowPos3i = (GLEEPFNGLWINDOWPOS3IPROC) __GLeeGetProcAddress("glWindowPos3i"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glWindowPos3iv = (GLEEPFNGLWINDOWPOS3IVPROC) __GLeeGetProcAddress("glWindowPos3iv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glWindowPos3s = (GLEEPFNGLWINDOWPOS3SPROC) __GLeeGetProcAddress("glWindowPos3s"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glWindowPos3sv = (GLEEPFNGLWINDOWPOS3SVPROC) __GLeeGetProcAddress("glWindowPos3sv"))!=0) nLinked++;
+#endif
+    if (nLinked==45) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_VERSION_1_5(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_VERSION_1_5
+    if ((GLeeFuncPtr_glGenQueries = (GLEEPFNGLGENQUERIESPROC) __GLeeGetProcAddress("glGenQueries"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glDeleteQueries = (GLEEPFNGLDELETEQUERIESPROC) __GLeeGetProcAddress("glDeleteQueries"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glIsQuery = (GLEEPFNGLISQUERYPROC) __GLeeGetProcAddress("glIsQuery"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glBeginQuery = (GLEEPFNGLBEGINQUERYPROC) __GLeeGetProcAddress("glBeginQuery"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glEndQuery = (GLEEPFNGLENDQUERYPROC) __GLeeGetProcAddress("glEndQuery"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetQueryiv = (GLEEPFNGLGETQUERYIVPROC) __GLeeGetProcAddress("glGetQueryiv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetQueryObjectiv = (GLEEPFNGLGETQUERYOBJECTIVPROC) __GLeeGetProcAddress("glGetQueryObjectiv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetQueryObjectuiv = (GLEEPFNGLGETQUERYOBJECTUIVPROC) __GLeeGetProcAddress("glGetQueryObjectuiv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glBindBuffer = (GLEEPFNGLBINDBUFFERPROC) __GLeeGetProcAddress("glBindBuffer"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glDeleteBuffers = (GLEEPFNGLDELETEBUFFERSPROC) __GLeeGetProcAddress("glDeleteBuffers"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGenBuffers = (GLEEPFNGLGENBUFFERSPROC) __GLeeGetProcAddress("glGenBuffers"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glIsBuffer = (GLEEPFNGLISBUFFERPROC) __GLeeGetProcAddress("glIsBuffer"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glBufferData = (GLEEPFNGLBUFFERDATAPROC) __GLeeGetProcAddress("glBufferData"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glBufferSubData = (GLEEPFNGLBUFFERSUBDATAPROC) __GLeeGetProcAddress("glBufferSubData"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetBufferSubData = (GLEEPFNGLGETBUFFERSUBDATAPROC) __GLeeGetProcAddress("glGetBufferSubData"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMapBuffer = (GLEEPFNGLMAPBUFFERPROC) __GLeeGetProcAddress("glMapBuffer"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glUnmapBuffer = (GLEEPFNGLUNMAPBUFFERPROC) __GLeeGetProcAddress("glUnmapBuffer"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetBufferParameteriv = (GLEEPFNGLGETBUFFERPARAMETERIVPROC) __GLeeGetProcAddress("glGetBufferParameteriv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetBufferPointerv = (GLEEPFNGLGETBUFFERPOINTERVPROC) __GLeeGetProcAddress("glGetBufferPointerv"))!=0) nLinked++;
+#endif
+    if (nLinked==19) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_VERSION_2_0(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_VERSION_2_0
+    if ((GLeeFuncPtr_glBlendEquationSeparate = (GLEEPFNGLBLENDEQUATIONSEPARATEPROC) __GLeeGetProcAddress("glBlendEquationSeparate"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glDrawBuffers = (GLEEPFNGLDRAWBUFFERSPROC) __GLeeGetProcAddress("glDrawBuffers"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glStencilOpSeparate = (GLEEPFNGLSTENCILOPSEPARATEPROC) __GLeeGetProcAddress("glStencilOpSeparate"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glStencilFuncSeparate = (GLEEPFNGLSTENCILFUNCSEPARATEPROC) __GLeeGetProcAddress("glStencilFuncSeparate"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glStencilMaskSeparate = (GLEEPFNGLSTENCILMASKSEPARATEPROC) __GLeeGetProcAddress("glStencilMaskSeparate"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glAttachShader = (GLEEPFNGLATTACHSHADERPROC) __GLeeGetProcAddress("glAttachShader"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glBindAttribLocation = (GLEEPFNGLBINDATTRIBLOCATIONPROC) __GLeeGetProcAddress("glBindAttribLocation"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glCompileShader = (GLEEPFNGLCOMPILESHADERPROC) __GLeeGetProcAddress("glCompileShader"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glCreateProgram = (GLEEPFNGLCREATEPROGRAMPROC) __GLeeGetProcAddress("glCreateProgram"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glCreateShader = (GLEEPFNGLCREATESHADERPROC) __GLeeGetProcAddress("glCreateShader"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glDeleteProgram = (GLEEPFNGLDELETEPROGRAMPROC) __GLeeGetProcAddress("glDeleteProgram"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glDeleteShader = (GLEEPFNGLDELETESHADERPROC) __GLeeGetProcAddress("glDeleteShader"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glDetachShader = (GLEEPFNGLDETACHSHADERPROC) __GLeeGetProcAddress("glDetachShader"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glDisableVertexAttribArray = (GLEEPFNGLDISABLEVERTEXATTRIBARRAYPROC) __GLeeGetProcAddress("glDisableVertexAttribArray"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glEnableVertexAttribArray = (GLEEPFNGLENABLEVERTEXATTRIBARRAYPROC) __GLeeGetProcAddress("glEnableVertexAttribArray"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetActiveAttrib = (GLEEPFNGLGETACTIVEATTRIBPROC) __GLeeGetProcAddress("glGetActiveAttrib"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetActiveUniform = (GLEEPFNGLGETACTIVEUNIFORMPROC) __GLeeGetProcAddress("glGetActiveUniform"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetAttachedShaders = (GLEEPFNGLGETATTACHEDSHADERSPROC) __GLeeGetProcAddress("glGetAttachedShaders"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetAttribLocation = (GLEEPFNGLGETATTRIBLOCATIONPROC) __GLeeGetProcAddress("glGetAttribLocation"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetProgramiv = (GLEEPFNGLGETPROGRAMIVPROC) __GLeeGetProcAddress("glGetProgramiv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetProgramInfoLog = (GLEEPFNGLGETPROGRAMINFOLOGPROC) __GLeeGetProcAddress("glGetProgramInfoLog"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetShaderiv = (GLEEPFNGLGETSHADERIVPROC) __GLeeGetProcAddress("glGetShaderiv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetShaderInfoLog = (GLEEPFNGLGETSHADERINFOLOGPROC) __GLeeGetProcAddress("glGetShaderInfoLog"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetShaderSource = (GLEEPFNGLGETSHADERSOURCEPROC) __GLeeGetProcAddress("glGetShaderSource"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetUniformLocation = (GLEEPFNGLGETUNIFORMLOCATIONPROC) __GLeeGetProcAddress("glGetUniformLocation"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetUniformfv = (GLEEPFNGLGETUNIFORMFVPROC) __GLeeGetProcAddress("glGetUniformfv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetUniformiv = (GLEEPFNGLGETUNIFORMIVPROC) __GLeeGetProcAddress("glGetUniformiv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetVertexAttribdv = (GLEEPFNGLGETVERTEXATTRIBDVPROC) __GLeeGetProcAddress("glGetVertexAttribdv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetVertexAttribfv = (GLEEPFNGLGETVERTEXATTRIBFVPROC) __GLeeGetProcAddress("glGetVertexAttribfv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetVertexAttribiv = (GLEEPFNGLGETVERTEXATTRIBIVPROC) __GLeeGetProcAddress("glGetVertexAttribiv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetVertexAttribPointerv = (GLEEPFNGLGETVERTEXATTRIBPOINTERVPROC) __GLeeGetProcAddress("glGetVertexAttribPointerv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glIsProgram = (GLEEPFNGLISPROGRAMPROC) __GLeeGetProcAddress("glIsProgram"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glIsShader = (GLEEPFNGLISSHADERPROC) __GLeeGetProcAddress("glIsShader"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glLinkProgram = (GLEEPFNGLLINKPROGRAMPROC) __GLeeGetProcAddress("glLinkProgram"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glShaderSource = (GLEEPFNGLSHADERSOURCEPROC) __GLeeGetProcAddress("glShaderSource"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glUseProgram = (GLEEPFNGLUSEPROGRAMPROC) __GLeeGetProcAddress("glUseProgram"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glUniform1f = (GLEEPFNGLUNIFORM1FPROC) __GLeeGetProcAddress("glUniform1f"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glUniform2f = (GLEEPFNGLUNIFORM2FPROC) __GLeeGetProcAddress("glUniform2f"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glUniform3f = (GLEEPFNGLUNIFORM3FPROC) __GLeeGetProcAddress("glUniform3f"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glUniform4f = (GLEEPFNGLUNIFORM4FPROC) __GLeeGetProcAddress("glUniform4f"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glUniform1i = (GLEEPFNGLUNIFORM1IPROC) __GLeeGetProcAddress("glUniform1i"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glUniform2i = (GLEEPFNGLUNIFORM2IPROC) __GLeeGetProcAddress("glUniform2i"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glUniform3i = (GLEEPFNGLUNIFORM3IPROC) __GLeeGetProcAddress("glUniform3i"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glUniform4i = (GLEEPFNGLUNIFORM4IPROC) __GLeeGetProcAddress("glUniform4i"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glUniform1fv = (GLEEPFNGLUNIFORM1FVPROC) __GLeeGetProcAddress("glUniform1fv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glUniform2fv = (GLEEPFNGLUNIFORM2FVPROC) __GLeeGetProcAddress("glUniform2fv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glUniform3fv = (GLEEPFNGLUNIFORM3FVPROC) __GLeeGetProcAddress("glUniform3fv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glUniform4fv = (GLEEPFNGLUNIFORM4FVPROC) __GLeeGetProcAddress("glUniform4fv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glUniform1iv = (GLEEPFNGLUNIFORM1IVPROC) __GLeeGetProcAddress("glUniform1iv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glUniform2iv = (GLEEPFNGLUNIFORM2IVPROC) __GLeeGetProcAddress("glUniform2iv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glUniform3iv = (GLEEPFNGLUNIFORM3IVPROC) __GLeeGetProcAddress("glUniform3iv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glUniform4iv = (GLEEPFNGLUNIFORM4IVPROC) __GLeeGetProcAddress("glUniform4iv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glUniformMatrix2fv = (GLEEPFNGLUNIFORMMATRIX2FVPROC) __GLeeGetProcAddress("glUniformMatrix2fv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glUniformMatrix3fv = (GLEEPFNGLUNIFORMMATRIX3FVPROC) __GLeeGetProcAddress("glUniformMatrix3fv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glUniformMatrix4fv = (GLEEPFNGLUNIFORMMATRIX4FVPROC) __GLeeGetProcAddress("glUniformMatrix4fv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glValidateProgram = (GLEEPFNGLVALIDATEPROGRAMPROC) __GLeeGetProcAddress("glValidateProgram"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttrib1d = (GLEEPFNGLVERTEXATTRIB1DPROC) __GLeeGetProcAddress("glVertexAttrib1d"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttrib1dv = (GLEEPFNGLVERTEXATTRIB1DVPROC) __GLeeGetProcAddress("glVertexAttrib1dv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttrib1f = (GLEEPFNGLVERTEXATTRIB1FPROC) __GLeeGetProcAddress("glVertexAttrib1f"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttrib1fv = (GLEEPFNGLVERTEXATTRIB1FVPROC) __GLeeGetProcAddress("glVertexAttrib1fv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttrib1s = (GLEEPFNGLVERTEXATTRIB1SPROC) __GLeeGetProcAddress("glVertexAttrib1s"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttrib1sv = (GLEEPFNGLVERTEXATTRIB1SVPROC) __GLeeGetProcAddress("glVertexAttrib1sv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttrib2d = (GLEEPFNGLVERTEXATTRIB2DPROC) __GLeeGetProcAddress("glVertexAttrib2d"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttrib2dv = (GLEEPFNGLVERTEXATTRIB2DVPROC) __GLeeGetProcAddress("glVertexAttrib2dv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttrib2f = (GLEEPFNGLVERTEXATTRIB2FPROC) __GLeeGetProcAddress("glVertexAttrib2f"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttrib2fv = (GLEEPFNGLVERTEXATTRIB2FVPROC) __GLeeGetProcAddress("glVertexAttrib2fv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttrib2s = (GLEEPFNGLVERTEXATTRIB2SPROC) __GLeeGetProcAddress("glVertexAttrib2s"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttrib2sv = (GLEEPFNGLVERTEXATTRIB2SVPROC) __GLeeGetProcAddress("glVertexAttrib2sv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttrib3d = (GLEEPFNGLVERTEXATTRIB3DPROC) __GLeeGetProcAddress("glVertexAttrib3d"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttrib3dv = (GLEEPFNGLVERTEXATTRIB3DVPROC) __GLeeGetProcAddress("glVertexAttrib3dv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttrib3f = (GLEEPFNGLVERTEXATTRIB3FPROC) __GLeeGetProcAddress("glVertexAttrib3f"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttrib3fv = (GLEEPFNGLVERTEXATTRIB3FVPROC) __GLeeGetProcAddress("glVertexAttrib3fv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttrib3s = (GLEEPFNGLVERTEXATTRIB3SPROC) __GLeeGetProcAddress("glVertexAttrib3s"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttrib3sv = (GLEEPFNGLVERTEXATTRIB3SVPROC) __GLeeGetProcAddress("glVertexAttrib3sv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttrib4Nbv = (GLEEPFNGLVERTEXATTRIB4NBVPROC) __GLeeGetProcAddress("glVertexAttrib4Nbv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttrib4Niv = (GLEEPFNGLVERTEXATTRIB4NIVPROC) __GLeeGetProcAddress("glVertexAttrib4Niv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttrib4Nsv = (GLEEPFNGLVERTEXATTRIB4NSVPROC) __GLeeGetProcAddress("glVertexAttrib4Nsv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttrib4Nub = (GLEEPFNGLVERTEXATTRIB4NUBPROC) __GLeeGetProcAddress("glVertexAttrib4Nub"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttrib4Nubv = (GLEEPFNGLVERTEXATTRIB4NUBVPROC) __GLeeGetProcAddress("glVertexAttrib4Nubv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttrib4Nuiv = (GLEEPFNGLVERTEXATTRIB4NUIVPROC) __GLeeGetProcAddress("glVertexAttrib4Nuiv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttrib4Nusv = (GLEEPFNGLVERTEXATTRIB4NUSVPROC) __GLeeGetProcAddress("glVertexAttrib4Nusv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttrib4bv = (GLEEPFNGLVERTEXATTRIB4BVPROC) __GLeeGetProcAddress("glVertexAttrib4bv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttrib4d = (GLEEPFNGLVERTEXATTRIB4DPROC) __GLeeGetProcAddress("glVertexAttrib4d"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttrib4dv = (GLEEPFNGLVERTEXATTRIB4DVPROC) __GLeeGetProcAddress("glVertexAttrib4dv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttrib4f = (GLEEPFNGLVERTEXATTRIB4FPROC) __GLeeGetProcAddress("glVertexAttrib4f"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttrib4fv = (GLEEPFNGLVERTEXATTRIB4FVPROC) __GLeeGetProcAddress("glVertexAttrib4fv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttrib4iv = (GLEEPFNGLVERTEXATTRIB4IVPROC) __GLeeGetProcAddress("glVertexAttrib4iv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttrib4s = (GLEEPFNGLVERTEXATTRIB4SPROC) __GLeeGetProcAddress("glVertexAttrib4s"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttrib4sv = (GLEEPFNGLVERTEXATTRIB4SVPROC) __GLeeGetProcAddress("glVertexAttrib4sv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttrib4ubv = (GLEEPFNGLVERTEXATTRIB4UBVPROC) __GLeeGetProcAddress("glVertexAttrib4ubv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttrib4uiv = (GLEEPFNGLVERTEXATTRIB4UIVPROC) __GLeeGetProcAddress("glVertexAttrib4uiv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttrib4usv = (GLEEPFNGLVERTEXATTRIB4USVPROC) __GLeeGetProcAddress("glVertexAttrib4usv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttribPointer = (GLEEPFNGLVERTEXATTRIBPOINTERPROC) __GLeeGetProcAddress("glVertexAttribPointer"))!=0) nLinked++;
+#endif
+    if (nLinked==93) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_VERSION_2_1(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_VERSION_2_1
+    if ((GLeeFuncPtr_glUniformMatrix2x3fv = (GLEEPFNGLUNIFORMMATRIX2X3FVPROC) __GLeeGetProcAddress("glUniformMatrix2x3fv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glUniformMatrix3x2fv = (GLEEPFNGLUNIFORMMATRIX3X2FVPROC) __GLeeGetProcAddress("glUniformMatrix3x2fv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glUniformMatrix2x4fv = (GLEEPFNGLUNIFORMMATRIX2X4FVPROC) __GLeeGetProcAddress("glUniformMatrix2x4fv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glUniformMatrix4x2fv = (GLEEPFNGLUNIFORMMATRIX4X2FVPROC) __GLeeGetProcAddress("glUniformMatrix4x2fv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glUniformMatrix3x4fv = (GLEEPFNGLUNIFORMMATRIX3X4FVPROC) __GLeeGetProcAddress("glUniformMatrix3x4fv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glUniformMatrix4x3fv = (GLEEPFNGLUNIFORMMATRIX4X3FVPROC) __GLeeGetProcAddress("glUniformMatrix4x3fv"))!=0) nLinked++;
+#endif
+    if (nLinked==6) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_VERSION_3_0(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_VERSION_3_0
+    if ((GLeeFuncPtr_glColorMaski = (GLEEPFNGLCOLORMASKIPROC) __GLeeGetProcAddress("glColorMaski"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetBooleani_v = (GLEEPFNGLGETBOOLEANI_VPROC) __GLeeGetProcAddress("glGetBooleani_v"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetIntegeri_v = (GLEEPFNGLGETINTEGERI_VPROC) __GLeeGetProcAddress("glGetIntegeri_v"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glEnablei = (GLEEPFNGLENABLEIPROC) __GLeeGetProcAddress("glEnablei"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glDisablei = (GLEEPFNGLDISABLEIPROC) __GLeeGetProcAddress("glDisablei"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glIsEnabledi = (GLEEPFNGLISENABLEDIPROC) __GLeeGetProcAddress("glIsEnabledi"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glBeginTransformFeedback = (GLEEPFNGLBEGINTRANSFORMFEEDBACKPROC) __GLeeGetProcAddress("glBeginTransformFeedback"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glEndTransformFeedback = (GLEEPFNGLENDTRANSFORMFEEDBACKPROC) __GLeeGetProcAddress("glEndTransformFeedback"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glBindBufferRange = (GLEEPFNGLBINDBUFFERRANGEPROC) __GLeeGetProcAddress("glBindBufferRange"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glBindBufferBase = (GLEEPFNGLBINDBUFFERBASEPROC) __GLeeGetProcAddress("glBindBufferBase"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glTransformFeedbackVaryings = (GLEEPFNGLTRANSFORMFEEDBACKVARYINGSPROC) __GLeeGetProcAddress("glTransformFeedbackVaryings"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetTransformFeedbackVarying = (GLEEPFNGLGETTRANSFORMFEEDBACKVARYINGPROC) __GLeeGetProcAddress("glGetTransformFeedbackVarying"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glClampColor = (GLEEPFNGLCLAMPCOLORPROC) __GLeeGetProcAddress("glClampColor"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glBeginConditionalRender = (GLEEPFNGLBEGINCONDITIONALRENDERPROC) __GLeeGetProcAddress("glBeginConditionalRender"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glEndConditionalRender = (GLEEPFNGLENDCONDITIONALRENDERPROC) __GLeeGetProcAddress("glEndConditionalRender"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttribIPointer = (GLEEPFNGLVERTEXATTRIBIPOINTERPROC) __GLeeGetProcAddress("glVertexAttribIPointer"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetVertexAttribIiv = (GLEEPFNGLGETVERTEXATTRIBIIVPROC) __GLeeGetProcAddress("glGetVertexAttribIiv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetVertexAttribIuiv = (GLEEPFNGLGETVERTEXATTRIBIUIVPROC) __GLeeGetProcAddress("glGetVertexAttribIuiv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttribI1i = (GLEEPFNGLVERTEXATTRIBI1IPROC) __GLeeGetProcAddress("glVertexAttribI1i"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttribI2i = (GLEEPFNGLVERTEXATTRIBI2IPROC) __GLeeGetProcAddress("glVertexAttribI2i"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttribI3i = (GLEEPFNGLVERTEXATTRIBI3IPROC) __GLeeGetProcAddress("glVertexAttribI3i"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttribI4i = (GLEEPFNGLVERTEXATTRIBI4IPROC) __GLeeGetProcAddress("glVertexAttribI4i"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttribI1ui = (GLEEPFNGLVERTEXATTRIBI1UIPROC) __GLeeGetProcAddress("glVertexAttribI1ui"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttribI2ui = (GLEEPFNGLVERTEXATTRIBI2UIPROC) __GLeeGetProcAddress("glVertexAttribI2ui"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttribI3ui = (GLEEPFNGLVERTEXATTRIBI3UIPROC) __GLeeGetProcAddress("glVertexAttribI3ui"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttribI4ui = (GLEEPFNGLVERTEXATTRIBI4UIPROC) __GLeeGetProcAddress("glVertexAttribI4ui"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttribI1iv = (GLEEPFNGLVERTEXATTRIBI1IVPROC) __GLeeGetProcAddress("glVertexAttribI1iv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttribI2iv = (GLEEPFNGLVERTEXATTRIBI2IVPROC) __GLeeGetProcAddress("glVertexAttribI2iv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttribI3iv = (GLEEPFNGLVERTEXATTRIBI3IVPROC) __GLeeGetProcAddress("glVertexAttribI3iv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttribI4iv = (GLEEPFNGLVERTEXATTRIBI4IVPROC) __GLeeGetProcAddress("glVertexAttribI4iv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttribI1uiv = (GLEEPFNGLVERTEXATTRIBI1UIVPROC) __GLeeGetProcAddress("glVertexAttribI1uiv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttribI2uiv = (GLEEPFNGLVERTEXATTRIBI2UIVPROC) __GLeeGetProcAddress("glVertexAttribI2uiv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttribI3uiv = (GLEEPFNGLVERTEXATTRIBI3UIVPROC) __GLeeGetProcAddress("glVertexAttribI3uiv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttribI4uiv = (GLEEPFNGLVERTEXATTRIBI4UIVPROC) __GLeeGetProcAddress("glVertexAttribI4uiv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttribI4bv = (GLEEPFNGLVERTEXATTRIBI4BVPROC) __GLeeGetProcAddress("glVertexAttribI4bv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttribI4sv = (GLEEPFNGLVERTEXATTRIBI4SVPROC) __GLeeGetProcAddress("glVertexAttribI4sv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttribI4ubv = (GLEEPFNGLVERTEXATTRIBI4UBVPROC) __GLeeGetProcAddress("glVertexAttribI4ubv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttribI4usv = (GLEEPFNGLVERTEXATTRIBI4USVPROC) __GLeeGetProcAddress("glVertexAttribI4usv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetUniformuiv = (GLEEPFNGLGETUNIFORMUIVPROC) __GLeeGetProcAddress("glGetUniformuiv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glBindFragDataLocation = (GLEEPFNGLBINDFRAGDATALOCATIONPROC) __GLeeGetProcAddress("glBindFragDataLocation"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetFragDataLocation = (GLEEPFNGLGETFRAGDATALOCATIONPROC) __GLeeGetProcAddress("glGetFragDataLocation"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glUniform1ui = (GLEEPFNGLUNIFORM1UIPROC) __GLeeGetProcAddress("glUniform1ui"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glUniform2ui = (GLEEPFNGLUNIFORM2UIPROC) __GLeeGetProcAddress("glUniform2ui"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glUniform3ui = (GLEEPFNGLUNIFORM3UIPROC) __GLeeGetProcAddress("glUniform3ui"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glUniform4ui = (GLEEPFNGLUNIFORM4UIPROC) __GLeeGetProcAddress("glUniform4ui"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glUniform1uiv = (GLEEPFNGLUNIFORM1UIVPROC) __GLeeGetProcAddress("glUniform1uiv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glUniform2uiv = (GLEEPFNGLUNIFORM2UIVPROC) __GLeeGetProcAddress("glUniform2uiv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glUniform3uiv = (GLEEPFNGLUNIFORM3UIVPROC) __GLeeGetProcAddress("glUniform3uiv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glUniform4uiv = (GLEEPFNGLUNIFORM4UIVPROC) __GLeeGetProcAddress("glUniform4uiv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glTexParameterIiv = (GLEEPFNGLTEXPARAMETERIIVPROC) __GLeeGetProcAddress("glTexParameterIiv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glTexParameterIuiv = (GLEEPFNGLTEXPARAMETERIUIVPROC) __GLeeGetProcAddress("glTexParameterIuiv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetTexParameterIiv = (GLEEPFNGLGETTEXPARAMETERIIVPROC) __GLeeGetProcAddress("glGetTexParameterIiv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetTexParameterIuiv = (GLEEPFNGLGETTEXPARAMETERIUIVPROC) __GLeeGetProcAddress("glGetTexParameterIuiv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glClearBufferiv = (GLEEPFNGLCLEARBUFFERIVPROC) __GLeeGetProcAddress("glClearBufferiv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glClearBufferuiv = (GLEEPFNGLCLEARBUFFERUIVPROC) __GLeeGetProcAddress("glClearBufferuiv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glClearBufferfv = (GLEEPFNGLCLEARBUFFERFVPROC) __GLeeGetProcAddress("glClearBufferfv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glClearBufferfi = (GLEEPFNGLCLEARBUFFERFIPROC) __GLeeGetProcAddress("glClearBufferfi"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetStringi = (GLEEPFNGLGETSTRINGIPROC) __GLeeGetProcAddress("glGetStringi"))!=0) nLinked++;
+#endif
+    if (nLinked==58) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_VERSION_3_1(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_VERSION_3_1
+    if ((GLeeFuncPtr_glDrawArraysInstanced = (GLEEPFNGLDRAWARRAYSINSTANCEDPROC) __GLeeGetProcAddress("glDrawArraysInstanced"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glDrawElementsInstanced = (GLEEPFNGLDRAWELEMENTSINSTANCEDPROC) __GLeeGetProcAddress("glDrawElementsInstanced"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glTexBuffer = (GLEEPFNGLTEXBUFFERPROC) __GLeeGetProcAddress("glTexBuffer"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glPrimitiveRestartIndex = (GLEEPFNGLPRIMITIVERESTARTINDEXPROC) __GLeeGetProcAddress("glPrimitiveRestartIndex"))!=0) nLinked++;
+#endif
+    if (nLinked==4) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_VERSION_3_2(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_VERSION_3_2
+    if ((GLeeFuncPtr_glGetInteger64i_v = (GLEEPFNGLGETINTEGER64I_VPROC) __GLeeGetProcAddress("glGetInteger64i_v"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetBufferParameteri64v = (GLEEPFNGLGETBUFFERPARAMETERI64VPROC) __GLeeGetProcAddress("glGetBufferParameteri64v"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glFramebufferTexture = (GLEEPFNGLFRAMEBUFFERTEXTUREPROC) __GLeeGetProcAddress("glFramebufferTexture"))!=0) nLinked++;
+#endif
+    if (nLinked==3) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_VERSION_3_3(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_VERSION_3_3
+    if ((GLeeFuncPtr_glVertexAttribDivisor = (GLEEPFNGLVERTEXATTRIBDIVISORPROC) __GLeeGetProcAddress("glVertexAttribDivisor"))!=0) nLinked++;
+#endif
+    if (nLinked==1) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_VERSION_4_0(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_VERSION_4_0
+    if ((GLeeFuncPtr_glMinSampleShading = (GLEEPFNGLMINSAMPLESHADINGPROC) __GLeeGetProcAddress("glMinSampleShading"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glBlendEquationi = (GLEEPFNGLBLENDEQUATIONIPROC) __GLeeGetProcAddress("glBlendEquationi"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glBlendEquationSeparatei = (GLEEPFNGLBLENDEQUATIONSEPARATEIPROC) __GLeeGetProcAddress("glBlendEquationSeparatei"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glBlendFunci = (GLEEPFNGLBLENDFUNCIPROC) __GLeeGetProcAddress("glBlendFunci"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glBlendFuncSeparatei = (GLEEPFNGLBLENDFUNCSEPARATEIPROC) __GLeeGetProcAddress("glBlendFuncSeparatei"))!=0) nLinked++;
+#endif
+    if (nLinked==5) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_VERSION_4_1(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_VERSION_4_2(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_ARB_multitexture(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_ARB_multitexture
+    if ((GLeeFuncPtr_glActiveTextureARB = (GLEEPFNGLACTIVETEXTUREARBPROC) __GLeeGetProcAddress("glActiveTextureARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glClientActiveTextureARB = (GLEEPFNGLCLIENTACTIVETEXTUREARBPROC) __GLeeGetProcAddress("glClientActiveTextureARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMultiTexCoord1dARB = (GLEEPFNGLMULTITEXCOORD1DARBPROC) __GLeeGetProcAddress("glMultiTexCoord1dARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMultiTexCoord1dvARB = (GLEEPFNGLMULTITEXCOORD1DVARBPROC) __GLeeGetProcAddress("glMultiTexCoord1dvARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMultiTexCoord1fARB = (GLEEPFNGLMULTITEXCOORD1FARBPROC) __GLeeGetProcAddress("glMultiTexCoord1fARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMultiTexCoord1fvARB = (GLEEPFNGLMULTITEXCOORD1FVARBPROC) __GLeeGetProcAddress("glMultiTexCoord1fvARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMultiTexCoord1iARB = (GLEEPFNGLMULTITEXCOORD1IARBPROC) __GLeeGetProcAddress("glMultiTexCoord1iARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMultiTexCoord1ivARB = (GLEEPFNGLMULTITEXCOORD1IVARBPROC) __GLeeGetProcAddress("glMultiTexCoord1ivARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMultiTexCoord1sARB = (GLEEPFNGLMULTITEXCOORD1SARBPROC) __GLeeGetProcAddress("glMultiTexCoord1sARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMultiTexCoord1svARB = (GLEEPFNGLMULTITEXCOORD1SVARBPROC) __GLeeGetProcAddress("glMultiTexCoord1svARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMultiTexCoord2dARB = (GLEEPFNGLMULTITEXCOORD2DARBPROC) __GLeeGetProcAddress("glMultiTexCoord2dARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMultiTexCoord2dvARB = (GLEEPFNGLMULTITEXCOORD2DVARBPROC) __GLeeGetProcAddress("glMultiTexCoord2dvARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMultiTexCoord2fARB = (GLEEPFNGLMULTITEXCOORD2FARBPROC) __GLeeGetProcAddress("glMultiTexCoord2fARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMultiTexCoord2fvARB = (GLEEPFNGLMULTITEXCOORD2FVARBPROC) __GLeeGetProcAddress("glMultiTexCoord2fvARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMultiTexCoord2iARB = (GLEEPFNGLMULTITEXCOORD2IARBPROC) __GLeeGetProcAddress("glMultiTexCoord2iARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMultiTexCoord2ivARB = (GLEEPFNGLMULTITEXCOORD2IVARBPROC) __GLeeGetProcAddress("glMultiTexCoord2ivARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMultiTexCoord2sARB = (GLEEPFNGLMULTITEXCOORD2SARBPROC) __GLeeGetProcAddress("glMultiTexCoord2sARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMultiTexCoord2svARB = (GLEEPFNGLMULTITEXCOORD2SVARBPROC) __GLeeGetProcAddress("glMultiTexCoord2svARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMultiTexCoord3dARB = (GLEEPFNGLMULTITEXCOORD3DARBPROC) __GLeeGetProcAddress("glMultiTexCoord3dARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMultiTexCoord3dvARB = (GLEEPFNGLMULTITEXCOORD3DVARBPROC) __GLeeGetProcAddress("glMultiTexCoord3dvARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMultiTexCoord3fARB = (GLEEPFNGLMULTITEXCOORD3FARBPROC) __GLeeGetProcAddress("glMultiTexCoord3fARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMultiTexCoord3fvARB = (GLEEPFNGLMULTITEXCOORD3FVARBPROC) __GLeeGetProcAddress("glMultiTexCoord3fvARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMultiTexCoord3iARB = (GLEEPFNGLMULTITEXCOORD3IARBPROC) __GLeeGetProcAddress("glMultiTexCoord3iARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMultiTexCoord3ivARB = (GLEEPFNGLMULTITEXCOORD3IVARBPROC) __GLeeGetProcAddress("glMultiTexCoord3ivARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMultiTexCoord3sARB = (GLEEPFNGLMULTITEXCOORD3SARBPROC) __GLeeGetProcAddress("glMultiTexCoord3sARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMultiTexCoord3svARB = (GLEEPFNGLMULTITEXCOORD3SVARBPROC) __GLeeGetProcAddress("glMultiTexCoord3svARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMultiTexCoord4dARB = (GLEEPFNGLMULTITEXCOORD4DARBPROC) __GLeeGetProcAddress("glMultiTexCoord4dARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMultiTexCoord4dvARB = (GLEEPFNGLMULTITEXCOORD4DVARBPROC) __GLeeGetProcAddress("glMultiTexCoord4dvARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMultiTexCoord4fARB = (GLEEPFNGLMULTITEXCOORD4FARBPROC) __GLeeGetProcAddress("glMultiTexCoord4fARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMultiTexCoord4fvARB = (GLEEPFNGLMULTITEXCOORD4FVARBPROC) __GLeeGetProcAddress("glMultiTexCoord4fvARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMultiTexCoord4iARB = (GLEEPFNGLMULTITEXCOORD4IARBPROC) __GLeeGetProcAddress("glMultiTexCoord4iARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMultiTexCoord4ivARB = (GLEEPFNGLMULTITEXCOORD4IVARBPROC) __GLeeGetProcAddress("glMultiTexCoord4ivARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMultiTexCoord4sARB = (GLEEPFNGLMULTITEXCOORD4SARBPROC) __GLeeGetProcAddress("glMultiTexCoord4sARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMultiTexCoord4svARB = (GLEEPFNGLMULTITEXCOORD4SVARBPROC) __GLeeGetProcAddress("glMultiTexCoord4svARB"))!=0) nLinked++;
+#endif
+    if (nLinked==34) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_ARB_transpose_matrix(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_ARB_transpose_matrix
+    if ((GLeeFuncPtr_glLoadTransposeMatrixfARB = (GLEEPFNGLLOADTRANSPOSEMATRIXFARBPROC) __GLeeGetProcAddress("glLoadTransposeMatrixfARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glLoadTransposeMatrixdARB = (GLEEPFNGLLOADTRANSPOSEMATRIXDARBPROC) __GLeeGetProcAddress("glLoadTransposeMatrixdARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMultTransposeMatrixfARB = (GLEEPFNGLMULTTRANSPOSEMATRIXFARBPROC) __GLeeGetProcAddress("glMultTransposeMatrixfARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMultTransposeMatrixdARB = (GLEEPFNGLMULTTRANSPOSEMATRIXDARBPROC) __GLeeGetProcAddress("glMultTransposeMatrixdARB"))!=0) nLinked++;
+#endif
+    if (nLinked==4) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_ARB_multisample(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_ARB_multisample
+    if ((GLeeFuncPtr_glSampleCoverageARB = (GLEEPFNGLSAMPLECOVERAGEARBPROC) __GLeeGetProcAddress("glSampleCoverageARB"))!=0) nLinked++;
+#endif
+    if (nLinked==1) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_ARB_texture_env_add(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_ARB_texture_cube_map(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_ARB_texture_compression(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_ARB_texture_compression
+    if ((GLeeFuncPtr_glCompressedTexImage3DARB = (GLEEPFNGLCOMPRESSEDTEXIMAGE3DARBPROC) __GLeeGetProcAddress("glCompressedTexImage3DARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glCompressedTexImage2DARB = (GLEEPFNGLCOMPRESSEDTEXIMAGE2DARBPROC) __GLeeGetProcAddress("glCompressedTexImage2DARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glCompressedTexImage1DARB = (GLEEPFNGLCOMPRESSEDTEXIMAGE1DARBPROC) __GLeeGetProcAddress("glCompressedTexImage1DARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glCompressedTexSubImage3DARB = (GLEEPFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC) __GLeeGetProcAddress("glCompressedTexSubImage3DARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glCompressedTexSubImage2DARB = (GLEEPFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC) __GLeeGetProcAddress("glCompressedTexSubImage2DARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glCompressedTexSubImage1DARB = (GLEEPFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC) __GLeeGetProcAddress("glCompressedTexSubImage1DARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetCompressedTexImageARB = (GLEEPFNGLGETCOMPRESSEDTEXIMAGEARBPROC) __GLeeGetProcAddress("glGetCompressedTexImageARB"))!=0) nLinked++;
+#endif
+    if (nLinked==7) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_ARB_texture_border_clamp(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_ARB_point_parameters(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_ARB_point_parameters
+    if ((GLeeFuncPtr_glPointParameterfARB = (GLEEPFNGLPOINTPARAMETERFARBPROC) __GLeeGetProcAddress("glPointParameterfARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glPointParameterfvARB = (GLEEPFNGLPOINTPARAMETERFVARBPROC) __GLeeGetProcAddress("glPointParameterfvARB"))!=0) nLinked++;
+#endif
+    if (nLinked==2) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_ARB_vertex_blend(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_ARB_vertex_blend
+    if ((GLeeFuncPtr_glWeightbvARB = (GLEEPFNGLWEIGHTBVARBPROC) __GLeeGetProcAddress("glWeightbvARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glWeightsvARB = (GLEEPFNGLWEIGHTSVARBPROC) __GLeeGetProcAddress("glWeightsvARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glWeightivARB = (GLEEPFNGLWEIGHTIVARBPROC) __GLeeGetProcAddress("glWeightivARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glWeightfvARB = (GLEEPFNGLWEIGHTFVARBPROC) __GLeeGetProcAddress("glWeightfvARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glWeightdvARB = (GLEEPFNGLWEIGHTDVARBPROC) __GLeeGetProcAddress("glWeightdvARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glWeightubvARB = (GLEEPFNGLWEIGHTUBVARBPROC) __GLeeGetProcAddress("glWeightubvARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glWeightusvARB = (GLEEPFNGLWEIGHTUSVARBPROC) __GLeeGetProcAddress("glWeightusvARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glWeightuivARB = (GLEEPFNGLWEIGHTUIVARBPROC) __GLeeGetProcAddress("glWeightuivARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glWeightPointerARB = (GLEEPFNGLWEIGHTPOINTERARBPROC) __GLeeGetProcAddress("glWeightPointerARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexBlendARB = (GLEEPFNGLVERTEXBLENDARBPROC) __GLeeGetProcAddress("glVertexBlendARB"))!=0) nLinked++;
+#endif
+    if (nLinked==10) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_ARB_matrix_palette(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_ARB_matrix_palette
+    if ((GLeeFuncPtr_glCurrentPaletteMatrixARB = (GLEEPFNGLCURRENTPALETTEMATRIXARBPROC) __GLeeGetProcAddress("glCurrentPaletteMatrixARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMatrixIndexubvARB = (GLEEPFNGLMATRIXINDEXUBVARBPROC) __GLeeGetProcAddress("glMatrixIndexubvARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMatrixIndexusvARB = (GLEEPFNGLMATRIXINDEXUSVARBPROC) __GLeeGetProcAddress("glMatrixIndexusvARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMatrixIndexuivARB = (GLEEPFNGLMATRIXINDEXUIVARBPROC) __GLeeGetProcAddress("glMatrixIndexuivARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMatrixIndexPointerARB = (GLEEPFNGLMATRIXINDEXPOINTERARBPROC) __GLeeGetProcAddress("glMatrixIndexPointerARB"))!=0) nLinked++;
+#endif
+    if (nLinked==5) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_ARB_texture_env_combine(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_ARB_texture_env_crossbar(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_ARB_texture_env_dot3(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_ARB_texture_mirrored_repeat(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_ARB_depth_texture(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_ARB_shadow(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_ARB_shadow_ambient(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_ARB_window_pos(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_ARB_window_pos
+    if ((GLeeFuncPtr_glWindowPos2dARB = (GLEEPFNGLWINDOWPOS2DARBPROC) __GLeeGetProcAddress("glWindowPos2dARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glWindowPos2dvARB = (GLEEPFNGLWINDOWPOS2DVARBPROC) __GLeeGetProcAddress("glWindowPos2dvARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glWindowPos2fARB = (GLEEPFNGLWINDOWPOS2FARBPROC) __GLeeGetProcAddress("glWindowPos2fARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glWindowPos2fvARB = (GLEEPFNGLWINDOWPOS2FVARBPROC) __GLeeGetProcAddress("glWindowPos2fvARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glWindowPos2iARB = (GLEEPFNGLWINDOWPOS2IARBPROC) __GLeeGetProcAddress("glWindowPos2iARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glWindowPos2ivARB = (GLEEPFNGLWINDOWPOS2IVARBPROC) __GLeeGetProcAddress("glWindowPos2ivARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glWindowPos2sARB = (GLEEPFNGLWINDOWPOS2SARBPROC) __GLeeGetProcAddress("glWindowPos2sARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glWindowPos2svARB = (GLEEPFNGLWINDOWPOS2SVARBPROC) __GLeeGetProcAddress("glWindowPos2svARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glWindowPos3dARB = (GLEEPFNGLWINDOWPOS3DARBPROC) __GLeeGetProcAddress("glWindowPos3dARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glWindowPos3dvARB = (GLEEPFNGLWINDOWPOS3DVARBPROC) __GLeeGetProcAddress("glWindowPos3dvARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glWindowPos3fARB = (GLEEPFNGLWINDOWPOS3FARBPROC) __GLeeGetProcAddress("glWindowPos3fARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glWindowPos3fvARB = (GLEEPFNGLWINDOWPOS3FVARBPROC) __GLeeGetProcAddress("glWindowPos3fvARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glWindowPos3iARB = (GLEEPFNGLWINDOWPOS3IARBPROC) __GLeeGetProcAddress("glWindowPos3iARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glWindowPos3ivARB = (GLEEPFNGLWINDOWPOS3IVARBPROC) __GLeeGetProcAddress("glWindowPos3ivARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glWindowPos3sARB = (GLEEPFNGLWINDOWPOS3SARBPROC) __GLeeGetProcAddress("glWindowPos3sARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glWindowPos3svARB = (GLEEPFNGLWINDOWPOS3SVARBPROC) __GLeeGetProcAddress("glWindowPos3svARB"))!=0) nLinked++;
+#endif
+    if (nLinked==16) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_ARB_vertex_program(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_ARB_vertex_program
+    if ((GLeeFuncPtr_glVertexAttrib1dARB = (GLEEPFNGLVERTEXATTRIB1DARBPROC) __GLeeGetProcAddress("glVertexAttrib1dARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttrib1dvARB = (GLEEPFNGLVERTEXATTRIB1DVARBPROC) __GLeeGetProcAddress("glVertexAttrib1dvARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttrib1fARB = (GLEEPFNGLVERTEXATTRIB1FARBPROC) __GLeeGetProcAddress("glVertexAttrib1fARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttrib1fvARB = (GLEEPFNGLVERTEXATTRIB1FVARBPROC) __GLeeGetProcAddress("glVertexAttrib1fvARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttrib1sARB = (GLEEPFNGLVERTEXATTRIB1SARBPROC) __GLeeGetProcAddress("glVertexAttrib1sARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttrib1svARB = (GLEEPFNGLVERTEXATTRIB1SVARBPROC) __GLeeGetProcAddress("glVertexAttrib1svARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttrib2dARB = (GLEEPFNGLVERTEXATTRIB2DARBPROC) __GLeeGetProcAddress("glVertexAttrib2dARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttrib2dvARB = (GLEEPFNGLVERTEXATTRIB2DVARBPROC) __GLeeGetProcAddress("glVertexAttrib2dvARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttrib2fARB = (GLEEPFNGLVERTEXATTRIB2FARBPROC) __GLeeGetProcAddress("glVertexAttrib2fARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttrib2fvARB = (GLEEPFNGLVERTEXATTRIB2FVARBPROC) __GLeeGetProcAddress("glVertexAttrib2fvARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttrib2sARB = (GLEEPFNGLVERTEXATTRIB2SARBPROC) __GLeeGetProcAddress("glVertexAttrib2sARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttrib2svARB = (GLEEPFNGLVERTEXATTRIB2SVARBPROC) __GLeeGetProcAddress("glVertexAttrib2svARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttrib3dARB = (GLEEPFNGLVERTEXATTRIB3DARBPROC) __GLeeGetProcAddress("glVertexAttrib3dARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttrib3dvARB = (GLEEPFNGLVERTEXATTRIB3DVARBPROC) __GLeeGetProcAddress("glVertexAttrib3dvARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttrib3fARB = (GLEEPFNGLVERTEXATTRIB3FARBPROC) __GLeeGetProcAddress("glVertexAttrib3fARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttrib3fvARB = (GLEEPFNGLVERTEXATTRIB3FVARBPROC) __GLeeGetProcAddress("glVertexAttrib3fvARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttrib3sARB = (GLEEPFNGLVERTEXATTRIB3SARBPROC) __GLeeGetProcAddress("glVertexAttrib3sARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttrib3svARB = (GLEEPFNGLVERTEXATTRIB3SVARBPROC) __GLeeGetProcAddress("glVertexAttrib3svARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttrib4NbvARB = (GLEEPFNGLVERTEXATTRIB4NBVARBPROC) __GLeeGetProcAddress("glVertexAttrib4NbvARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttrib4NivARB = (GLEEPFNGLVERTEXATTRIB4NIVARBPROC) __GLeeGetProcAddress("glVertexAttrib4NivARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttrib4NsvARB = (GLEEPFNGLVERTEXATTRIB4NSVARBPROC) __GLeeGetProcAddress("glVertexAttrib4NsvARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttrib4NubARB = (GLEEPFNGLVERTEXATTRIB4NUBARBPROC) __GLeeGetProcAddress("glVertexAttrib4NubARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttrib4NubvARB = (GLEEPFNGLVERTEXATTRIB4NUBVARBPROC) __GLeeGetProcAddress("glVertexAttrib4NubvARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttrib4NuivARB = (GLEEPFNGLVERTEXATTRIB4NUIVARBPROC) __GLeeGetProcAddress("glVertexAttrib4NuivARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttrib4NusvARB = (GLEEPFNGLVERTEXATTRIB4NUSVARBPROC) __GLeeGetProcAddress("glVertexAttrib4NusvARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttrib4bvARB = (GLEEPFNGLVERTEXATTRIB4BVARBPROC) __GLeeGetProcAddress("glVertexAttrib4bvARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttrib4dARB = (GLEEPFNGLVERTEXATTRIB4DARBPROC) __GLeeGetProcAddress("glVertexAttrib4dARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttrib4dvARB = (GLEEPFNGLVERTEXATTRIB4DVARBPROC) __GLeeGetProcAddress("glVertexAttrib4dvARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttrib4fARB = (GLEEPFNGLVERTEXATTRIB4FARBPROC) __GLeeGetProcAddress("glVertexAttrib4fARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttrib4fvARB = (GLEEPFNGLVERTEXATTRIB4FVARBPROC) __GLeeGetProcAddress("glVertexAttrib4fvARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttrib4ivARB = (GLEEPFNGLVERTEXATTRIB4IVARBPROC) __GLeeGetProcAddress("glVertexAttrib4ivARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttrib4sARB = (GLEEPFNGLVERTEXATTRIB4SARBPROC) __GLeeGetProcAddress("glVertexAttrib4sARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttrib4svARB = (GLEEPFNGLVERTEXATTRIB4SVARBPROC) __GLeeGetProcAddress("glVertexAttrib4svARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttrib4ubvARB = (GLEEPFNGLVERTEXATTRIB4UBVARBPROC) __GLeeGetProcAddress("glVertexAttrib4ubvARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttrib4uivARB = (GLEEPFNGLVERTEXATTRIB4UIVARBPROC) __GLeeGetProcAddress("glVertexAttrib4uivARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttrib4usvARB = (GLEEPFNGLVERTEXATTRIB4USVARBPROC) __GLeeGetProcAddress("glVertexAttrib4usvARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttribPointerARB = (GLEEPFNGLVERTEXATTRIBPOINTERARBPROC) __GLeeGetProcAddress("glVertexAttribPointerARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glEnableVertexAttribArrayARB = (GLEEPFNGLENABLEVERTEXATTRIBARRAYARBPROC) __GLeeGetProcAddress("glEnableVertexAttribArrayARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glDisableVertexAttribArrayARB = (GLEEPFNGLDISABLEVERTEXATTRIBARRAYARBPROC) __GLeeGetProcAddress("glDisableVertexAttribArrayARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramStringARB = (GLEEPFNGLPROGRAMSTRINGARBPROC) __GLeeGetProcAddress("glProgramStringARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glBindProgramARB = (GLEEPFNGLBINDPROGRAMARBPROC) __GLeeGetProcAddress("glBindProgramARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glDeleteProgramsARB = (GLEEPFNGLDELETEPROGRAMSARBPROC) __GLeeGetProcAddress("glDeleteProgramsARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGenProgramsARB = (GLEEPFNGLGENPROGRAMSARBPROC) __GLeeGetProcAddress("glGenProgramsARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramEnvParameter4dARB = (GLEEPFNGLPROGRAMENVPARAMETER4DARBPROC) __GLeeGetProcAddress("glProgramEnvParameter4dARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramEnvParameter4dvARB = (GLEEPFNGLPROGRAMENVPARAMETER4DVARBPROC) __GLeeGetProcAddress("glProgramEnvParameter4dvARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramEnvParameter4fARB = (GLEEPFNGLPROGRAMENVPARAMETER4FARBPROC) __GLeeGetProcAddress("glProgramEnvParameter4fARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramEnvParameter4fvARB = (GLEEPFNGLPROGRAMENVPARAMETER4FVARBPROC) __GLeeGetProcAddress("glProgramEnvParameter4fvARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramLocalParameter4dARB = (GLEEPFNGLPROGRAMLOCALPARAMETER4DARBPROC) __GLeeGetProcAddress("glProgramLocalParameter4dARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramLocalParameter4dvARB = (GLEEPFNGLPROGRAMLOCALPARAMETER4DVARBPROC) __GLeeGetProcAddress("glProgramLocalParameter4dvARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramLocalParameter4fARB = (GLEEPFNGLPROGRAMLOCALPARAMETER4FARBPROC) __GLeeGetProcAddress("glProgramLocalParameter4fARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramLocalParameter4fvARB = (GLEEPFNGLPROGRAMLOCALPARAMETER4FVARBPROC) __GLeeGetProcAddress("glProgramLocalParameter4fvARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetProgramEnvParameterdvARB = (GLEEPFNGLGETPROGRAMENVPARAMETERDVARBPROC) __GLeeGetProcAddress("glGetProgramEnvParameterdvARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetProgramEnvParameterfvARB = (GLEEPFNGLGETPROGRAMENVPARAMETERFVARBPROC) __GLeeGetProcAddress("glGetProgramEnvParameterfvARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetProgramLocalParameterdvARB = (GLEEPFNGLGETPROGRAMLOCALPARAMETERDVARBPROC) __GLeeGetProcAddress("glGetProgramLocalParameterdvARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetProgramLocalParameterfvARB = (GLEEPFNGLGETPROGRAMLOCALPARAMETERFVARBPROC) __GLeeGetProcAddress("glGetProgramLocalParameterfvARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetProgramivARB = (GLEEPFNGLGETPROGRAMIVARBPROC) __GLeeGetProcAddress("glGetProgramivARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetProgramStringARB = (GLEEPFNGLGETPROGRAMSTRINGARBPROC) __GLeeGetProcAddress("glGetProgramStringARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetVertexAttribdvARB = (GLEEPFNGLGETVERTEXATTRIBDVARBPROC) __GLeeGetProcAddress("glGetVertexAttribdvARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetVertexAttribfvARB = (GLEEPFNGLGETVERTEXATTRIBFVARBPROC) __GLeeGetProcAddress("glGetVertexAttribfvARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetVertexAttribivARB = (GLEEPFNGLGETVERTEXATTRIBIVARBPROC) __GLeeGetProcAddress("glGetVertexAttribivARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetVertexAttribPointervARB = (GLEEPFNGLGETVERTEXATTRIBPOINTERVARBPROC) __GLeeGetProcAddress("glGetVertexAttribPointervARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glIsProgramARB = (GLEEPFNGLISPROGRAMARBPROC) __GLeeGetProcAddress("glIsProgramARB"))!=0) nLinked++;
+#endif
+    if (nLinked==62) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_ARB_fragment_program(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_ARB_vertex_buffer_object(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_ARB_vertex_buffer_object
+    if ((GLeeFuncPtr_glBindBufferARB = (GLEEPFNGLBINDBUFFERARBPROC) __GLeeGetProcAddress("glBindBufferARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glDeleteBuffersARB = (GLEEPFNGLDELETEBUFFERSARBPROC) __GLeeGetProcAddress("glDeleteBuffersARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGenBuffersARB = (GLEEPFNGLGENBUFFERSARBPROC) __GLeeGetProcAddress("glGenBuffersARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glIsBufferARB = (GLEEPFNGLISBUFFERARBPROC) __GLeeGetProcAddress("glIsBufferARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glBufferDataARB = (GLEEPFNGLBUFFERDATAARBPROC) __GLeeGetProcAddress("glBufferDataARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glBufferSubDataARB = (GLEEPFNGLBUFFERSUBDATAARBPROC) __GLeeGetProcAddress("glBufferSubDataARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetBufferSubDataARB = (GLEEPFNGLGETBUFFERSUBDATAARBPROC) __GLeeGetProcAddress("glGetBufferSubDataARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMapBufferARB = (GLEEPFNGLMAPBUFFERARBPROC) __GLeeGetProcAddress("glMapBufferARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glUnmapBufferARB = (GLEEPFNGLUNMAPBUFFERARBPROC) __GLeeGetProcAddress("glUnmapBufferARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetBufferParameterivARB = (GLEEPFNGLGETBUFFERPARAMETERIVARBPROC) __GLeeGetProcAddress("glGetBufferParameterivARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetBufferPointervARB = (GLEEPFNGLGETBUFFERPOINTERVARBPROC) __GLeeGetProcAddress("glGetBufferPointervARB"))!=0) nLinked++;
+#endif
+    if (nLinked==11) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_ARB_occlusion_query(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_ARB_occlusion_query
+    if ((GLeeFuncPtr_glGenQueriesARB = (GLEEPFNGLGENQUERIESARBPROC) __GLeeGetProcAddress("glGenQueriesARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glDeleteQueriesARB = (GLEEPFNGLDELETEQUERIESARBPROC) __GLeeGetProcAddress("glDeleteQueriesARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glIsQueryARB = (GLEEPFNGLISQUERYARBPROC) __GLeeGetProcAddress("glIsQueryARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glBeginQueryARB = (GLEEPFNGLBEGINQUERYARBPROC) __GLeeGetProcAddress("glBeginQueryARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glEndQueryARB = (GLEEPFNGLENDQUERYARBPROC) __GLeeGetProcAddress("glEndQueryARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetQueryivARB = (GLEEPFNGLGETQUERYIVARBPROC) __GLeeGetProcAddress("glGetQueryivARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetQueryObjectivARB = (GLEEPFNGLGETQUERYOBJECTIVARBPROC) __GLeeGetProcAddress("glGetQueryObjectivARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetQueryObjectuivARB = (GLEEPFNGLGETQUERYOBJECTUIVARBPROC) __GLeeGetProcAddress("glGetQueryObjectuivARB"))!=0) nLinked++;
+#endif
+    if (nLinked==8) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_ARB_shader_objects(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_ARB_shader_objects
+    if ((GLeeFuncPtr_glDeleteObjectARB = (GLEEPFNGLDELETEOBJECTARBPROC) __GLeeGetProcAddress("glDeleteObjectARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetHandleARB = (GLEEPFNGLGETHANDLEARBPROC) __GLeeGetProcAddress("glGetHandleARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glDetachObjectARB = (GLEEPFNGLDETACHOBJECTARBPROC) __GLeeGetProcAddress("glDetachObjectARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glCreateShaderObjectARB = (GLEEPFNGLCREATESHADEROBJECTARBPROC) __GLeeGetProcAddress("glCreateShaderObjectARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glShaderSourceARB = (GLEEPFNGLSHADERSOURCEARBPROC) __GLeeGetProcAddress("glShaderSourceARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glCompileShaderARB = (GLEEPFNGLCOMPILESHADERARBPROC) __GLeeGetProcAddress("glCompileShaderARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glCreateProgramObjectARB = (GLEEPFNGLCREATEPROGRAMOBJECTARBPROC) __GLeeGetProcAddress("glCreateProgramObjectARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glAttachObjectARB = (GLEEPFNGLATTACHOBJECTARBPROC) __GLeeGetProcAddress("glAttachObjectARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glLinkProgramARB = (GLEEPFNGLLINKPROGRAMARBPROC) __GLeeGetProcAddress("glLinkProgramARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glUseProgramObjectARB = (GLEEPFNGLUSEPROGRAMOBJECTARBPROC) __GLeeGetProcAddress("glUseProgramObjectARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glValidateProgramARB = (GLEEPFNGLVALIDATEPROGRAMARBPROC) __GLeeGetProcAddress("glValidateProgramARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glUniform1fARB = (GLEEPFNGLUNIFORM1FARBPROC) __GLeeGetProcAddress("glUniform1fARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glUniform2fARB = (GLEEPFNGLUNIFORM2FARBPROC) __GLeeGetProcAddress("glUniform2fARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glUniform3fARB = (GLEEPFNGLUNIFORM3FARBPROC) __GLeeGetProcAddress("glUniform3fARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glUniform4fARB = (GLEEPFNGLUNIFORM4FARBPROC) __GLeeGetProcAddress("glUniform4fARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glUniform1iARB = (GLEEPFNGLUNIFORM1IARBPROC) __GLeeGetProcAddress("glUniform1iARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glUniform2iARB = (GLEEPFNGLUNIFORM2IARBPROC) __GLeeGetProcAddress("glUniform2iARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glUniform3iARB = (GLEEPFNGLUNIFORM3IARBPROC) __GLeeGetProcAddress("glUniform3iARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glUniform4iARB = (GLEEPFNGLUNIFORM4IARBPROC) __GLeeGetProcAddress("glUniform4iARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glUniform1fvARB = (GLEEPFNGLUNIFORM1FVARBPROC) __GLeeGetProcAddress("glUniform1fvARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glUniform2fvARB = (GLEEPFNGLUNIFORM2FVARBPROC) __GLeeGetProcAddress("glUniform2fvARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glUniform3fvARB = (GLEEPFNGLUNIFORM3FVARBPROC) __GLeeGetProcAddress("glUniform3fvARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glUniform4fvARB = (GLEEPFNGLUNIFORM4FVARBPROC) __GLeeGetProcAddress("glUniform4fvARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glUniform1ivARB = (GLEEPFNGLUNIFORM1IVARBPROC) __GLeeGetProcAddress("glUniform1ivARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glUniform2ivARB = (GLEEPFNGLUNIFORM2IVARBPROC) __GLeeGetProcAddress("glUniform2ivARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glUniform3ivARB = (GLEEPFNGLUNIFORM3IVARBPROC) __GLeeGetProcAddress("glUniform3ivARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glUniform4ivARB = (GLEEPFNGLUNIFORM4IVARBPROC) __GLeeGetProcAddress("glUniform4ivARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glUniformMatrix2fvARB = (GLEEPFNGLUNIFORMMATRIX2FVARBPROC) __GLeeGetProcAddress("glUniformMatrix2fvARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glUniformMatrix3fvARB = (GLEEPFNGLUNIFORMMATRIX3FVARBPROC) __GLeeGetProcAddress("glUniformMatrix3fvARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glUniformMatrix4fvARB = (GLEEPFNGLUNIFORMMATRIX4FVARBPROC) __GLeeGetProcAddress("glUniformMatrix4fvARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetObjectParameterfvARB = (GLEEPFNGLGETOBJECTPARAMETERFVARBPROC) __GLeeGetProcAddress("glGetObjectParameterfvARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetObjectParameterivARB = (GLEEPFNGLGETOBJECTPARAMETERIVARBPROC) __GLeeGetProcAddress("glGetObjectParameterivARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetInfoLogARB = (GLEEPFNGLGETINFOLOGARBPROC) __GLeeGetProcAddress("glGetInfoLogARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetAttachedObjectsARB = (GLEEPFNGLGETATTACHEDOBJECTSARBPROC) __GLeeGetProcAddress("glGetAttachedObjectsARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetUniformLocationARB = (GLEEPFNGLGETUNIFORMLOCATIONARBPROC) __GLeeGetProcAddress("glGetUniformLocationARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetActiveUniformARB = (GLEEPFNGLGETACTIVEUNIFORMARBPROC) __GLeeGetProcAddress("glGetActiveUniformARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetUniformfvARB = (GLEEPFNGLGETUNIFORMFVARBPROC) __GLeeGetProcAddress("glGetUniformfvARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetUniformivARB = (GLEEPFNGLGETUNIFORMIVARBPROC) __GLeeGetProcAddress("glGetUniformivARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetShaderSourceARB = (GLEEPFNGLGETSHADERSOURCEARBPROC) __GLeeGetProcAddress("glGetShaderSourceARB"))!=0) nLinked++;
+#endif
+    if (nLinked==39) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_ARB_vertex_shader(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_ARB_vertex_shader
+    if ((GLeeFuncPtr_glBindAttribLocationARB = (GLEEPFNGLBINDATTRIBLOCATIONARBPROC) __GLeeGetProcAddress("glBindAttribLocationARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetActiveAttribARB = (GLEEPFNGLGETACTIVEATTRIBARBPROC) __GLeeGetProcAddress("glGetActiveAttribARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetAttribLocationARB = (GLEEPFNGLGETATTRIBLOCATIONARBPROC) __GLeeGetProcAddress("glGetAttribLocationARB"))!=0) nLinked++;
+#endif
+    if (nLinked==3) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_ARB_fragment_shader(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_ARB_shading_language_100(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_ARB_texture_non_power_of_two(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_ARB_point_sprite(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_ARB_fragment_program_shadow(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_ARB_draw_buffers(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_ARB_draw_buffers
+    if ((GLeeFuncPtr_glDrawBuffersARB = (GLEEPFNGLDRAWBUFFERSARBPROC) __GLeeGetProcAddress("glDrawBuffersARB"))!=0) nLinked++;
+#endif
+    if (nLinked==1) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_ARB_texture_rectangle(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_ARB_color_buffer_float(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_ARB_color_buffer_float
+    if ((GLeeFuncPtr_glClampColorARB = (GLEEPFNGLCLAMPCOLORARBPROC) __GLeeGetProcAddress("glClampColorARB"))!=0) nLinked++;
+#endif
+    if (nLinked==1) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_ARB_half_float_pixel(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_ARB_texture_float(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_ARB_pixel_buffer_object(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_ARB_depth_buffer_float(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_ARB_draw_instanced(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_ARB_draw_instanced
+    if ((GLeeFuncPtr_glDrawArraysInstancedARB = (GLEEPFNGLDRAWARRAYSINSTANCEDARBPROC) __GLeeGetProcAddress("glDrawArraysInstancedARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glDrawElementsInstancedARB = (GLEEPFNGLDRAWELEMENTSINSTANCEDARBPROC) __GLeeGetProcAddress("glDrawElementsInstancedARB"))!=0) nLinked++;
+#endif
+    if (nLinked==2) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_ARB_framebuffer_object(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_ARB_framebuffer_object
+    if ((GLeeFuncPtr_glIsRenderbuffer = (GLEEPFNGLISRENDERBUFFERPROC) __GLeeGetProcAddress("glIsRenderbuffer"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glBindRenderbuffer = (GLEEPFNGLBINDRENDERBUFFERPROC) __GLeeGetProcAddress("glBindRenderbuffer"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glDeleteRenderbuffers = (GLEEPFNGLDELETERENDERBUFFERSPROC) __GLeeGetProcAddress("glDeleteRenderbuffers"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGenRenderbuffers = (GLEEPFNGLGENRENDERBUFFERSPROC) __GLeeGetProcAddress("glGenRenderbuffers"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glRenderbufferStorage = (GLEEPFNGLRENDERBUFFERSTORAGEPROC) __GLeeGetProcAddress("glRenderbufferStorage"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetRenderbufferParameteriv = (GLEEPFNGLGETRENDERBUFFERPARAMETERIVPROC) __GLeeGetProcAddress("glGetRenderbufferParameteriv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glIsFramebuffer = (GLEEPFNGLISFRAMEBUFFERPROC) __GLeeGetProcAddress("glIsFramebuffer"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glBindFramebuffer = (GLEEPFNGLBINDFRAMEBUFFERPROC) __GLeeGetProcAddress("glBindFramebuffer"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glDeleteFramebuffers = (GLEEPFNGLDELETEFRAMEBUFFERSPROC) __GLeeGetProcAddress("glDeleteFramebuffers"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGenFramebuffers = (GLEEPFNGLGENFRAMEBUFFERSPROC) __GLeeGetProcAddress("glGenFramebuffers"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glCheckFramebufferStatus = (GLEEPFNGLCHECKFRAMEBUFFERSTATUSPROC) __GLeeGetProcAddress("glCheckFramebufferStatus"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glFramebufferTexture1D = (GLEEPFNGLFRAMEBUFFERTEXTURE1DPROC) __GLeeGetProcAddress("glFramebufferTexture1D"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glFramebufferTexture2D = (GLEEPFNGLFRAMEBUFFERTEXTURE2DPROC) __GLeeGetProcAddress("glFramebufferTexture2D"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glFramebufferTexture3D = (GLEEPFNGLFRAMEBUFFERTEXTURE3DPROC) __GLeeGetProcAddress("glFramebufferTexture3D"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glFramebufferRenderbuffer = (GLEEPFNGLFRAMEBUFFERRENDERBUFFERPROC) __GLeeGetProcAddress("glFramebufferRenderbuffer"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetFramebufferAttachmentParameteriv = (GLEEPFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC) __GLeeGetProcAddress("glGetFramebufferAttachmentParameteriv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGenerateMipmap = (GLEEPFNGLGENERATEMIPMAPPROC) __GLeeGetProcAddress("glGenerateMipmap"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glBlitFramebuffer = (GLEEPFNGLBLITFRAMEBUFFERPROC) __GLeeGetProcAddress("glBlitFramebuffer"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glRenderbufferStorageMultisample = (GLEEPFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC) __GLeeGetProcAddress("glRenderbufferStorageMultisample"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glFramebufferTextureLayer = (GLEEPFNGLFRAMEBUFFERTEXTURELAYERPROC) __GLeeGetProcAddress("glFramebufferTextureLayer"))!=0) nLinked++;
+#endif
+    if (nLinked==20) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_ARB_framebuffer_sRGB(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_ARB_geometry_shader4(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_ARB_geometry_shader4
+    if ((GLeeFuncPtr_glProgramParameteriARB = (GLEEPFNGLPROGRAMPARAMETERIARBPROC) __GLeeGetProcAddress("glProgramParameteriARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glFramebufferTextureARB = (GLEEPFNGLFRAMEBUFFERTEXTUREARBPROC) __GLeeGetProcAddress("glFramebufferTextureARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glFramebufferTextureLayerARB = (GLEEPFNGLFRAMEBUFFERTEXTURELAYERARBPROC) __GLeeGetProcAddress("glFramebufferTextureLayerARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glFramebufferTextureFaceARB = (GLEEPFNGLFRAMEBUFFERTEXTUREFACEARBPROC) __GLeeGetProcAddress("glFramebufferTextureFaceARB"))!=0) nLinked++;
+#endif
+    if (nLinked==4) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_ARB_half_float_vertex(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_ARB_instanced_arrays(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_ARB_instanced_arrays
+    if ((GLeeFuncPtr_glVertexAttribDivisorARB = (GLEEPFNGLVERTEXATTRIBDIVISORARBPROC) __GLeeGetProcAddress("glVertexAttribDivisorARB"))!=0) nLinked++;
+#endif
+    if (nLinked==1) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_ARB_map_buffer_range(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_ARB_map_buffer_range
+    if ((GLeeFuncPtr_glMapBufferRange = (GLEEPFNGLMAPBUFFERRANGEPROC) __GLeeGetProcAddress("glMapBufferRange"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glFlushMappedBufferRange = (GLEEPFNGLFLUSHMAPPEDBUFFERRANGEPROC) __GLeeGetProcAddress("glFlushMappedBufferRange"))!=0) nLinked++;
+#endif
+    if (nLinked==2) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_ARB_texture_buffer_object(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_ARB_texture_buffer_object
+    if ((GLeeFuncPtr_glTexBufferARB = (GLEEPFNGLTEXBUFFERARBPROC) __GLeeGetProcAddress("glTexBufferARB"))!=0) nLinked++;
+#endif
+    if (nLinked==1) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_ARB_texture_compression_rgtc(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_ARB_texture_rg(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_ARB_vertex_array_object(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_ARB_vertex_array_object
+    if ((GLeeFuncPtr_glBindVertexArray = (GLEEPFNGLBINDVERTEXARRAYPROC) __GLeeGetProcAddress("glBindVertexArray"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glDeleteVertexArrays = (GLEEPFNGLDELETEVERTEXARRAYSPROC) __GLeeGetProcAddress("glDeleteVertexArrays"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGenVertexArrays = (GLEEPFNGLGENVERTEXARRAYSPROC) __GLeeGetProcAddress("glGenVertexArrays"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glIsVertexArray = (GLEEPFNGLISVERTEXARRAYPROC) __GLeeGetProcAddress("glIsVertexArray"))!=0) nLinked++;
+#endif
+    if (nLinked==4) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_ARB_uniform_buffer_object(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_ARB_uniform_buffer_object
+    if ((GLeeFuncPtr_glGetUniformIndices = (GLEEPFNGLGETUNIFORMINDICESPROC) __GLeeGetProcAddress("glGetUniformIndices"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetActiveUniformsiv = (GLEEPFNGLGETACTIVEUNIFORMSIVPROC) __GLeeGetProcAddress("glGetActiveUniformsiv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetActiveUniformName = (GLEEPFNGLGETACTIVEUNIFORMNAMEPROC) __GLeeGetProcAddress("glGetActiveUniformName"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetUniformBlockIndex = (GLEEPFNGLGETUNIFORMBLOCKINDEXPROC) __GLeeGetProcAddress("glGetUniformBlockIndex"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetActiveUniformBlockiv = (GLEEPFNGLGETACTIVEUNIFORMBLOCKIVPROC) __GLeeGetProcAddress("glGetActiveUniformBlockiv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetActiveUniformBlockName = (GLEEPFNGLGETACTIVEUNIFORMBLOCKNAMEPROC) __GLeeGetProcAddress("glGetActiveUniformBlockName"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glUniformBlockBinding = (GLEEPFNGLUNIFORMBLOCKBINDINGPROC) __GLeeGetProcAddress("glUniformBlockBinding"))!=0) nLinked++;
+#endif
+    if (nLinked==7) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_ARB_compatibility(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_ARB_copy_buffer(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_ARB_copy_buffer
+    if ((GLeeFuncPtr_glCopyBufferSubData = (GLEEPFNGLCOPYBUFFERSUBDATAPROC) __GLeeGetProcAddress("glCopyBufferSubData"))!=0) nLinked++;
+#endif
+    if (nLinked==1) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_ARB_shader_texture_lod(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_ARB_depth_clamp(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_ARB_draw_elements_base_vertex(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_ARB_draw_elements_base_vertex
+    if ((GLeeFuncPtr_glDrawElementsBaseVertex = (GLEEPFNGLDRAWELEMENTSBASEVERTEXPROC) __GLeeGetProcAddress("glDrawElementsBaseVertex"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glDrawRangeElementsBaseVertex = (GLEEPFNGLDRAWRANGEELEMENTSBASEVERTEXPROC) __GLeeGetProcAddress("glDrawRangeElementsBaseVertex"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glDrawElementsInstancedBaseVertex = (GLEEPFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC) __GLeeGetProcAddress("glDrawElementsInstancedBaseVertex"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMultiDrawElementsBaseVertex = (GLEEPFNGLMULTIDRAWELEMENTSBASEVERTEXPROC) __GLeeGetProcAddress("glMultiDrawElementsBaseVertex"))!=0) nLinked++;
+#endif
+    if (nLinked==4) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_ARB_fragment_coord_conventions(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_ARB_provoking_vertex(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_ARB_provoking_vertex
+    if ((GLeeFuncPtr_glProvokingVertex = (GLEEPFNGLPROVOKINGVERTEXPROC) __GLeeGetProcAddress("glProvokingVertex"))!=0) nLinked++;
+#endif
+    if (nLinked==1) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_ARB_seamless_cube_map(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_ARB_sync(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_ARB_sync
+    if ((GLeeFuncPtr_glFenceSync = (GLEEPFNGLFENCESYNCPROC) __GLeeGetProcAddress("glFenceSync"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glIsSync = (GLEEPFNGLISSYNCPROC) __GLeeGetProcAddress("glIsSync"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glDeleteSync = (GLEEPFNGLDELETESYNCPROC) __GLeeGetProcAddress("glDeleteSync"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glClientWaitSync = (GLEEPFNGLCLIENTWAITSYNCPROC) __GLeeGetProcAddress("glClientWaitSync"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glWaitSync = (GLEEPFNGLWAITSYNCPROC) __GLeeGetProcAddress("glWaitSync"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetInteger64v = (GLEEPFNGLGETINTEGER64VPROC) __GLeeGetProcAddress("glGetInteger64v"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetSynciv = (GLEEPFNGLGETSYNCIVPROC) __GLeeGetProcAddress("glGetSynciv"))!=0) nLinked++;
+#endif
+    if (nLinked==7) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_ARB_texture_multisample(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_ARB_texture_multisample
+    if ((GLeeFuncPtr_glTexImage2DMultisample = (GLEEPFNGLTEXIMAGE2DMULTISAMPLEPROC) __GLeeGetProcAddress("glTexImage2DMultisample"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glTexImage3DMultisample = (GLEEPFNGLTEXIMAGE3DMULTISAMPLEPROC) __GLeeGetProcAddress("glTexImage3DMultisample"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetMultisamplefv = (GLEEPFNGLGETMULTISAMPLEFVPROC) __GLeeGetProcAddress("glGetMultisamplefv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glSampleMaski = (GLEEPFNGLSAMPLEMASKIPROC) __GLeeGetProcAddress("glSampleMaski"))!=0) nLinked++;
+#endif
+    if (nLinked==4) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_ARB_vertex_array_bgra(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_ARB_draw_buffers_blend(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_ARB_draw_buffers_blend
+    if ((GLeeFuncPtr_glBlendEquationiARB = (GLEEPFNGLBLENDEQUATIONIARBPROC) __GLeeGetProcAddress("glBlendEquationiARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glBlendEquationSeparateiARB = (GLEEPFNGLBLENDEQUATIONSEPARATEIARBPROC) __GLeeGetProcAddress("glBlendEquationSeparateiARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glBlendFunciARB = (GLEEPFNGLBLENDFUNCIARBPROC) __GLeeGetProcAddress("glBlendFunciARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glBlendFuncSeparateiARB = (GLEEPFNGLBLENDFUNCSEPARATEIARBPROC) __GLeeGetProcAddress("glBlendFuncSeparateiARB"))!=0) nLinked++;
+#endif
+    if (nLinked==4) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_ARB_sample_shading(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_ARB_sample_shading
+    if ((GLeeFuncPtr_glMinSampleShadingARB = (GLEEPFNGLMINSAMPLESHADINGARBPROC) __GLeeGetProcAddress("glMinSampleShadingARB"))!=0) nLinked++;
+#endif
+    if (nLinked==1) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_ARB_texture_cube_map_array(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_ARB_texture_gather(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_ARB_texture_query_lod(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_ARB_shading_language_include(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_ARB_shading_language_include
+    if ((GLeeFuncPtr_glNamedStringARB = (GLEEPFNGLNAMEDSTRINGARBPROC) __GLeeGetProcAddress("glNamedStringARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glDeleteNamedStringARB = (GLEEPFNGLDELETENAMEDSTRINGARBPROC) __GLeeGetProcAddress("glDeleteNamedStringARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glCompileShaderIncludeARB = (GLEEPFNGLCOMPILESHADERINCLUDEARBPROC) __GLeeGetProcAddress("glCompileShaderIncludeARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glIsNamedStringARB = (GLEEPFNGLISNAMEDSTRINGARBPROC) __GLeeGetProcAddress("glIsNamedStringARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetNamedStringARB = (GLEEPFNGLGETNAMEDSTRINGARBPROC) __GLeeGetProcAddress("glGetNamedStringARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetNamedStringivARB = (GLEEPFNGLGETNAMEDSTRINGIVARBPROC) __GLeeGetProcAddress("glGetNamedStringivARB"))!=0) nLinked++;
+#endif
+    if (nLinked==6) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_ARB_texture_compression_bptc(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_ARB_blend_func_extended(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_ARB_blend_func_extended
+    if ((GLeeFuncPtr_glBindFragDataLocationIndexed = (GLEEPFNGLBINDFRAGDATALOCATIONINDEXEDPROC) __GLeeGetProcAddress("glBindFragDataLocationIndexed"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetFragDataIndex = (GLEEPFNGLGETFRAGDATAINDEXPROC) __GLeeGetProcAddress("glGetFragDataIndex"))!=0) nLinked++;
+#endif
+    if (nLinked==2) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_ARB_explicit_attrib_location(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_ARB_occlusion_query2(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_ARB_sampler_objects(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_ARB_sampler_objects
+    if ((GLeeFuncPtr_glGenSamplers = (GLEEPFNGLGENSAMPLERSPROC) __GLeeGetProcAddress("glGenSamplers"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glDeleteSamplers = (GLEEPFNGLDELETESAMPLERSPROC) __GLeeGetProcAddress("glDeleteSamplers"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glIsSampler = (GLEEPFNGLISSAMPLERPROC) __GLeeGetProcAddress("glIsSampler"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glBindSampler = (GLEEPFNGLBINDSAMPLERPROC) __GLeeGetProcAddress("glBindSampler"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glSamplerParameteri = (GLEEPFNGLSAMPLERPARAMETERIPROC) __GLeeGetProcAddress("glSamplerParameteri"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glSamplerParameteriv = (GLEEPFNGLSAMPLERPARAMETERIVPROC) __GLeeGetProcAddress("glSamplerParameteriv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glSamplerParameterf = (GLEEPFNGLSAMPLERPARAMETERFPROC) __GLeeGetProcAddress("glSamplerParameterf"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glSamplerParameterfv = (GLEEPFNGLSAMPLERPARAMETERFVPROC) __GLeeGetProcAddress("glSamplerParameterfv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glSamplerParameterIiv = (GLEEPFNGLSAMPLERPARAMETERIIVPROC) __GLeeGetProcAddress("glSamplerParameterIiv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glSamplerParameterIuiv = (GLEEPFNGLSAMPLERPARAMETERIUIVPROC) __GLeeGetProcAddress("glSamplerParameterIuiv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetSamplerParameteriv = (GLEEPFNGLGETSAMPLERPARAMETERIVPROC) __GLeeGetProcAddress("glGetSamplerParameteriv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetSamplerParameterIiv = (GLEEPFNGLGETSAMPLERPARAMETERIIVPROC) __GLeeGetProcAddress("glGetSamplerParameterIiv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetSamplerParameterfv = (GLEEPFNGLGETSAMPLERPARAMETERFVPROC) __GLeeGetProcAddress("glGetSamplerParameterfv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetSamplerParameterIuiv = (GLEEPFNGLGETSAMPLERPARAMETERIUIVPROC) __GLeeGetProcAddress("glGetSamplerParameterIuiv"))!=0) nLinked++;
+#endif
+    if (nLinked==14) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_ARB_shader_bit_encoding(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_ARB_texture_rgb10_a2ui(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_ARB_texture_swizzle(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_ARB_timer_query(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_ARB_timer_query
+    if ((GLeeFuncPtr_glQueryCounter = (GLEEPFNGLQUERYCOUNTERPROC) __GLeeGetProcAddress("glQueryCounter"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetQueryObjecti64v = (GLEEPFNGLGETQUERYOBJECTI64VPROC) __GLeeGetProcAddress("glGetQueryObjecti64v"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetQueryObjectui64v = (GLEEPFNGLGETQUERYOBJECTUI64VPROC) __GLeeGetProcAddress("glGetQueryObjectui64v"))!=0) nLinked++;
+#endif
+    if (nLinked==3) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_ARB_vertex_type_2_10_10_10_rev(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_ARB_vertex_type_2_10_10_10_rev
+    if ((GLeeFuncPtr_glVertexP2ui = (GLEEPFNGLVERTEXP2UIPROC) __GLeeGetProcAddress("glVertexP2ui"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexP2uiv = (GLEEPFNGLVERTEXP2UIVPROC) __GLeeGetProcAddress("glVertexP2uiv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexP3ui = (GLEEPFNGLVERTEXP3UIPROC) __GLeeGetProcAddress("glVertexP3ui"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexP3uiv = (GLEEPFNGLVERTEXP3UIVPROC) __GLeeGetProcAddress("glVertexP3uiv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexP4ui = (GLEEPFNGLVERTEXP4UIPROC) __GLeeGetProcAddress("glVertexP4ui"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexP4uiv = (GLEEPFNGLVERTEXP4UIVPROC) __GLeeGetProcAddress("glVertexP4uiv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glTexCoordP1ui = (GLEEPFNGLTEXCOORDP1UIPROC) __GLeeGetProcAddress("glTexCoordP1ui"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glTexCoordP1uiv = (GLEEPFNGLTEXCOORDP1UIVPROC) __GLeeGetProcAddress("glTexCoordP1uiv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glTexCoordP2ui = (GLEEPFNGLTEXCOORDP2UIPROC) __GLeeGetProcAddress("glTexCoordP2ui"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glTexCoordP2uiv = (GLEEPFNGLTEXCOORDP2UIVPROC) __GLeeGetProcAddress("glTexCoordP2uiv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glTexCoordP3ui = (GLEEPFNGLTEXCOORDP3UIPROC) __GLeeGetProcAddress("glTexCoordP3ui"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glTexCoordP3uiv = (GLEEPFNGLTEXCOORDP3UIVPROC) __GLeeGetProcAddress("glTexCoordP3uiv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glTexCoordP4ui = (GLEEPFNGLTEXCOORDP4UIPROC) __GLeeGetProcAddress("glTexCoordP4ui"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glTexCoordP4uiv = (GLEEPFNGLTEXCOORDP4UIVPROC) __GLeeGetProcAddress("glTexCoordP4uiv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMultiTexCoordP1ui = (GLEEPFNGLMULTITEXCOORDP1UIPROC) __GLeeGetProcAddress("glMultiTexCoordP1ui"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMultiTexCoordP1uiv = (GLEEPFNGLMULTITEXCOORDP1UIVPROC) __GLeeGetProcAddress("glMultiTexCoordP1uiv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMultiTexCoordP2ui = (GLEEPFNGLMULTITEXCOORDP2UIPROC) __GLeeGetProcAddress("glMultiTexCoordP2ui"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMultiTexCoordP2uiv = (GLEEPFNGLMULTITEXCOORDP2UIVPROC) __GLeeGetProcAddress("glMultiTexCoordP2uiv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMultiTexCoordP3ui = (GLEEPFNGLMULTITEXCOORDP3UIPROC) __GLeeGetProcAddress("glMultiTexCoordP3ui"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMultiTexCoordP3uiv = (GLEEPFNGLMULTITEXCOORDP3UIVPROC) __GLeeGetProcAddress("glMultiTexCoordP3uiv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMultiTexCoordP4ui = (GLEEPFNGLMULTITEXCOORDP4UIPROC) __GLeeGetProcAddress("glMultiTexCoordP4ui"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMultiTexCoordP4uiv = (GLEEPFNGLMULTITEXCOORDP4UIVPROC) __GLeeGetProcAddress("glMultiTexCoordP4uiv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glNormalP3ui = (GLEEPFNGLNORMALP3UIPROC) __GLeeGetProcAddress("glNormalP3ui"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glNormalP3uiv = (GLEEPFNGLNORMALP3UIVPROC) __GLeeGetProcAddress("glNormalP3uiv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glColorP3ui = (GLEEPFNGLCOLORP3UIPROC) __GLeeGetProcAddress("glColorP3ui"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glColorP3uiv = (GLEEPFNGLCOLORP3UIVPROC) __GLeeGetProcAddress("glColorP3uiv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glColorP4ui = (GLEEPFNGLCOLORP4UIPROC) __GLeeGetProcAddress("glColorP4ui"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glColorP4uiv = (GLEEPFNGLCOLORP4UIVPROC) __GLeeGetProcAddress("glColorP4uiv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glSecondaryColorP3ui = (GLEEPFNGLSECONDARYCOLORP3UIPROC) __GLeeGetProcAddress("glSecondaryColorP3ui"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glSecondaryColorP3uiv = (GLEEPFNGLSECONDARYCOLORP3UIVPROC) __GLeeGetProcAddress("glSecondaryColorP3uiv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttribP1ui = (GLEEPFNGLVERTEXATTRIBP1UIPROC) __GLeeGetProcAddress("glVertexAttribP1ui"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttribP1uiv = (GLEEPFNGLVERTEXATTRIBP1UIVPROC) __GLeeGetProcAddress("glVertexAttribP1uiv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttribP2ui = (GLEEPFNGLVERTEXATTRIBP2UIPROC) __GLeeGetProcAddress("glVertexAttribP2ui"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttribP2uiv = (GLEEPFNGLVERTEXATTRIBP2UIVPROC) __GLeeGetProcAddress("glVertexAttribP2uiv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttribP3ui = (GLEEPFNGLVERTEXATTRIBP3UIPROC) __GLeeGetProcAddress("glVertexAttribP3ui"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttribP3uiv = (GLEEPFNGLVERTEXATTRIBP3UIVPROC) __GLeeGetProcAddress("glVertexAttribP3uiv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttribP4ui = (GLEEPFNGLVERTEXATTRIBP4UIPROC) __GLeeGetProcAddress("glVertexAttribP4ui"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttribP4uiv = (GLEEPFNGLVERTEXATTRIBP4UIVPROC) __GLeeGetProcAddress("glVertexAttribP4uiv"))!=0) nLinked++;
+#endif
+    if (nLinked==38) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_ARB_draw_indirect(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_ARB_draw_indirect
+    if ((GLeeFuncPtr_glDrawArraysIndirect = (GLEEPFNGLDRAWARRAYSINDIRECTPROC) __GLeeGetProcAddress("glDrawArraysIndirect"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glDrawElementsIndirect = (GLEEPFNGLDRAWELEMENTSINDIRECTPROC) __GLeeGetProcAddress("glDrawElementsIndirect"))!=0) nLinked++;
+#endif
+    if (nLinked==2) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_ARB_gpu_shader5(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_ARB_gpu_shader_fp64(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_ARB_gpu_shader_fp64
+    if ((GLeeFuncPtr_glUniform1d = (GLEEPFNGLUNIFORM1DPROC) __GLeeGetProcAddress("glUniform1d"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glUniform2d = (GLEEPFNGLUNIFORM2DPROC) __GLeeGetProcAddress("glUniform2d"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glUniform3d = (GLEEPFNGLUNIFORM3DPROC) __GLeeGetProcAddress("glUniform3d"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glUniform4d = (GLEEPFNGLUNIFORM4DPROC) __GLeeGetProcAddress("glUniform4d"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glUniform1dv = (GLEEPFNGLUNIFORM1DVPROC) __GLeeGetProcAddress("glUniform1dv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glUniform2dv = (GLEEPFNGLUNIFORM2DVPROC) __GLeeGetProcAddress("glUniform2dv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glUniform3dv = (GLEEPFNGLUNIFORM3DVPROC) __GLeeGetProcAddress("glUniform3dv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glUniform4dv = (GLEEPFNGLUNIFORM4DVPROC) __GLeeGetProcAddress("glUniform4dv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glUniformMatrix2dv = (GLEEPFNGLUNIFORMMATRIX2DVPROC) __GLeeGetProcAddress("glUniformMatrix2dv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glUniformMatrix3dv = (GLEEPFNGLUNIFORMMATRIX3DVPROC) __GLeeGetProcAddress("glUniformMatrix3dv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glUniformMatrix4dv = (GLEEPFNGLUNIFORMMATRIX4DVPROC) __GLeeGetProcAddress("glUniformMatrix4dv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glUniformMatrix2x3dv = (GLEEPFNGLUNIFORMMATRIX2X3DVPROC) __GLeeGetProcAddress("glUniformMatrix2x3dv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glUniformMatrix2x4dv = (GLEEPFNGLUNIFORMMATRIX2X4DVPROC) __GLeeGetProcAddress("glUniformMatrix2x4dv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glUniformMatrix3x2dv = (GLEEPFNGLUNIFORMMATRIX3X2DVPROC) __GLeeGetProcAddress("glUniformMatrix3x2dv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glUniformMatrix3x4dv = (GLEEPFNGLUNIFORMMATRIX3X4DVPROC) __GLeeGetProcAddress("glUniformMatrix3x4dv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glUniformMatrix4x2dv = (GLEEPFNGLUNIFORMMATRIX4X2DVPROC) __GLeeGetProcAddress("glUniformMatrix4x2dv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glUniformMatrix4x3dv = (GLEEPFNGLUNIFORMMATRIX4X3DVPROC) __GLeeGetProcAddress("glUniformMatrix4x3dv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetUniformdv = (GLEEPFNGLGETUNIFORMDVPROC) __GLeeGetProcAddress("glGetUniformdv"))!=0) nLinked++;
+#endif
+    if (nLinked==18) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_ARB_shader_subroutine(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_ARB_shader_subroutine
+    if ((GLeeFuncPtr_glGetSubroutineUniformLocation = (GLEEPFNGLGETSUBROUTINEUNIFORMLOCATIONPROC) __GLeeGetProcAddress("glGetSubroutineUniformLocation"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetSubroutineIndex = (GLEEPFNGLGETSUBROUTINEINDEXPROC) __GLeeGetProcAddress("glGetSubroutineIndex"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetActiveSubroutineUniformiv = (GLEEPFNGLGETACTIVESUBROUTINEUNIFORMIVPROC) __GLeeGetProcAddress("glGetActiveSubroutineUniformiv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetActiveSubroutineUniformName = (GLEEPFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC) __GLeeGetProcAddress("glGetActiveSubroutineUniformName"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetActiveSubroutineName = (GLEEPFNGLGETACTIVESUBROUTINENAMEPROC) __GLeeGetProcAddress("glGetActiveSubroutineName"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glUniformSubroutinesuiv = (GLEEPFNGLUNIFORMSUBROUTINESUIVPROC) __GLeeGetProcAddress("glUniformSubroutinesuiv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetUniformSubroutineuiv = (GLEEPFNGLGETUNIFORMSUBROUTINEUIVPROC) __GLeeGetProcAddress("glGetUniformSubroutineuiv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetProgramStageiv = (GLEEPFNGLGETPROGRAMSTAGEIVPROC) __GLeeGetProcAddress("glGetProgramStageiv"))!=0) nLinked++;
+#endif
+    if (nLinked==8) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_ARB_tessellation_shader(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_ARB_tessellation_shader
+    if ((GLeeFuncPtr_glPatchParameteri = (GLEEPFNGLPATCHPARAMETERIPROC) __GLeeGetProcAddress("glPatchParameteri"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glPatchParameterfv = (GLEEPFNGLPATCHPARAMETERFVPROC) __GLeeGetProcAddress("glPatchParameterfv"))!=0) nLinked++;
+#endif
+    if (nLinked==2) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_ARB_texture_buffer_object_rgb32(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_ARB_transform_feedback2(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_ARB_transform_feedback2
+    if ((GLeeFuncPtr_glBindTransformFeedback = (GLEEPFNGLBINDTRANSFORMFEEDBACKPROC) __GLeeGetProcAddress("glBindTransformFeedback"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glDeleteTransformFeedbacks = (GLEEPFNGLDELETETRANSFORMFEEDBACKSPROC) __GLeeGetProcAddress("glDeleteTransformFeedbacks"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGenTransformFeedbacks = (GLEEPFNGLGENTRANSFORMFEEDBACKSPROC) __GLeeGetProcAddress("glGenTransformFeedbacks"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glIsTransformFeedback = (GLEEPFNGLISTRANSFORMFEEDBACKPROC) __GLeeGetProcAddress("glIsTransformFeedback"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glPauseTransformFeedback = (GLEEPFNGLPAUSETRANSFORMFEEDBACKPROC) __GLeeGetProcAddress("glPauseTransformFeedback"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glResumeTransformFeedback = (GLEEPFNGLRESUMETRANSFORMFEEDBACKPROC) __GLeeGetProcAddress("glResumeTransformFeedback"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glDrawTransformFeedback = (GLEEPFNGLDRAWTRANSFORMFEEDBACKPROC) __GLeeGetProcAddress("glDrawTransformFeedback"))!=0) nLinked++;
+#endif
+    if (nLinked==7) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_ARB_transform_feedback3(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_ARB_transform_feedback3
+    if ((GLeeFuncPtr_glDrawTransformFeedbackStream = (GLEEPFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC) __GLeeGetProcAddress("glDrawTransformFeedbackStream"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glBeginQueryIndexed = (GLEEPFNGLBEGINQUERYINDEXEDPROC) __GLeeGetProcAddress("glBeginQueryIndexed"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glEndQueryIndexed = (GLEEPFNGLENDQUERYINDEXEDPROC) __GLeeGetProcAddress("glEndQueryIndexed"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetQueryIndexediv = (GLEEPFNGLGETQUERYINDEXEDIVPROC) __GLeeGetProcAddress("glGetQueryIndexediv"))!=0) nLinked++;
+#endif
+    if (nLinked==4) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_ARB_ES2_compatibility(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_ARB_ES2_compatibility
+    if ((GLeeFuncPtr_glReleaseShaderCompiler = (GLEEPFNGLRELEASESHADERCOMPILERPROC) __GLeeGetProcAddress("glReleaseShaderCompiler"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glShaderBinary = (GLEEPFNGLSHADERBINARYPROC) __GLeeGetProcAddress("glShaderBinary"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetShaderPrecisionFormat = (GLEEPFNGLGETSHADERPRECISIONFORMATPROC) __GLeeGetProcAddress("glGetShaderPrecisionFormat"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glDepthRangef = (GLEEPFNGLDEPTHRANGEFPROC) __GLeeGetProcAddress("glDepthRangef"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glClearDepthf = (GLEEPFNGLCLEARDEPTHFPROC) __GLeeGetProcAddress("glClearDepthf"))!=0) nLinked++;
+#endif
+    if (nLinked==5) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_ARB_get_program_binary(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_ARB_get_program_binary
+    if ((GLeeFuncPtr_glGetProgramBinary = (GLEEPFNGLGETPROGRAMBINARYPROC) __GLeeGetProcAddress("glGetProgramBinary"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramBinary = (GLEEPFNGLPROGRAMBINARYPROC) __GLeeGetProcAddress("glProgramBinary"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramParameteri = (GLEEPFNGLPROGRAMPARAMETERIPROC) __GLeeGetProcAddress("glProgramParameteri"))!=0) nLinked++;
+#endif
+    if (nLinked==3) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_ARB_separate_shader_objects(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_ARB_separate_shader_objects
+    if ((GLeeFuncPtr_glUseProgramStages = (GLEEPFNGLUSEPROGRAMSTAGESPROC) __GLeeGetProcAddress("glUseProgramStages"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glActiveShaderProgram = (GLEEPFNGLACTIVESHADERPROGRAMPROC) __GLeeGetProcAddress("glActiveShaderProgram"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glCreateShaderProgramv = (GLEEPFNGLCREATESHADERPROGRAMVPROC) __GLeeGetProcAddress("glCreateShaderProgramv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glBindProgramPipeline = (GLEEPFNGLBINDPROGRAMPIPELINEPROC) __GLeeGetProcAddress("glBindProgramPipeline"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glDeleteProgramPipelines = (GLEEPFNGLDELETEPROGRAMPIPELINESPROC) __GLeeGetProcAddress("glDeleteProgramPipelines"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGenProgramPipelines = (GLEEPFNGLGENPROGRAMPIPELINESPROC) __GLeeGetProcAddress("glGenProgramPipelines"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glIsProgramPipeline = (GLEEPFNGLISPROGRAMPIPELINEPROC) __GLeeGetProcAddress("glIsProgramPipeline"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetProgramPipelineiv = (GLEEPFNGLGETPROGRAMPIPELINEIVPROC) __GLeeGetProcAddress("glGetProgramPipelineiv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramUniform1i = (GLEEPFNGLPROGRAMUNIFORM1IPROC) __GLeeGetProcAddress("glProgramUniform1i"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramUniform1iv = (GLEEPFNGLPROGRAMUNIFORM1IVPROC) __GLeeGetProcAddress("glProgramUniform1iv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramUniform1f = (GLEEPFNGLPROGRAMUNIFORM1FPROC) __GLeeGetProcAddress("glProgramUniform1f"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramUniform1fv = (GLEEPFNGLPROGRAMUNIFORM1FVPROC) __GLeeGetProcAddress("glProgramUniform1fv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramUniform1d = (GLEEPFNGLPROGRAMUNIFORM1DPROC) __GLeeGetProcAddress("glProgramUniform1d"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramUniform1dv = (GLEEPFNGLPROGRAMUNIFORM1DVPROC) __GLeeGetProcAddress("glProgramUniform1dv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramUniform1ui = (GLEEPFNGLPROGRAMUNIFORM1UIPROC) __GLeeGetProcAddress("glProgramUniform1ui"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramUniform1uiv = (GLEEPFNGLPROGRAMUNIFORM1UIVPROC) __GLeeGetProcAddress("glProgramUniform1uiv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramUniform2i = (GLEEPFNGLPROGRAMUNIFORM2IPROC) __GLeeGetProcAddress("glProgramUniform2i"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramUniform2iv = (GLEEPFNGLPROGRAMUNIFORM2IVPROC) __GLeeGetProcAddress("glProgramUniform2iv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramUniform2f = (GLEEPFNGLPROGRAMUNIFORM2FPROC) __GLeeGetProcAddress("glProgramUniform2f"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramUniform2fv = (GLEEPFNGLPROGRAMUNIFORM2FVPROC) __GLeeGetProcAddress("glProgramUniform2fv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramUniform2d = (GLEEPFNGLPROGRAMUNIFORM2DPROC) __GLeeGetProcAddress("glProgramUniform2d"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramUniform2dv = (GLEEPFNGLPROGRAMUNIFORM2DVPROC) __GLeeGetProcAddress("glProgramUniform2dv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramUniform2ui = (GLEEPFNGLPROGRAMUNIFORM2UIPROC) __GLeeGetProcAddress("glProgramUniform2ui"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramUniform2uiv = (GLEEPFNGLPROGRAMUNIFORM2UIVPROC) __GLeeGetProcAddress("glProgramUniform2uiv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramUniform3i = (GLEEPFNGLPROGRAMUNIFORM3IPROC) __GLeeGetProcAddress("glProgramUniform3i"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramUniform3iv = (GLEEPFNGLPROGRAMUNIFORM3IVPROC) __GLeeGetProcAddress("glProgramUniform3iv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramUniform3f = (GLEEPFNGLPROGRAMUNIFORM3FPROC) __GLeeGetProcAddress("glProgramUniform3f"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramUniform3fv = (GLEEPFNGLPROGRAMUNIFORM3FVPROC) __GLeeGetProcAddress("glProgramUniform3fv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramUniform3d = (GLEEPFNGLPROGRAMUNIFORM3DPROC) __GLeeGetProcAddress("glProgramUniform3d"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramUniform3dv = (GLEEPFNGLPROGRAMUNIFORM3DVPROC) __GLeeGetProcAddress("glProgramUniform3dv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramUniform3ui = (GLEEPFNGLPROGRAMUNIFORM3UIPROC) __GLeeGetProcAddress("glProgramUniform3ui"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramUniform3uiv = (GLEEPFNGLPROGRAMUNIFORM3UIVPROC) __GLeeGetProcAddress("glProgramUniform3uiv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramUniform4i = (GLEEPFNGLPROGRAMUNIFORM4IPROC) __GLeeGetProcAddress("glProgramUniform4i"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramUniform4iv = (GLEEPFNGLPROGRAMUNIFORM4IVPROC) __GLeeGetProcAddress("glProgramUniform4iv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramUniform4f = (GLEEPFNGLPROGRAMUNIFORM4FPROC) __GLeeGetProcAddress("glProgramUniform4f"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramUniform4fv = (GLEEPFNGLPROGRAMUNIFORM4FVPROC) __GLeeGetProcAddress("glProgramUniform4fv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramUniform4d = (GLEEPFNGLPROGRAMUNIFORM4DPROC) __GLeeGetProcAddress("glProgramUniform4d"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramUniform4dv = (GLEEPFNGLPROGRAMUNIFORM4DVPROC) __GLeeGetProcAddress("glProgramUniform4dv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramUniform4ui = (GLEEPFNGLPROGRAMUNIFORM4UIPROC) __GLeeGetProcAddress("glProgramUniform4ui"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramUniform4uiv = (GLEEPFNGLPROGRAMUNIFORM4UIVPROC) __GLeeGetProcAddress("glProgramUniform4uiv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramUniformMatrix2fv = (GLEEPFNGLPROGRAMUNIFORMMATRIX2FVPROC) __GLeeGetProcAddress("glProgramUniformMatrix2fv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramUniformMatrix3fv = (GLEEPFNGLPROGRAMUNIFORMMATRIX3FVPROC) __GLeeGetProcAddress("glProgramUniformMatrix3fv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramUniformMatrix4fv = (GLEEPFNGLPROGRAMUNIFORMMATRIX4FVPROC) __GLeeGetProcAddress("glProgramUniformMatrix4fv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramUniformMatrix2dv = (GLEEPFNGLPROGRAMUNIFORMMATRIX2DVPROC) __GLeeGetProcAddress("glProgramUniformMatrix2dv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramUniformMatrix3dv = (GLEEPFNGLPROGRAMUNIFORMMATRIX3DVPROC) __GLeeGetProcAddress("glProgramUniformMatrix3dv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramUniformMatrix4dv = (GLEEPFNGLPROGRAMUNIFORMMATRIX4DVPROC) __GLeeGetProcAddress("glProgramUniformMatrix4dv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramUniformMatrix2x3fv = (GLEEPFNGLPROGRAMUNIFORMMATRIX2X3FVPROC) __GLeeGetProcAddress("glProgramUniformMatrix2x3fv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramUniformMatrix3x2fv = (GLEEPFNGLPROGRAMUNIFORMMATRIX3X2FVPROC) __GLeeGetProcAddress("glProgramUniformMatrix3x2fv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramUniformMatrix2x4fv = (GLEEPFNGLPROGRAMUNIFORMMATRIX2X4FVPROC) __GLeeGetProcAddress("glProgramUniformMatrix2x4fv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramUniformMatrix4x2fv = (GLEEPFNGLPROGRAMUNIFORMMATRIX4X2FVPROC) __GLeeGetProcAddress("glProgramUniformMatrix4x2fv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramUniformMatrix3x4fv = (GLEEPFNGLPROGRAMUNIFORMMATRIX3X4FVPROC) __GLeeGetProcAddress("glProgramUniformMatrix3x4fv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramUniformMatrix4x3fv = (GLEEPFNGLPROGRAMUNIFORMMATRIX4X3FVPROC) __GLeeGetProcAddress("glProgramUniformMatrix4x3fv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramUniformMatrix2x3dv = (GLEEPFNGLPROGRAMUNIFORMMATRIX2X3DVPROC) __GLeeGetProcAddress("glProgramUniformMatrix2x3dv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramUniformMatrix3x2dv = (GLEEPFNGLPROGRAMUNIFORMMATRIX3X2DVPROC) __GLeeGetProcAddress("glProgramUniformMatrix3x2dv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramUniformMatrix2x4dv = (GLEEPFNGLPROGRAMUNIFORMMATRIX2X4DVPROC) __GLeeGetProcAddress("glProgramUniformMatrix2x4dv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramUniformMatrix4x2dv = (GLEEPFNGLPROGRAMUNIFORMMATRIX4X2DVPROC) __GLeeGetProcAddress("glProgramUniformMatrix4x2dv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramUniformMatrix3x4dv = (GLEEPFNGLPROGRAMUNIFORMMATRIX3X4DVPROC) __GLeeGetProcAddress("glProgramUniformMatrix3x4dv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramUniformMatrix4x3dv = (GLEEPFNGLPROGRAMUNIFORMMATRIX4X3DVPROC) __GLeeGetProcAddress("glProgramUniformMatrix4x3dv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glValidateProgramPipeline = (GLEEPFNGLVALIDATEPROGRAMPIPELINEPROC) __GLeeGetProcAddress("glValidateProgramPipeline"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetProgramPipelineInfoLog = (GLEEPFNGLGETPROGRAMPIPELINEINFOLOGPROC) __GLeeGetProcAddress("glGetProgramPipelineInfoLog"))!=0) nLinked++;
+#endif
+    if (nLinked==60) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_ARB_shader_precision(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_ARB_vertex_attrib_64bit(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_ARB_vertex_attrib_64bit
+    if ((GLeeFuncPtr_glVertexAttribL1d = (GLEEPFNGLVERTEXATTRIBL1DPROC) __GLeeGetProcAddress("glVertexAttribL1d"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttribL2d = (GLEEPFNGLVERTEXATTRIBL2DPROC) __GLeeGetProcAddress("glVertexAttribL2d"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttribL3d = (GLEEPFNGLVERTEXATTRIBL3DPROC) __GLeeGetProcAddress("glVertexAttribL3d"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttribL4d = (GLEEPFNGLVERTEXATTRIBL4DPROC) __GLeeGetProcAddress("glVertexAttribL4d"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttribL1dv = (GLEEPFNGLVERTEXATTRIBL1DVPROC) __GLeeGetProcAddress("glVertexAttribL1dv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttribL2dv = (GLEEPFNGLVERTEXATTRIBL2DVPROC) __GLeeGetProcAddress("glVertexAttribL2dv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttribL3dv = (GLEEPFNGLVERTEXATTRIBL3DVPROC) __GLeeGetProcAddress("glVertexAttribL3dv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttribL4dv = (GLEEPFNGLVERTEXATTRIBL4DVPROC) __GLeeGetProcAddress("glVertexAttribL4dv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttribLPointer = (GLEEPFNGLVERTEXATTRIBLPOINTERPROC) __GLeeGetProcAddress("glVertexAttribLPointer"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetVertexAttribLdv = (GLEEPFNGLGETVERTEXATTRIBLDVPROC) __GLeeGetProcAddress("glGetVertexAttribLdv"))!=0) nLinked++;
+#endif
+    if (nLinked==10) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_ARB_viewport_array(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_ARB_viewport_array
+    if ((GLeeFuncPtr_glViewportArrayv = (GLEEPFNGLVIEWPORTARRAYVPROC) __GLeeGetProcAddress("glViewportArrayv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glViewportIndexedf = (GLEEPFNGLVIEWPORTINDEXEDFPROC) __GLeeGetProcAddress("glViewportIndexedf"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glViewportIndexedfv = (GLEEPFNGLVIEWPORTINDEXEDFVPROC) __GLeeGetProcAddress("glViewportIndexedfv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glScissorArrayv = (GLEEPFNGLSCISSORARRAYVPROC) __GLeeGetProcAddress("glScissorArrayv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glScissorIndexed = (GLEEPFNGLSCISSORINDEXEDPROC) __GLeeGetProcAddress("glScissorIndexed"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glScissorIndexedv = (GLEEPFNGLSCISSORINDEXEDVPROC) __GLeeGetProcAddress("glScissorIndexedv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glDepthRangeArrayv = (GLEEPFNGLDEPTHRANGEARRAYVPROC) __GLeeGetProcAddress("glDepthRangeArrayv"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glDepthRangeIndexed = (GLEEPFNGLDEPTHRANGEINDEXEDPROC) __GLeeGetProcAddress("glDepthRangeIndexed"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetFloati_v = (GLEEPFNGLGETFLOATI_VPROC) __GLeeGetProcAddress("glGetFloati_v"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetDoublei_v = (GLEEPFNGLGETDOUBLEI_VPROC) __GLeeGetProcAddress("glGetDoublei_v"))!=0) nLinked++;
+#endif
+    if (nLinked==10) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_ARB_cl_event(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_ARB_cl_event
+    if ((GLeeFuncPtr_glCreateSyncFromCLeventARB = (GLEEPFNGLCREATESYNCFROMCLEVENTARBPROC) __GLeeGetProcAddress("glCreateSyncFromCLeventARB"))!=0) nLinked++;
+#endif
+    if (nLinked==1) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_ARB_robustness(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_ARB_robustness
+    if ((GLeeFuncPtr_glGetGraphicsResetStatusARB = (GLEEPFNGLGETGRAPHICSRESETSTATUSARBPROC) __GLeeGetProcAddress("glGetGraphicsResetStatusARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetnMapdvARB = (GLEEPFNGLGETNMAPDVARBPROC) __GLeeGetProcAddress("glGetnMapdvARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetnMapfvARB = (GLEEPFNGLGETNMAPFVARBPROC) __GLeeGetProcAddress("glGetnMapfvARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetnMapivARB = (GLEEPFNGLGETNMAPIVARBPROC) __GLeeGetProcAddress("glGetnMapivARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetnPixelMapfvARB = (GLEEPFNGLGETNPIXELMAPFVARBPROC) __GLeeGetProcAddress("glGetnPixelMapfvARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetnPixelMapuivARB = (GLEEPFNGLGETNPIXELMAPUIVARBPROC) __GLeeGetProcAddress("glGetnPixelMapuivARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetnPixelMapusvARB = (GLEEPFNGLGETNPIXELMAPUSVARBPROC) __GLeeGetProcAddress("glGetnPixelMapusvARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetnPolygonStippleARB = (GLEEPFNGLGETNPOLYGONSTIPPLEARBPROC) __GLeeGetProcAddress("glGetnPolygonStippleARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetnColorTableARB = (GLEEPFNGLGETNCOLORTABLEARBPROC) __GLeeGetProcAddress("glGetnColorTableARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetnConvolutionFilterARB = (GLEEPFNGLGETNCONVOLUTIONFILTERARBPROC) __GLeeGetProcAddress("glGetnConvolutionFilterARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetnSeparableFilterARB = (GLEEPFNGLGETNSEPARABLEFILTERARBPROC) __GLeeGetProcAddress("glGetnSeparableFilterARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetnHistogramARB = (GLEEPFNGLGETNHISTOGRAMARBPROC) __GLeeGetProcAddress("glGetnHistogramARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetnMinmaxARB = (GLEEPFNGLGETNMINMAXARBPROC) __GLeeGetProcAddress("glGetnMinmaxARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetnTexImageARB = (GLEEPFNGLGETNTEXIMAGEARBPROC) __GLeeGetProcAddress("glGetnTexImageARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glReadnPixelsARB = (GLEEPFNGLREADNPIXELSARBPROC) __GLeeGetProcAddress("glReadnPixelsARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetnCompressedTexImageARB = (GLEEPFNGLGETNCOMPRESSEDTEXIMAGEARBPROC) __GLeeGetProcAddress("glGetnCompressedTexImageARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetnUniformfvARB = (GLEEPFNGLGETNUNIFORMFVARBPROC) __GLeeGetProcAddress("glGetnUniformfvARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetnUniformivARB = (GLEEPFNGLGETNUNIFORMIVARBPROC) __GLeeGetProcAddress("glGetnUniformivARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetnUniformuivARB = (GLEEPFNGLGETNUNIFORMUIVARBPROC) __GLeeGetProcAddress("glGetnUniformuivARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetnUniformdvARB = (GLEEPFNGLGETNUNIFORMDVARBPROC) __GLeeGetProcAddress("glGetnUniformdvARB"))!=0) nLinked++;
+#endif
+    if (nLinked==20) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_ARB_shader_stencil_export(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_ARB_base_instance(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_ARB_base_instance
+    if ((GLeeFuncPtr_glDrawArraysInstancedBaseInstance = (GLEEPFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC) __GLeeGetProcAddress("glDrawArraysInstancedBaseInstance"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glDrawElementsInstancedBaseInstance = (GLEEPFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC) __GLeeGetProcAddress("glDrawElementsInstancedBaseInstance"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glDrawElementsInstancedBaseVertexBaseInstance = (GLEEPFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC) __GLeeGetProcAddress("glDrawElementsInstancedBaseVertexBaseInstance"))!=0) nLinked++;
+#endif
+    if (nLinked==3) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_ARB_shading_language_420pack(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_ARB_transform_feedback_instanced(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_ARB_transform_feedback_instanced
+    if ((GLeeFuncPtr_glDrawTransformFeedbackInstanced = (GLEEPFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC) __GLeeGetProcAddress("glDrawTransformFeedbackInstanced"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glDrawTransformFeedbackStreamInstanced = (GLEEPFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC) __GLeeGetProcAddress("glDrawTransformFeedbackStreamInstanced"))!=0) nLinked++;
+#endif
+    if (nLinked==2) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_ARB_compressed_texture_pixel_storage(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_ARB_conservative_depth(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_ARB_internalformat_query(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_ARB_internalformat_query
+    if ((GLeeFuncPtr_glGetInternalformativ = (GLEEPFNGLGETINTERNALFORMATIVPROC) __GLeeGetProcAddress("glGetInternalformativ"))!=0) nLinked++;
+#endif
+    if (nLinked==1) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_ARB_map_buffer_alignment(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_ARB_shader_atomic_counters(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_ARB_shader_atomic_counters
+    if ((GLeeFuncPtr_glGetActiveAtomicCounterBufferiv = (GLEEPFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC) __GLeeGetProcAddress("glGetActiveAtomicCounterBufferiv"))!=0) nLinked++;
+#endif
+    if (nLinked==1) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_ARB_shader_image_load_store(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_ARB_shader_image_load_store
+    if ((GLeeFuncPtr_glBindImageTexture = (GLEEPFNGLBINDIMAGETEXTUREPROC) __GLeeGetProcAddress("glBindImageTexture"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMemoryBarrier = (GLEEPFNGLMEMORYBARRIERPROC) __GLeeGetProcAddress("glMemoryBarrier"))!=0) nLinked++;
+#endif
+    if (nLinked==2) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_ARB_shading_language_packing(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_ARB_texture_storage(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_ARB_texture_storage
+    if ((GLeeFuncPtr_glTexStorage1D = (GLEEPFNGLTEXSTORAGE1DPROC) __GLeeGetProcAddress("glTexStorage1D"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glTexStorage2D = (GLEEPFNGLTEXSTORAGE2DPROC) __GLeeGetProcAddress("glTexStorage2D"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glTexStorage3D = (GLEEPFNGLTEXSTORAGE3DPROC) __GLeeGetProcAddress("glTexStorage3D"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glTextureStorage1DEXT = (GLEEPFNGLTEXTURESTORAGE1DEXTPROC) __GLeeGetProcAddress("glTextureStorage1DEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glTextureStorage2DEXT = (GLEEPFNGLTEXTURESTORAGE2DEXTPROC) __GLeeGetProcAddress("glTextureStorage2DEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glTextureStorage3DEXT = (GLEEPFNGLTEXTURESTORAGE3DEXTPROC) __GLeeGetProcAddress("glTextureStorage3DEXT"))!=0) nLinked++;
+#endif
+    if (nLinked==6) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_EXT_abgr(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_EXT_blend_color(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_EXT_blend_color
+    if ((GLeeFuncPtr_glBlendColorEXT = (GLEEPFNGLBLENDCOLOREXTPROC) __GLeeGetProcAddress("glBlendColorEXT"))!=0) nLinked++;
+#endif
+    if (nLinked==1) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_EXT_polygon_offset(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_EXT_polygon_offset
+    if ((GLeeFuncPtr_glPolygonOffsetEXT = (GLEEPFNGLPOLYGONOFFSETEXTPROC) __GLeeGetProcAddress("glPolygonOffsetEXT"))!=0) nLinked++;
+#endif
+    if (nLinked==1) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_EXT_texture(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_EXT_texture3D(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_EXT_texture3D
+    if ((GLeeFuncPtr_glTexImage3DEXT = (GLEEPFNGLTEXIMAGE3DEXTPROC) __GLeeGetProcAddress("glTexImage3DEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glTexSubImage3DEXT = (GLEEPFNGLTEXSUBIMAGE3DEXTPROC) __GLeeGetProcAddress("glTexSubImage3DEXT"))!=0) nLinked++;
+#endif
+    if (nLinked==2) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_SGIS_texture_filter4(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_SGIS_texture_filter4
+    if ((GLeeFuncPtr_glGetTexFilterFuncSGIS = (GLEEPFNGLGETTEXFILTERFUNCSGISPROC) __GLeeGetProcAddress("glGetTexFilterFuncSGIS"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glTexFilterFuncSGIS = (GLEEPFNGLTEXFILTERFUNCSGISPROC) __GLeeGetProcAddress("glTexFilterFuncSGIS"))!=0) nLinked++;
+#endif
+    if (nLinked==2) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_EXT_subtexture(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_EXT_subtexture
+    if ((GLeeFuncPtr_glTexSubImage1DEXT = (GLEEPFNGLTEXSUBIMAGE1DEXTPROC) __GLeeGetProcAddress("glTexSubImage1DEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glTexSubImage2DEXT = (GLEEPFNGLTEXSUBIMAGE2DEXTPROC) __GLeeGetProcAddress("glTexSubImage2DEXT"))!=0) nLinked++;
+#endif
+    if (nLinked==2) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_EXT_copy_texture(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_EXT_copy_texture
+    if ((GLeeFuncPtr_glCopyTexImage1DEXT = (GLEEPFNGLCOPYTEXIMAGE1DEXTPROC) __GLeeGetProcAddress("glCopyTexImage1DEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glCopyTexImage2DEXT = (GLEEPFNGLCOPYTEXIMAGE2DEXTPROC) __GLeeGetProcAddress("glCopyTexImage2DEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glCopyTexSubImage1DEXT = (GLEEPFNGLCOPYTEXSUBIMAGE1DEXTPROC) __GLeeGetProcAddress("glCopyTexSubImage1DEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glCopyTexSubImage2DEXT = (GLEEPFNGLCOPYTEXSUBIMAGE2DEXTPROC) __GLeeGetProcAddress("glCopyTexSubImage2DEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glCopyTexSubImage3DEXT = (GLEEPFNGLCOPYTEXSUBIMAGE3DEXTPROC) __GLeeGetProcAddress("glCopyTexSubImage3DEXT"))!=0) nLinked++;
+#endif
+    if (nLinked==5) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_EXT_histogram(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_EXT_histogram
+    if ((GLeeFuncPtr_glGetHistogramEXT = (GLEEPFNGLGETHISTOGRAMEXTPROC) __GLeeGetProcAddress("glGetHistogramEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetHistogramParameterfvEXT = (GLEEPFNGLGETHISTOGRAMPARAMETERFVEXTPROC) __GLeeGetProcAddress("glGetHistogramParameterfvEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetHistogramParameterivEXT = (GLEEPFNGLGETHISTOGRAMPARAMETERIVEXTPROC) __GLeeGetProcAddress("glGetHistogramParameterivEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetMinmaxEXT = (GLEEPFNGLGETMINMAXEXTPROC) __GLeeGetProcAddress("glGetMinmaxEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetMinmaxParameterfvEXT = (GLEEPFNGLGETMINMAXPARAMETERFVEXTPROC) __GLeeGetProcAddress("glGetMinmaxParameterfvEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetMinmaxParameterivEXT = (GLEEPFNGLGETMINMAXPARAMETERIVEXTPROC) __GLeeGetProcAddress("glGetMinmaxParameterivEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glHistogramEXT = (GLEEPFNGLHISTOGRAMEXTPROC) __GLeeGetProcAddress("glHistogramEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMinmaxEXT = (GLEEPFNGLMINMAXEXTPROC) __GLeeGetProcAddress("glMinmaxEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glResetHistogramEXT = (GLEEPFNGLRESETHISTOGRAMEXTPROC) __GLeeGetProcAddress("glResetHistogramEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glResetMinmaxEXT = (GLEEPFNGLRESETMINMAXEXTPROC) __GLeeGetProcAddress("glResetMinmaxEXT"))!=0) nLinked++;
+#endif
+    if (nLinked==10) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_EXT_convolution(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_EXT_convolution
+    if ((GLeeFuncPtr_glConvolutionFilter1DEXT = (GLEEPFNGLCONVOLUTIONFILTER1DEXTPROC) __GLeeGetProcAddress("glConvolutionFilter1DEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glConvolutionFilter2DEXT = (GLEEPFNGLCONVOLUTIONFILTER2DEXTPROC) __GLeeGetProcAddress("glConvolutionFilter2DEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glConvolutionParameterfEXT = (GLEEPFNGLCONVOLUTIONPARAMETERFEXTPROC) __GLeeGetProcAddress("glConvolutionParameterfEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glConvolutionParameterfvEXT = (GLEEPFNGLCONVOLUTIONPARAMETERFVEXTPROC) __GLeeGetProcAddress("glConvolutionParameterfvEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glConvolutionParameteriEXT = (GLEEPFNGLCONVOLUTIONPARAMETERIEXTPROC) __GLeeGetProcAddress("glConvolutionParameteriEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glConvolutionParameterivEXT = (GLEEPFNGLCONVOLUTIONPARAMETERIVEXTPROC) __GLeeGetProcAddress("glConvolutionParameterivEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glCopyConvolutionFilter1DEXT = (GLEEPFNGLCOPYCONVOLUTIONFILTER1DEXTPROC) __GLeeGetProcAddress("glCopyConvolutionFilter1DEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glCopyConvolutionFilter2DEXT = (GLEEPFNGLCOPYCONVOLUTIONFILTER2DEXTPROC) __GLeeGetProcAddress("glCopyConvolutionFilter2DEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetConvolutionFilterEXT = (GLEEPFNGLGETCONVOLUTIONFILTEREXTPROC) __GLeeGetProcAddress("glGetConvolutionFilterEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetConvolutionParameterfvEXT = (GLEEPFNGLGETCONVOLUTIONPARAMETERFVEXTPROC) __GLeeGetProcAddress("glGetConvolutionParameterfvEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetConvolutionParameterivEXT = (GLEEPFNGLGETCONVOLUTIONPARAMETERIVEXTPROC) __GLeeGetProcAddress("glGetConvolutionParameterivEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetSeparableFilterEXT = (GLEEPFNGLGETSEPARABLEFILTEREXTPROC) __GLeeGetProcAddress("glGetSeparableFilterEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glSeparableFilter2DEXT = (GLEEPFNGLSEPARABLEFILTER2DEXTPROC) __GLeeGetProcAddress("glSeparableFilter2DEXT"))!=0) nLinked++;
+#endif
+    if (nLinked==13) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_SGI_color_matrix(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_SGI_color_table(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_SGI_color_table
+    if ((GLeeFuncPtr_glColorTableSGI = (GLEEPFNGLCOLORTABLESGIPROC) __GLeeGetProcAddress("glColorTableSGI"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glColorTableParameterfvSGI = (GLEEPFNGLCOLORTABLEPARAMETERFVSGIPROC) __GLeeGetProcAddress("glColorTableParameterfvSGI"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glColorTableParameterivSGI = (GLEEPFNGLCOLORTABLEPARAMETERIVSGIPROC) __GLeeGetProcAddress("glColorTableParameterivSGI"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glCopyColorTableSGI = (GLEEPFNGLCOPYCOLORTABLESGIPROC) __GLeeGetProcAddress("glCopyColorTableSGI"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetColorTableSGI = (GLEEPFNGLGETCOLORTABLESGIPROC) __GLeeGetProcAddress("glGetColorTableSGI"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetColorTableParameterfvSGI = (GLEEPFNGLGETCOLORTABLEPARAMETERFVSGIPROC) __GLeeGetProcAddress("glGetColorTableParameterfvSGI"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetColorTableParameterivSGI = (GLEEPFNGLGETCOLORTABLEPARAMETERIVSGIPROC) __GLeeGetProcAddress("glGetColorTableParameterivSGI"))!=0) nLinked++;
+#endif
+    if (nLinked==7) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_SGIS_pixel_texture(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_SGIS_pixel_texture
+    if ((GLeeFuncPtr_glPixelTexGenParameteriSGIS = (GLEEPFNGLPIXELTEXGENPARAMETERISGISPROC) __GLeeGetProcAddress("glPixelTexGenParameteriSGIS"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glPixelTexGenParameterivSGIS = (GLEEPFNGLPIXELTEXGENPARAMETERIVSGISPROC) __GLeeGetProcAddress("glPixelTexGenParameterivSGIS"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glPixelTexGenParameterfSGIS = (GLEEPFNGLPIXELTEXGENPARAMETERFSGISPROC) __GLeeGetProcAddress("glPixelTexGenParameterfSGIS"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glPixelTexGenParameterfvSGIS = (GLEEPFNGLPIXELTEXGENPARAMETERFVSGISPROC) __GLeeGetProcAddress("glPixelTexGenParameterfvSGIS"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetPixelTexGenParameterivSGIS = (GLEEPFNGLGETPIXELTEXGENPARAMETERIVSGISPROC) __GLeeGetProcAddress("glGetPixelTexGenParameterivSGIS"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetPixelTexGenParameterfvSGIS = (GLEEPFNGLGETPIXELTEXGENPARAMETERFVSGISPROC) __GLeeGetProcAddress("glGetPixelTexGenParameterfvSGIS"))!=0) nLinked++;
+#endif
+    if (nLinked==6) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_SGIX_pixel_texture(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_SGIX_pixel_texture
+    if ((GLeeFuncPtr_glPixelTexGenSGIX = (GLEEPFNGLPIXELTEXGENSGIXPROC) __GLeeGetProcAddress("glPixelTexGenSGIX"))!=0) nLinked++;
+#endif
+    if (nLinked==1) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_SGIS_texture4D(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_SGIS_texture4D
+    if ((GLeeFuncPtr_glTexImage4DSGIS = (GLEEPFNGLTEXIMAGE4DSGISPROC) __GLeeGetProcAddress("glTexImage4DSGIS"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glTexSubImage4DSGIS = (GLEEPFNGLTEXSUBIMAGE4DSGISPROC) __GLeeGetProcAddress("glTexSubImage4DSGIS"))!=0) nLinked++;
+#endif
+    if (nLinked==2) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_SGI_texture_color_table(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_EXT_cmyka(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_EXT_texture_object(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_EXT_texture_object
+    if ((GLeeFuncPtr_glAreTexturesResidentEXT = (GLEEPFNGLARETEXTURESRESIDENTEXTPROC) __GLeeGetProcAddress("glAreTexturesResidentEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glBindTextureEXT = (GLEEPFNGLBINDTEXTUREEXTPROC) __GLeeGetProcAddress("glBindTextureEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glDeleteTexturesEXT = (GLEEPFNGLDELETETEXTURESEXTPROC) __GLeeGetProcAddress("glDeleteTexturesEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGenTexturesEXT = (GLEEPFNGLGENTEXTURESEXTPROC) __GLeeGetProcAddress("glGenTexturesEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glIsTextureEXT = (GLEEPFNGLISTEXTUREEXTPROC) __GLeeGetProcAddress("glIsTextureEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glPrioritizeTexturesEXT = (GLEEPFNGLPRIORITIZETEXTURESEXTPROC) __GLeeGetProcAddress("glPrioritizeTexturesEXT"))!=0) nLinked++;
+#endif
+    if (nLinked==6) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_SGIS_detail_texture(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_SGIS_detail_texture
+    if ((GLeeFuncPtr_glDetailTexFuncSGIS = (GLEEPFNGLDETAILTEXFUNCSGISPROC) __GLeeGetProcAddress("glDetailTexFuncSGIS"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetDetailTexFuncSGIS = (GLEEPFNGLGETDETAILTEXFUNCSGISPROC) __GLeeGetProcAddress("glGetDetailTexFuncSGIS"))!=0) nLinked++;
+#endif
+    if (nLinked==2) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_SGIS_sharpen_texture(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_SGIS_sharpen_texture
+    if ((GLeeFuncPtr_glSharpenTexFuncSGIS = (GLEEPFNGLSHARPENTEXFUNCSGISPROC) __GLeeGetProcAddress("glSharpenTexFuncSGIS"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetSharpenTexFuncSGIS = (GLEEPFNGLGETSHARPENTEXFUNCSGISPROC) __GLeeGetProcAddress("glGetSharpenTexFuncSGIS"))!=0) nLinked++;
+#endif
+    if (nLinked==2) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_EXT_packed_pixels(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_SGIS_texture_lod(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_SGIS_multisample(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_SGIS_multisample
+    if ((GLeeFuncPtr_glSampleMaskSGIS = (GLEEPFNGLSAMPLEMASKSGISPROC) __GLeeGetProcAddress("glSampleMaskSGIS"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glSamplePatternSGIS = (GLEEPFNGLSAMPLEPATTERNSGISPROC) __GLeeGetProcAddress("glSamplePatternSGIS"))!=0) nLinked++;
+#endif
+    if (nLinked==2) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_EXT_rescale_normal(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_EXT_vertex_array(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_EXT_vertex_array
+    if ((GLeeFuncPtr_glArrayElementEXT = (GLEEPFNGLARRAYELEMENTEXTPROC) __GLeeGetProcAddress("glArrayElementEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glColorPointerEXT = (GLEEPFNGLCOLORPOINTEREXTPROC) __GLeeGetProcAddress("glColorPointerEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glDrawArraysEXT = (GLEEPFNGLDRAWARRAYSEXTPROC) __GLeeGetProcAddress("glDrawArraysEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glEdgeFlagPointerEXT = (GLEEPFNGLEDGEFLAGPOINTEREXTPROC) __GLeeGetProcAddress("glEdgeFlagPointerEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetPointervEXT = (GLEEPFNGLGETPOINTERVEXTPROC) __GLeeGetProcAddress("glGetPointervEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glIndexPointerEXT = (GLEEPFNGLINDEXPOINTEREXTPROC) __GLeeGetProcAddress("glIndexPointerEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glNormalPointerEXT = (GLEEPFNGLNORMALPOINTEREXTPROC) __GLeeGetProcAddress("glNormalPointerEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glTexCoordPointerEXT = (GLEEPFNGLTEXCOORDPOINTEREXTPROC) __GLeeGetProcAddress("glTexCoordPointerEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexPointerEXT = (GLEEPFNGLVERTEXPOINTEREXTPROC) __GLeeGetProcAddress("glVertexPointerEXT"))!=0) nLinked++;
+#endif
+    if (nLinked==9) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_EXT_misc_attribute(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_SGIS_generate_mipmap(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_SGIX_clipmap(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_SGIX_shadow(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_SGIS_texture_edge_clamp(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_SGIS_texture_border_clamp(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_EXT_blend_minmax(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_EXT_blend_minmax
+    if ((GLeeFuncPtr_glBlendEquationEXT = (GLEEPFNGLBLENDEQUATIONEXTPROC) __GLeeGetProcAddress("glBlendEquationEXT"))!=0) nLinked++;
+#endif
+    if (nLinked==1) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_EXT_blend_subtract(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_EXT_blend_logic_op(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_SGIX_interlace(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_SGIX_pixel_tiles(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_SGIS_texture_select(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_SGIX_sprite(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_SGIX_sprite
+    if ((GLeeFuncPtr_glSpriteParameterfSGIX = (GLEEPFNGLSPRITEPARAMETERFSGIXPROC) __GLeeGetProcAddress("glSpriteParameterfSGIX"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glSpriteParameterfvSGIX = (GLEEPFNGLSPRITEPARAMETERFVSGIXPROC) __GLeeGetProcAddress("glSpriteParameterfvSGIX"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glSpriteParameteriSGIX = (GLEEPFNGLSPRITEPARAMETERISGIXPROC) __GLeeGetProcAddress("glSpriteParameteriSGIX"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glSpriteParameterivSGIX = (GLEEPFNGLSPRITEPARAMETERIVSGIXPROC) __GLeeGetProcAddress("glSpriteParameterivSGIX"))!=0) nLinked++;
+#endif
+    if (nLinked==4) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_SGIX_texture_multi_buffer(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_EXT_point_parameters(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_EXT_point_parameters
+    if ((GLeeFuncPtr_glPointParameterfEXT = (GLEEPFNGLPOINTPARAMETERFEXTPROC) __GLeeGetProcAddress("glPointParameterfEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glPointParameterfvEXT = (GLEEPFNGLPOINTPARAMETERFVEXTPROC) __GLeeGetProcAddress("glPointParameterfvEXT"))!=0) nLinked++;
+#endif
+    if (nLinked==2) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_SGIS_point_parameters(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_SGIS_point_parameters
+    if ((GLeeFuncPtr_glPointParameterfSGIS = (GLEEPFNGLPOINTPARAMETERFSGISPROC) __GLeeGetProcAddress("glPointParameterfSGIS"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glPointParameterfvSGIS = (GLEEPFNGLPOINTPARAMETERFVSGISPROC) __GLeeGetProcAddress("glPointParameterfvSGIS"))!=0) nLinked++;
+#endif
+    if (nLinked==2) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_SGIX_instruments(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_SGIX_instruments
+    if ((GLeeFuncPtr_glGetInstrumentsSGIX = (GLEEPFNGLGETINSTRUMENTSSGIXPROC) __GLeeGetProcAddress("glGetInstrumentsSGIX"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glInstrumentsBufferSGIX = (GLEEPFNGLINSTRUMENTSBUFFERSGIXPROC) __GLeeGetProcAddress("glInstrumentsBufferSGIX"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glPollInstrumentsSGIX = (GLEEPFNGLPOLLINSTRUMENTSSGIXPROC) __GLeeGetProcAddress("glPollInstrumentsSGIX"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glReadInstrumentsSGIX = (GLEEPFNGLREADINSTRUMENTSSGIXPROC) __GLeeGetProcAddress("glReadInstrumentsSGIX"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glStartInstrumentsSGIX = (GLEEPFNGLSTARTINSTRUMENTSSGIXPROC) __GLeeGetProcAddress("glStartInstrumentsSGIX"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glStopInstrumentsSGIX = (GLEEPFNGLSTOPINSTRUMENTSSGIXPROC) __GLeeGetProcAddress("glStopInstrumentsSGIX"))!=0) nLinked++;
+#endif
+    if (nLinked==6) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_SGIX_texture_scale_bias(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_SGIX_framezoom(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_SGIX_framezoom
+    if ((GLeeFuncPtr_glFrameZoomSGIX = (GLEEPFNGLFRAMEZOOMSGIXPROC) __GLeeGetProcAddress("glFrameZoomSGIX"))!=0) nLinked++;
+#endif
+    if (nLinked==1) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_SGIX_tag_sample_buffer(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_SGIX_tag_sample_buffer
+    if ((GLeeFuncPtr_glTagSampleBufferSGIX = (GLEEPFNGLTAGSAMPLEBUFFERSGIXPROC) __GLeeGetProcAddress("glTagSampleBufferSGIX"))!=0) nLinked++;
+#endif
+    if (nLinked==1) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_FfdMaskSGIX(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_SGIX_polynomial_ffd(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_SGIX_polynomial_ffd
+    if ((GLeeFuncPtr_glDeformationMap3dSGIX = (GLEEPFNGLDEFORMATIONMAP3DSGIXPROC) __GLeeGetProcAddress("glDeformationMap3dSGIX"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glDeformationMap3fSGIX = (GLEEPFNGLDEFORMATIONMAP3FSGIXPROC) __GLeeGetProcAddress("glDeformationMap3fSGIX"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glDeformSGIX = (GLEEPFNGLDEFORMSGIXPROC) __GLeeGetProcAddress("glDeformSGIX"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glLoadIdentityDeformationMapSGIX = (GLEEPFNGLLOADIDENTITYDEFORMATIONMAPSGIXPROC) __GLeeGetProcAddress("glLoadIdentityDeformationMapSGIX"))!=0) nLinked++;
+#endif
+    if (nLinked==4) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_SGIX_reference_plane(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_SGIX_reference_plane
+    if ((GLeeFuncPtr_glReferencePlaneSGIX = (GLEEPFNGLREFERENCEPLANESGIXPROC) __GLeeGetProcAddress("glReferencePlaneSGIX"))!=0) nLinked++;
+#endif
+    if (nLinked==1) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_SGIX_flush_raster(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_SGIX_flush_raster
+    if ((GLeeFuncPtr_glFlushRasterSGIX = (GLEEPFNGLFLUSHRASTERSGIXPROC) __GLeeGetProcAddress("glFlushRasterSGIX"))!=0) nLinked++;
+#endif
+    if (nLinked==1) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_SGIX_depth_texture(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_SGIS_fog_function(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_SGIS_fog_function
+    if ((GLeeFuncPtr_glFogFuncSGIS = (GLEEPFNGLFOGFUNCSGISPROC) __GLeeGetProcAddress("glFogFuncSGIS"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetFogFuncSGIS = (GLEEPFNGLGETFOGFUNCSGISPROC) __GLeeGetProcAddress("glGetFogFuncSGIS"))!=0) nLinked++;
+#endif
+    if (nLinked==2) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_SGIX_fog_offset(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_HP_image_transform(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_HP_image_transform
+    if ((GLeeFuncPtr_glImageTransformParameteriHP = (GLEEPFNGLIMAGETRANSFORMPARAMETERIHPPROC) __GLeeGetProcAddress("glImageTransformParameteriHP"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glImageTransformParameterfHP = (GLEEPFNGLIMAGETRANSFORMPARAMETERFHPPROC) __GLeeGetProcAddress("glImageTransformParameterfHP"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glImageTransformParameterivHP = (GLEEPFNGLIMAGETRANSFORMPARAMETERIVHPPROC) __GLeeGetProcAddress("glImageTransformParameterivHP"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glImageTransformParameterfvHP = (GLEEPFNGLIMAGETRANSFORMPARAMETERFVHPPROC) __GLeeGetProcAddress("glImageTransformParameterfvHP"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetImageTransformParameterivHP = (GLEEPFNGLGETIMAGETRANSFORMPARAMETERIVHPPROC) __GLeeGetProcAddress("glGetImageTransformParameterivHP"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetImageTransformParameterfvHP = (GLEEPFNGLGETIMAGETRANSFORMPARAMETERFVHPPROC) __GLeeGetProcAddress("glGetImageTransformParameterfvHP"))!=0) nLinked++;
+#endif
+    if (nLinked==6) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_HP_convolution_border_modes(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_INGR_palette_buffer(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_SGIX_texture_add_env(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_EXT_color_subtable(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_EXT_color_subtable
+    if ((GLeeFuncPtr_glColorSubTableEXT = (GLEEPFNGLCOLORSUBTABLEEXTPROC) __GLeeGetProcAddress("glColorSubTableEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glCopyColorSubTableEXT = (GLEEPFNGLCOPYCOLORSUBTABLEEXTPROC) __GLeeGetProcAddress("glCopyColorSubTableEXT"))!=0) nLinked++;
+#endif
+    if (nLinked==2) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_PGI_vertex_hints(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_PGI_misc_hints(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_PGI_misc_hints
+    if ((GLeeFuncPtr_glHintPGI = (GLEEPFNGLHINTPGIPROC) __GLeeGetProcAddress("glHintPGI"))!=0) nLinked++;
+#endif
+    if (nLinked==1) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_EXT_paletted_texture(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_EXT_paletted_texture
+    if ((GLeeFuncPtr_glColorTableEXT = (GLEEPFNGLCOLORTABLEEXTPROC) __GLeeGetProcAddress("glColorTableEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetColorTableEXT = (GLEEPFNGLGETCOLORTABLEEXTPROC) __GLeeGetProcAddress("glGetColorTableEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetColorTableParameterivEXT = (GLEEPFNGLGETCOLORTABLEPARAMETERIVEXTPROC) __GLeeGetProcAddress("glGetColorTableParameterivEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetColorTableParameterfvEXT = (GLEEPFNGLGETCOLORTABLEPARAMETERFVEXTPROC) __GLeeGetProcAddress("glGetColorTableParameterfvEXT"))!=0) nLinked++;
+#endif
+    if (nLinked==4) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_EXT_clip_volume_hint(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_SGIX_list_priority(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_SGIX_list_priority
+    if ((GLeeFuncPtr_glGetListParameterfvSGIX = (GLEEPFNGLGETLISTPARAMETERFVSGIXPROC) __GLeeGetProcAddress("glGetListParameterfvSGIX"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetListParameterivSGIX = (GLEEPFNGLGETLISTPARAMETERIVSGIXPROC) __GLeeGetProcAddress("glGetListParameterivSGIX"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glListParameterfSGIX = (GLEEPFNGLLISTPARAMETERFSGIXPROC) __GLeeGetProcAddress("glListParameterfSGIX"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glListParameterfvSGIX = (GLEEPFNGLLISTPARAMETERFVSGIXPROC) __GLeeGetProcAddress("glListParameterfvSGIX"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glListParameteriSGIX = (GLEEPFNGLLISTPARAMETERISGIXPROC) __GLeeGetProcAddress("glListParameteriSGIX"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glListParameterivSGIX = (GLEEPFNGLLISTPARAMETERIVSGIXPROC) __GLeeGetProcAddress("glListParameterivSGIX"))!=0) nLinked++;
+#endif
+    if (nLinked==6) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_SGIX_ir_instrument1(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_SGIX_calligraphic_fragment(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_SGIX_texture_lod_bias(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_SGIX_shadow_ambient(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_EXT_index_texture(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_EXT_index_material(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_EXT_index_material
+    if ((GLeeFuncPtr_glIndexMaterialEXT = (GLEEPFNGLINDEXMATERIALEXTPROC) __GLeeGetProcAddress("glIndexMaterialEXT"))!=0) nLinked++;
+#endif
+    if (nLinked==1) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_EXT_index_func(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_EXT_index_func
+    if ((GLeeFuncPtr_glIndexFuncEXT = (GLEEPFNGLINDEXFUNCEXTPROC) __GLeeGetProcAddress("glIndexFuncEXT"))!=0) nLinked++;
+#endif
+    if (nLinked==1) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_EXT_index_array_formats(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_EXT_compiled_vertex_array(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_EXT_compiled_vertex_array
+    if ((GLeeFuncPtr_glLockArraysEXT = (GLEEPFNGLLOCKARRAYSEXTPROC) __GLeeGetProcAddress("glLockArraysEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glUnlockArraysEXT = (GLEEPFNGLUNLOCKARRAYSEXTPROC) __GLeeGetProcAddress("glUnlockArraysEXT"))!=0) nLinked++;
+#endif
+    if (nLinked==2) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_EXT_cull_vertex(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_EXT_cull_vertex
+    if ((GLeeFuncPtr_glCullParameterdvEXT = (GLEEPFNGLCULLPARAMETERDVEXTPROC) __GLeeGetProcAddress("glCullParameterdvEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glCullParameterfvEXT = (GLEEPFNGLCULLPARAMETERFVEXTPROC) __GLeeGetProcAddress("glCullParameterfvEXT"))!=0) nLinked++;
+#endif
+    if (nLinked==2) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_SGIX_ycrcb(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_SGIX_fragment_lighting(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_SGIX_fragment_lighting
+    if ((GLeeFuncPtr_glFragmentColorMaterialSGIX = (GLEEPFNGLFRAGMENTCOLORMATERIALSGIXPROC) __GLeeGetProcAddress("glFragmentColorMaterialSGIX"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glFragmentLightfSGIX = (GLEEPFNGLFRAGMENTLIGHTFSGIXPROC) __GLeeGetProcAddress("glFragmentLightfSGIX"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glFragmentLightfvSGIX = (GLEEPFNGLFRAGMENTLIGHTFVSGIXPROC) __GLeeGetProcAddress("glFragmentLightfvSGIX"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glFragmentLightiSGIX = (GLEEPFNGLFRAGMENTLIGHTISGIXPROC) __GLeeGetProcAddress("glFragmentLightiSGIX"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glFragmentLightivSGIX = (GLEEPFNGLFRAGMENTLIGHTIVSGIXPROC) __GLeeGetProcAddress("glFragmentLightivSGIX"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glFragmentLightModelfSGIX = (GLEEPFNGLFRAGMENTLIGHTMODELFSGIXPROC) __GLeeGetProcAddress("glFragmentLightModelfSGIX"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glFragmentLightModelfvSGIX = (GLEEPFNGLFRAGMENTLIGHTMODELFVSGIXPROC) __GLeeGetProcAddress("glFragmentLightModelfvSGIX"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glFragmentLightModeliSGIX = (GLEEPFNGLFRAGMENTLIGHTMODELISGIXPROC) __GLeeGetProcAddress("glFragmentLightModeliSGIX"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glFragmentLightModelivSGIX = (GLEEPFNGLFRAGMENTLIGHTMODELIVSGIXPROC) __GLeeGetProcAddress("glFragmentLightModelivSGIX"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glFragmentMaterialfSGIX = (GLEEPFNGLFRAGMENTMATERIALFSGIXPROC) __GLeeGetProcAddress("glFragmentMaterialfSGIX"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glFragmentMaterialfvSGIX = (GLEEPFNGLFRAGMENTMATERIALFVSGIXPROC) __GLeeGetProcAddress("glFragmentMaterialfvSGIX"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glFragmentMaterialiSGIX = (GLEEPFNGLFRAGMENTMATERIALISGIXPROC) __GLeeGetProcAddress("glFragmentMaterialiSGIX"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glFragmentMaterialivSGIX = (GLEEPFNGLFRAGMENTMATERIALIVSGIXPROC) __GLeeGetProcAddress("glFragmentMaterialivSGIX"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetFragmentLightfvSGIX = (GLEEPFNGLGETFRAGMENTLIGHTFVSGIXPROC) __GLeeGetProcAddress("glGetFragmentLightfvSGIX"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetFragmentLightivSGIX = (GLEEPFNGLGETFRAGMENTLIGHTIVSGIXPROC) __GLeeGetProcAddress("glGetFragmentLightivSGIX"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetFragmentMaterialfvSGIX = (GLEEPFNGLGETFRAGMENTMATERIALFVSGIXPROC) __GLeeGetProcAddress("glGetFragmentMaterialfvSGIX"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetFragmentMaterialivSGIX = (GLEEPFNGLGETFRAGMENTMATERIALIVSGIXPROC) __GLeeGetProcAddress("glGetFragmentMaterialivSGIX"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glLightEnviSGIX = (GLEEPFNGLLIGHTENVISGIXPROC) __GLeeGetProcAddress("glLightEnviSGIX"))!=0) nLinked++;
+#endif
+    if (nLinked==18) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_IBM_rasterpos_clip(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_HP_texture_lighting(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_EXT_draw_range_elements(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_EXT_draw_range_elements
+    if ((GLeeFuncPtr_glDrawRangeElementsEXT = (GLEEPFNGLDRAWRANGEELEMENTSEXTPROC) __GLeeGetProcAddress("glDrawRangeElementsEXT"))!=0) nLinked++;
+#endif
+    if (nLinked==1) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_WIN_phong_shading(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_WIN_specular_fog(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_EXT_light_texture(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_EXT_light_texture
+    if ((GLeeFuncPtr_glApplyTextureEXT = (GLEEPFNGLAPPLYTEXTUREEXTPROC) __GLeeGetProcAddress("glApplyTextureEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glTextureLightEXT = (GLEEPFNGLTEXTURELIGHTEXTPROC) __GLeeGetProcAddress("glTextureLightEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glTextureMaterialEXT = (GLEEPFNGLTEXTUREMATERIALEXTPROC) __GLeeGetProcAddress("glTextureMaterialEXT"))!=0) nLinked++;
+#endif
+    if (nLinked==3) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_SGIX_blend_alpha_minmax(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_SGIX_impact_pixel_texture(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_EXT_bgra(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_SGIX_async(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_SGIX_async
+    if ((GLeeFuncPtr_glAsyncMarkerSGIX = (GLEEPFNGLASYNCMARKERSGIXPROC) __GLeeGetProcAddress("glAsyncMarkerSGIX"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glFinishAsyncSGIX = (GLEEPFNGLFINISHASYNCSGIXPROC) __GLeeGetProcAddress("glFinishAsyncSGIX"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glPollAsyncSGIX = (GLEEPFNGLPOLLASYNCSGIXPROC) __GLeeGetProcAddress("glPollAsyncSGIX"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGenAsyncMarkersSGIX = (GLEEPFNGLGENASYNCMARKERSSGIXPROC) __GLeeGetProcAddress("glGenAsyncMarkersSGIX"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glDeleteAsyncMarkersSGIX = (GLEEPFNGLDELETEASYNCMARKERSSGIXPROC) __GLeeGetProcAddress("glDeleteAsyncMarkersSGIX"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glIsAsyncMarkerSGIX = (GLEEPFNGLISASYNCMARKERSGIXPROC) __GLeeGetProcAddress("glIsAsyncMarkerSGIX"))!=0) nLinked++;
+#endif
+    if (nLinked==6) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_SGIX_async_pixel(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_SGIX_async_histogram(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_INTEL_texture_scissor(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_INTEL_parallel_arrays(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_INTEL_parallel_arrays
+    if ((GLeeFuncPtr_glVertexPointervINTEL = (GLEEPFNGLVERTEXPOINTERVINTELPROC) __GLeeGetProcAddress("glVertexPointervINTEL"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glNormalPointervINTEL = (GLEEPFNGLNORMALPOINTERVINTELPROC) __GLeeGetProcAddress("glNormalPointervINTEL"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glColorPointervINTEL = (GLEEPFNGLCOLORPOINTERVINTELPROC) __GLeeGetProcAddress("glColorPointervINTEL"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glTexCoordPointervINTEL = (GLEEPFNGLTEXCOORDPOINTERVINTELPROC) __GLeeGetProcAddress("glTexCoordPointervINTEL"))!=0) nLinked++;
+#endif
+    if (nLinked==4) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_HP_occlusion_test(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_EXT_pixel_transform(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_EXT_pixel_transform
+    if ((GLeeFuncPtr_glPixelTransformParameteriEXT = (GLEEPFNGLPIXELTRANSFORMPARAMETERIEXTPROC) __GLeeGetProcAddress("glPixelTransformParameteriEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glPixelTransformParameterfEXT = (GLEEPFNGLPIXELTRANSFORMPARAMETERFEXTPROC) __GLeeGetProcAddress("glPixelTransformParameterfEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glPixelTransformParameterivEXT = (GLEEPFNGLPIXELTRANSFORMPARAMETERIVEXTPROC) __GLeeGetProcAddress("glPixelTransformParameterivEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glPixelTransformParameterfvEXT = (GLEEPFNGLPIXELTRANSFORMPARAMETERFVEXTPROC) __GLeeGetProcAddress("glPixelTransformParameterfvEXT"))!=0) nLinked++;
+#endif
+    if (nLinked==4) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_EXT_pixel_transform_color_table(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_EXT_shared_texture_palette(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_EXT_separate_specular_color(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_EXT_secondary_color(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_EXT_secondary_color
+    if ((GLeeFuncPtr_glSecondaryColor3bEXT = (GLEEPFNGLSECONDARYCOLOR3BEXTPROC) __GLeeGetProcAddress("glSecondaryColor3bEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glSecondaryColor3bvEXT = (GLEEPFNGLSECONDARYCOLOR3BVEXTPROC) __GLeeGetProcAddress("glSecondaryColor3bvEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glSecondaryColor3dEXT = (GLEEPFNGLSECONDARYCOLOR3DEXTPROC) __GLeeGetProcAddress("glSecondaryColor3dEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glSecondaryColor3dvEXT = (GLEEPFNGLSECONDARYCOLOR3DVEXTPROC) __GLeeGetProcAddress("glSecondaryColor3dvEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glSecondaryColor3fEXT = (GLEEPFNGLSECONDARYCOLOR3FEXTPROC) __GLeeGetProcAddress("glSecondaryColor3fEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glSecondaryColor3fvEXT = (GLEEPFNGLSECONDARYCOLOR3FVEXTPROC) __GLeeGetProcAddress("glSecondaryColor3fvEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glSecondaryColor3iEXT = (GLEEPFNGLSECONDARYCOLOR3IEXTPROC) __GLeeGetProcAddress("glSecondaryColor3iEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glSecondaryColor3ivEXT = (GLEEPFNGLSECONDARYCOLOR3IVEXTPROC) __GLeeGetProcAddress("glSecondaryColor3ivEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glSecondaryColor3sEXT = (GLEEPFNGLSECONDARYCOLOR3SEXTPROC) __GLeeGetProcAddress("glSecondaryColor3sEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glSecondaryColor3svEXT = (GLEEPFNGLSECONDARYCOLOR3SVEXTPROC) __GLeeGetProcAddress("glSecondaryColor3svEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glSecondaryColor3ubEXT = (GLEEPFNGLSECONDARYCOLOR3UBEXTPROC) __GLeeGetProcAddress("glSecondaryColor3ubEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glSecondaryColor3ubvEXT = (GLEEPFNGLSECONDARYCOLOR3UBVEXTPROC) __GLeeGetProcAddress("glSecondaryColor3ubvEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glSecondaryColor3uiEXT = (GLEEPFNGLSECONDARYCOLOR3UIEXTPROC) __GLeeGetProcAddress("glSecondaryColor3uiEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glSecondaryColor3uivEXT = (GLEEPFNGLSECONDARYCOLOR3UIVEXTPROC) __GLeeGetProcAddress("glSecondaryColor3uivEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glSecondaryColor3usEXT = (GLEEPFNGLSECONDARYCOLOR3USEXTPROC) __GLeeGetProcAddress("glSecondaryColor3usEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glSecondaryColor3usvEXT = (GLEEPFNGLSECONDARYCOLOR3USVEXTPROC) __GLeeGetProcAddress("glSecondaryColor3usvEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glSecondaryColorPointerEXT = (GLEEPFNGLSECONDARYCOLORPOINTEREXTPROC) __GLeeGetProcAddress("glSecondaryColorPointerEXT"))!=0) nLinked++;
+#endif
+    if (nLinked==17) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_EXT_texture_perturb_normal(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_EXT_texture_perturb_normal
+    if ((GLeeFuncPtr_glTextureNormalEXT = (GLEEPFNGLTEXTURENORMALEXTPROC) __GLeeGetProcAddress("glTextureNormalEXT"))!=0) nLinked++;
+#endif
+    if (nLinked==1) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_EXT_multi_draw_arrays(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_EXT_multi_draw_arrays
+    if ((GLeeFuncPtr_glMultiDrawArraysEXT = (GLEEPFNGLMULTIDRAWARRAYSEXTPROC) __GLeeGetProcAddress("glMultiDrawArraysEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMultiDrawElementsEXT = (GLEEPFNGLMULTIDRAWELEMENTSEXTPROC) __GLeeGetProcAddress("glMultiDrawElementsEXT"))!=0) nLinked++;
+#endif
+    if (nLinked==2) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_EXT_fog_coord(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_EXT_fog_coord
+    if ((GLeeFuncPtr_glFogCoordfEXT = (GLEEPFNGLFOGCOORDFEXTPROC) __GLeeGetProcAddress("glFogCoordfEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glFogCoordfvEXT = (GLEEPFNGLFOGCOORDFVEXTPROC) __GLeeGetProcAddress("glFogCoordfvEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glFogCoorddEXT = (GLEEPFNGLFOGCOORDDEXTPROC) __GLeeGetProcAddress("glFogCoorddEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glFogCoorddvEXT = (GLEEPFNGLFOGCOORDDVEXTPROC) __GLeeGetProcAddress("glFogCoorddvEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glFogCoordPointerEXT = (GLEEPFNGLFOGCOORDPOINTEREXTPROC) __GLeeGetProcAddress("glFogCoordPointerEXT"))!=0) nLinked++;
+#endif
+    if (nLinked==5) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_REND_screen_coordinates(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_EXT_coordinate_frame(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_EXT_coordinate_frame
+    if ((GLeeFuncPtr_glTangent3bEXT = (GLEEPFNGLTANGENT3BEXTPROC) __GLeeGetProcAddress("glTangent3bEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glTangent3bvEXT = (GLEEPFNGLTANGENT3BVEXTPROC) __GLeeGetProcAddress("glTangent3bvEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glTangent3dEXT = (GLEEPFNGLTANGENT3DEXTPROC) __GLeeGetProcAddress("glTangent3dEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glTangent3dvEXT = (GLEEPFNGLTANGENT3DVEXTPROC) __GLeeGetProcAddress("glTangent3dvEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glTangent3fEXT = (GLEEPFNGLTANGENT3FEXTPROC) __GLeeGetProcAddress("glTangent3fEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glTangent3fvEXT = (GLEEPFNGLTANGENT3FVEXTPROC) __GLeeGetProcAddress("glTangent3fvEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glTangent3iEXT = (GLEEPFNGLTANGENT3IEXTPROC) __GLeeGetProcAddress("glTangent3iEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glTangent3ivEXT = (GLEEPFNGLTANGENT3IVEXTPROC) __GLeeGetProcAddress("glTangent3ivEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glTangent3sEXT = (GLEEPFNGLTANGENT3SEXTPROC) __GLeeGetProcAddress("glTangent3sEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glTangent3svEXT = (GLEEPFNGLTANGENT3SVEXTPROC) __GLeeGetProcAddress("glTangent3svEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glBinormal3bEXT = (GLEEPFNGLBINORMAL3BEXTPROC) __GLeeGetProcAddress("glBinormal3bEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glBinormal3bvEXT = (GLEEPFNGLBINORMAL3BVEXTPROC) __GLeeGetProcAddress("glBinormal3bvEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glBinormal3dEXT = (GLEEPFNGLBINORMAL3DEXTPROC) __GLeeGetProcAddress("glBinormal3dEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glBinormal3dvEXT = (GLEEPFNGLBINORMAL3DVEXTPROC) __GLeeGetProcAddress("glBinormal3dvEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glBinormal3fEXT = (GLEEPFNGLBINORMAL3FEXTPROC) __GLeeGetProcAddress("glBinormal3fEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glBinormal3fvEXT = (GLEEPFNGLBINORMAL3FVEXTPROC) __GLeeGetProcAddress("glBinormal3fvEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glBinormal3iEXT = (GLEEPFNGLBINORMAL3IEXTPROC) __GLeeGetProcAddress("glBinormal3iEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glBinormal3ivEXT = (GLEEPFNGLBINORMAL3IVEXTPROC) __GLeeGetProcAddress("glBinormal3ivEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glBinormal3sEXT = (GLEEPFNGLBINORMAL3SEXTPROC) __GLeeGetProcAddress("glBinormal3sEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glBinormal3svEXT = (GLEEPFNGLBINORMAL3SVEXTPROC) __GLeeGetProcAddress("glBinormal3svEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glTangentPointerEXT = (GLEEPFNGLTANGENTPOINTEREXTPROC) __GLeeGetProcAddress("glTangentPointerEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glBinormalPointerEXT = (GLEEPFNGLBINORMALPOINTEREXTPROC) __GLeeGetProcAddress("glBinormalPointerEXT"))!=0) nLinked++;
+#endif
+    if (nLinked==22) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_EXT_texture_env_combine(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_APPLE_specular_vector(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_APPLE_transform_hint(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_SGIX_fog_scale(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_SUNX_constant_data(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_SUNX_constant_data
+    if ((GLeeFuncPtr_glFinishTextureSUNX = (GLEEPFNGLFINISHTEXTURESUNXPROC) __GLeeGetProcAddress("glFinishTextureSUNX"))!=0) nLinked++;
+#endif
+    if (nLinked==1) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_SUN_global_alpha(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_SUN_global_alpha
+    if ((GLeeFuncPtr_glGlobalAlphaFactorbSUN = (GLEEPFNGLGLOBALALPHAFACTORBSUNPROC) __GLeeGetProcAddress("glGlobalAlphaFactorbSUN"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGlobalAlphaFactorsSUN = (GLEEPFNGLGLOBALALPHAFACTORSSUNPROC) __GLeeGetProcAddress("glGlobalAlphaFactorsSUN"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGlobalAlphaFactoriSUN = (GLEEPFNGLGLOBALALPHAFACTORISUNPROC) __GLeeGetProcAddress("glGlobalAlphaFactoriSUN"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGlobalAlphaFactorfSUN = (GLEEPFNGLGLOBALALPHAFACTORFSUNPROC) __GLeeGetProcAddress("glGlobalAlphaFactorfSUN"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGlobalAlphaFactordSUN = (GLEEPFNGLGLOBALALPHAFACTORDSUNPROC) __GLeeGetProcAddress("glGlobalAlphaFactordSUN"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGlobalAlphaFactorubSUN = (GLEEPFNGLGLOBALALPHAFACTORUBSUNPROC) __GLeeGetProcAddress("glGlobalAlphaFactorubSUN"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGlobalAlphaFactorusSUN = (GLEEPFNGLGLOBALALPHAFACTORUSSUNPROC) __GLeeGetProcAddress("glGlobalAlphaFactorusSUN"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGlobalAlphaFactoruiSUN = (GLEEPFNGLGLOBALALPHAFACTORUISUNPROC) __GLeeGetProcAddress("glGlobalAlphaFactoruiSUN"))!=0) nLinked++;
+#endif
+    if (nLinked==8) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_SUN_triangle_list(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_SUN_triangle_list
+    if ((GLeeFuncPtr_glReplacementCodeuiSUN = (GLEEPFNGLREPLACEMENTCODEUISUNPROC) __GLeeGetProcAddress("glReplacementCodeuiSUN"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glReplacementCodeusSUN = (GLEEPFNGLREPLACEMENTCODEUSSUNPROC) __GLeeGetProcAddress("glReplacementCodeusSUN"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glReplacementCodeubSUN = (GLEEPFNGLREPLACEMENTCODEUBSUNPROC) __GLeeGetProcAddress("glReplacementCodeubSUN"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glReplacementCodeuivSUN = (GLEEPFNGLREPLACEMENTCODEUIVSUNPROC) __GLeeGetProcAddress("glReplacementCodeuivSUN"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glReplacementCodeusvSUN = (GLEEPFNGLREPLACEMENTCODEUSVSUNPROC) __GLeeGetProcAddress("glReplacementCodeusvSUN"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glReplacementCodeubvSUN = (GLEEPFNGLREPLACEMENTCODEUBVSUNPROC) __GLeeGetProcAddress("glReplacementCodeubvSUN"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glReplacementCodePointerSUN = (GLEEPFNGLREPLACEMENTCODEPOINTERSUNPROC) __GLeeGetProcAddress("glReplacementCodePointerSUN"))!=0) nLinked++;
+#endif
+    if (nLinked==7) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_SUN_vertex(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_SUN_vertex
+    if ((GLeeFuncPtr_glColor4ubVertex2fSUN = (GLEEPFNGLCOLOR4UBVERTEX2FSUNPROC) __GLeeGetProcAddress("glColor4ubVertex2fSUN"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glColor4ubVertex2fvSUN = (GLEEPFNGLCOLOR4UBVERTEX2FVSUNPROC) __GLeeGetProcAddress("glColor4ubVertex2fvSUN"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glColor4ubVertex3fSUN = (GLEEPFNGLCOLOR4UBVERTEX3FSUNPROC) __GLeeGetProcAddress("glColor4ubVertex3fSUN"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glColor4ubVertex3fvSUN = (GLEEPFNGLCOLOR4UBVERTEX3FVSUNPROC) __GLeeGetProcAddress("glColor4ubVertex3fvSUN"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glColor3fVertex3fSUN = (GLEEPFNGLCOLOR3FVERTEX3FSUNPROC) __GLeeGetProcAddress("glColor3fVertex3fSUN"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glColor3fVertex3fvSUN = (GLEEPFNGLCOLOR3FVERTEX3FVSUNPROC) __GLeeGetProcAddress("glColor3fVertex3fvSUN"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glNormal3fVertex3fSUN = (GLEEPFNGLNORMAL3FVERTEX3FSUNPROC) __GLeeGetProcAddress("glNormal3fVertex3fSUN"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glNormal3fVertex3fvSUN = (GLEEPFNGLNORMAL3FVERTEX3FVSUNPROC) __GLeeGetProcAddress("glNormal3fVertex3fvSUN"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glColor4fNormal3fVertex3fSUN = (GLEEPFNGLCOLOR4FNORMAL3FVERTEX3FSUNPROC) __GLeeGetProcAddress("glColor4fNormal3fVertex3fSUN"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glColor4fNormal3fVertex3fvSUN = (GLEEPFNGLCOLOR4FNORMAL3FVERTEX3FVSUNPROC) __GLeeGetProcAddress("glColor4fNormal3fVertex3fvSUN"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glTexCoord2fVertex3fSUN = (GLEEPFNGLTEXCOORD2FVERTEX3FSUNPROC) __GLeeGetProcAddress("glTexCoord2fVertex3fSUN"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glTexCoord2fVertex3fvSUN = (GLEEPFNGLTEXCOORD2FVERTEX3FVSUNPROC) __GLeeGetProcAddress("glTexCoord2fVertex3fvSUN"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glTexCoord4fVertex4fSUN = (GLEEPFNGLTEXCOORD4FVERTEX4FSUNPROC) __GLeeGetProcAddress("glTexCoord4fVertex4fSUN"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glTexCoord4fVertex4fvSUN = (GLEEPFNGLTEXCOORD4FVERTEX4FVSUNPROC) __GLeeGetProcAddress("glTexCoord4fVertex4fvSUN"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glTexCoord2fColor4ubVertex3fSUN = (GLEEPFNGLTEXCOORD2FCOLOR4UBVERTEX3FSUNPROC) __GLeeGetProcAddress("glTexCoord2fColor4ubVertex3fSUN"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glTexCoord2fColor4ubVertex3fvSUN = (GLEEPFNGLTEXCOORD2FCOLOR4UBVERTEX3FVSUNPROC) __GLeeGetProcAddress("glTexCoord2fColor4ubVertex3fvSUN"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glTexCoord2fColor3fVertex3fSUN = (GLEEPFNGLTEXCOORD2FCOLOR3FVERTEX3FSUNPROC) __GLeeGetProcAddress("glTexCoord2fColor3fVertex3fSUN"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glTexCoord2fColor3fVertex3fvSUN = (GLEEPFNGLTEXCOORD2FCOLOR3FVERTEX3FVSUNPROC) __GLeeGetProcAddress("glTexCoord2fColor3fVertex3fvSUN"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glTexCoord2fNormal3fVertex3fSUN = (GLEEPFNGLTEXCOORD2FNORMAL3FVERTEX3FSUNPROC) __GLeeGetProcAddress("glTexCoord2fNormal3fVertex3fSUN"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glTexCoord2fNormal3fVertex3fvSUN = (GLEEPFNGLTEXCOORD2FNORMAL3FVERTEX3FVSUNPROC) __GLeeGetProcAddress("glTexCoord2fNormal3fVertex3fvSUN"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glTexCoord2fColor4fNormal3fVertex3fSUN = (GLEEPFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC) __GLeeGetProcAddress("glTexCoord2fColor4fNormal3fVertex3fSUN"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glTexCoord2fColor4fNormal3fVertex3fvSUN = (GLEEPFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC) __GLeeGetProcAddress("glTexCoord2fColor4fNormal3fVertex3fvSUN"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glTexCoord4fColor4fNormal3fVertex4fSUN = (GLEEPFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FSUNPROC) __GLeeGetProcAddress("glTexCoord4fColor4fNormal3fVertex4fSUN"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glTexCoord4fColor4fNormal3fVertex4fvSUN = (GLEEPFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FVSUNPROC) __GLeeGetProcAddress("glTexCoord4fColor4fNormal3fVertex4fvSUN"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glReplacementCodeuiVertex3fSUN = (GLEEPFNGLREPLACEMENTCODEUIVERTEX3FSUNPROC) __GLeeGetProcAddress("glReplacementCodeuiVertex3fSUN"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glReplacementCodeuiVertex3fvSUN = (GLEEPFNGLREPLACEMENTCODEUIVERTEX3FVSUNPROC) __GLeeGetProcAddress("glReplacementCodeuiVertex3fvSUN"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glReplacementCodeuiColor4ubVertex3fSUN = (GLEEPFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FSUNPROC) __GLeeGetProcAddress("glReplacementCodeuiColor4ubVertex3fSUN"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glReplacementCodeuiColor4ubVertex3fvSUN = (GLEEPFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FVSUNPROC) __GLeeGetProcAddress("glReplacementCodeuiColor4ubVertex3fvSUN"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glReplacementCodeuiColor3fVertex3fSUN = (GLEEPFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FSUNPROC) __GLeeGetProcAddress("glReplacementCodeuiColor3fVertex3fSUN"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glReplacementCodeuiColor3fVertex3fvSUN = (GLEEPFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FVSUNPROC) __GLeeGetProcAddress("glReplacementCodeuiColor3fVertex3fvSUN"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glReplacementCodeuiNormal3fVertex3fSUN = (GLEEPFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FSUNPROC) __GLeeGetProcAddress("glReplacementCodeuiNormal3fVertex3fSUN"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glReplacementCodeuiNormal3fVertex3fvSUN = (GLEEPFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FVSUNPROC) __GLeeGetProcAddress("glReplacementCodeuiNormal3fVertex3fvSUN"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glReplacementCodeuiColor4fNormal3fVertex3fSUN = (GLEEPFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FSUNPROC) __GLeeGetProcAddress("glReplacementCodeuiColor4fNormal3fVertex3fSUN"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glReplacementCodeuiColor4fNormal3fVertex3fvSUN = (GLEEPFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FVSUNPROC) __GLeeGetProcAddress("glReplacementCodeuiColor4fNormal3fVertex3fvSUN"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glReplacementCodeuiTexCoord2fVertex3fSUN = (GLEEPFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FSUNPROC) __GLeeGetProcAddress("glReplacementCodeuiTexCoord2fVertex3fSUN"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glReplacementCodeuiTexCoord2fVertex3fvSUN = (GLEEPFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FVSUNPROC) __GLeeGetProcAddress("glReplacementCodeuiTexCoord2fVertex3fvSUN"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN = (GLEEPFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FSUNPROC) __GLeeGetProcAddress("glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN = (GLEEPFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FVSUNPROC) __GLeeGetProcAddress("glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN = (GLEEPFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC) __GLeeGetProcAddress("glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN = (GLEEPFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC) __GLeeGetProcAddress("glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"))!=0) nLinked++;
+#endif
+    if (nLinked==40) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_EXT_blend_func_separate(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_EXT_blend_func_separate
+    if ((GLeeFuncPtr_glBlendFuncSeparateEXT = (GLEEPFNGLBLENDFUNCSEPARATEEXTPROC) __GLeeGetProcAddress("glBlendFuncSeparateEXT"))!=0) nLinked++;
+#endif
+    if (nLinked==1) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_INGR_color_clamp(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_INGR_interlace_read(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_EXT_stencil_wrap(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_EXT_422_pixels(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_NV_texgen_reflection(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_EXT_texture_cube_map(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_SUN_convolution_border_modes(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_EXT_texture_env_add(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_EXT_texture_lod_bias(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_EXT_texture_filter_anisotropic(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_EXT_vertex_weighting(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_EXT_vertex_weighting
+    if ((GLeeFuncPtr_glVertexWeightfEXT = (GLEEPFNGLVERTEXWEIGHTFEXTPROC) __GLeeGetProcAddress("glVertexWeightfEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexWeightfvEXT = (GLEEPFNGLVERTEXWEIGHTFVEXTPROC) __GLeeGetProcAddress("glVertexWeightfvEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexWeightPointerEXT = (GLEEPFNGLVERTEXWEIGHTPOINTEREXTPROC) __GLeeGetProcAddress("glVertexWeightPointerEXT"))!=0) nLinked++;
+#endif
+    if (nLinked==3) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_NV_light_max_exponent(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_NV_vertex_array_range(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_NV_vertex_array_range
+    if ((GLeeFuncPtr_glFlushVertexArrayRangeNV = (GLEEPFNGLFLUSHVERTEXARRAYRANGENVPROC) __GLeeGetProcAddress("glFlushVertexArrayRangeNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexArrayRangeNV = (GLEEPFNGLVERTEXARRAYRANGENVPROC) __GLeeGetProcAddress("glVertexArrayRangeNV"))!=0) nLinked++;
+#endif
+    if (nLinked==2) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_NV_register_combiners(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_NV_register_combiners
+    if ((GLeeFuncPtr_glCombinerParameterfvNV = (GLEEPFNGLCOMBINERPARAMETERFVNVPROC) __GLeeGetProcAddress("glCombinerParameterfvNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glCombinerParameterfNV = (GLEEPFNGLCOMBINERPARAMETERFNVPROC) __GLeeGetProcAddress("glCombinerParameterfNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glCombinerParameterivNV = (GLEEPFNGLCOMBINERPARAMETERIVNVPROC) __GLeeGetProcAddress("glCombinerParameterivNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glCombinerParameteriNV = (GLEEPFNGLCOMBINERPARAMETERINVPROC) __GLeeGetProcAddress("glCombinerParameteriNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glCombinerInputNV = (GLEEPFNGLCOMBINERINPUTNVPROC) __GLeeGetProcAddress("glCombinerInputNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glCombinerOutputNV = (GLEEPFNGLCOMBINEROUTPUTNVPROC) __GLeeGetProcAddress("glCombinerOutputNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glFinalCombinerInputNV = (GLEEPFNGLFINALCOMBINERINPUTNVPROC) __GLeeGetProcAddress("glFinalCombinerInputNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetCombinerInputParameterfvNV = (GLEEPFNGLGETCOMBINERINPUTPARAMETERFVNVPROC) __GLeeGetProcAddress("glGetCombinerInputParameterfvNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetCombinerInputParameterivNV = (GLEEPFNGLGETCOMBINERINPUTPARAMETERIVNVPROC) __GLeeGetProcAddress("glGetCombinerInputParameterivNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetCombinerOutputParameterfvNV = (GLEEPFNGLGETCOMBINEROUTPUTPARAMETERFVNVPROC) __GLeeGetProcAddress("glGetCombinerOutputParameterfvNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetCombinerOutputParameterivNV = (GLEEPFNGLGETCOMBINEROUTPUTPARAMETERIVNVPROC) __GLeeGetProcAddress("glGetCombinerOutputParameterivNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetFinalCombinerInputParameterfvNV = (GLEEPFNGLGETFINALCOMBINERINPUTPARAMETERFVNVPROC) __GLeeGetProcAddress("glGetFinalCombinerInputParameterfvNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetFinalCombinerInputParameterivNV = (GLEEPFNGLGETFINALCOMBINERINPUTPARAMETERIVNVPROC) __GLeeGetProcAddress("glGetFinalCombinerInputParameterivNV"))!=0) nLinked++;
+#endif
+    if (nLinked==13) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_NV_fog_distance(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_NV_texgen_emboss(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_NV_blend_square(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_NV_texture_env_combine4(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_MESA_resize_buffers(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_MESA_resize_buffers
+    if ((GLeeFuncPtr_glResizeBuffersMESA = (GLEEPFNGLRESIZEBUFFERSMESAPROC) __GLeeGetProcAddress("glResizeBuffersMESA"))!=0) nLinked++;
+#endif
+    if (nLinked==1) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_MESA_window_pos(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_MESA_window_pos
+    if ((GLeeFuncPtr_glWindowPos2dMESA = (GLEEPFNGLWINDOWPOS2DMESAPROC) __GLeeGetProcAddress("glWindowPos2dMESA"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glWindowPos2dvMESA = (GLEEPFNGLWINDOWPOS2DVMESAPROC) __GLeeGetProcAddress("glWindowPos2dvMESA"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glWindowPos2fMESA = (GLEEPFNGLWINDOWPOS2FMESAPROC) __GLeeGetProcAddress("glWindowPos2fMESA"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glWindowPos2fvMESA = (GLEEPFNGLWINDOWPOS2FVMESAPROC) __GLeeGetProcAddress("glWindowPos2fvMESA"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glWindowPos2iMESA = (GLEEPFNGLWINDOWPOS2IMESAPROC) __GLeeGetProcAddress("glWindowPos2iMESA"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glWindowPos2ivMESA = (GLEEPFNGLWINDOWPOS2IVMESAPROC) __GLeeGetProcAddress("glWindowPos2ivMESA"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glWindowPos2sMESA = (GLEEPFNGLWINDOWPOS2SMESAPROC) __GLeeGetProcAddress("glWindowPos2sMESA"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glWindowPos2svMESA = (GLEEPFNGLWINDOWPOS2SVMESAPROC) __GLeeGetProcAddress("glWindowPos2svMESA"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glWindowPos3dMESA = (GLEEPFNGLWINDOWPOS3DMESAPROC) __GLeeGetProcAddress("glWindowPos3dMESA"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glWindowPos3dvMESA = (GLEEPFNGLWINDOWPOS3DVMESAPROC) __GLeeGetProcAddress("glWindowPos3dvMESA"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glWindowPos3fMESA = (GLEEPFNGLWINDOWPOS3FMESAPROC) __GLeeGetProcAddress("glWindowPos3fMESA"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glWindowPos3fvMESA = (GLEEPFNGLWINDOWPOS3FVMESAPROC) __GLeeGetProcAddress("glWindowPos3fvMESA"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glWindowPos3iMESA = (GLEEPFNGLWINDOWPOS3IMESAPROC) __GLeeGetProcAddress("glWindowPos3iMESA"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glWindowPos3ivMESA = (GLEEPFNGLWINDOWPOS3IVMESAPROC) __GLeeGetProcAddress("glWindowPos3ivMESA"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glWindowPos3sMESA = (GLEEPFNGLWINDOWPOS3SMESAPROC) __GLeeGetProcAddress("glWindowPos3sMESA"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glWindowPos3svMESA = (GLEEPFNGLWINDOWPOS3SVMESAPROC) __GLeeGetProcAddress("glWindowPos3svMESA"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glWindowPos4dMESA = (GLEEPFNGLWINDOWPOS4DMESAPROC) __GLeeGetProcAddress("glWindowPos4dMESA"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glWindowPos4dvMESA = (GLEEPFNGLWINDOWPOS4DVMESAPROC) __GLeeGetProcAddress("glWindowPos4dvMESA"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glWindowPos4fMESA = (GLEEPFNGLWINDOWPOS4FMESAPROC) __GLeeGetProcAddress("glWindowPos4fMESA"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glWindowPos4fvMESA = (GLEEPFNGLWINDOWPOS4FVMESAPROC) __GLeeGetProcAddress("glWindowPos4fvMESA"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glWindowPos4iMESA = (GLEEPFNGLWINDOWPOS4IMESAPROC) __GLeeGetProcAddress("glWindowPos4iMESA"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glWindowPos4ivMESA = (GLEEPFNGLWINDOWPOS4IVMESAPROC) __GLeeGetProcAddress("glWindowPos4ivMESA"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glWindowPos4sMESA = (GLEEPFNGLWINDOWPOS4SMESAPROC) __GLeeGetProcAddress("glWindowPos4sMESA"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glWindowPos4svMESA = (GLEEPFNGLWINDOWPOS4SVMESAPROC) __GLeeGetProcAddress("glWindowPos4svMESA"))!=0) nLinked++;
+#endif
+    if (nLinked==24) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_EXT_texture_compression_s3tc(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_IBM_cull_vertex(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_IBM_multimode_draw_arrays(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_IBM_multimode_draw_arrays
+    if ((GLeeFuncPtr_glMultiModeDrawArraysIBM = (GLEEPFNGLMULTIMODEDRAWARRAYSIBMPROC) __GLeeGetProcAddress("glMultiModeDrawArraysIBM"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMultiModeDrawElementsIBM = (GLEEPFNGLMULTIMODEDRAWELEMENTSIBMPROC) __GLeeGetProcAddress("glMultiModeDrawElementsIBM"))!=0) nLinked++;
+#endif
+    if (nLinked==2) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_IBM_vertex_array_lists(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_IBM_vertex_array_lists
+    if ((GLeeFuncPtr_glColorPointerListIBM = (GLEEPFNGLCOLORPOINTERLISTIBMPROC) __GLeeGetProcAddress("glColorPointerListIBM"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glSecondaryColorPointerListIBM = (GLEEPFNGLSECONDARYCOLORPOINTERLISTIBMPROC) __GLeeGetProcAddress("glSecondaryColorPointerListIBM"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glEdgeFlagPointerListIBM = (GLEEPFNGLEDGEFLAGPOINTERLISTIBMPROC) __GLeeGetProcAddress("glEdgeFlagPointerListIBM"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glFogCoordPointerListIBM = (GLEEPFNGLFOGCOORDPOINTERLISTIBMPROC) __GLeeGetProcAddress("glFogCoordPointerListIBM"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glIndexPointerListIBM = (GLEEPFNGLINDEXPOINTERLISTIBMPROC) __GLeeGetProcAddress("glIndexPointerListIBM"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glNormalPointerListIBM = (GLEEPFNGLNORMALPOINTERLISTIBMPROC) __GLeeGetProcAddress("glNormalPointerListIBM"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glTexCoordPointerListIBM = (GLEEPFNGLTEXCOORDPOINTERLISTIBMPROC) __GLeeGetProcAddress("glTexCoordPointerListIBM"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexPointerListIBM = (GLEEPFNGLVERTEXPOINTERLISTIBMPROC) __GLeeGetProcAddress("glVertexPointerListIBM"))!=0) nLinked++;
+#endif
+    if (nLinked==8) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_SGIX_subsample(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_SGIX_ycrcb_subsample(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_SGIX_ycrcba(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_SGI_depth_pass_instrument(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_3DFX_texture_compression_FXT1(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_3DFX_multisample(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_3DFX_tbuffer(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_3DFX_tbuffer
+    if ((GLeeFuncPtr_glTbufferMask3DFX = (GLEEPFNGLTBUFFERMASK3DFXPROC) __GLeeGetProcAddress("glTbufferMask3DFX"))!=0) nLinked++;
+#endif
+    if (nLinked==1) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_EXT_multisample(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_EXT_multisample
+    if ((GLeeFuncPtr_glSampleMaskEXT = (GLEEPFNGLSAMPLEMASKEXTPROC) __GLeeGetProcAddress("glSampleMaskEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glSamplePatternEXT = (GLEEPFNGLSAMPLEPATTERNEXTPROC) __GLeeGetProcAddress("glSamplePatternEXT"))!=0) nLinked++;
+#endif
+    if (nLinked==2) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_SGIX_vertex_preclip(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_SGIX_convolution_accuracy(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_SGIX_resample(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_SGIS_point_line_texgen(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_SGIS_texture_color_mask(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_SGIS_texture_color_mask
+    if ((GLeeFuncPtr_glTextureColorMaskSGIS = (GLEEPFNGLTEXTURECOLORMASKSGISPROC) __GLeeGetProcAddress("glTextureColorMaskSGIS"))!=0) nLinked++;
+#endif
+    if (nLinked==1) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_EXT_texture_env_dot3(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_ATI_texture_mirror_once(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_NV_fence(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_NV_fence
+    if ((GLeeFuncPtr_glDeleteFencesNV = (GLEEPFNGLDELETEFENCESNVPROC) __GLeeGetProcAddress("glDeleteFencesNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGenFencesNV = (GLEEPFNGLGENFENCESNVPROC) __GLeeGetProcAddress("glGenFencesNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glIsFenceNV = (GLEEPFNGLISFENCENVPROC) __GLeeGetProcAddress("glIsFenceNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glTestFenceNV = (GLEEPFNGLTESTFENCENVPROC) __GLeeGetProcAddress("glTestFenceNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetFenceivNV = (GLEEPFNGLGETFENCEIVNVPROC) __GLeeGetProcAddress("glGetFenceivNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glFinishFenceNV = (GLEEPFNGLFINISHFENCENVPROC) __GLeeGetProcAddress("glFinishFenceNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glSetFenceNV = (GLEEPFNGLSETFENCENVPROC) __GLeeGetProcAddress("glSetFenceNV"))!=0) nLinked++;
+#endif
+    if (nLinked==7) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_IBM_texture_mirrored_repeat(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_NV_evaluators(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_NV_evaluators
+    if ((GLeeFuncPtr_glMapControlPointsNV = (GLEEPFNGLMAPCONTROLPOINTSNVPROC) __GLeeGetProcAddress("glMapControlPointsNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMapParameterivNV = (GLEEPFNGLMAPPARAMETERIVNVPROC) __GLeeGetProcAddress("glMapParameterivNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMapParameterfvNV = (GLEEPFNGLMAPPARAMETERFVNVPROC) __GLeeGetProcAddress("glMapParameterfvNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetMapControlPointsNV = (GLEEPFNGLGETMAPCONTROLPOINTSNVPROC) __GLeeGetProcAddress("glGetMapControlPointsNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetMapParameterivNV = (GLEEPFNGLGETMAPPARAMETERIVNVPROC) __GLeeGetProcAddress("glGetMapParameterivNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetMapParameterfvNV = (GLEEPFNGLGETMAPPARAMETERFVNVPROC) __GLeeGetProcAddress("glGetMapParameterfvNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetMapAttribParameterivNV = (GLEEPFNGLGETMAPATTRIBPARAMETERIVNVPROC) __GLeeGetProcAddress("glGetMapAttribParameterivNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetMapAttribParameterfvNV = (GLEEPFNGLGETMAPATTRIBPARAMETERFVNVPROC) __GLeeGetProcAddress("glGetMapAttribParameterfvNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glEvalMapsNV = (GLEEPFNGLEVALMAPSNVPROC) __GLeeGetProcAddress("glEvalMapsNV"))!=0) nLinked++;
+#endif
+    if (nLinked==9) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_NV_packed_depth_stencil(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_NV_register_combiners2(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_NV_register_combiners2
+    if ((GLeeFuncPtr_glCombinerStageParameterfvNV = (GLEEPFNGLCOMBINERSTAGEPARAMETERFVNVPROC) __GLeeGetProcAddress("glCombinerStageParameterfvNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetCombinerStageParameterfvNV = (GLEEPFNGLGETCOMBINERSTAGEPARAMETERFVNVPROC) __GLeeGetProcAddress("glGetCombinerStageParameterfvNV"))!=0) nLinked++;
+#endif
+    if (nLinked==2) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_NV_texture_compression_vtc(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_NV_texture_rectangle(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_NV_texture_shader(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_NV_texture_shader2(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_NV_vertex_array_range2(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_NV_vertex_program(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_NV_vertex_program
+    if ((GLeeFuncPtr_glAreProgramsResidentNV = (GLEEPFNGLAREPROGRAMSRESIDENTNVPROC) __GLeeGetProcAddress("glAreProgramsResidentNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glBindProgramNV = (GLEEPFNGLBINDPROGRAMNVPROC) __GLeeGetProcAddress("glBindProgramNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glDeleteProgramsNV = (GLEEPFNGLDELETEPROGRAMSNVPROC) __GLeeGetProcAddress("glDeleteProgramsNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glExecuteProgramNV = (GLEEPFNGLEXECUTEPROGRAMNVPROC) __GLeeGetProcAddress("glExecuteProgramNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGenProgramsNV = (GLEEPFNGLGENPROGRAMSNVPROC) __GLeeGetProcAddress("glGenProgramsNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetProgramParameterdvNV = (GLEEPFNGLGETPROGRAMPARAMETERDVNVPROC) __GLeeGetProcAddress("glGetProgramParameterdvNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetProgramParameterfvNV = (GLEEPFNGLGETPROGRAMPARAMETERFVNVPROC) __GLeeGetProcAddress("glGetProgramParameterfvNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetProgramivNV = (GLEEPFNGLGETPROGRAMIVNVPROC) __GLeeGetProcAddress("glGetProgramivNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetProgramStringNV = (GLEEPFNGLGETPROGRAMSTRINGNVPROC) __GLeeGetProcAddress("glGetProgramStringNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetTrackMatrixivNV = (GLEEPFNGLGETTRACKMATRIXIVNVPROC) __GLeeGetProcAddress("glGetTrackMatrixivNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetVertexAttribdvNV = (GLEEPFNGLGETVERTEXATTRIBDVNVPROC) __GLeeGetProcAddress("glGetVertexAttribdvNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetVertexAttribfvNV = (GLEEPFNGLGETVERTEXATTRIBFVNVPROC) __GLeeGetProcAddress("glGetVertexAttribfvNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetVertexAttribivNV = (GLEEPFNGLGETVERTEXATTRIBIVNVPROC) __GLeeGetProcAddress("glGetVertexAttribivNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetVertexAttribPointervNV = (GLEEPFNGLGETVERTEXATTRIBPOINTERVNVPROC) __GLeeGetProcAddress("glGetVertexAttribPointervNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glIsProgramNV = (GLEEPFNGLISPROGRAMNVPROC) __GLeeGetProcAddress("glIsProgramNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glLoadProgramNV = (GLEEPFNGLLOADPROGRAMNVPROC) __GLeeGetProcAddress("glLoadProgramNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramParameter4dNV = (GLEEPFNGLPROGRAMPARAMETER4DNVPROC) __GLeeGetProcAddress("glProgramParameter4dNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramParameter4dvNV = (GLEEPFNGLPROGRAMPARAMETER4DVNVPROC) __GLeeGetProcAddress("glProgramParameter4dvNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramParameter4fNV = (GLEEPFNGLPROGRAMPARAMETER4FNVPROC) __GLeeGetProcAddress("glProgramParameter4fNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramParameter4fvNV = (GLEEPFNGLPROGRAMPARAMETER4FVNVPROC) __GLeeGetProcAddress("glProgramParameter4fvNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramParameters4dvNV = (GLEEPFNGLPROGRAMPARAMETERS4DVNVPROC) __GLeeGetProcAddress("glProgramParameters4dvNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramParameters4fvNV = (GLEEPFNGLPROGRAMPARAMETERS4FVNVPROC) __GLeeGetProcAddress("glProgramParameters4fvNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glRequestResidentProgramsNV = (GLEEPFNGLREQUESTRESIDENTPROGRAMSNVPROC) __GLeeGetProcAddress("glRequestResidentProgramsNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glTrackMatrixNV = (GLEEPFNGLTRACKMATRIXNVPROC) __GLeeGetProcAddress("glTrackMatrixNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttribPointerNV = (GLEEPFNGLVERTEXATTRIBPOINTERNVPROC) __GLeeGetProcAddress("glVertexAttribPointerNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttrib1dNV = (GLEEPFNGLVERTEXATTRIB1DNVPROC) __GLeeGetProcAddress("glVertexAttrib1dNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttrib1dvNV = (GLEEPFNGLVERTEXATTRIB1DVNVPROC) __GLeeGetProcAddress("glVertexAttrib1dvNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttrib1fNV = (GLEEPFNGLVERTEXATTRIB1FNVPROC) __GLeeGetProcAddress("glVertexAttrib1fNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttrib1fvNV = (GLEEPFNGLVERTEXATTRIB1FVNVPROC) __GLeeGetProcAddress("glVertexAttrib1fvNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttrib1sNV = (GLEEPFNGLVERTEXATTRIB1SNVPROC) __GLeeGetProcAddress("glVertexAttrib1sNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttrib1svNV = (GLEEPFNGLVERTEXATTRIB1SVNVPROC) __GLeeGetProcAddress("glVertexAttrib1svNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttrib2dNV = (GLEEPFNGLVERTEXATTRIB2DNVPROC) __GLeeGetProcAddress("glVertexAttrib2dNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttrib2dvNV = (GLEEPFNGLVERTEXATTRIB2DVNVPROC) __GLeeGetProcAddress("glVertexAttrib2dvNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttrib2fNV = (GLEEPFNGLVERTEXATTRIB2FNVPROC) __GLeeGetProcAddress("glVertexAttrib2fNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttrib2fvNV = (GLEEPFNGLVERTEXATTRIB2FVNVPROC) __GLeeGetProcAddress("glVertexAttrib2fvNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttrib2sNV = (GLEEPFNGLVERTEXATTRIB2SNVPROC) __GLeeGetProcAddress("glVertexAttrib2sNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttrib2svNV = (GLEEPFNGLVERTEXATTRIB2SVNVPROC) __GLeeGetProcAddress("glVertexAttrib2svNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttrib3dNV = (GLEEPFNGLVERTEXATTRIB3DNVPROC) __GLeeGetProcAddress("glVertexAttrib3dNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttrib3dvNV = (GLEEPFNGLVERTEXATTRIB3DVNVPROC) __GLeeGetProcAddress("glVertexAttrib3dvNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttrib3fNV = (GLEEPFNGLVERTEXATTRIB3FNVPROC) __GLeeGetProcAddress("glVertexAttrib3fNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttrib3fvNV = (GLEEPFNGLVERTEXATTRIB3FVNVPROC) __GLeeGetProcAddress("glVertexAttrib3fvNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttrib3sNV = (GLEEPFNGLVERTEXATTRIB3SNVPROC) __GLeeGetProcAddress("glVertexAttrib3sNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttrib3svNV = (GLEEPFNGLVERTEXATTRIB3SVNVPROC) __GLeeGetProcAddress("glVertexAttrib3svNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttrib4dNV = (GLEEPFNGLVERTEXATTRIB4DNVPROC) __GLeeGetProcAddress("glVertexAttrib4dNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttrib4dvNV = (GLEEPFNGLVERTEXATTRIB4DVNVPROC) __GLeeGetProcAddress("glVertexAttrib4dvNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttrib4fNV = (GLEEPFNGLVERTEXATTRIB4FNVPROC) __GLeeGetProcAddress("glVertexAttrib4fNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttrib4fvNV = (GLEEPFNGLVERTEXATTRIB4FVNVPROC) __GLeeGetProcAddress("glVertexAttrib4fvNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttrib4sNV = (GLEEPFNGLVERTEXATTRIB4SNVPROC) __GLeeGetProcAddress("glVertexAttrib4sNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttrib4svNV = (GLEEPFNGLVERTEXATTRIB4SVNVPROC) __GLeeGetProcAddress("glVertexAttrib4svNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttrib4ubNV = (GLEEPFNGLVERTEXATTRIB4UBNVPROC) __GLeeGetProcAddress("glVertexAttrib4ubNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttrib4ubvNV = (GLEEPFNGLVERTEXATTRIB4UBVNVPROC) __GLeeGetProcAddress("glVertexAttrib4ubvNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttribs1dvNV = (GLEEPFNGLVERTEXATTRIBS1DVNVPROC) __GLeeGetProcAddress("glVertexAttribs1dvNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttribs1fvNV = (GLEEPFNGLVERTEXATTRIBS1FVNVPROC) __GLeeGetProcAddress("glVertexAttribs1fvNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttribs1svNV = (GLEEPFNGLVERTEXATTRIBS1SVNVPROC) __GLeeGetProcAddress("glVertexAttribs1svNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttribs2dvNV = (GLEEPFNGLVERTEXATTRIBS2DVNVPROC) __GLeeGetProcAddress("glVertexAttribs2dvNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttribs2fvNV = (GLEEPFNGLVERTEXATTRIBS2FVNVPROC) __GLeeGetProcAddress("glVertexAttribs2fvNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttribs2svNV = (GLEEPFNGLVERTEXATTRIBS2SVNVPROC) __GLeeGetProcAddress("glVertexAttribs2svNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttribs3dvNV = (GLEEPFNGLVERTEXATTRIBS3DVNVPROC) __GLeeGetProcAddress("glVertexAttribs3dvNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttribs3fvNV = (GLEEPFNGLVERTEXATTRIBS3FVNVPROC) __GLeeGetProcAddress("glVertexAttribs3fvNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttribs3svNV = (GLEEPFNGLVERTEXATTRIBS3SVNVPROC) __GLeeGetProcAddress("glVertexAttribs3svNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttribs4dvNV = (GLEEPFNGLVERTEXATTRIBS4DVNVPROC) __GLeeGetProcAddress("glVertexAttribs4dvNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttribs4fvNV = (GLEEPFNGLVERTEXATTRIBS4FVNVPROC) __GLeeGetProcAddress("glVertexAttribs4fvNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttribs4svNV = (GLEEPFNGLVERTEXATTRIBS4SVNVPROC) __GLeeGetProcAddress("glVertexAttribs4svNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttribs4ubvNV = (GLEEPFNGLVERTEXATTRIBS4UBVNVPROC) __GLeeGetProcAddress("glVertexAttribs4ubvNV"))!=0) nLinked++;
+#endif
+    if (nLinked==64) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_SGIX_texture_coordinate_clamp(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_SGIX_scalebias_hint(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_OML_interlace(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_OML_subsample(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_OML_resample(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_NV_copy_depth_to_color(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_ATI_envmap_bumpmap(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_ATI_envmap_bumpmap
+    if ((GLeeFuncPtr_glTexBumpParameterivATI = (GLEEPFNGLTEXBUMPPARAMETERIVATIPROC) __GLeeGetProcAddress("glTexBumpParameterivATI"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glTexBumpParameterfvATI = (GLEEPFNGLTEXBUMPPARAMETERFVATIPROC) __GLeeGetProcAddress("glTexBumpParameterfvATI"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetTexBumpParameterivATI = (GLEEPFNGLGETTEXBUMPPARAMETERIVATIPROC) __GLeeGetProcAddress("glGetTexBumpParameterivATI"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetTexBumpParameterfvATI = (GLEEPFNGLGETTEXBUMPPARAMETERFVATIPROC) __GLeeGetProcAddress("glGetTexBumpParameterfvATI"))!=0) nLinked++;
+#endif
+    if (nLinked==4) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_ATI_fragment_shader(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_ATI_fragment_shader
+    if ((GLeeFuncPtr_glGenFragmentShadersATI = (GLEEPFNGLGENFRAGMENTSHADERSATIPROC) __GLeeGetProcAddress("glGenFragmentShadersATI"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glBindFragmentShaderATI = (GLEEPFNGLBINDFRAGMENTSHADERATIPROC) __GLeeGetProcAddress("glBindFragmentShaderATI"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glDeleteFragmentShaderATI = (GLEEPFNGLDELETEFRAGMENTSHADERATIPROC) __GLeeGetProcAddress("glDeleteFragmentShaderATI"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glBeginFragmentShaderATI = (GLEEPFNGLBEGINFRAGMENTSHADERATIPROC) __GLeeGetProcAddress("glBeginFragmentShaderATI"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glEndFragmentShaderATI = (GLEEPFNGLENDFRAGMENTSHADERATIPROC) __GLeeGetProcAddress("glEndFragmentShaderATI"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glPassTexCoordATI = (GLEEPFNGLPASSTEXCOORDATIPROC) __GLeeGetProcAddress("glPassTexCoordATI"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glSampleMapATI = (GLEEPFNGLSAMPLEMAPATIPROC) __GLeeGetProcAddress("glSampleMapATI"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glColorFragmentOp1ATI = (GLEEPFNGLCOLORFRAGMENTOP1ATIPROC) __GLeeGetProcAddress("glColorFragmentOp1ATI"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glColorFragmentOp2ATI = (GLEEPFNGLCOLORFRAGMENTOP2ATIPROC) __GLeeGetProcAddress("glColorFragmentOp2ATI"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glColorFragmentOp3ATI = (GLEEPFNGLCOLORFRAGMENTOP3ATIPROC) __GLeeGetProcAddress("glColorFragmentOp3ATI"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glAlphaFragmentOp1ATI = (GLEEPFNGLALPHAFRAGMENTOP1ATIPROC) __GLeeGetProcAddress("glAlphaFragmentOp1ATI"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glAlphaFragmentOp2ATI = (GLEEPFNGLALPHAFRAGMENTOP2ATIPROC) __GLeeGetProcAddress("glAlphaFragmentOp2ATI"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glAlphaFragmentOp3ATI = (GLEEPFNGLALPHAFRAGMENTOP3ATIPROC) __GLeeGetProcAddress("glAlphaFragmentOp3ATI"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glSetFragmentShaderConstantATI = (GLEEPFNGLSETFRAGMENTSHADERCONSTANTATIPROC) __GLeeGetProcAddress("glSetFragmentShaderConstantATI"))!=0) nLinked++;
+#endif
+    if (nLinked==14) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_ATI_pn_triangles(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_ATI_pn_triangles
+    if ((GLeeFuncPtr_glPNTrianglesiATI = (GLEEPFNGLPNTRIANGLESIATIPROC) __GLeeGetProcAddress("glPNTrianglesiATI"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glPNTrianglesfATI = (GLEEPFNGLPNTRIANGLESFATIPROC) __GLeeGetProcAddress("glPNTrianglesfATI"))!=0) nLinked++;
+#endif
+    if (nLinked==2) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_ATI_vertex_array_object(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_ATI_vertex_array_object
+    if ((GLeeFuncPtr_glNewObjectBufferATI = (GLEEPFNGLNEWOBJECTBUFFERATIPROC) __GLeeGetProcAddress("glNewObjectBufferATI"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glIsObjectBufferATI = (GLEEPFNGLISOBJECTBUFFERATIPROC) __GLeeGetProcAddress("glIsObjectBufferATI"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glUpdateObjectBufferATI = (GLEEPFNGLUPDATEOBJECTBUFFERATIPROC) __GLeeGetProcAddress("glUpdateObjectBufferATI"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetObjectBufferfvATI = (GLEEPFNGLGETOBJECTBUFFERFVATIPROC) __GLeeGetProcAddress("glGetObjectBufferfvATI"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetObjectBufferivATI = (GLEEPFNGLGETOBJECTBUFFERIVATIPROC) __GLeeGetProcAddress("glGetObjectBufferivATI"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glFreeObjectBufferATI = (GLEEPFNGLFREEOBJECTBUFFERATIPROC) __GLeeGetProcAddress("glFreeObjectBufferATI"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glArrayObjectATI = (GLEEPFNGLARRAYOBJECTATIPROC) __GLeeGetProcAddress("glArrayObjectATI"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetArrayObjectfvATI = (GLEEPFNGLGETARRAYOBJECTFVATIPROC) __GLeeGetProcAddress("glGetArrayObjectfvATI"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetArrayObjectivATI = (GLEEPFNGLGETARRAYOBJECTIVATIPROC) __GLeeGetProcAddress("glGetArrayObjectivATI"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVariantArrayObjectATI = (GLEEPFNGLVARIANTARRAYOBJECTATIPROC) __GLeeGetProcAddress("glVariantArrayObjectATI"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetVariantArrayObjectfvATI = (GLEEPFNGLGETVARIANTARRAYOBJECTFVATIPROC) __GLeeGetProcAddress("glGetVariantArrayObjectfvATI"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetVariantArrayObjectivATI = (GLEEPFNGLGETVARIANTARRAYOBJECTIVATIPROC) __GLeeGetProcAddress("glGetVariantArrayObjectivATI"))!=0) nLinked++;
+#endif
+    if (nLinked==12) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_EXT_vertex_shader(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_EXT_vertex_shader
+    if ((GLeeFuncPtr_glBeginVertexShaderEXT = (GLEEPFNGLBEGINVERTEXSHADEREXTPROC) __GLeeGetProcAddress("glBeginVertexShaderEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glEndVertexShaderEXT = (GLEEPFNGLENDVERTEXSHADEREXTPROC) __GLeeGetProcAddress("glEndVertexShaderEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glBindVertexShaderEXT = (GLEEPFNGLBINDVERTEXSHADEREXTPROC) __GLeeGetProcAddress("glBindVertexShaderEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGenVertexShadersEXT = (GLEEPFNGLGENVERTEXSHADERSEXTPROC) __GLeeGetProcAddress("glGenVertexShadersEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glDeleteVertexShaderEXT = (GLEEPFNGLDELETEVERTEXSHADEREXTPROC) __GLeeGetProcAddress("glDeleteVertexShaderEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glShaderOp1EXT = (GLEEPFNGLSHADEROP1EXTPROC) __GLeeGetProcAddress("glShaderOp1EXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glShaderOp2EXT = (GLEEPFNGLSHADEROP2EXTPROC) __GLeeGetProcAddress("glShaderOp2EXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glShaderOp3EXT = (GLEEPFNGLSHADEROP3EXTPROC) __GLeeGetProcAddress("glShaderOp3EXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glSwizzleEXT = (GLEEPFNGLSWIZZLEEXTPROC) __GLeeGetProcAddress("glSwizzleEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glWriteMaskEXT = (GLEEPFNGLWRITEMASKEXTPROC) __GLeeGetProcAddress("glWriteMaskEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glInsertComponentEXT = (GLEEPFNGLINSERTCOMPONENTEXTPROC) __GLeeGetProcAddress("glInsertComponentEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glExtractComponentEXT = (GLEEPFNGLEXTRACTCOMPONENTEXTPROC) __GLeeGetProcAddress("glExtractComponentEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGenSymbolsEXT = (GLEEPFNGLGENSYMBOLSEXTPROC) __GLeeGetProcAddress("glGenSymbolsEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glSetInvariantEXT = (GLEEPFNGLSETINVARIANTEXTPROC) __GLeeGetProcAddress("glSetInvariantEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glSetLocalConstantEXT = (GLEEPFNGLSETLOCALCONSTANTEXTPROC) __GLeeGetProcAddress("glSetLocalConstantEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVariantbvEXT = (GLEEPFNGLVARIANTBVEXTPROC) __GLeeGetProcAddress("glVariantbvEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVariantsvEXT = (GLEEPFNGLVARIANTSVEXTPROC) __GLeeGetProcAddress("glVariantsvEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVariantivEXT = (GLEEPFNGLVARIANTIVEXTPROC) __GLeeGetProcAddress("glVariantivEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVariantfvEXT = (GLEEPFNGLVARIANTFVEXTPROC) __GLeeGetProcAddress("glVariantfvEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVariantdvEXT = (GLEEPFNGLVARIANTDVEXTPROC) __GLeeGetProcAddress("glVariantdvEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVariantubvEXT = (GLEEPFNGLVARIANTUBVEXTPROC) __GLeeGetProcAddress("glVariantubvEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVariantusvEXT = (GLEEPFNGLVARIANTUSVEXTPROC) __GLeeGetProcAddress("glVariantusvEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVariantuivEXT = (GLEEPFNGLVARIANTUIVEXTPROC) __GLeeGetProcAddress("glVariantuivEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVariantPointerEXT = (GLEEPFNGLVARIANTPOINTEREXTPROC) __GLeeGetProcAddress("glVariantPointerEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glEnableVariantClientStateEXT = (GLEEPFNGLENABLEVARIANTCLIENTSTATEEXTPROC) __GLeeGetProcAddress("glEnableVariantClientStateEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glDisableVariantClientStateEXT = (GLEEPFNGLDISABLEVARIANTCLIENTSTATEEXTPROC) __GLeeGetProcAddress("glDisableVariantClientStateEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glBindLightParameterEXT = (GLEEPFNGLBINDLIGHTPARAMETEREXTPROC) __GLeeGetProcAddress("glBindLightParameterEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glBindMaterialParameterEXT = (GLEEPFNGLBINDMATERIALPARAMETEREXTPROC) __GLeeGetProcAddress("glBindMaterialParameterEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glBindTexGenParameterEXT = (GLEEPFNGLBINDTEXGENPARAMETEREXTPROC) __GLeeGetProcAddress("glBindTexGenParameterEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glBindTextureUnitParameterEXT = (GLEEPFNGLBINDTEXTUREUNITPARAMETEREXTPROC) __GLeeGetProcAddress("glBindTextureUnitParameterEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glBindParameterEXT = (GLEEPFNGLBINDPARAMETEREXTPROC) __GLeeGetProcAddress("glBindParameterEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glIsVariantEnabledEXT = (GLEEPFNGLISVARIANTENABLEDEXTPROC) __GLeeGetProcAddress("glIsVariantEnabledEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetVariantBooleanvEXT = (GLEEPFNGLGETVARIANTBOOLEANVEXTPROC) __GLeeGetProcAddress("glGetVariantBooleanvEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetVariantIntegervEXT = (GLEEPFNGLGETVARIANTINTEGERVEXTPROC) __GLeeGetProcAddress("glGetVariantIntegervEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetVariantFloatvEXT = (GLEEPFNGLGETVARIANTFLOATVEXTPROC) __GLeeGetProcAddress("glGetVariantFloatvEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetVariantPointervEXT = (GLEEPFNGLGETVARIANTPOINTERVEXTPROC) __GLeeGetProcAddress("glGetVariantPointervEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetInvariantBooleanvEXT = (GLEEPFNGLGETINVARIANTBOOLEANVEXTPROC) __GLeeGetProcAddress("glGetInvariantBooleanvEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetInvariantIntegervEXT = (GLEEPFNGLGETINVARIANTINTEGERVEXTPROC) __GLeeGetProcAddress("glGetInvariantIntegervEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetInvariantFloatvEXT = (GLEEPFNGLGETINVARIANTFLOATVEXTPROC) __GLeeGetProcAddress("glGetInvariantFloatvEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetLocalConstantBooleanvEXT = (GLEEPFNGLGETLOCALCONSTANTBOOLEANVEXTPROC) __GLeeGetProcAddress("glGetLocalConstantBooleanvEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetLocalConstantIntegervEXT = (GLEEPFNGLGETLOCALCONSTANTINTEGERVEXTPROC) __GLeeGetProcAddress("glGetLocalConstantIntegervEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetLocalConstantFloatvEXT = (GLEEPFNGLGETLOCALCONSTANTFLOATVEXTPROC) __GLeeGetProcAddress("glGetLocalConstantFloatvEXT"))!=0) nLinked++;
+#endif
+    if (nLinked==42) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_ATI_vertex_streams(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_ATI_vertex_streams
+    if ((GLeeFuncPtr_glVertexStream1sATI = (GLEEPFNGLVERTEXSTREAM1SATIPROC) __GLeeGetProcAddress("glVertexStream1sATI"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexStream1svATI = (GLEEPFNGLVERTEXSTREAM1SVATIPROC) __GLeeGetProcAddress("glVertexStream1svATI"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexStream1iATI = (GLEEPFNGLVERTEXSTREAM1IATIPROC) __GLeeGetProcAddress("glVertexStream1iATI"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexStream1ivATI = (GLEEPFNGLVERTEXSTREAM1IVATIPROC) __GLeeGetProcAddress("glVertexStream1ivATI"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexStream1fATI = (GLEEPFNGLVERTEXSTREAM1FATIPROC) __GLeeGetProcAddress("glVertexStream1fATI"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexStream1fvATI = (GLEEPFNGLVERTEXSTREAM1FVATIPROC) __GLeeGetProcAddress("glVertexStream1fvATI"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexStream1dATI = (GLEEPFNGLVERTEXSTREAM1DATIPROC) __GLeeGetProcAddress("glVertexStream1dATI"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexStream1dvATI = (GLEEPFNGLVERTEXSTREAM1DVATIPROC) __GLeeGetProcAddress("glVertexStream1dvATI"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexStream2sATI = (GLEEPFNGLVERTEXSTREAM2SATIPROC) __GLeeGetProcAddress("glVertexStream2sATI"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexStream2svATI = (GLEEPFNGLVERTEXSTREAM2SVATIPROC) __GLeeGetProcAddress("glVertexStream2svATI"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexStream2iATI = (GLEEPFNGLVERTEXSTREAM2IATIPROC) __GLeeGetProcAddress("glVertexStream2iATI"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexStream2ivATI = (GLEEPFNGLVERTEXSTREAM2IVATIPROC) __GLeeGetProcAddress("glVertexStream2ivATI"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexStream2fATI = (GLEEPFNGLVERTEXSTREAM2FATIPROC) __GLeeGetProcAddress("glVertexStream2fATI"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexStream2fvATI = (GLEEPFNGLVERTEXSTREAM2FVATIPROC) __GLeeGetProcAddress("glVertexStream2fvATI"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexStream2dATI = (GLEEPFNGLVERTEXSTREAM2DATIPROC) __GLeeGetProcAddress("glVertexStream2dATI"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexStream2dvATI = (GLEEPFNGLVERTEXSTREAM2DVATIPROC) __GLeeGetProcAddress("glVertexStream2dvATI"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexStream3sATI = (GLEEPFNGLVERTEXSTREAM3SATIPROC) __GLeeGetProcAddress("glVertexStream3sATI"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexStream3svATI = (GLEEPFNGLVERTEXSTREAM3SVATIPROC) __GLeeGetProcAddress("glVertexStream3svATI"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexStream3iATI = (GLEEPFNGLVERTEXSTREAM3IATIPROC) __GLeeGetProcAddress("glVertexStream3iATI"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexStream3ivATI = (GLEEPFNGLVERTEXSTREAM3IVATIPROC) __GLeeGetProcAddress("glVertexStream3ivATI"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexStream3fATI = (GLEEPFNGLVERTEXSTREAM3FATIPROC) __GLeeGetProcAddress("glVertexStream3fATI"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexStream3fvATI = (GLEEPFNGLVERTEXSTREAM3FVATIPROC) __GLeeGetProcAddress("glVertexStream3fvATI"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexStream3dATI = (GLEEPFNGLVERTEXSTREAM3DATIPROC) __GLeeGetProcAddress("glVertexStream3dATI"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexStream3dvATI = (GLEEPFNGLVERTEXSTREAM3DVATIPROC) __GLeeGetProcAddress("glVertexStream3dvATI"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexStream4sATI = (GLEEPFNGLVERTEXSTREAM4SATIPROC) __GLeeGetProcAddress("glVertexStream4sATI"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexStream4svATI = (GLEEPFNGLVERTEXSTREAM4SVATIPROC) __GLeeGetProcAddress("glVertexStream4svATI"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexStream4iATI = (GLEEPFNGLVERTEXSTREAM4IATIPROC) __GLeeGetProcAddress("glVertexStream4iATI"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexStream4ivATI = (GLEEPFNGLVERTEXSTREAM4IVATIPROC) __GLeeGetProcAddress("glVertexStream4ivATI"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexStream4fATI = (GLEEPFNGLVERTEXSTREAM4FATIPROC) __GLeeGetProcAddress("glVertexStream4fATI"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexStream4fvATI = (GLEEPFNGLVERTEXSTREAM4FVATIPROC) __GLeeGetProcAddress("glVertexStream4fvATI"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexStream4dATI = (GLEEPFNGLVERTEXSTREAM4DATIPROC) __GLeeGetProcAddress("glVertexStream4dATI"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexStream4dvATI = (GLEEPFNGLVERTEXSTREAM4DVATIPROC) __GLeeGetProcAddress("glVertexStream4dvATI"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glNormalStream3bATI = (GLEEPFNGLNORMALSTREAM3BATIPROC) __GLeeGetProcAddress("glNormalStream3bATI"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glNormalStream3bvATI = (GLEEPFNGLNORMALSTREAM3BVATIPROC) __GLeeGetProcAddress("glNormalStream3bvATI"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glNormalStream3sATI = (GLEEPFNGLNORMALSTREAM3SATIPROC) __GLeeGetProcAddress("glNormalStream3sATI"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glNormalStream3svATI = (GLEEPFNGLNORMALSTREAM3SVATIPROC) __GLeeGetProcAddress("glNormalStream3svATI"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glNormalStream3iATI = (GLEEPFNGLNORMALSTREAM3IATIPROC) __GLeeGetProcAddress("glNormalStream3iATI"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glNormalStream3ivATI = (GLEEPFNGLNORMALSTREAM3IVATIPROC) __GLeeGetProcAddress("glNormalStream3ivATI"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glNormalStream3fATI = (GLEEPFNGLNORMALSTREAM3FATIPROC) __GLeeGetProcAddress("glNormalStream3fATI"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glNormalStream3fvATI = (GLEEPFNGLNORMALSTREAM3FVATIPROC) __GLeeGetProcAddress("glNormalStream3fvATI"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glNormalStream3dATI = (GLEEPFNGLNORMALSTREAM3DATIPROC) __GLeeGetProcAddress("glNormalStream3dATI"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glNormalStream3dvATI = (GLEEPFNGLNORMALSTREAM3DVATIPROC) __GLeeGetProcAddress("glNormalStream3dvATI"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glClientActiveVertexStreamATI = (GLEEPFNGLCLIENTACTIVEVERTEXSTREAMATIPROC) __GLeeGetProcAddress("glClientActiveVertexStreamATI"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexBlendEnviATI = (GLEEPFNGLVERTEXBLENDENVIATIPROC) __GLeeGetProcAddress("glVertexBlendEnviATI"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexBlendEnvfATI = (GLEEPFNGLVERTEXBLENDENVFATIPROC) __GLeeGetProcAddress("glVertexBlendEnvfATI"))!=0) nLinked++;
+#endif
+    if (nLinked==45) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_ATI_element_array(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_ATI_element_array
+    if ((GLeeFuncPtr_glElementPointerATI = (GLEEPFNGLELEMENTPOINTERATIPROC) __GLeeGetProcAddress("glElementPointerATI"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glDrawElementArrayATI = (GLEEPFNGLDRAWELEMENTARRAYATIPROC) __GLeeGetProcAddress("glDrawElementArrayATI"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glDrawRangeElementArrayATI = (GLEEPFNGLDRAWRANGEELEMENTARRAYATIPROC) __GLeeGetProcAddress("glDrawRangeElementArrayATI"))!=0) nLinked++;
+#endif
+    if (nLinked==3) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_SUN_mesh_array(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_SUN_mesh_array
+    if ((GLeeFuncPtr_glDrawMeshArraysSUN = (GLEEPFNGLDRAWMESHARRAYSSUNPROC) __GLeeGetProcAddress("glDrawMeshArraysSUN"))!=0) nLinked++;
+#endif
+    if (nLinked==1) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_SUN_slice_accum(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_NV_multisample_filter_hint(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_NV_depth_clamp(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_NV_occlusion_query(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_NV_occlusion_query
+    if ((GLeeFuncPtr_glGenOcclusionQueriesNV = (GLEEPFNGLGENOCCLUSIONQUERIESNVPROC) __GLeeGetProcAddress("glGenOcclusionQueriesNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glDeleteOcclusionQueriesNV = (GLEEPFNGLDELETEOCCLUSIONQUERIESNVPROC) __GLeeGetProcAddress("glDeleteOcclusionQueriesNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glIsOcclusionQueryNV = (GLEEPFNGLISOCCLUSIONQUERYNVPROC) __GLeeGetProcAddress("glIsOcclusionQueryNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glBeginOcclusionQueryNV = (GLEEPFNGLBEGINOCCLUSIONQUERYNVPROC) __GLeeGetProcAddress("glBeginOcclusionQueryNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glEndOcclusionQueryNV = (GLEEPFNGLENDOCCLUSIONQUERYNVPROC) __GLeeGetProcAddress("glEndOcclusionQueryNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetOcclusionQueryivNV = (GLEEPFNGLGETOCCLUSIONQUERYIVNVPROC) __GLeeGetProcAddress("glGetOcclusionQueryivNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetOcclusionQueryuivNV = (GLEEPFNGLGETOCCLUSIONQUERYUIVNVPROC) __GLeeGetProcAddress("glGetOcclusionQueryuivNV"))!=0) nLinked++;
+#endif
+    if (nLinked==7) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_NV_point_sprite(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_NV_point_sprite
+    if ((GLeeFuncPtr_glPointParameteriNV = (GLEEPFNGLPOINTPARAMETERINVPROC) __GLeeGetProcAddress("glPointParameteriNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glPointParameterivNV = (GLEEPFNGLPOINTPARAMETERIVNVPROC) __GLeeGetProcAddress("glPointParameterivNV"))!=0) nLinked++;
+#endif
+    if (nLinked==2) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_NV_texture_shader3(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_NV_vertex_program1_1(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_EXT_shadow_funcs(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_EXT_stencil_two_side(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_EXT_stencil_two_side
+    if ((GLeeFuncPtr_glActiveStencilFaceEXT = (GLEEPFNGLACTIVESTENCILFACEEXTPROC) __GLeeGetProcAddress("glActiveStencilFaceEXT"))!=0) nLinked++;
+#endif
+    if (nLinked==1) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_ATI_text_fragment_shader(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_APPLE_client_storage(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_APPLE_element_array(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_APPLE_element_array
+    if ((GLeeFuncPtr_glElementPointerAPPLE = (GLEEPFNGLELEMENTPOINTERAPPLEPROC) __GLeeGetProcAddress("glElementPointerAPPLE"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glDrawElementArrayAPPLE = (GLEEPFNGLDRAWELEMENTARRAYAPPLEPROC) __GLeeGetProcAddress("glDrawElementArrayAPPLE"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glDrawRangeElementArrayAPPLE = (GLEEPFNGLDRAWRANGEELEMENTARRAYAPPLEPROC) __GLeeGetProcAddress("glDrawRangeElementArrayAPPLE"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMultiDrawElementArrayAPPLE = (GLEEPFNGLMULTIDRAWELEMENTARRAYAPPLEPROC) __GLeeGetProcAddress("glMultiDrawElementArrayAPPLE"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMultiDrawRangeElementArrayAPPLE = (GLEEPFNGLMULTIDRAWRANGEELEMENTARRAYAPPLEPROC) __GLeeGetProcAddress("glMultiDrawRangeElementArrayAPPLE"))!=0) nLinked++;
+#endif
+    if (nLinked==5) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_APPLE_fence(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_APPLE_fence
+    if ((GLeeFuncPtr_glGenFencesAPPLE = (GLEEPFNGLGENFENCESAPPLEPROC) __GLeeGetProcAddress("glGenFencesAPPLE"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glDeleteFencesAPPLE = (GLEEPFNGLDELETEFENCESAPPLEPROC) __GLeeGetProcAddress("glDeleteFencesAPPLE"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glSetFenceAPPLE = (GLEEPFNGLSETFENCEAPPLEPROC) __GLeeGetProcAddress("glSetFenceAPPLE"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glIsFenceAPPLE = (GLEEPFNGLISFENCEAPPLEPROC) __GLeeGetProcAddress("glIsFenceAPPLE"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glTestFenceAPPLE = (GLEEPFNGLTESTFENCEAPPLEPROC) __GLeeGetProcAddress("glTestFenceAPPLE"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glFinishFenceAPPLE = (GLEEPFNGLFINISHFENCEAPPLEPROC) __GLeeGetProcAddress("glFinishFenceAPPLE"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glTestObjectAPPLE = (GLEEPFNGLTESTOBJECTAPPLEPROC) __GLeeGetProcAddress("glTestObjectAPPLE"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glFinishObjectAPPLE = (GLEEPFNGLFINISHOBJECTAPPLEPROC) __GLeeGetProcAddress("glFinishObjectAPPLE"))!=0) nLinked++;
+#endif
+    if (nLinked==8) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_APPLE_vertex_array_object(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_APPLE_vertex_array_object
+    if ((GLeeFuncPtr_glBindVertexArrayAPPLE = (GLEEPFNGLBINDVERTEXARRAYAPPLEPROC) __GLeeGetProcAddress("glBindVertexArrayAPPLE"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glDeleteVertexArraysAPPLE = (GLEEPFNGLDELETEVERTEXARRAYSAPPLEPROC) __GLeeGetProcAddress("glDeleteVertexArraysAPPLE"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGenVertexArraysAPPLE = (GLEEPFNGLGENVERTEXARRAYSAPPLEPROC) __GLeeGetProcAddress("glGenVertexArraysAPPLE"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glIsVertexArrayAPPLE = (GLEEPFNGLISVERTEXARRAYAPPLEPROC) __GLeeGetProcAddress("glIsVertexArrayAPPLE"))!=0) nLinked++;
+#endif
+    if (nLinked==4) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_APPLE_vertex_array_range(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_APPLE_vertex_array_range
+    if ((GLeeFuncPtr_glVertexArrayRangeAPPLE = (GLEEPFNGLVERTEXARRAYRANGEAPPLEPROC) __GLeeGetProcAddress("glVertexArrayRangeAPPLE"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glFlushVertexArrayRangeAPPLE = (GLEEPFNGLFLUSHVERTEXARRAYRANGEAPPLEPROC) __GLeeGetProcAddress("glFlushVertexArrayRangeAPPLE"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexArrayParameteriAPPLE = (GLEEPFNGLVERTEXARRAYPARAMETERIAPPLEPROC) __GLeeGetProcAddress("glVertexArrayParameteriAPPLE"))!=0) nLinked++;
+#endif
+    if (nLinked==3) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_APPLE_ycbcr_422(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_S3_s3tc(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_ATI_draw_buffers(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_ATI_draw_buffers
+    if ((GLeeFuncPtr_glDrawBuffersATI = (GLEEPFNGLDRAWBUFFERSATIPROC) __GLeeGetProcAddress("glDrawBuffersATI"))!=0) nLinked++;
+#endif
+    if (nLinked==1) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_ATI_pixel_format_float(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_ATI_texture_env_combine3(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_ATI_texture_float(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_NV_float_buffer(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_NV_fragment_program(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_NV_fragment_program
+    if ((GLeeFuncPtr_glProgramNamedParameter4fNV = (GLEEPFNGLPROGRAMNAMEDPARAMETER4FNVPROC) __GLeeGetProcAddress("glProgramNamedParameter4fNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramNamedParameter4dNV = (GLEEPFNGLPROGRAMNAMEDPARAMETER4DNVPROC) __GLeeGetProcAddress("glProgramNamedParameter4dNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramNamedParameter4fvNV = (GLEEPFNGLPROGRAMNAMEDPARAMETER4FVNVPROC) __GLeeGetProcAddress("glProgramNamedParameter4fvNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramNamedParameter4dvNV = (GLEEPFNGLPROGRAMNAMEDPARAMETER4DVNVPROC) __GLeeGetProcAddress("glProgramNamedParameter4dvNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetProgramNamedParameterfvNV = (GLEEPFNGLGETPROGRAMNAMEDPARAMETERFVNVPROC) __GLeeGetProcAddress("glGetProgramNamedParameterfvNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetProgramNamedParameterdvNV = (GLEEPFNGLGETPROGRAMNAMEDPARAMETERDVNVPROC) __GLeeGetProcAddress("glGetProgramNamedParameterdvNV"))!=0) nLinked++;
+#endif
+    if (nLinked==6) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_NV_half_float(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_NV_half_float
+    if ((GLeeFuncPtr_glVertex2hNV = (GLEEPFNGLVERTEX2HNVPROC) __GLeeGetProcAddress("glVertex2hNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertex2hvNV = (GLEEPFNGLVERTEX2HVNVPROC) __GLeeGetProcAddress("glVertex2hvNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertex3hNV = (GLEEPFNGLVERTEX3HNVPROC) __GLeeGetProcAddress("glVertex3hNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertex3hvNV = (GLEEPFNGLVERTEX3HVNVPROC) __GLeeGetProcAddress("glVertex3hvNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertex4hNV = (GLEEPFNGLVERTEX4HNVPROC) __GLeeGetProcAddress("glVertex4hNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertex4hvNV = (GLEEPFNGLVERTEX4HVNVPROC) __GLeeGetProcAddress("glVertex4hvNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glNormal3hNV = (GLEEPFNGLNORMAL3HNVPROC) __GLeeGetProcAddress("glNormal3hNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glNormal3hvNV = (GLEEPFNGLNORMAL3HVNVPROC) __GLeeGetProcAddress("glNormal3hvNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glColor3hNV = (GLEEPFNGLCOLOR3HNVPROC) __GLeeGetProcAddress("glColor3hNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glColor3hvNV = (GLEEPFNGLCOLOR3HVNVPROC) __GLeeGetProcAddress("glColor3hvNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glColor4hNV = (GLEEPFNGLCOLOR4HNVPROC) __GLeeGetProcAddress("glColor4hNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glColor4hvNV = (GLEEPFNGLCOLOR4HVNVPROC) __GLeeGetProcAddress("glColor4hvNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glTexCoord1hNV = (GLEEPFNGLTEXCOORD1HNVPROC) __GLeeGetProcAddress("glTexCoord1hNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glTexCoord1hvNV = (GLEEPFNGLTEXCOORD1HVNVPROC) __GLeeGetProcAddress("glTexCoord1hvNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glTexCoord2hNV = (GLEEPFNGLTEXCOORD2HNVPROC) __GLeeGetProcAddress("glTexCoord2hNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glTexCoord2hvNV = (GLEEPFNGLTEXCOORD2HVNVPROC) __GLeeGetProcAddress("glTexCoord2hvNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glTexCoord3hNV = (GLEEPFNGLTEXCOORD3HNVPROC) __GLeeGetProcAddress("glTexCoord3hNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glTexCoord3hvNV = (GLEEPFNGLTEXCOORD3HVNVPROC) __GLeeGetProcAddress("glTexCoord3hvNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glTexCoord4hNV = (GLEEPFNGLTEXCOORD4HNVPROC) __GLeeGetProcAddress("glTexCoord4hNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glTexCoord4hvNV = (GLEEPFNGLTEXCOORD4HVNVPROC) __GLeeGetProcAddress("glTexCoord4hvNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMultiTexCoord1hNV = (GLEEPFNGLMULTITEXCOORD1HNVPROC) __GLeeGetProcAddress("glMultiTexCoord1hNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMultiTexCoord1hvNV = (GLEEPFNGLMULTITEXCOORD1HVNVPROC) __GLeeGetProcAddress("glMultiTexCoord1hvNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMultiTexCoord2hNV = (GLEEPFNGLMULTITEXCOORD2HNVPROC) __GLeeGetProcAddress("glMultiTexCoord2hNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMultiTexCoord2hvNV = (GLEEPFNGLMULTITEXCOORD2HVNVPROC) __GLeeGetProcAddress("glMultiTexCoord2hvNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMultiTexCoord3hNV = (GLEEPFNGLMULTITEXCOORD3HNVPROC) __GLeeGetProcAddress("glMultiTexCoord3hNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMultiTexCoord3hvNV = (GLEEPFNGLMULTITEXCOORD3HVNVPROC) __GLeeGetProcAddress("glMultiTexCoord3hvNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMultiTexCoord4hNV = (GLEEPFNGLMULTITEXCOORD4HNVPROC) __GLeeGetProcAddress("glMultiTexCoord4hNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMultiTexCoord4hvNV = (GLEEPFNGLMULTITEXCOORD4HVNVPROC) __GLeeGetProcAddress("glMultiTexCoord4hvNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glFogCoordhNV = (GLEEPFNGLFOGCOORDHNVPROC) __GLeeGetProcAddress("glFogCoordhNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glFogCoordhvNV = (GLEEPFNGLFOGCOORDHVNVPROC) __GLeeGetProcAddress("glFogCoordhvNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glSecondaryColor3hNV = (GLEEPFNGLSECONDARYCOLOR3HNVPROC) __GLeeGetProcAddress("glSecondaryColor3hNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glSecondaryColor3hvNV = (GLEEPFNGLSECONDARYCOLOR3HVNVPROC) __GLeeGetProcAddress("glSecondaryColor3hvNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexWeighthNV = (GLEEPFNGLVERTEXWEIGHTHNVPROC) __GLeeGetProcAddress("glVertexWeighthNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexWeighthvNV = (GLEEPFNGLVERTEXWEIGHTHVNVPROC) __GLeeGetProcAddress("glVertexWeighthvNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttrib1hNV = (GLEEPFNGLVERTEXATTRIB1HNVPROC) __GLeeGetProcAddress("glVertexAttrib1hNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttrib1hvNV = (GLEEPFNGLVERTEXATTRIB1HVNVPROC) __GLeeGetProcAddress("glVertexAttrib1hvNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttrib2hNV = (GLEEPFNGLVERTEXATTRIB2HNVPROC) __GLeeGetProcAddress("glVertexAttrib2hNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttrib2hvNV = (GLEEPFNGLVERTEXATTRIB2HVNVPROC) __GLeeGetProcAddress("glVertexAttrib2hvNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttrib3hNV = (GLEEPFNGLVERTEXATTRIB3HNVPROC) __GLeeGetProcAddress("glVertexAttrib3hNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttrib3hvNV = (GLEEPFNGLVERTEXATTRIB3HVNVPROC) __GLeeGetProcAddress("glVertexAttrib3hvNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttrib4hNV = (GLEEPFNGLVERTEXATTRIB4HNVPROC) __GLeeGetProcAddress("glVertexAttrib4hNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttrib4hvNV = (GLEEPFNGLVERTEXATTRIB4HVNVPROC) __GLeeGetProcAddress("glVertexAttrib4hvNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttribs1hvNV = (GLEEPFNGLVERTEXATTRIBS1HVNVPROC) __GLeeGetProcAddress("glVertexAttribs1hvNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttribs2hvNV = (GLEEPFNGLVERTEXATTRIBS2HVNVPROC) __GLeeGetProcAddress("glVertexAttribs2hvNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttribs3hvNV = (GLEEPFNGLVERTEXATTRIBS3HVNVPROC) __GLeeGetProcAddress("glVertexAttribs3hvNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttribs4hvNV = (GLEEPFNGLVERTEXATTRIBS4HVNVPROC) __GLeeGetProcAddress("glVertexAttribs4hvNV"))!=0) nLinked++;
+#endif
+    if (nLinked==46) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_NV_pixel_data_range(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_NV_pixel_data_range
+    if ((GLeeFuncPtr_glPixelDataRangeNV = (GLEEPFNGLPIXELDATARANGENVPROC) __GLeeGetProcAddress("glPixelDataRangeNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glFlushPixelDataRangeNV = (GLEEPFNGLFLUSHPIXELDATARANGENVPROC) __GLeeGetProcAddress("glFlushPixelDataRangeNV"))!=0) nLinked++;
+#endif
+    if (nLinked==2) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_NV_primitive_restart(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_NV_primitive_restart
+    if ((GLeeFuncPtr_glPrimitiveRestartNV = (GLEEPFNGLPRIMITIVERESTARTNVPROC) __GLeeGetProcAddress("glPrimitiveRestartNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glPrimitiveRestartIndexNV = (GLEEPFNGLPRIMITIVERESTARTINDEXNVPROC) __GLeeGetProcAddress("glPrimitiveRestartIndexNV"))!=0) nLinked++;
+#endif
+    if (nLinked==2) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_NV_texture_expand_normal(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_NV_vertex_program2(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_ATI_map_object_buffer(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_ATI_map_object_buffer
+    if ((GLeeFuncPtr_glMapObjectBufferATI = (GLEEPFNGLMAPOBJECTBUFFERATIPROC) __GLeeGetProcAddress("glMapObjectBufferATI"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glUnmapObjectBufferATI = (GLEEPFNGLUNMAPOBJECTBUFFERATIPROC) __GLeeGetProcAddress("glUnmapObjectBufferATI"))!=0) nLinked++;
+#endif
+    if (nLinked==2) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_ATI_separate_stencil(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_ATI_separate_stencil
+    if ((GLeeFuncPtr_glStencilOpSeparateATI = (GLEEPFNGLSTENCILOPSEPARATEATIPROC) __GLeeGetProcAddress("glStencilOpSeparateATI"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glStencilFuncSeparateATI = (GLEEPFNGLSTENCILFUNCSEPARATEATIPROC) __GLeeGetProcAddress("glStencilFuncSeparateATI"))!=0) nLinked++;
+#endif
+    if (nLinked==2) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_ATI_vertex_attrib_array_object(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_ATI_vertex_attrib_array_object
+    if ((GLeeFuncPtr_glVertexAttribArrayObjectATI = (GLEEPFNGLVERTEXATTRIBARRAYOBJECTATIPROC) __GLeeGetProcAddress("glVertexAttribArrayObjectATI"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetVertexAttribArrayObjectfvATI = (GLEEPFNGLGETVERTEXATTRIBARRAYOBJECTFVATIPROC) __GLeeGetProcAddress("glGetVertexAttribArrayObjectfvATI"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetVertexAttribArrayObjectivATI = (GLEEPFNGLGETVERTEXATTRIBARRAYOBJECTIVATIPROC) __GLeeGetProcAddress("glGetVertexAttribArrayObjectivATI"))!=0) nLinked++;
+#endif
+    if (nLinked==3) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_OES_read_format(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_EXT_depth_bounds_test(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_EXT_depth_bounds_test
+    if ((GLeeFuncPtr_glDepthBoundsEXT = (GLEEPFNGLDEPTHBOUNDSEXTPROC) __GLeeGetProcAddress("glDepthBoundsEXT"))!=0) nLinked++;
+#endif
+    if (nLinked==1) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_EXT_texture_mirror_clamp(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_EXT_blend_equation_separate(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_EXT_blend_equation_separate
+    if ((GLeeFuncPtr_glBlendEquationSeparateEXT = (GLEEPFNGLBLENDEQUATIONSEPARATEEXTPROC) __GLeeGetProcAddress("glBlendEquationSeparateEXT"))!=0) nLinked++;
+#endif
+    if (nLinked==1) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_MESA_pack_invert(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_MESA_ycbcr_texture(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_EXT_pixel_buffer_object(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_NV_fragment_program_option(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_NV_fragment_program2(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_NV_vertex_program2_option(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_NV_vertex_program3(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_EXT_framebuffer_object(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_EXT_framebuffer_object
+    if ((GLeeFuncPtr_glIsRenderbufferEXT = (GLEEPFNGLISRENDERBUFFEREXTPROC) __GLeeGetProcAddress("glIsRenderbufferEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glBindRenderbufferEXT = (GLEEPFNGLBINDRENDERBUFFEREXTPROC) __GLeeGetProcAddress("glBindRenderbufferEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glDeleteRenderbuffersEXT = (GLEEPFNGLDELETERENDERBUFFERSEXTPROC) __GLeeGetProcAddress("glDeleteRenderbuffersEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGenRenderbuffersEXT = (GLEEPFNGLGENRENDERBUFFERSEXTPROC) __GLeeGetProcAddress("glGenRenderbuffersEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glRenderbufferStorageEXT = (GLEEPFNGLRENDERBUFFERSTORAGEEXTPROC) __GLeeGetProcAddress("glRenderbufferStorageEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetRenderbufferParameterivEXT = (GLEEPFNGLGETRENDERBUFFERPARAMETERIVEXTPROC) __GLeeGetProcAddress("glGetRenderbufferParameterivEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glIsFramebufferEXT = (GLEEPFNGLISFRAMEBUFFEREXTPROC) __GLeeGetProcAddress("glIsFramebufferEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glBindFramebufferEXT = (GLEEPFNGLBINDFRAMEBUFFEREXTPROC) __GLeeGetProcAddress("glBindFramebufferEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glDeleteFramebuffersEXT = (GLEEPFNGLDELETEFRAMEBUFFERSEXTPROC) __GLeeGetProcAddress("glDeleteFramebuffersEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGenFramebuffersEXT = (GLEEPFNGLGENFRAMEBUFFERSEXTPROC) __GLeeGetProcAddress("glGenFramebuffersEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glCheckFramebufferStatusEXT = (GLEEPFNGLCHECKFRAMEBUFFERSTATUSEXTPROC) __GLeeGetProcAddress("glCheckFramebufferStatusEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glFramebufferTexture1DEXT = (GLEEPFNGLFRAMEBUFFERTEXTURE1DEXTPROC) __GLeeGetProcAddress("glFramebufferTexture1DEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glFramebufferTexture2DEXT = (GLEEPFNGLFRAMEBUFFERTEXTURE2DEXTPROC) __GLeeGetProcAddress("glFramebufferTexture2DEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glFramebufferTexture3DEXT = (GLEEPFNGLFRAMEBUFFERTEXTURE3DEXTPROC) __GLeeGetProcAddress("glFramebufferTexture3DEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glFramebufferRenderbufferEXT = (GLEEPFNGLFRAMEBUFFERRENDERBUFFEREXTPROC) __GLeeGetProcAddress("glFramebufferRenderbufferEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetFramebufferAttachmentParameterivEXT = (GLEEPFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC) __GLeeGetProcAddress("glGetFramebufferAttachmentParameterivEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGenerateMipmapEXT = (GLEEPFNGLGENERATEMIPMAPEXTPROC) __GLeeGetProcAddress("glGenerateMipmapEXT"))!=0) nLinked++;
+#endif
+    if (nLinked==17) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_GREMEDY_string_marker(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_GREMEDY_string_marker
+    if ((GLeeFuncPtr_glStringMarkerGREMEDY = (GLEEPFNGLSTRINGMARKERGREMEDYPROC) __GLeeGetProcAddress("glStringMarkerGREMEDY"))!=0) nLinked++;
+#endif
+    if (nLinked==1) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_EXT_packed_depth_stencil(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_EXT_stencil_clear_tag(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_EXT_stencil_clear_tag
+    if ((GLeeFuncPtr_glStencilClearTagEXT = (GLEEPFNGLSTENCILCLEARTAGEXTPROC) __GLeeGetProcAddress("glStencilClearTagEXT"))!=0) nLinked++;
+#endif
+    if (nLinked==1) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_EXT_texture_sRGB(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_EXT_framebuffer_blit(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_EXT_framebuffer_blit
+    if ((GLeeFuncPtr_glBlitFramebufferEXT = (GLEEPFNGLBLITFRAMEBUFFEREXTPROC) __GLeeGetProcAddress("glBlitFramebufferEXT"))!=0) nLinked++;
+#endif
+    if (nLinked==1) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_EXT_framebuffer_multisample(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_EXT_framebuffer_multisample
+    if ((GLeeFuncPtr_glRenderbufferStorageMultisampleEXT = (GLEEPFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC) __GLeeGetProcAddress("glRenderbufferStorageMultisampleEXT"))!=0) nLinked++;
+#endif
+    if (nLinked==1) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_MESAX_texture_stack(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_EXT_timer_query(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_EXT_timer_query
+    if ((GLeeFuncPtr_glGetQueryObjecti64vEXT = (GLEEPFNGLGETQUERYOBJECTI64VEXTPROC) __GLeeGetProcAddress("glGetQueryObjecti64vEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetQueryObjectui64vEXT = (GLEEPFNGLGETQUERYOBJECTUI64VEXTPROC) __GLeeGetProcAddress("glGetQueryObjectui64vEXT"))!=0) nLinked++;
+#endif
+    if (nLinked==2) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_EXT_gpu_program_parameters(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_EXT_gpu_program_parameters
+    if ((GLeeFuncPtr_glProgramEnvParameters4fvEXT = (GLEEPFNGLPROGRAMENVPARAMETERS4FVEXTPROC) __GLeeGetProcAddress("glProgramEnvParameters4fvEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramLocalParameters4fvEXT = (GLEEPFNGLPROGRAMLOCALPARAMETERS4FVEXTPROC) __GLeeGetProcAddress("glProgramLocalParameters4fvEXT"))!=0) nLinked++;
+#endif
+    if (nLinked==2) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_APPLE_flush_buffer_range(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_APPLE_flush_buffer_range
+    if ((GLeeFuncPtr_glBufferParameteriAPPLE = (GLEEPFNGLBUFFERPARAMETERIAPPLEPROC) __GLeeGetProcAddress("glBufferParameteriAPPLE"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glFlushMappedBufferRangeAPPLE = (GLEEPFNGLFLUSHMAPPEDBUFFERRANGEAPPLEPROC) __GLeeGetProcAddress("glFlushMappedBufferRangeAPPLE"))!=0) nLinked++;
+#endif
+    if (nLinked==2) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_EXT_gpu_shader4(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_EXT_gpu_shader4
+    if ((GLeeFuncPtr_glGetUniformuivEXT = (GLEEPFNGLGETUNIFORMUIVEXTPROC) __GLeeGetProcAddress("glGetUniformuivEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glBindFragDataLocationEXT = (GLEEPFNGLBINDFRAGDATALOCATIONEXTPROC) __GLeeGetProcAddress("glBindFragDataLocationEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetFragDataLocationEXT = (GLEEPFNGLGETFRAGDATALOCATIONEXTPROC) __GLeeGetProcAddress("glGetFragDataLocationEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glUniform1uiEXT = (GLEEPFNGLUNIFORM1UIEXTPROC) __GLeeGetProcAddress("glUniform1uiEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glUniform2uiEXT = (GLEEPFNGLUNIFORM2UIEXTPROC) __GLeeGetProcAddress("glUniform2uiEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glUniform3uiEXT = (GLEEPFNGLUNIFORM3UIEXTPROC) __GLeeGetProcAddress("glUniform3uiEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glUniform4uiEXT = (GLEEPFNGLUNIFORM4UIEXTPROC) __GLeeGetProcAddress("glUniform4uiEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glUniform1uivEXT = (GLEEPFNGLUNIFORM1UIVEXTPROC) __GLeeGetProcAddress("glUniform1uivEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glUniform2uivEXT = (GLEEPFNGLUNIFORM2UIVEXTPROC) __GLeeGetProcAddress("glUniform2uivEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glUniform3uivEXT = (GLEEPFNGLUNIFORM3UIVEXTPROC) __GLeeGetProcAddress("glUniform3uivEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glUniform4uivEXT = (GLEEPFNGLUNIFORM4UIVEXTPROC) __GLeeGetProcAddress("glUniform4uivEXT"))!=0) nLinked++;
+#endif
+    if (nLinked==11) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_EXT_draw_instanced(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_EXT_draw_instanced
+    if ((GLeeFuncPtr_glDrawArraysInstancedEXT = (GLEEPFNGLDRAWARRAYSINSTANCEDEXTPROC) __GLeeGetProcAddress("glDrawArraysInstancedEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glDrawElementsInstancedEXT = (GLEEPFNGLDRAWELEMENTSINSTANCEDEXTPROC) __GLeeGetProcAddress("glDrawElementsInstancedEXT"))!=0) nLinked++;
+#endif
+    if (nLinked==2) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_EXT_packed_float(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_EXT_texture_array(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_EXT_texture_buffer_object(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_EXT_texture_buffer_object
+    if ((GLeeFuncPtr_glTexBufferEXT = (GLEEPFNGLTEXBUFFEREXTPROC) __GLeeGetProcAddress("glTexBufferEXT"))!=0) nLinked++;
+#endif
+    if (nLinked==1) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_EXT_texture_compression_latc(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_EXT_texture_compression_rgtc(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_EXT_texture_shared_exponent(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_NV_depth_buffer_float(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_NV_depth_buffer_float
+    if ((GLeeFuncPtr_glDepthRangedNV = (GLEEPFNGLDEPTHRANGEDNVPROC) __GLeeGetProcAddress("glDepthRangedNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glClearDepthdNV = (GLEEPFNGLCLEARDEPTHDNVPROC) __GLeeGetProcAddress("glClearDepthdNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glDepthBoundsdNV = (GLEEPFNGLDEPTHBOUNDSDNVPROC) __GLeeGetProcAddress("glDepthBoundsdNV"))!=0) nLinked++;
+#endif
+    if (nLinked==3) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_NV_framebuffer_multisample_coverage(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_NV_framebuffer_multisample_coverage
+    if ((GLeeFuncPtr_glRenderbufferStorageMultisampleCoverageNV = (GLEEPFNGLRENDERBUFFERSTORAGEMULTISAMPLECOVERAGENVPROC) __GLeeGetProcAddress("glRenderbufferStorageMultisampleCoverageNV"))!=0) nLinked++;
+#endif
+    if (nLinked==1) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_EXT_framebuffer_sRGB(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_NV_geometry_shader4(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_NV_parameter_buffer_object(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_NV_parameter_buffer_object
+    if ((GLeeFuncPtr_glProgramBufferParametersfvNV = (GLEEPFNGLPROGRAMBUFFERPARAMETERSFVNVPROC) __GLeeGetProcAddress("glProgramBufferParametersfvNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramBufferParametersIivNV = (GLEEPFNGLPROGRAMBUFFERPARAMETERSIIVNVPROC) __GLeeGetProcAddress("glProgramBufferParametersIivNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramBufferParametersIuivNV = (GLEEPFNGLPROGRAMBUFFERPARAMETERSIUIVNVPROC) __GLeeGetProcAddress("glProgramBufferParametersIuivNV"))!=0) nLinked++;
+#endif
+    if (nLinked==3) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_EXT_draw_buffers2(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_EXT_draw_buffers2
+    if ((GLeeFuncPtr_glColorMaskIndexedEXT = (GLEEPFNGLCOLORMASKINDEXEDEXTPROC) __GLeeGetProcAddress("glColorMaskIndexedEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetBooleanIndexedvEXT = (GLEEPFNGLGETBOOLEANINDEXEDVEXTPROC) __GLeeGetProcAddress("glGetBooleanIndexedvEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetIntegerIndexedvEXT = (GLEEPFNGLGETINTEGERINDEXEDVEXTPROC) __GLeeGetProcAddress("glGetIntegerIndexedvEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glEnableIndexedEXT = (GLEEPFNGLENABLEINDEXEDEXTPROC) __GLeeGetProcAddress("glEnableIndexedEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glDisableIndexedEXT = (GLEEPFNGLDISABLEINDEXEDEXTPROC) __GLeeGetProcAddress("glDisableIndexedEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glIsEnabledIndexedEXT = (GLEEPFNGLISENABLEDINDEXEDEXTPROC) __GLeeGetProcAddress("glIsEnabledIndexedEXT"))!=0) nLinked++;
+#endif
+    if (nLinked==6) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_NV_transform_feedback(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_NV_transform_feedback
+    if ((GLeeFuncPtr_glBeginTransformFeedbackNV = (GLEEPFNGLBEGINTRANSFORMFEEDBACKNVPROC) __GLeeGetProcAddress("glBeginTransformFeedbackNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glEndTransformFeedbackNV = (GLEEPFNGLENDTRANSFORMFEEDBACKNVPROC) __GLeeGetProcAddress("glEndTransformFeedbackNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glTransformFeedbackAttribsNV = (GLEEPFNGLTRANSFORMFEEDBACKATTRIBSNVPROC) __GLeeGetProcAddress("glTransformFeedbackAttribsNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glBindBufferRangeNV = (GLEEPFNGLBINDBUFFERRANGENVPROC) __GLeeGetProcAddress("glBindBufferRangeNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glBindBufferOffsetNV = (GLEEPFNGLBINDBUFFEROFFSETNVPROC) __GLeeGetProcAddress("glBindBufferOffsetNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glBindBufferBaseNV = (GLEEPFNGLBINDBUFFERBASENVPROC) __GLeeGetProcAddress("glBindBufferBaseNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glTransformFeedbackVaryingsNV = (GLEEPFNGLTRANSFORMFEEDBACKVARYINGSNVPROC) __GLeeGetProcAddress("glTransformFeedbackVaryingsNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glActiveVaryingNV = (GLEEPFNGLACTIVEVARYINGNVPROC) __GLeeGetProcAddress("glActiveVaryingNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetVaryingLocationNV = (GLEEPFNGLGETVARYINGLOCATIONNVPROC) __GLeeGetProcAddress("glGetVaryingLocationNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetActiveVaryingNV = (GLEEPFNGLGETACTIVEVARYINGNVPROC) __GLeeGetProcAddress("glGetActiveVaryingNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetTransformFeedbackVaryingNV = (GLEEPFNGLGETTRANSFORMFEEDBACKVARYINGNVPROC) __GLeeGetProcAddress("glGetTransformFeedbackVaryingNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glTransformFeedbackStreamAttribsNV = (GLEEPFNGLTRANSFORMFEEDBACKSTREAMATTRIBSNVPROC) __GLeeGetProcAddress("glTransformFeedbackStreamAttribsNV"))!=0) nLinked++;
+#endif
+    if (nLinked==12) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_EXT_bindable_uniform(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_EXT_bindable_uniform
+    if ((GLeeFuncPtr_glUniformBufferEXT = (GLEEPFNGLUNIFORMBUFFEREXTPROC) __GLeeGetProcAddress("glUniformBufferEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetUniformBufferSizeEXT = (GLEEPFNGLGETUNIFORMBUFFERSIZEEXTPROC) __GLeeGetProcAddress("glGetUniformBufferSizeEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetUniformOffsetEXT = (GLEEPFNGLGETUNIFORMOFFSETEXTPROC) __GLeeGetProcAddress("glGetUniformOffsetEXT"))!=0) nLinked++;
+#endif
+    if (nLinked==3) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_EXT_texture_integer(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_EXT_texture_integer
+    if ((GLeeFuncPtr_glTexParameterIivEXT = (GLEEPFNGLTEXPARAMETERIIVEXTPROC) __GLeeGetProcAddress("glTexParameterIivEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glTexParameterIuivEXT = (GLEEPFNGLTEXPARAMETERIUIVEXTPROC) __GLeeGetProcAddress("glTexParameterIuivEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetTexParameterIivEXT = (GLEEPFNGLGETTEXPARAMETERIIVEXTPROC) __GLeeGetProcAddress("glGetTexParameterIivEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetTexParameterIuivEXT = (GLEEPFNGLGETTEXPARAMETERIUIVEXTPROC) __GLeeGetProcAddress("glGetTexParameterIuivEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glClearColorIiEXT = (GLEEPFNGLCLEARCOLORIIEXTPROC) __GLeeGetProcAddress("glClearColorIiEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glClearColorIuiEXT = (GLEEPFNGLCLEARCOLORIUIEXTPROC) __GLeeGetProcAddress("glClearColorIuiEXT"))!=0) nLinked++;
+#endif
+    if (nLinked==6) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_GREMEDY_frame_terminator(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_GREMEDY_frame_terminator
+    if ((GLeeFuncPtr_glFrameTerminatorGREMEDY = (GLEEPFNGLFRAMETERMINATORGREMEDYPROC) __GLeeGetProcAddress("glFrameTerminatorGREMEDY"))!=0) nLinked++;
+#endif
+    if (nLinked==1) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_NV_conditional_render(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_NV_conditional_render
+    if ((GLeeFuncPtr_glBeginConditionalRenderNV = (GLEEPFNGLBEGINCONDITIONALRENDERNVPROC) __GLeeGetProcAddress("glBeginConditionalRenderNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glEndConditionalRenderNV = (GLEEPFNGLENDCONDITIONALRENDERNVPROC) __GLeeGetProcAddress("glEndConditionalRenderNV"))!=0) nLinked++;
+#endif
+    if (nLinked==2) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_NV_present_video(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_NV_present_video
+    if ((GLeeFuncPtr_glPresentFrameKeyedNV = (GLEEPFNGLPRESENTFRAMEKEYEDNVPROC) __GLeeGetProcAddress("glPresentFrameKeyedNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glPresentFrameDualFillNV = (GLEEPFNGLPRESENTFRAMEDUALFILLNVPROC) __GLeeGetProcAddress("glPresentFrameDualFillNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetVideoivNV = (GLEEPFNGLGETVIDEOIVNVPROC) __GLeeGetProcAddress("glGetVideoivNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetVideouivNV = (GLEEPFNGLGETVIDEOUIVNVPROC) __GLeeGetProcAddress("glGetVideouivNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetVideoi64vNV = (GLEEPFNGLGETVIDEOI64VNVPROC) __GLeeGetProcAddress("glGetVideoi64vNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetVideoui64vNV = (GLEEPFNGLGETVIDEOUI64VNVPROC) __GLeeGetProcAddress("glGetVideoui64vNV"))!=0) nLinked++;
+#endif
+    if (nLinked==6) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_EXT_transform_feedback(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_EXT_transform_feedback
+    if ((GLeeFuncPtr_glBeginTransformFeedbackEXT = (GLEEPFNGLBEGINTRANSFORMFEEDBACKEXTPROC) __GLeeGetProcAddress("glBeginTransformFeedbackEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glEndTransformFeedbackEXT = (GLEEPFNGLENDTRANSFORMFEEDBACKEXTPROC) __GLeeGetProcAddress("glEndTransformFeedbackEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glBindBufferRangeEXT = (GLEEPFNGLBINDBUFFERRANGEEXTPROC) __GLeeGetProcAddress("glBindBufferRangeEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glBindBufferOffsetEXT = (GLEEPFNGLBINDBUFFEROFFSETEXTPROC) __GLeeGetProcAddress("glBindBufferOffsetEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glBindBufferBaseEXT = (GLEEPFNGLBINDBUFFERBASEEXTPROC) __GLeeGetProcAddress("glBindBufferBaseEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glTransformFeedbackVaryingsEXT = (GLEEPFNGLTRANSFORMFEEDBACKVARYINGSEXTPROC) __GLeeGetProcAddress("glTransformFeedbackVaryingsEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetTransformFeedbackVaryingEXT = (GLEEPFNGLGETTRANSFORMFEEDBACKVARYINGEXTPROC) __GLeeGetProcAddress("glGetTransformFeedbackVaryingEXT"))!=0) nLinked++;
+#endif
+    if (nLinked==7) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_EXT_direct_state_access(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_EXT_direct_state_access
+    if ((GLeeFuncPtr_glClientAttribDefaultEXT = (GLEEPFNGLCLIENTATTRIBDEFAULTEXTPROC) __GLeeGetProcAddress("glClientAttribDefaultEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glPushClientAttribDefaultEXT = (GLEEPFNGLPUSHCLIENTATTRIBDEFAULTEXTPROC) __GLeeGetProcAddress("glPushClientAttribDefaultEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMatrixLoadfEXT = (GLEEPFNGLMATRIXLOADFEXTPROC) __GLeeGetProcAddress("glMatrixLoadfEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMatrixLoaddEXT = (GLEEPFNGLMATRIXLOADDEXTPROC) __GLeeGetProcAddress("glMatrixLoaddEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMatrixMultfEXT = (GLEEPFNGLMATRIXMULTFEXTPROC) __GLeeGetProcAddress("glMatrixMultfEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMatrixMultdEXT = (GLEEPFNGLMATRIXMULTDEXTPROC) __GLeeGetProcAddress("glMatrixMultdEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMatrixLoadIdentityEXT = (GLEEPFNGLMATRIXLOADIDENTITYEXTPROC) __GLeeGetProcAddress("glMatrixLoadIdentityEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMatrixRotatefEXT = (GLEEPFNGLMATRIXROTATEFEXTPROC) __GLeeGetProcAddress("glMatrixRotatefEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMatrixRotatedEXT = (GLEEPFNGLMATRIXROTATEDEXTPROC) __GLeeGetProcAddress("glMatrixRotatedEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMatrixScalefEXT = (GLEEPFNGLMATRIXSCALEFEXTPROC) __GLeeGetProcAddress("glMatrixScalefEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMatrixScaledEXT = (GLEEPFNGLMATRIXSCALEDEXTPROC) __GLeeGetProcAddress("glMatrixScaledEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMatrixTranslatefEXT = (GLEEPFNGLMATRIXTRANSLATEFEXTPROC) __GLeeGetProcAddress("glMatrixTranslatefEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMatrixTranslatedEXT = (GLEEPFNGLMATRIXTRANSLATEDEXTPROC) __GLeeGetProcAddress("glMatrixTranslatedEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMatrixFrustumEXT = (GLEEPFNGLMATRIXFRUSTUMEXTPROC) __GLeeGetProcAddress("glMatrixFrustumEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMatrixOrthoEXT = (GLEEPFNGLMATRIXORTHOEXTPROC) __GLeeGetProcAddress("glMatrixOrthoEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMatrixPopEXT = (GLEEPFNGLMATRIXPOPEXTPROC) __GLeeGetProcAddress("glMatrixPopEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMatrixPushEXT = (GLEEPFNGLMATRIXPUSHEXTPROC) __GLeeGetProcAddress("glMatrixPushEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMatrixLoadTransposefEXT = (GLEEPFNGLMATRIXLOADTRANSPOSEFEXTPROC) __GLeeGetProcAddress("glMatrixLoadTransposefEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMatrixLoadTransposedEXT = (GLEEPFNGLMATRIXLOADTRANSPOSEDEXTPROC) __GLeeGetProcAddress("glMatrixLoadTransposedEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMatrixMultTransposefEXT = (GLEEPFNGLMATRIXMULTTRANSPOSEFEXTPROC) __GLeeGetProcAddress("glMatrixMultTransposefEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMatrixMultTransposedEXT = (GLEEPFNGLMATRIXMULTTRANSPOSEDEXTPROC) __GLeeGetProcAddress("glMatrixMultTransposedEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glTextureParameterfEXT = (GLEEPFNGLTEXTUREPARAMETERFEXTPROC) __GLeeGetProcAddress("glTextureParameterfEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glTextureParameterfvEXT = (GLEEPFNGLTEXTUREPARAMETERFVEXTPROC) __GLeeGetProcAddress("glTextureParameterfvEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glTextureParameteriEXT = (GLEEPFNGLTEXTUREPARAMETERIEXTPROC) __GLeeGetProcAddress("glTextureParameteriEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glTextureParameterivEXT = (GLEEPFNGLTEXTUREPARAMETERIVEXTPROC) __GLeeGetProcAddress("glTextureParameterivEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glTextureImage1DEXT = (GLEEPFNGLTEXTUREIMAGE1DEXTPROC) __GLeeGetProcAddress("glTextureImage1DEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glTextureImage2DEXT = (GLEEPFNGLTEXTUREIMAGE2DEXTPROC) __GLeeGetProcAddress("glTextureImage2DEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glTextureSubImage1DEXT = (GLEEPFNGLTEXTURESUBIMAGE1DEXTPROC) __GLeeGetProcAddress("glTextureSubImage1DEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glTextureSubImage2DEXT = (GLEEPFNGLTEXTURESUBIMAGE2DEXTPROC) __GLeeGetProcAddress("glTextureSubImage2DEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glCopyTextureImage1DEXT = (GLEEPFNGLCOPYTEXTUREIMAGE1DEXTPROC) __GLeeGetProcAddress("glCopyTextureImage1DEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glCopyTextureImage2DEXT = (GLEEPFNGLCOPYTEXTUREIMAGE2DEXTPROC) __GLeeGetProcAddress("glCopyTextureImage2DEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glCopyTextureSubImage1DEXT = (GLEEPFNGLCOPYTEXTURESUBIMAGE1DEXTPROC) __GLeeGetProcAddress("glCopyTextureSubImage1DEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glCopyTextureSubImage2DEXT = (GLEEPFNGLCOPYTEXTURESUBIMAGE2DEXTPROC) __GLeeGetProcAddress("glCopyTextureSubImage2DEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetTextureImageEXT = (GLEEPFNGLGETTEXTUREIMAGEEXTPROC) __GLeeGetProcAddress("glGetTextureImageEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetTextureParameterfvEXT = (GLEEPFNGLGETTEXTUREPARAMETERFVEXTPROC) __GLeeGetProcAddress("glGetTextureParameterfvEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetTextureParameterivEXT = (GLEEPFNGLGETTEXTUREPARAMETERIVEXTPROC) __GLeeGetProcAddress("glGetTextureParameterivEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetTextureLevelParameterfvEXT = (GLEEPFNGLGETTEXTURELEVELPARAMETERFVEXTPROC) __GLeeGetProcAddress("glGetTextureLevelParameterfvEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetTextureLevelParameterivEXT = (GLEEPFNGLGETTEXTURELEVELPARAMETERIVEXTPROC) __GLeeGetProcAddress("glGetTextureLevelParameterivEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glTextureImage3DEXT = (GLEEPFNGLTEXTUREIMAGE3DEXTPROC) __GLeeGetProcAddress("glTextureImage3DEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glTextureSubImage3DEXT = (GLEEPFNGLTEXTURESUBIMAGE3DEXTPROC) __GLeeGetProcAddress("glTextureSubImage3DEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glCopyTextureSubImage3DEXT = (GLEEPFNGLCOPYTEXTURESUBIMAGE3DEXTPROC) __GLeeGetProcAddress("glCopyTextureSubImage3DEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMultiTexParameterfEXT = (GLEEPFNGLMULTITEXPARAMETERFEXTPROC) __GLeeGetProcAddress("glMultiTexParameterfEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMultiTexParameterfvEXT = (GLEEPFNGLMULTITEXPARAMETERFVEXTPROC) __GLeeGetProcAddress("glMultiTexParameterfvEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMultiTexParameteriEXT = (GLEEPFNGLMULTITEXPARAMETERIEXTPROC) __GLeeGetProcAddress("glMultiTexParameteriEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMultiTexParameterivEXT = (GLEEPFNGLMULTITEXPARAMETERIVEXTPROC) __GLeeGetProcAddress("glMultiTexParameterivEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMultiTexImage1DEXT = (GLEEPFNGLMULTITEXIMAGE1DEXTPROC) __GLeeGetProcAddress("glMultiTexImage1DEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMultiTexImage2DEXT = (GLEEPFNGLMULTITEXIMAGE2DEXTPROC) __GLeeGetProcAddress("glMultiTexImage2DEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMultiTexSubImage1DEXT = (GLEEPFNGLMULTITEXSUBIMAGE1DEXTPROC) __GLeeGetProcAddress("glMultiTexSubImage1DEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMultiTexSubImage2DEXT = (GLEEPFNGLMULTITEXSUBIMAGE2DEXTPROC) __GLeeGetProcAddress("glMultiTexSubImage2DEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glCopyMultiTexImage1DEXT = (GLEEPFNGLCOPYMULTITEXIMAGE1DEXTPROC) __GLeeGetProcAddress("glCopyMultiTexImage1DEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glCopyMultiTexImage2DEXT = (GLEEPFNGLCOPYMULTITEXIMAGE2DEXTPROC) __GLeeGetProcAddress("glCopyMultiTexImage2DEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glCopyMultiTexSubImage1DEXT = (GLEEPFNGLCOPYMULTITEXSUBIMAGE1DEXTPROC) __GLeeGetProcAddress("glCopyMultiTexSubImage1DEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glCopyMultiTexSubImage2DEXT = (GLEEPFNGLCOPYMULTITEXSUBIMAGE2DEXTPROC) __GLeeGetProcAddress("glCopyMultiTexSubImage2DEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetMultiTexImageEXT = (GLEEPFNGLGETMULTITEXIMAGEEXTPROC) __GLeeGetProcAddress("glGetMultiTexImageEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetMultiTexParameterfvEXT = (GLEEPFNGLGETMULTITEXPARAMETERFVEXTPROC) __GLeeGetProcAddress("glGetMultiTexParameterfvEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetMultiTexParameterivEXT = (GLEEPFNGLGETMULTITEXPARAMETERIVEXTPROC) __GLeeGetProcAddress("glGetMultiTexParameterivEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetMultiTexLevelParameterfvEXT = (GLEEPFNGLGETMULTITEXLEVELPARAMETERFVEXTPROC) __GLeeGetProcAddress("glGetMultiTexLevelParameterfvEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetMultiTexLevelParameterivEXT = (GLEEPFNGLGETMULTITEXLEVELPARAMETERIVEXTPROC) __GLeeGetProcAddress("glGetMultiTexLevelParameterivEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMultiTexImage3DEXT = (GLEEPFNGLMULTITEXIMAGE3DEXTPROC) __GLeeGetProcAddress("glMultiTexImage3DEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMultiTexSubImage3DEXT = (GLEEPFNGLMULTITEXSUBIMAGE3DEXTPROC) __GLeeGetProcAddress("glMultiTexSubImage3DEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glCopyMultiTexSubImage3DEXT = (GLEEPFNGLCOPYMULTITEXSUBIMAGE3DEXTPROC) __GLeeGetProcAddress("glCopyMultiTexSubImage3DEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glBindMultiTextureEXT = (GLEEPFNGLBINDMULTITEXTUREEXTPROC) __GLeeGetProcAddress("glBindMultiTextureEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glEnableClientStateIndexedEXT = (GLEEPFNGLENABLECLIENTSTATEINDEXEDEXTPROC) __GLeeGetProcAddress("glEnableClientStateIndexedEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glDisableClientStateIndexedEXT = (GLEEPFNGLDISABLECLIENTSTATEINDEXEDEXTPROC) __GLeeGetProcAddress("glDisableClientStateIndexedEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMultiTexCoordPointerEXT = (GLEEPFNGLMULTITEXCOORDPOINTEREXTPROC) __GLeeGetProcAddress("glMultiTexCoordPointerEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMultiTexEnvfEXT = (GLEEPFNGLMULTITEXENVFEXTPROC) __GLeeGetProcAddress("glMultiTexEnvfEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMultiTexEnvfvEXT = (GLEEPFNGLMULTITEXENVFVEXTPROC) __GLeeGetProcAddress("glMultiTexEnvfvEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMultiTexEnviEXT = (GLEEPFNGLMULTITEXENVIEXTPROC) __GLeeGetProcAddress("glMultiTexEnviEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMultiTexEnvivEXT = (GLEEPFNGLMULTITEXENVIVEXTPROC) __GLeeGetProcAddress("glMultiTexEnvivEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMultiTexGendEXT = (GLEEPFNGLMULTITEXGENDEXTPROC) __GLeeGetProcAddress("glMultiTexGendEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMultiTexGendvEXT = (GLEEPFNGLMULTITEXGENDVEXTPROC) __GLeeGetProcAddress("glMultiTexGendvEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMultiTexGenfEXT = (GLEEPFNGLMULTITEXGENFEXTPROC) __GLeeGetProcAddress("glMultiTexGenfEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMultiTexGenfvEXT = (GLEEPFNGLMULTITEXGENFVEXTPROC) __GLeeGetProcAddress("glMultiTexGenfvEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMultiTexGeniEXT = (GLEEPFNGLMULTITEXGENIEXTPROC) __GLeeGetProcAddress("glMultiTexGeniEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMultiTexGenivEXT = (GLEEPFNGLMULTITEXGENIVEXTPROC) __GLeeGetProcAddress("glMultiTexGenivEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetMultiTexEnvfvEXT = (GLEEPFNGLGETMULTITEXENVFVEXTPROC) __GLeeGetProcAddress("glGetMultiTexEnvfvEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetMultiTexEnvivEXT = (GLEEPFNGLGETMULTITEXENVIVEXTPROC) __GLeeGetProcAddress("glGetMultiTexEnvivEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetMultiTexGendvEXT = (GLEEPFNGLGETMULTITEXGENDVEXTPROC) __GLeeGetProcAddress("glGetMultiTexGendvEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetMultiTexGenfvEXT = (GLEEPFNGLGETMULTITEXGENFVEXTPROC) __GLeeGetProcAddress("glGetMultiTexGenfvEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetMultiTexGenivEXT = (GLEEPFNGLGETMULTITEXGENIVEXTPROC) __GLeeGetProcAddress("glGetMultiTexGenivEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetFloatIndexedvEXT = (GLEEPFNGLGETFLOATINDEXEDVEXTPROC) __GLeeGetProcAddress("glGetFloatIndexedvEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetDoubleIndexedvEXT = (GLEEPFNGLGETDOUBLEINDEXEDVEXTPROC) __GLeeGetProcAddress("glGetDoubleIndexedvEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetPointerIndexedvEXT = (GLEEPFNGLGETPOINTERINDEXEDVEXTPROC) __GLeeGetProcAddress("glGetPointerIndexedvEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glCompressedTextureImage3DEXT = (GLEEPFNGLCOMPRESSEDTEXTUREIMAGE3DEXTPROC) __GLeeGetProcAddress("glCompressedTextureImage3DEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glCompressedTextureImage2DEXT = (GLEEPFNGLCOMPRESSEDTEXTUREIMAGE2DEXTPROC) __GLeeGetProcAddress("glCompressedTextureImage2DEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glCompressedTextureImage1DEXT = (GLEEPFNGLCOMPRESSEDTEXTUREIMAGE1DEXTPROC) __GLeeGetProcAddress("glCompressedTextureImage1DEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glCompressedTextureSubImage3DEXT = (GLEEPFNGLCOMPRESSEDTEXTURESUBIMAGE3DEXTPROC) __GLeeGetProcAddress("glCompressedTextureSubImage3DEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glCompressedTextureSubImage2DEXT = (GLEEPFNGLCOMPRESSEDTEXTURESUBIMAGE2DEXTPROC) __GLeeGetProcAddress("glCompressedTextureSubImage2DEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glCompressedTextureSubImage1DEXT = (GLEEPFNGLCOMPRESSEDTEXTURESUBIMAGE1DEXTPROC) __GLeeGetProcAddress("glCompressedTextureSubImage1DEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetCompressedTextureImageEXT = (GLEEPFNGLGETCOMPRESSEDTEXTUREIMAGEEXTPROC) __GLeeGetProcAddress("glGetCompressedTextureImageEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glCompressedMultiTexImage3DEXT = (GLEEPFNGLCOMPRESSEDMULTITEXIMAGE3DEXTPROC) __GLeeGetProcAddress("glCompressedMultiTexImage3DEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glCompressedMultiTexImage2DEXT = (GLEEPFNGLCOMPRESSEDMULTITEXIMAGE2DEXTPROC) __GLeeGetProcAddress("glCompressedMultiTexImage2DEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glCompressedMultiTexImage1DEXT = (GLEEPFNGLCOMPRESSEDMULTITEXIMAGE1DEXTPROC) __GLeeGetProcAddress("glCompressedMultiTexImage1DEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glCompressedMultiTexSubImage3DEXT = (GLEEPFNGLCOMPRESSEDMULTITEXSUBIMAGE3DEXTPROC) __GLeeGetProcAddress("glCompressedMultiTexSubImage3DEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glCompressedMultiTexSubImage2DEXT = (GLEEPFNGLCOMPRESSEDMULTITEXSUBIMAGE2DEXTPROC) __GLeeGetProcAddress("glCompressedMultiTexSubImage2DEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glCompressedMultiTexSubImage1DEXT = (GLEEPFNGLCOMPRESSEDMULTITEXSUBIMAGE1DEXTPROC) __GLeeGetProcAddress("glCompressedMultiTexSubImage1DEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetCompressedMultiTexImageEXT = (GLEEPFNGLGETCOMPRESSEDMULTITEXIMAGEEXTPROC) __GLeeGetProcAddress("glGetCompressedMultiTexImageEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glNamedProgramStringEXT = (GLEEPFNGLNAMEDPROGRAMSTRINGEXTPROC) __GLeeGetProcAddress("glNamedProgramStringEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glNamedProgramLocalParameter4dEXT = (GLEEPFNGLNAMEDPROGRAMLOCALPARAMETER4DEXTPROC) __GLeeGetProcAddress("glNamedProgramLocalParameter4dEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glNamedProgramLocalParameter4dvEXT = (GLEEPFNGLNAMEDPROGRAMLOCALPARAMETER4DVEXTPROC) __GLeeGetProcAddress("glNamedProgramLocalParameter4dvEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glNamedProgramLocalParameter4fEXT = (GLEEPFNGLNAMEDPROGRAMLOCALPARAMETER4FEXTPROC) __GLeeGetProcAddress("glNamedProgramLocalParameter4fEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glNamedProgramLocalParameter4fvEXT = (GLEEPFNGLNAMEDPROGRAMLOCALPARAMETER4FVEXTPROC) __GLeeGetProcAddress("glNamedProgramLocalParameter4fvEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetNamedProgramLocalParameterdvEXT = (GLEEPFNGLGETNAMEDPROGRAMLOCALPARAMETERDVEXTPROC) __GLeeGetProcAddress("glGetNamedProgramLocalParameterdvEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetNamedProgramLocalParameterfvEXT = (GLEEPFNGLGETNAMEDPROGRAMLOCALPARAMETERFVEXTPROC) __GLeeGetProcAddress("glGetNamedProgramLocalParameterfvEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetNamedProgramivEXT = (GLEEPFNGLGETNAMEDPROGRAMIVEXTPROC) __GLeeGetProcAddress("glGetNamedProgramivEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetNamedProgramStringEXT = (GLEEPFNGLGETNAMEDPROGRAMSTRINGEXTPROC) __GLeeGetProcAddress("glGetNamedProgramStringEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glNamedProgramLocalParameters4fvEXT = (GLEEPFNGLNAMEDPROGRAMLOCALPARAMETERS4FVEXTPROC) __GLeeGetProcAddress("glNamedProgramLocalParameters4fvEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glNamedProgramLocalParameterI4iEXT = (GLEEPFNGLNAMEDPROGRAMLOCALPARAMETERI4IEXTPROC) __GLeeGetProcAddress("glNamedProgramLocalParameterI4iEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glNamedProgramLocalParameterI4ivEXT = (GLEEPFNGLNAMEDPROGRAMLOCALPARAMETERI4IVEXTPROC) __GLeeGetProcAddress("glNamedProgramLocalParameterI4ivEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glNamedProgramLocalParametersI4ivEXT = (GLEEPFNGLNAMEDPROGRAMLOCALPARAMETERSI4IVEXTPROC) __GLeeGetProcAddress("glNamedProgramLocalParametersI4ivEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glNamedProgramLocalParameterI4uiEXT = (GLEEPFNGLNAMEDPROGRAMLOCALPARAMETERI4UIEXTPROC) __GLeeGetProcAddress("glNamedProgramLocalParameterI4uiEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glNamedProgramLocalParameterI4uivEXT = (GLEEPFNGLNAMEDPROGRAMLOCALPARAMETERI4UIVEXTPROC) __GLeeGetProcAddress("glNamedProgramLocalParameterI4uivEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glNamedProgramLocalParametersI4uivEXT = (GLEEPFNGLNAMEDPROGRAMLOCALPARAMETERSI4UIVEXTPROC) __GLeeGetProcAddress("glNamedProgramLocalParametersI4uivEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetNamedProgramLocalParameterIivEXT = (GLEEPFNGLGETNAMEDPROGRAMLOCALPARAMETERIIVEXTPROC) __GLeeGetProcAddress("glGetNamedProgramLocalParameterIivEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetNamedProgramLocalParameterIuivEXT = (GLEEPFNGLGETNAMEDPROGRAMLOCALPARAMETERIUIVEXTPROC) __GLeeGetProcAddress("glGetNamedProgramLocalParameterIuivEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glTextureParameterIivEXT = (GLEEPFNGLTEXTUREPARAMETERIIVEXTPROC) __GLeeGetProcAddress("glTextureParameterIivEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glTextureParameterIuivEXT = (GLEEPFNGLTEXTUREPARAMETERIUIVEXTPROC) __GLeeGetProcAddress("glTextureParameterIuivEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetTextureParameterIivEXT = (GLEEPFNGLGETTEXTUREPARAMETERIIVEXTPROC) __GLeeGetProcAddress("glGetTextureParameterIivEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetTextureParameterIuivEXT = (GLEEPFNGLGETTEXTUREPARAMETERIUIVEXTPROC) __GLeeGetProcAddress("glGetTextureParameterIuivEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMultiTexParameterIivEXT = (GLEEPFNGLMULTITEXPARAMETERIIVEXTPROC) __GLeeGetProcAddress("glMultiTexParameterIivEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMultiTexParameterIuivEXT = (GLEEPFNGLMULTITEXPARAMETERIUIVEXTPROC) __GLeeGetProcAddress("glMultiTexParameterIuivEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetMultiTexParameterIivEXT = (GLEEPFNGLGETMULTITEXPARAMETERIIVEXTPROC) __GLeeGetProcAddress("glGetMultiTexParameterIivEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetMultiTexParameterIuivEXT = (GLEEPFNGLGETMULTITEXPARAMETERIUIVEXTPROC) __GLeeGetProcAddress("glGetMultiTexParameterIuivEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramUniform1fEXT = (GLEEPFNGLPROGRAMUNIFORM1FEXTPROC) __GLeeGetProcAddress("glProgramUniform1fEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramUniform2fEXT = (GLEEPFNGLPROGRAMUNIFORM2FEXTPROC) __GLeeGetProcAddress("glProgramUniform2fEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramUniform3fEXT = (GLEEPFNGLPROGRAMUNIFORM3FEXTPROC) __GLeeGetProcAddress("glProgramUniform3fEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramUniform4fEXT = (GLEEPFNGLPROGRAMUNIFORM4FEXTPROC) __GLeeGetProcAddress("glProgramUniform4fEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramUniform1iEXT = (GLEEPFNGLPROGRAMUNIFORM1IEXTPROC) __GLeeGetProcAddress("glProgramUniform1iEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramUniform2iEXT = (GLEEPFNGLPROGRAMUNIFORM2IEXTPROC) __GLeeGetProcAddress("glProgramUniform2iEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramUniform3iEXT = (GLEEPFNGLPROGRAMUNIFORM3IEXTPROC) __GLeeGetProcAddress("glProgramUniform3iEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramUniform4iEXT = (GLEEPFNGLPROGRAMUNIFORM4IEXTPROC) __GLeeGetProcAddress("glProgramUniform4iEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramUniform1fvEXT = (GLEEPFNGLPROGRAMUNIFORM1FVEXTPROC) __GLeeGetProcAddress("glProgramUniform1fvEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramUniform2fvEXT = (GLEEPFNGLPROGRAMUNIFORM2FVEXTPROC) __GLeeGetProcAddress("glProgramUniform2fvEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramUniform3fvEXT = (GLEEPFNGLPROGRAMUNIFORM3FVEXTPROC) __GLeeGetProcAddress("glProgramUniform3fvEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramUniform4fvEXT = (GLEEPFNGLPROGRAMUNIFORM4FVEXTPROC) __GLeeGetProcAddress("glProgramUniform4fvEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramUniform1ivEXT = (GLEEPFNGLPROGRAMUNIFORM1IVEXTPROC) __GLeeGetProcAddress("glProgramUniform1ivEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramUniform2ivEXT = (GLEEPFNGLPROGRAMUNIFORM2IVEXTPROC) __GLeeGetProcAddress("glProgramUniform2ivEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramUniform3ivEXT = (GLEEPFNGLPROGRAMUNIFORM3IVEXTPROC) __GLeeGetProcAddress("glProgramUniform3ivEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramUniform4ivEXT = (GLEEPFNGLPROGRAMUNIFORM4IVEXTPROC) __GLeeGetProcAddress("glProgramUniform4ivEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramUniformMatrix2fvEXT = (GLEEPFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC) __GLeeGetProcAddress("glProgramUniformMatrix2fvEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramUniformMatrix3fvEXT = (GLEEPFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC) __GLeeGetProcAddress("glProgramUniformMatrix3fvEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramUniformMatrix4fvEXT = (GLEEPFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC) __GLeeGetProcAddress("glProgramUniformMatrix4fvEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramUniformMatrix2x3fvEXT = (GLEEPFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC) __GLeeGetProcAddress("glProgramUniformMatrix2x3fvEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramUniformMatrix3x2fvEXT = (GLEEPFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC) __GLeeGetProcAddress("glProgramUniformMatrix3x2fvEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramUniformMatrix2x4fvEXT = (GLEEPFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC) __GLeeGetProcAddress("glProgramUniformMatrix2x4fvEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramUniformMatrix4x2fvEXT = (GLEEPFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC) __GLeeGetProcAddress("glProgramUniformMatrix4x2fvEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramUniformMatrix3x4fvEXT = (GLEEPFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC) __GLeeGetProcAddress("glProgramUniformMatrix3x4fvEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramUniformMatrix4x3fvEXT = (GLEEPFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC) __GLeeGetProcAddress("glProgramUniformMatrix4x3fvEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramUniform1uiEXT = (GLEEPFNGLPROGRAMUNIFORM1UIEXTPROC) __GLeeGetProcAddress("glProgramUniform1uiEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramUniform2uiEXT = (GLEEPFNGLPROGRAMUNIFORM2UIEXTPROC) __GLeeGetProcAddress("glProgramUniform2uiEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramUniform3uiEXT = (GLEEPFNGLPROGRAMUNIFORM3UIEXTPROC) __GLeeGetProcAddress("glProgramUniform3uiEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramUniform4uiEXT = (GLEEPFNGLPROGRAMUNIFORM4UIEXTPROC) __GLeeGetProcAddress("glProgramUniform4uiEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramUniform1uivEXT = (GLEEPFNGLPROGRAMUNIFORM1UIVEXTPROC) __GLeeGetProcAddress("glProgramUniform1uivEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramUniform2uivEXT = (GLEEPFNGLPROGRAMUNIFORM2UIVEXTPROC) __GLeeGetProcAddress("glProgramUniform2uivEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramUniform3uivEXT = (GLEEPFNGLPROGRAMUNIFORM3UIVEXTPROC) __GLeeGetProcAddress("glProgramUniform3uivEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramUniform4uivEXT = (GLEEPFNGLPROGRAMUNIFORM4UIVEXTPROC) __GLeeGetProcAddress("glProgramUniform4uivEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glNamedBufferDataEXT = (GLEEPFNGLNAMEDBUFFERDATAEXTPROC) __GLeeGetProcAddress("glNamedBufferDataEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glNamedBufferSubDataEXT = (GLEEPFNGLNAMEDBUFFERSUBDATAEXTPROC) __GLeeGetProcAddress("glNamedBufferSubDataEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMapNamedBufferEXT = (GLEEPFNGLMAPNAMEDBUFFEREXTPROC) __GLeeGetProcAddress("glMapNamedBufferEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glUnmapNamedBufferEXT = (GLEEPFNGLUNMAPNAMEDBUFFEREXTPROC) __GLeeGetProcAddress("glUnmapNamedBufferEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMapNamedBufferRangeEXT = (GLEEPFNGLMAPNAMEDBUFFERRANGEEXTPROC) __GLeeGetProcAddress("glMapNamedBufferRangeEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glFlushMappedNamedBufferRangeEXT = (GLEEPFNGLFLUSHMAPPEDNAMEDBUFFERRANGEEXTPROC) __GLeeGetProcAddress("glFlushMappedNamedBufferRangeEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glNamedCopyBufferSubDataEXT = (GLEEPFNGLNAMEDCOPYBUFFERSUBDATAEXTPROC) __GLeeGetProcAddress("glNamedCopyBufferSubDataEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetNamedBufferParameterivEXT = (GLEEPFNGLGETNAMEDBUFFERPARAMETERIVEXTPROC) __GLeeGetProcAddress("glGetNamedBufferParameterivEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetNamedBufferPointervEXT = (GLEEPFNGLGETNAMEDBUFFERPOINTERVEXTPROC) __GLeeGetProcAddress("glGetNamedBufferPointervEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetNamedBufferSubDataEXT = (GLEEPFNGLGETNAMEDBUFFERSUBDATAEXTPROC) __GLeeGetProcAddress("glGetNamedBufferSubDataEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glTextureBufferEXT = (GLEEPFNGLTEXTUREBUFFEREXTPROC) __GLeeGetProcAddress("glTextureBufferEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMultiTexBufferEXT = (GLEEPFNGLMULTITEXBUFFEREXTPROC) __GLeeGetProcAddress("glMultiTexBufferEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glNamedRenderbufferStorageEXT = (GLEEPFNGLNAMEDRENDERBUFFERSTORAGEEXTPROC) __GLeeGetProcAddress("glNamedRenderbufferStorageEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetNamedRenderbufferParameterivEXT = (GLEEPFNGLGETNAMEDRENDERBUFFERPARAMETERIVEXTPROC) __GLeeGetProcAddress("glGetNamedRenderbufferParameterivEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glCheckNamedFramebufferStatusEXT = (GLEEPFNGLCHECKNAMEDFRAMEBUFFERSTATUSEXTPROC) __GLeeGetProcAddress("glCheckNamedFramebufferStatusEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glNamedFramebufferTexture1DEXT = (GLEEPFNGLNAMEDFRAMEBUFFERTEXTURE1DEXTPROC) __GLeeGetProcAddress("glNamedFramebufferTexture1DEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glNamedFramebufferTexture2DEXT = (GLEEPFNGLNAMEDFRAMEBUFFERTEXTURE2DEXTPROC) __GLeeGetProcAddress("glNamedFramebufferTexture2DEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glNamedFramebufferTexture3DEXT = (GLEEPFNGLNAMEDFRAMEBUFFERTEXTURE3DEXTPROC) __GLeeGetProcAddress("glNamedFramebufferTexture3DEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glNamedFramebufferRenderbufferEXT = (GLEEPFNGLNAMEDFRAMEBUFFERRENDERBUFFEREXTPROC) __GLeeGetProcAddress("glNamedFramebufferRenderbufferEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetNamedFramebufferAttachmentParameterivEXT = (GLEEPFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC) __GLeeGetProcAddress("glGetNamedFramebufferAttachmentParameterivEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGenerateTextureMipmapEXT = (GLEEPFNGLGENERATETEXTUREMIPMAPEXTPROC) __GLeeGetProcAddress("glGenerateTextureMipmapEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGenerateMultiTexMipmapEXT = (GLEEPFNGLGENERATEMULTITEXMIPMAPEXTPROC) __GLeeGetProcAddress("glGenerateMultiTexMipmapEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glFramebufferDrawBufferEXT = (GLEEPFNGLFRAMEBUFFERDRAWBUFFEREXTPROC) __GLeeGetProcAddress("glFramebufferDrawBufferEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glFramebufferDrawBuffersEXT = (GLEEPFNGLFRAMEBUFFERDRAWBUFFERSEXTPROC) __GLeeGetProcAddress("glFramebufferDrawBuffersEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glFramebufferReadBufferEXT = (GLEEPFNGLFRAMEBUFFERREADBUFFEREXTPROC) __GLeeGetProcAddress("glFramebufferReadBufferEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetFramebufferParameterivEXT = (GLEEPFNGLGETFRAMEBUFFERPARAMETERIVEXTPROC) __GLeeGetProcAddress("glGetFramebufferParameterivEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glNamedRenderbufferStorageMultisampleEXT = (GLEEPFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC) __GLeeGetProcAddress("glNamedRenderbufferStorageMultisampleEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glNamedRenderbufferStorageMultisampleCoverageEXT = (GLEEPFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXTPROC) __GLeeGetProcAddress("glNamedRenderbufferStorageMultisampleCoverageEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glNamedFramebufferTextureEXT = (GLEEPFNGLNAMEDFRAMEBUFFERTEXTUREEXTPROC) __GLeeGetProcAddress("glNamedFramebufferTextureEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glNamedFramebufferTextureLayerEXT = (GLEEPFNGLNAMEDFRAMEBUFFERTEXTURELAYEREXTPROC) __GLeeGetProcAddress("glNamedFramebufferTextureLayerEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glNamedFramebufferTextureFaceEXT = (GLEEPFNGLNAMEDFRAMEBUFFERTEXTUREFACEEXTPROC) __GLeeGetProcAddress("glNamedFramebufferTextureFaceEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glTextureRenderbufferEXT = (GLEEPFNGLTEXTURERENDERBUFFEREXTPROC) __GLeeGetProcAddress("glTextureRenderbufferEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMultiTexRenderbufferEXT = (GLEEPFNGLMULTITEXRENDERBUFFEREXTPROC) __GLeeGetProcAddress("glMultiTexRenderbufferEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramUniform1dEXT = (GLEEPFNGLPROGRAMUNIFORM1DEXTPROC) __GLeeGetProcAddress("glProgramUniform1dEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramUniform2dEXT = (GLEEPFNGLPROGRAMUNIFORM2DEXTPROC) __GLeeGetProcAddress("glProgramUniform2dEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramUniform3dEXT = (GLEEPFNGLPROGRAMUNIFORM3DEXTPROC) __GLeeGetProcAddress("glProgramUniform3dEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramUniform4dEXT = (GLEEPFNGLPROGRAMUNIFORM4DEXTPROC) __GLeeGetProcAddress("glProgramUniform4dEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramUniform1dvEXT = (GLEEPFNGLPROGRAMUNIFORM1DVEXTPROC) __GLeeGetProcAddress("glProgramUniform1dvEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramUniform2dvEXT = (GLEEPFNGLPROGRAMUNIFORM2DVEXTPROC) __GLeeGetProcAddress("glProgramUniform2dvEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramUniform3dvEXT = (GLEEPFNGLPROGRAMUNIFORM3DVEXTPROC) __GLeeGetProcAddress("glProgramUniform3dvEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramUniform4dvEXT = (GLEEPFNGLPROGRAMUNIFORM4DVEXTPROC) __GLeeGetProcAddress("glProgramUniform4dvEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramUniformMatrix2dvEXT = (GLEEPFNGLPROGRAMUNIFORMMATRIX2DVEXTPROC) __GLeeGetProcAddress("glProgramUniformMatrix2dvEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramUniformMatrix3dvEXT = (GLEEPFNGLPROGRAMUNIFORMMATRIX3DVEXTPROC) __GLeeGetProcAddress("glProgramUniformMatrix3dvEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramUniformMatrix4dvEXT = (GLEEPFNGLPROGRAMUNIFORMMATRIX4DVEXTPROC) __GLeeGetProcAddress("glProgramUniformMatrix4dvEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramUniformMatrix2x3dvEXT = (GLEEPFNGLPROGRAMUNIFORMMATRIX2X3DVEXTPROC) __GLeeGetProcAddress("glProgramUniformMatrix2x3dvEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramUniformMatrix2x4dvEXT = (GLEEPFNGLPROGRAMUNIFORMMATRIX2X4DVEXTPROC) __GLeeGetProcAddress("glProgramUniformMatrix2x4dvEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramUniformMatrix3x2dvEXT = (GLEEPFNGLPROGRAMUNIFORMMATRIX3X2DVEXTPROC) __GLeeGetProcAddress("glProgramUniformMatrix3x2dvEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramUniformMatrix3x4dvEXT = (GLEEPFNGLPROGRAMUNIFORMMATRIX3X4DVEXTPROC) __GLeeGetProcAddress("glProgramUniformMatrix3x4dvEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramUniformMatrix4x2dvEXT = (GLEEPFNGLPROGRAMUNIFORMMATRIX4X2DVEXTPROC) __GLeeGetProcAddress("glProgramUniformMatrix4x2dvEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramUniformMatrix4x3dvEXT = (GLEEPFNGLPROGRAMUNIFORMMATRIX4X3DVEXTPROC) __GLeeGetProcAddress("glProgramUniformMatrix4x3dvEXT"))!=0) nLinked++;
+#endif
+    if (nLinked==206) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_EXT_vertex_array_bgra(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_EXT_texture_swizzle(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_NV_explicit_multisample(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_NV_explicit_multisample
+    if ((GLeeFuncPtr_glGetMultisamplefvNV = (GLEEPFNGLGETMULTISAMPLEFVNVPROC) __GLeeGetProcAddress("glGetMultisamplefvNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glSampleMaskIndexedNV = (GLEEPFNGLSAMPLEMASKINDEXEDNVPROC) __GLeeGetProcAddress("glSampleMaskIndexedNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glTexRenderbufferNV = (GLEEPFNGLTEXRENDERBUFFERNVPROC) __GLeeGetProcAddress("glTexRenderbufferNV"))!=0) nLinked++;
+#endif
+    if (nLinked==3) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_NV_transform_feedback2(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_NV_transform_feedback2
+    if ((GLeeFuncPtr_glBindTransformFeedbackNV = (GLEEPFNGLBINDTRANSFORMFEEDBACKNVPROC) __GLeeGetProcAddress("glBindTransformFeedbackNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glDeleteTransformFeedbacksNV = (GLEEPFNGLDELETETRANSFORMFEEDBACKSNVPROC) __GLeeGetProcAddress("glDeleteTransformFeedbacksNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGenTransformFeedbacksNV = (GLEEPFNGLGENTRANSFORMFEEDBACKSNVPROC) __GLeeGetProcAddress("glGenTransformFeedbacksNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glIsTransformFeedbackNV = (GLEEPFNGLISTRANSFORMFEEDBACKNVPROC) __GLeeGetProcAddress("glIsTransformFeedbackNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glPauseTransformFeedbackNV = (GLEEPFNGLPAUSETRANSFORMFEEDBACKNVPROC) __GLeeGetProcAddress("glPauseTransformFeedbackNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glResumeTransformFeedbackNV = (GLEEPFNGLRESUMETRANSFORMFEEDBACKNVPROC) __GLeeGetProcAddress("glResumeTransformFeedbackNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glDrawTransformFeedbackNV = (GLEEPFNGLDRAWTRANSFORMFEEDBACKNVPROC) __GLeeGetProcAddress("glDrawTransformFeedbackNV"))!=0) nLinked++;
+#endif
+    if (nLinked==7) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_ATI_meminfo(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_AMD_performance_monitor(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_AMD_performance_monitor
+    if ((GLeeFuncPtr_glGetPerfMonitorGroupsAMD = (GLEEPFNGLGETPERFMONITORGROUPSAMDPROC) __GLeeGetProcAddress("glGetPerfMonitorGroupsAMD"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetPerfMonitorCountersAMD = (GLEEPFNGLGETPERFMONITORCOUNTERSAMDPROC) __GLeeGetProcAddress("glGetPerfMonitorCountersAMD"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetPerfMonitorGroupStringAMD = (GLEEPFNGLGETPERFMONITORGROUPSTRINGAMDPROC) __GLeeGetProcAddress("glGetPerfMonitorGroupStringAMD"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetPerfMonitorCounterStringAMD = (GLEEPFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC) __GLeeGetProcAddress("glGetPerfMonitorCounterStringAMD"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetPerfMonitorCounterInfoAMD = (GLEEPFNGLGETPERFMONITORCOUNTERINFOAMDPROC) __GLeeGetProcAddress("glGetPerfMonitorCounterInfoAMD"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGenPerfMonitorsAMD = (GLEEPFNGLGENPERFMONITORSAMDPROC) __GLeeGetProcAddress("glGenPerfMonitorsAMD"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glDeletePerfMonitorsAMD = (GLEEPFNGLDELETEPERFMONITORSAMDPROC) __GLeeGetProcAddress("glDeletePerfMonitorsAMD"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glSelectPerfMonitorCountersAMD = (GLEEPFNGLSELECTPERFMONITORCOUNTERSAMDPROC) __GLeeGetProcAddress("glSelectPerfMonitorCountersAMD"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glBeginPerfMonitorAMD = (GLEEPFNGLBEGINPERFMONITORAMDPROC) __GLeeGetProcAddress("glBeginPerfMonitorAMD"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glEndPerfMonitorAMD = (GLEEPFNGLENDPERFMONITORAMDPROC) __GLeeGetProcAddress("glEndPerfMonitorAMD"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetPerfMonitorCounterDataAMD = (GLEEPFNGLGETPERFMONITORCOUNTERDATAAMDPROC) __GLeeGetProcAddress("glGetPerfMonitorCounterDataAMD"))!=0) nLinked++;
+#endif
+    if (nLinked==11) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_AMD_texture_texture4(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_AMD_vertex_shader_tesselator(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_AMD_vertex_shader_tesselator
+    if ((GLeeFuncPtr_glTessellationFactorAMD = (GLEEPFNGLTESSELLATIONFACTORAMDPROC) __GLeeGetProcAddress("glTessellationFactorAMD"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glTessellationModeAMD = (GLEEPFNGLTESSELLATIONMODEAMDPROC) __GLeeGetProcAddress("glTessellationModeAMD"))!=0) nLinked++;
+#endif
+    if (nLinked==2) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_EXT_provoking_vertex(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_EXT_provoking_vertex
+    if ((GLeeFuncPtr_glProvokingVertexEXT = (GLEEPFNGLPROVOKINGVERTEXEXTPROC) __GLeeGetProcAddress("glProvokingVertexEXT"))!=0) nLinked++;
+#endif
+    if (nLinked==1) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_EXT_texture_snorm(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_AMD_draw_buffers_blend(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_AMD_draw_buffers_blend
+    if ((GLeeFuncPtr_glBlendFuncIndexedAMD = (GLEEPFNGLBLENDFUNCINDEXEDAMDPROC) __GLeeGetProcAddress("glBlendFuncIndexedAMD"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glBlendFuncSeparateIndexedAMD = (GLEEPFNGLBLENDFUNCSEPARATEINDEXEDAMDPROC) __GLeeGetProcAddress("glBlendFuncSeparateIndexedAMD"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glBlendEquationIndexedAMD = (GLEEPFNGLBLENDEQUATIONINDEXEDAMDPROC) __GLeeGetProcAddress("glBlendEquationIndexedAMD"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glBlendEquationSeparateIndexedAMD = (GLEEPFNGLBLENDEQUATIONSEPARATEINDEXEDAMDPROC) __GLeeGetProcAddress("glBlendEquationSeparateIndexedAMD"))!=0) nLinked++;
+#endif
+    if (nLinked==4) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_APPLE_texture_range(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_APPLE_texture_range
+    if ((GLeeFuncPtr_glTextureRangeAPPLE = (GLEEPFNGLTEXTURERANGEAPPLEPROC) __GLeeGetProcAddress("glTextureRangeAPPLE"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetTexParameterPointervAPPLE = (GLEEPFNGLGETTEXPARAMETERPOINTERVAPPLEPROC) __GLeeGetProcAddress("glGetTexParameterPointervAPPLE"))!=0) nLinked++;
+#endif
+    if (nLinked==2) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_APPLE_float_pixels(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_APPLE_vertex_program_evaluators(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_APPLE_vertex_program_evaluators
+    if ((GLeeFuncPtr_glEnableVertexAttribAPPLE = (GLEEPFNGLENABLEVERTEXATTRIBAPPLEPROC) __GLeeGetProcAddress("glEnableVertexAttribAPPLE"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glDisableVertexAttribAPPLE = (GLEEPFNGLDISABLEVERTEXATTRIBAPPLEPROC) __GLeeGetProcAddress("glDisableVertexAttribAPPLE"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glIsVertexAttribEnabledAPPLE = (GLEEPFNGLISVERTEXATTRIBENABLEDAPPLEPROC) __GLeeGetProcAddress("glIsVertexAttribEnabledAPPLE"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMapVertexAttrib1dAPPLE = (GLEEPFNGLMAPVERTEXATTRIB1DAPPLEPROC) __GLeeGetProcAddress("glMapVertexAttrib1dAPPLE"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMapVertexAttrib1fAPPLE = (GLEEPFNGLMAPVERTEXATTRIB1FAPPLEPROC) __GLeeGetProcAddress("glMapVertexAttrib1fAPPLE"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMapVertexAttrib2dAPPLE = (GLEEPFNGLMAPVERTEXATTRIB2DAPPLEPROC) __GLeeGetProcAddress("glMapVertexAttrib2dAPPLE"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMapVertexAttrib2fAPPLE = (GLEEPFNGLMAPVERTEXATTRIB2FAPPLEPROC) __GLeeGetProcAddress("glMapVertexAttrib2fAPPLE"))!=0) nLinked++;
+#endif
+    if (nLinked==7) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_APPLE_aux_depth_stencil(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_APPLE_object_purgeable(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_APPLE_object_purgeable
+    if ((GLeeFuncPtr_glObjectPurgeableAPPLE = (GLEEPFNGLOBJECTPURGEABLEAPPLEPROC) __GLeeGetProcAddress("glObjectPurgeableAPPLE"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glObjectUnpurgeableAPPLE = (GLEEPFNGLOBJECTUNPURGEABLEAPPLEPROC) __GLeeGetProcAddress("glObjectUnpurgeableAPPLE"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetObjectParameterivAPPLE = (GLEEPFNGLGETOBJECTPARAMETERIVAPPLEPROC) __GLeeGetProcAddress("glGetObjectParameterivAPPLE"))!=0) nLinked++;
+#endif
+    if (nLinked==3) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_APPLE_row_bytes(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_APPLE_rgb_422(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_NV_video_capture(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_NV_video_capture
+    if ((GLeeFuncPtr_glBeginVideoCaptureNV = (GLEEPFNGLBEGINVIDEOCAPTURENVPROC) __GLeeGetProcAddress("glBeginVideoCaptureNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glBindVideoCaptureStreamBufferNV = (GLEEPFNGLBINDVIDEOCAPTURESTREAMBUFFERNVPROC) __GLeeGetProcAddress("glBindVideoCaptureStreamBufferNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glBindVideoCaptureStreamTextureNV = (GLEEPFNGLBINDVIDEOCAPTURESTREAMTEXTURENVPROC) __GLeeGetProcAddress("glBindVideoCaptureStreamTextureNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glEndVideoCaptureNV = (GLEEPFNGLENDVIDEOCAPTURENVPROC) __GLeeGetProcAddress("glEndVideoCaptureNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetVideoCaptureivNV = (GLEEPFNGLGETVIDEOCAPTUREIVNVPROC) __GLeeGetProcAddress("glGetVideoCaptureivNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetVideoCaptureStreamivNV = (GLEEPFNGLGETVIDEOCAPTURESTREAMIVNVPROC) __GLeeGetProcAddress("glGetVideoCaptureStreamivNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetVideoCaptureStreamfvNV = (GLEEPFNGLGETVIDEOCAPTURESTREAMFVNVPROC) __GLeeGetProcAddress("glGetVideoCaptureStreamfvNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetVideoCaptureStreamdvNV = (GLEEPFNGLGETVIDEOCAPTURESTREAMDVNVPROC) __GLeeGetProcAddress("glGetVideoCaptureStreamdvNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVideoCaptureNV = (GLEEPFNGLVIDEOCAPTURENVPROC) __GLeeGetProcAddress("glVideoCaptureNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVideoCaptureStreamParameterivNV = (GLEEPFNGLVIDEOCAPTURESTREAMPARAMETERIVNVPROC) __GLeeGetProcAddress("glVideoCaptureStreamParameterivNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVideoCaptureStreamParameterfvNV = (GLEEPFNGLVIDEOCAPTURESTREAMPARAMETERFVNVPROC) __GLeeGetProcAddress("glVideoCaptureStreamParameterfvNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVideoCaptureStreamParameterdvNV = (GLEEPFNGLVIDEOCAPTURESTREAMPARAMETERDVNVPROC) __GLeeGetProcAddress("glVideoCaptureStreamParameterdvNV"))!=0) nLinked++;
+#endif
+    if (nLinked==12) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_NV_copy_image(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_NV_copy_image
+    if ((GLeeFuncPtr_glCopyImageSubDataNV = (GLEEPFNGLCOPYIMAGESUBDATANVPROC) __GLeeGetProcAddress("glCopyImageSubDataNV"))!=0) nLinked++;
+#endif
+    if (nLinked==1) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_EXT_separate_shader_objects(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_EXT_separate_shader_objects
+    if ((GLeeFuncPtr_glUseShaderProgramEXT = (GLEEPFNGLUSESHADERPROGRAMEXTPROC) __GLeeGetProcAddress("glUseShaderProgramEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glActiveProgramEXT = (GLEEPFNGLACTIVEPROGRAMEXTPROC) __GLeeGetProcAddress("glActiveProgramEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glCreateShaderProgramEXT = (GLEEPFNGLCREATESHADERPROGRAMEXTPROC) __GLeeGetProcAddress("glCreateShaderProgramEXT"))!=0) nLinked++;
+#endif
+    if (nLinked==3) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_NV_parameter_buffer_object2(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_NV_shader_buffer_load(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_NV_shader_buffer_load
+    if ((GLeeFuncPtr_glMakeBufferResidentNV = (GLEEPFNGLMAKEBUFFERRESIDENTNVPROC) __GLeeGetProcAddress("glMakeBufferResidentNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMakeBufferNonResidentNV = (GLEEPFNGLMAKEBUFFERNONRESIDENTNVPROC) __GLeeGetProcAddress("glMakeBufferNonResidentNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glIsBufferResidentNV = (GLEEPFNGLISBUFFERRESIDENTNVPROC) __GLeeGetProcAddress("glIsBufferResidentNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMakeNamedBufferResidentNV = (GLEEPFNGLMAKENAMEDBUFFERRESIDENTNVPROC) __GLeeGetProcAddress("glMakeNamedBufferResidentNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMakeNamedBufferNonResidentNV = (GLEEPFNGLMAKENAMEDBUFFERNONRESIDENTNVPROC) __GLeeGetProcAddress("glMakeNamedBufferNonResidentNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glIsNamedBufferResidentNV = (GLEEPFNGLISNAMEDBUFFERRESIDENTNVPROC) __GLeeGetProcAddress("glIsNamedBufferResidentNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetBufferParameterui64vNV = (GLEEPFNGLGETBUFFERPARAMETERUI64VNVPROC) __GLeeGetProcAddress("glGetBufferParameterui64vNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetNamedBufferParameterui64vNV = (GLEEPFNGLGETNAMEDBUFFERPARAMETERUI64VNVPROC) __GLeeGetProcAddress("glGetNamedBufferParameterui64vNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetIntegerui64vNV = (GLEEPFNGLGETINTEGERUI64VNVPROC) __GLeeGetProcAddress("glGetIntegerui64vNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glUniformui64NV = (GLEEPFNGLUNIFORMUI64NVPROC) __GLeeGetProcAddress("glUniformui64NV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glUniformui64vNV = (GLEEPFNGLUNIFORMUI64VNVPROC) __GLeeGetProcAddress("glUniformui64vNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetUniformui64vNV = (GLEEPFNGLGETUNIFORMUI64VNVPROC) __GLeeGetProcAddress("glGetUniformui64vNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramUniformui64NV = (GLEEPFNGLPROGRAMUNIFORMUI64NVPROC) __GLeeGetProcAddress("glProgramUniformui64NV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramUniformui64vNV = (GLEEPFNGLPROGRAMUNIFORMUI64VNVPROC) __GLeeGetProcAddress("glProgramUniformui64vNV"))!=0) nLinked++;
+#endif
+    if (nLinked==14) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_NV_vertex_buffer_unified_memory(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_NV_vertex_buffer_unified_memory
+    if ((GLeeFuncPtr_glBufferAddressRangeNV = (GLEEPFNGLBUFFERADDRESSRANGENVPROC) __GLeeGetProcAddress("glBufferAddressRangeNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexFormatNV = (GLEEPFNGLVERTEXFORMATNVPROC) __GLeeGetProcAddress("glVertexFormatNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glNormalFormatNV = (GLEEPFNGLNORMALFORMATNVPROC) __GLeeGetProcAddress("glNormalFormatNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glColorFormatNV = (GLEEPFNGLCOLORFORMATNVPROC) __GLeeGetProcAddress("glColorFormatNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glIndexFormatNV = (GLEEPFNGLINDEXFORMATNVPROC) __GLeeGetProcAddress("glIndexFormatNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glTexCoordFormatNV = (GLEEPFNGLTEXCOORDFORMATNVPROC) __GLeeGetProcAddress("glTexCoordFormatNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glEdgeFlagFormatNV = (GLEEPFNGLEDGEFLAGFORMATNVPROC) __GLeeGetProcAddress("glEdgeFlagFormatNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glSecondaryColorFormatNV = (GLEEPFNGLSECONDARYCOLORFORMATNVPROC) __GLeeGetProcAddress("glSecondaryColorFormatNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glFogCoordFormatNV = (GLEEPFNGLFOGCOORDFORMATNVPROC) __GLeeGetProcAddress("glFogCoordFormatNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttribFormatNV = (GLEEPFNGLVERTEXATTRIBFORMATNVPROC) __GLeeGetProcAddress("glVertexAttribFormatNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttribIFormatNV = (GLEEPFNGLVERTEXATTRIBIFORMATNVPROC) __GLeeGetProcAddress("glVertexAttribIFormatNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetIntegerui64i_vNV = (GLEEPFNGLGETINTEGERUI64I_VNVPROC) __GLeeGetProcAddress("glGetIntegerui64i_vNV"))!=0) nLinked++;
+#endif
+    if (nLinked==12) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_NV_texture_barrier(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_NV_texture_barrier
+    if ((GLeeFuncPtr_glTextureBarrierNV = (GLEEPFNGLTEXTUREBARRIERNVPROC) __GLeeGetProcAddress("glTextureBarrierNV"))!=0) nLinked++;
+#endif
+    if (nLinked==1) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_AMD_shader_stencil_export(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_AMD_seamless_cubemap_per_texture(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_AMD_conservative_depth(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_EXT_shader_image_load_store(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_EXT_shader_image_load_store
+    if ((GLeeFuncPtr_glBindImageTextureEXT = (GLEEPFNGLBINDIMAGETEXTUREEXTPROC) __GLeeGetProcAddress("glBindImageTextureEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMemoryBarrierEXT = (GLEEPFNGLMEMORYBARRIEREXTPROC) __GLeeGetProcAddress("glMemoryBarrierEXT"))!=0) nLinked++;
+#endif
+    if (nLinked==2) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_EXT_vertex_attrib_64bit(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_EXT_vertex_attrib_64bit
+    if ((GLeeFuncPtr_glVertexAttribL1dEXT = (GLEEPFNGLVERTEXATTRIBL1DEXTPROC) __GLeeGetProcAddress("glVertexAttribL1dEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttribL2dEXT = (GLEEPFNGLVERTEXATTRIBL2DEXTPROC) __GLeeGetProcAddress("glVertexAttribL2dEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttribL3dEXT = (GLEEPFNGLVERTEXATTRIBL3DEXTPROC) __GLeeGetProcAddress("glVertexAttribL3dEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttribL4dEXT = (GLEEPFNGLVERTEXATTRIBL4DEXTPROC) __GLeeGetProcAddress("glVertexAttribL4dEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttribL1dvEXT = (GLEEPFNGLVERTEXATTRIBL1DVEXTPROC) __GLeeGetProcAddress("glVertexAttribL1dvEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttribL2dvEXT = (GLEEPFNGLVERTEXATTRIBL2DVEXTPROC) __GLeeGetProcAddress("glVertexAttribL2dvEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttribL3dvEXT = (GLEEPFNGLVERTEXATTRIBL3DVEXTPROC) __GLeeGetProcAddress("glVertexAttribL3dvEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttribL4dvEXT = (GLEEPFNGLVERTEXATTRIBL4DVEXTPROC) __GLeeGetProcAddress("glVertexAttribL4dvEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttribLPointerEXT = (GLEEPFNGLVERTEXATTRIBLPOINTEREXTPROC) __GLeeGetProcAddress("glVertexAttribLPointerEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetVertexAttribLdvEXT = (GLEEPFNGLGETVERTEXATTRIBLDVEXTPROC) __GLeeGetProcAddress("glGetVertexAttribLdvEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexArrayVertexAttribLOffsetEXT = (GLEEPFNGLVERTEXARRAYVERTEXATTRIBLOFFSETEXTPROC) __GLeeGetProcAddress("glVertexArrayVertexAttribLOffsetEXT"))!=0) nLinked++;
+#endif
+    if (nLinked==11) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_NV_gpu_program5(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_NV_gpu_program5
+    if ((GLeeFuncPtr_glProgramSubroutineParametersuivNV = (GLEEPFNGLPROGRAMSUBROUTINEPARAMETERSUIVNVPROC) __GLeeGetProcAddress("glProgramSubroutineParametersuivNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetProgramSubroutineParameteruivNV = (GLEEPFNGLGETPROGRAMSUBROUTINEPARAMETERUIVNVPROC) __GLeeGetProcAddress("glGetProgramSubroutineParameteruivNV"))!=0) nLinked++;
+#endif
+    if (nLinked==2) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_NV_gpu_shader5(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_NV_gpu_shader5
+    if ((GLeeFuncPtr_glUniform1i64NV = (GLEEPFNGLUNIFORM1I64NVPROC) __GLeeGetProcAddress("glUniform1i64NV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glUniform2i64NV = (GLEEPFNGLUNIFORM2I64NVPROC) __GLeeGetProcAddress("glUniform2i64NV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glUniform3i64NV = (GLEEPFNGLUNIFORM3I64NVPROC) __GLeeGetProcAddress("glUniform3i64NV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glUniform4i64NV = (GLEEPFNGLUNIFORM4I64NVPROC) __GLeeGetProcAddress("glUniform4i64NV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glUniform1i64vNV = (GLEEPFNGLUNIFORM1I64VNVPROC) __GLeeGetProcAddress("glUniform1i64vNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glUniform2i64vNV = (GLEEPFNGLUNIFORM2I64VNVPROC) __GLeeGetProcAddress("glUniform2i64vNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glUniform3i64vNV = (GLEEPFNGLUNIFORM3I64VNVPROC) __GLeeGetProcAddress("glUniform3i64vNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glUniform4i64vNV = (GLEEPFNGLUNIFORM4I64VNVPROC) __GLeeGetProcAddress("glUniform4i64vNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glUniform1ui64NV = (GLEEPFNGLUNIFORM1UI64NVPROC) __GLeeGetProcAddress("glUniform1ui64NV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glUniform2ui64NV = (GLEEPFNGLUNIFORM2UI64NVPROC) __GLeeGetProcAddress("glUniform2ui64NV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glUniform3ui64NV = (GLEEPFNGLUNIFORM3UI64NVPROC) __GLeeGetProcAddress("glUniform3ui64NV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glUniform4ui64NV = (GLEEPFNGLUNIFORM4UI64NVPROC) __GLeeGetProcAddress("glUniform4ui64NV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glUniform1ui64vNV = (GLEEPFNGLUNIFORM1UI64VNVPROC) __GLeeGetProcAddress("glUniform1ui64vNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glUniform2ui64vNV = (GLEEPFNGLUNIFORM2UI64VNVPROC) __GLeeGetProcAddress("glUniform2ui64vNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glUniform3ui64vNV = (GLEEPFNGLUNIFORM3UI64VNVPROC) __GLeeGetProcAddress("glUniform3ui64vNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glUniform4ui64vNV = (GLEEPFNGLUNIFORM4UI64VNVPROC) __GLeeGetProcAddress("glUniform4ui64vNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetUniformi64vNV = (GLEEPFNGLGETUNIFORMI64VNVPROC) __GLeeGetProcAddress("glGetUniformi64vNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramUniform1i64NV = (GLEEPFNGLPROGRAMUNIFORM1I64NVPROC) __GLeeGetProcAddress("glProgramUniform1i64NV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramUniform2i64NV = (GLEEPFNGLPROGRAMUNIFORM2I64NVPROC) __GLeeGetProcAddress("glProgramUniform2i64NV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramUniform3i64NV = (GLEEPFNGLPROGRAMUNIFORM3I64NVPROC) __GLeeGetProcAddress("glProgramUniform3i64NV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramUniform4i64NV = (GLEEPFNGLPROGRAMUNIFORM4I64NVPROC) __GLeeGetProcAddress("glProgramUniform4i64NV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramUniform1i64vNV = (GLEEPFNGLPROGRAMUNIFORM1I64VNVPROC) __GLeeGetProcAddress("glProgramUniform1i64vNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramUniform2i64vNV = (GLEEPFNGLPROGRAMUNIFORM2I64VNVPROC) __GLeeGetProcAddress("glProgramUniform2i64vNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramUniform3i64vNV = (GLEEPFNGLPROGRAMUNIFORM3I64VNVPROC) __GLeeGetProcAddress("glProgramUniform3i64vNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramUniform4i64vNV = (GLEEPFNGLPROGRAMUNIFORM4I64VNVPROC) __GLeeGetProcAddress("glProgramUniform4i64vNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramUniform1ui64NV = (GLEEPFNGLPROGRAMUNIFORM1UI64NVPROC) __GLeeGetProcAddress("glProgramUniform1ui64NV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramUniform2ui64NV = (GLEEPFNGLPROGRAMUNIFORM2UI64NVPROC) __GLeeGetProcAddress("glProgramUniform2ui64NV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramUniform3ui64NV = (GLEEPFNGLPROGRAMUNIFORM3UI64NVPROC) __GLeeGetProcAddress("glProgramUniform3ui64NV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramUniform4ui64NV = (GLEEPFNGLPROGRAMUNIFORM4UI64NVPROC) __GLeeGetProcAddress("glProgramUniform4ui64NV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramUniform1ui64vNV = (GLEEPFNGLPROGRAMUNIFORM1UI64VNVPROC) __GLeeGetProcAddress("glProgramUniform1ui64vNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramUniform2ui64vNV = (GLEEPFNGLPROGRAMUNIFORM2UI64VNVPROC) __GLeeGetProcAddress("glProgramUniform2ui64vNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramUniform3ui64vNV = (GLEEPFNGLPROGRAMUNIFORM3UI64VNVPROC) __GLeeGetProcAddress("glProgramUniform3ui64vNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glProgramUniform4ui64vNV = (GLEEPFNGLPROGRAMUNIFORM4UI64VNVPROC) __GLeeGetProcAddress("glProgramUniform4ui64vNV"))!=0) nLinked++;
+#endif
+    if (nLinked==33) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_NV_shader_buffer_store(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_NV_tessellation_program5(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_NV_vertex_attrib_integer_64bit(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_NV_vertex_attrib_integer_64bit
+    if ((GLeeFuncPtr_glVertexAttribL1i64NV = (GLEEPFNGLVERTEXATTRIBL1I64NVPROC) __GLeeGetProcAddress("glVertexAttribL1i64NV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttribL2i64NV = (GLEEPFNGLVERTEXATTRIBL2I64NVPROC) __GLeeGetProcAddress("glVertexAttribL2i64NV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttribL3i64NV = (GLEEPFNGLVERTEXATTRIBL3I64NVPROC) __GLeeGetProcAddress("glVertexAttribL3i64NV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttribL4i64NV = (GLEEPFNGLVERTEXATTRIBL4I64NVPROC) __GLeeGetProcAddress("glVertexAttribL4i64NV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttribL1i64vNV = (GLEEPFNGLVERTEXATTRIBL1I64VNVPROC) __GLeeGetProcAddress("glVertexAttribL1i64vNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttribL2i64vNV = (GLEEPFNGLVERTEXATTRIBL2I64VNVPROC) __GLeeGetProcAddress("glVertexAttribL2i64vNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttribL3i64vNV = (GLEEPFNGLVERTEXATTRIBL3I64VNVPROC) __GLeeGetProcAddress("glVertexAttribL3i64vNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttribL4i64vNV = (GLEEPFNGLVERTEXATTRIBL4I64VNVPROC) __GLeeGetProcAddress("glVertexAttribL4i64vNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttribL1ui64NV = (GLEEPFNGLVERTEXATTRIBL1UI64NVPROC) __GLeeGetProcAddress("glVertexAttribL1ui64NV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttribL2ui64NV = (GLEEPFNGLVERTEXATTRIBL2UI64NVPROC) __GLeeGetProcAddress("glVertexAttribL2ui64NV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttribL3ui64NV = (GLEEPFNGLVERTEXATTRIBL3UI64NVPROC) __GLeeGetProcAddress("glVertexAttribL3ui64NV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttribL4ui64NV = (GLEEPFNGLVERTEXATTRIBL4UI64NVPROC) __GLeeGetProcAddress("glVertexAttribL4ui64NV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttribL1ui64vNV = (GLEEPFNGLVERTEXATTRIBL1UI64VNVPROC) __GLeeGetProcAddress("glVertexAttribL1ui64vNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttribL2ui64vNV = (GLEEPFNGLVERTEXATTRIBL2UI64VNVPROC) __GLeeGetProcAddress("glVertexAttribL2ui64vNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttribL3ui64vNV = (GLEEPFNGLVERTEXATTRIBL3UI64VNVPROC) __GLeeGetProcAddress("glVertexAttribL3ui64vNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttribL4ui64vNV = (GLEEPFNGLVERTEXATTRIBL4UI64VNVPROC) __GLeeGetProcAddress("glVertexAttribL4ui64vNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetVertexAttribLi64vNV = (GLEEPFNGLGETVERTEXATTRIBLI64VNVPROC) __GLeeGetProcAddress("glGetVertexAttribLi64vNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glGetVertexAttribLui64vNV = (GLEEPFNGLGETVERTEXATTRIBLUI64VNVPROC) __GLeeGetProcAddress("glGetVertexAttribLui64vNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glVertexAttribLFormatNV = (GLEEPFNGLVERTEXATTRIBLFORMATNVPROC) __GLeeGetProcAddress("glVertexAttribLFormatNV"))!=0) nLinked++;
+#endif
+    if (nLinked==19) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_NV_multisample_coverage(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_AMD_name_gen_delete(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_AMD_name_gen_delete
+    if ((GLeeFuncPtr_glGenNamesAMD = (GLEEPFNGLGENNAMESAMDPROC) __GLeeGetProcAddress("glGenNamesAMD"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glDeleteNamesAMD = (GLEEPFNGLDELETENAMESAMDPROC) __GLeeGetProcAddress("glDeleteNamesAMD"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glIsNameAMD = (GLEEPFNGLISNAMEAMDPROC) __GLeeGetProcAddress("glIsNameAMD"))!=0) nLinked++;
+#endif
+    if (nLinked==3) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_AMD_transform_feedback3_lines_triangles(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_AMD_depth_clamp_separate(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_EXT_texture_sRGB_decode(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_NV_texture_multisample(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_NV_texture_multisample
+    if ((GLeeFuncPtr_glTexImage2DMultisampleCoverageNV = (GLEEPFNGLTEXIMAGE2DMULTISAMPLECOVERAGENVPROC) __GLeeGetProcAddress("glTexImage2DMultisampleCoverageNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glTexImage3DMultisampleCoverageNV = (GLEEPFNGLTEXIMAGE3DMULTISAMPLECOVERAGENVPROC) __GLeeGetProcAddress("glTexImage3DMultisampleCoverageNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glTextureImage2DMultisampleNV = (GLEEPFNGLTEXTUREIMAGE2DMULTISAMPLENVPROC) __GLeeGetProcAddress("glTextureImage2DMultisampleNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glTextureImage3DMultisampleNV = (GLEEPFNGLTEXTUREIMAGE3DMULTISAMPLENVPROC) __GLeeGetProcAddress("glTextureImage3DMultisampleNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glTextureImage2DMultisampleCoverageNV = (GLEEPFNGLTEXTUREIMAGE2DMULTISAMPLECOVERAGENVPROC) __GLeeGetProcAddress("glTextureImage2DMultisampleCoverageNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glTextureImage3DMultisampleCoverageNV = (GLEEPFNGLTEXTUREIMAGE3DMULTISAMPLECOVERAGENVPROC) __GLeeGetProcAddress("glTextureImage3DMultisampleCoverageNV"))!=0) nLinked++;
+#endif
+    if (nLinked==6) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_AMD_blend_minmax_factor(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_AMD_sample_positions(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_AMD_sample_positions
+    if ((GLeeFuncPtr_glSetMultisamplefvAMD = (GLEEPFNGLSETMULTISAMPLEFVAMDPROC) __GLeeGetProcAddress("glSetMultisamplefvAMD"))!=0) nLinked++;
+#endif
+    if (nLinked==1) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_EXT_x11_sync_object(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_EXT_x11_sync_object
+    if ((GLeeFuncPtr_glImportSyncEXT = (GLEEPFNGLIMPORTSYNCEXTPROC) __GLeeGetProcAddress("glImportSyncEXT"))!=0) nLinked++;
+#endif
+    if (nLinked==1) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_AMD_multi_draw_indirect(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_AMD_multi_draw_indirect
+    if ((GLeeFuncPtr_glMultiDrawArraysIndirectAMD = (GLEEPFNGLMULTIDRAWARRAYSINDIRECTAMDPROC) __GLeeGetProcAddress("glMultiDrawArraysIndirectAMD"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glMultiDrawElementsIndirectAMD = (GLEEPFNGLMULTIDRAWELEMENTSINDIRECTAMDPROC) __GLeeGetProcAddress("glMultiDrawElementsIndirectAMD"))!=0) nLinked++;
+#endif
+    if (nLinked==2) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_EXT_framebuffer_multisample_blit_scaled(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_SGIX_texture_select(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_INGR_blend_func_separate(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_INGR_blend_func_separate
+    if ((GLeeFuncPtr_glBlendFuncSeparateINGR = (GLEEPFNGLBLENDFUNCSEPARATEINGRPROC) __GLeeGetProcAddress("glBlendFuncSeparateINGR"))!=0) nLinked++;
+#endif
+    if (nLinked==1) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_SGIX_depth_pass_instrument(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_SGIX_igloo_interface(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_SGIX_igloo_interface
+    if ((GLeeFuncPtr_glIglooInterfaceSGIX = (GLEEPFNGLIGLOOINTERFACESGIXPROC) __GLeeGetProcAddress("glIglooInterfaceSGIX"))!=0) nLinked++;
+#endif
+    if (nLinked==1) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_OES_compressed_paletted_texture(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_OES_fixed_point(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_OES_single_precision(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_OES_single_precision
+    if ((GLeeFuncPtr_glClearDepthfOES = (GLEEPFNGLCLEARDEPTHFOESPROC) __GLeeGetProcAddress("glClearDepthfOES"))!=0) nLinked++;
+#endif
+    if (nLinked==1) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_OES_query_matrix(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_OES_byte_coordinates(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_NV_gpu_program4(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_NV_path_rendering(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_AMD_vertex_shader_tessellator(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_AMD_vertex_shader_tessellator
+    if ((GLeeFuncPtr_glTessellationModeAMD = (GLEEPFNGLTESSELLATIONMODEAMDPROC) __GLeeGetProcAddress("glTessellationModeAMD"))!=0) nLinked++;
+#endif
+    if (nLinked==1) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_EXT_fragment_lighting(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_EXT_texture_compression_dxt1(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_EXT_scene_marker(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GL_EXT_scene_marker
+    if ((GLeeFuncPtr_glEndSceneEXT = (GLEEPFNGLENDSCENEEXTPROC) __GLeeGetProcAddress("glEndSceneEXT"))!=0) nLinked++;
+#endif
+    if (nLinked==1) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GL_EXT_geometry_shader4(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_EXT_texture_env(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_SGIX_texture_range(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_SGIX_pixel_texture_bits(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GL_IBM_static_data(void) {return GLEE_LINK_COMPLETE;}
+
+GLEE_LINK_FUNCTION __GLeeGLLoadFunction[430];
+
+void initGLLoadFunctions(void)
+{
+    __GLeeGLLoadFunction[0]=__GLeeLink_GL_VERSION_1_2;
+    __GLeeGLLoadFunction[1]=__GLeeLink_GL_ARB_imaging;
+    __GLeeGLLoadFunction[2]=__GLeeLink_GL_VERSION_1_3;
+    __GLeeGLLoadFunction[3]=__GLeeLink_GL_VERSION_1_4;
+    __GLeeGLLoadFunction[4]=__GLeeLink_GL_VERSION_1_5;
+    __GLeeGLLoadFunction[5]=__GLeeLink_GL_VERSION_2_0;
+    __GLeeGLLoadFunction[6]=__GLeeLink_GL_VERSION_2_1;
+    __GLeeGLLoadFunction[7]=__GLeeLink_GL_VERSION_3_0;
+    __GLeeGLLoadFunction[8]=__GLeeLink_GL_VERSION_3_1;
+    __GLeeGLLoadFunction[9]=__GLeeLink_GL_VERSION_3_2;
+    __GLeeGLLoadFunction[10]=__GLeeLink_GL_VERSION_3_3;
+    __GLeeGLLoadFunction[11]=__GLeeLink_GL_VERSION_4_0;
+    __GLeeGLLoadFunction[12]=__GLeeLink_GL_VERSION_4_1;
+    __GLeeGLLoadFunction[13]=__GLeeLink_GL_VERSION_4_2;
+    __GLeeGLLoadFunction[14]=__GLeeLink_GL_ARB_multitexture;
+    __GLeeGLLoadFunction[15]=__GLeeLink_GL_ARB_transpose_matrix;
+    __GLeeGLLoadFunction[16]=__GLeeLink_GL_ARB_multisample;
+    __GLeeGLLoadFunction[17]=__GLeeLink_GL_ARB_texture_env_add;
+    __GLeeGLLoadFunction[18]=__GLeeLink_GL_ARB_texture_cube_map;
+    __GLeeGLLoadFunction[19]=__GLeeLink_GL_ARB_texture_compression;
+    __GLeeGLLoadFunction[20]=__GLeeLink_GL_ARB_texture_border_clamp;
+    __GLeeGLLoadFunction[21]=__GLeeLink_GL_ARB_point_parameters;
+    __GLeeGLLoadFunction[22]=__GLeeLink_GL_ARB_vertex_blend;
+    __GLeeGLLoadFunction[23]=__GLeeLink_GL_ARB_matrix_palette;
+    __GLeeGLLoadFunction[24]=__GLeeLink_GL_ARB_texture_env_combine;
+    __GLeeGLLoadFunction[25]=__GLeeLink_GL_ARB_texture_env_crossbar;
+    __GLeeGLLoadFunction[26]=__GLeeLink_GL_ARB_texture_env_dot3;
+    __GLeeGLLoadFunction[27]=__GLeeLink_GL_ARB_texture_mirrored_repeat;
+    __GLeeGLLoadFunction[28]=__GLeeLink_GL_ARB_depth_texture;
+    __GLeeGLLoadFunction[29]=__GLeeLink_GL_ARB_shadow;
+    __GLeeGLLoadFunction[30]=__GLeeLink_GL_ARB_shadow_ambient;
+    __GLeeGLLoadFunction[31]=__GLeeLink_GL_ARB_window_pos;
+    __GLeeGLLoadFunction[32]=__GLeeLink_GL_ARB_vertex_program;
+    __GLeeGLLoadFunction[33]=__GLeeLink_GL_ARB_fragment_program;
+    __GLeeGLLoadFunction[34]=__GLeeLink_GL_ARB_vertex_buffer_object;
+    __GLeeGLLoadFunction[35]=__GLeeLink_GL_ARB_occlusion_query;
+    __GLeeGLLoadFunction[36]=__GLeeLink_GL_ARB_shader_objects;
+    __GLeeGLLoadFunction[37]=__GLeeLink_GL_ARB_vertex_shader;
+    __GLeeGLLoadFunction[38]=__GLeeLink_GL_ARB_fragment_shader;
+    __GLeeGLLoadFunction[39]=__GLeeLink_GL_ARB_shading_language_100;
+    __GLeeGLLoadFunction[40]=__GLeeLink_GL_ARB_texture_non_power_of_two;
+    __GLeeGLLoadFunction[41]=__GLeeLink_GL_ARB_point_sprite;
+    __GLeeGLLoadFunction[42]=__GLeeLink_GL_ARB_fragment_program_shadow;
+    __GLeeGLLoadFunction[43]=__GLeeLink_GL_ARB_draw_buffers;
+    __GLeeGLLoadFunction[44]=__GLeeLink_GL_ARB_texture_rectangle;
+    __GLeeGLLoadFunction[45]=__GLeeLink_GL_ARB_color_buffer_float;
+    __GLeeGLLoadFunction[46]=__GLeeLink_GL_ARB_half_float_pixel;
+    __GLeeGLLoadFunction[47]=__GLeeLink_GL_ARB_texture_float;
+    __GLeeGLLoadFunction[48]=__GLeeLink_GL_ARB_pixel_buffer_object;
+    __GLeeGLLoadFunction[49]=__GLeeLink_GL_ARB_depth_buffer_float;
+    __GLeeGLLoadFunction[50]=__GLeeLink_GL_ARB_draw_instanced;
+    __GLeeGLLoadFunction[51]=__GLeeLink_GL_ARB_framebuffer_object;
+    __GLeeGLLoadFunction[52]=__GLeeLink_GL_ARB_framebuffer_sRGB;
+    __GLeeGLLoadFunction[53]=__GLeeLink_GL_ARB_geometry_shader4;
+    __GLeeGLLoadFunction[54]=__GLeeLink_GL_ARB_half_float_vertex;
+    __GLeeGLLoadFunction[55]=__GLeeLink_GL_ARB_instanced_arrays;
+    __GLeeGLLoadFunction[56]=__GLeeLink_GL_ARB_map_buffer_range;
+    __GLeeGLLoadFunction[57]=__GLeeLink_GL_ARB_texture_buffer_object;
+    __GLeeGLLoadFunction[58]=__GLeeLink_GL_ARB_texture_compression_rgtc;
+    __GLeeGLLoadFunction[59]=__GLeeLink_GL_ARB_texture_rg;
+    __GLeeGLLoadFunction[60]=__GLeeLink_GL_ARB_vertex_array_object;
+    __GLeeGLLoadFunction[61]=__GLeeLink_GL_ARB_uniform_buffer_object;
+    __GLeeGLLoadFunction[62]=__GLeeLink_GL_ARB_compatibility;
+    __GLeeGLLoadFunction[63]=__GLeeLink_GL_ARB_copy_buffer;
+    __GLeeGLLoadFunction[64]=__GLeeLink_GL_ARB_shader_texture_lod;
+    __GLeeGLLoadFunction[65]=__GLeeLink_GL_ARB_depth_clamp;
+    __GLeeGLLoadFunction[66]=__GLeeLink_GL_ARB_draw_elements_base_vertex;
+    __GLeeGLLoadFunction[67]=__GLeeLink_GL_ARB_fragment_coord_conventions;
+    __GLeeGLLoadFunction[68]=__GLeeLink_GL_ARB_provoking_vertex;
+    __GLeeGLLoadFunction[69]=__GLeeLink_GL_ARB_seamless_cube_map;
+    __GLeeGLLoadFunction[70]=__GLeeLink_GL_ARB_sync;
+    __GLeeGLLoadFunction[71]=__GLeeLink_GL_ARB_texture_multisample;
+    __GLeeGLLoadFunction[72]=__GLeeLink_GL_ARB_vertex_array_bgra;
+    __GLeeGLLoadFunction[73]=__GLeeLink_GL_ARB_draw_buffers_blend;
+    __GLeeGLLoadFunction[74]=__GLeeLink_GL_ARB_sample_shading;
+    __GLeeGLLoadFunction[75]=__GLeeLink_GL_ARB_texture_cube_map_array;
+    __GLeeGLLoadFunction[76]=__GLeeLink_GL_ARB_texture_gather;
+    __GLeeGLLoadFunction[77]=__GLeeLink_GL_ARB_texture_query_lod;
+    __GLeeGLLoadFunction[78]=__GLeeLink_GL_ARB_shading_language_include;
+    __GLeeGLLoadFunction[79]=__GLeeLink_GL_ARB_texture_compression_bptc;
+    __GLeeGLLoadFunction[80]=__GLeeLink_GL_ARB_blend_func_extended;
+    __GLeeGLLoadFunction[81]=__GLeeLink_GL_ARB_explicit_attrib_location;
+    __GLeeGLLoadFunction[82]=__GLeeLink_GL_ARB_occlusion_query2;
+    __GLeeGLLoadFunction[83]=__GLeeLink_GL_ARB_sampler_objects;
+    __GLeeGLLoadFunction[84]=__GLeeLink_GL_ARB_shader_bit_encoding;
+    __GLeeGLLoadFunction[85]=__GLeeLink_GL_ARB_texture_rgb10_a2ui;
+    __GLeeGLLoadFunction[86]=__GLeeLink_GL_ARB_texture_swizzle;
+    __GLeeGLLoadFunction[87]=__GLeeLink_GL_ARB_timer_query;
+    __GLeeGLLoadFunction[88]=__GLeeLink_GL_ARB_vertex_type_2_10_10_10_rev;
+    __GLeeGLLoadFunction[89]=__GLeeLink_GL_ARB_draw_indirect;
+    __GLeeGLLoadFunction[90]=__GLeeLink_GL_ARB_gpu_shader5;
+    __GLeeGLLoadFunction[91]=__GLeeLink_GL_ARB_gpu_shader_fp64;
+    __GLeeGLLoadFunction[92]=__GLeeLink_GL_ARB_shader_subroutine;
+    __GLeeGLLoadFunction[93]=__GLeeLink_GL_ARB_tessellation_shader;
+    __GLeeGLLoadFunction[94]=__GLeeLink_GL_ARB_texture_buffer_object_rgb32;
+    __GLeeGLLoadFunction[95]=__GLeeLink_GL_ARB_transform_feedback2;
+    __GLeeGLLoadFunction[96]=__GLeeLink_GL_ARB_transform_feedback3;
+    __GLeeGLLoadFunction[97]=__GLeeLink_GL_ARB_ES2_compatibility;
+    __GLeeGLLoadFunction[98]=__GLeeLink_GL_ARB_get_program_binary;
+    __GLeeGLLoadFunction[99]=__GLeeLink_GL_ARB_separate_shader_objects;
+    __GLeeGLLoadFunction[100]=__GLeeLink_GL_ARB_shader_precision;
+    __GLeeGLLoadFunction[101]=__GLeeLink_GL_ARB_vertex_attrib_64bit;
+    __GLeeGLLoadFunction[102]=__GLeeLink_GL_ARB_viewport_array;
+    __GLeeGLLoadFunction[103]=__GLeeLink_GL_ARB_cl_event;
+    __GLeeGLLoadFunction[104]=__GLeeLink_GL_ARB_robustness;
+    __GLeeGLLoadFunction[105]=__GLeeLink_GL_ARB_shader_stencil_export;
+    __GLeeGLLoadFunction[106]=__GLeeLink_GL_ARB_base_instance;
+    __GLeeGLLoadFunction[107]=__GLeeLink_GL_ARB_shading_language_420pack;
+    __GLeeGLLoadFunction[108]=__GLeeLink_GL_ARB_transform_feedback_instanced;
+    __GLeeGLLoadFunction[109]=__GLeeLink_GL_ARB_compressed_texture_pixel_storage;
+    __GLeeGLLoadFunction[110]=__GLeeLink_GL_ARB_conservative_depth;
+    __GLeeGLLoadFunction[111]=__GLeeLink_GL_ARB_internalformat_query;
+    __GLeeGLLoadFunction[112]=__GLeeLink_GL_ARB_map_buffer_alignment;
+    __GLeeGLLoadFunction[113]=__GLeeLink_GL_ARB_shader_atomic_counters;
+    __GLeeGLLoadFunction[114]=__GLeeLink_GL_ARB_shader_image_load_store;
+    __GLeeGLLoadFunction[115]=__GLeeLink_GL_ARB_shading_language_packing;
+    __GLeeGLLoadFunction[116]=__GLeeLink_GL_ARB_texture_storage;
+    __GLeeGLLoadFunction[117]=__GLeeLink_GL_EXT_abgr;
+    __GLeeGLLoadFunction[118]=__GLeeLink_GL_EXT_blend_color;
+    __GLeeGLLoadFunction[119]=__GLeeLink_GL_EXT_polygon_offset;
+    __GLeeGLLoadFunction[120]=__GLeeLink_GL_EXT_texture;
+    __GLeeGLLoadFunction[121]=__GLeeLink_GL_EXT_texture3D;
+    __GLeeGLLoadFunction[122]=__GLeeLink_GL_SGIS_texture_filter4;
+    __GLeeGLLoadFunction[123]=__GLeeLink_GL_EXT_subtexture;
+    __GLeeGLLoadFunction[124]=__GLeeLink_GL_EXT_copy_texture;
+    __GLeeGLLoadFunction[125]=__GLeeLink_GL_EXT_histogram;
+    __GLeeGLLoadFunction[126]=__GLeeLink_GL_EXT_convolution;
+    __GLeeGLLoadFunction[127]=__GLeeLink_GL_SGI_color_matrix;
+    __GLeeGLLoadFunction[128]=__GLeeLink_GL_SGI_color_table;
+    __GLeeGLLoadFunction[129]=__GLeeLink_GL_SGIS_pixel_texture;
+    __GLeeGLLoadFunction[130]=__GLeeLink_GL_SGIX_pixel_texture;
+    __GLeeGLLoadFunction[131]=__GLeeLink_GL_SGIS_texture4D;
+    __GLeeGLLoadFunction[132]=__GLeeLink_GL_SGI_texture_color_table;
+    __GLeeGLLoadFunction[133]=__GLeeLink_GL_EXT_cmyka;
+    __GLeeGLLoadFunction[134]=__GLeeLink_GL_EXT_texture_object;
+    __GLeeGLLoadFunction[135]=__GLeeLink_GL_SGIS_detail_texture;
+    __GLeeGLLoadFunction[136]=__GLeeLink_GL_SGIS_sharpen_texture;
+    __GLeeGLLoadFunction[137]=__GLeeLink_GL_EXT_packed_pixels;
+    __GLeeGLLoadFunction[138]=__GLeeLink_GL_SGIS_texture_lod;
+    __GLeeGLLoadFunction[139]=__GLeeLink_GL_SGIS_multisample;
+    __GLeeGLLoadFunction[140]=__GLeeLink_GL_EXT_rescale_normal;
+    __GLeeGLLoadFunction[141]=__GLeeLink_GL_EXT_vertex_array;
+    __GLeeGLLoadFunction[142]=__GLeeLink_GL_EXT_misc_attribute;
+    __GLeeGLLoadFunction[143]=__GLeeLink_GL_SGIS_generate_mipmap;
+    __GLeeGLLoadFunction[144]=__GLeeLink_GL_SGIX_clipmap;
+    __GLeeGLLoadFunction[145]=__GLeeLink_GL_SGIX_shadow;
+    __GLeeGLLoadFunction[146]=__GLeeLink_GL_SGIS_texture_edge_clamp;
+    __GLeeGLLoadFunction[147]=__GLeeLink_GL_SGIS_texture_border_clamp;
+    __GLeeGLLoadFunction[148]=__GLeeLink_GL_EXT_blend_minmax;
+    __GLeeGLLoadFunction[149]=__GLeeLink_GL_EXT_blend_subtract;
+    __GLeeGLLoadFunction[150]=__GLeeLink_GL_EXT_blend_logic_op;
+    __GLeeGLLoadFunction[151]=__GLeeLink_GL_SGIX_interlace;
+    __GLeeGLLoadFunction[152]=__GLeeLink_GL_SGIX_pixel_tiles;
+    __GLeeGLLoadFunction[153]=__GLeeLink_GL_SGIS_texture_select;
+    __GLeeGLLoadFunction[154]=__GLeeLink_GL_SGIX_sprite;
+    __GLeeGLLoadFunction[155]=__GLeeLink_GL_SGIX_texture_multi_buffer;
+    __GLeeGLLoadFunction[156]=__GLeeLink_GL_EXT_point_parameters;
+    __GLeeGLLoadFunction[157]=__GLeeLink_GL_SGIS_point_parameters;
+    __GLeeGLLoadFunction[158]=__GLeeLink_GL_SGIX_instruments;
+    __GLeeGLLoadFunction[159]=__GLeeLink_GL_SGIX_texture_scale_bias;
+    __GLeeGLLoadFunction[160]=__GLeeLink_GL_SGIX_framezoom;
+    __GLeeGLLoadFunction[161]=__GLeeLink_GL_SGIX_tag_sample_buffer;
+    __GLeeGLLoadFunction[162]=__GLeeLink_GL_FfdMaskSGIX;
+    __GLeeGLLoadFunction[163]=__GLeeLink_GL_SGIX_polynomial_ffd;
+    __GLeeGLLoadFunction[164]=__GLeeLink_GL_SGIX_reference_plane;
+    __GLeeGLLoadFunction[165]=__GLeeLink_GL_SGIX_flush_raster;
+    __GLeeGLLoadFunction[166]=__GLeeLink_GL_SGIX_depth_texture;
+    __GLeeGLLoadFunction[167]=__GLeeLink_GL_SGIS_fog_function;
+    __GLeeGLLoadFunction[168]=__GLeeLink_GL_SGIX_fog_offset;
+    __GLeeGLLoadFunction[169]=__GLeeLink_GL_HP_image_transform;
+    __GLeeGLLoadFunction[170]=__GLeeLink_GL_HP_convolution_border_modes;
+    __GLeeGLLoadFunction[171]=__GLeeLink_GL_INGR_palette_buffer;
+    __GLeeGLLoadFunction[172]=__GLeeLink_GL_SGIX_texture_add_env;
+    __GLeeGLLoadFunction[173]=__GLeeLink_GL_EXT_color_subtable;
+    __GLeeGLLoadFunction[174]=__GLeeLink_GL_PGI_vertex_hints;
+    __GLeeGLLoadFunction[175]=__GLeeLink_GL_PGI_misc_hints;
+    __GLeeGLLoadFunction[176]=__GLeeLink_GL_EXT_paletted_texture;
+    __GLeeGLLoadFunction[177]=__GLeeLink_GL_EXT_clip_volume_hint;
+    __GLeeGLLoadFunction[178]=__GLeeLink_GL_SGIX_list_priority;
+    __GLeeGLLoadFunction[179]=__GLeeLink_GL_SGIX_ir_instrument1;
+    __GLeeGLLoadFunction[180]=__GLeeLink_GL_SGIX_calligraphic_fragment;
+    __GLeeGLLoadFunction[181]=__GLeeLink_GL_SGIX_texture_lod_bias;
+    __GLeeGLLoadFunction[182]=__GLeeLink_GL_SGIX_shadow_ambient;
+    __GLeeGLLoadFunction[183]=__GLeeLink_GL_EXT_index_texture;
+    __GLeeGLLoadFunction[184]=__GLeeLink_GL_EXT_index_material;
+    __GLeeGLLoadFunction[185]=__GLeeLink_GL_EXT_index_func;
+    __GLeeGLLoadFunction[186]=__GLeeLink_GL_EXT_index_array_formats;
+    __GLeeGLLoadFunction[187]=__GLeeLink_GL_EXT_compiled_vertex_array;
+    __GLeeGLLoadFunction[188]=__GLeeLink_GL_EXT_cull_vertex;
+    __GLeeGLLoadFunction[189]=__GLeeLink_GL_SGIX_ycrcb;
+    __GLeeGLLoadFunction[190]=__GLeeLink_GL_SGIX_fragment_lighting;
+    __GLeeGLLoadFunction[191]=__GLeeLink_GL_IBM_rasterpos_clip;
+    __GLeeGLLoadFunction[192]=__GLeeLink_GL_HP_texture_lighting;
+    __GLeeGLLoadFunction[193]=__GLeeLink_GL_EXT_draw_range_elements;
+    __GLeeGLLoadFunction[194]=__GLeeLink_GL_WIN_phong_shading;
+    __GLeeGLLoadFunction[195]=__GLeeLink_GL_WIN_specular_fog;
+    __GLeeGLLoadFunction[196]=__GLeeLink_GL_EXT_light_texture;
+    __GLeeGLLoadFunction[197]=__GLeeLink_GL_SGIX_blend_alpha_minmax;
+    __GLeeGLLoadFunction[198]=__GLeeLink_GL_SGIX_impact_pixel_texture;
+    __GLeeGLLoadFunction[199]=__GLeeLink_GL_EXT_bgra;
+    __GLeeGLLoadFunction[200]=__GLeeLink_GL_SGIX_async;
+    __GLeeGLLoadFunction[201]=__GLeeLink_GL_SGIX_async_pixel;
+    __GLeeGLLoadFunction[202]=__GLeeLink_GL_SGIX_async_histogram;
+    __GLeeGLLoadFunction[203]=__GLeeLink_GL_INTEL_texture_scissor;
+    __GLeeGLLoadFunction[204]=__GLeeLink_GL_INTEL_parallel_arrays;
+    __GLeeGLLoadFunction[205]=__GLeeLink_GL_HP_occlusion_test;
+    __GLeeGLLoadFunction[206]=__GLeeLink_GL_EXT_pixel_transform;
+    __GLeeGLLoadFunction[207]=__GLeeLink_GL_EXT_pixel_transform_color_table;
+    __GLeeGLLoadFunction[208]=__GLeeLink_GL_EXT_shared_texture_palette;
+    __GLeeGLLoadFunction[209]=__GLeeLink_GL_EXT_separate_specular_color;
+    __GLeeGLLoadFunction[210]=__GLeeLink_GL_EXT_secondary_color;
+    __GLeeGLLoadFunction[211]=__GLeeLink_GL_EXT_texture_perturb_normal;
+    __GLeeGLLoadFunction[212]=__GLeeLink_GL_EXT_multi_draw_arrays;
+    __GLeeGLLoadFunction[213]=__GLeeLink_GL_EXT_fog_coord;
+    __GLeeGLLoadFunction[214]=__GLeeLink_GL_REND_screen_coordinates;
+    __GLeeGLLoadFunction[215]=__GLeeLink_GL_EXT_coordinate_frame;
+    __GLeeGLLoadFunction[216]=__GLeeLink_GL_EXT_texture_env_combine;
+    __GLeeGLLoadFunction[217]=__GLeeLink_GL_APPLE_specular_vector;
+    __GLeeGLLoadFunction[218]=__GLeeLink_GL_APPLE_transform_hint;
+    __GLeeGLLoadFunction[219]=__GLeeLink_GL_SGIX_fog_scale;
+    __GLeeGLLoadFunction[220]=__GLeeLink_GL_SUNX_constant_data;
+    __GLeeGLLoadFunction[221]=__GLeeLink_GL_SUN_global_alpha;
+    __GLeeGLLoadFunction[222]=__GLeeLink_GL_SUN_triangle_list;
+    __GLeeGLLoadFunction[223]=__GLeeLink_GL_SUN_vertex;
+    __GLeeGLLoadFunction[224]=__GLeeLink_GL_EXT_blend_func_separate;
+    __GLeeGLLoadFunction[225]=__GLeeLink_GL_INGR_color_clamp;
+    __GLeeGLLoadFunction[226]=__GLeeLink_GL_INGR_interlace_read;
+    __GLeeGLLoadFunction[227]=__GLeeLink_GL_EXT_stencil_wrap;
+    __GLeeGLLoadFunction[228]=__GLeeLink_GL_EXT_422_pixels;
+    __GLeeGLLoadFunction[229]=__GLeeLink_GL_NV_texgen_reflection;
+    __GLeeGLLoadFunction[230]=__GLeeLink_GL_EXT_texture_cube_map;
+    __GLeeGLLoadFunction[231]=__GLeeLink_GL_SUN_convolution_border_modes;
+    __GLeeGLLoadFunction[232]=__GLeeLink_GL_EXT_texture_env_add;
+    __GLeeGLLoadFunction[233]=__GLeeLink_GL_EXT_texture_lod_bias;
+    __GLeeGLLoadFunction[234]=__GLeeLink_GL_EXT_texture_filter_anisotropic;
+    __GLeeGLLoadFunction[235]=__GLeeLink_GL_EXT_vertex_weighting;
+    __GLeeGLLoadFunction[236]=__GLeeLink_GL_NV_light_max_exponent;
+    __GLeeGLLoadFunction[237]=__GLeeLink_GL_NV_vertex_array_range;
+    __GLeeGLLoadFunction[238]=__GLeeLink_GL_NV_register_combiners;
+    __GLeeGLLoadFunction[239]=__GLeeLink_GL_NV_fog_distance;
+    __GLeeGLLoadFunction[240]=__GLeeLink_GL_NV_texgen_emboss;
+    __GLeeGLLoadFunction[241]=__GLeeLink_GL_NV_blend_square;
+    __GLeeGLLoadFunction[242]=__GLeeLink_GL_NV_texture_env_combine4;
+    __GLeeGLLoadFunction[243]=__GLeeLink_GL_MESA_resize_buffers;
+    __GLeeGLLoadFunction[244]=__GLeeLink_GL_MESA_window_pos;
+    __GLeeGLLoadFunction[245]=__GLeeLink_GL_EXT_texture_compression_s3tc;
+    __GLeeGLLoadFunction[246]=__GLeeLink_GL_IBM_cull_vertex;
+    __GLeeGLLoadFunction[247]=__GLeeLink_GL_IBM_multimode_draw_arrays;
+    __GLeeGLLoadFunction[248]=__GLeeLink_GL_IBM_vertex_array_lists;
+    __GLeeGLLoadFunction[249]=__GLeeLink_GL_SGIX_subsample;
+    __GLeeGLLoadFunction[250]=__GLeeLink_GL_SGIX_ycrcb_subsample;
+    __GLeeGLLoadFunction[251]=__GLeeLink_GL_SGIX_ycrcba;
+    __GLeeGLLoadFunction[252]=__GLeeLink_GL_SGI_depth_pass_instrument;
+    __GLeeGLLoadFunction[253]=__GLeeLink_GL_3DFX_texture_compression_FXT1;
+    __GLeeGLLoadFunction[254]=__GLeeLink_GL_3DFX_multisample;
+    __GLeeGLLoadFunction[255]=__GLeeLink_GL_3DFX_tbuffer;
+    __GLeeGLLoadFunction[256]=__GLeeLink_GL_EXT_multisample;
+    __GLeeGLLoadFunction[257]=__GLeeLink_GL_SGIX_vertex_preclip;
+    __GLeeGLLoadFunction[258]=__GLeeLink_GL_SGIX_convolution_accuracy;
+    __GLeeGLLoadFunction[259]=__GLeeLink_GL_SGIX_resample;
+    __GLeeGLLoadFunction[260]=__GLeeLink_GL_SGIS_point_line_texgen;
+    __GLeeGLLoadFunction[261]=__GLeeLink_GL_SGIS_texture_color_mask;
+    __GLeeGLLoadFunction[262]=__GLeeLink_GL_EXT_texture_env_dot3;
+    __GLeeGLLoadFunction[263]=__GLeeLink_GL_ATI_texture_mirror_once;
+    __GLeeGLLoadFunction[264]=__GLeeLink_GL_NV_fence;
+    __GLeeGLLoadFunction[265]=__GLeeLink_GL_IBM_texture_mirrored_repeat;
+    __GLeeGLLoadFunction[266]=__GLeeLink_GL_NV_evaluators;
+    __GLeeGLLoadFunction[267]=__GLeeLink_GL_NV_packed_depth_stencil;
+    __GLeeGLLoadFunction[268]=__GLeeLink_GL_NV_register_combiners2;
+    __GLeeGLLoadFunction[269]=__GLeeLink_GL_NV_texture_compression_vtc;
+    __GLeeGLLoadFunction[270]=__GLeeLink_GL_NV_texture_rectangle;
+    __GLeeGLLoadFunction[271]=__GLeeLink_GL_NV_texture_shader;
+    __GLeeGLLoadFunction[272]=__GLeeLink_GL_NV_texture_shader2;
+    __GLeeGLLoadFunction[273]=__GLeeLink_GL_NV_vertex_array_range2;
+    __GLeeGLLoadFunction[274]=__GLeeLink_GL_NV_vertex_program;
+    __GLeeGLLoadFunction[275]=__GLeeLink_GL_SGIX_texture_coordinate_clamp;
+    __GLeeGLLoadFunction[276]=__GLeeLink_GL_SGIX_scalebias_hint;
+    __GLeeGLLoadFunction[277]=__GLeeLink_GL_OML_interlace;
+    __GLeeGLLoadFunction[278]=__GLeeLink_GL_OML_subsample;
+    __GLeeGLLoadFunction[279]=__GLeeLink_GL_OML_resample;
+    __GLeeGLLoadFunction[280]=__GLeeLink_GL_NV_copy_depth_to_color;
+    __GLeeGLLoadFunction[281]=__GLeeLink_GL_ATI_envmap_bumpmap;
+    __GLeeGLLoadFunction[282]=__GLeeLink_GL_ATI_fragment_shader;
+    __GLeeGLLoadFunction[283]=__GLeeLink_GL_ATI_pn_triangles;
+    __GLeeGLLoadFunction[284]=__GLeeLink_GL_ATI_vertex_array_object;
+    __GLeeGLLoadFunction[285]=__GLeeLink_GL_EXT_vertex_shader;
+    __GLeeGLLoadFunction[286]=__GLeeLink_GL_ATI_vertex_streams;
+    __GLeeGLLoadFunction[287]=__GLeeLink_GL_ATI_element_array;
+    __GLeeGLLoadFunction[288]=__GLeeLink_GL_SUN_mesh_array;
+    __GLeeGLLoadFunction[289]=__GLeeLink_GL_SUN_slice_accum;
+    __GLeeGLLoadFunction[290]=__GLeeLink_GL_NV_multisample_filter_hint;
+    __GLeeGLLoadFunction[291]=__GLeeLink_GL_NV_depth_clamp;
+    __GLeeGLLoadFunction[292]=__GLeeLink_GL_NV_occlusion_query;
+    __GLeeGLLoadFunction[293]=__GLeeLink_GL_NV_point_sprite;
+    __GLeeGLLoadFunction[294]=__GLeeLink_GL_NV_texture_shader3;
+    __GLeeGLLoadFunction[295]=__GLeeLink_GL_NV_vertex_program1_1;
+    __GLeeGLLoadFunction[296]=__GLeeLink_GL_EXT_shadow_funcs;
+    __GLeeGLLoadFunction[297]=__GLeeLink_GL_EXT_stencil_two_side;
+    __GLeeGLLoadFunction[298]=__GLeeLink_GL_ATI_text_fragment_shader;
+    __GLeeGLLoadFunction[299]=__GLeeLink_GL_APPLE_client_storage;
+    __GLeeGLLoadFunction[300]=__GLeeLink_GL_APPLE_element_array;
+    __GLeeGLLoadFunction[301]=__GLeeLink_GL_APPLE_fence;
+    __GLeeGLLoadFunction[302]=__GLeeLink_GL_APPLE_vertex_array_object;
+    __GLeeGLLoadFunction[303]=__GLeeLink_GL_APPLE_vertex_array_range;
+    __GLeeGLLoadFunction[304]=__GLeeLink_GL_APPLE_ycbcr_422;
+    __GLeeGLLoadFunction[305]=__GLeeLink_GL_S3_s3tc;
+    __GLeeGLLoadFunction[306]=__GLeeLink_GL_ATI_draw_buffers;
+    __GLeeGLLoadFunction[307]=__GLeeLink_GL_ATI_pixel_format_float;
+    __GLeeGLLoadFunction[308]=__GLeeLink_GL_ATI_texture_env_combine3;
+    __GLeeGLLoadFunction[309]=__GLeeLink_GL_ATI_texture_float;
+    __GLeeGLLoadFunction[310]=__GLeeLink_GL_NV_float_buffer;
+    __GLeeGLLoadFunction[311]=__GLeeLink_GL_NV_fragment_program;
+    __GLeeGLLoadFunction[312]=__GLeeLink_GL_NV_half_float;
+    __GLeeGLLoadFunction[313]=__GLeeLink_GL_NV_pixel_data_range;
+    __GLeeGLLoadFunction[314]=__GLeeLink_GL_NV_primitive_restart;
+    __GLeeGLLoadFunction[315]=__GLeeLink_GL_NV_texture_expand_normal;
+    __GLeeGLLoadFunction[316]=__GLeeLink_GL_NV_vertex_program2;
+    __GLeeGLLoadFunction[317]=__GLeeLink_GL_ATI_map_object_buffer;
+    __GLeeGLLoadFunction[318]=__GLeeLink_GL_ATI_separate_stencil;
+    __GLeeGLLoadFunction[319]=__GLeeLink_GL_ATI_vertex_attrib_array_object;
+    __GLeeGLLoadFunction[320]=__GLeeLink_GL_OES_read_format;
+    __GLeeGLLoadFunction[321]=__GLeeLink_GL_EXT_depth_bounds_test;
+    __GLeeGLLoadFunction[322]=__GLeeLink_GL_EXT_texture_mirror_clamp;
+    __GLeeGLLoadFunction[323]=__GLeeLink_GL_EXT_blend_equation_separate;
+    __GLeeGLLoadFunction[324]=__GLeeLink_GL_MESA_pack_invert;
+    __GLeeGLLoadFunction[325]=__GLeeLink_GL_MESA_ycbcr_texture;
+    __GLeeGLLoadFunction[326]=__GLeeLink_GL_EXT_pixel_buffer_object;
+    __GLeeGLLoadFunction[327]=__GLeeLink_GL_NV_fragment_program_option;
+    __GLeeGLLoadFunction[328]=__GLeeLink_GL_NV_fragment_program2;
+    __GLeeGLLoadFunction[329]=__GLeeLink_GL_NV_vertex_program2_option;
+    __GLeeGLLoadFunction[330]=__GLeeLink_GL_NV_vertex_program3;
+    __GLeeGLLoadFunction[331]=__GLeeLink_GL_EXT_framebuffer_object;
+    __GLeeGLLoadFunction[332]=__GLeeLink_GL_GREMEDY_string_marker;
+    __GLeeGLLoadFunction[333]=__GLeeLink_GL_EXT_packed_depth_stencil;
+    __GLeeGLLoadFunction[334]=__GLeeLink_GL_EXT_stencil_clear_tag;
+    __GLeeGLLoadFunction[335]=__GLeeLink_GL_EXT_texture_sRGB;
+    __GLeeGLLoadFunction[336]=__GLeeLink_GL_EXT_framebuffer_blit;
+    __GLeeGLLoadFunction[337]=__GLeeLink_GL_EXT_framebuffer_multisample;
+    __GLeeGLLoadFunction[338]=__GLeeLink_GL_MESAX_texture_stack;
+    __GLeeGLLoadFunction[339]=__GLeeLink_GL_EXT_timer_query;
+    __GLeeGLLoadFunction[340]=__GLeeLink_GL_EXT_gpu_program_parameters;
+    __GLeeGLLoadFunction[341]=__GLeeLink_GL_APPLE_flush_buffer_range;
+    __GLeeGLLoadFunction[342]=__GLeeLink_GL_EXT_gpu_shader4;
+    __GLeeGLLoadFunction[343]=__GLeeLink_GL_EXT_draw_instanced;
+    __GLeeGLLoadFunction[344]=__GLeeLink_GL_EXT_packed_float;
+    __GLeeGLLoadFunction[345]=__GLeeLink_GL_EXT_texture_array;
+    __GLeeGLLoadFunction[346]=__GLeeLink_GL_EXT_texture_buffer_object;
+    __GLeeGLLoadFunction[347]=__GLeeLink_GL_EXT_texture_compression_latc;
+    __GLeeGLLoadFunction[348]=__GLeeLink_GL_EXT_texture_compression_rgtc;
+    __GLeeGLLoadFunction[349]=__GLeeLink_GL_EXT_texture_shared_exponent;
+    __GLeeGLLoadFunction[350]=__GLeeLink_GL_NV_depth_buffer_float;
+    __GLeeGLLoadFunction[351]=__GLeeLink_GL_NV_framebuffer_multisample_coverage;
+    __GLeeGLLoadFunction[352]=__GLeeLink_GL_EXT_framebuffer_sRGB;
+    __GLeeGLLoadFunction[353]=__GLeeLink_GL_NV_geometry_shader4;
+    __GLeeGLLoadFunction[354]=__GLeeLink_GL_NV_parameter_buffer_object;
+    __GLeeGLLoadFunction[355]=__GLeeLink_GL_EXT_draw_buffers2;
+    __GLeeGLLoadFunction[356]=__GLeeLink_GL_NV_transform_feedback;
+    __GLeeGLLoadFunction[357]=__GLeeLink_GL_EXT_bindable_uniform;
+    __GLeeGLLoadFunction[358]=__GLeeLink_GL_EXT_texture_integer;
+    __GLeeGLLoadFunction[359]=__GLeeLink_GL_GREMEDY_frame_terminator;
+    __GLeeGLLoadFunction[360]=__GLeeLink_GL_NV_conditional_render;
+    __GLeeGLLoadFunction[361]=__GLeeLink_GL_NV_present_video;
+    __GLeeGLLoadFunction[362]=__GLeeLink_GL_EXT_transform_feedback;
+    __GLeeGLLoadFunction[363]=__GLeeLink_GL_EXT_direct_state_access;
+    __GLeeGLLoadFunction[364]=__GLeeLink_GL_EXT_vertex_array_bgra;
+    __GLeeGLLoadFunction[365]=__GLeeLink_GL_EXT_texture_swizzle;
+    __GLeeGLLoadFunction[366]=__GLeeLink_GL_NV_explicit_multisample;
+    __GLeeGLLoadFunction[367]=__GLeeLink_GL_NV_transform_feedback2;
+    __GLeeGLLoadFunction[368]=__GLeeLink_GL_ATI_meminfo;
+    __GLeeGLLoadFunction[369]=__GLeeLink_GL_AMD_performance_monitor;
+    __GLeeGLLoadFunction[370]=__GLeeLink_GL_AMD_texture_texture4;
+    __GLeeGLLoadFunction[371]=__GLeeLink_GL_AMD_vertex_shader_tesselator;
+    __GLeeGLLoadFunction[372]=__GLeeLink_GL_EXT_provoking_vertex;
+    __GLeeGLLoadFunction[373]=__GLeeLink_GL_EXT_texture_snorm;
+    __GLeeGLLoadFunction[374]=__GLeeLink_GL_AMD_draw_buffers_blend;
+    __GLeeGLLoadFunction[375]=__GLeeLink_GL_APPLE_texture_range;
+    __GLeeGLLoadFunction[376]=__GLeeLink_GL_APPLE_float_pixels;
+    __GLeeGLLoadFunction[377]=__GLeeLink_GL_APPLE_vertex_program_evaluators;
+    __GLeeGLLoadFunction[378]=__GLeeLink_GL_APPLE_aux_depth_stencil;
+    __GLeeGLLoadFunction[379]=__GLeeLink_GL_APPLE_object_purgeable;
+    __GLeeGLLoadFunction[380]=__GLeeLink_GL_APPLE_row_bytes;
+    __GLeeGLLoadFunction[381]=__GLeeLink_GL_APPLE_rgb_422;
+    __GLeeGLLoadFunction[382]=__GLeeLink_GL_NV_video_capture;
+    __GLeeGLLoadFunction[383]=__GLeeLink_GL_NV_copy_image;
+    __GLeeGLLoadFunction[384]=__GLeeLink_GL_EXT_separate_shader_objects;
+    __GLeeGLLoadFunction[385]=__GLeeLink_GL_NV_parameter_buffer_object2;
+    __GLeeGLLoadFunction[386]=__GLeeLink_GL_NV_shader_buffer_load;
+    __GLeeGLLoadFunction[387]=__GLeeLink_GL_NV_vertex_buffer_unified_memory;
+    __GLeeGLLoadFunction[388]=__GLeeLink_GL_NV_texture_barrier;
+    __GLeeGLLoadFunction[389]=__GLeeLink_GL_AMD_shader_stencil_export;
+    __GLeeGLLoadFunction[390]=__GLeeLink_GL_AMD_seamless_cubemap_per_texture;
+    __GLeeGLLoadFunction[391]=__GLeeLink_GL_AMD_conservative_depth;
+    __GLeeGLLoadFunction[392]=__GLeeLink_GL_EXT_shader_image_load_store;
+    __GLeeGLLoadFunction[393]=__GLeeLink_GL_EXT_vertex_attrib_64bit;
+    __GLeeGLLoadFunction[394]=__GLeeLink_GL_NV_gpu_program5;
+    __GLeeGLLoadFunction[395]=__GLeeLink_GL_NV_gpu_shader5;
+    __GLeeGLLoadFunction[396]=__GLeeLink_GL_NV_shader_buffer_store;
+    __GLeeGLLoadFunction[397]=__GLeeLink_GL_NV_tessellation_program5;
+    __GLeeGLLoadFunction[398]=__GLeeLink_GL_NV_vertex_attrib_integer_64bit;
+    __GLeeGLLoadFunction[399]=__GLeeLink_GL_NV_multisample_coverage;
+    __GLeeGLLoadFunction[400]=__GLeeLink_GL_AMD_name_gen_delete;
+    __GLeeGLLoadFunction[401]=__GLeeLink_GL_AMD_transform_feedback3_lines_triangles;
+    __GLeeGLLoadFunction[402]=__GLeeLink_GL_AMD_depth_clamp_separate;
+    __GLeeGLLoadFunction[403]=__GLeeLink_GL_EXT_texture_sRGB_decode;
+    __GLeeGLLoadFunction[404]=__GLeeLink_GL_NV_texture_multisample;
+    __GLeeGLLoadFunction[405]=__GLeeLink_GL_AMD_blend_minmax_factor;
+    __GLeeGLLoadFunction[406]=__GLeeLink_GL_AMD_sample_positions;
+    __GLeeGLLoadFunction[407]=__GLeeLink_GL_EXT_x11_sync_object;
+    __GLeeGLLoadFunction[408]=__GLeeLink_GL_AMD_multi_draw_indirect;
+    __GLeeGLLoadFunction[409]=__GLeeLink_GL_EXT_framebuffer_multisample_blit_scaled;
+    __GLeeGLLoadFunction[410]=__GLeeLink_GL_SGIX_texture_select;
+    __GLeeGLLoadFunction[411]=__GLeeLink_GL_INGR_blend_func_separate;
+    __GLeeGLLoadFunction[412]=__GLeeLink_GL_SGIX_depth_pass_instrument;
+    __GLeeGLLoadFunction[413]=__GLeeLink_GL_SGIX_igloo_interface;
+    __GLeeGLLoadFunction[414]=__GLeeLink_GL_OES_compressed_paletted_texture;
+    __GLeeGLLoadFunction[415]=__GLeeLink_GL_OES_fixed_point;
+    __GLeeGLLoadFunction[416]=__GLeeLink_GL_OES_single_precision;
+    __GLeeGLLoadFunction[417]=__GLeeLink_GL_OES_query_matrix;
+    __GLeeGLLoadFunction[418]=__GLeeLink_GL_OES_byte_coordinates;
+    __GLeeGLLoadFunction[419]=__GLeeLink_GL_NV_gpu_program4;
+    __GLeeGLLoadFunction[420]=__GLeeLink_GL_NV_path_rendering;
+    __GLeeGLLoadFunction[421]=__GLeeLink_GL_AMD_vertex_shader_tessellator;
+    __GLeeGLLoadFunction[422]=__GLeeLink_GL_EXT_fragment_lighting;
+    __GLeeGLLoadFunction[423]=__GLeeLink_GL_EXT_texture_compression_dxt1;
+    __GLeeGLLoadFunction[424]=__GLeeLink_GL_EXT_scene_marker;
+    __GLeeGLLoadFunction[425]=__GLeeLink_GL_EXT_geometry_shader4;
+    __GLeeGLLoadFunction[426]=__GLeeLink_GL_EXT_texture_env;
+    __GLeeGLLoadFunction[427]=__GLeeLink_GL_SGIX_texture_range;
+    __GLeeGLLoadFunction[428]=__GLeeLink_GL_SGIX_pixel_texture_bits;
+    __GLeeGLLoadFunction[429]=__GLeeLink_GL_IBM_static_data;
+}
+
+#ifdef _WIN32
+GLuint __GLeeLink_WGL_ARB_buffer_region(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_WGL_ARB_buffer_region
+    if ((GLeeFuncPtr_wglCreateBufferRegionARB = (GLEEPFNWGLCREATEBUFFERREGIONARBPROC) __GLeeGetProcAddress("wglCreateBufferRegionARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_wglDeleteBufferRegionARB = (GLEEPFNWGLDELETEBUFFERREGIONARBPROC) __GLeeGetProcAddress("wglDeleteBufferRegionARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_wglSaveBufferRegionARB = (GLEEPFNWGLSAVEBUFFERREGIONARBPROC) __GLeeGetProcAddress("wglSaveBufferRegionARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_wglRestoreBufferRegionARB = (GLEEPFNWGLRESTOREBUFFERREGIONARBPROC) __GLeeGetProcAddress("wglRestoreBufferRegionARB"))!=0) nLinked++;
+#endif
+    if (nLinked==4) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_WGL_ARB_multisample(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_WGL_ARB_extensions_string(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_WGL_ARB_extensions_string
+    if ((GLeeFuncPtr_wglGetExtensionsStringARB = (GLEEPFNWGLGETEXTENSIONSSTRINGARBPROC) __GLeeGetProcAddress("wglGetExtensionsStringARB"))!=0) nLinked++;
+#endif
+    if (nLinked==1) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_WGL_ARB_pixel_format(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_WGL_ARB_pixel_format
+    if ((GLeeFuncPtr_wglGetPixelFormatAttribivARB = (GLEEPFNWGLGETPIXELFORMATATTRIBIVARBPROC) __GLeeGetProcAddress("wglGetPixelFormatAttribivARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_wglGetPixelFormatAttribfvARB = (GLEEPFNWGLGETPIXELFORMATATTRIBFVARBPROC) __GLeeGetProcAddress("wglGetPixelFormatAttribfvARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_wglChoosePixelFormatARB = (GLEEPFNWGLCHOOSEPIXELFORMATARBPROC) __GLeeGetProcAddress("wglChoosePixelFormatARB"))!=0) nLinked++;
+#endif
+    if (nLinked==3) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_WGL_ARB_make_current_read(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_WGL_ARB_make_current_read
+    if ((GLeeFuncPtr_wglMakeContextCurrentARB = (GLEEPFNWGLMAKECONTEXTCURRENTARBPROC) __GLeeGetProcAddress("wglMakeContextCurrentARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_wglGetCurrentReadDCARB = (GLEEPFNWGLGETCURRENTREADDCARBPROC) __GLeeGetProcAddress("wglGetCurrentReadDCARB"))!=0) nLinked++;
+#endif
+    if (nLinked==2) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_WGL_ARB_pbuffer(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_WGL_ARB_pbuffer
+    if ((GLeeFuncPtr_wglCreatePbufferARB = (GLEEPFNWGLCREATEPBUFFERARBPROC) __GLeeGetProcAddress("wglCreatePbufferARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_wglGetPbufferDCARB = (GLEEPFNWGLGETPBUFFERDCARBPROC) __GLeeGetProcAddress("wglGetPbufferDCARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_wglReleasePbufferDCARB = (GLEEPFNWGLRELEASEPBUFFERDCARBPROC) __GLeeGetProcAddress("wglReleasePbufferDCARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_wglDestroyPbufferARB = (GLEEPFNWGLDESTROYPBUFFERARBPROC) __GLeeGetProcAddress("wglDestroyPbufferARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_wglQueryPbufferARB = (GLEEPFNWGLQUERYPBUFFERARBPROC) __GLeeGetProcAddress("wglQueryPbufferARB"))!=0) nLinked++;
+#endif
+    if (nLinked==5) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_WGL_ARB_render_texture(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_WGL_ARB_render_texture
+    if ((GLeeFuncPtr_wglBindTexImageARB = (GLEEPFNWGLBINDTEXIMAGEARBPROC) __GLeeGetProcAddress("wglBindTexImageARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_wglReleaseTexImageARB = (GLEEPFNWGLRELEASETEXIMAGEARBPROC) __GLeeGetProcAddress("wglReleaseTexImageARB"))!=0) nLinked++;
+    if ((GLeeFuncPtr_wglSetPbufferAttribARB = (GLEEPFNWGLSETPBUFFERATTRIBARBPROC) __GLeeGetProcAddress("wglSetPbufferAttribARB"))!=0) nLinked++;
+#endif
+    if (nLinked==3) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_WGL_ARB_pixel_format_float(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_WGL_ARB_framebuffer_sRGB(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_WGL_ARB_create_context(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_WGL_ARB_create_context
+    if ((GLeeFuncPtr_wglCreateContextAttribsARB = (GLEEPFNWGLCREATECONTEXTATTRIBSARBPROC) __GLeeGetProcAddress("wglCreateContextAttribsARB"))!=0) nLinked++;
+#endif
+    if (nLinked==1) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_WGL_ARB_create_context_profile(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_WGL_ARB_create_context_robustness(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_WGL_EXT_make_current_read(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_WGL_EXT_make_current_read
+    if ((GLeeFuncPtr_wglMakeContextCurrentEXT = (GLEEPFNWGLMAKECONTEXTCURRENTEXTPROC) __GLeeGetProcAddress("wglMakeContextCurrentEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_wglGetCurrentReadDCEXT = (GLEEPFNWGLGETCURRENTREADDCEXTPROC) __GLeeGetProcAddress("wglGetCurrentReadDCEXT"))!=0) nLinked++;
+#endif
+    if (nLinked==2) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_WGL_EXT_pixel_format(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_WGL_EXT_pixel_format
+    if ((GLeeFuncPtr_wglGetPixelFormatAttribivEXT = (GLEEPFNWGLGETPIXELFORMATATTRIBIVEXTPROC) __GLeeGetProcAddress("wglGetPixelFormatAttribivEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_wglGetPixelFormatAttribfvEXT = (GLEEPFNWGLGETPIXELFORMATATTRIBFVEXTPROC) __GLeeGetProcAddress("wglGetPixelFormatAttribfvEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_wglChoosePixelFormatEXT = (GLEEPFNWGLCHOOSEPIXELFORMATEXTPROC) __GLeeGetProcAddress("wglChoosePixelFormatEXT"))!=0) nLinked++;
+#endif
+    if (nLinked==3) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_WGL_EXT_pbuffer(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_WGL_EXT_pbuffer
+    if ((GLeeFuncPtr_wglCreatePbufferEXT = (GLEEPFNWGLCREATEPBUFFEREXTPROC) __GLeeGetProcAddress("wglCreatePbufferEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_wglGetPbufferDCEXT = (GLEEPFNWGLGETPBUFFERDCEXTPROC) __GLeeGetProcAddress("wglGetPbufferDCEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_wglReleasePbufferDCEXT = (GLEEPFNWGLRELEASEPBUFFERDCEXTPROC) __GLeeGetProcAddress("wglReleasePbufferDCEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_wglDestroyPbufferEXT = (GLEEPFNWGLDESTROYPBUFFEREXTPROC) __GLeeGetProcAddress("wglDestroyPbufferEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_wglQueryPbufferEXT = (GLEEPFNWGLQUERYPBUFFEREXTPROC) __GLeeGetProcAddress("wglQueryPbufferEXT"))!=0) nLinked++;
+#endif
+    if (nLinked==5) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_WGL_EXT_depth_float(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_WGL_3DFX_multisample(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_WGL_EXT_multisample(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_WGL_I3D_digital_video_control(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_WGL_I3D_digital_video_control
+    if ((GLeeFuncPtr_wglGetDigitalVideoParametersI3D = (GLEEPFNWGLGETDIGITALVIDEOPARAMETERSI3DPROC) __GLeeGetProcAddress("wglGetDigitalVideoParametersI3D"))!=0) nLinked++;
+    if ((GLeeFuncPtr_wglSetDigitalVideoParametersI3D = (GLEEPFNWGLSETDIGITALVIDEOPARAMETERSI3DPROC) __GLeeGetProcAddress("wglSetDigitalVideoParametersI3D"))!=0) nLinked++;
+#endif
+    if (nLinked==2) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_WGL_I3D_gamma(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_WGL_I3D_gamma
+    if ((GLeeFuncPtr_wglGetGammaTableParametersI3D = (GLEEPFNWGLGETGAMMATABLEPARAMETERSI3DPROC) __GLeeGetProcAddress("wglGetGammaTableParametersI3D"))!=0) nLinked++;
+    if ((GLeeFuncPtr_wglSetGammaTableParametersI3D = (GLEEPFNWGLSETGAMMATABLEPARAMETERSI3DPROC) __GLeeGetProcAddress("wglSetGammaTableParametersI3D"))!=0) nLinked++;
+    if ((GLeeFuncPtr_wglGetGammaTableI3D = (GLEEPFNWGLGETGAMMATABLEI3DPROC) __GLeeGetProcAddress("wglGetGammaTableI3D"))!=0) nLinked++;
+    if ((GLeeFuncPtr_wglSetGammaTableI3D = (GLEEPFNWGLSETGAMMATABLEI3DPROC) __GLeeGetProcAddress("wglSetGammaTableI3D"))!=0) nLinked++;
+#endif
+    if (nLinked==4) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_WGL_I3D_genlock(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_WGL_I3D_genlock
+    if ((GLeeFuncPtr_wglEnableGenlockI3D = (GLEEPFNWGLENABLEGENLOCKI3DPROC) __GLeeGetProcAddress("wglEnableGenlockI3D"))!=0) nLinked++;
+    if ((GLeeFuncPtr_wglDisableGenlockI3D = (GLEEPFNWGLDISABLEGENLOCKI3DPROC) __GLeeGetProcAddress("wglDisableGenlockI3D"))!=0) nLinked++;
+    if ((GLeeFuncPtr_wglIsEnabledGenlockI3D = (GLEEPFNWGLISENABLEDGENLOCKI3DPROC) __GLeeGetProcAddress("wglIsEnabledGenlockI3D"))!=0) nLinked++;
+    if ((GLeeFuncPtr_wglGenlockSourceI3D = (GLEEPFNWGLGENLOCKSOURCEI3DPROC) __GLeeGetProcAddress("wglGenlockSourceI3D"))!=0) nLinked++;
+    if ((GLeeFuncPtr_wglGetGenlockSourceI3D = (GLEEPFNWGLGETGENLOCKSOURCEI3DPROC) __GLeeGetProcAddress("wglGetGenlockSourceI3D"))!=0) nLinked++;
+    if ((GLeeFuncPtr_wglGenlockSourceEdgeI3D = (GLEEPFNWGLGENLOCKSOURCEEDGEI3DPROC) __GLeeGetProcAddress("wglGenlockSourceEdgeI3D"))!=0) nLinked++;
+    if ((GLeeFuncPtr_wglGetGenlockSourceEdgeI3D = (GLEEPFNWGLGETGENLOCKSOURCEEDGEI3DPROC) __GLeeGetProcAddress("wglGetGenlockSourceEdgeI3D"))!=0) nLinked++;
+    if ((GLeeFuncPtr_wglGenlockSampleRateI3D = (GLEEPFNWGLGENLOCKSAMPLERATEI3DPROC) __GLeeGetProcAddress("wglGenlockSampleRateI3D"))!=0) nLinked++;
+    if ((GLeeFuncPtr_wglGetGenlockSampleRateI3D = (GLEEPFNWGLGETGENLOCKSAMPLERATEI3DPROC) __GLeeGetProcAddress("wglGetGenlockSampleRateI3D"))!=0) nLinked++;
+    if ((GLeeFuncPtr_wglGenlockSourceDelayI3D = (GLEEPFNWGLGENLOCKSOURCEDELAYI3DPROC) __GLeeGetProcAddress("wglGenlockSourceDelayI3D"))!=0) nLinked++;
+    if ((GLeeFuncPtr_wglGetGenlockSourceDelayI3D = (GLEEPFNWGLGETGENLOCKSOURCEDELAYI3DPROC) __GLeeGetProcAddress("wglGetGenlockSourceDelayI3D"))!=0) nLinked++;
+    if ((GLeeFuncPtr_wglQueryGenlockMaxSourceDelayI3D = (GLEEPFNWGLQUERYGENLOCKMAXSOURCEDELAYI3DPROC) __GLeeGetProcAddress("wglQueryGenlockMaxSourceDelayI3D"))!=0) nLinked++;
+#endif
+    if (nLinked==12) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_WGL_I3D_image_buffer(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_WGL_I3D_image_buffer
+    if ((GLeeFuncPtr_wglCreateImageBufferI3D = (GLEEPFNWGLCREATEIMAGEBUFFERI3DPROC) __GLeeGetProcAddress("wglCreateImageBufferI3D"))!=0) nLinked++;
+    if ((GLeeFuncPtr_wglDestroyImageBufferI3D = (GLEEPFNWGLDESTROYIMAGEBUFFERI3DPROC) __GLeeGetProcAddress("wglDestroyImageBufferI3D"))!=0) nLinked++;
+    if ((GLeeFuncPtr_wglAssociateImageBufferEventsI3D = (GLEEPFNWGLASSOCIATEIMAGEBUFFEREVENTSI3DPROC) __GLeeGetProcAddress("wglAssociateImageBufferEventsI3D"))!=0) nLinked++;
+    if ((GLeeFuncPtr_wglReleaseImageBufferEventsI3D = (GLEEPFNWGLRELEASEIMAGEBUFFEREVENTSI3DPROC) __GLeeGetProcAddress("wglReleaseImageBufferEventsI3D"))!=0) nLinked++;
+#endif
+    if (nLinked==4) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_WGL_I3D_swap_frame_lock(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_WGL_I3D_swap_frame_lock
+    if ((GLeeFuncPtr_wglEnableFrameLockI3D = (GLEEPFNWGLENABLEFRAMELOCKI3DPROC) __GLeeGetProcAddress("wglEnableFrameLockI3D"))!=0) nLinked++;
+    if ((GLeeFuncPtr_wglDisableFrameLockI3D = (GLEEPFNWGLDISABLEFRAMELOCKI3DPROC) __GLeeGetProcAddress("wglDisableFrameLockI3D"))!=0) nLinked++;
+    if ((GLeeFuncPtr_wglIsEnabledFrameLockI3D = (GLEEPFNWGLISENABLEDFRAMELOCKI3DPROC) __GLeeGetProcAddress("wglIsEnabledFrameLockI3D"))!=0) nLinked++;
+    if ((GLeeFuncPtr_wglQueryFrameLockMasterI3D = (GLEEPFNWGLQUERYFRAMELOCKMASTERI3DPROC) __GLeeGetProcAddress("wglQueryFrameLockMasterI3D"))!=0) nLinked++;
+#endif
+    if (nLinked==4) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_WGL_NV_render_depth_texture(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_WGL_NV_render_texture_rectangle(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_WGL_ATI_pixel_format_float(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_WGL_NV_float_buffer(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_WGL_3DL_stereo_control(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_WGL_3DL_stereo_control
+    if ((GLeeFuncPtr_wglSetStereoEmitterState3DL = (GLEEPFNWGLSETSTEREOEMITTERSTATE3DLPROC) __GLeeGetProcAddress("wglSetStereoEmitterState3DL"))!=0) nLinked++;
+#endif
+    if (nLinked==1) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_WGL_EXT_pixel_format_packed_float(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_WGL_EXT_framebuffer_sRGB(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_WGL_NV_present_video(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_WGL_NV_present_video
+    if ((GLeeFuncPtr_wglEnumerateVideoDevicesNV = (GLEEPFNWGLENUMERATEVIDEODEVICESNVPROC) __GLeeGetProcAddress("wglEnumerateVideoDevicesNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_wglBindVideoDeviceNV = (GLEEPFNWGLBINDVIDEODEVICENVPROC) __GLeeGetProcAddress("wglBindVideoDeviceNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_wglQueryCurrentContextNV = (GLEEPFNWGLQUERYCURRENTCONTEXTNVPROC) __GLeeGetProcAddress("wglQueryCurrentContextNV"))!=0) nLinked++;
+#endif
+    if (nLinked==3) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_WGL_NV_swap_group(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_WGL_NV_swap_group
+    if ((GLeeFuncPtr_wglJoinSwapGroupNV = (GLEEPFNWGLJOINSWAPGROUPNVPROC) __GLeeGetProcAddress("wglJoinSwapGroupNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_wglBindSwapBarrierNV = (GLEEPFNWGLBINDSWAPBARRIERNVPROC) __GLeeGetProcAddress("wglBindSwapBarrierNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_wglQuerySwapGroupNV = (GLEEPFNWGLQUERYSWAPGROUPNVPROC) __GLeeGetProcAddress("wglQuerySwapGroupNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_wglQueryMaxSwapGroupsNV = (GLEEPFNWGLQUERYMAXSWAPGROUPSNVPROC) __GLeeGetProcAddress("wglQueryMaxSwapGroupsNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_wglQueryFrameCountNV = (GLEEPFNWGLQUERYFRAMECOUNTNVPROC) __GLeeGetProcAddress("wglQueryFrameCountNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_wglResetFrameCountNV = (GLEEPFNWGLRESETFRAMECOUNTNVPROC) __GLeeGetProcAddress("wglResetFrameCountNV"))!=0) nLinked++;
+#endif
+    if (nLinked==6) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_WGL_NV_gpu_affinity(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_WGL_NV_gpu_affinity
+    if ((GLeeFuncPtr_wglEnumGpusNV = (GLEEPFNWGLENUMGPUSNVPROC) __GLeeGetProcAddress("wglEnumGpusNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_wglEnumGpuDevicesNV = (GLEEPFNWGLENUMGPUDEVICESNVPROC) __GLeeGetProcAddress("wglEnumGpuDevicesNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_wglCreateAffinityDCNV = (GLEEPFNWGLCREATEAFFINITYDCNVPROC) __GLeeGetProcAddress("wglCreateAffinityDCNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_wglEnumGpusFromAffinityDCNV = (GLEEPFNWGLENUMGPUSFROMAFFINITYDCNVPROC) __GLeeGetProcAddress("wglEnumGpusFromAffinityDCNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_wglDeleteDCNV = (GLEEPFNWGLDELETEDCNVPROC) __GLeeGetProcAddress("wglDeleteDCNV"))!=0) nLinked++;
+#endif
+    if (nLinked==5) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_WGL_AMD_gpu_association(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_WGL_AMD_gpu_association
+    if ((GLeeFuncPtr_wglGetGPUIDsAMD = (GLEEPFNWGLGETGPUIDSAMDPROC) __GLeeGetProcAddress("wglGetGPUIDsAMD"))!=0) nLinked++;
+    if ((GLeeFuncPtr_wglGetGPUInfoAMD = (GLEEPFNWGLGETGPUINFOAMDPROC) __GLeeGetProcAddress("wglGetGPUInfoAMD"))!=0) nLinked++;
+    if ((GLeeFuncPtr_wglGetContextGPUIDAMD = (GLEEPFNWGLGETCONTEXTGPUIDAMDPROC) __GLeeGetProcAddress("wglGetContextGPUIDAMD"))!=0) nLinked++;
+    if ((GLeeFuncPtr_wglCreateAssociatedContextAMD = (GLEEPFNWGLCREATEASSOCIATEDCONTEXTAMDPROC) __GLeeGetProcAddress("wglCreateAssociatedContextAMD"))!=0) nLinked++;
+    if ((GLeeFuncPtr_wglCreateAssociatedContextAttribsAMD = (GLEEPFNWGLCREATEASSOCIATEDCONTEXTATTRIBSAMDPROC) __GLeeGetProcAddress("wglCreateAssociatedContextAttribsAMD"))!=0) nLinked++;
+    if ((GLeeFuncPtr_wglDeleteAssociatedContextAMD = (GLEEPFNWGLDELETEASSOCIATEDCONTEXTAMDPROC) __GLeeGetProcAddress("wglDeleteAssociatedContextAMD"))!=0) nLinked++;
+    if ((GLeeFuncPtr_wglMakeAssociatedContextCurrentAMD = (GLEEPFNWGLMAKEASSOCIATEDCONTEXTCURRENTAMDPROC) __GLeeGetProcAddress("wglMakeAssociatedContextCurrentAMD"))!=0) nLinked++;
+    if ((GLeeFuncPtr_wglGetCurrentAssociatedContextAMD = (GLEEPFNWGLGETCURRENTASSOCIATEDCONTEXTAMDPROC) __GLeeGetProcAddress("wglGetCurrentAssociatedContextAMD"))!=0) nLinked++;
+    if ((GLeeFuncPtr_wglBlitContextFramebufferAMD = (GLEEPFNWGLBLITCONTEXTFRAMEBUFFERAMDPROC) __GLeeGetProcAddress("wglBlitContextFramebufferAMD"))!=0) nLinked++;
+#endif
+    if (nLinked==9) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_WGL_NV_copy_image(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_WGL_NV_copy_image
+    if ((GLeeFuncPtr_wglCopyImageSubDataNV = (GLEEPFNWGLCOPYIMAGESUBDATANVPROC) __GLeeGetProcAddress("wglCopyImageSubDataNV"))!=0) nLinked++;
+#endif
+    if (nLinked==1) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_WGL_NV_multisample_coverage(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_WGL_EXT_create_context_es2_profile(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_WGL_NV_DX_interop(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_WGL_NV_DX_interop
+    if ((GLeeFuncPtr_wglDXSetResourceShareHandleNV = (GLEEPFNWGLDXSETRESOURCESHAREHANDLENVPROC) __GLeeGetProcAddress("wglDXSetResourceShareHandleNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_wglDXOpenDeviceNV = (GLEEPFNWGLDXOPENDEVICENVPROC) __GLeeGetProcAddress("wglDXOpenDeviceNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_wglDXCloseDeviceNV = (GLEEPFNWGLDXCLOSEDEVICENVPROC) __GLeeGetProcAddress("wglDXCloseDeviceNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_wglDXRegisterObjectNV = (GLEEPFNWGLDXREGISTEROBJECTNVPROC) __GLeeGetProcAddress("wglDXRegisterObjectNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_wglDXUnregisterObjectNV = (GLEEPFNWGLDXUNREGISTEROBJECTNVPROC) __GLeeGetProcAddress("wglDXUnregisterObjectNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_wglDXObjectAccessNV = (GLEEPFNWGLDXOBJECTACCESSNVPROC) __GLeeGetProcAddress("wglDXObjectAccessNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_wglDXLockObjectsNV = (GLEEPFNWGLDXLOCKOBJECTSNVPROC) __GLeeGetProcAddress("wglDXLockObjectsNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_wglDXUnlockObjectsNV = (GLEEPFNWGLDXUNLOCKOBJECTSNVPROC) __GLeeGetProcAddress("wglDXUnlockObjectsNV"))!=0) nLinked++;
+#endif
+    if (nLinked==8) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_WGL_EXT_display_color_table(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_WGL_EXT_display_color_table
+    if ((GLeeFuncPtr_wglCreateDisplayColorTableEXT = (GLEEPFNWGLCREATEDISPLAYCOLORTABLEEXTPROC) __GLeeGetProcAddress("wglCreateDisplayColorTableEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_wglLoadDisplayColorTableEXT = (GLEEPFNWGLLOADDISPLAYCOLORTABLEEXTPROC) __GLeeGetProcAddress("wglLoadDisplayColorTableEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_wglBindDisplayColorTableEXT = (GLEEPFNWGLBINDDISPLAYCOLORTABLEEXTPROC) __GLeeGetProcAddress("wglBindDisplayColorTableEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_wglDestroyDisplayColorTableEXT = (GLEEPFNWGLDESTROYDISPLAYCOLORTABLEEXTPROC) __GLeeGetProcAddress("wglDestroyDisplayColorTableEXT"))!=0) nLinked++;
+#endif
+    if (nLinked==4) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_WGL_EXT_extensions_string(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_WGL_EXT_extensions_string
+    if ((GLeeFuncPtr_wglGetExtensionsStringEXT = (GLEEPFNWGLGETEXTENSIONSSTRINGEXTPROC) __GLeeGetProcAddress("wglGetExtensionsStringEXT"))!=0) nLinked++;
+#endif
+    if (nLinked==1) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_WGL_EXT_swap_control(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_WGL_EXT_swap_control
+    if ((GLeeFuncPtr_wglSwapIntervalEXT = (GLEEPFNWGLSWAPINTERVALEXTPROC) __GLeeGetProcAddress("wglSwapIntervalEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_wglGetSwapIntervalEXT = (GLEEPFNWGLGETSWAPINTERVALEXTPROC) __GLeeGetProcAddress("wglGetSwapIntervalEXT"))!=0) nLinked++;
+#endif
+    if (nLinked==2) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_WGL_NV_vertex_array_range(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_WGL_NV_vertex_array_range
+    if ((GLeeFuncPtr_wglAllocateMemoryNV = (GLEEPFNWGLALLOCATEMEMORYNVPROC) __GLeeGetProcAddress("wglAllocateMemoryNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_wglFreeMemoryNV = (GLEEPFNWGLFREEMEMORYNVPROC) __GLeeGetProcAddress("wglFreeMemoryNV"))!=0) nLinked++;
+#endif
+    if (nLinked==2) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_WGL_OML_sync_control(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_WGL_OML_sync_control
+    if ((GLeeFuncPtr_wglGetSyncValuesOML = (GLEEPFNWGLGETSYNCVALUESOMLPROC) __GLeeGetProcAddress("wglGetSyncValuesOML"))!=0) nLinked++;
+    if ((GLeeFuncPtr_wglGetMscRateOML = (GLEEPFNWGLGETMSCRATEOMLPROC) __GLeeGetProcAddress("wglGetMscRateOML"))!=0) nLinked++;
+    if ((GLeeFuncPtr_wglSwapBuffersMscOML = (GLEEPFNWGLSWAPBUFFERSMSCOMLPROC) __GLeeGetProcAddress("wglSwapBuffersMscOML"))!=0) nLinked++;
+    if ((GLeeFuncPtr_wglSwapLayerBuffersMscOML = (GLEEPFNWGLSWAPLAYERBUFFERSMSCOMLPROC) __GLeeGetProcAddress("wglSwapLayerBuffersMscOML"))!=0) nLinked++;
+    if ((GLeeFuncPtr_wglWaitForMscOML = (GLEEPFNWGLWAITFORMSCOMLPROC) __GLeeGetProcAddress("wglWaitForMscOML"))!=0) nLinked++;
+    if ((GLeeFuncPtr_wglWaitForSbcOML = (GLEEPFNWGLWAITFORSBCOMLPROC) __GLeeGetProcAddress("wglWaitForSbcOML"))!=0) nLinked++;
+#endif
+    if (nLinked==6) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_WGL_I3D_swap_frame_usage(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_WGL_I3D_swap_frame_usage
+    if ((GLeeFuncPtr_wglGetFrameUsageI3D = (GLEEPFNWGLGETFRAMEUSAGEI3DPROC) __GLeeGetProcAddress("wglGetFrameUsageI3D"))!=0) nLinked++;
+    if ((GLeeFuncPtr_wglBeginFrameTrackingI3D = (GLEEPFNWGLBEGINFRAMETRACKINGI3DPROC) __GLeeGetProcAddress("wglBeginFrameTrackingI3D"))!=0) nLinked++;
+    if ((GLeeFuncPtr_wglEndFrameTrackingI3D = (GLEEPFNWGLENDFRAMETRACKINGI3DPROC) __GLeeGetProcAddress("wglEndFrameTrackingI3D"))!=0) nLinked++;
+    if ((GLeeFuncPtr_wglQueryFrameTrackingI3D = (GLEEPFNWGLQUERYFRAMETRACKINGI3DPROC) __GLeeGetProcAddress("wglQueryFrameTrackingI3D"))!=0) nLinked++;
+#endif
+    if (nLinked==4) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_WGL_NV_video_output(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_WGL_NV_video_output
+    if ((GLeeFuncPtr_wglGetVideoDeviceNV = (GLEEPFNWGLGETVIDEODEVICENVPROC) __GLeeGetProcAddress("wglGetVideoDeviceNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_wglReleaseVideoDeviceNV = (GLEEPFNWGLRELEASEVIDEODEVICENVPROC) __GLeeGetProcAddress("wglReleaseVideoDeviceNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_wglBindVideoImageNV = (GLEEPFNWGLBINDVIDEOIMAGENVPROC) __GLeeGetProcAddress("wglBindVideoImageNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_wglReleaseVideoImageNV = (GLEEPFNWGLRELEASEVIDEOIMAGENVPROC) __GLeeGetProcAddress("wglReleaseVideoImageNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_wglSendPbufferToVideoNV = (GLEEPFNWGLSENDPBUFFERTOVIDEONVPROC) __GLeeGetProcAddress("wglSendPbufferToVideoNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_wglGetVideoInfoNV = (GLEEPFNWGLGETVIDEOINFONVPROC) __GLeeGetProcAddress("wglGetVideoInfoNV"))!=0) nLinked++;
+#endif
+    if (nLinked==6) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLEE_LINK_FUNCTION __GLeeWGLLoadFunction[45];
+
+void initWGLLoadFunctions(void)
+{
+    __GLeeWGLLoadFunction[0]=__GLeeLink_WGL_ARB_buffer_region;
+    __GLeeWGLLoadFunction[1]=__GLeeLink_WGL_ARB_multisample;
+    __GLeeWGLLoadFunction[2]=__GLeeLink_WGL_ARB_extensions_string;
+    __GLeeWGLLoadFunction[3]=__GLeeLink_WGL_ARB_pixel_format;
+    __GLeeWGLLoadFunction[4]=__GLeeLink_WGL_ARB_make_current_read;
+    __GLeeWGLLoadFunction[5]=__GLeeLink_WGL_ARB_pbuffer;
+    __GLeeWGLLoadFunction[6]=__GLeeLink_WGL_ARB_render_texture;
+    __GLeeWGLLoadFunction[7]=__GLeeLink_WGL_ARB_pixel_format_float;
+    __GLeeWGLLoadFunction[8]=__GLeeLink_WGL_ARB_framebuffer_sRGB;
+    __GLeeWGLLoadFunction[9]=__GLeeLink_WGL_ARB_create_context;
+    __GLeeWGLLoadFunction[10]=__GLeeLink_WGL_ARB_create_context_profile;
+    __GLeeWGLLoadFunction[11]=__GLeeLink_WGL_ARB_create_context_robustness;
+    __GLeeWGLLoadFunction[12]=__GLeeLink_WGL_EXT_make_current_read;
+    __GLeeWGLLoadFunction[13]=__GLeeLink_WGL_EXT_pixel_format;
+    __GLeeWGLLoadFunction[14]=__GLeeLink_WGL_EXT_pbuffer;
+    __GLeeWGLLoadFunction[15]=__GLeeLink_WGL_EXT_depth_float;
+    __GLeeWGLLoadFunction[16]=__GLeeLink_WGL_3DFX_multisample;
+    __GLeeWGLLoadFunction[17]=__GLeeLink_WGL_EXT_multisample;
+    __GLeeWGLLoadFunction[18]=__GLeeLink_WGL_I3D_digital_video_control;
+    __GLeeWGLLoadFunction[19]=__GLeeLink_WGL_I3D_gamma;
+    __GLeeWGLLoadFunction[20]=__GLeeLink_WGL_I3D_genlock;
+    __GLeeWGLLoadFunction[21]=__GLeeLink_WGL_I3D_image_buffer;
+    __GLeeWGLLoadFunction[22]=__GLeeLink_WGL_I3D_swap_frame_lock;
+    __GLeeWGLLoadFunction[23]=__GLeeLink_WGL_NV_render_depth_texture;
+    __GLeeWGLLoadFunction[24]=__GLeeLink_WGL_NV_render_texture_rectangle;
+    __GLeeWGLLoadFunction[25]=__GLeeLink_WGL_ATI_pixel_format_float;
+    __GLeeWGLLoadFunction[26]=__GLeeLink_WGL_NV_float_buffer;
+    __GLeeWGLLoadFunction[27]=__GLeeLink_WGL_3DL_stereo_control;
+    __GLeeWGLLoadFunction[28]=__GLeeLink_WGL_EXT_pixel_format_packed_float;
+    __GLeeWGLLoadFunction[29]=__GLeeLink_WGL_EXT_framebuffer_sRGB;
+    __GLeeWGLLoadFunction[30]=__GLeeLink_WGL_NV_present_video;
+    __GLeeWGLLoadFunction[31]=__GLeeLink_WGL_NV_swap_group;
+    __GLeeWGLLoadFunction[32]=__GLeeLink_WGL_NV_gpu_affinity;
+    __GLeeWGLLoadFunction[33]=__GLeeLink_WGL_AMD_gpu_association;
+    __GLeeWGLLoadFunction[34]=__GLeeLink_WGL_NV_copy_image;
+    __GLeeWGLLoadFunction[35]=__GLeeLink_WGL_NV_multisample_coverage;
+    __GLeeWGLLoadFunction[36]=__GLeeLink_WGL_EXT_create_context_es2_profile;
+    __GLeeWGLLoadFunction[37]=__GLeeLink_WGL_NV_DX_interop;
+    __GLeeWGLLoadFunction[38]=__GLeeLink_WGL_EXT_display_color_table;
+    __GLeeWGLLoadFunction[39]=__GLeeLink_WGL_EXT_extensions_string;
+    __GLeeWGLLoadFunction[40]=__GLeeLink_WGL_EXT_swap_control;
+    __GLeeWGLLoadFunction[41]=__GLeeLink_WGL_NV_vertex_array_range;
+    __GLeeWGLLoadFunction[42]=__GLeeLink_WGL_OML_sync_control;
+    __GLeeWGLLoadFunction[43]=__GLeeLink_WGL_I3D_swap_frame_usage;
+    __GLeeWGLLoadFunction[44]=__GLeeLink_WGL_NV_video_output;
+}
+
+#elif defined(__APPLE__) || defined(__APPLE_CC__)
+#else /* Linux */
+GLuint __GLeeLink_GLX_VERSION_1_3(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GLX_VERSION_1_3
+    if ((GLeeFuncPtr_glXGetFBConfigs = (GLEEPFNGLXGETFBCONFIGSPROC) __GLeeGetProcAddress("glXGetFBConfigs"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glXChooseFBConfig = (GLEEPFNGLXCHOOSEFBCONFIGPROC) __GLeeGetProcAddress("glXChooseFBConfig"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glXGetFBConfigAttrib = (GLEEPFNGLXGETFBCONFIGATTRIBPROC) __GLeeGetProcAddress("glXGetFBConfigAttrib"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glXGetVisualFromFBConfig = (GLEEPFNGLXGETVISUALFROMFBCONFIGPROC) __GLeeGetProcAddress("glXGetVisualFromFBConfig"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glXCreateWindow = (GLEEPFNGLXCREATEWINDOWPROC) __GLeeGetProcAddress("glXCreateWindow"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glXDestroyWindow = (GLEEPFNGLXDESTROYWINDOWPROC) __GLeeGetProcAddress("glXDestroyWindow"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glXCreatePixmap = (GLEEPFNGLXCREATEPIXMAPPROC) __GLeeGetProcAddress("glXCreatePixmap"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glXDestroyPixmap = (GLEEPFNGLXDESTROYPIXMAPPROC) __GLeeGetProcAddress("glXDestroyPixmap"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glXCreatePbuffer = (GLEEPFNGLXCREATEPBUFFERPROC) __GLeeGetProcAddress("glXCreatePbuffer"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glXDestroyPbuffer = (GLEEPFNGLXDESTROYPBUFFERPROC) __GLeeGetProcAddress("glXDestroyPbuffer"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glXQueryDrawable = (GLEEPFNGLXQUERYDRAWABLEPROC) __GLeeGetProcAddress("glXQueryDrawable"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glXCreateNewContext = (GLEEPFNGLXCREATENEWCONTEXTPROC) __GLeeGetProcAddress("glXCreateNewContext"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glXMakeContextCurrent = (GLEEPFNGLXMAKECONTEXTCURRENTPROC) __GLeeGetProcAddress("glXMakeContextCurrent"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glXGetCurrentReadDrawable = (GLEEPFNGLXGETCURRENTREADDRAWABLEPROC) __GLeeGetProcAddress("glXGetCurrentReadDrawable"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glXGetCurrentDisplay = (GLEEPFNGLXGETCURRENTDISPLAYPROC) __GLeeGetProcAddress("glXGetCurrentDisplay"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glXQueryContext = (GLEEPFNGLXQUERYCONTEXTPROC) __GLeeGetProcAddress("glXQueryContext"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glXSelectEvent = (GLEEPFNGLXSELECTEVENTPROC) __GLeeGetProcAddress("glXSelectEvent"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glXGetSelectedEvent = (GLEEPFNGLXGETSELECTEDEVENTPROC) __GLeeGetProcAddress("glXGetSelectedEvent"))!=0) nLinked++;
+#endif
+    if (nLinked==18) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GLX_VERSION_1_4(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GLX_VERSION_1_4
+    if ((GLeeFuncPtr_glXGetProcAddress = (GLEEPFNGLXGETPROCADDRESSPROC) __GLeeGetProcAddress("glXGetProcAddress"))!=0) nLinked++;
+#endif
+    if (nLinked==1) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GLX_ARB_multisample(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GLX_ARB_vertex_buffer_object(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GLX_ARB_fbconfig_float(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GLX_ARB_framebuffer_sRGB(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GLX_ARB_create_context(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GLX_ARB_create_context
+    if ((GLeeFuncPtr_glXCreateContextAttribsARB = (GLEEPFNGLXCREATECONTEXTATTRIBSARBPROC) __GLeeGetProcAddress("glXCreateContextAttribsARB"))!=0) nLinked++;
+#endif
+    if (nLinked==1) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GLX_ARB_create_context_profile(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GLX_ARB_create_context_robustness(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GLX_SGIS_multisample(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GLX_EXT_visual_info(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GLX_SGI_swap_control(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GLX_SGI_swap_control
+    if ((GLeeFuncPtr_glXSwapIntervalSGI = (GLEEPFNGLXSWAPINTERVALSGIPROC) __GLeeGetProcAddress("glXSwapIntervalSGI"))!=0) nLinked++;
+#endif
+    if (nLinked==1) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GLX_SGI_video_sync(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GLX_SGI_video_sync
+    if ((GLeeFuncPtr_glXGetVideoSyncSGI = (GLEEPFNGLXGETVIDEOSYNCSGIPROC) __GLeeGetProcAddress("glXGetVideoSyncSGI"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glXWaitVideoSyncSGI = (GLEEPFNGLXWAITVIDEOSYNCSGIPROC) __GLeeGetProcAddress("glXWaitVideoSyncSGI"))!=0) nLinked++;
+#endif
+    if (nLinked==2) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GLX_SGI_make_current_read(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GLX_SGI_make_current_read
+    if ((GLeeFuncPtr_glXMakeCurrentReadSGI = (GLEEPFNGLXMAKECURRENTREADSGIPROC) __GLeeGetProcAddress("glXMakeCurrentReadSGI"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glXGetCurrentReadDrawableSGI = (GLEEPFNGLXGETCURRENTREADDRAWABLESGIPROC) __GLeeGetProcAddress("glXGetCurrentReadDrawableSGI"))!=0) nLinked++;
+#endif
+    if (nLinked==2) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GLX_EXT_visual_rating(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GLX_EXT_import_context(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GLX_EXT_import_context
+    if ((GLeeFuncPtr_glXGetCurrentDisplayEXT = (GLEEPFNGLXGETCURRENTDISPLAYEXTPROC) __GLeeGetProcAddress("glXGetCurrentDisplayEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glXQueryContextInfoEXT = (GLEEPFNGLXQUERYCONTEXTINFOEXTPROC) __GLeeGetProcAddress("glXQueryContextInfoEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glXGetContextIDEXT = (GLEEPFNGLXGETCONTEXTIDEXTPROC) __GLeeGetProcAddress("glXGetContextIDEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glXImportContextEXT = (GLEEPFNGLXIMPORTCONTEXTEXTPROC) __GLeeGetProcAddress("glXImportContextEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glXFreeContextEXT = (GLEEPFNGLXFREECONTEXTEXTPROC) __GLeeGetProcAddress("glXFreeContextEXT"))!=0) nLinked++;
+#endif
+    if (nLinked==5) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GLX_SGIX_fbconfig(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GLX_SGIX_fbconfig
+    if ((GLeeFuncPtr_glXGetFBConfigAttribSGIX = (GLEEPFNGLXGETFBCONFIGATTRIBSGIXPROC) __GLeeGetProcAddress("glXGetFBConfigAttribSGIX"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glXChooseFBConfigSGIX = (GLEEPFNGLXCHOOSEFBCONFIGSGIXPROC) __GLeeGetProcAddress("glXChooseFBConfigSGIX"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glXCreateGLXPixmapWithConfigSGIX = (GLEEPFNGLXCREATEGLXPIXMAPWITHCONFIGSGIXPROC) __GLeeGetProcAddress("glXCreateGLXPixmapWithConfigSGIX"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glXCreateContextWithConfigSGIX = (GLEEPFNGLXCREATECONTEXTWITHCONFIGSGIXPROC) __GLeeGetProcAddress("glXCreateContextWithConfigSGIX"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glXGetVisualFromFBConfigSGIX = (GLEEPFNGLXGETVISUALFROMFBCONFIGSGIXPROC) __GLeeGetProcAddress("glXGetVisualFromFBConfigSGIX"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glXGetFBConfigFromVisualSGIX = (GLEEPFNGLXGETFBCONFIGFROMVISUALSGIXPROC) __GLeeGetProcAddress("glXGetFBConfigFromVisualSGIX"))!=0) nLinked++;
+#endif
+    if (nLinked==6) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GLX_SGIX_pbuffer(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GLX_SGIX_pbuffer
+    if ((GLeeFuncPtr_glXCreateGLXPbufferSGIX = (GLEEPFNGLXCREATEGLXPBUFFERSGIXPROC) __GLeeGetProcAddress("glXCreateGLXPbufferSGIX"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glXDestroyGLXPbufferSGIX = (GLEEPFNGLXDESTROYGLXPBUFFERSGIXPROC) __GLeeGetProcAddress("glXDestroyGLXPbufferSGIX"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glXQueryGLXPbufferSGIX = (GLEEPFNGLXQUERYGLXPBUFFERSGIXPROC) __GLeeGetProcAddress("glXQueryGLXPbufferSGIX"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glXSelectEventSGIX = (GLEEPFNGLXSELECTEVENTSGIXPROC) __GLeeGetProcAddress("glXSelectEventSGIX"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glXGetSelectedEventSGIX = (GLEEPFNGLXGETSELECTEDEVENTSGIXPROC) __GLeeGetProcAddress("glXGetSelectedEventSGIX"))!=0) nLinked++;
+#endif
+    if (nLinked==5) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GLX_SGI_cushion(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GLX_SGI_cushion
+    if ((GLeeFuncPtr_glXCushionSGI = (GLEEPFNGLXCUSHIONSGIPROC) __GLeeGetProcAddress("glXCushionSGI"))!=0) nLinked++;
+#endif
+    if (nLinked==1) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GLX_SGIX_video_resize(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GLX_SGIX_video_resize
+    if ((GLeeFuncPtr_glXBindChannelToWindowSGIX = (GLEEPFNGLXBINDCHANNELTOWINDOWSGIXPROC) __GLeeGetProcAddress("glXBindChannelToWindowSGIX"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glXChannelRectSGIX = (GLEEPFNGLXCHANNELRECTSGIXPROC) __GLeeGetProcAddress("glXChannelRectSGIX"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glXQueryChannelRectSGIX = (GLEEPFNGLXQUERYCHANNELRECTSGIXPROC) __GLeeGetProcAddress("glXQueryChannelRectSGIX"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glXQueryChannelDeltasSGIX = (GLEEPFNGLXQUERYCHANNELDELTASSGIXPROC) __GLeeGetProcAddress("glXQueryChannelDeltasSGIX"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glXChannelRectSyncSGIX = (GLEEPFNGLXCHANNELRECTSYNCSGIXPROC) __GLeeGetProcAddress("glXChannelRectSyncSGIX"))!=0) nLinked++;
+#endif
+    if (nLinked==5) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GLX_SGIX_swap_group(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GLX_SGIX_swap_group
+    if ((GLeeFuncPtr_glXJoinSwapGroupSGIX = (GLEEPFNGLXJOINSWAPGROUPSGIXPROC) __GLeeGetProcAddress("glXJoinSwapGroupSGIX"))!=0) nLinked++;
+#endif
+    if (nLinked==1) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GLX_SGIX_swap_barrier(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GLX_SGIX_swap_barrier
+    if ((GLeeFuncPtr_glXBindSwapBarrierSGIX = (GLEEPFNGLXBINDSWAPBARRIERSGIXPROC) __GLeeGetProcAddress("glXBindSwapBarrierSGIX"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glXQueryMaxSwapBarriersSGIX = (GLEEPFNGLXQUERYMAXSWAPBARRIERSSGIXPROC) __GLeeGetProcAddress("glXQueryMaxSwapBarriersSGIX"))!=0) nLinked++;
+#endif
+    if (nLinked==2) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GLX_SGIS_blended_overlay(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GLX_SGIS_shared_multisample(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GLX_SUN_get_transparent_index(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GLX_SUN_get_transparent_index
+    if ((GLeeFuncPtr_glXGetTransparentIndexSUN = (GLEEPFNGLXGETTRANSPARENTINDEXSUNPROC) __GLeeGetProcAddress("glXGetTransparentIndexSUN"))!=0) nLinked++;
+#endif
+    if (nLinked==1) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GLX_3DFX_multisample(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GLX_MESA_copy_sub_buffer(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GLX_MESA_copy_sub_buffer
+    if ((GLeeFuncPtr_glXCopySubBufferMESA = (GLEEPFNGLXCOPYSUBBUFFERMESAPROC) __GLeeGetProcAddress("glXCopySubBufferMESA"))!=0) nLinked++;
+#endif
+    if (nLinked==1) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GLX_MESA_pixmap_colormap(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GLX_MESA_pixmap_colormap
+    if ((GLeeFuncPtr_glXCreateGLXPixmapMESA = (GLEEPFNGLXCREATEGLXPIXMAPMESAPROC) __GLeeGetProcAddress("glXCreateGLXPixmapMESA"))!=0) nLinked++;
+#endif
+    if (nLinked==1) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GLX_MESA_release_buffers(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GLX_MESA_release_buffers
+    if ((GLeeFuncPtr_glXReleaseBuffersMESA = (GLEEPFNGLXRELEASEBUFFERSMESAPROC) __GLeeGetProcAddress("glXReleaseBuffersMESA"))!=0) nLinked++;
+#endif
+    if (nLinked==1) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GLX_MESA_set_3dfx_mode(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GLX_MESA_set_3dfx_mode
+    if ((GLeeFuncPtr_glXSet3DfxModeMESA = (GLEEPFNGLXSET3DFXMODEMESAPROC) __GLeeGetProcAddress("glXSet3DfxModeMESA"))!=0) nLinked++;
+#endif
+    if (nLinked==1) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GLX_SGIX_visual_select_group(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GLX_OML_swap_method(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GLX_OML_sync_control(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GLX_OML_sync_control
+    if ((GLeeFuncPtr_glXGetSyncValuesOML = (GLEEPFNGLXGETSYNCVALUESOMLPROC) __GLeeGetProcAddress("glXGetSyncValuesOML"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glXGetMscRateOML = (GLEEPFNGLXGETMSCRATEOMLPROC) __GLeeGetProcAddress("glXGetMscRateOML"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glXSwapBuffersMscOML = (GLEEPFNGLXSWAPBUFFERSMSCOMLPROC) __GLeeGetProcAddress("glXSwapBuffersMscOML"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glXWaitForMscOML = (GLEEPFNGLXWAITFORMSCOMLPROC) __GLeeGetProcAddress("glXWaitForMscOML"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glXWaitForSbcOML = (GLEEPFNGLXWAITFORSBCOMLPROC) __GLeeGetProcAddress("glXWaitForSbcOML"))!=0) nLinked++;
+#endif
+    if (nLinked==5) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GLX_NV_float_buffer(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GLX_SGIX_hyperpipe(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GLX_SGIX_hyperpipe
+    if ((GLeeFuncPtr_glXQueryHyperpipeNetworkSGIX = (GLEEPFNGLXQUERYHYPERPIPENETWORKSGIXPROC) __GLeeGetProcAddress("glXQueryHyperpipeNetworkSGIX"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glXHyperpipeConfigSGIX = (GLEEPFNGLXHYPERPIPECONFIGSGIXPROC) __GLeeGetProcAddress("glXHyperpipeConfigSGIX"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glXQueryHyperpipeConfigSGIX = (GLEEPFNGLXQUERYHYPERPIPECONFIGSGIXPROC) __GLeeGetProcAddress("glXQueryHyperpipeConfigSGIX"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glXDestroyHyperpipeConfigSGIX = (GLEEPFNGLXDESTROYHYPERPIPECONFIGSGIXPROC) __GLeeGetProcAddress("glXDestroyHyperpipeConfigSGIX"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glXBindHyperpipeSGIX = (GLEEPFNGLXBINDHYPERPIPESGIXPROC) __GLeeGetProcAddress("glXBindHyperpipeSGIX"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glXQueryHyperpipeBestAttribSGIX = (GLEEPFNGLXQUERYHYPERPIPEBESTATTRIBSGIXPROC) __GLeeGetProcAddress("glXQueryHyperpipeBestAttribSGIX"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glXHyperpipeAttribSGIX = (GLEEPFNGLXHYPERPIPEATTRIBSGIXPROC) __GLeeGetProcAddress("glXHyperpipeAttribSGIX"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glXQueryHyperpipeAttribSGIX = (GLEEPFNGLXQUERYHYPERPIPEATTRIBSGIXPROC) __GLeeGetProcAddress("glXQueryHyperpipeAttribSGIX"))!=0) nLinked++;
+#endif
+    if (nLinked==8) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GLX_MESA_agp_offset(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GLX_MESA_agp_offset
+    if ((GLeeFuncPtr_glXGetAGPOffsetMESA = (GLEEPFNGLXGETAGPOFFSETMESAPROC) __GLeeGetProcAddress("glXGetAGPOffsetMESA"))!=0) nLinked++;
+#endif
+    if (nLinked==1) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GLX_EXT_fbconfig_packed_float(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GLX_EXT_framebuffer_sRGB(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GLX_EXT_texture_from_pixmap(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GLX_EXT_texture_from_pixmap
+    if ((GLeeFuncPtr_glXBindTexImageEXT = (GLEEPFNGLXBINDTEXIMAGEEXTPROC) __GLeeGetProcAddress("glXBindTexImageEXT"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glXReleaseTexImageEXT = (GLEEPFNGLXRELEASETEXIMAGEEXTPROC) __GLeeGetProcAddress("glXReleaseTexImageEXT"))!=0) nLinked++;
+#endif
+    if (nLinked==2) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GLX_NV_present_video(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GLX_NV_present_video
+    if ((GLeeFuncPtr_glXEnumerateVideoDevicesNV = (GLEEPFNGLXENUMERATEVIDEODEVICESNVPROC) __GLeeGetProcAddress("glXEnumerateVideoDevicesNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glXBindVideoDeviceNV = (GLEEPFNGLXBINDVIDEODEVICENVPROC) __GLeeGetProcAddress("glXBindVideoDeviceNV"))!=0) nLinked++;
+#endif
+    if (nLinked==2) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GLX_NV_video_out(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GLX_NV_swap_group(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GLX_NV_swap_group
+    if ((GLeeFuncPtr_glXJoinSwapGroupNV = (GLEEPFNGLXJOINSWAPGROUPNVPROC) __GLeeGetProcAddress("glXJoinSwapGroupNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glXBindSwapBarrierNV = (GLEEPFNGLXBINDSWAPBARRIERNVPROC) __GLeeGetProcAddress("glXBindSwapBarrierNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glXQuerySwapGroupNV = (GLEEPFNGLXQUERYSWAPGROUPNVPROC) __GLeeGetProcAddress("glXQuerySwapGroupNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glXQueryMaxSwapGroupsNV = (GLEEPFNGLXQUERYMAXSWAPGROUPSNVPROC) __GLeeGetProcAddress("glXQueryMaxSwapGroupsNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glXQueryFrameCountNV = (GLEEPFNGLXQUERYFRAMECOUNTNVPROC) __GLeeGetProcAddress("glXQueryFrameCountNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glXResetFrameCountNV = (GLEEPFNGLXRESETFRAMECOUNTNVPROC) __GLeeGetProcAddress("glXResetFrameCountNV"))!=0) nLinked++;
+#endif
+    if (nLinked==6) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GLX_NV_video_capture(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GLX_NV_video_capture
+    if ((GLeeFuncPtr_glXBindVideoCaptureDeviceNV = (GLEEPFNGLXBINDVIDEOCAPTUREDEVICENVPROC) __GLeeGetProcAddress("glXBindVideoCaptureDeviceNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glXEnumerateVideoCaptureDevicesNV = (GLEEPFNGLXENUMERATEVIDEOCAPTUREDEVICESNVPROC) __GLeeGetProcAddress("glXEnumerateVideoCaptureDevicesNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glXLockVideoCaptureDeviceNV = (GLEEPFNGLXLOCKVIDEOCAPTUREDEVICENVPROC) __GLeeGetProcAddress("glXLockVideoCaptureDeviceNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glXQueryVideoCaptureDeviceNV = (GLEEPFNGLXQUERYVIDEOCAPTUREDEVICENVPROC) __GLeeGetProcAddress("glXQueryVideoCaptureDeviceNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glXReleaseVideoCaptureDeviceNV = (GLEEPFNGLXRELEASEVIDEOCAPTUREDEVICENVPROC) __GLeeGetProcAddress("glXReleaseVideoCaptureDeviceNV"))!=0) nLinked++;
+#endif
+    if (nLinked==5) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GLX_EXT_swap_control(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GLX_EXT_swap_control
+    if ((GLeeFuncPtr_glXSwapIntervalEXT = (GLEEPFNGLXSWAPINTERVALEXTPROC) __GLeeGetProcAddress("glXSwapIntervalEXT"))!=0) nLinked++;
+#endif
+    if (nLinked==1) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GLX_NV_copy_image(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GLX_NV_copy_image
+    if ((GLeeFuncPtr_glXCopyImageSubDataNV = (GLEEPFNGLXCOPYIMAGESUBDATANVPROC) __GLeeGetProcAddress("glXCopyImageSubDataNV"))!=0) nLinked++;
+#endif
+    if (nLinked==1) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GLX_INTEL_swap_event(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GLX_NV_multisample_coverage(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GLX_AMD_gpu_association(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GLX_EXT_create_context_es2_profile(void) {return GLEE_LINK_COMPLETE;}
+
+GLuint __GLeeLink_GLX_NV_video_output(void)
+{
+    GLint nLinked=0;
+#ifdef __GLEE_GLX_NV_video_output
+    if ((GLeeFuncPtr_glXGetVideoDeviceNV = (GLEEPFNGLXGETVIDEODEVICENVPROC) __GLeeGetProcAddress("glXGetVideoDeviceNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glXReleaseVideoDeviceNV = (GLEEPFNGLXRELEASEVIDEODEVICENVPROC) __GLeeGetProcAddress("glXReleaseVideoDeviceNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glXBindVideoImageNV = (GLEEPFNGLXBINDVIDEOIMAGENVPROC) __GLeeGetProcAddress("glXBindVideoImageNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glXReleaseVideoImageNV = (GLEEPFNGLXRELEASEVIDEOIMAGENVPROC) __GLeeGetProcAddress("glXReleaseVideoImageNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glXSendPbufferToVideoNV = (GLEEPFNGLXSENDPBUFFERTOVIDEONVPROC) __GLeeGetProcAddress("glXSendPbufferToVideoNV"))!=0) nLinked++;
+    if ((GLeeFuncPtr_glXGetVideoInfoNV = (GLEEPFNGLXGETVIDEOINFONVPROC) __GLeeGetProcAddress("glXGetVideoInfoNV"))!=0) nLinked++;
+#endif
+    if (nLinked==6) return GLEE_LINK_COMPLETE;
+    if (nLinked==0) return GLEE_LINK_FAIL;
+    return GLEE_LINK_PARTIAL;
+}
+
+GLuint __GLeeLink_GLX_EXT_scene_marker(void) {return GLEE_LINK_COMPLETE;}
+
+GLEE_LINK_FUNCTION __GLeeGLXLoadFunction[51];
+
+void initGLXLoadFunctions(void)
+{
+    __GLeeGLXLoadFunction[0]=__GLeeLink_GLX_VERSION_1_3;
+    __GLeeGLXLoadFunction[1]=__GLeeLink_GLX_VERSION_1_4;
+    __GLeeGLXLoadFunction[2]=__GLeeLink_GLX_ARB_multisample;
+    __GLeeGLXLoadFunction[3]=__GLeeLink_GLX_ARB_vertex_buffer_object;
+    __GLeeGLXLoadFunction[4]=__GLeeLink_GLX_ARB_fbconfig_float;
+    __GLeeGLXLoadFunction[5]=__GLeeLink_GLX_ARB_framebuffer_sRGB;
+    __GLeeGLXLoadFunction[6]=__GLeeLink_GLX_ARB_create_context;
+    __GLeeGLXLoadFunction[7]=__GLeeLink_GLX_ARB_create_context_profile;
+    __GLeeGLXLoadFunction[8]=__GLeeLink_GLX_ARB_create_context_robustness;
+    __GLeeGLXLoadFunction[9]=__GLeeLink_GLX_SGIS_multisample;
+    __GLeeGLXLoadFunction[10]=__GLeeLink_GLX_EXT_visual_info;
+    __GLeeGLXLoadFunction[11]=__GLeeLink_GLX_SGI_swap_control;
+    __GLeeGLXLoadFunction[12]=__GLeeLink_GLX_SGI_video_sync;
+    __GLeeGLXLoadFunction[13]=__GLeeLink_GLX_SGI_make_current_read;
+    __GLeeGLXLoadFunction[14]=__GLeeLink_GLX_EXT_visual_rating;
+    __GLeeGLXLoadFunction[15]=__GLeeLink_GLX_EXT_import_context;
+    __GLeeGLXLoadFunction[16]=__GLeeLink_GLX_SGIX_fbconfig;
+    __GLeeGLXLoadFunction[17]=__GLeeLink_GLX_SGIX_pbuffer;
+    __GLeeGLXLoadFunction[18]=__GLeeLink_GLX_SGI_cushion;
+    __GLeeGLXLoadFunction[19]=__GLeeLink_GLX_SGIX_video_resize;
+    __GLeeGLXLoadFunction[20]=__GLeeLink_GLX_SGIX_swap_group;
+    __GLeeGLXLoadFunction[21]=__GLeeLink_GLX_SGIX_swap_barrier;
+    __GLeeGLXLoadFunction[22]=__GLeeLink_GLX_SGIS_blended_overlay;
+    __GLeeGLXLoadFunction[23]=__GLeeLink_GLX_SGIS_shared_multisample;
+    __GLeeGLXLoadFunction[24]=__GLeeLink_GLX_SUN_get_transparent_index;
+    __GLeeGLXLoadFunction[25]=__GLeeLink_GLX_3DFX_multisample;
+    __GLeeGLXLoadFunction[26]=__GLeeLink_GLX_MESA_copy_sub_buffer;
+    __GLeeGLXLoadFunction[27]=__GLeeLink_GLX_MESA_pixmap_colormap;
+    __GLeeGLXLoadFunction[28]=__GLeeLink_GLX_MESA_release_buffers;
+    __GLeeGLXLoadFunction[29]=__GLeeLink_GLX_MESA_set_3dfx_mode;
+    __GLeeGLXLoadFunction[30]=__GLeeLink_GLX_SGIX_visual_select_group;
+    __GLeeGLXLoadFunction[31]=__GLeeLink_GLX_OML_swap_method;
+    __GLeeGLXLoadFunction[32]=__GLeeLink_GLX_OML_sync_control;
+    __GLeeGLXLoadFunction[33]=__GLeeLink_GLX_NV_float_buffer;
+    __GLeeGLXLoadFunction[34]=__GLeeLink_GLX_SGIX_hyperpipe;
+    __GLeeGLXLoadFunction[35]=__GLeeLink_GLX_MESA_agp_offset;
+    __GLeeGLXLoadFunction[36]=__GLeeLink_GLX_EXT_fbconfig_packed_float;
+    __GLeeGLXLoadFunction[37]=__GLeeLink_GLX_EXT_framebuffer_sRGB;
+    __GLeeGLXLoadFunction[38]=__GLeeLink_GLX_EXT_texture_from_pixmap;
+    __GLeeGLXLoadFunction[39]=__GLeeLink_GLX_NV_present_video;
+    __GLeeGLXLoadFunction[40]=__GLeeLink_GLX_NV_video_out;
+    __GLeeGLXLoadFunction[41]=__GLeeLink_GLX_NV_swap_group;
+    __GLeeGLXLoadFunction[42]=__GLeeLink_GLX_NV_video_capture;
+    __GLeeGLXLoadFunction[43]=__GLeeLink_GLX_EXT_swap_control;
+    __GLeeGLXLoadFunction[44]=__GLeeLink_GLX_NV_copy_image;
+    __GLeeGLXLoadFunction[45]=__GLeeLink_GLX_INTEL_swap_event;
+    __GLeeGLXLoadFunction[46]=__GLeeLink_GLX_NV_multisample_coverage;
+    __GLeeGLXLoadFunction[47]=__GLeeLink_GLX_AMD_gpu_association;
+    __GLeeGLXLoadFunction[48]=__GLeeLink_GLX_EXT_create_context_es2_profile;
+    __GLeeGLXLoadFunction[49]=__GLeeLink_GLX_NV_video_output;
+    __GLeeGLXLoadFunction[50]=__GLeeLink_GLX_EXT_scene_marker;
+}
+
+#endif /* end Linux */
+
+
+/*****************************************************************
+ * GLee internal types
+ *****************************************************************/
+typedef struct 
+{
+	char ** names;
+	int * lengths;
+	int numNames;
+}ExtensionList;
+
+
+/*****************************************************************
+ * GLee internal variables
+ *****************************************************************/
+char GLeeErrorString[256]="";
+
+
+/*****************************************************************
+ * GLee internal functions
+ *****************************************************************/
+
+void __GLeeExtList_init(ExtensionList *extList)
+{
+	extList->names=0;
+	extList->lengths=0;
+	extList->numNames=0;
+}
+
+void __GLeeExtList_clean(ExtensionList *extList)
+{
+	int a;
+	for (a=0;a<extList->numNames;a++)
+	{
+		if (extList->names[a]!=0) free((void *)extList->names[a]);
+	}
+	if (extList->names!=0) free((void *)extList->names);
+	if (extList->lengths!=0) free((void *)extList->lengths);
+	extList->names=0;
+	extList->lengths=0;
+	extList->numNames=0;
+}
+
+void __GLeeExtList_add(ExtensionList *extList, const char * extName)
+{
+	int length=strlen(extName)+1;
+	int i=extList->numNames;
+	int n=i+1;
+	if (i==0)
+	{
+		extList->lengths=(int *)malloc(sizeof(int));
+		extList->names=(char **)malloc(sizeof(char *));
+	}else
+	{
+		extList->lengths=(int *)realloc((void *)extList->lengths, n*sizeof(int));
+		extList->names=(char **)realloc((void *)extList->names, n*sizeof(char *));
+	}
+	extList->names[i]=strdup(extName);
+	extList->lengths[i]=length;
+	extList->numNames++;
+}
+
+const char *__GLeeGetExtStrPlat( void )
+{
+#ifdef _WIN32
+	if (!_GLEE_WGL_ARB_extensions_string)
+		wglGetExtensionsStringARB = (GLEEPFNWGLGETEXTENSIONSSTRINGARBPROC) wglGetProcAddress("wglGetExtensionsStringARB");
+
+	if (wglGetExtensionsStringARB)
+		return (const char *)wglGetExtensionsStringARB(wglGetCurrentDC());
+#elif defined(__APPLE__) || defined(__APPLE_CC__)
+#else
+	Display *dpy=glXGetCurrentDisplay();
+	if(dpy)
+	{
+		int dpynr=DefaultScreen(dpy);
+		return (const char*)glXQueryExtensionsString(dpy,dpynr);
+	}
+#endif
+	return 0;
+}
+
+void __GLeeWriteError(const char * errorStr)
+{
+	int a=0;
+	for (a=0;a<256;a++)
+	{
+		GLeeErrorString[a]=errorStr[a];
+	}
+	GLeeErrorString[255]='\0';
+}
+
+int __GLeeGetVersionNumber(char *versionStr)
+{
+	int major=(int)versionStr[0]-(int)'0';
+	int minor=(int)versionStr[2]-(int)'0';
+	return major<<8 | minor;
+}
+
+GLboolean __GLeeGetExtensions(ExtensionList* extList)
+{
+       const char * platExtStr;
+       const char * glExtStr;
+       char * extStr;
+       char * p;
+       int totalExtStrLen = 0;
+       int addASpace;
+
+       /* read the platform specific extension string */
+       platExtStr=__GLeeGetExtStrPlat();
+       if (!platExtStr) platExtStr="";
+       else totalExtStrLen = strlen(platExtStr);
+
+       glExtStr=(const char *)glGetString(GL_EXTENSIONS);
+       if (glExtStr==0)
+	{
+		__GLeeWriteError("glGetString(GL_EXTENSIONS) failed.");
+		return GL_FALSE;
+	}
+
+       /* If the last character of platExtStr is not a space, we need to add one when we concatenate the extension strings*/
+       addASpace = 0;
+       if ( totalExtStrLen )
+       {
+           if ( platExtStr[ totalExtStrLen-1 ] != ' ')
+               {
+                       addASpace = 1;
+                       totalExtStrLen++;
+               }
+       }
+
+       /* allocate the extension string */
+       totalExtStrLen += strlen(glExtStr);
+       extStr=(char *)malloc( totalExtStrLen+1 ); /* allow for a null terminator */
+
+       /* concatenate the two extension strings */
+       snprintf(extStr,totalExtStrLen+1,addASpace?"%s %s":"%s%s",platExtStr,glExtStr);
+
+       /* extract the extensions */
+       for (p = extStr + totalExtStrLen; p > extStr; --p) {
+               if (*p == ' ') {
+                       __GLeeExtList_add(extList,p+1);
+                       *p = 0;
+               }
+       }
+       __GLeeExtList_add(extList,extStr);
+       free((void *)extStr);
+       return GL_TRUE;
+ }
+
+
+GLboolean __GLeeCheckExtension(const char * name, ExtensionList *extensionNames)
+{
+	int n=extensionNames->numNames;
+	int a;
+    for (a=0;a<n;a++)
+	{
+		if (strcmp(extensionNames->names[a],name)==0)
+			return GL_TRUE;
+	}
+	return GL_FALSE;
+}
+
+GLEE_EXTERN GLint __GLeeGetExtensionNumber(const char *extensionName, int type)
+{
+	int a;
+	switch (type)
+	{
+	case 0:
+		for (a=0;a<__GLeeGLNumExtensions;a++)
+			if (strcmp(extensionName,__GLeeGLExtensionNames[a])==0)	return a;
+		return -1;
+#ifdef _WIN32
+	case 1:
+		for (a=0;a<__GLeeWGLNumExtensions;a++)
+			if (strcmp(extensionName,__GLeeWGLExtensionNames[a])==0) return a;
+		return -1;
+#elif defined(__APPLE__) || defined(__APPLE_CC__)
+#else
+	case 2:
+		for (a=0;a<__GLeeGLXNumExtensions;a++)
+			if (strcmp(extensionName,__GLeeGLXExtensionNames[a])==0) return a;
+		return -1;
+#endif
+	}
+	return -1;
+}
+
+/*****************************************************************
+ * GLee external functions 
+ *****************************************************************/
+
+#ifdef _WIN32
+GLEE_EXTERN const char * GLeeGetExtStrWGL( void )
+{
+	return __GLeeGetExtStrPlat();
+}
+#elif defined(__APPLE__) || defined(__APPLE_CC__)
+#else
+GLEE_EXTERN const char * GLeeGetExtStrGLX( void )	
+{
+	return __GLeeGetExtStrPlat();
+}
+#endif
+
+GLEE_EXTERN const char * GLeeGetExtStrGL( void )
+{
+	return (const char *)glGetString(GL_EXTENSIONS);
+}
+
+GLEE_EXTERN const char * GLeeGetErrorString( void )
+{
+	return GLeeErrorString;
+}
+
+GLboolean __GLeeInitedLoadFunctions=GL_FALSE;
+
+GLEE_EXTERN GLint GLeeForceLink(const char * extensionName)
+{
+	int type=0; 
+	int extNum;
+	int len=strlen(extensionName);
+	if (len<5) return GLEE_LINK_FAIL;
+	if (!__GLeeInitedLoadFunctions)
+	{
+		if (!__GLeeInited) GLeeInit();
+		initGLLoadFunctions();
+#ifdef _WIN32
+		initWGLLoadFunctions();
+#elif defined(__APPLE__) || defined(__APPLE_CC__)
+#else
+		initGLXLoadFunctions();
+#endif
+		__GLeeInitedLoadFunctions=GL_TRUE;
+	}
+	if (extensionName[0]=='W') type=1;
+	else if (extensionName[2]=='X') type=2;	
+	extNum=__GLeeGetExtensionNumber(extensionName,type);
+	if (extNum==-1) return GLEE_LINK_FAIL;
+	if (type==0) return __GLeeGLLoadFunction[extNum]();
+#ifdef _WIN32
+	if (type==1) return __GLeeWGLLoadFunction[extNum]();
+#elif defined(__APPLE__) || defined(__APPLE_CC__)	
+#else
+	if (type==2) return __GLeeGLXLoadFunction[extNum]();
+#endif
+	return GLEE_LINK_FAIL;
+}
+
+GLEE_EXTERN GLboolean GLeeEnabled(GLboolean * extensionQueryingVariable)
+{
+	if (!__GLeeInited) GLeeInit();
+	return *extensionQueryingVariable;	
+}
+
+GLEE_EXTERN GLboolean GLeeInit( void )
+{
+	int version;
+	ExtensionList extensionNames;
+	
+	if (__GLeeInited) 
+	{
+		return GL_FALSE;
+	}
+
+	__GLeeExtList_init(&extensionNames);
+	if (!__GLeeGetExtensions(&extensionNames)) 
+	{
+		__GLeeWriteError("GL extension querying failed.");
+		__GLeeExtList_clean(&extensionNames);
+		return GL_FALSE;
+	}
+
+	version=__GLeeGetVersionNumber((char *)glGetString(GL_VERSION));
+
+	__GLeeInited = GL_TRUE;
+
+
+/*****************************************************************
+ * Autogenerated linking functions
+ *****************************************************************/
+    if (version>=258)
+    {
+        _GLEE_VERSION_1_2 = GL_TRUE;
+        __GLeeLink_GL_VERSION_1_2();
+    }
+    if (__GLeeCheckExtension("GL_ARB_imaging", &extensionNames) )
+    {
+        _GLEE_ARB_imaging = GL_TRUE;
+        __GLeeLink_GL_ARB_imaging();
+    }
+    if (version>=259)
+    {
+        _GLEE_VERSION_1_3 = GL_TRUE;
+        __GLeeLink_GL_VERSION_1_3();
+    }
+    if (version>=260)
+    {
+        _GLEE_VERSION_1_4 = GL_TRUE;
+        __GLeeLink_GL_VERSION_1_4();
+    }
+    if (version>=261)
+    {
+        _GLEE_VERSION_1_5 = GL_TRUE;
+        __GLeeLink_GL_VERSION_1_5();
+    }
+    if (version>=512)
+    {
+        _GLEE_VERSION_2_0 = GL_TRUE;
+        __GLeeLink_GL_VERSION_2_0();
+    }
+    if (version>=513)
+    {
+        _GLEE_VERSION_2_1 = GL_TRUE;
+        __GLeeLink_GL_VERSION_2_1();
+    }
+    if (version>=768)
+    {
+        _GLEE_VERSION_3_0 = GL_TRUE;
+        __GLeeLink_GL_VERSION_3_0();
+    }
+    if (version>=769)
+    {
+        _GLEE_VERSION_3_1 = GL_TRUE;
+        __GLeeLink_GL_VERSION_3_1();
+    }
+    if (version>=770)
+    {
+        _GLEE_VERSION_3_2 = GL_TRUE;
+        __GLeeLink_GL_VERSION_3_2();
+    }
+    if (version>=771)
+    {
+        _GLEE_VERSION_3_3 = GL_TRUE;
+        __GLeeLink_GL_VERSION_3_3();
+    }
+    if (version>=1024)
+    {
+        _GLEE_VERSION_4_0 = GL_TRUE;
+        __GLeeLink_GL_VERSION_4_0();
+    }
+    if (version>=1025)
+    {
+        _GLEE_VERSION_4_1 = GL_TRUE;
+        __GLeeLink_GL_VERSION_4_1();
+    }
+    if (version>=1026)
+    {
+        _GLEE_VERSION_4_2 = GL_TRUE;
+        __GLeeLink_GL_VERSION_4_2();
+    }
+    if (__GLeeCheckExtension("GL_ARB_multitexture", &extensionNames) )
+    {
+        _GLEE_ARB_multitexture = GL_TRUE;
+        __GLeeLink_GL_ARB_multitexture();
+    }
+    if (__GLeeCheckExtension("GL_ARB_transpose_matrix", &extensionNames) )
+    {
+        _GLEE_ARB_transpose_matrix = GL_TRUE;
+        __GLeeLink_GL_ARB_transpose_matrix();
+    }
+    if (__GLeeCheckExtension("GL_ARB_multisample", &extensionNames) )
+    {
+        _GLEE_ARB_multisample = GL_TRUE;
+        __GLeeLink_GL_ARB_multisample();
+    }
+    if (__GLeeCheckExtension("GL_ARB_texture_env_add", &extensionNames) )
+    {
+        _GLEE_ARB_texture_env_add = GL_TRUE;
+        __GLeeLink_GL_ARB_texture_env_add();
+    }
+    if (__GLeeCheckExtension("GL_ARB_texture_cube_map", &extensionNames) )
+    {
+        _GLEE_ARB_texture_cube_map = GL_TRUE;
+        __GLeeLink_GL_ARB_texture_cube_map();
+    }
+    if (__GLeeCheckExtension("GL_ARB_texture_compression", &extensionNames) )
+    {
+        _GLEE_ARB_texture_compression = GL_TRUE;
+        __GLeeLink_GL_ARB_texture_compression();
+    }
+    if (__GLeeCheckExtension("GL_ARB_texture_border_clamp", &extensionNames) )
+    {
+        _GLEE_ARB_texture_border_clamp = GL_TRUE;
+        __GLeeLink_GL_ARB_texture_border_clamp();
+    }
+    if (__GLeeCheckExtension("GL_ARB_point_parameters", &extensionNames) )
+    {
+        _GLEE_ARB_point_parameters = GL_TRUE;
+        __GLeeLink_GL_ARB_point_parameters();
+    }
+    if (__GLeeCheckExtension("GL_ARB_vertex_blend", &extensionNames) )
+    {
+        _GLEE_ARB_vertex_blend = GL_TRUE;
+        __GLeeLink_GL_ARB_vertex_blend();
+    }
+    if (__GLeeCheckExtension("GL_ARB_matrix_palette", &extensionNames) )
+    {
+        _GLEE_ARB_matrix_palette = GL_TRUE;
+        __GLeeLink_GL_ARB_matrix_palette();
+    }
+    if (__GLeeCheckExtension("GL_ARB_texture_env_combine", &extensionNames) )
+    {
+        _GLEE_ARB_texture_env_combine = GL_TRUE;
+        __GLeeLink_GL_ARB_texture_env_combine();
+    }
+    if (__GLeeCheckExtension("GL_ARB_texture_env_crossbar", &extensionNames) )
+    {
+        _GLEE_ARB_texture_env_crossbar = GL_TRUE;
+        __GLeeLink_GL_ARB_texture_env_crossbar();
+    }
+    if (__GLeeCheckExtension("GL_ARB_texture_env_dot3", &extensionNames) )
+    {
+        _GLEE_ARB_texture_env_dot3 = GL_TRUE;
+        __GLeeLink_GL_ARB_texture_env_dot3();
+    }
+    if (__GLeeCheckExtension("GL_ARB_texture_mirrored_repeat", &extensionNames) )
+    {
+        _GLEE_ARB_texture_mirrored_repeat = GL_TRUE;
+        __GLeeLink_GL_ARB_texture_mirrored_repeat();
+    }
+    if (__GLeeCheckExtension("GL_ARB_depth_texture", &extensionNames) )
+    {
+        _GLEE_ARB_depth_texture = GL_TRUE;
+        __GLeeLink_GL_ARB_depth_texture();
+    }
+    if (__GLeeCheckExtension("GL_ARB_shadow", &extensionNames) )
+    {
+        _GLEE_ARB_shadow = GL_TRUE;
+        __GLeeLink_GL_ARB_shadow();
+    }
+    if (__GLeeCheckExtension("GL_ARB_shadow_ambient", &extensionNames) )
+    {
+        _GLEE_ARB_shadow_ambient = GL_TRUE;
+        __GLeeLink_GL_ARB_shadow_ambient();
+    }
+    if (__GLeeCheckExtension("GL_ARB_window_pos", &extensionNames) )
+    {
+        _GLEE_ARB_window_pos = GL_TRUE;
+        __GLeeLink_GL_ARB_window_pos();
+    }
+    if (__GLeeCheckExtension("GL_ARB_vertex_program", &extensionNames) )
+    {
+        _GLEE_ARB_vertex_program = GL_TRUE;
+        __GLeeLink_GL_ARB_vertex_program();
+    }
+    if (__GLeeCheckExtension("GL_ARB_fragment_program", &extensionNames) )
+    {
+        _GLEE_ARB_fragment_program = GL_TRUE;
+        __GLeeLink_GL_ARB_fragment_program();
+    }
+    if (__GLeeCheckExtension("GL_ARB_vertex_buffer_object", &extensionNames) )
+    {
+        _GLEE_ARB_vertex_buffer_object = GL_TRUE;
+        __GLeeLink_GL_ARB_vertex_buffer_object();
+    }
+    if (__GLeeCheckExtension("GL_ARB_occlusion_query", &extensionNames) )
+    {
+        _GLEE_ARB_occlusion_query = GL_TRUE;
+        __GLeeLink_GL_ARB_occlusion_query();
+    }
+    if (__GLeeCheckExtension("GL_ARB_shader_objects", &extensionNames) )
+    {
+        _GLEE_ARB_shader_objects = GL_TRUE;
+        __GLeeLink_GL_ARB_shader_objects();
+    }
+    if (__GLeeCheckExtension("GL_ARB_vertex_shader", &extensionNames) )
+    {
+        _GLEE_ARB_vertex_shader = GL_TRUE;
+        __GLeeLink_GL_ARB_vertex_shader();
+    }
+    if (__GLeeCheckExtension("GL_ARB_fragment_shader", &extensionNames) )
+    {
+        _GLEE_ARB_fragment_shader = GL_TRUE;
+        __GLeeLink_GL_ARB_fragment_shader();
+    }
+    if (__GLeeCheckExtension("GL_ARB_shading_language_100", &extensionNames) )
+    {
+        _GLEE_ARB_shading_language_100 = GL_TRUE;
+        __GLeeLink_GL_ARB_shading_language_100();
+    }
+    if (__GLeeCheckExtension("GL_ARB_texture_non_power_of_two", &extensionNames) )
+    {
+        _GLEE_ARB_texture_non_power_of_two = GL_TRUE;
+        __GLeeLink_GL_ARB_texture_non_power_of_two();
+    }
+    if (__GLeeCheckExtension("GL_ARB_point_sprite", &extensionNames) )
+    {
+        _GLEE_ARB_point_sprite = GL_TRUE;
+        __GLeeLink_GL_ARB_point_sprite();
+    }
+    if (__GLeeCheckExtension("GL_ARB_fragment_program_shadow", &extensionNames) )
+    {
+        _GLEE_ARB_fragment_program_shadow = GL_TRUE;
+        __GLeeLink_GL_ARB_fragment_program_shadow();
+    }
+    if (__GLeeCheckExtension("GL_ARB_draw_buffers", &extensionNames) )
+    {
+        _GLEE_ARB_draw_buffers = GL_TRUE;
+        __GLeeLink_GL_ARB_draw_buffers();
+    }
+    if (__GLeeCheckExtension("GL_ARB_texture_rectangle", &extensionNames) )
+    {
+        _GLEE_ARB_texture_rectangle = GL_TRUE;
+        __GLeeLink_GL_ARB_texture_rectangle();
+    }
+    if (__GLeeCheckExtension("GL_ARB_color_buffer_float", &extensionNames) )
+    {
+        _GLEE_ARB_color_buffer_float = GL_TRUE;
+        __GLeeLink_GL_ARB_color_buffer_float();
+    }
+    if (__GLeeCheckExtension("GL_ARB_half_float_pixel", &extensionNames) )
+    {
+        _GLEE_ARB_half_float_pixel = GL_TRUE;
+        __GLeeLink_GL_ARB_half_float_pixel();
+    }
+    if (__GLeeCheckExtension("GL_ARB_texture_float", &extensionNames) )
+    {
+        _GLEE_ARB_texture_float = GL_TRUE;
+        __GLeeLink_GL_ARB_texture_float();
+    }
+    if (__GLeeCheckExtension("GL_ARB_pixel_buffer_object", &extensionNames) )
+    {
+        _GLEE_ARB_pixel_buffer_object = GL_TRUE;
+        __GLeeLink_GL_ARB_pixel_buffer_object();
+    }
+    if (__GLeeCheckExtension("GL_ARB_depth_buffer_float", &extensionNames) )
+    {
+        _GLEE_ARB_depth_buffer_float = GL_TRUE;
+        __GLeeLink_GL_ARB_depth_buffer_float();
+    }
+    if (__GLeeCheckExtension("GL_ARB_draw_instanced", &extensionNames) )
+    {
+        _GLEE_ARB_draw_instanced = GL_TRUE;
+        __GLeeLink_GL_ARB_draw_instanced();
+    }
+    if (__GLeeCheckExtension("GL_ARB_framebuffer_object", &extensionNames) )
+    {
+        _GLEE_ARB_framebuffer_object = GL_TRUE;
+        __GLeeLink_GL_ARB_framebuffer_object();
+    }
+    if (__GLeeCheckExtension("GL_ARB_framebuffer_sRGB", &extensionNames) )
+    {
+        _GLEE_ARB_framebuffer_sRGB = GL_TRUE;
+        __GLeeLink_GL_ARB_framebuffer_sRGB();
+    }
+    if (__GLeeCheckExtension("GL_ARB_geometry_shader4", &extensionNames) )
+    {
+        _GLEE_ARB_geometry_shader4 = GL_TRUE;
+        __GLeeLink_GL_ARB_geometry_shader4();
+    }
+    if (__GLeeCheckExtension("GL_ARB_half_float_vertex", &extensionNames) )
+    {
+        _GLEE_ARB_half_float_vertex = GL_TRUE;
+        __GLeeLink_GL_ARB_half_float_vertex();
+    }
+    if (__GLeeCheckExtension("GL_ARB_instanced_arrays", &extensionNames) )
+    {
+        _GLEE_ARB_instanced_arrays = GL_TRUE;
+        __GLeeLink_GL_ARB_instanced_arrays();
+    }
+    if (__GLeeCheckExtension("GL_ARB_map_buffer_range", &extensionNames) )
+    {
+        _GLEE_ARB_map_buffer_range = GL_TRUE;
+        __GLeeLink_GL_ARB_map_buffer_range();
+    }
+    if (__GLeeCheckExtension("GL_ARB_texture_buffer_object", &extensionNames) )
+    {
+        _GLEE_ARB_texture_buffer_object = GL_TRUE;
+        __GLeeLink_GL_ARB_texture_buffer_object();
+    }
+    if (__GLeeCheckExtension("GL_ARB_texture_compression_rgtc", &extensionNames) )
+    {
+        _GLEE_ARB_texture_compression_rgtc = GL_TRUE;
+        __GLeeLink_GL_ARB_texture_compression_rgtc();
+    }
+    if (__GLeeCheckExtension("GL_ARB_texture_rg", &extensionNames) )
+    {
+        _GLEE_ARB_texture_rg = GL_TRUE;
+        __GLeeLink_GL_ARB_texture_rg();
+    }
+    if (__GLeeCheckExtension("GL_ARB_vertex_array_object", &extensionNames) )
+    {
+        _GLEE_ARB_vertex_array_object = GL_TRUE;
+        __GLeeLink_GL_ARB_vertex_array_object();
+    }
+    if (__GLeeCheckExtension("GL_ARB_uniform_buffer_object", &extensionNames) )
+    {
+        _GLEE_ARB_uniform_buffer_object = GL_TRUE;
+        __GLeeLink_GL_ARB_uniform_buffer_object();
+    }
+    if (__GLeeCheckExtension("GL_ARB_compatibility", &extensionNames) )
+    {
+        _GLEE_ARB_compatibility = GL_TRUE;
+        __GLeeLink_GL_ARB_compatibility();
+    }
+    if (__GLeeCheckExtension("GL_ARB_copy_buffer", &extensionNames) )
+    {
+        _GLEE_ARB_copy_buffer = GL_TRUE;
+        __GLeeLink_GL_ARB_copy_buffer();
+    }
+    if (__GLeeCheckExtension("GL_ARB_shader_texture_lod", &extensionNames) )
+    {
+        _GLEE_ARB_shader_texture_lod = GL_TRUE;
+        __GLeeLink_GL_ARB_shader_texture_lod();
+    }
+    if (__GLeeCheckExtension("GL_ARB_depth_clamp", &extensionNames) )
+    {
+        _GLEE_ARB_depth_clamp = GL_TRUE;
+        __GLeeLink_GL_ARB_depth_clamp();
+    }
+    if (__GLeeCheckExtension("GL_ARB_draw_elements_base_vertex", &extensionNames) )
+    {
+        _GLEE_ARB_draw_elements_base_vertex = GL_TRUE;
+        __GLeeLink_GL_ARB_draw_elements_base_vertex();
+    }
+    if (__GLeeCheckExtension("GL_ARB_fragment_coord_conventions", &extensionNames) )
+    {
+        _GLEE_ARB_fragment_coord_conventions = GL_TRUE;
+        __GLeeLink_GL_ARB_fragment_coord_conventions();
+    }
+    if (__GLeeCheckExtension("GL_ARB_provoking_vertex", &extensionNames) )
+    {
+        _GLEE_ARB_provoking_vertex = GL_TRUE;
+        __GLeeLink_GL_ARB_provoking_vertex();
+    }
+    if (__GLeeCheckExtension("GL_ARB_seamless_cube_map", &extensionNames) )
+    {
+        _GLEE_ARB_seamless_cube_map = GL_TRUE;
+        __GLeeLink_GL_ARB_seamless_cube_map();
+    }
+    if (__GLeeCheckExtension("GL_ARB_sync", &extensionNames) )
+    {
+        _GLEE_ARB_sync = GL_TRUE;
+        __GLeeLink_GL_ARB_sync();
+    }
+    if (__GLeeCheckExtension("GL_ARB_texture_multisample", &extensionNames) )
+    {
+        _GLEE_ARB_texture_multisample = GL_TRUE;
+        __GLeeLink_GL_ARB_texture_multisample();
+    }
+    if (__GLeeCheckExtension("GL_ARB_vertex_array_bgra", &extensionNames) )
+    {
+        _GLEE_ARB_vertex_array_bgra = GL_TRUE;
+        __GLeeLink_GL_ARB_vertex_array_bgra();
+    }
+    if (__GLeeCheckExtension("GL_ARB_draw_buffers_blend", &extensionNames) )
+    {
+        _GLEE_ARB_draw_buffers_blend = GL_TRUE;
+        __GLeeLink_GL_ARB_draw_buffers_blend();
+    }
+    if (__GLeeCheckExtension("GL_ARB_sample_shading", &extensionNames) )
+    {
+        _GLEE_ARB_sample_shading = GL_TRUE;
+        __GLeeLink_GL_ARB_sample_shading();
+    }
+    if (__GLeeCheckExtension("GL_ARB_texture_cube_map_array", &extensionNames) )
+    {
+        _GLEE_ARB_texture_cube_map_array = GL_TRUE;
+        __GLeeLink_GL_ARB_texture_cube_map_array();
+    }
+    if (__GLeeCheckExtension("GL_ARB_texture_gather", &extensionNames) )
+    {
+        _GLEE_ARB_texture_gather = GL_TRUE;
+        __GLeeLink_GL_ARB_texture_gather();
+    }
+    if (__GLeeCheckExtension("GL_ARB_texture_query_lod", &extensionNames) )
+    {
+        _GLEE_ARB_texture_query_lod = GL_TRUE;
+        __GLeeLink_GL_ARB_texture_query_lod();
+    }
+    if (__GLeeCheckExtension("GL_ARB_shading_language_include", &extensionNames) )
+    {
+        _GLEE_ARB_shading_language_include = GL_TRUE;
+        __GLeeLink_GL_ARB_shading_language_include();
+    }
+    if (__GLeeCheckExtension("GL_ARB_texture_compression_bptc", &extensionNames) )
+    {
+        _GLEE_ARB_texture_compression_bptc = GL_TRUE;
+        __GLeeLink_GL_ARB_texture_compression_bptc();
+    }
+    if (__GLeeCheckExtension("GL_ARB_blend_func_extended", &extensionNames) )
+    {
+        _GLEE_ARB_blend_func_extended = GL_TRUE;
+        __GLeeLink_GL_ARB_blend_func_extended();
+    }
+    if (__GLeeCheckExtension("GL_ARB_explicit_attrib_location", &extensionNames) )
+    {
+        _GLEE_ARB_explicit_attrib_location = GL_TRUE;
+        __GLeeLink_GL_ARB_explicit_attrib_location();
+    }
+    if (__GLeeCheckExtension("GL_ARB_occlusion_query2", &extensionNames) )
+    {
+        _GLEE_ARB_occlusion_query2 = GL_TRUE;
+        __GLeeLink_GL_ARB_occlusion_query2();
+    }
+    if (__GLeeCheckExtension("GL_ARB_sampler_objects", &extensionNames) )
+    {
+        _GLEE_ARB_sampler_objects = GL_TRUE;
+        __GLeeLink_GL_ARB_sampler_objects();
+    }
+    if (__GLeeCheckExtension("GL_ARB_shader_bit_encoding", &extensionNames) )
+    {
+        _GLEE_ARB_shader_bit_encoding = GL_TRUE;
+        __GLeeLink_GL_ARB_shader_bit_encoding();
+    }
+    if (__GLeeCheckExtension("GL_ARB_texture_rgb10_a2ui", &extensionNames) )
+    {
+        _GLEE_ARB_texture_rgb10_a2ui = GL_TRUE;
+        __GLeeLink_GL_ARB_texture_rgb10_a2ui();
+    }
+    if (__GLeeCheckExtension("GL_ARB_texture_swizzle", &extensionNames) )
+    {
+        _GLEE_ARB_texture_swizzle = GL_TRUE;
+        __GLeeLink_GL_ARB_texture_swizzle();
+    }
+    if (__GLeeCheckExtension("GL_ARB_timer_query", &extensionNames) )
+    {
+        _GLEE_ARB_timer_query = GL_TRUE;
+        __GLeeLink_GL_ARB_timer_query();
+    }
+    if (__GLeeCheckExtension("GL_ARB_vertex_type_2_10_10_10_rev", &extensionNames) )
+    {
+        _GLEE_ARB_vertex_type_2_10_10_10_rev = GL_TRUE;
+        __GLeeLink_GL_ARB_vertex_type_2_10_10_10_rev();
+    }
+    if (__GLeeCheckExtension("GL_ARB_draw_indirect", &extensionNames) )
+    {
+        _GLEE_ARB_draw_indirect = GL_TRUE;
+        __GLeeLink_GL_ARB_draw_indirect();
+    }
+    if (__GLeeCheckExtension("GL_ARB_gpu_shader5", &extensionNames) )
+    {
+        _GLEE_ARB_gpu_shader5 = GL_TRUE;
+        __GLeeLink_GL_ARB_gpu_shader5();
+    }
+    if (__GLeeCheckExtension("GL_ARB_gpu_shader_fp64", &extensionNames) )
+    {
+        _GLEE_ARB_gpu_shader_fp64 = GL_TRUE;
+        __GLeeLink_GL_ARB_gpu_shader_fp64();
+    }
+    if (__GLeeCheckExtension("GL_ARB_shader_subroutine", &extensionNames) )
+    {
+        _GLEE_ARB_shader_subroutine = GL_TRUE;
+        __GLeeLink_GL_ARB_shader_subroutine();
+    }
+    if (__GLeeCheckExtension("GL_ARB_tessellation_shader", &extensionNames) )
+    {
+        _GLEE_ARB_tessellation_shader = GL_TRUE;
+        __GLeeLink_GL_ARB_tessellation_shader();
+    }
+    if (__GLeeCheckExtension("GL_ARB_texture_buffer_object_rgb32", &extensionNames) )
+    {
+        _GLEE_ARB_texture_buffer_object_rgb32 = GL_TRUE;
+        __GLeeLink_GL_ARB_texture_buffer_object_rgb32();
+    }
+    if (__GLeeCheckExtension("GL_ARB_transform_feedback2", &extensionNames) )
+    {
+        _GLEE_ARB_transform_feedback2 = GL_TRUE;
+        __GLeeLink_GL_ARB_transform_feedback2();
+    }
+    if (__GLeeCheckExtension("GL_ARB_transform_feedback3", &extensionNames) )
+    {
+        _GLEE_ARB_transform_feedback3 = GL_TRUE;
+        __GLeeLink_GL_ARB_transform_feedback3();
+    }
+    if (__GLeeCheckExtension("GL_ARB_ES2_compatibility", &extensionNames) )
+    {
+        _GLEE_ARB_ES2_compatibility = GL_TRUE;
+        __GLeeLink_GL_ARB_ES2_compatibility();
+    }
+    if (__GLeeCheckExtension("GL_ARB_get_program_binary", &extensionNames) )
+    {
+        _GLEE_ARB_get_program_binary = GL_TRUE;
+        __GLeeLink_GL_ARB_get_program_binary();
+    }
+    if (__GLeeCheckExtension("GL_ARB_separate_shader_objects", &extensionNames) )
+    {
+        _GLEE_ARB_separate_shader_objects = GL_TRUE;
+        __GLeeLink_GL_ARB_separate_shader_objects();
+    }
+    if (__GLeeCheckExtension("GL_ARB_shader_precision", &extensionNames) )
+    {
+        _GLEE_ARB_shader_precision = GL_TRUE;
+        __GLeeLink_GL_ARB_shader_precision();
+    }
+    if (__GLeeCheckExtension("GL_ARB_vertex_attrib_64bit", &extensionNames) )
+    {
+        _GLEE_ARB_vertex_attrib_64bit = GL_TRUE;
+        __GLeeLink_GL_ARB_vertex_attrib_64bit();
+    }
+    if (__GLeeCheckExtension("GL_ARB_viewport_array", &extensionNames) )
+    {
+        _GLEE_ARB_viewport_array = GL_TRUE;
+        __GLeeLink_GL_ARB_viewport_array();
+    }
+    if (__GLeeCheckExtension("GL_ARB_cl_event", &extensionNames) )
+    {
+        _GLEE_ARB_cl_event = GL_TRUE;
+        __GLeeLink_GL_ARB_cl_event();
+    }
+    if (__GLeeCheckExtension("GL_ARB_robustness", &extensionNames) )
+    {
+        _GLEE_ARB_robustness = GL_TRUE;
+        __GLeeLink_GL_ARB_robustness();
+    }
+    if (__GLeeCheckExtension("GL_ARB_shader_stencil_export", &extensionNames) )
+    {
+        _GLEE_ARB_shader_stencil_export = GL_TRUE;
+        __GLeeLink_GL_ARB_shader_stencil_export();
+    }
+    if (__GLeeCheckExtension("GL_ARB_base_instance", &extensionNames) )
+    {
+        _GLEE_ARB_base_instance = GL_TRUE;
+        __GLeeLink_GL_ARB_base_instance();
+    }
+    if (__GLeeCheckExtension("GL_ARB_shading_language_420pack", &extensionNames) )
+    {
+        _GLEE_ARB_shading_language_420pack = GL_TRUE;
+        __GLeeLink_GL_ARB_shading_language_420pack();
+    }
+    if (__GLeeCheckExtension("GL_ARB_transform_feedback_instanced", &extensionNames) )
+    {
+        _GLEE_ARB_transform_feedback_instanced = GL_TRUE;
+        __GLeeLink_GL_ARB_transform_feedback_instanced();
+    }
+    if (__GLeeCheckExtension("GL_ARB_compressed_texture_pixel_storage", &extensionNames) )
+    {
+        _GLEE_ARB_compressed_texture_pixel_storage = GL_TRUE;
+        __GLeeLink_GL_ARB_compressed_texture_pixel_storage();
+    }
+    if (__GLeeCheckExtension("GL_ARB_conservative_depth", &extensionNames) )
+    {
+        _GLEE_ARB_conservative_depth = GL_TRUE;
+        __GLeeLink_GL_ARB_conservative_depth();
+    }
+    if (__GLeeCheckExtension("GL_ARB_internalformat_query", &extensionNames) )
+    {
+        _GLEE_ARB_internalformat_query = GL_TRUE;
+        __GLeeLink_GL_ARB_internalformat_query();
+    }
+    if (__GLeeCheckExtension("GL_ARB_map_buffer_alignment", &extensionNames) )
+    {
+        _GLEE_ARB_map_buffer_alignment = GL_TRUE;
+        __GLeeLink_GL_ARB_map_buffer_alignment();
+    }
+    if (__GLeeCheckExtension("GL_ARB_shader_atomic_counters", &extensionNames) )
+    {
+        _GLEE_ARB_shader_atomic_counters = GL_TRUE;
+        __GLeeLink_GL_ARB_shader_atomic_counters();
+    }
+    if (__GLeeCheckExtension("GL_ARB_shader_image_load_store", &extensionNames) )
+    {
+        _GLEE_ARB_shader_image_load_store = GL_TRUE;
+        __GLeeLink_GL_ARB_shader_image_load_store();
+    }
+    if (__GLeeCheckExtension("GL_ARB_shading_language_packing", &extensionNames) )
+    {
+        _GLEE_ARB_shading_language_packing = GL_TRUE;
+        __GLeeLink_GL_ARB_shading_language_packing();
+    }
+    if (__GLeeCheckExtension("GL_ARB_texture_storage", &extensionNames) )
+    {
+        _GLEE_ARB_texture_storage = GL_TRUE;
+        __GLeeLink_GL_ARB_texture_storage();
+    }
+    if (__GLeeCheckExtension("GL_EXT_abgr", &extensionNames) )
+    {
+        _GLEE_EXT_abgr = GL_TRUE;
+        __GLeeLink_GL_EXT_abgr();
+    }
+    if (__GLeeCheckExtension("GL_EXT_blend_color", &extensionNames) )
+    {
+        _GLEE_EXT_blend_color = GL_TRUE;
+        __GLeeLink_GL_EXT_blend_color();
+    }
+    if (__GLeeCheckExtension("GL_EXT_polygon_offset", &extensionNames) )
+    {
+        _GLEE_EXT_polygon_offset = GL_TRUE;
+        __GLeeLink_GL_EXT_polygon_offset();
+    }
+    if (__GLeeCheckExtension("GL_EXT_texture", &extensionNames) )
+    {
+        _GLEE_EXT_texture = GL_TRUE;
+        __GLeeLink_GL_EXT_texture();
+    }
+    if (__GLeeCheckExtension("GL_EXT_texture3D", &extensionNames) )
+    {
+        _GLEE_EXT_texture3D = GL_TRUE;
+        __GLeeLink_GL_EXT_texture3D();
+    }
+    if (__GLeeCheckExtension("GL_SGIS_texture_filter4", &extensionNames) )
+    {
+        _GLEE_SGIS_texture_filter4 = GL_TRUE;
+        __GLeeLink_GL_SGIS_texture_filter4();
+    }
+    if (__GLeeCheckExtension("GL_EXT_subtexture", &extensionNames) )
+    {
+        _GLEE_EXT_subtexture = GL_TRUE;
+        __GLeeLink_GL_EXT_subtexture();
+    }
+    if (__GLeeCheckExtension("GL_EXT_copy_texture", &extensionNames) )
+    {
+        _GLEE_EXT_copy_texture = GL_TRUE;
+        __GLeeLink_GL_EXT_copy_texture();
+    }
+    if (__GLeeCheckExtension("GL_EXT_histogram", &extensionNames) )
+    {
+        _GLEE_EXT_histogram = GL_TRUE;
+        __GLeeLink_GL_EXT_histogram();
+    }
+    if (__GLeeCheckExtension("GL_EXT_convolution", &extensionNames) )
+    {
+        _GLEE_EXT_convolution = GL_TRUE;
+        __GLeeLink_GL_EXT_convolution();
+    }
+    if (__GLeeCheckExtension("GL_SGI_color_matrix", &extensionNames) )
+    {
+        _GLEE_SGI_color_matrix = GL_TRUE;
+        __GLeeLink_GL_SGI_color_matrix();
+    }
+    if (__GLeeCheckExtension("GL_SGI_color_table", &extensionNames) )
+    {
+        _GLEE_SGI_color_table = GL_TRUE;
+        __GLeeLink_GL_SGI_color_table();
+    }
+    if (__GLeeCheckExtension("GL_SGIS_pixel_texture", &extensionNames) )
+    {
+        _GLEE_SGIS_pixel_texture = GL_TRUE;
+        __GLeeLink_GL_SGIS_pixel_texture();
+    }
+    if (__GLeeCheckExtension("GL_SGIX_pixel_texture", &extensionNames) )
+    {
+        _GLEE_SGIX_pixel_texture = GL_TRUE;
+        __GLeeLink_GL_SGIX_pixel_texture();
+    }
+    if (__GLeeCheckExtension("GL_SGIS_texture4D", &extensionNames) )
+    {
+        _GLEE_SGIS_texture4D = GL_TRUE;
+        __GLeeLink_GL_SGIS_texture4D();
+    }
+    if (__GLeeCheckExtension("GL_SGI_texture_color_table", &extensionNames) )
+    {
+        _GLEE_SGI_texture_color_table = GL_TRUE;
+        __GLeeLink_GL_SGI_texture_color_table();
+    }
+    if (__GLeeCheckExtension("GL_EXT_cmyka", &extensionNames) )
+    {
+        _GLEE_EXT_cmyka = GL_TRUE;
+        __GLeeLink_GL_EXT_cmyka();
+    }
+    if (__GLeeCheckExtension("GL_EXT_texture_object", &extensionNames) )
+    {
+        _GLEE_EXT_texture_object = GL_TRUE;
+        __GLeeLink_GL_EXT_texture_object();
+    }
+    if (__GLeeCheckExtension("GL_SGIS_detail_texture", &extensionNames) )
+    {
+        _GLEE_SGIS_detail_texture = GL_TRUE;
+        __GLeeLink_GL_SGIS_detail_texture();
+    }
+    if (__GLeeCheckExtension("GL_SGIS_sharpen_texture", &extensionNames) )
+    {
+        _GLEE_SGIS_sharpen_texture = GL_TRUE;
+        __GLeeLink_GL_SGIS_sharpen_texture();
+    }
+    if (__GLeeCheckExtension("GL_EXT_packed_pixels", &extensionNames) )
+    {
+        _GLEE_EXT_packed_pixels = GL_TRUE;
+        __GLeeLink_GL_EXT_packed_pixels();
+    }
+    if (__GLeeCheckExtension("GL_SGIS_texture_lod", &extensionNames) )
+    {
+        _GLEE_SGIS_texture_lod = GL_TRUE;
+        __GLeeLink_GL_SGIS_texture_lod();
+    }
+    if (__GLeeCheckExtension("GL_SGIS_multisample", &extensionNames) )
+    {
+        _GLEE_SGIS_multisample = GL_TRUE;
+        __GLeeLink_GL_SGIS_multisample();
+    }
+    if (__GLeeCheckExtension("GL_EXT_rescale_normal", &extensionNames) )
+    {
+        _GLEE_EXT_rescale_normal = GL_TRUE;
+        __GLeeLink_GL_EXT_rescale_normal();
+    }
+    if (__GLeeCheckExtension("GL_EXT_vertex_array", &extensionNames) )
+    {
+        _GLEE_EXT_vertex_array = GL_TRUE;
+        __GLeeLink_GL_EXT_vertex_array();
+    }
+    if (__GLeeCheckExtension("GL_EXT_misc_attribute", &extensionNames) )
+    {
+        _GLEE_EXT_misc_attribute = GL_TRUE;
+        __GLeeLink_GL_EXT_misc_attribute();
+    }
+    if (__GLeeCheckExtension("GL_SGIS_generate_mipmap", &extensionNames) )
+    {
+        _GLEE_SGIS_generate_mipmap = GL_TRUE;
+        __GLeeLink_GL_SGIS_generate_mipmap();
+    }
+    if (__GLeeCheckExtension("GL_SGIX_clipmap", &extensionNames) )
+    {
+        _GLEE_SGIX_clipmap = GL_TRUE;
+        __GLeeLink_GL_SGIX_clipmap();
+    }
+    if (__GLeeCheckExtension("GL_SGIX_shadow", &extensionNames) )
+    {
+        _GLEE_SGIX_shadow = GL_TRUE;
+        __GLeeLink_GL_SGIX_shadow();
+    }
+    if (__GLeeCheckExtension("GL_SGIS_texture_edge_clamp", &extensionNames) )
+    {
+        _GLEE_SGIS_texture_edge_clamp = GL_TRUE;
+        __GLeeLink_GL_SGIS_texture_edge_clamp();
+    }
+    if (__GLeeCheckExtension("GL_SGIS_texture_border_clamp", &extensionNames) )
+    {
+        _GLEE_SGIS_texture_border_clamp = GL_TRUE;
+        __GLeeLink_GL_SGIS_texture_border_clamp();
+    }
+    if (__GLeeCheckExtension("GL_EXT_blend_minmax", &extensionNames) )
+    {
+        _GLEE_EXT_blend_minmax = GL_TRUE;
+        __GLeeLink_GL_EXT_blend_minmax();
+    }
+    if (__GLeeCheckExtension("GL_EXT_blend_subtract", &extensionNames) )
+    {
+        _GLEE_EXT_blend_subtract = GL_TRUE;
+        __GLeeLink_GL_EXT_blend_subtract();
+    }
+    if (__GLeeCheckExtension("GL_EXT_blend_logic_op", &extensionNames) )
+    {
+        _GLEE_EXT_blend_logic_op = GL_TRUE;
+        __GLeeLink_GL_EXT_blend_logic_op();
+    }
+    if (__GLeeCheckExtension("GL_SGIX_interlace", &extensionNames) )
+    {
+        _GLEE_SGIX_interlace = GL_TRUE;
+        __GLeeLink_GL_SGIX_interlace();
+    }
+    if (__GLeeCheckExtension("GL_SGIX_pixel_tiles", &extensionNames) )
+    {
+        _GLEE_SGIX_pixel_tiles = GL_TRUE;
+        __GLeeLink_GL_SGIX_pixel_tiles();
+    }
+    if (__GLeeCheckExtension("GL_SGIS_texture_select", &extensionNames) )
+    {
+        _GLEE_SGIS_texture_select = GL_TRUE;
+        __GLeeLink_GL_SGIS_texture_select();
+    }
+    if (__GLeeCheckExtension("GL_SGIX_sprite", &extensionNames) )
+    {
+        _GLEE_SGIX_sprite = GL_TRUE;
+        __GLeeLink_GL_SGIX_sprite();
+    }
+    if (__GLeeCheckExtension("GL_SGIX_texture_multi_buffer", &extensionNames) )
+    {
+        _GLEE_SGIX_texture_multi_buffer = GL_TRUE;
+        __GLeeLink_GL_SGIX_texture_multi_buffer();
+    }
+    if (__GLeeCheckExtension("GL_EXT_point_parameters", &extensionNames) )
+    {
+        _GLEE_EXT_point_parameters = GL_TRUE;
+        __GLeeLink_GL_EXT_point_parameters();
+    }
+    if (__GLeeCheckExtension("GL_SGIS_point_parameters", &extensionNames) )
+    {
+        _GLEE_SGIS_point_parameters = GL_TRUE;
+        __GLeeLink_GL_SGIS_point_parameters();
+    }
+    if (__GLeeCheckExtension("GL_SGIX_instruments", &extensionNames) )
+    {
+        _GLEE_SGIX_instruments = GL_TRUE;
+        __GLeeLink_GL_SGIX_instruments();
+    }
+    if (__GLeeCheckExtension("GL_SGIX_texture_scale_bias", &extensionNames) )
+    {
+        _GLEE_SGIX_texture_scale_bias = GL_TRUE;
+        __GLeeLink_GL_SGIX_texture_scale_bias();
+    }
+    if (__GLeeCheckExtension("GL_SGIX_framezoom", &extensionNames) )
+    {
+        _GLEE_SGIX_framezoom = GL_TRUE;
+        __GLeeLink_GL_SGIX_framezoom();
+    }
+    if (__GLeeCheckExtension("GL_SGIX_tag_sample_buffer", &extensionNames) )
+    {
+        _GLEE_SGIX_tag_sample_buffer = GL_TRUE;
+        __GLeeLink_GL_SGIX_tag_sample_buffer();
+    }
+    if (__GLeeCheckExtension("GL_FfdMaskSGIX", &extensionNames) )
+    {
+        _GLEE_FfdMaskSGIX = GL_TRUE;
+        __GLeeLink_GL_FfdMaskSGIX();
+    }
+    if (__GLeeCheckExtension("GL_SGIX_polynomial_ffd", &extensionNames) )
+    {
+        _GLEE_SGIX_polynomial_ffd = GL_TRUE;
+        __GLeeLink_GL_SGIX_polynomial_ffd();
+    }
+    if (__GLeeCheckExtension("GL_SGIX_reference_plane", &extensionNames) )
+    {
+        _GLEE_SGIX_reference_plane = GL_TRUE;
+        __GLeeLink_GL_SGIX_reference_plane();
+    }
+    if (__GLeeCheckExtension("GL_SGIX_flush_raster", &extensionNames) )
+    {
+        _GLEE_SGIX_flush_raster = GL_TRUE;
+        __GLeeLink_GL_SGIX_flush_raster();
+    }
+    if (__GLeeCheckExtension("GL_SGIX_depth_texture", &extensionNames) )
+    {
+        _GLEE_SGIX_depth_texture = GL_TRUE;
+        __GLeeLink_GL_SGIX_depth_texture();
+    }
+    if (__GLeeCheckExtension("GL_SGIS_fog_function", &extensionNames) )
+    {
+        _GLEE_SGIS_fog_function = GL_TRUE;
+        __GLeeLink_GL_SGIS_fog_function();
+    }
+    if (__GLeeCheckExtension("GL_SGIX_fog_offset", &extensionNames) )
+    {
+        _GLEE_SGIX_fog_offset = GL_TRUE;
+        __GLeeLink_GL_SGIX_fog_offset();
+    }
+    if (__GLeeCheckExtension("GL_HP_image_transform", &extensionNames) )
+    {
+        _GLEE_HP_image_transform = GL_TRUE;
+        __GLeeLink_GL_HP_image_transform();
+    }
+    if (__GLeeCheckExtension("GL_HP_convolution_border_modes", &extensionNames) )
+    {
+        _GLEE_HP_convolution_border_modes = GL_TRUE;
+        __GLeeLink_GL_HP_convolution_border_modes();
+    }
+    if (__GLeeCheckExtension("GL_INGR_palette_buffer", &extensionNames) )
+    {
+        _GLEE_INGR_palette_buffer = GL_TRUE;
+        __GLeeLink_GL_INGR_palette_buffer();
+    }
+    if (__GLeeCheckExtension("GL_SGIX_texture_add_env", &extensionNames) )
+    {
+        _GLEE_SGIX_texture_add_env = GL_TRUE;
+        __GLeeLink_GL_SGIX_texture_add_env();
+    }
+    if (__GLeeCheckExtension("GL_EXT_color_subtable", &extensionNames) )
+    {
+        _GLEE_EXT_color_subtable = GL_TRUE;
+        __GLeeLink_GL_EXT_color_subtable();
+    }
+    if (__GLeeCheckExtension("GL_PGI_vertex_hints", &extensionNames) )
+    {
+        _GLEE_PGI_vertex_hints = GL_TRUE;
+        __GLeeLink_GL_PGI_vertex_hints();
+    }
+    if (__GLeeCheckExtension("GL_PGI_misc_hints", &extensionNames) )
+    {
+        _GLEE_PGI_misc_hints = GL_TRUE;
+        __GLeeLink_GL_PGI_misc_hints();
+    }
+    if (__GLeeCheckExtension("GL_EXT_paletted_texture", &extensionNames) )
+    {
+        _GLEE_EXT_paletted_texture = GL_TRUE;
+        __GLeeLink_GL_EXT_paletted_texture();
+    }
+    if (__GLeeCheckExtension("GL_EXT_clip_volume_hint", &extensionNames) )
+    {
+        _GLEE_EXT_clip_volume_hint = GL_TRUE;
+        __GLeeLink_GL_EXT_clip_volume_hint();
+    }
+    if (__GLeeCheckExtension("GL_SGIX_list_priority", &extensionNames) )
+    {
+        _GLEE_SGIX_list_priority = GL_TRUE;
+        __GLeeLink_GL_SGIX_list_priority();
+    }
+    if (__GLeeCheckExtension("GL_SGIX_ir_instrument1", &extensionNames) )
+    {
+        _GLEE_SGIX_ir_instrument1 = GL_TRUE;
+        __GLeeLink_GL_SGIX_ir_instrument1();
+    }
+    if (__GLeeCheckExtension("GL_SGIX_calligraphic_fragment", &extensionNames) )
+    {
+        _GLEE_SGIX_calligraphic_fragment = GL_TRUE;
+        __GLeeLink_GL_SGIX_calligraphic_fragment();
+    }
+    if (__GLeeCheckExtension("GL_SGIX_texture_lod_bias", &extensionNames) )
+    {
+        _GLEE_SGIX_texture_lod_bias = GL_TRUE;
+        __GLeeLink_GL_SGIX_texture_lod_bias();
+    }
+    if (__GLeeCheckExtension("GL_SGIX_shadow_ambient", &extensionNames) )
+    {
+        _GLEE_SGIX_shadow_ambient = GL_TRUE;
+        __GLeeLink_GL_SGIX_shadow_ambient();
+    }
+    if (__GLeeCheckExtension("GL_EXT_index_texture", &extensionNames) )
+    {
+        _GLEE_EXT_index_texture = GL_TRUE;
+        __GLeeLink_GL_EXT_index_texture();
+    }
+    if (__GLeeCheckExtension("GL_EXT_index_material", &extensionNames) )
+    {
+        _GLEE_EXT_index_material = GL_TRUE;
+        __GLeeLink_GL_EXT_index_material();
+    }
+    if (__GLeeCheckExtension("GL_EXT_index_func", &extensionNames) )
+    {
+        _GLEE_EXT_index_func = GL_TRUE;
+        __GLeeLink_GL_EXT_index_func();
+    }
+    if (__GLeeCheckExtension("GL_EXT_index_array_formats", &extensionNames) )
+    {
+        _GLEE_EXT_index_array_formats = GL_TRUE;
+        __GLeeLink_GL_EXT_index_array_formats();
+    }
+    if (__GLeeCheckExtension("GL_EXT_compiled_vertex_array", &extensionNames) )
+    {
+        _GLEE_EXT_compiled_vertex_array = GL_TRUE;
+        __GLeeLink_GL_EXT_compiled_vertex_array();
+    }
+    if (__GLeeCheckExtension("GL_EXT_cull_vertex", &extensionNames) )
+    {
+        _GLEE_EXT_cull_vertex = GL_TRUE;
+        __GLeeLink_GL_EXT_cull_vertex();
+    }
+    if (__GLeeCheckExtension("GL_SGIX_ycrcb", &extensionNames) )
+    {
+        _GLEE_SGIX_ycrcb = GL_TRUE;
+        __GLeeLink_GL_SGIX_ycrcb();
+    }
+    if (__GLeeCheckExtension("GL_SGIX_fragment_lighting", &extensionNames) )
+    {
+        _GLEE_SGIX_fragment_lighting = GL_TRUE;
+        __GLeeLink_GL_SGIX_fragment_lighting();
+    }
+    if (__GLeeCheckExtension("GL_IBM_rasterpos_clip", &extensionNames) )
+    {
+        _GLEE_IBM_rasterpos_clip = GL_TRUE;
+        __GLeeLink_GL_IBM_rasterpos_clip();
+    }
+    if (__GLeeCheckExtension("GL_HP_texture_lighting", &extensionNames) )
+    {
+        _GLEE_HP_texture_lighting = GL_TRUE;
+        __GLeeLink_GL_HP_texture_lighting();
+    }
+    if (__GLeeCheckExtension("GL_EXT_draw_range_elements", &extensionNames) )
+    {
+        _GLEE_EXT_draw_range_elements = GL_TRUE;
+        __GLeeLink_GL_EXT_draw_range_elements();
+    }
+    if (__GLeeCheckExtension("GL_WIN_phong_shading", &extensionNames) )
+    {
+        _GLEE_WIN_phong_shading = GL_TRUE;
+        __GLeeLink_GL_WIN_phong_shading();
+    }
+    if (__GLeeCheckExtension("GL_WIN_specular_fog", &extensionNames) )
+    {
+        _GLEE_WIN_specular_fog = GL_TRUE;
+        __GLeeLink_GL_WIN_specular_fog();
+    }
+    if (__GLeeCheckExtension("GL_EXT_light_texture", &extensionNames) )
+    {
+        _GLEE_EXT_light_texture = GL_TRUE;
+        __GLeeLink_GL_EXT_light_texture();
+    }
+    if (__GLeeCheckExtension("GL_SGIX_blend_alpha_minmax", &extensionNames) )
+    {
+        _GLEE_SGIX_blend_alpha_minmax = GL_TRUE;
+        __GLeeLink_GL_SGIX_blend_alpha_minmax();
+    }
+    if (__GLeeCheckExtension("GL_SGIX_impact_pixel_texture", &extensionNames) )
+    {
+        _GLEE_SGIX_impact_pixel_texture = GL_TRUE;
+        __GLeeLink_GL_SGIX_impact_pixel_texture();
+    }
+    if (__GLeeCheckExtension("GL_EXT_bgra", &extensionNames) )
+    {
+        _GLEE_EXT_bgra = GL_TRUE;
+        __GLeeLink_GL_EXT_bgra();
+    }
+    if (__GLeeCheckExtension("GL_SGIX_async", &extensionNames) )
+    {
+        _GLEE_SGIX_async = GL_TRUE;
+        __GLeeLink_GL_SGIX_async();
+    }
+    if (__GLeeCheckExtension("GL_SGIX_async_pixel", &extensionNames) )
+    {
+        _GLEE_SGIX_async_pixel = GL_TRUE;
+        __GLeeLink_GL_SGIX_async_pixel();
+    }
+    if (__GLeeCheckExtension("GL_SGIX_async_histogram", &extensionNames) )
+    {
+        _GLEE_SGIX_async_histogram = GL_TRUE;
+        __GLeeLink_GL_SGIX_async_histogram();
+    }
+    if (__GLeeCheckExtension("GL_INTEL_texture_scissor", &extensionNames) )
+    {
+        _GLEE_INTEL_texture_scissor = GL_TRUE;
+        __GLeeLink_GL_INTEL_texture_scissor();
+    }
+    if (__GLeeCheckExtension("GL_INTEL_parallel_arrays", &extensionNames) )
+    {
+        _GLEE_INTEL_parallel_arrays = GL_TRUE;
+        __GLeeLink_GL_INTEL_parallel_arrays();
+    }
+    if (__GLeeCheckExtension("GL_HP_occlusion_test", &extensionNames) )
+    {
+        _GLEE_HP_occlusion_test = GL_TRUE;
+        __GLeeLink_GL_HP_occlusion_test();
+    }
+    if (__GLeeCheckExtension("GL_EXT_pixel_transform", &extensionNames) )
+    {
+        _GLEE_EXT_pixel_transform = GL_TRUE;
+        __GLeeLink_GL_EXT_pixel_transform();
+    }
+    if (__GLeeCheckExtension("GL_EXT_pixel_transform_color_table", &extensionNames) )
+    {
+        _GLEE_EXT_pixel_transform_color_table = GL_TRUE;
+        __GLeeLink_GL_EXT_pixel_transform_color_table();
+    }
+    if (__GLeeCheckExtension("GL_EXT_shared_texture_palette", &extensionNames) )
+    {
+        _GLEE_EXT_shared_texture_palette = GL_TRUE;
+        __GLeeLink_GL_EXT_shared_texture_palette();
+    }
+    if (__GLeeCheckExtension("GL_EXT_separate_specular_color", &extensionNames) )
+    {
+        _GLEE_EXT_separate_specular_color = GL_TRUE;
+        __GLeeLink_GL_EXT_separate_specular_color();
+    }
+    if (__GLeeCheckExtension("GL_EXT_secondary_color", &extensionNames) )
+    {
+        _GLEE_EXT_secondary_color = GL_TRUE;
+        __GLeeLink_GL_EXT_secondary_color();
+    }
+    if (__GLeeCheckExtension("GL_EXT_texture_perturb_normal", &extensionNames) )
+    {
+        _GLEE_EXT_texture_perturb_normal = GL_TRUE;
+        __GLeeLink_GL_EXT_texture_perturb_normal();
+    }
+    if (__GLeeCheckExtension("GL_EXT_multi_draw_arrays", &extensionNames) )
+    {
+        _GLEE_EXT_multi_draw_arrays = GL_TRUE;
+        __GLeeLink_GL_EXT_multi_draw_arrays();
+    }
+    if (__GLeeCheckExtension("GL_EXT_fog_coord", &extensionNames) )
+    {
+        _GLEE_EXT_fog_coord = GL_TRUE;
+        __GLeeLink_GL_EXT_fog_coord();
+    }
+    if (__GLeeCheckExtension("GL_REND_screen_coordinates", &extensionNames) )
+    {
+        _GLEE_REND_screen_coordinates = GL_TRUE;
+        __GLeeLink_GL_REND_screen_coordinates();
+    }
+    if (__GLeeCheckExtension("GL_EXT_coordinate_frame", &extensionNames) )
+    {
+        _GLEE_EXT_coordinate_frame = GL_TRUE;
+        __GLeeLink_GL_EXT_coordinate_frame();
+    }
+    if (__GLeeCheckExtension("GL_EXT_texture_env_combine", &extensionNames) )
+    {
+        _GLEE_EXT_texture_env_combine = GL_TRUE;
+        __GLeeLink_GL_EXT_texture_env_combine();
+    }
+    if (__GLeeCheckExtension("GL_APPLE_specular_vector", &extensionNames) )
+    {
+        _GLEE_APPLE_specular_vector = GL_TRUE;
+        __GLeeLink_GL_APPLE_specular_vector();
+    }
+    if (__GLeeCheckExtension("GL_APPLE_transform_hint", &extensionNames) )
+    {
+        _GLEE_APPLE_transform_hint = GL_TRUE;
+        __GLeeLink_GL_APPLE_transform_hint();
+    }
+    if (__GLeeCheckExtension("GL_SGIX_fog_scale", &extensionNames) )
+    {
+        _GLEE_SGIX_fog_scale = GL_TRUE;
+        __GLeeLink_GL_SGIX_fog_scale();
+    }
+    if (__GLeeCheckExtension("GL_SUNX_constant_data", &extensionNames) )
+    {
+        _GLEE_SUNX_constant_data = GL_TRUE;
+        __GLeeLink_GL_SUNX_constant_data();
+    }
+    if (__GLeeCheckExtension("GL_SUN_global_alpha", &extensionNames) )
+    {
+        _GLEE_SUN_global_alpha = GL_TRUE;
+        __GLeeLink_GL_SUN_global_alpha();
+    }
+    if (__GLeeCheckExtension("GL_SUN_triangle_list", &extensionNames) )
+    {
+        _GLEE_SUN_triangle_list = GL_TRUE;
+        __GLeeLink_GL_SUN_triangle_list();
+    }
+    if (__GLeeCheckExtension("GL_SUN_vertex", &extensionNames) )
+    {
+        _GLEE_SUN_vertex = GL_TRUE;
+        __GLeeLink_GL_SUN_vertex();
+    }
+    if (__GLeeCheckExtension("GL_EXT_blend_func_separate", &extensionNames) )
+    {
+        _GLEE_EXT_blend_func_separate = GL_TRUE;
+        __GLeeLink_GL_EXT_blend_func_separate();
+    }
+    if (__GLeeCheckExtension("GL_INGR_color_clamp", &extensionNames) )
+    {
+        _GLEE_INGR_color_clamp = GL_TRUE;
+        __GLeeLink_GL_INGR_color_clamp();
+    }
+    if (__GLeeCheckExtension("GL_INGR_interlace_read", &extensionNames) )
+    {
+        _GLEE_INGR_interlace_read = GL_TRUE;
+        __GLeeLink_GL_INGR_interlace_read();
+    }
+    if (__GLeeCheckExtension("GL_EXT_stencil_wrap", &extensionNames) )
+    {
+        _GLEE_EXT_stencil_wrap = GL_TRUE;
+        __GLeeLink_GL_EXT_stencil_wrap();
+    }
+    if (__GLeeCheckExtension("GL_EXT_422_pixels", &extensionNames) )
+    {
+        _GLEE_EXT_422_pixels = GL_TRUE;
+        __GLeeLink_GL_EXT_422_pixels();
+    }
+    if (__GLeeCheckExtension("GL_NV_texgen_reflection", &extensionNames) )
+    {
+        _GLEE_NV_texgen_reflection = GL_TRUE;
+        __GLeeLink_GL_NV_texgen_reflection();
+    }
+    if (__GLeeCheckExtension("GL_EXT_texture_cube_map", &extensionNames) )
+    {
+        _GLEE_EXT_texture_cube_map = GL_TRUE;
+        __GLeeLink_GL_EXT_texture_cube_map();
+    }
+    if (__GLeeCheckExtension("GL_SUN_convolution_border_modes", &extensionNames) )
+    {
+        _GLEE_SUN_convolution_border_modes = GL_TRUE;
+        __GLeeLink_GL_SUN_convolution_border_modes();
+    }
+    if (__GLeeCheckExtension("GL_EXT_texture_env_add", &extensionNames) )
+    {
+        _GLEE_EXT_texture_env_add = GL_TRUE;
+        __GLeeLink_GL_EXT_texture_env_add();
+    }
+    if (__GLeeCheckExtension("GL_EXT_texture_lod_bias", &extensionNames) )
+    {
+        _GLEE_EXT_texture_lod_bias = GL_TRUE;
+        __GLeeLink_GL_EXT_texture_lod_bias();
+    }
+    if (__GLeeCheckExtension("GL_EXT_texture_filter_anisotropic", &extensionNames) )
+    {
+        _GLEE_EXT_texture_filter_anisotropic = GL_TRUE;
+        __GLeeLink_GL_EXT_texture_filter_anisotropic();
+    }
+    if (__GLeeCheckExtension("GL_EXT_vertex_weighting", &extensionNames) )
+    {
+        _GLEE_EXT_vertex_weighting = GL_TRUE;
+        __GLeeLink_GL_EXT_vertex_weighting();
+    }
+    if (__GLeeCheckExtension("GL_NV_light_max_exponent", &extensionNames) )
+    {
+        _GLEE_NV_light_max_exponent = GL_TRUE;
+        __GLeeLink_GL_NV_light_max_exponent();
+    }
+    if (__GLeeCheckExtension("GL_NV_vertex_array_range", &extensionNames) )
+    {
+        _GLEE_NV_vertex_array_range = GL_TRUE;
+        __GLeeLink_GL_NV_vertex_array_range();
+    }
+    if (__GLeeCheckExtension("GL_NV_register_combiners", &extensionNames) )
+    {
+        _GLEE_NV_register_combiners = GL_TRUE;
+        __GLeeLink_GL_NV_register_combiners();
+    }
+    if (__GLeeCheckExtension("GL_NV_fog_distance", &extensionNames) )
+    {
+        _GLEE_NV_fog_distance = GL_TRUE;
+        __GLeeLink_GL_NV_fog_distance();
+    }
+    if (__GLeeCheckExtension("GL_NV_texgen_emboss", &extensionNames) )
+    {
+        _GLEE_NV_texgen_emboss = GL_TRUE;
+        __GLeeLink_GL_NV_texgen_emboss();
+    }
+    if (__GLeeCheckExtension("GL_NV_blend_square", &extensionNames) )
+    {
+        _GLEE_NV_blend_square = GL_TRUE;
+        __GLeeLink_GL_NV_blend_square();
+    }
+    if (__GLeeCheckExtension("GL_NV_texture_env_combine4", &extensionNames) )
+    {
+        _GLEE_NV_texture_env_combine4 = GL_TRUE;
+        __GLeeLink_GL_NV_texture_env_combine4();
+    }
+    if (__GLeeCheckExtension("GL_MESA_resize_buffers", &extensionNames) )
+    {
+        _GLEE_MESA_resize_buffers = GL_TRUE;
+        __GLeeLink_GL_MESA_resize_buffers();
+    }
+    if (__GLeeCheckExtension("GL_MESA_window_pos", &extensionNames) )
+    {
+        _GLEE_MESA_window_pos = GL_TRUE;
+        __GLeeLink_GL_MESA_window_pos();
+    }
+    if (__GLeeCheckExtension("GL_EXT_texture_compression_s3tc", &extensionNames) )
+    {
+        _GLEE_EXT_texture_compression_s3tc = GL_TRUE;
+        __GLeeLink_GL_EXT_texture_compression_s3tc();
+    }
+    if (__GLeeCheckExtension("GL_IBM_cull_vertex", &extensionNames) )
+    {
+        _GLEE_IBM_cull_vertex = GL_TRUE;
+        __GLeeLink_GL_IBM_cull_vertex();
+    }
+    if (__GLeeCheckExtension("GL_IBM_multimode_draw_arrays", &extensionNames) )
+    {
+        _GLEE_IBM_multimode_draw_arrays = GL_TRUE;
+        __GLeeLink_GL_IBM_multimode_draw_arrays();
+    }
+    if (__GLeeCheckExtension("GL_IBM_vertex_array_lists", &extensionNames) )
+    {
+        _GLEE_IBM_vertex_array_lists = GL_TRUE;
+        __GLeeLink_GL_IBM_vertex_array_lists();
+    }
+    if (__GLeeCheckExtension("GL_SGIX_subsample", &extensionNames) )
+    {
+        _GLEE_SGIX_subsample = GL_TRUE;
+        __GLeeLink_GL_SGIX_subsample();
+    }
+    if (__GLeeCheckExtension("GL_SGIX_ycrcb_subsample", &extensionNames) )
+    {
+        _GLEE_SGIX_ycrcb_subsample = GL_TRUE;
+        __GLeeLink_GL_SGIX_ycrcb_subsample();
+    }
+    if (__GLeeCheckExtension("GL_SGIX_ycrcba", &extensionNames) )
+    {
+        _GLEE_SGIX_ycrcba = GL_TRUE;
+        __GLeeLink_GL_SGIX_ycrcba();
+    }
+    if (__GLeeCheckExtension("GL_SGI_depth_pass_instrument", &extensionNames) )
+    {
+        _GLEE_SGI_depth_pass_instrument = GL_TRUE;
+        __GLeeLink_GL_SGI_depth_pass_instrument();
+    }
+    if (__GLeeCheckExtension("GL_3DFX_texture_compression_FXT1", &extensionNames) )
+    {
+        _GLEE_3DFX_texture_compression_FXT1 = GL_TRUE;
+        __GLeeLink_GL_3DFX_texture_compression_FXT1();
+    }
+    if (__GLeeCheckExtension("GL_3DFX_multisample", &extensionNames) )
+    {
+        _GLEE_3DFX_multisample = GL_TRUE;
+        __GLeeLink_GL_3DFX_multisample();
+    }
+    if (__GLeeCheckExtension("GL_3DFX_tbuffer", &extensionNames) )
+    {
+        _GLEE_3DFX_tbuffer = GL_TRUE;
+        __GLeeLink_GL_3DFX_tbuffer();
+    }
+    if (__GLeeCheckExtension("GL_EXT_multisample", &extensionNames) )
+    {
+        _GLEE_EXT_multisample = GL_TRUE;
+        __GLeeLink_GL_EXT_multisample();
+    }
+    if (__GLeeCheckExtension("GL_SGIX_vertex_preclip", &extensionNames) )
+    {
+        _GLEE_SGIX_vertex_preclip = GL_TRUE;
+        __GLeeLink_GL_SGIX_vertex_preclip();
+    }
+    if (__GLeeCheckExtension("GL_SGIX_convolution_accuracy", &extensionNames) )
+    {
+        _GLEE_SGIX_convolution_accuracy = GL_TRUE;
+        __GLeeLink_GL_SGIX_convolution_accuracy();
+    }
+    if (__GLeeCheckExtension("GL_SGIX_resample", &extensionNames) )
+    {
+        _GLEE_SGIX_resample = GL_TRUE;
+        __GLeeLink_GL_SGIX_resample();
+    }
+    if (__GLeeCheckExtension("GL_SGIS_point_line_texgen", &extensionNames) )
+    {
+        _GLEE_SGIS_point_line_texgen = GL_TRUE;
+        __GLeeLink_GL_SGIS_point_line_texgen();
+    }
+    if (__GLeeCheckExtension("GL_SGIS_texture_color_mask", &extensionNames) )
+    {
+        _GLEE_SGIS_texture_color_mask = GL_TRUE;
+        __GLeeLink_GL_SGIS_texture_color_mask();
+    }
+    if (__GLeeCheckExtension("GL_EXT_texture_env_dot3", &extensionNames) )
+    {
+        _GLEE_EXT_texture_env_dot3 = GL_TRUE;
+        __GLeeLink_GL_EXT_texture_env_dot3();
+    }
+    if (__GLeeCheckExtension("GL_ATI_texture_mirror_once", &extensionNames) )
+    {
+        _GLEE_ATI_texture_mirror_once = GL_TRUE;
+        __GLeeLink_GL_ATI_texture_mirror_once();
+    }
+    if (__GLeeCheckExtension("GL_NV_fence", &extensionNames) )
+    {
+        _GLEE_NV_fence = GL_TRUE;
+        __GLeeLink_GL_NV_fence();
+    }
+    if (__GLeeCheckExtension("GL_IBM_texture_mirrored_repeat", &extensionNames) )
+    {
+        _GLEE_IBM_texture_mirrored_repeat = GL_TRUE;
+        __GLeeLink_GL_IBM_texture_mirrored_repeat();
+    }
+    if (__GLeeCheckExtension("GL_NV_evaluators", &extensionNames) )
+    {
+        _GLEE_NV_evaluators = GL_TRUE;
+        __GLeeLink_GL_NV_evaluators();
+    }
+    if (__GLeeCheckExtension("GL_NV_packed_depth_stencil", &extensionNames) )
+    {
+        _GLEE_NV_packed_depth_stencil = GL_TRUE;
+        __GLeeLink_GL_NV_packed_depth_stencil();
+    }
+    if (__GLeeCheckExtension("GL_NV_register_combiners2", &extensionNames) )
+    {
+        _GLEE_NV_register_combiners2 = GL_TRUE;
+        __GLeeLink_GL_NV_register_combiners2();
+    }
+    if (__GLeeCheckExtension("GL_NV_texture_compression_vtc", &extensionNames) )
+    {
+        _GLEE_NV_texture_compression_vtc = GL_TRUE;
+        __GLeeLink_GL_NV_texture_compression_vtc();
+    }
+    if (__GLeeCheckExtension("GL_NV_texture_rectangle", &extensionNames) )
+    {
+        _GLEE_NV_texture_rectangle = GL_TRUE;
+        __GLeeLink_GL_NV_texture_rectangle();
+    }
+    if (__GLeeCheckExtension("GL_NV_texture_shader", &extensionNames) )
+    {
+        _GLEE_NV_texture_shader = GL_TRUE;
+        __GLeeLink_GL_NV_texture_shader();
+    }
+    if (__GLeeCheckExtension("GL_NV_texture_shader2", &extensionNames) )
+    {
+        _GLEE_NV_texture_shader2 = GL_TRUE;
+        __GLeeLink_GL_NV_texture_shader2();
+    }
+    if (__GLeeCheckExtension("GL_NV_vertex_array_range2", &extensionNames) )
+    {
+        _GLEE_NV_vertex_array_range2 = GL_TRUE;
+        __GLeeLink_GL_NV_vertex_array_range2();
+    }
+    if (__GLeeCheckExtension("GL_NV_vertex_program", &extensionNames) )
+    {
+        _GLEE_NV_vertex_program = GL_TRUE;
+        __GLeeLink_GL_NV_vertex_program();
+    }
+    if (__GLeeCheckExtension("GL_SGIX_texture_coordinate_clamp", &extensionNames) )
+    {
+        _GLEE_SGIX_texture_coordinate_clamp = GL_TRUE;
+        __GLeeLink_GL_SGIX_texture_coordinate_clamp();
+    }
+    if (__GLeeCheckExtension("GL_SGIX_scalebias_hint", &extensionNames) )
+    {
+        _GLEE_SGIX_scalebias_hint = GL_TRUE;
+        __GLeeLink_GL_SGIX_scalebias_hint();
+    }
+    if (__GLeeCheckExtension("GL_OML_interlace", &extensionNames) )
+    {
+        _GLEE_OML_interlace = GL_TRUE;
+        __GLeeLink_GL_OML_interlace();
+    }
+    if (__GLeeCheckExtension("GL_OML_subsample", &extensionNames) )
+    {
+        _GLEE_OML_subsample = GL_TRUE;
+        __GLeeLink_GL_OML_subsample();
+    }
+    if (__GLeeCheckExtension("GL_OML_resample", &extensionNames) )
+    {
+        _GLEE_OML_resample = GL_TRUE;
+        __GLeeLink_GL_OML_resample();
+    }
+    if (__GLeeCheckExtension("GL_NV_copy_depth_to_color", &extensionNames) )
+    {
+        _GLEE_NV_copy_depth_to_color = GL_TRUE;
+        __GLeeLink_GL_NV_copy_depth_to_color();
+    }
+    if (__GLeeCheckExtension("GL_ATI_envmap_bumpmap", &extensionNames) )
+    {
+        _GLEE_ATI_envmap_bumpmap = GL_TRUE;
+        __GLeeLink_GL_ATI_envmap_bumpmap();
+    }
+    if (__GLeeCheckExtension("GL_ATI_fragment_shader", &extensionNames) )
+    {
+        _GLEE_ATI_fragment_shader = GL_TRUE;
+        __GLeeLink_GL_ATI_fragment_shader();
+    }
+    if (__GLeeCheckExtension("GL_ATI_pn_triangles", &extensionNames) )
+    {
+        _GLEE_ATI_pn_triangles = GL_TRUE;
+        __GLeeLink_GL_ATI_pn_triangles();
+    }
+    if (__GLeeCheckExtension("GL_ATI_vertex_array_object", &extensionNames) )
+    {
+        _GLEE_ATI_vertex_array_object = GL_TRUE;
+        __GLeeLink_GL_ATI_vertex_array_object();
+    }
+    if (__GLeeCheckExtension("GL_EXT_vertex_shader", &extensionNames) )
+    {
+        _GLEE_EXT_vertex_shader = GL_TRUE;
+        __GLeeLink_GL_EXT_vertex_shader();
+    }
+    if (__GLeeCheckExtension("GL_ATI_vertex_streams", &extensionNames) )
+    {
+        _GLEE_ATI_vertex_streams = GL_TRUE;
+        __GLeeLink_GL_ATI_vertex_streams();
+    }
+    if (__GLeeCheckExtension("GL_ATI_element_array", &extensionNames) )
+    {
+        _GLEE_ATI_element_array = GL_TRUE;
+        __GLeeLink_GL_ATI_element_array();
+    }
+    if (__GLeeCheckExtension("GL_SUN_mesh_array", &extensionNames) )
+    {
+        _GLEE_SUN_mesh_array = GL_TRUE;
+        __GLeeLink_GL_SUN_mesh_array();
+    }
+    if (__GLeeCheckExtension("GL_SUN_slice_accum", &extensionNames) )
+    {
+        _GLEE_SUN_slice_accum = GL_TRUE;
+        __GLeeLink_GL_SUN_slice_accum();
+    }
+    if (__GLeeCheckExtension("GL_NV_multisample_filter_hint", &extensionNames) )
+    {
+        _GLEE_NV_multisample_filter_hint = GL_TRUE;
+        __GLeeLink_GL_NV_multisample_filter_hint();
+    }
+    if (__GLeeCheckExtension("GL_NV_depth_clamp", &extensionNames) )
+    {
+        _GLEE_NV_depth_clamp = GL_TRUE;
+        __GLeeLink_GL_NV_depth_clamp();
+    }
+    if (__GLeeCheckExtension("GL_NV_occlusion_query", &extensionNames) )
+    {
+        _GLEE_NV_occlusion_query = GL_TRUE;
+        __GLeeLink_GL_NV_occlusion_query();
+    }
+    if (__GLeeCheckExtension("GL_NV_point_sprite", &extensionNames) )
+    {
+        _GLEE_NV_point_sprite = GL_TRUE;
+        __GLeeLink_GL_NV_point_sprite();
+    }
+    if (__GLeeCheckExtension("GL_NV_texture_shader3", &extensionNames) )
+    {
+        _GLEE_NV_texture_shader3 = GL_TRUE;
+        __GLeeLink_GL_NV_texture_shader3();
+    }
+    if (__GLeeCheckExtension("GL_NV_vertex_program1_1", &extensionNames) )
+    {
+        _GLEE_NV_vertex_program1_1 = GL_TRUE;
+        __GLeeLink_GL_NV_vertex_program1_1();
+    }
+    if (__GLeeCheckExtension("GL_EXT_shadow_funcs", &extensionNames) )
+    {
+        _GLEE_EXT_shadow_funcs = GL_TRUE;
+        __GLeeLink_GL_EXT_shadow_funcs();
+    }
+    if (__GLeeCheckExtension("GL_EXT_stencil_two_side", &extensionNames) )
+    {
+        _GLEE_EXT_stencil_two_side = GL_TRUE;
+        __GLeeLink_GL_EXT_stencil_two_side();
+    }
+    if (__GLeeCheckExtension("GL_ATI_text_fragment_shader", &extensionNames) )
+    {
+        _GLEE_ATI_text_fragment_shader = GL_TRUE;
+        __GLeeLink_GL_ATI_text_fragment_shader();
+    }
+    if (__GLeeCheckExtension("GL_APPLE_client_storage", &extensionNames) )
+    {
+        _GLEE_APPLE_client_storage = GL_TRUE;
+        __GLeeLink_GL_APPLE_client_storage();
+    }
+    if (__GLeeCheckExtension("GL_APPLE_element_array", &extensionNames) )
+    {
+        _GLEE_APPLE_element_array = GL_TRUE;
+        __GLeeLink_GL_APPLE_element_array();
+    }
+    if (__GLeeCheckExtension("GL_APPLE_fence", &extensionNames) )
+    {
+        _GLEE_APPLE_fence = GL_TRUE;
+        __GLeeLink_GL_APPLE_fence();
+    }
+    if (__GLeeCheckExtension("GL_APPLE_vertex_array_object", &extensionNames) )
+    {
+        _GLEE_APPLE_vertex_array_object = GL_TRUE;
+        __GLeeLink_GL_APPLE_vertex_array_object();
+    }
+    if (__GLeeCheckExtension("GL_APPLE_vertex_array_range", &extensionNames) )
+    {
+        _GLEE_APPLE_vertex_array_range = GL_TRUE;
+        __GLeeLink_GL_APPLE_vertex_array_range();
+    }
+    if (__GLeeCheckExtension("GL_APPLE_ycbcr_422", &extensionNames) )
+    {
+        _GLEE_APPLE_ycbcr_422 = GL_TRUE;
+        __GLeeLink_GL_APPLE_ycbcr_422();
+    }
+    if (__GLeeCheckExtension("GL_S3_s3tc", &extensionNames) )
+    {
+        _GLEE_S3_s3tc = GL_TRUE;
+        __GLeeLink_GL_S3_s3tc();
+    }
+    if (__GLeeCheckExtension("GL_ATI_draw_buffers", &extensionNames) )
+    {
+        _GLEE_ATI_draw_buffers = GL_TRUE;
+        __GLeeLink_GL_ATI_draw_buffers();
+    }
+    if (__GLeeCheckExtension("GL_ATI_pixel_format_float", &extensionNames) )
+    {
+        _GLEE_ATI_pixel_format_float = GL_TRUE;
+        __GLeeLink_GL_ATI_pixel_format_float();
+    }
+    if (__GLeeCheckExtension("GL_ATI_texture_env_combine3", &extensionNames) )
+    {
+        _GLEE_ATI_texture_env_combine3 = GL_TRUE;
+        __GLeeLink_GL_ATI_texture_env_combine3();
+    }
+    if (__GLeeCheckExtension("GL_ATI_texture_float", &extensionNames) )
+    {
+        _GLEE_ATI_texture_float = GL_TRUE;
+        __GLeeLink_GL_ATI_texture_float();
+    }
+    if (__GLeeCheckExtension("GL_NV_float_buffer", &extensionNames) )
+    {
+        _GLEE_NV_float_buffer = GL_TRUE;
+        __GLeeLink_GL_NV_float_buffer();
+    }
+    if (__GLeeCheckExtension("GL_NV_fragment_program", &extensionNames) )
+    {
+        _GLEE_NV_fragment_program = GL_TRUE;
+        __GLeeLink_GL_NV_fragment_program();
+    }
+    if (__GLeeCheckExtension("GL_NV_half_float", &extensionNames) )
+    {
+        _GLEE_NV_half_float = GL_TRUE;
+        __GLeeLink_GL_NV_half_float();
+    }
+    if (__GLeeCheckExtension("GL_NV_pixel_data_range", &extensionNames) )
+    {
+        _GLEE_NV_pixel_data_range = GL_TRUE;
+        __GLeeLink_GL_NV_pixel_data_range();
+    }
+    if (__GLeeCheckExtension("GL_NV_primitive_restart", &extensionNames) )
+    {
+        _GLEE_NV_primitive_restart = GL_TRUE;
+        __GLeeLink_GL_NV_primitive_restart();
+    }
+    if (__GLeeCheckExtension("GL_NV_texture_expand_normal", &extensionNames) )
+    {
+        _GLEE_NV_texture_expand_normal = GL_TRUE;
+        __GLeeLink_GL_NV_texture_expand_normal();
+    }
+    if (__GLeeCheckExtension("GL_NV_vertex_program2", &extensionNames) )
+    {
+        _GLEE_NV_vertex_program2 = GL_TRUE;
+        __GLeeLink_GL_NV_vertex_program2();
+    }
+    if (__GLeeCheckExtension("GL_ATI_map_object_buffer", &extensionNames) )
+    {
+        _GLEE_ATI_map_object_buffer = GL_TRUE;
+        __GLeeLink_GL_ATI_map_object_buffer();
+    }
+    if (__GLeeCheckExtension("GL_ATI_separate_stencil", &extensionNames) )
+    {
+        _GLEE_ATI_separate_stencil = GL_TRUE;
+        __GLeeLink_GL_ATI_separate_stencil();
+    }
+    if (__GLeeCheckExtension("GL_ATI_vertex_attrib_array_object", &extensionNames) )
+    {
+        _GLEE_ATI_vertex_attrib_array_object = GL_TRUE;
+        __GLeeLink_GL_ATI_vertex_attrib_array_object();
+    }
+    if (__GLeeCheckExtension("GL_OES_read_format", &extensionNames) )
+    {
+        _GLEE_OES_read_format = GL_TRUE;
+        __GLeeLink_GL_OES_read_format();
+    }
+    if (__GLeeCheckExtension("GL_EXT_depth_bounds_test", &extensionNames) )
+    {
+        _GLEE_EXT_depth_bounds_test = GL_TRUE;
+        __GLeeLink_GL_EXT_depth_bounds_test();
+    }
+    if (__GLeeCheckExtension("GL_EXT_texture_mirror_clamp", &extensionNames) )
+    {
+        _GLEE_EXT_texture_mirror_clamp = GL_TRUE;
+        __GLeeLink_GL_EXT_texture_mirror_clamp();
+    }
+    if (__GLeeCheckExtension("GL_EXT_blend_equation_separate", &extensionNames) )
+    {
+        _GLEE_EXT_blend_equation_separate = GL_TRUE;
+        __GLeeLink_GL_EXT_blend_equation_separate();
+    }
+    if (__GLeeCheckExtension("GL_MESA_pack_invert", &extensionNames) )
+    {
+        _GLEE_MESA_pack_invert = GL_TRUE;
+        __GLeeLink_GL_MESA_pack_invert();
+    }
+    if (__GLeeCheckExtension("GL_MESA_ycbcr_texture", &extensionNames) )
+    {
+        _GLEE_MESA_ycbcr_texture = GL_TRUE;
+        __GLeeLink_GL_MESA_ycbcr_texture();
+    }
+    if (__GLeeCheckExtension("GL_EXT_pixel_buffer_object", &extensionNames) )
+    {
+        _GLEE_EXT_pixel_buffer_object = GL_TRUE;
+        __GLeeLink_GL_EXT_pixel_buffer_object();
+    }
+    if (__GLeeCheckExtension("GL_NV_fragment_program_option", &extensionNames) )
+    {
+        _GLEE_NV_fragment_program_option = GL_TRUE;
+        __GLeeLink_GL_NV_fragment_program_option();
+    }
+    if (__GLeeCheckExtension("GL_NV_fragment_program2", &extensionNames) )
+    {
+        _GLEE_NV_fragment_program2 = GL_TRUE;
+        __GLeeLink_GL_NV_fragment_program2();
+    }
+    if (__GLeeCheckExtension("GL_NV_vertex_program2_option", &extensionNames) )
+    {
+        _GLEE_NV_vertex_program2_option = GL_TRUE;
+        __GLeeLink_GL_NV_vertex_program2_option();
+    }
+    if (__GLeeCheckExtension("GL_NV_vertex_program3", &extensionNames) )
+    {
+        _GLEE_NV_vertex_program3 = GL_TRUE;
+        __GLeeLink_GL_NV_vertex_program3();
+    }
+    if (__GLeeCheckExtension("GL_EXT_framebuffer_object", &extensionNames) )
+    {
+        _GLEE_EXT_framebuffer_object = GL_TRUE;
+        __GLeeLink_GL_EXT_framebuffer_object();
+    }
+    if (__GLeeCheckExtension("GL_GREMEDY_string_marker", &extensionNames) )
+    {
+        _GLEE_GREMEDY_string_marker = GL_TRUE;
+        __GLeeLink_GL_GREMEDY_string_marker();
+    }
+    if (__GLeeCheckExtension("GL_EXT_packed_depth_stencil", &extensionNames) )
+    {
+        _GLEE_EXT_packed_depth_stencil = GL_TRUE;
+        __GLeeLink_GL_EXT_packed_depth_stencil();
+    }
+    if (__GLeeCheckExtension("GL_EXT_stencil_clear_tag", &extensionNames) )
+    {
+        _GLEE_EXT_stencil_clear_tag = GL_TRUE;
+        __GLeeLink_GL_EXT_stencil_clear_tag();
+    }
+    if (__GLeeCheckExtension("GL_EXT_texture_sRGB", &extensionNames) )
+    {
+        _GLEE_EXT_texture_sRGB = GL_TRUE;
+        __GLeeLink_GL_EXT_texture_sRGB();
+    }
+    if (__GLeeCheckExtension("GL_EXT_framebuffer_blit", &extensionNames) )
+    {
+        _GLEE_EXT_framebuffer_blit = GL_TRUE;
+        __GLeeLink_GL_EXT_framebuffer_blit();
+    }
+    if (__GLeeCheckExtension("GL_EXT_framebuffer_multisample", &extensionNames) )
+    {
+        _GLEE_EXT_framebuffer_multisample = GL_TRUE;
+        __GLeeLink_GL_EXT_framebuffer_multisample();
+    }
+    if (__GLeeCheckExtension("GL_MESAX_texture_stack", &extensionNames) )
+    {
+        _GLEE_MESAX_texture_stack = GL_TRUE;
+        __GLeeLink_GL_MESAX_texture_stack();
+    }
+    if (__GLeeCheckExtension("GL_EXT_timer_query", &extensionNames) )
+    {
+        _GLEE_EXT_timer_query = GL_TRUE;
+        __GLeeLink_GL_EXT_timer_query();
+    }
+    if (__GLeeCheckExtension("GL_EXT_gpu_program_parameters", &extensionNames) )
+    {
+        _GLEE_EXT_gpu_program_parameters = GL_TRUE;
+        __GLeeLink_GL_EXT_gpu_program_parameters();
+    }
+    if (__GLeeCheckExtension("GL_APPLE_flush_buffer_range", &extensionNames) )
+    {
+        _GLEE_APPLE_flush_buffer_range = GL_TRUE;
+        __GLeeLink_GL_APPLE_flush_buffer_range();
+    }
+    if (__GLeeCheckExtension("GL_EXT_gpu_shader4", &extensionNames) )
+    {
+        _GLEE_EXT_gpu_shader4 = GL_TRUE;
+        __GLeeLink_GL_EXT_gpu_shader4();
+    }
+    if (__GLeeCheckExtension("GL_EXT_draw_instanced", &extensionNames) )
+    {
+        _GLEE_EXT_draw_instanced = GL_TRUE;
+        __GLeeLink_GL_EXT_draw_instanced();
+    }
+    if (__GLeeCheckExtension("GL_EXT_packed_float", &extensionNames) )
+    {
+        _GLEE_EXT_packed_float = GL_TRUE;
+        __GLeeLink_GL_EXT_packed_float();
+    }
+    if (__GLeeCheckExtension("GL_EXT_texture_array", &extensionNames) )
+    {
+        _GLEE_EXT_texture_array = GL_TRUE;
+        __GLeeLink_GL_EXT_texture_array();
+    }
+    if (__GLeeCheckExtension("GL_EXT_texture_buffer_object", &extensionNames) )
+    {
+        _GLEE_EXT_texture_buffer_object = GL_TRUE;
+        __GLeeLink_GL_EXT_texture_buffer_object();
+    }
+    if (__GLeeCheckExtension("GL_EXT_texture_compression_latc", &extensionNames) )
+    {
+        _GLEE_EXT_texture_compression_latc = GL_TRUE;
+        __GLeeLink_GL_EXT_texture_compression_latc();
+    }
+    if (__GLeeCheckExtension("GL_EXT_texture_compression_rgtc", &extensionNames) )
+    {
+        _GLEE_EXT_texture_compression_rgtc = GL_TRUE;
+        __GLeeLink_GL_EXT_texture_compression_rgtc();
+    }
+    if (__GLeeCheckExtension("GL_EXT_texture_shared_exponent", &extensionNames) )
+    {
+        _GLEE_EXT_texture_shared_exponent = GL_TRUE;
+        __GLeeLink_GL_EXT_texture_shared_exponent();
+    }
+    if (__GLeeCheckExtension("GL_NV_depth_buffer_float", &extensionNames) )
+    {
+        _GLEE_NV_depth_buffer_float = GL_TRUE;
+        __GLeeLink_GL_NV_depth_buffer_float();
+    }
+    if (__GLeeCheckExtension("GL_NV_framebuffer_multisample_coverage", &extensionNames) )
+    {
+        _GLEE_NV_framebuffer_multisample_coverage = GL_TRUE;
+        __GLeeLink_GL_NV_framebuffer_multisample_coverage();
+    }
+    if (__GLeeCheckExtension("GL_EXT_framebuffer_sRGB", &extensionNames) )
+    {
+        _GLEE_EXT_framebuffer_sRGB = GL_TRUE;
+        __GLeeLink_GL_EXT_framebuffer_sRGB();
+    }
+    if (__GLeeCheckExtension("GL_NV_geometry_shader4", &extensionNames) )
+    {
+        _GLEE_NV_geometry_shader4 = GL_TRUE;
+        __GLeeLink_GL_NV_geometry_shader4();
+    }
+    if (__GLeeCheckExtension("GL_NV_parameter_buffer_object", &extensionNames) )
+    {
+        _GLEE_NV_parameter_buffer_object = GL_TRUE;
+        __GLeeLink_GL_NV_parameter_buffer_object();
+    }
+    if (__GLeeCheckExtension("GL_EXT_draw_buffers2", &extensionNames) )
+    {
+        _GLEE_EXT_draw_buffers2 = GL_TRUE;
+        __GLeeLink_GL_EXT_draw_buffers2();
+    }
+    if (__GLeeCheckExtension("GL_NV_transform_feedback", &extensionNames) )
+    {
+        _GLEE_NV_transform_feedback = GL_TRUE;
+        __GLeeLink_GL_NV_transform_feedback();
+    }
+    if (__GLeeCheckExtension("GL_EXT_bindable_uniform", &extensionNames) )
+    {
+        _GLEE_EXT_bindable_uniform = GL_TRUE;
+        __GLeeLink_GL_EXT_bindable_uniform();
+    }
+    if (__GLeeCheckExtension("GL_EXT_texture_integer", &extensionNames) )
+    {
+        _GLEE_EXT_texture_integer = GL_TRUE;
+        __GLeeLink_GL_EXT_texture_integer();
+    }
+    if (__GLeeCheckExtension("GL_GREMEDY_frame_terminator", &extensionNames) )
+    {
+        _GLEE_GREMEDY_frame_terminator = GL_TRUE;
+        __GLeeLink_GL_GREMEDY_frame_terminator();
+    }
+    if (__GLeeCheckExtension("GL_NV_conditional_render", &extensionNames) )
+    {
+        _GLEE_NV_conditional_render = GL_TRUE;
+        __GLeeLink_GL_NV_conditional_render();
+    }
+    if (__GLeeCheckExtension("GL_NV_present_video", &extensionNames) )
+    {
+        _GLEE_NV_present_video = GL_TRUE;
+        __GLeeLink_GL_NV_present_video();
+    }
+    if (__GLeeCheckExtension("GL_EXT_transform_feedback", &extensionNames) )
+    {
+        _GLEE_EXT_transform_feedback = GL_TRUE;
+        __GLeeLink_GL_EXT_transform_feedback();
+    }
+    if (__GLeeCheckExtension("GL_EXT_direct_state_access", &extensionNames) )
+    {
+        _GLEE_EXT_direct_state_access = GL_TRUE;
+        __GLeeLink_GL_EXT_direct_state_access();
+    }
+    if (__GLeeCheckExtension("GL_EXT_vertex_array_bgra", &extensionNames) )
+    {
+        _GLEE_EXT_vertex_array_bgra = GL_TRUE;
+        __GLeeLink_GL_EXT_vertex_array_bgra();
+    }
+    if (__GLeeCheckExtension("GL_EXT_texture_swizzle", &extensionNames) )
+    {
+        _GLEE_EXT_texture_swizzle = GL_TRUE;
+        __GLeeLink_GL_EXT_texture_swizzle();
+    }
+    if (__GLeeCheckExtension("GL_NV_explicit_multisample", &extensionNames) )
+    {
+        _GLEE_NV_explicit_multisample = GL_TRUE;
+        __GLeeLink_GL_NV_explicit_multisample();
+    }
+    if (__GLeeCheckExtension("GL_NV_transform_feedback2", &extensionNames) )
+    {
+        _GLEE_NV_transform_feedback2 = GL_TRUE;
+        __GLeeLink_GL_NV_transform_feedback2();
+    }
+    if (__GLeeCheckExtension("GL_ATI_meminfo", &extensionNames) )
+    {
+        _GLEE_ATI_meminfo = GL_TRUE;
+        __GLeeLink_GL_ATI_meminfo();
+    }
+    if (__GLeeCheckExtension("GL_AMD_performance_monitor", &extensionNames) )
+    {
+        _GLEE_AMD_performance_monitor = GL_TRUE;
+        __GLeeLink_GL_AMD_performance_monitor();
+    }
+    if (__GLeeCheckExtension("GL_AMD_texture_texture4", &extensionNames) )
+    {
+        _GLEE_AMD_texture_texture4 = GL_TRUE;
+        __GLeeLink_GL_AMD_texture_texture4();
+    }
+    if (__GLeeCheckExtension("GL_AMD_vertex_shader_tesselator", &extensionNames) )
+    {
+        _GLEE_AMD_vertex_shader_tesselator = GL_TRUE;
+        __GLeeLink_GL_AMD_vertex_shader_tesselator();
+    }
+    if (__GLeeCheckExtension("GL_EXT_provoking_vertex", &extensionNames) )
+    {
+        _GLEE_EXT_provoking_vertex = GL_TRUE;
+        __GLeeLink_GL_EXT_provoking_vertex();
+    }
+    if (__GLeeCheckExtension("GL_EXT_texture_snorm", &extensionNames) )
+    {
+        _GLEE_EXT_texture_snorm = GL_TRUE;
+        __GLeeLink_GL_EXT_texture_snorm();
+    }
+    if (__GLeeCheckExtension("GL_AMD_draw_buffers_blend", &extensionNames) )
+    {
+        _GLEE_AMD_draw_buffers_blend = GL_TRUE;
+        __GLeeLink_GL_AMD_draw_buffers_blend();
+    }
+    if (__GLeeCheckExtension("GL_APPLE_texture_range", &extensionNames) )
+    {
+        _GLEE_APPLE_texture_range = GL_TRUE;
+        __GLeeLink_GL_APPLE_texture_range();
+    }
+    if (__GLeeCheckExtension("GL_APPLE_float_pixels", &extensionNames) )
+    {
+        _GLEE_APPLE_float_pixels = GL_TRUE;
+        __GLeeLink_GL_APPLE_float_pixels();
+    }
+    if (__GLeeCheckExtension("GL_APPLE_vertex_program_evaluators", &extensionNames) )
+    {
+        _GLEE_APPLE_vertex_program_evaluators = GL_TRUE;
+        __GLeeLink_GL_APPLE_vertex_program_evaluators();
+    }
+    if (__GLeeCheckExtension("GL_APPLE_aux_depth_stencil", &extensionNames) )
+    {
+        _GLEE_APPLE_aux_depth_stencil = GL_TRUE;
+        __GLeeLink_GL_APPLE_aux_depth_stencil();
+    }
+    if (__GLeeCheckExtension("GL_APPLE_object_purgeable", &extensionNames) )
+    {
+        _GLEE_APPLE_object_purgeable = GL_TRUE;
+        __GLeeLink_GL_APPLE_object_purgeable();
+    }
+    if (__GLeeCheckExtension("GL_APPLE_row_bytes", &extensionNames) )
+    {
+        _GLEE_APPLE_row_bytes = GL_TRUE;
+        __GLeeLink_GL_APPLE_row_bytes();
+    }
+    if (__GLeeCheckExtension("GL_APPLE_rgb_422", &extensionNames) )
+    {
+        _GLEE_APPLE_rgb_422 = GL_TRUE;
+        __GLeeLink_GL_APPLE_rgb_422();
+    }
+    if (__GLeeCheckExtension("GL_NV_video_capture", &extensionNames) )
+    {
+        _GLEE_NV_video_capture = GL_TRUE;
+        __GLeeLink_GL_NV_video_capture();
+    }
+    if (__GLeeCheckExtension("GL_NV_copy_image", &extensionNames) )
+    {
+        _GLEE_NV_copy_image = GL_TRUE;
+        __GLeeLink_GL_NV_copy_image();
+    }
+    if (__GLeeCheckExtension("GL_EXT_separate_shader_objects", &extensionNames) )
+    {
+        _GLEE_EXT_separate_shader_objects = GL_TRUE;
+        __GLeeLink_GL_EXT_separate_shader_objects();
+    }
+    if (__GLeeCheckExtension("GL_NV_parameter_buffer_object2", &extensionNames) )
+    {
+        _GLEE_NV_parameter_buffer_object2 = GL_TRUE;
+        __GLeeLink_GL_NV_parameter_buffer_object2();
+    }
+    if (__GLeeCheckExtension("GL_NV_shader_buffer_load", &extensionNames) )
+    {
+        _GLEE_NV_shader_buffer_load = GL_TRUE;
+        __GLeeLink_GL_NV_shader_buffer_load();
+    }
+    if (__GLeeCheckExtension("GL_NV_vertex_buffer_unified_memory", &extensionNames) )
+    {
+        _GLEE_NV_vertex_buffer_unified_memory = GL_TRUE;
+        __GLeeLink_GL_NV_vertex_buffer_unified_memory();
+    }
+    if (__GLeeCheckExtension("GL_NV_texture_barrier", &extensionNames) )
+    {
+        _GLEE_NV_texture_barrier = GL_TRUE;
+        __GLeeLink_GL_NV_texture_barrier();
+    }
+    if (__GLeeCheckExtension("GL_AMD_shader_stencil_export", &extensionNames) )
+    {
+        _GLEE_AMD_shader_stencil_export = GL_TRUE;
+        __GLeeLink_GL_AMD_shader_stencil_export();
+    }
+    if (__GLeeCheckExtension("GL_AMD_seamless_cubemap_per_texture", &extensionNames) )
+    {
+        _GLEE_AMD_seamless_cubemap_per_texture = GL_TRUE;
+        __GLeeLink_GL_AMD_seamless_cubemap_per_texture();
+    }
+    if (__GLeeCheckExtension("GL_AMD_conservative_depth", &extensionNames) )
+    {
+        _GLEE_AMD_conservative_depth = GL_TRUE;
+        __GLeeLink_GL_AMD_conservative_depth();
+    }
+    if (__GLeeCheckExtension("GL_EXT_shader_image_load_store", &extensionNames) )
+    {
+        _GLEE_EXT_shader_image_load_store = GL_TRUE;
+        __GLeeLink_GL_EXT_shader_image_load_store();
+    }
+    if (__GLeeCheckExtension("GL_EXT_vertex_attrib_64bit", &extensionNames) )
+    {
+        _GLEE_EXT_vertex_attrib_64bit = GL_TRUE;
+        __GLeeLink_GL_EXT_vertex_attrib_64bit();
+    }
+    if (__GLeeCheckExtension("GL_NV_gpu_program5", &extensionNames) )
+    {
+        _GLEE_NV_gpu_program5 = GL_TRUE;
+        __GLeeLink_GL_NV_gpu_program5();
+    }
+    if (__GLeeCheckExtension("GL_NV_gpu_shader5", &extensionNames) )
+    {
+        _GLEE_NV_gpu_shader5 = GL_TRUE;
+        __GLeeLink_GL_NV_gpu_shader5();
+    }
+    if (__GLeeCheckExtension("GL_NV_shader_buffer_store", &extensionNames) )
+    {
+        _GLEE_NV_shader_buffer_store = GL_TRUE;
+        __GLeeLink_GL_NV_shader_buffer_store();
+    }
+    if (__GLeeCheckExtension("GL_NV_tessellation_program5", &extensionNames) )
+    {
+        _GLEE_NV_tessellation_program5 = GL_TRUE;
+        __GLeeLink_GL_NV_tessellation_program5();
+    }
+    if (__GLeeCheckExtension("GL_NV_vertex_attrib_integer_64bit", &extensionNames) )
+    {
+        _GLEE_NV_vertex_attrib_integer_64bit = GL_TRUE;
+        __GLeeLink_GL_NV_vertex_attrib_integer_64bit();
+    }
+    if (__GLeeCheckExtension("GL_NV_multisample_coverage", &extensionNames) )
+    {
+        _GLEE_NV_multisample_coverage = GL_TRUE;
+        __GLeeLink_GL_NV_multisample_coverage();
+    }
+    if (__GLeeCheckExtension("GL_AMD_name_gen_delete", &extensionNames) )
+    {
+        _GLEE_AMD_name_gen_delete = GL_TRUE;
+        __GLeeLink_GL_AMD_name_gen_delete();
+    }
+    if (__GLeeCheckExtension("GL_AMD_transform_feedback3_lines_triangles", &extensionNames) )
+    {
+        _GLEE_AMD_transform_feedback3_lines_triangles = GL_TRUE;
+        __GLeeLink_GL_AMD_transform_feedback3_lines_triangles();
+    }
+    if (__GLeeCheckExtension("GL_AMD_depth_clamp_separate", &extensionNames) )
+    {
+        _GLEE_AMD_depth_clamp_separate = GL_TRUE;
+        __GLeeLink_GL_AMD_depth_clamp_separate();
+    }
+    if (__GLeeCheckExtension("GL_EXT_texture_sRGB_decode", &extensionNames) )
+    {
+        _GLEE_EXT_texture_sRGB_decode = GL_TRUE;
+        __GLeeLink_GL_EXT_texture_sRGB_decode();
+    }
+    if (__GLeeCheckExtension("GL_NV_texture_multisample", &extensionNames) )
+    {
+        _GLEE_NV_texture_multisample = GL_TRUE;
+        __GLeeLink_GL_NV_texture_multisample();
+    }
+    if (__GLeeCheckExtension("GL_AMD_blend_minmax_factor", &extensionNames) )
+    {
+        _GLEE_AMD_blend_minmax_factor = GL_TRUE;
+        __GLeeLink_GL_AMD_blend_minmax_factor();
+    }
+    if (__GLeeCheckExtension("GL_AMD_sample_positions", &extensionNames) )
+    {
+        _GLEE_AMD_sample_positions = GL_TRUE;
+        __GLeeLink_GL_AMD_sample_positions();
+    }
+    if (__GLeeCheckExtension("GL_EXT_x11_sync_object", &extensionNames) )
+    {
+        _GLEE_EXT_x11_sync_object = GL_TRUE;
+        __GLeeLink_GL_EXT_x11_sync_object();
+    }
+    if (__GLeeCheckExtension("GL_AMD_multi_draw_indirect", &extensionNames) )
+    {
+        _GLEE_AMD_multi_draw_indirect = GL_TRUE;
+        __GLeeLink_GL_AMD_multi_draw_indirect();
+    }
+    if (__GLeeCheckExtension("GL_EXT_framebuffer_multisample_blit_scaled", &extensionNames) )
+    {
+        _GLEE_EXT_framebuffer_multisample_blit_scaled = GL_TRUE;
+        __GLeeLink_GL_EXT_framebuffer_multisample_blit_scaled();
+    }
+    if (__GLeeCheckExtension("GL_SGIX_texture_select", &extensionNames) )
+    {
+        _GLEE_SGIX_texture_select = GL_TRUE;
+        __GLeeLink_GL_SGIX_texture_select();
+    }
+    if (__GLeeCheckExtension("GL_INGR_blend_func_separate", &extensionNames) )
+    {
+        _GLEE_INGR_blend_func_separate = GL_TRUE;
+        __GLeeLink_GL_INGR_blend_func_separate();
+    }
+    if (__GLeeCheckExtension("GL_SGIX_depth_pass_instrument", &extensionNames) )
+    {
+        _GLEE_SGIX_depth_pass_instrument = GL_TRUE;
+        __GLeeLink_GL_SGIX_depth_pass_instrument();
+    }
+    if (__GLeeCheckExtension("GL_SGIX_igloo_interface", &extensionNames) )
+    {
+        _GLEE_SGIX_igloo_interface = GL_TRUE;
+        __GLeeLink_GL_SGIX_igloo_interface();
+    }
+    if (__GLeeCheckExtension("GL_OES_compressed_paletted_texture", &extensionNames) )
+    {
+        _GLEE_OES_compressed_paletted_texture = GL_TRUE;
+        __GLeeLink_GL_OES_compressed_paletted_texture();
+    }
+    if (__GLeeCheckExtension("GL_OES_fixed_point", &extensionNames) )
+    {
+        _GLEE_OES_fixed_point = GL_TRUE;
+        __GLeeLink_GL_OES_fixed_point();
+    }
+    if (__GLeeCheckExtension("GL_OES_single_precision", &extensionNames) )
+    {
+        _GLEE_OES_single_precision = GL_TRUE;
+        __GLeeLink_GL_OES_single_precision();
+    }
+    if (__GLeeCheckExtension("GL_OES_query_matrix", &extensionNames) )
+    {
+        _GLEE_OES_query_matrix = GL_TRUE;
+        __GLeeLink_GL_OES_query_matrix();
+    }
+    if (__GLeeCheckExtension("GL_OES_byte_coordinates", &extensionNames) )
+    {
+        _GLEE_OES_byte_coordinates = GL_TRUE;
+        __GLeeLink_GL_OES_byte_coordinates();
+    }
+    if (__GLeeCheckExtension("GL_NV_gpu_program4", &extensionNames) )
+    {
+        _GLEE_NV_gpu_program4 = GL_TRUE;
+        __GLeeLink_GL_NV_gpu_program4();
+    }
+    if (__GLeeCheckExtension("GL_NV_path_rendering", &extensionNames) )
+    {
+        _GLEE_NV_path_rendering = GL_TRUE;
+        __GLeeLink_GL_NV_path_rendering();
+    }
+    if (__GLeeCheckExtension("GL_AMD_vertex_shader_tessellator", &extensionNames) )
+    {
+        _GLEE_AMD_vertex_shader_tessellator = GL_TRUE;
+        __GLeeLink_GL_AMD_vertex_shader_tessellator();
+    }
+    if (__GLeeCheckExtension("GL_EXT_fragment_lighting", &extensionNames) )
+    {
+        _GLEE_EXT_fragment_lighting = GL_TRUE;
+        __GLeeLink_GL_EXT_fragment_lighting();
+    }
+    if (__GLeeCheckExtension("GL_EXT_texture_compression_dxt1", &extensionNames) )
+    {
+        _GLEE_EXT_texture_compression_dxt1 = GL_TRUE;
+        __GLeeLink_GL_EXT_texture_compression_dxt1();
+    }
+    if (__GLeeCheckExtension("GL_EXT_scene_marker", &extensionNames) )
+    {
+        _GLEE_EXT_scene_marker = GL_TRUE;
+        __GLeeLink_GL_EXT_scene_marker();
+    }
+    if (__GLeeCheckExtension("GL_EXT_geometry_shader4", &extensionNames) )
+    {
+        _GLEE_EXT_geometry_shader4 = GL_TRUE;
+        __GLeeLink_GL_EXT_geometry_shader4();
+    }
+    if (__GLeeCheckExtension("GL_EXT_texture_env", &extensionNames) )
+    {
+        _GLEE_EXT_texture_env = GL_TRUE;
+        __GLeeLink_GL_EXT_texture_env();
+    }
+    if (__GLeeCheckExtension("GL_SGIX_texture_range", &extensionNames) )
+    {
+        _GLEE_SGIX_texture_range = GL_TRUE;
+        __GLeeLink_GL_SGIX_texture_range();
+    }
+    if (__GLeeCheckExtension("GL_SGIX_pixel_texture_bits", &extensionNames) )
+    {
+        _GLEE_SGIX_pixel_texture_bits = GL_TRUE;
+        __GLeeLink_GL_SGIX_pixel_texture_bits();
+    }
+    if (__GLeeCheckExtension("GL_IBM_static_data", &extensionNames) )
+    {
+        _GLEE_IBM_static_data = GL_TRUE;
+        __GLeeLink_GL_IBM_static_data();
+    }
+#ifdef _WIN32
+    if (__GLeeCheckExtension("WGL_ARB_buffer_region", &extensionNames) )
+    {
+        _GLEE_WGL_ARB_buffer_region = GL_TRUE;
+        __GLeeLink_WGL_ARB_buffer_region();
+    }
+    if (__GLeeCheckExtension("WGL_ARB_multisample", &extensionNames) )
+    {
+        _GLEE_WGL_ARB_multisample = GL_TRUE;
+        __GLeeLink_WGL_ARB_multisample();
+    }
+    if (__GLeeCheckExtension("WGL_ARB_extensions_string", &extensionNames) )
+    {
+        _GLEE_WGL_ARB_extensions_string = GL_TRUE;
+        __GLeeLink_WGL_ARB_extensions_string();
+    }
+    if (__GLeeCheckExtension("WGL_ARB_pixel_format", &extensionNames) )
+    {
+        _GLEE_WGL_ARB_pixel_format = GL_TRUE;
+        __GLeeLink_WGL_ARB_pixel_format();
+    }
+    if (__GLeeCheckExtension("WGL_ARB_make_current_read", &extensionNames) )
+    {
+        _GLEE_WGL_ARB_make_current_read = GL_TRUE;
+        __GLeeLink_WGL_ARB_make_current_read();
+    }
+    if (__GLeeCheckExtension("WGL_ARB_pbuffer", &extensionNames) )
+    {
+        _GLEE_WGL_ARB_pbuffer = GL_TRUE;
+        __GLeeLink_WGL_ARB_pbuffer();
+    }
+    if (__GLeeCheckExtension("WGL_ARB_render_texture", &extensionNames) )
+    {
+        _GLEE_WGL_ARB_render_texture = GL_TRUE;
+        __GLeeLink_WGL_ARB_render_texture();
+    }
+    if (__GLeeCheckExtension("WGL_ARB_pixel_format_float", &extensionNames) )
+    {
+        _GLEE_WGL_ARB_pixel_format_float = GL_TRUE;
+        __GLeeLink_WGL_ARB_pixel_format_float();
+    }
+    if (__GLeeCheckExtension("WGL_ARB_framebuffer_sRGB", &extensionNames) )
+    {
+        _GLEE_WGL_ARB_framebuffer_sRGB = GL_TRUE;
+        __GLeeLink_WGL_ARB_framebuffer_sRGB();
+    }
+    if (__GLeeCheckExtension("WGL_ARB_create_context", &extensionNames) )
+    {
+        _GLEE_WGL_ARB_create_context = GL_TRUE;
+        __GLeeLink_WGL_ARB_create_context();
+    }
+    if (__GLeeCheckExtension("WGL_ARB_create_context_profile", &extensionNames) )
+    {
+        _GLEE_WGL_ARB_create_context_profile = GL_TRUE;
+        __GLeeLink_WGL_ARB_create_context_profile();
+    }
+    if (__GLeeCheckExtension("WGL_ARB_create_context_robustness", &extensionNames) )
+    {
+        _GLEE_WGL_ARB_create_context_robustness = GL_TRUE;
+        __GLeeLink_WGL_ARB_create_context_robustness();
+    }
+    if (__GLeeCheckExtension("WGL_EXT_make_current_read", &extensionNames) )
+    {
+        _GLEE_WGL_EXT_make_current_read = GL_TRUE;
+        __GLeeLink_WGL_EXT_make_current_read();
+    }
+    if (__GLeeCheckExtension("WGL_EXT_pixel_format", &extensionNames) )
+    {
+        _GLEE_WGL_EXT_pixel_format = GL_TRUE;
+        __GLeeLink_WGL_EXT_pixel_format();
+    }
+    if (__GLeeCheckExtension("WGL_EXT_pbuffer", &extensionNames) )
+    {
+        _GLEE_WGL_EXT_pbuffer = GL_TRUE;
+        __GLeeLink_WGL_EXT_pbuffer();
+    }
+    if (__GLeeCheckExtension("WGL_EXT_depth_float", &extensionNames) )
+    {
+        _GLEE_WGL_EXT_depth_float = GL_TRUE;
+        __GLeeLink_WGL_EXT_depth_float();
+    }
+    if (__GLeeCheckExtension("WGL_3DFX_multisample", &extensionNames) )
+    {
+        _GLEE_WGL_3DFX_multisample = GL_TRUE;
+        __GLeeLink_WGL_3DFX_multisample();
+    }
+    if (__GLeeCheckExtension("WGL_EXT_multisample", &extensionNames) )
+    {
+        _GLEE_WGL_EXT_multisample = GL_TRUE;
+        __GLeeLink_WGL_EXT_multisample();
+    }
+    if (__GLeeCheckExtension("WGL_I3D_digital_video_control", &extensionNames) )
+    {
+        _GLEE_WGL_I3D_digital_video_control = GL_TRUE;
+        __GLeeLink_WGL_I3D_digital_video_control();
+    }
+    if (__GLeeCheckExtension("WGL_I3D_gamma", &extensionNames) )
+    {
+        _GLEE_WGL_I3D_gamma = GL_TRUE;
+        __GLeeLink_WGL_I3D_gamma();
+    }
+    if (__GLeeCheckExtension("WGL_I3D_genlock", &extensionNames) )
+    {
+        _GLEE_WGL_I3D_genlock = GL_TRUE;
+        __GLeeLink_WGL_I3D_genlock();
+    }
+    if (__GLeeCheckExtension("WGL_I3D_image_buffer", &extensionNames) )
+    {
+        _GLEE_WGL_I3D_image_buffer = GL_TRUE;
+        __GLeeLink_WGL_I3D_image_buffer();
+    }
+    if (__GLeeCheckExtension("WGL_I3D_swap_frame_lock", &extensionNames) )
+    {
+        _GLEE_WGL_I3D_swap_frame_lock = GL_TRUE;
+        __GLeeLink_WGL_I3D_swap_frame_lock();
+    }
+    if (__GLeeCheckExtension("WGL_NV_render_depth_texture", &extensionNames) )
+    {
+        _GLEE_WGL_NV_render_depth_texture = GL_TRUE;
+        __GLeeLink_WGL_NV_render_depth_texture();
+    }
+    if (__GLeeCheckExtension("WGL_NV_render_texture_rectangle", &extensionNames) )
+    {
+        _GLEE_WGL_NV_render_texture_rectangle = GL_TRUE;
+        __GLeeLink_WGL_NV_render_texture_rectangle();
+    }
+    if (__GLeeCheckExtension("WGL_ATI_pixel_format_float", &extensionNames) )
+    {
+        _GLEE_WGL_ATI_pixel_format_float = GL_TRUE;
+        __GLeeLink_WGL_ATI_pixel_format_float();
+    }
+    if (__GLeeCheckExtension("WGL_NV_float_buffer", &extensionNames) )
+    {
+        _GLEE_WGL_NV_float_buffer = GL_TRUE;
+        __GLeeLink_WGL_NV_float_buffer();
+    }
+    if (__GLeeCheckExtension("WGL_3DL_stereo_control", &extensionNames) )
+    {
+        _GLEE_WGL_3DL_stereo_control = GL_TRUE;
+        __GLeeLink_WGL_3DL_stereo_control();
+    }
+    if (__GLeeCheckExtension("WGL_EXT_pixel_format_packed_float", &extensionNames) )
+    {
+        _GLEE_WGL_EXT_pixel_format_packed_float = GL_TRUE;
+        __GLeeLink_WGL_EXT_pixel_format_packed_float();
+    }
+    if (__GLeeCheckExtension("WGL_EXT_framebuffer_sRGB", &extensionNames) )
+    {
+        _GLEE_WGL_EXT_framebuffer_sRGB = GL_TRUE;
+        __GLeeLink_WGL_EXT_framebuffer_sRGB();
+    }
+    if (__GLeeCheckExtension("WGL_NV_present_video", &extensionNames) )
+    {
+        _GLEE_WGL_NV_present_video = GL_TRUE;
+        __GLeeLink_WGL_NV_present_video();
+    }
+    if (__GLeeCheckExtension("WGL_NV_swap_group", &extensionNames) )
+    {
+        _GLEE_WGL_NV_swap_group = GL_TRUE;
+        __GLeeLink_WGL_NV_swap_group();
+    }
+    if (__GLeeCheckExtension("WGL_NV_gpu_affinity", &extensionNames) )
+    {
+        _GLEE_WGL_NV_gpu_affinity = GL_TRUE;
+        __GLeeLink_WGL_NV_gpu_affinity();
+    }
+    if (__GLeeCheckExtension("WGL_AMD_gpu_association", &extensionNames) )
+    {
+        _GLEE_WGL_AMD_gpu_association = GL_TRUE;
+        __GLeeLink_WGL_AMD_gpu_association();
+    }
+    if (__GLeeCheckExtension("WGL_NV_copy_image", &extensionNames) )
+    {
+        _GLEE_WGL_NV_copy_image = GL_TRUE;
+        __GLeeLink_WGL_NV_copy_image();
+    }
+    if (__GLeeCheckExtension("WGL_NV_multisample_coverage", &extensionNames) )
+    {
+        _GLEE_WGL_NV_multisample_coverage = GL_TRUE;
+        __GLeeLink_WGL_NV_multisample_coverage();
+    }
+    if (__GLeeCheckExtension("WGL_EXT_create_context_es2_profile", &extensionNames) )
+    {
+        _GLEE_WGL_EXT_create_context_es2_profile = GL_TRUE;
+        __GLeeLink_WGL_EXT_create_context_es2_profile();
+    }
+    if (__GLeeCheckExtension("WGL_NV_DX_interop", &extensionNames) )
+    {
+        _GLEE_WGL_NV_DX_interop = GL_TRUE;
+        __GLeeLink_WGL_NV_DX_interop();
+    }
+    if (__GLeeCheckExtension("WGL_EXT_display_color_table", &extensionNames) )
+    {
+        _GLEE_WGL_EXT_display_color_table = GL_TRUE;
+        __GLeeLink_WGL_EXT_display_color_table();
+    }
+    if (__GLeeCheckExtension("WGL_EXT_extensions_string", &extensionNames) )
+    {
+        _GLEE_WGL_EXT_extensions_string = GL_TRUE;
+        __GLeeLink_WGL_EXT_extensions_string();
+    }
+    if (__GLeeCheckExtension("WGL_EXT_swap_control", &extensionNames) )
+    {
+        _GLEE_WGL_EXT_swap_control = GL_TRUE;
+        __GLeeLink_WGL_EXT_swap_control();
+    }
+    if (__GLeeCheckExtension("WGL_NV_vertex_array_range", &extensionNames) )
+    {
+        _GLEE_WGL_NV_vertex_array_range = GL_TRUE;
+        __GLeeLink_WGL_NV_vertex_array_range();
+    }
+    if (__GLeeCheckExtension("WGL_OML_sync_control", &extensionNames) )
+    {
+        _GLEE_WGL_OML_sync_control = GL_TRUE;
+        __GLeeLink_WGL_OML_sync_control();
+    }
+    if (__GLeeCheckExtension("WGL_I3D_swap_frame_usage", &extensionNames) )
+    {
+        _GLEE_WGL_I3D_swap_frame_usage = GL_TRUE;
+        __GLeeLink_WGL_I3D_swap_frame_usage();
+    }
+    if (__GLeeCheckExtension("WGL_NV_video_output", &extensionNames) )
+    {
+        _GLEE_WGL_NV_video_output = GL_TRUE;
+        __GLeeLink_WGL_NV_video_output();
+    }
+#elif defined(__APPLE__) || defined(__APPLE_CC__)
+#else /* GLX */
+    if (__GLeeCheckExtension("GLX_VERSION_1_3", &extensionNames) )
+    {
+        _GLEE_GLX_VERSION_1_3 = GL_TRUE;
+        __GLeeLink_GLX_VERSION_1_3();
+    }
+    if (__GLeeCheckExtension("GLX_VERSION_1_4", &extensionNames) )
+    {
+        _GLEE_GLX_VERSION_1_4 = GL_TRUE;
+        __GLeeLink_GLX_VERSION_1_4();
+    }
+    if (__GLeeCheckExtension("GLX_ARB_multisample", &extensionNames) )
+    {
+        _GLEE_GLX_ARB_multisample = GL_TRUE;
+        __GLeeLink_GLX_ARB_multisample();
+    }
+    if (__GLeeCheckExtension("GLX_ARB_vertex_buffer_object", &extensionNames) )
+    {
+        _GLEE_GLX_ARB_vertex_buffer_object = GL_TRUE;
+        __GLeeLink_GLX_ARB_vertex_buffer_object();
+    }
+    if (__GLeeCheckExtension("GLX_ARB_fbconfig_float", &extensionNames) )
+    {
+        _GLEE_GLX_ARB_fbconfig_float = GL_TRUE;
+        __GLeeLink_GLX_ARB_fbconfig_float();
+    }
+    if (__GLeeCheckExtension("GLX_ARB_framebuffer_sRGB", &extensionNames) )
+    {
+        _GLEE_GLX_ARB_framebuffer_sRGB = GL_TRUE;
+        __GLeeLink_GLX_ARB_framebuffer_sRGB();
+    }
+    if (__GLeeCheckExtension("GLX_ARB_create_context", &extensionNames) )
+    {
+        _GLEE_GLX_ARB_create_context = GL_TRUE;
+        __GLeeLink_GLX_ARB_create_context();
+    }
+    if (__GLeeCheckExtension("GLX_ARB_create_context_profile", &extensionNames) )
+    {
+        _GLEE_GLX_ARB_create_context_profile = GL_TRUE;
+        __GLeeLink_GLX_ARB_create_context_profile();
+    }
+    if (__GLeeCheckExtension("GLX_ARB_create_context_robustness", &extensionNames) )
+    {
+        _GLEE_GLX_ARB_create_context_robustness = GL_TRUE;
+        __GLeeLink_GLX_ARB_create_context_robustness();
+    }
+    if (__GLeeCheckExtension("GLX_SGIS_multisample", &extensionNames) )
+    {
+        _GLEE_GLX_SGIS_multisample = GL_TRUE;
+        __GLeeLink_GLX_SGIS_multisample();
+    }
+    if (__GLeeCheckExtension("GLX_EXT_visual_info", &extensionNames) )
+    {
+        _GLEE_GLX_EXT_visual_info = GL_TRUE;
+        __GLeeLink_GLX_EXT_visual_info();
+    }
+    if (__GLeeCheckExtension("GLX_SGI_swap_control", &extensionNames) )
+    {
+        _GLEE_GLX_SGI_swap_control = GL_TRUE;
+        __GLeeLink_GLX_SGI_swap_control();
+    }
+    if (__GLeeCheckExtension("GLX_SGI_video_sync", &extensionNames) )
+    {
+        _GLEE_GLX_SGI_video_sync = GL_TRUE;
+        __GLeeLink_GLX_SGI_video_sync();
+    }
+    if (__GLeeCheckExtension("GLX_SGI_make_current_read", &extensionNames) )
+    {
+        _GLEE_GLX_SGI_make_current_read = GL_TRUE;
+        __GLeeLink_GLX_SGI_make_current_read();
+    }
+    if (__GLeeCheckExtension("GLX_EXT_visual_rating", &extensionNames) )
+    {
+        _GLEE_GLX_EXT_visual_rating = GL_TRUE;
+        __GLeeLink_GLX_EXT_visual_rating();
+    }
+    if (__GLeeCheckExtension("GLX_EXT_import_context", &extensionNames) )
+    {
+        _GLEE_GLX_EXT_import_context = GL_TRUE;
+        __GLeeLink_GLX_EXT_import_context();
+    }
+    if (__GLeeCheckExtension("GLX_SGIX_fbconfig", &extensionNames) )
+    {
+        _GLEE_GLX_SGIX_fbconfig = GL_TRUE;
+        __GLeeLink_GLX_SGIX_fbconfig();
+    }
+    if (__GLeeCheckExtension("GLX_SGIX_pbuffer", &extensionNames) )
+    {
+        _GLEE_GLX_SGIX_pbuffer = GL_TRUE;
+        __GLeeLink_GLX_SGIX_pbuffer();
+    }
+    if (__GLeeCheckExtension("GLX_SGI_cushion", &extensionNames) )
+    {
+        _GLEE_GLX_SGI_cushion = GL_TRUE;
+        __GLeeLink_GLX_SGI_cushion();
+    }
+    if (__GLeeCheckExtension("GLX_SGIX_video_resize", &extensionNames) )
+    {
+        _GLEE_GLX_SGIX_video_resize = GL_TRUE;
+        __GLeeLink_GLX_SGIX_video_resize();
+    }
+    if (__GLeeCheckExtension("GLX_SGIX_swap_group", &extensionNames) )
+    {
+        _GLEE_GLX_SGIX_swap_group = GL_TRUE;
+        __GLeeLink_GLX_SGIX_swap_group();
+    }
+    if (__GLeeCheckExtension("GLX_SGIX_swap_barrier", &extensionNames) )
+    {
+        _GLEE_GLX_SGIX_swap_barrier = GL_TRUE;
+        __GLeeLink_GLX_SGIX_swap_barrier();
+    }
+    if (__GLeeCheckExtension("GLX_SGIS_blended_overlay", &extensionNames) )
+    {
+        _GLEE_GLX_SGIS_blended_overlay = GL_TRUE;
+        __GLeeLink_GLX_SGIS_blended_overlay();
+    }
+    if (__GLeeCheckExtension("GLX_SGIS_shared_multisample", &extensionNames) )
+    {
+        _GLEE_GLX_SGIS_shared_multisample = GL_TRUE;
+        __GLeeLink_GLX_SGIS_shared_multisample();
+    }
+    if (__GLeeCheckExtension("GLX_SUN_get_transparent_index", &extensionNames) )
+    {
+        _GLEE_GLX_SUN_get_transparent_index = GL_TRUE;
+        __GLeeLink_GLX_SUN_get_transparent_index();
+    }
+    if (__GLeeCheckExtension("GLX_3DFX_multisample", &extensionNames) )
+    {
+        _GLEE_GLX_3DFX_multisample = GL_TRUE;
+        __GLeeLink_GLX_3DFX_multisample();
+    }
+    if (__GLeeCheckExtension("GLX_MESA_copy_sub_buffer", &extensionNames) )
+    {
+        _GLEE_GLX_MESA_copy_sub_buffer = GL_TRUE;
+        __GLeeLink_GLX_MESA_copy_sub_buffer();
+    }
+    if (__GLeeCheckExtension("GLX_MESA_pixmap_colormap", &extensionNames) )
+    {
+        _GLEE_GLX_MESA_pixmap_colormap = GL_TRUE;
+        __GLeeLink_GLX_MESA_pixmap_colormap();
+    }
+    if (__GLeeCheckExtension("GLX_MESA_release_buffers", &extensionNames) )
+    {
+        _GLEE_GLX_MESA_release_buffers = GL_TRUE;
+        __GLeeLink_GLX_MESA_release_buffers();
+    }
+    if (__GLeeCheckExtension("GLX_MESA_set_3dfx_mode", &extensionNames) )
+    {
+        _GLEE_GLX_MESA_set_3dfx_mode = GL_TRUE;
+        __GLeeLink_GLX_MESA_set_3dfx_mode();
+    }
+    if (__GLeeCheckExtension("GLX_SGIX_visual_select_group", &extensionNames) )
+    {
+        _GLEE_GLX_SGIX_visual_select_group = GL_TRUE;
+        __GLeeLink_GLX_SGIX_visual_select_group();
+    }
+    if (__GLeeCheckExtension("GLX_OML_swap_method", &extensionNames) )
+    {
+        _GLEE_GLX_OML_swap_method = GL_TRUE;
+        __GLeeLink_GLX_OML_swap_method();
+    }
+    if (__GLeeCheckExtension("GLX_OML_sync_control", &extensionNames) )
+    {
+        _GLEE_GLX_OML_sync_control = GL_TRUE;
+        __GLeeLink_GLX_OML_sync_control();
+    }
+    if (__GLeeCheckExtension("GLX_NV_float_buffer", &extensionNames) )
+    {
+        _GLEE_GLX_NV_float_buffer = GL_TRUE;
+        __GLeeLink_GLX_NV_float_buffer();
+    }
+    if (__GLeeCheckExtension("GLX_SGIX_hyperpipe", &extensionNames) )
+    {
+        _GLEE_GLX_SGIX_hyperpipe = GL_TRUE;
+        __GLeeLink_GLX_SGIX_hyperpipe();
+    }
+    if (__GLeeCheckExtension("GLX_MESA_agp_offset", &extensionNames) )
+    {
+        _GLEE_GLX_MESA_agp_offset = GL_TRUE;
+        __GLeeLink_GLX_MESA_agp_offset();
+    }
+    if (__GLeeCheckExtension("GLX_EXT_fbconfig_packed_float", &extensionNames) )
+    {
+        _GLEE_GLX_EXT_fbconfig_packed_float = GL_TRUE;
+        __GLeeLink_GLX_EXT_fbconfig_packed_float();
+    }
+    if (__GLeeCheckExtension("GLX_EXT_framebuffer_sRGB", &extensionNames) )
+    {
+        _GLEE_GLX_EXT_framebuffer_sRGB = GL_TRUE;
+        __GLeeLink_GLX_EXT_framebuffer_sRGB();
+    }
+    if (__GLeeCheckExtension("GLX_EXT_texture_from_pixmap", &extensionNames) )
+    {
+        _GLEE_GLX_EXT_texture_from_pixmap = GL_TRUE;
+        __GLeeLink_GLX_EXT_texture_from_pixmap();
+    }
+    if (__GLeeCheckExtension("GLX_NV_present_video", &extensionNames) )
+    {
+        _GLEE_GLX_NV_present_video = GL_TRUE;
+        __GLeeLink_GLX_NV_present_video();
+    }
+    if (__GLeeCheckExtension("GLX_NV_video_out", &extensionNames) )
+    {
+        _GLEE_GLX_NV_video_out = GL_TRUE;
+        __GLeeLink_GLX_NV_video_out();
+    }
+    if (__GLeeCheckExtension("GLX_NV_swap_group", &extensionNames) )
+    {
+        _GLEE_GLX_NV_swap_group = GL_TRUE;
+        __GLeeLink_GLX_NV_swap_group();
+    }
+    if (__GLeeCheckExtension("GLX_NV_video_capture", &extensionNames) )
+    {
+        _GLEE_GLX_NV_video_capture = GL_TRUE;
+        __GLeeLink_GLX_NV_video_capture();
+    }
+    if (__GLeeCheckExtension("GLX_EXT_swap_control", &extensionNames) )
+    {
+        _GLEE_GLX_EXT_swap_control = GL_TRUE;
+        __GLeeLink_GLX_EXT_swap_control();
+    }
+    if (__GLeeCheckExtension("GLX_NV_copy_image", &extensionNames) )
+    {
+        _GLEE_GLX_NV_copy_image = GL_TRUE;
+        __GLeeLink_GLX_NV_copy_image();
+    }
+    if (__GLeeCheckExtension("GLX_INTEL_swap_event", &extensionNames) )
+    {
+        _GLEE_GLX_INTEL_swap_event = GL_TRUE;
+        __GLeeLink_GLX_INTEL_swap_event();
+    }
+    if (__GLeeCheckExtension("GLX_NV_multisample_coverage", &extensionNames) )
+    {
+        _GLEE_GLX_NV_multisample_coverage = GL_TRUE;
+        __GLeeLink_GLX_NV_multisample_coverage();
+    }
+    if (__GLeeCheckExtension("GLX_AMD_gpu_association", &extensionNames) )
+    {
+        _GLEE_GLX_AMD_gpu_association = GL_TRUE;
+        __GLeeLink_GLX_AMD_gpu_association();
+    }
+    if (__GLeeCheckExtension("GLX_EXT_create_context_es2_profile", &extensionNames) )
+    {
+        _GLEE_GLX_EXT_create_context_es2_profile = GL_TRUE;
+        __GLeeLink_GLX_EXT_create_context_es2_profile();
+    }
+    if (__GLeeCheckExtension("GLX_NV_video_output", &extensionNames) )
+    {
+        _GLEE_GLX_NV_video_output = GL_TRUE;
+        __GLeeLink_GLX_NV_video_output();
+    }
+    if (__GLeeCheckExtension("GLX_EXT_scene_marker", &extensionNames) )
+    {
+        _GLEE_GLX_EXT_scene_marker = GL_TRUE;
+        __GLeeLink_GLX_EXT_scene_marker();
+    }
+#endif /* end GLX */
+
+    __GLeeExtList_clean(&extensionNames);
+    return GL_TRUE;
+}
--- /dev/null
+++ love-0.9.1/src/modules/graphics/glee/GLee.h
@@ -0,0 +1,22267 @@
+/***************************************************************************
+*
+* GLee.h 
+* GLee (OpenGL Easy Extension library)        
+* Version : 5.5
+*
+* Copyright (c)2011  Ben Woodhouse  All rights reserved.
+*
+* Redistribution and use in source and binary forms, with or without
+* modification, are permitted provided that the following conditions are 
+* met:
+* 1. Redistributions of source code must retain the above copyright
+* notice, this list of conditions and the following disclaimer as
+* the first lines of this file unmodified.
+* 2. Redistributions in binary form must reproduce the above copyright
+* notice, this list of conditions and the following disclaimer in the
+* documentation and/or other materials provided with the distribution.
+*
+* THIS SOFTWARE IS PROVIDED BY BEN WOODHOUSE ``AS IS'' AND ANY EXPRESS OR
+* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+* IN NO EVENT SHALL BEN WOODHOUSE BE LIABLE FOR ANY DIRECT, INDIRECT,
+* INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
+* NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+* DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+* THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+* THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+
+* Web: http://elf-stone.com/glee.php
+*
+* [This file was automatically generated by GLeeGen 7.0
+*
+***************************************************************************/
+
+#ifndef __glee_h_
+#define __glee_h_
+
+#ifdef __gl_h_
+	#error gl.h included before GLee.h
+#endif
+
+#ifdef __glext_h_
+	#error glext.h included before GLee.h
+#endif
+
+#ifdef __wglext_h_
+	#error wglext.h included before GLee.h
+#endif
+
+#ifdef __glxext_h_
+	#error glxext.h included before GLee.h
+#endif
+
+#ifdef _WIN32
+	#define WIN32_LEAN_AND_MEAN
+	#include <windows.h>
+	#include <GL/gl.h>
+#elif defined(__APPLE__) || defined(__APPLE_CC__)
+    #define GL_GLEXT_LEGACY
+	#include <OpenGL/gl.h>
+#else // GLX
+	#define __glext_h_  /* prevent glext.h from being included  */
+	#define __glxext_h_ /* prevent glxext.h from being included */
+	#define GLX_GLXEXT_PROTOTYPES
+	#include <GL/gl.h>
+	#include <GL/glx.h>
+#endif
+
+#ifndef APIENTRY
+	#define APIENTRY
+#endif
+
+#ifndef APIENTRYP
+	#define APIENTRYP APIENTRY *
+#endif
+
+#define GLEE_EXTERN extern
+
+#ifdef __cplusplus 
+	extern "C" {		/* begin C linkage */
+#endif
+
+#define GLEE_LINK_FAIL 0
+#define GLEE_LINK_PARTIAL 1
+#define GLEE_LINK_COMPLETE 2
+
+typedef void (*GLEE_FUNC)(void);
+
+struct _cl_context;
+struct _cl_event;
+
+/* Extension querying variables */
+
+GLEE_EXTERN GLboolean _GLEE_VERSION_1_2;
+GLEE_EXTERN GLboolean _GLEE_ARB_imaging;
+GLEE_EXTERN GLboolean _GLEE_VERSION_1_3;
+GLEE_EXTERN GLboolean _GLEE_VERSION_1_4;
+GLEE_EXTERN GLboolean _GLEE_VERSION_1_5;
+GLEE_EXTERN GLboolean _GLEE_VERSION_2_0;
+GLEE_EXTERN GLboolean _GLEE_VERSION_2_1;
+GLEE_EXTERN GLboolean _GLEE_VERSION_3_0;
+GLEE_EXTERN GLboolean _GLEE_VERSION_3_1;
+GLEE_EXTERN GLboolean _GLEE_VERSION_3_2;
+GLEE_EXTERN GLboolean _GLEE_VERSION_3_3;
+GLEE_EXTERN GLboolean _GLEE_VERSION_4_0;
+GLEE_EXTERN GLboolean _GLEE_VERSION_4_1;
+GLEE_EXTERN GLboolean _GLEE_VERSION_4_2;
+GLEE_EXTERN GLboolean _GLEE_ARB_multitexture;
+GLEE_EXTERN GLboolean _GLEE_ARB_transpose_matrix;
+GLEE_EXTERN GLboolean _GLEE_ARB_multisample;
+GLEE_EXTERN GLboolean _GLEE_ARB_texture_env_add;
+GLEE_EXTERN GLboolean _GLEE_ARB_texture_cube_map;
+GLEE_EXTERN GLboolean _GLEE_ARB_texture_compression;
+GLEE_EXTERN GLboolean _GLEE_ARB_texture_border_clamp;
+GLEE_EXTERN GLboolean _GLEE_ARB_point_parameters;
+GLEE_EXTERN GLboolean _GLEE_ARB_vertex_blend;
+GLEE_EXTERN GLboolean _GLEE_ARB_matrix_palette;
+GLEE_EXTERN GLboolean _GLEE_ARB_texture_env_combine;
+GLEE_EXTERN GLboolean _GLEE_ARB_texture_env_crossbar;
+GLEE_EXTERN GLboolean _GLEE_ARB_texture_env_dot3;
+GLEE_EXTERN GLboolean _GLEE_ARB_texture_mirrored_repeat;
+GLEE_EXTERN GLboolean _GLEE_ARB_depth_texture;
+GLEE_EXTERN GLboolean _GLEE_ARB_shadow;
+GLEE_EXTERN GLboolean _GLEE_ARB_shadow_ambient;
+GLEE_EXTERN GLboolean _GLEE_ARB_window_pos;
+GLEE_EXTERN GLboolean _GLEE_ARB_vertex_program;
+GLEE_EXTERN GLboolean _GLEE_ARB_fragment_program;
+GLEE_EXTERN GLboolean _GLEE_ARB_vertex_buffer_object;
+GLEE_EXTERN GLboolean _GLEE_ARB_occlusion_query;
+GLEE_EXTERN GLboolean _GLEE_ARB_shader_objects;
+GLEE_EXTERN GLboolean _GLEE_ARB_vertex_shader;
+GLEE_EXTERN GLboolean _GLEE_ARB_fragment_shader;
+GLEE_EXTERN GLboolean _GLEE_ARB_shading_language_100;
+GLEE_EXTERN GLboolean _GLEE_ARB_texture_non_power_of_two;
+GLEE_EXTERN GLboolean _GLEE_ARB_point_sprite;
+GLEE_EXTERN GLboolean _GLEE_ARB_fragment_program_shadow;
+GLEE_EXTERN GLboolean _GLEE_ARB_draw_buffers;
+GLEE_EXTERN GLboolean _GLEE_ARB_texture_rectangle;
+GLEE_EXTERN GLboolean _GLEE_ARB_color_buffer_float;
+GLEE_EXTERN GLboolean _GLEE_ARB_half_float_pixel;
+GLEE_EXTERN GLboolean _GLEE_ARB_texture_float;
+GLEE_EXTERN GLboolean _GLEE_ARB_pixel_buffer_object;
+GLEE_EXTERN GLboolean _GLEE_ARB_depth_buffer_float;
+GLEE_EXTERN GLboolean _GLEE_ARB_draw_instanced;
+GLEE_EXTERN GLboolean _GLEE_ARB_framebuffer_object;
+GLEE_EXTERN GLboolean _GLEE_ARB_framebuffer_sRGB;
+GLEE_EXTERN GLboolean _GLEE_ARB_geometry_shader4;
+GLEE_EXTERN GLboolean _GLEE_ARB_half_float_vertex;
+GLEE_EXTERN GLboolean _GLEE_ARB_instanced_arrays;
+GLEE_EXTERN GLboolean _GLEE_ARB_map_buffer_range;
+GLEE_EXTERN GLboolean _GLEE_ARB_texture_buffer_object;
+GLEE_EXTERN GLboolean _GLEE_ARB_texture_compression_rgtc;
+GLEE_EXTERN GLboolean _GLEE_ARB_texture_rg;
+GLEE_EXTERN GLboolean _GLEE_ARB_vertex_array_object;
+GLEE_EXTERN GLboolean _GLEE_ARB_uniform_buffer_object;
+GLEE_EXTERN GLboolean _GLEE_ARB_compatibility;
+GLEE_EXTERN GLboolean _GLEE_ARB_copy_buffer;
+GLEE_EXTERN GLboolean _GLEE_ARB_shader_texture_lod;
+GLEE_EXTERN GLboolean _GLEE_ARB_depth_clamp;
+GLEE_EXTERN GLboolean _GLEE_ARB_draw_elements_base_vertex;
+GLEE_EXTERN GLboolean _GLEE_ARB_fragment_coord_conventions;
+GLEE_EXTERN GLboolean _GLEE_ARB_provoking_vertex;
+GLEE_EXTERN GLboolean _GLEE_ARB_seamless_cube_map;
+GLEE_EXTERN GLboolean _GLEE_ARB_sync;
+GLEE_EXTERN GLboolean _GLEE_ARB_texture_multisample;
+GLEE_EXTERN GLboolean _GLEE_ARB_vertex_array_bgra;
+GLEE_EXTERN GLboolean _GLEE_ARB_draw_buffers_blend;
+GLEE_EXTERN GLboolean _GLEE_ARB_sample_shading;
+GLEE_EXTERN GLboolean _GLEE_ARB_texture_cube_map_array;
+GLEE_EXTERN GLboolean _GLEE_ARB_texture_gather;
+GLEE_EXTERN GLboolean _GLEE_ARB_texture_query_lod;
+GLEE_EXTERN GLboolean _GLEE_ARB_shading_language_include;
+GLEE_EXTERN GLboolean _GLEE_ARB_texture_compression_bptc;
+GLEE_EXTERN GLboolean _GLEE_ARB_blend_func_extended;
+GLEE_EXTERN GLboolean _GLEE_ARB_explicit_attrib_location;
+GLEE_EXTERN GLboolean _GLEE_ARB_occlusion_query2;
+GLEE_EXTERN GLboolean _GLEE_ARB_sampler_objects;
+GLEE_EXTERN GLboolean _GLEE_ARB_shader_bit_encoding;
+GLEE_EXTERN GLboolean _GLEE_ARB_texture_rgb10_a2ui;
+GLEE_EXTERN GLboolean _GLEE_ARB_texture_swizzle;
+GLEE_EXTERN GLboolean _GLEE_ARB_timer_query;
+GLEE_EXTERN GLboolean _GLEE_ARB_vertex_type_2_10_10_10_rev;
+GLEE_EXTERN GLboolean _GLEE_ARB_draw_indirect;
+GLEE_EXTERN GLboolean _GLEE_ARB_gpu_shader5;
+GLEE_EXTERN GLboolean _GLEE_ARB_gpu_shader_fp64;
+GLEE_EXTERN GLboolean _GLEE_ARB_shader_subroutine;
+GLEE_EXTERN GLboolean _GLEE_ARB_tessellation_shader;
+GLEE_EXTERN GLboolean _GLEE_ARB_texture_buffer_object_rgb32;
+GLEE_EXTERN GLboolean _GLEE_ARB_transform_feedback2;
+GLEE_EXTERN GLboolean _GLEE_ARB_transform_feedback3;
+GLEE_EXTERN GLboolean _GLEE_ARB_ES2_compatibility;
+GLEE_EXTERN GLboolean _GLEE_ARB_get_program_binary;
+GLEE_EXTERN GLboolean _GLEE_ARB_separate_shader_objects;
+GLEE_EXTERN GLboolean _GLEE_ARB_shader_precision;
+GLEE_EXTERN GLboolean _GLEE_ARB_vertex_attrib_64bit;
+GLEE_EXTERN GLboolean _GLEE_ARB_viewport_array;
+GLEE_EXTERN GLboolean _GLEE_ARB_cl_event;
+GLEE_EXTERN GLboolean _GLEE_ARB_robustness;
+GLEE_EXTERN GLboolean _GLEE_ARB_shader_stencil_export;
+GLEE_EXTERN GLboolean _GLEE_ARB_base_instance;
+GLEE_EXTERN GLboolean _GLEE_ARB_shading_language_420pack;
+GLEE_EXTERN GLboolean _GLEE_ARB_transform_feedback_instanced;
+GLEE_EXTERN GLboolean _GLEE_ARB_compressed_texture_pixel_storage;
+GLEE_EXTERN GLboolean _GLEE_ARB_conservative_depth;
+GLEE_EXTERN GLboolean _GLEE_ARB_internalformat_query;
+GLEE_EXTERN GLboolean _GLEE_ARB_map_buffer_alignment;
+GLEE_EXTERN GLboolean _GLEE_ARB_shader_atomic_counters;
+GLEE_EXTERN GLboolean _GLEE_ARB_shader_image_load_store;
+GLEE_EXTERN GLboolean _GLEE_ARB_shading_language_packing;
+GLEE_EXTERN GLboolean _GLEE_ARB_texture_storage;
+GLEE_EXTERN GLboolean _GLEE_EXT_abgr;
+GLEE_EXTERN GLboolean _GLEE_EXT_blend_color;
+GLEE_EXTERN GLboolean _GLEE_EXT_polygon_offset;
+GLEE_EXTERN GLboolean _GLEE_EXT_texture;
+GLEE_EXTERN GLboolean _GLEE_EXT_texture3D;
+GLEE_EXTERN GLboolean _GLEE_SGIS_texture_filter4;
+GLEE_EXTERN GLboolean _GLEE_EXT_subtexture;
+GLEE_EXTERN GLboolean _GLEE_EXT_copy_texture;
+GLEE_EXTERN GLboolean _GLEE_EXT_histogram;
+GLEE_EXTERN GLboolean _GLEE_EXT_convolution;
+GLEE_EXTERN GLboolean _GLEE_SGI_color_matrix;
+GLEE_EXTERN GLboolean _GLEE_SGI_color_table;
+GLEE_EXTERN GLboolean _GLEE_SGIS_pixel_texture;
+GLEE_EXTERN GLboolean _GLEE_SGIX_pixel_texture;
+GLEE_EXTERN GLboolean _GLEE_SGIS_texture4D;
+GLEE_EXTERN GLboolean _GLEE_SGI_texture_color_table;
+GLEE_EXTERN GLboolean _GLEE_EXT_cmyka;
+GLEE_EXTERN GLboolean _GLEE_EXT_texture_object;
+GLEE_EXTERN GLboolean _GLEE_SGIS_detail_texture;
+GLEE_EXTERN GLboolean _GLEE_SGIS_sharpen_texture;
+GLEE_EXTERN GLboolean _GLEE_EXT_packed_pixels;
+GLEE_EXTERN GLboolean _GLEE_SGIS_texture_lod;
+GLEE_EXTERN GLboolean _GLEE_SGIS_multisample;
+GLEE_EXTERN GLboolean _GLEE_EXT_rescale_normal;
+GLEE_EXTERN GLboolean _GLEE_EXT_vertex_array;
+GLEE_EXTERN GLboolean _GLEE_EXT_misc_attribute;
+GLEE_EXTERN GLboolean _GLEE_SGIS_generate_mipmap;
+GLEE_EXTERN GLboolean _GLEE_SGIX_clipmap;
+GLEE_EXTERN GLboolean _GLEE_SGIX_shadow;
+GLEE_EXTERN GLboolean _GLEE_SGIS_texture_edge_clamp;
+GLEE_EXTERN GLboolean _GLEE_SGIS_texture_border_clamp;
+GLEE_EXTERN GLboolean _GLEE_EXT_blend_minmax;
+GLEE_EXTERN GLboolean _GLEE_EXT_blend_subtract;
+GLEE_EXTERN GLboolean _GLEE_EXT_blend_logic_op;
+GLEE_EXTERN GLboolean _GLEE_SGIX_interlace;
+GLEE_EXTERN GLboolean _GLEE_SGIX_pixel_tiles;
+GLEE_EXTERN GLboolean _GLEE_SGIS_texture_select;
+GLEE_EXTERN GLboolean _GLEE_SGIX_sprite;
+GLEE_EXTERN GLboolean _GLEE_SGIX_texture_multi_buffer;
+GLEE_EXTERN GLboolean _GLEE_EXT_point_parameters;
+GLEE_EXTERN GLboolean _GLEE_SGIS_point_parameters;
+GLEE_EXTERN GLboolean _GLEE_SGIX_instruments;
+GLEE_EXTERN GLboolean _GLEE_SGIX_texture_scale_bias;
+GLEE_EXTERN GLboolean _GLEE_SGIX_framezoom;
+GLEE_EXTERN GLboolean _GLEE_SGIX_tag_sample_buffer;
+GLEE_EXTERN GLboolean _GLEE_FfdMaskSGIX;
+GLEE_EXTERN GLboolean _GLEE_SGIX_polynomial_ffd;
+GLEE_EXTERN GLboolean _GLEE_SGIX_reference_plane;
+GLEE_EXTERN GLboolean _GLEE_SGIX_flush_raster;
+GLEE_EXTERN GLboolean _GLEE_SGIX_depth_texture;
+GLEE_EXTERN GLboolean _GLEE_SGIS_fog_function;
+GLEE_EXTERN GLboolean _GLEE_SGIX_fog_offset;
+GLEE_EXTERN GLboolean _GLEE_HP_image_transform;
+GLEE_EXTERN GLboolean _GLEE_HP_convolution_border_modes;
+GLEE_EXTERN GLboolean _GLEE_INGR_palette_buffer;
+GLEE_EXTERN GLboolean _GLEE_SGIX_texture_add_env;
+GLEE_EXTERN GLboolean _GLEE_EXT_color_subtable;
+GLEE_EXTERN GLboolean _GLEE_PGI_vertex_hints;
+GLEE_EXTERN GLboolean _GLEE_PGI_misc_hints;
+GLEE_EXTERN GLboolean _GLEE_EXT_paletted_texture;
+GLEE_EXTERN GLboolean _GLEE_EXT_clip_volume_hint;
+GLEE_EXTERN GLboolean _GLEE_SGIX_list_priority;
+GLEE_EXTERN GLboolean _GLEE_SGIX_ir_instrument1;
+GLEE_EXTERN GLboolean _GLEE_SGIX_calligraphic_fragment;
+GLEE_EXTERN GLboolean _GLEE_SGIX_texture_lod_bias;
+GLEE_EXTERN GLboolean _GLEE_SGIX_shadow_ambient;
+GLEE_EXTERN GLboolean _GLEE_EXT_index_texture;
+GLEE_EXTERN GLboolean _GLEE_EXT_index_material;
+GLEE_EXTERN GLboolean _GLEE_EXT_index_func;
+GLEE_EXTERN GLboolean _GLEE_EXT_index_array_formats;
+GLEE_EXTERN GLboolean _GLEE_EXT_compiled_vertex_array;
+GLEE_EXTERN GLboolean _GLEE_EXT_cull_vertex;
+GLEE_EXTERN GLboolean _GLEE_SGIX_ycrcb;
+GLEE_EXTERN GLboolean _GLEE_SGIX_fragment_lighting;
+GLEE_EXTERN GLboolean _GLEE_IBM_rasterpos_clip;
+GLEE_EXTERN GLboolean _GLEE_HP_texture_lighting;
+GLEE_EXTERN GLboolean _GLEE_EXT_draw_range_elements;
+GLEE_EXTERN GLboolean _GLEE_WIN_phong_shading;
+GLEE_EXTERN GLboolean _GLEE_WIN_specular_fog;
+GLEE_EXTERN GLboolean _GLEE_EXT_light_texture;
+GLEE_EXTERN GLboolean _GLEE_SGIX_blend_alpha_minmax;
+GLEE_EXTERN GLboolean _GLEE_SGIX_impact_pixel_texture;
+GLEE_EXTERN GLboolean _GLEE_EXT_bgra;
+GLEE_EXTERN GLboolean _GLEE_SGIX_async;
+GLEE_EXTERN GLboolean _GLEE_SGIX_async_pixel;
+GLEE_EXTERN GLboolean _GLEE_SGIX_async_histogram;
+GLEE_EXTERN GLboolean _GLEE_INTEL_texture_scissor;
+GLEE_EXTERN GLboolean _GLEE_INTEL_parallel_arrays;
+GLEE_EXTERN GLboolean _GLEE_HP_occlusion_test;
+GLEE_EXTERN GLboolean _GLEE_EXT_pixel_transform;
+GLEE_EXTERN GLboolean _GLEE_EXT_pixel_transform_color_table;
+GLEE_EXTERN GLboolean _GLEE_EXT_shared_texture_palette;
+GLEE_EXTERN GLboolean _GLEE_EXT_separate_specular_color;
+GLEE_EXTERN GLboolean _GLEE_EXT_secondary_color;
+GLEE_EXTERN GLboolean _GLEE_EXT_texture_perturb_normal;
+GLEE_EXTERN GLboolean _GLEE_EXT_multi_draw_arrays;
+GLEE_EXTERN GLboolean _GLEE_EXT_fog_coord;
+GLEE_EXTERN GLboolean _GLEE_REND_screen_coordinates;
+GLEE_EXTERN GLboolean _GLEE_EXT_coordinate_frame;
+GLEE_EXTERN GLboolean _GLEE_EXT_texture_env_combine;
+GLEE_EXTERN GLboolean _GLEE_APPLE_specular_vector;
+GLEE_EXTERN GLboolean _GLEE_APPLE_transform_hint;
+GLEE_EXTERN GLboolean _GLEE_SGIX_fog_scale;
+GLEE_EXTERN GLboolean _GLEE_SUNX_constant_data;
+GLEE_EXTERN GLboolean _GLEE_SUN_global_alpha;
+GLEE_EXTERN GLboolean _GLEE_SUN_triangle_list;
+GLEE_EXTERN GLboolean _GLEE_SUN_vertex;
+GLEE_EXTERN GLboolean _GLEE_EXT_blend_func_separate;
+GLEE_EXTERN GLboolean _GLEE_INGR_color_clamp;
+GLEE_EXTERN GLboolean _GLEE_INGR_interlace_read;
+GLEE_EXTERN GLboolean _GLEE_EXT_stencil_wrap;
+GLEE_EXTERN GLboolean _GLEE_EXT_422_pixels;
+GLEE_EXTERN GLboolean _GLEE_NV_texgen_reflection;
+GLEE_EXTERN GLboolean _GLEE_EXT_texture_cube_map;
+GLEE_EXTERN GLboolean _GLEE_SUN_convolution_border_modes;
+GLEE_EXTERN GLboolean _GLEE_EXT_texture_env_add;
+GLEE_EXTERN GLboolean _GLEE_EXT_texture_lod_bias;
+GLEE_EXTERN GLboolean _GLEE_EXT_texture_filter_anisotropic;
+GLEE_EXTERN GLboolean _GLEE_EXT_vertex_weighting;
+GLEE_EXTERN GLboolean _GLEE_NV_light_max_exponent;
+GLEE_EXTERN GLboolean _GLEE_NV_vertex_array_range;
+GLEE_EXTERN GLboolean _GLEE_NV_register_combiners;
+GLEE_EXTERN GLboolean _GLEE_NV_fog_distance;
+GLEE_EXTERN GLboolean _GLEE_NV_texgen_emboss;
+GLEE_EXTERN GLboolean _GLEE_NV_blend_square;
+GLEE_EXTERN GLboolean _GLEE_NV_texture_env_combine4;
+GLEE_EXTERN GLboolean _GLEE_MESA_resize_buffers;
+GLEE_EXTERN GLboolean _GLEE_MESA_window_pos;
+GLEE_EXTERN GLboolean _GLEE_EXT_texture_compression_s3tc;
+GLEE_EXTERN GLboolean _GLEE_IBM_cull_vertex;
+GLEE_EXTERN GLboolean _GLEE_IBM_multimode_draw_arrays;
+GLEE_EXTERN GLboolean _GLEE_IBM_vertex_array_lists;
+GLEE_EXTERN GLboolean _GLEE_SGIX_subsample;
+GLEE_EXTERN GLboolean _GLEE_SGIX_ycrcb_subsample;
+GLEE_EXTERN GLboolean _GLEE_SGIX_ycrcba;
+GLEE_EXTERN GLboolean _GLEE_SGI_depth_pass_instrument;
+GLEE_EXTERN GLboolean _GLEE_3DFX_texture_compression_FXT1;
+GLEE_EXTERN GLboolean _GLEE_3DFX_multisample;
+GLEE_EXTERN GLboolean _GLEE_3DFX_tbuffer;
+GLEE_EXTERN GLboolean _GLEE_EXT_multisample;
+GLEE_EXTERN GLboolean _GLEE_SGIX_vertex_preclip;
+GLEE_EXTERN GLboolean _GLEE_SGIX_convolution_accuracy;
+GLEE_EXTERN GLboolean _GLEE_SGIX_resample;
+GLEE_EXTERN GLboolean _GLEE_SGIS_point_line_texgen;
+GLEE_EXTERN GLboolean _GLEE_SGIS_texture_color_mask;
+GLEE_EXTERN GLboolean _GLEE_EXT_texture_env_dot3;
+GLEE_EXTERN GLboolean _GLEE_ATI_texture_mirror_once;
+GLEE_EXTERN GLboolean _GLEE_NV_fence;
+GLEE_EXTERN GLboolean _GLEE_IBM_texture_mirrored_repeat;
+GLEE_EXTERN GLboolean _GLEE_NV_evaluators;
+GLEE_EXTERN GLboolean _GLEE_NV_packed_depth_stencil;
+GLEE_EXTERN GLboolean _GLEE_NV_register_combiners2;
+GLEE_EXTERN GLboolean _GLEE_NV_texture_compression_vtc;
+GLEE_EXTERN GLboolean _GLEE_NV_texture_rectangle;
+GLEE_EXTERN GLboolean _GLEE_NV_texture_shader;
+GLEE_EXTERN GLboolean _GLEE_NV_texture_shader2;
+GLEE_EXTERN GLboolean _GLEE_NV_vertex_array_range2;
+GLEE_EXTERN GLboolean _GLEE_NV_vertex_program;
+GLEE_EXTERN GLboolean _GLEE_SGIX_texture_coordinate_clamp;
+GLEE_EXTERN GLboolean _GLEE_SGIX_scalebias_hint;
+GLEE_EXTERN GLboolean _GLEE_OML_interlace;
+GLEE_EXTERN GLboolean _GLEE_OML_subsample;
+GLEE_EXTERN GLboolean _GLEE_OML_resample;
+GLEE_EXTERN GLboolean _GLEE_NV_copy_depth_to_color;
+GLEE_EXTERN GLboolean _GLEE_ATI_envmap_bumpmap;
+GLEE_EXTERN GLboolean _GLEE_ATI_fragment_shader;
+GLEE_EXTERN GLboolean _GLEE_ATI_pn_triangles;
+GLEE_EXTERN GLboolean _GLEE_ATI_vertex_array_object;
+GLEE_EXTERN GLboolean _GLEE_EXT_vertex_shader;
+GLEE_EXTERN GLboolean _GLEE_ATI_vertex_streams;
+GLEE_EXTERN GLboolean _GLEE_ATI_element_array;
+GLEE_EXTERN GLboolean _GLEE_SUN_mesh_array;
+GLEE_EXTERN GLboolean _GLEE_SUN_slice_accum;
+GLEE_EXTERN GLboolean _GLEE_NV_multisample_filter_hint;
+GLEE_EXTERN GLboolean _GLEE_NV_depth_clamp;
+GLEE_EXTERN GLboolean _GLEE_NV_occlusion_query;
+GLEE_EXTERN GLboolean _GLEE_NV_point_sprite;
+GLEE_EXTERN GLboolean _GLEE_NV_texture_shader3;
+GLEE_EXTERN GLboolean _GLEE_NV_vertex_program1_1;
+GLEE_EXTERN GLboolean _GLEE_EXT_shadow_funcs;
+GLEE_EXTERN GLboolean _GLEE_EXT_stencil_two_side;
+GLEE_EXTERN GLboolean _GLEE_ATI_text_fragment_shader;
+GLEE_EXTERN GLboolean _GLEE_APPLE_client_storage;
+GLEE_EXTERN GLboolean _GLEE_APPLE_element_array;
+GLEE_EXTERN GLboolean _GLEE_APPLE_fence;
+GLEE_EXTERN GLboolean _GLEE_APPLE_vertex_array_object;
+GLEE_EXTERN GLboolean _GLEE_APPLE_vertex_array_range;
+GLEE_EXTERN GLboolean _GLEE_APPLE_ycbcr_422;
+GLEE_EXTERN GLboolean _GLEE_S3_s3tc;
+GLEE_EXTERN GLboolean _GLEE_ATI_draw_buffers;
+GLEE_EXTERN GLboolean _GLEE_ATI_pixel_format_float;
+GLEE_EXTERN GLboolean _GLEE_ATI_texture_env_combine3;
+GLEE_EXTERN GLboolean _GLEE_ATI_texture_float;
+GLEE_EXTERN GLboolean _GLEE_NV_float_buffer;
+GLEE_EXTERN GLboolean _GLEE_NV_fragment_program;
+GLEE_EXTERN GLboolean _GLEE_NV_half_float;
+GLEE_EXTERN GLboolean _GLEE_NV_pixel_data_range;
+GLEE_EXTERN GLboolean _GLEE_NV_primitive_restart;
+GLEE_EXTERN GLboolean _GLEE_NV_texture_expand_normal;
+GLEE_EXTERN GLboolean _GLEE_NV_vertex_program2;
+GLEE_EXTERN GLboolean _GLEE_ATI_map_object_buffer;
+GLEE_EXTERN GLboolean _GLEE_ATI_separate_stencil;
+GLEE_EXTERN GLboolean _GLEE_ATI_vertex_attrib_array_object;
+GLEE_EXTERN GLboolean _GLEE_OES_read_format;
+GLEE_EXTERN GLboolean _GLEE_EXT_depth_bounds_test;
+GLEE_EXTERN GLboolean _GLEE_EXT_texture_mirror_clamp;
+GLEE_EXTERN GLboolean _GLEE_EXT_blend_equation_separate;
+GLEE_EXTERN GLboolean _GLEE_MESA_pack_invert;
+GLEE_EXTERN GLboolean _GLEE_MESA_ycbcr_texture;
+GLEE_EXTERN GLboolean _GLEE_EXT_pixel_buffer_object;
+GLEE_EXTERN GLboolean _GLEE_NV_fragment_program_option;
+GLEE_EXTERN GLboolean _GLEE_NV_fragment_program2;
+GLEE_EXTERN GLboolean _GLEE_NV_vertex_program2_option;
+GLEE_EXTERN GLboolean _GLEE_NV_vertex_program3;
+GLEE_EXTERN GLboolean _GLEE_EXT_framebuffer_object;
+GLEE_EXTERN GLboolean _GLEE_GREMEDY_string_marker;
+GLEE_EXTERN GLboolean _GLEE_EXT_packed_depth_stencil;
+GLEE_EXTERN GLboolean _GLEE_EXT_stencil_clear_tag;
+GLEE_EXTERN GLboolean _GLEE_EXT_texture_sRGB;
+GLEE_EXTERN GLboolean _GLEE_EXT_framebuffer_blit;
+GLEE_EXTERN GLboolean _GLEE_EXT_framebuffer_multisample;
+GLEE_EXTERN GLboolean _GLEE_MESAX_texture_stack;
+GLEE_EXTERN GLboolean _GLEE_EXT_timer_query;
+GLEE_EXTERN GLboolean _GLEE_EXT_gpu_program_parameters;
+GLEE_EXTERN GLboolean _GLEE_APPLE_flush_buffer_range;
+GLEE_EXTERN GLboolean _GLEE_EXT_gpu_shader4;
+GLEE_EXTERN GLboolean _GLEE_EXT_draw_instanced;
+GLEE_EXTERN GLboolean _GLEE_EXT_packed_float;
+GLEE_EXTERN GLboolean _GLEE_EXT_texture_array;
+GLEE_EXTERN GLboolean _GLEE_EXT_texture_buffer_object;
+GLEE_EXTERN GLboolean _GLEE_EXT_texture_compression_latc;
+GLEE_EXTERN GLboolean _GLEE_EXT_texture_compression_rgtc;
+GLEE_EXTERN GLboolean _GLEE_EXT_texture_shared_exponent;
+GLEE_EXTERN GLboolean _GLEE_NV_depth_buffer_float;
+GLEE_EXTERN GLboolean _GLEE_NV_framebuffer_multisample_coverage;
+GLEE_EXTERN GLboolean _GLEE_EXT_framebuffer_sRGB;
+GLEE_EXTERN GLboolean _GLEE_NV_geometry_shader4;
+GLEE_EXTERN GLboolean _GLEE_NV_parameter_buffer_object;
+GLEE_EXTERN GLboolean _GLEE_EXT_draw_buffers2;
+GLEE_EXTERN GLboolean _GLEE_NV_transform_feedback;
+GLEE_EXTERN GLboolean _GLEE_EXT_bindable_uniform;
+GLEE_EXTERN GLboolean _GLEE_EXT_texture_integer;
+GLEE_EXTERN GLboolean _GLEE_GREMEDY_frame_terminator;
+GLEE_EXTERN GLboolean _GLEE_NV_conditional_render;
+GLEE_EXTERN GLboolean _GLEE_NV_present_video;
+GLEE_EXTERN GLboolean _GLEE_EXT_transform_feedback;
+GLEE_EXTERN GLboolean _GLEE_EXT_direct_state_access;
+GLEE_EXTERN GLboolean _GLEE_EXT_vertex_array_bgra;
+GLEE_EXTERN GLboolean _GLEE_EXT_texture_swizzle;
+GLEE_EXTERN GLboolean _GLEE_NV_explicit_multisample;
+GLEE_EXTERN GLboolean _GLEE_NV_transform_feedback2;
+GLEE_EXTERN GLboolean _GLEE_ATI_meminfo;
+GLEE_EXTERN GLboolean _GLEE_AMD_performance_monitor;
+GLEE_EXTERN GLboolean _GLEE_AMD_texture_texture4;
+GLEE_EXTERN GLboolean _GLEE_AMD_vertex_shader_tesselator;
+GLEE_EXTERN GLboolean _GLEE_EXT_provoking_vertex;
+GLEE_EXTERN GLboolean _GLEE_EXT_texture_snorm;
+GLEE_EXTERN GLboolean _GLEE_AMD_draw_buffers_blend;
+GLEE_EXTERN GLboolean _GLEE_APPLE_texture_range;
+GLEE_EXTERN GLboolean _GLEE_APPLE_float_pixels;
+GLEE_EXTERN GLboolean _GLEE_APPLE_vertex_program_evaluators;
+GLEE_EXTERN GLboolean _GLEE_APPLE_aux_depth_stencil;
+GLEE_EXTERN GLboolean _GLEE_APPLE_object_purgeable;
+GLEE_EXTERN GLboolean _GLEE_APPLE_row_bytes;
+GLEE_EXTERN GLboolean _GLEE_APPLE_rgb_422;
+GLEE_EXTERN GLboolean _GLEE_NV_video_capture;
+GLEE_EXTERN GLboolean _GLEE_NV_copy_image;
+GLEE_EXTERN GLboolean _GLEE_EXT_separate_shader_objects;
+GLEE_EXTERN GLboolean _GLEE_NV_parameter_buffer_object2;
+GLEE_EXTERN GLboolean _GLEE_NV_shader_buffer_load;
+GLEE_EXTERN GLboolean _GLEE_NV_vertex_buffer_unified_memory;
+GLEE_EXTERN GLboolean _GLEE_NV_texture_barrier;
+GLEE_EXTERN GLboolean _GLEE_AMD_shader_stencil_export;
+GLEE_EXTERN GLboolean _GLEE_AMD_seamless_cubemap_per_texture;
+GLEE_EXTERN GLboolean _GLEE_AMD_conservative_depth;
+GLEE_EXTERN GLboolean _GLEE_EXT_shader_image_load_store;
+GLEE_EXTERN GLboolean _GLEE_EXT_vertex_attrib_64bit;
+GLEE_EXTERN GLboolean _GLEE_NV_gpu_program5;
+GLEE_EXTERN GLboolean _GLEE_NV_gpu_shader5;
+GLEE_EXTERN GLboolean _GLEE_NV_shader_buffer_store;
+GLEE_EXTERN GLboolean _GLEE_NV_tessellation_program5;
+GLEE_EXTERN GLboolean _GLEE_NV_vertex_attrib_integer_64bit;
+GLEE_EXTERN GLboolean _GLEE_NV_multisample_coverage;
+GLEE_EXTERN GLboolean _GLEE_AMD_name_gen_delete;
+GLEE_EXTERN GLboolean _GLEE_AMD_transform_feedback3_lines_triangles;
+GLEE_EXTERN GLboolean _GLEE_AMD_depth_clamp_separate;
+GLEE_EXTERN GLboolean _GLEE_EXT_texture_sRGB_decode;
+GLEE_EXTERN GLboolean _GLEE_NV_texture_multisample;
+GLEE_EXTERN GLboolean _GLEE_AMD_blend_minmax_factor;
+GLEE_EXTERN GLboolean _GLEE_AMD_sample_positions;
+GLEE_EXTERN GLboolean _GLEE_EXT_x11_sync_object;
+GLEE_EXTERN GLboolean _GLEE_AMD_multi_draw_indirect;
+GLEE_EXTERN GLboolean _GLEE_EXT_framebuffer_multisample_blit_scaled;
+GLEE_EXTERN GLboolean _GLEE_SGIX_texture_select;
+GLEE_EXTERN GLboolean _GLEE_INGR_blend_func_separate;
+GLEE_EXTERN GLboolean _GLEE_SGIX_depth_pass_instrument;
+GLEE_EXTERN GLboolean _GLEE_SGIX_igloo_interface;
+GLEE_EXTERN GLboolean _GLEE_OES_compressed_paletted_texture;
+GLEE_EXTERN GLboolean _GLEE_OES_fixed_point;
+GLEE_EXTERN GLboolean _GLEE_OES_single_precision;
+GLEE_EXTERN GLboolean _GLEE_OES_query_matrix;
+GLEE_EXTERN GLboolean _GLEE_OES_byte_coordinates;
+GLEE_EXTERN GLboolean _GLEE_NV_gpu_program4;
+GLEE_EXTERN GLboolean _GLEE_NV_path_rendering;
+GLEE_EXTERN GLboolean _GLEE_AMD_vertex_shader_tessellator;
+GLEE_EXTERN GLboolean _GLEE_EXT_fragment_lighting;
+GLEE_EXTERN GLboolean _GLEE_EXT_texture_compression_dxt1;
+GLEE_EXTERN GLboolean _GLEE_EXT_scene_marker;
+GLEE_EXTERN GLboolean _GLEE_EXT_geometry_shader4;
+GLEE_EXTERN GLboolean _GLEE_EXT_texture_env;
+GLEE_EXTERN GLboolean _GLEE_SGIX_texture_range;
+GLEE_EXTERN GLboolean _GLEE_SGIX_pixel_texture_bits;
+GLEE_EXTERN GLboolean _GLEE_IBM_static_data;
+
+/* Aliases for extension querying variables */
+
+#define GLEE_VERSION_1_2     GLeeEnabled(&_GLEE_VERSION_1_2)
+#define GLEE_ARB_imaging     GLeeEnabled(&_GLEE_ARB_imaging)
+#define GLEE_VERSION_1_3     GLeeEnabled(&_GLEE_VERSION_1_3)
+#define GLEE_VERSION_1_4     GLeeEnabled(&_GLEE_VERSION_1_4)
+#define GLEE_VERSION_1_5     GLeeEnabled(&_GLEE_VERSION_1_5)
+#define GLEE_VERSION_2_0     GLeeEnabled(&_GLEE_VERSION_2_0)
+#define GLEE_VERSION_2_1     GLeeEnabled(&_GLEE_VERSION_2_1)
+#define GLEE_VERSION_3_0     GLeeEnabled(&_GLEE_VERSION_3_0)
+#define GLEE_VERSION_3_1     GLeeEnabled(&_GLEE_VERSION_3_1)
+#define GLEE_VERSION_3_2     GLeeEnabled(&_GLEE_VERSION_3_2)
+#define GLEE_VERSION_3_3     GLeeEnabled(&_GLEE_VERSION_3_3)
+#define GLEE_VERSION_4_0     GLeeEnabled(&_GLEE_VERSION_4_0)
+#define GLEE_VERSION_4_1     GLeeEnabled(&_GLEE_VERSION_4_1)
+#define GLEE_VERSION_4_2     GLeeEnabled(&_GLEE_VERSION_4_2)
+#define GLEE_ARB_multitexture     GLeeEnabled(&_GLEE_ARB_multitexture)
+#define GLEE_ARB_transpose_matrix     GLeeEnabled(&_GLEE_ARB_transpose_matrix)
+#define GLEE_ARB_multisample     GLeeEnabled(&_GLEE_ARB_multisample)
+#define GLEE_ARB_texture_env_add     GLeeEnabled(&_GLEE_ARB_texture_env_add)
+#define GLEE_ARB_texture_cube_map     GLeeEnabled(&_GLEE_ARB_texture_cube_map)
+#define GLEE_ARB_texture_compression     GLeeEnabled(&_GLEE_ARB_texture_compression)
+#define GLEE_ARB_texture_border_clamp     GLeeEnabled(&_GLEE_ARB_texture_border_clamp)
+#define GLEE_ARB_point_parameters     GLeeEnabled(&_GLEE_ARB_point_parameters)
+#define GLEE_ARB_vertex_blend     GLeeEnabled(&_GLEE_ARB_vertex_blend)
+#define GLEE_ARB_matrix_palette     GLeeEnabled(&_GLEE_ARB_matrix_palette)
+#define GLEE_ARB_texture_env_combine     GLeeEnabled(&_GLEE_ARB_texture_env_combine)
+#define GLEE_ARB_texture_env_crossbar     GLeeEnabled(&_GLEE_ARB_texture_env_crossbar)
+#define GLEE_ARB_texture_env_dot3     GLeeEnabled(&_GLEE_ARB_texture_env_dot3)
+#define GLEE_ARB_texture_mirrored_repeat     GLeeEnabled(&_GLEE_ARB_texture_mirrored_repeat)
+#define GLEE_ARB_depth_texture     GLeeEnabled(&_GLEE_ARB_depth_texture)
+#define GLEE_ARB_shadow     GLeeEnabled(&_GLEE_ARB_shadow)
+#define GLEE_ARB_shadow_ambient     GLeeEnabled(&_GLEE_ARB_shadow_ambient)
+#define GLEE_ARB_window_pos     GLeeEnabled(&_GLEE_ARB_window_pos)
+#define GLEE_ARB_vertex_program     GLeeEnabled(&_GLEE_ARB_vertex_program)
+#define GLEE_ARB_fragment_program     GLeeEnabled(&_GLEE_ARB_fragment_program)
+#define GLEE_ARB_vertex_buffer_object     GLeeEnabled(&_GLEE_ARB_vertex_buffer_object)
+#define GLEE_ARB_occlusion_query     GLeeEnabled(&_GLEE_ARB_occlusion_query)
+#define GLEE_ARB_shader_objects     GLeeEnabled(&_GLEE_ARB_shader_objects)
+#define GLEE_ARB_vertex_shader     GLeeEnabled(&_GLEE_ARB_vertex_shader)
+#define GLEE_ARB_fragment_shader     GLeeEnabled(&_GLEE_ARB_fragment_shader)
+#define GLEE_ARB_shading_language_100     GLeeEnabled(&_GLEE_ARB_shading_language_100)
+#define GLEE_ARB_texture_non_power_of_two     GLeeEnabled(&_GLEE_ARB_texture_non_power_of_two)
+#define GLEE_ARB_point_sprite     GLeeEnabled(&_GLEE_ARB_point_sprite)
+#define GLEE_ARB_fragment_program_shadow     GLeeEnabled(&_GLEE_ARB_fragment_program_shadow)
+#define GLEE_ARB_draw_buffers     GLeeEnabled(&_GLEE_ARB_draw_buffers)
+#define GLEE_ARB_texture_rectangle     GLeeEnabled(&_GLEE_ARB_texture_rectangle)
+#define GLEE_ARB_color_buffer_float     GLeeEnabled(&_GLEE_ARB_color_buffer_float)
+#define GLEE_ARB_half_float_pixel     GLeeEnabled(&_GLEE_ARB_half_float_pixel)
+#define GLEE_ARB_texture_float     GLeeEnabled(&_GLEE_ARB_texture_float)
+#define GLEE_ARB_pixel_buffer_object     GLeeEnabled(&_GLEE_ARB_pixel_buffer_object)
+#define GLEE_ARB_depth_buffer_float     GLeeEnabled(&_GLEE_ARB_depth_buffer_float)
+#define GLEE_ARB_draw_instanced     GLeeEnabled(&_GLEE_ARB_draw_instanced)
+#define GLEE_ARB_framebuffer_object     GLeeEnabled(&_GLEE_ARB_framebuffer_object)
+#define GLEE_ARB_framebuffer_sRGB     GLeeEnabled(&_GLEE_ARB_framebuffer_sRGB)
+#define GLEE_ARB_geometry_shader4     GLeeEnabled(&_GLEE_ARB_geometry_shader4)
+#define GLEE_ARB_half_float_vertex     GLeeEnabled(&_GLEE_ARB_half_float_vertex)
+#define GLEE_ARB_instanced_arrays     GLeeEnabled(&_GLEE_ARB_instanced_arrays)
+#define GLEE_ARB_map_buffer_range     GLeeEnabled(&_GLEE_ARB_map_buffer_range)
+#define GLEE_ARB_texture_buffer_object     GLeeEnabled(&_GLEE_ARB_texture_buffer_object)
+#define GLEE_ARB_texture_compression_rgtc     GLeeEnabled(&_GLEE_ARB_texture_compression_rgtc)
+#define GLEE_ARB_texture_rg     GLeeEnabled(&_GLEE_ARB_texture_rg)
+#define GLEE_ARB_vertex_array_object     GLeeEnabled(&_GLEE_ARB_vertex_array_object)
+#define GLEE_ARB_uniform_buffer_object     GLeeEnabled(&_GLEE_ARB_uniform_buffer_object)
+#define GLEE_ARB_compatibility     GLeeEnabled(&_GLEE_ARB_compatibility)
+#define GLEE_ARB_copy_buffer     GLeeEnabled(&_GLEE_ARB_copy_buffer)
+#define GLEE_ARB_shader_texture_lod     GLeeEnabled(&_GLEE_ARB_shader_texture_lod)
+#define GLEE_ARB_depth_clamp     GLeeEnabled(&_GLEE_ARB_depth_clamp)
+#define GLEE_ARB_draw_elements_base_vertex     GLeeEnabled(&_GLEE_ARB_draw_elements_base_vertex)
+#define GLEE_ARB_fragment_coord_conventions     GLeeEnabled(&_GLEE_ARB_fragment_coord_conventions)
+#define GLEE_ARB_provoking_vertex     GLeeEnabled(&_GLEE_ARB_provoking_vertex)
+#define GLEE_ARB_seamless_cube_map     GLeeEnabled(&_GLEE_ARB_seamless_cube_map)
+#define GLEE_ARB_sync     GLeeEnabled(&_GLEE_ARB_sync)
+#define GLEE_ARB_texture_multisample     GLeeEnabled(&_GLEE_ARB_texture_multisample)
+#define GLEE_ARB_vertex_array_bgra     GLeeEnabled(&_GLEE_ARB_vertex_array_bgra)
+#define GLEE_ARB_draw_buffers_blend     GLeeEnabled(&_GLEE_ARB_draw_buffers_blend)
+#define GLEE_ARB_sample_shading     GLeeEnabled(&_GLEE_ARB_sample_shading)
+#define GLEE_ARB_texture_cube_map_array     GLeeEnabled(&_GLEE_ARB_texture_cube_map_array)
+#define GLEE_ARB_texture_gather     GLeeEnabled(&_GLEE_ARB_texture_gather)
+#define GLEE_ARB_texture_query_lod     GLeeEnabled(&_GLEE_ARB_texture_query_lod)
+#define GLEE_ARB_shading_language_include     GLeeEnabled(&_GLEE_ARB_shading_language_include)
+#define GLEE_ARB_texture_compression_bptc     GLeeEnabled(&_GLEE_ARB_texture_compression_bptc)
+#define GLEE_ARB_blend_func_extended     GLeeEnabled(&_GLEE_ARB_blend_func_extended)
+#define GLEE_ARB_explicit_attrib_location     GLeeEnabled(&_GLEE_ARB_explicit_attrib_location)
+#define GLEE_ARB_occlusion_query2     GLeeEnabled(&_GLEE_ARB_occlusion_query2)
+#define GLEE_ARB_sampler_objects     GLeeEnabled(&_GLEE_ARB_sampler_objects)
+#define GLEE_ARB_shader_bit_encoding     GLeeEnabled(&_GLEE_ARB_shader_bit_encoding)
+#define GLEE_ARB_texture_rgb10_a2ui     GLeeEnabled(&_GLEE_ARB_texture_rgb10_a2ui)
+#define GLEE_ARB_texture_swizzle     GLeeEnabled(&_GLEE_ARB_texture_swizzle)
+#define GLEE_ARB_timer_query     GLeeEnabled(&_GLEE_ARB_timer_query)
+#define GLEE_ARB_vertex_type_2_10_10_10_rev     GLeeEnabled(&_GLEE_ARB_vertex_type_2_10_10_10_rev)
+#define GLEE_ARB_draw_indirect     GLeeEnabled(&_GLEE_ARB_draw_indirect)
+#define GLEE_ARB_gpu_shader5     GLeeEnabled(&_GLEE_ARB_gpu_shader5)
+#define GLEE_ARB_gpu_shader_fp64     GLeeEnabled(&_GLEE_ARB_gpu_shader_fp64)
+#define GLEE_ARB_shader_subroutine     GLeeEnabled(&_GLEE_ARB_shader_subroutine)
+#define GLEE_ARB_tessellation_shader     GLeeEnabled(&_GLEE_ARB_tessellation_shader)
+#define GLEE_ARB_texture_buffer_object_rgb32     GLeeEnabled(&_GLEE_ARB_texture_buffer_object_rgb32)
+#define GLEE_ARB_transform_feedback2     GLeeEnabled(&_GLEE_ARB_transform_feedback2)
+#define GLEE_ARB_transform_feedback3     GLeeEnabled(&_GLEE_ARB_transform_feedback3)
+#define GLEE_ARB_ES2_compatibility     GLeeEnabled(&_GLEE_ARB_ES2_compatibility)
+#define GLEE_ARB_get_program_binary     GLeeEnabled(&_GLEE_ARB_get_program_binary)
+#define GLEE_ARB_separate_shader_objects     GLeeEnabled(&_GLEE_ARB_separate_shader_objects)
+#define GLEE_ARB_shader_precision     GLeeEnabled(&_GLEE_ARB_shader_precision)
+#define GLEE_ARB_vertex_attrib_64bit     GLeeEnabled(&_GLEE_ARB_vertex_attrib_64bit)
+#define GLEE_ARB_viewport_array     GLeeEnabled(&_GLEE_ARB_viewport_array)
+#define GLEE_ARB_cl_event     GLeeEnabled(&_GLEE_ARB_cl_event)
+#define GLEE_ARB_robustness     GLeeEnabled(&_GLEE_ARB_robustness)
+#define GLEE_ARB_shader_stencil_export     GLeeEnabled(&_GLEE_ARB_shader_stencil_export)
+#define GLEE_ARB_base_instance     GLeeEnabled(&_GLEE_ARB_base_instance)
+#define GLEE_ARB_shading_language_420pack     GLeeEnabled(&_GLEE_ARB_shading_language_420pack)
+#define GLEE_ARB_transform_feedback_instanced     GLeeEnabled(&_GLEE_ARB_transform_feedback_instanced)
+#define GLEE_ARB_compressed_texture_pixel_storage     GLeeEnabled(&_GLEE_ARB_compressed_texture_pixel_storage)
+#define GLEE_ARB_conservative_depth     GLeeEnabled(&_GLEE_ARB_conservative_depth)
+#define GLEE_ARB_internalformat_query     GLeeEnabled(&_GLEE_ARB_internalformat_query)
+#define GLEE_ARB_map_buffer_alignment     GLeeEnabled(&_GLEE_ARB_map_buffer_alignment)
+#define GLEE_ARB_shader_atomic_counters     GLeeEnabled(&_GLEE_ARB_shader_atomic_counters)
+#define GLEE_ARB_shader_image_load_store     GLeeEnabled(&_GLEE_ARB_shader_image_load_store)
+#define GLEE_ARB_shading_language_packing     GLeeEnabled(&_GLEE_ARB_shading_language_packing)
+#define GLEE_ARB_texture_storage     GLeeEnabled(&_GLEE_ARB_texture_storage)
+#define GLEE_EXT_abgr     GLeeEnabled(&_GLEE_EXT_abgr)
+#define GLEE_EXT_blend_color     GLeeEnabled(&_GLEE_EXT_blend_color)
+#define GLEE_EXT_polygon_offset     GLeeEnabled(&_GLEE_EXT_polygon_offset)
+#define GLEE_EXT_texture     GLeeEnabled(&_GLEE_EXT_texture)
+#define GLEE_EXT_texture3D     GLeeEnabled(&_GLEE_EXT_texture3D)
+#define GLEE_SGIS_texture_filter4     GLeeEnabled(&_GLEE_SGIS_texture_filter4)
+#define GLEE_EXT_subtexture     GLeeEnabled(&_GLEE_EXT_subtexture)
+#define GLEE_EXT_copy_texture     GLeeEnabled(&_GLEE_EXT_copy_texture)
+#define GLEE_EXT_histogram     GLeeEnabled(&_GLEE_EXT_histogram)
+#define GLEE_EXT_convolution     GLeeEnabled(&_GLEE_EXT_convolution)
+#define GLEE_SGI_color_matrix     GLeeEnabled(&_GLEE_SGI_color_matrix)
+#define GLEE_SGI_color_table     GLeeEnabled(&_GLEE_SGI_color_table)
+#define GLEE_SGIS_pixel_texture     GLeeEnabled(&_GLEE_SGIS_pixel_texture)
+#define GLEE_SGIX_pixel_texture     GLeeEnabled(&_GLEE_SGIX_pixel_texture)
+#define GLEE_SGIS_texture4D     GLeeEnabled(&_GLEE_SGIS_texture4D)
+#define GLEE_SGI_texture_color_table     GLeeEnabled(&_GLEE_SGI_texture_color_table)
+#define GLEE_EXT_cmyka     GLeeEnabled(&_GLEE_EXT_cmyka)
+#define GLEE_EXT_texture_object     GLeeEnabled(&_GLEE_EXT_texture_object)
+#define GLEE_SGIS_detail_texture     GLeeEnabled(&_GLEE_SGIS_detail_texture)
+#define GLEE_SGIS_sharpen_texture     GLeeEnabled(&_GLEE_SGIS_sharpen_texture)
+#define GLEE_EXT_packed_pixels     GLeeEnabled(&_GLEE_EXT_packed_pixels)
+#define GLEE_SGIS_texture_lod     GLeeEnabled(&_GLEE_SGIS_texture_lod)
+#define GLEE_SGIS_multisample     GLeeEnabled(&_GLEE_SGIS_multisample)
+#define GLEE_EXT_rescale_normal     GLeeEnabled(&_GLEE_EXT_rescale_normal)
+#define GLEE_EXT_vertex_array     GLeeEnabled(&_GLEE_EXT_vertex_array)
+#define GLEE_EXT_misc_attribute     GLeeEnabled(&_GLEE_EXT_misc_attribute)
+#define GLEE_SGIS_generate_mipmap     GLeeEnabled(&_GLEE_SGIS_generate_mipmap)
+#define GLEE_SGIX_clipmap     GLeeEnabled(&_GLEE_SGIX_clipmap)
+#define GLEE_SGIX_shadow     GLeeEnabled(&_GLEE_SGIX_shadow)
+#define GLEE_SGIS_texture_edge_clamp     GLeeEnabled(&_GLEE_SGIS_texture_edge_clamp)
+#define GLEE_SGIS_texture_border_clamp     GLeeEnabled(&_GLEE_SGIS_texture_border_clamp)
+#define GLEE_EXT_blend_minmax     GLeeEnabled(&_GLEE_EXT_blend_minmax)
+#define GLEE_EXT_blend_subtract     GLeeEnabled(&_GLEE_EXT_blend_subtract)
+#define GLEE_EXT_blend_logic_op     GLeeEnabled(&_GLEE_EXT_blend_logic_op)
+#define GLEE_SGIX_interlace     GLeeEnabled(&_GLEE_SGIX_interlace)
+#define GLEE_SGIX_pixel_tiles     GLeeEnabled(&_GLEE_SGIX_pixel_tiles)
+#define GLEE_SGIS_texture_select     GLeeEnabled(&_GLEE_SGIS_texture_select)
+#define GLEE_SGIX_sprite     GLeeEnabled(&_GLEE_SGIX_sprite)
+#define GLEE_SGIX_texture_multi_buffer     GLeeEnabled(&_GLEE_SGIX_texture_multi_buffer)
+#define GLEE_EXT_point_parameters     GLeeEnabled(&_GLEE_EXT_point_parameters)
+#define GLEE_SGIS_point_parameters     GLeeEnabled(&_GLEE_SGIS_point_parameters)
+#define GLEE_SGIX_instruments     GLeeEnabled(&_GLEE_SGIX_instruments)
+#define GLEE_SGIX_texture_scale_bias     GLeeEnabled(&_GLEE_SGIX_texture_scale_bias)
+#define GLEE_SGIX_framezoom     GLeeEnabled(&_GLEE_SGIX_framezoom)
+#define GLEE_SGIX_tag_sample_buffer     GLeeEnabled(&_GLEE_SGIX_tag_sample_buffer)
+#define GLEE_FfdMaskSGIX     GLeeEnabled(&_GLEE_FfdMaskSGIX)
+#define GLEE_SGIX_polynomial_ffd     GLeeEnabled(&_GLEE_SGIX_polynomial_ffd)
+#define GLEE_SGIX_reference_plane     GLeeEnabled(&_GLEE_SGIX_reference_plane)
+#define GLEE_SGIX_flush_raster     GLeeEnabled(&_GLEE_SGIX_flush_raster)
+#define GLEE_SGIX_depth_texture     GLeeEnabled(&_GLEE_SGIX_depth_texture)
+#define GLEE_SGIS_fog_function     GLeeEnabled(&_GLEE_SGIS_fog_function)
+#define GLEE_SGIX_fog_offset     GLeeEnabled(&_GLEE_SGIX_fog_offset)
+#define GLEE_HP_image_transform     GLeeEnabled(&_GLEE_HP_image_transform)
+#define GLEE_HP_convolution_border_modes     GLeeEnabled(&_GLEE_HP_convolution_border_modes)
+#define GLEE_INGR_palette_buffer     GLeeEnabled(&_GLEE_INGR_palette_buffer)
+#define GLEE_SGIX_texture_add_env     GLeeEnabled(&_GLEE_SGIX_texture_add_env)
+#define GLEE_EXT_color_subtable     GLeeEnabled(&_GLEE_EXT_color_subtable)
+#define GLEE_PGI_vertex_hints     GLeeEnabled(&_GLEE_PGI_vertex_hints)
+#define GLEE_PGI_misc_hints     GLeeEnabled(&_GLEE_PGI_misc_hints)
+#define GLEE_EXT_paletted_texture     GLeeEnabled(&_GLEE_EXT_paletted_texture)
+#define GLEE_EXT_clip_volume_hint     GLeeEnabled(&_GLEE_EXT_clip_volume_hint)
+#define GLEE_SGIX_list_priority     GLeeEnabled(&_GLEE_SGIX_list_priority)
+#define GLEE_SGIX_ir_instrument1     GLeeEnabled(&_GLEE_SGIX_ir_instrument1)
+#define GLEE_SGIX_calligraphic_fragment     GLeeEnabled(&_GLEE_SGIX_calligraphic_fragment)
+#define GLEE_SGIX_texture_lod_bias     GLeeEnabled(&_GLEE_SGIX_texture_lod_bias)
+#define GLEE_SGIX_shadow_ambient     GLeeEnabled(&_GLEE_SGIX_shadow_ambient)
+#define GLEE_EXT_index_texture     GLeeEnabled(&_GLEE_EXT_index_texture)
+#define GLEE_EXT_index_material     GLeeEnabled(&_GLEE_EXT_index_material)
+#define GLEE_EXT_index_func     GLeeEnabled(&_GLEE_EXT_index_func)
+#define GLEE_EXT_index_array_formats     GLeeEnabled(&_GLEE_EXT_index_array_formats)
+#define GLEE_EXT_compiled_vertex_array     GLeeEnabled(&_GLEE_EXT_compiled_vertex_array)
+#define GLEE_EXT_cull_vertex     GLeeEnabled(&_GLEE_EXT_cull_vertex)
+#define GLEE_SGIX_ycrcb     GLeeEnabled(&_GLEE_SGIX_ycrcb)
+#define GLEE_SGIX_fragment_lighting     GLeeEnabled(&_GLEE_SGIX_fragment_lighting)
+#define GLEE_IBM_rasterpos_clip     GLeeEnabled(&_GLEE_IBM_rasterpos_clip)
+#define GLEE_HP_texture_lighting     GLeeEnabled(&_GLEE_HP_texture_lighting)
+#define GLEE_EXT_draw_range_elements     GLeeEnabled(&_GLEE_EXT_draw_range_elements)
+#define GLEE_WIN_phong_shading     GLeeEnabled(&_GLEE_WIN_phong_shading)
+#define GLEE_WIN_specular_fog     GLeeEnabled(&_GLEE_WIN_specular_fog)
+#define GLEE_EXT_light_texture     GLeeEnabled(&_GLEE_EXT_light_texture)
+#define GLEE_SGIX_blend_alpha_minmax     GLeeEnabled(&_GLEE_SGIX_blend_alpha_minmax)
+#define GLEE_SGIX_impact_pixel_texture     GLeeEnabled(&_GLEE_SGIX_impact_pixel_texture)
+#define GLEE_EXT_bgra     GLeeEnabled(&_GLEE_EXT_bgra)
+#define GLEE_SGIX_async     GLeeEnabled(&_GLEE_SGIX_async)
+#define GLEE_SGIX_async_pixel     GLeeEnabled(&_GLEE_SGIX_async_pixel)
+#define GLEE_SGIX_async_histogram     GLeeEnabled(&_GLEE_SGIX_async_histogram)
+#define GLEE_INTEL_texture_scissor     GLeeEnabled(&_GLEE_INTEL_texture_scissor)
+#define GLEE_INTEL_parallel_arrays     GLeeEnabled(&_GLEE_INTEL_parallel_arrays)
+#define GLEE_HP_occlusion_test     GLeeEnabled(&_GLEE_HP_occlusion_test)
+#define GLEE_EXT_pixel_transform     GLeeEnabled(&_GLEE_EXT_pixel_transform)
+#define GLEE_EXT_pixel_transform_color_table     GLeeEnabled(&_GLEE_EXT_pixel_transform_color_table)
+#define GLEE_EXT_shared_texture_palette     GLeeEnabled(&_GLEE_EXT_shared_texture_palette)
+#define GLEE_EXT_separate_specular_color     GLeeEnabled(&_GLEE_EXT_separate_specular_color)
+#define GLEE_EXT_secondary_color     GLeeEnabled(&_GLEE_EXT_secondary_color)
+#define GLEE_EXT_texture_perturb_normal     GLeeEnabled(&_GLEE_EXT_texture_perturb_normal)
+#define GLEE_EXT_multi_draw_arrays     GLeeEnabled(&_GLEE_EXT_multi_draw_arrays)
+#define GLEE_EXT_fog_coord     GLeeEnabled(&_GLEE_EXT_fog_coord)
+#define GLEE_REND_screen_coordinates     GLeeEnabled(&_GLEE_REND_screen_coordinates)
+#define GLEE_EXT_coordinate_frame     GLeeEnabled(&_GLEE_EXT_coordinate_frame)
+#define GLEE_EXT_texture_env_combine     GLeeEnabled(&_GLEE_EXT_texture_env_combine)
+#define GLEE_APPLE_specular_vector     GLeeEnabled(&_GLEE_APPLE_specular_vector)
+#define GLEE_APPLE_transform_hint     GLeeEnabled(&_GLEE_APPLE_transform_hint)
+#define GLEE_SGIX_fog_scale     GLeeEnabled(&_GLEE_SGIX_fog_scale)
+#define GLEE_SUNX_constant_data     GLeeEnabled(&_GLEE_SUNX_constant_data)
+#define GLEE_SUN_global_alpha     GLeeEnabled(&_GLEE_SUN_global_alpha)
+#define GLEE_SUN_triangle_list     GLeeEnabled(&_GLEE_SUN_triangle_list)
+#define GLEE_SUN_vertex     GLeeEnabled(&_GLEE_SUN_vertex)
+#define GLEE_EXT_blend_func_separate     GLeeEnabled(&_GLEE_EXT_blend_func_separate)
+#define GLEE_INGR_color_clamp     GLeeEnabled(&_GLEE_INGR_color_clamp)
+#define GLEE_INGR_interlace_read     GLeeEnabled(&_GLEE_INGR_interlace_read)
+#define GLEE_EXT_stencil_wrap     GLeeEnabled(&_GLEE_EXT_stencil_wrap)
+#define GLEE_EXT_422_pixels     GLeeEnabled(&_GLEE_EXT_422_pixels)
+#define GLEE_NV_texgen_reflection     GLeeEnabled(&_GLEE_NV_texgen_reflection)
+#define GLEE_EXT_texture_cube_map     GLeeEnabled(&_GLEE_EXT_texture_cube_map)
+#define GLEE_SUN_convolution_border_modes     GLeeEnabled(&_GLEE_SUN_convolution_border_modes)
+#define GLEE_EXT_texture_env_add     GLeeEnabled(&_GLEE_EXT_texture_env_add)
+#define GLEE_EXT_texture_lod_bias     GLeeEnabled(&_GLEE_EXT_texture_lod_bias)
+#define GLEE_EXT_texture_filter_anisotropic     GLeeEnabled(&_GLEE_EXT_texture_filter_anisotropic)
+#define GLEE_EXT_vertex_weighting     GLeeEnabled(&_GLEE_EXT_vertex_weighting)
+#define GLEE_NV_light_max_exponent     GLeeEnabled(&_GLEE_NV_light_max_exponent)
+#define GLEE_NV_vertex_array_range     GLeeEnabled(&_GLEE_NV_vertex_array_range)
+#define GLEE_NV_register_combiners     GLeeEnabled(&_GLEE_NV_register_combiners)
+#define GLEE_NV_fog_distance     GLeeEnabled(&_GLEE_NV_fog_distance)
+#define GLEE_NV_texgen_emboss     GLeeEnabled(&_GLEE_NV_texgen_emboss)
+#define GLEE_NV_blend_square     GLeeEnabled(&_GLEE_NV_blend_square)
+#define GLEE_NV_texture_env_combine4     GLeeEnabled(&_GLEE_NV_texture_env_combine4)
+#define GLEE_MESA_resize_buffers     GLeeEnabled(&_GLEE_MESA_resize_buffers)
+#define GLEE_MESA_window_pos     GLeeEnabled(&_GLEE_MESA_window_pos)
+#define GLEE_EXT_texture_compression_s3tc     GLeeEnabled(&_GLEE_EXT_texture_compression_s3tc)
+#define GLEE_IBM_cull_vertex     GLeeEnabled(&_GLEE_IBM_cull_vertex)
+#define GLEE_IBM_multimode_draw_arrays     GLeeEnabled(&_GLEE_IBM_multimode_draw_arrays)
+#define GLEE_IBM_vertex_array_lists     GLeeEnabled(&_GLEE_IBM_vertex_array_lists)
+#define GLEE_SGIX_subsample     GLeeEnabled(&_GLEE_SGIX_subsample)
+#define GLEE_SGIX_ycrcb_subsample     GLeeEnabled(&_GLEE_SGIX_ycrcb_subsample)
+#define GLEE_SGIX_ycrcba     GLeeEnabled(&_GLEE_SGIX_ycrcba)
+#define GLEE_SGI_depth_pass_instrument     GLeeEnabled(&_GLEE_SGI_depth_pass_instrument)
+#define GLEE_3DFX_texture_compression_FXT1     GLeeEnabled(&_GLEE_3DFX_texture_compression_FXT1)
+#define GLEE_3DFX_multisample     GLeeEnabled(&_GLEE_3DFX_multisample)
+#define GLEE_3DFX_tbuffer     GLeeEnabled(&_GLEE_3DFX_tbuffer)
+#define GLEE_EXT_multisample     GLeeEnabled(&_GLEE_EXT_multisample)
+#define GLEE_SGIX_vertex_preclip     GLeeEnabled(&_GLEE_SGIX_vertex_preclip)
+#define GLEE_SGIX_convolution_accuracy     GLeeEnabled(&_GLEE_SGIX_convolution_accuracy)
+#define GLEE_SGIX_resample     GLeeEnabled(&_GLEE_SGIX_resample)
+#define GLEE_SGIS_point_line_texgen     GLeeEnabled(&_GLEE_SGIS_point_line_texgen)
+#define GLEE_SGIS_texture_color_mask     GLeeEnabled(&_GLEE_SGIS_texture_color_mask)
+#define GLEE_EXT_texture_env_dot3     GLeeEnabled(&_GLEE_EXT_texture_env_dot3)
+#define GLEE_ATI_texture_mirror_once     GLeeEnabled(&_GLEE_ATI_texture_mirror_once)
+#define GLEE_NV_fence     GLeeEnabled(&_GLEE_NV_fence)
+#define GLEE_IBM_texture_mirrored_repeat     GLeeEnabled(&_GLEE_IBM_texture_mirrored_repeat)
+#define GLEE_NV_evaluators     GLeeEnabled(&_GLEE_NV_evaluators)
+#define GLEE_NV_packed_depth_stencil     GLeeEnabled(&_GLEE_NV_packed_depth_stencil)
+#define GLEE_NV_register_combiners2     GLeeEnabled(&_GLEE_NV_register_combiners2)
+#define GLEE_NV_texture_compression_vtc     GLeeEnabled(&_GLEE_NV_texture_compression_vtc)
+#define GLEE_NV_texture_rectangle     GLeeEnabled(&_GLEE_NV_texture_rectangle)
+#define GLEE_NV_texture_shader     GLeeEnabled(&_GLEE_NV_texture_shader)
+#define GLEE_NV_texture_shader2     GLeeEnabled(&_GLEE_NV_texture_shader2)
+#define GLEE_NV_vertex_array_range2     GLeeEnabled(&_GLEE_NV_vertex_array_range2)
+#define GLEE_NV_vertex_program     GLeeEnabled(&_GLEE_NV_vertex_program)
+#define GLEE_SGIX_texture_coordinate_clamp     GLeeEnabled(&_GLEE_SGIX_texture_coordinate_clamp)
+#define GLEE_SGIX_scalebias_hint     GLeeEnabled(&_GLEE_SGIX_scalebias_hint)
+#define GLEE_OML_interlace     GLeeEnabled(&_GLEE_OML_interlace)
+#define GLEE_OML_subsample     GLeeEnabled(&_GLEE_OML_subsample)
+#define GLEE_OML_resample     GLeeEnabled(&_GLEE_OML_resample)
+#define GLEE_NV_copy_depth_to_color     GLeeEnabled(&_GLEE_NV_copy_depth_to_color)
+#define GLEE_ATI_envmap_bumpmap     GLeeEnabled(&_GLEE_ATI_envmap_bumpmap)
+#define GLEE_ATI_fragment_shader     GLeeEnabled(&_GLEE_ATI_fragment_shader)
+#define GLEE_ATI_pn_triangles     GLeeEnabled(&_GLEE_ATI_pn_triangles)
+#define GLEE_ATI_vertex_array_object     GLeeEnabled(&_GLEE_ATI_vertex_array_object)
+#define GLEE_EXT_vertex_shader     GLeeEnabled(&_GLEE_EXT_vertex_shader)
+#define GLEE_ATI_vertex_streams     GLeeEnabled(&_GLEE_ATI_vertex_streams)
+#define GLEE_ATI_element_array     GLeeEnabled(&_GLEE_ATI_element_array)
+#define GLEE_SUN_mesh_array     GLeeEnabled(&_GLEE_SUN_mesh_array)
+#define GLEE_SUN_slice_accum     GLeeEnabled(&_GLEE_SUN_slice_accum)
+#define GLEE_NV_multisample_filter_hint     GLeeEnabled(&_GLEE_NV_multisample_filter_hint)
+#define GLEE_NV_depth_clamp     GLeeEnabled(&_GLEE_NV_depth_clamp)
+#define GLEE_NV_occlusion_query     GLeeEnabled(&_GLEE_NV_occlusion_query)
+#define GLEE_NV_point_sprite     GLeeEnabled(&_GLEE_NV_point_sprite)
+#define GLEE_NV_texture_shader3     GLeeEnabled(&_GLEE_NV_texture_shader3)
+#define GLEE_NV_vertex_program1_1     GLeeEnabled(&_GLEE_NV_vertex_program1_1)
+#define GLEE_EXT_shadow_funcs     GLeeEnabled(&_GLEE_EXT_shadow_funcs)
+#define GLEE_EXT_stencil_two_side     GLeeEnabled(&_GLEE_EXT_stencil_two_side)
+#define GLEE_ATI_text_fragment_shader     GLeeEnabled(&_GLEE_ATI_text_fragment_shader)
+#define GLEE_APPLE_client_storage     GLeeEnabled(&_GLEE_APPLE_client_storage)
+#define GLEE_APPLE_element_array     GLeeEnabled(&_GLEE_APPLE_element_array)
+#define GLEE_APPLE_fence     GLeeEnabled(&_GLEE_APPLE_fence)
+#define GLEE_APPLE_vertex_array_object     GLeeEnabled(&_GLEE_APPLE_vertex_array_object)
+#define GLEE_APPLE_vertex_array_range     GLeeEnabled(&_GLEE_APPLE_vertex_array_range)
+#define GLEE_APPLE_ycbcr_422     GLeeEnabled(&_GLEE_APPLE_ycbcr_422)
+#define GLEE_S3_s3tc     GLeeEnabled(&_GLEE_S3_s3tc)
+#define GLEE_ATI_draw_buffers     GLeeEnabled(&_GLEE_ATI_draw_buffers)
+#define GLEE_ATI_pixel_format_float     GLeeEnabled(&_GLEE_ATI_pixel_format_float)
+#define GLEE_ATI_texture_env_combine3     GLeeEnabled(&_GLEE_ATI_texture_env_combine3)
+#define GLEE_ATI_texture_float     GLeeEnabled(&_GLEE_ATI_texture_float)
+#define GLEE_NV_float_buffer     GLeeEnabled(&_GLEE_NV_float_buffer)
+#define GLEE_NV_fragment_program     GLeeEnabled(&_GLEE_NV_fragment_program)
+#define GLEE_NV_half_float     GLeeEnabled(&_GLEE_NV_half_float)
+#define GLEE_NV_pixel_data_range     GLeeEnabled(&_GLEE_NV_pixel_data_range)
+#define GLEE_NV_primitive_restart     GLeeEnabled(&_GLEE_NV_primitive_restart)
+#define GLEE_NV_texture_expand_normal     GLeeEnabled(&_GLEE_NV_texture_expand_normal)
+#define GLEE_NV_vertex_program2     GLeeEnabled(&_GLEE_NV_vertex_program2)
+#define GLEE_ATI_map_object_buffer     GLeeEnabled(&_GLEE_ATI_map_object_buffer)
+#define GLEE_ATI_separate_stencil     GLeeEnabled(&_GLEE_ATI_separate_stencil)
+#define GLEE_ATI_vertex_attrib_array_object     GLeeEnabled(&_GLEE_ATI_vertex_attrib_array_object)
+#define GLEE_OES_read_format     GLeeEnabled(&_GLEE_OES_read_format)
+#define GLEE_EXT_depth_bounds_test     GLeeEnabled(&_GLEE_EXT_depth_bounds_test)
+#define GLEE_EXT_texture_mirror_clamp     GLeeEnabled(&_GLEE_EXT_texture_mirror_clamp)
+#define GLEE_EXT_blend_equation_separate     GLeeEnabled(&_GLEE_EXT_blend_equation_separate)
+#define GLEE_MESA_pack_invert     GLeeEnabled(&_GLEE_MESA_pack_invert)
+#define GLEE_MESA_ycbcr_texture     GLeeEnabled(&_GLEE_MESA_ycbcr_texture)
+#define GLEE_EXT_pixel_buffer_object     GLeeEnabled(&_GLEE_EXT_pixel_buffer_object)
+#define GLEE_NV_fragment_program_option     GLeeEnabled(&_GLEE_NV_fragment_program_option)
+#define GLEE_NV_fragment_program2     GLeeEnabled(&_GLEE_NV_fragment_program2)
+#define GLEE_NV_vertex_program2_option     GLeeEnabled(&_GLEE_NV_vertex_program2_option)
+#define GLEE_NV_vertex_program3     GLeeEnabled(&_GLEE_NV_vertex_program3)
+#define GLEE_EXT_framebuffer_object     GLeeEnabled(&_GLEE_EXT_framebuffer_object)
+#define GLEE_GREMEDY_string_marker     GLeeEnabled(&_GLEE_GREMEDY_string_marker)
+#define GLEE_EXT_packed_depth_stencil     GLeeEnabled(&_GLEE_EXT_packed_depth_stencil)
+#define GLEE_EXT_stencil_clear_tag     GLeeEnabled(&_GLEE_EXT_stencil_clear_tag)
+#define GLEE_EXT_texture_sRGB     GLeeEnabled(&_GLEE_EXT_texture_sRGB)
+#define GLEE_EXT_framebuffer_blit     GLeeEnabled(&_GLEE_EXT_framebuffer_blit)
+#define GLEE_EXT_framebuffer_multisample     GLeeEnabled(&_GLEE_EXT_framebuffer_multisample)
+#define GLEE_MESAX_texture_stack     GLeeEnabled(&_GLEE_MESAX_texture_stack)
+#define GLEE_EXT_timer_query     GLeeEnabled(&_GLEE_EXT_timer_query)
+#define GLEE_EXT_gpu_program_parameters     GLeeEnabled(&_GLEE_EXT_gpu_program_parameters)
+#define GLEE_APPLE_flush_buffer_range     GLeeEnabled(&_GLEE_APPLE_flush_buffer_range)
+#define GLEE_EXT_gpu_shader4     GLeeEnabled(&_GLEE_EXT_gpu_shader4)
+#define GLEE_EXT_draw_instanced     GLeeEnabled(&_GLEE_EXT_draw_instanced)
+#define GLEE_EXT_packed_float     GLeeEnabled(&_GLEE_EXT_packed_float)
+#define GLEE_EXT_texture_array     GLeeEnabled(&_GLEE_EXT_texture_array)
+#define GLEE_EXT_texture_buffer_object     GLeeEnabled(&_GLEE_EXT_texture_buffer_object)
+#define GLEE_EXT_texture_compression_latc     GLeeEnabled(&_GLEE_EXT_texture_compression_latc)
+#define GLEE_EXT_texture_compression_rgtc     GLeeEnabled(&_GLEE_EXT_texture_compression_rgtc)
+#define GLEE_EXT_texture_shared_exponent     GLeeEnabled(&_GLEE_EXT_texture_shared_exponent)
+#define GLEE_NV_depth_buffer_float     GLeeEnabled(&_GLEE_NV_depth_buffer_float)
+#define GLEE_NV_framebuffer_multisample_coverage     GLeeEnabled(&_GLEE_NV_framebuffer_multisample_coverage)
+#define GLEE_EXT_framebuffer_sRGB     GLeeEnabled(&_GLEE_EXT_framebuffer_sRGB)
+#define GLEE_NV_geometry_shader4     GLeeEnabled(&_GLEE_NV_geometry_shader4)
+#define GLEE_NV_parameter_buffer_object     GLeeEnabled(&_GLEE_NV_parameter_buffer_object)
+#define GLEE_EXT_draw_buffers2     GLeeEnabled(&_GLEE_EXT_draw_buffers2)
+#define GLEE_NV_transform_feedback     GLeeEnabled(&_GLEE_NV_transform_feedback)
+#define GLEE_EXT_bindable_uniform     GLeeEnabled(&_GLEE_EXT_bindable_uniform)
+#define GLEE_EXT_texture_integer     GLeeEnabled(&_GLEE_EXT_texture_integer)
+#define GLEE_GREMEDY_frame_terminator     GLeeEnabled(&_GLEE_GREMEDY_frame_terminator)
+#define GLEE_NV_conditional_render     GLeeEnabled(&_GLEE_NV_conditional_render)
+#define GLEE_NV_present_video     GLeeEnabled(&_GLEE_NV_present_video)
+#define GLEE_EXT_transform_feedback     GLeeEnabled(&_GLEE_EXT_transform_feedback)
+#define GLEE_EXT_direct_state_access     GLeeEnabled(&_GLEE_EXT_direct_state_access)
+#define GLEE_EXT_vertex_array_bgra     GLeeEnabled(&_GLEE_EXT_vertex_array_bgra)
+#define GLEE_EXT_texture_swizzle     GLeeEnabled(&_GLEE_EXT_texture_swizzle)
+#define GLEE_NV_explicit_multisample     GLeeEnabled(&_GLEE_NV_explicit_multisample)
+#define GLEE_NV_transform_feedback2     GLeeEnabled(&_GLEE_NV_transform_feedback2)
+#define GLEE_ATI_meminfo     GLeeEnabled(&_GLEE_ATI_meminfo)
+#define GLEE_AMD_performance_monitor     GLeeEnabled(&_GLEE_AMD_performance_monitor)
+#define GLEE_AMD_texture_texture4     GLeeEnabled(&_GLEE_AMD_texture_texture4)
+#define GLEE_AMD_vertex_shader_tesselator     GLeeEnabled(&_GLEE_AMD_vertex_shader_tesselator)
+#define GLEE_EXT_provoking_vertex     GLeeEnabled(&_GLEE_EXT_provoking_vertex)
+#define GLEE_EXT_texture_snorm     GLeeEnabled(&_GLEE_EXT_texture_snorm)
+#define GLEE_AMD_draw_buffers_blend     GLeeEnabled(&_GLEE_AMD_draw_buffers_blend)
+#define GLEE_APPLE_texture_range     GLeeEnabled(&_GLEE_APPLE_texture_range)
+#define GLEE_APPLE_float_pixels     GLeeEnabled(&_GLEE_APPLE_float_pixels)
+#define GLEE_APPLE_vertex_program_evaluators     GLeeEnabled(&_GLEE_APPLE_vertex_program_evaluators)
+#define GLEE_APPLE_aux_depth_stencil     GLeeEnabled(&_GLEE_APPLE_aux_depth_stencil)
+#define GLEE_APPLE_object_purgeable     GLeeEnabled(&_GLEE_APPLE_object_purgeable)
+#define GLEE_APPLE_row_bytes     GLeeEnabled(&_GLEE_APPLE_row_bytes)
+#define GLEE_APPLE_rgb_422     GLeeEnabled(&_GLEE_APPLE_rgb_422)
+#define GLEE_NV_video_capture     GLeeEnabled(&_GLEE_NV_video_capture)
+#define GLEE_NV_copy_image     GLeeEnabled(&_GLEE_NV_copy_image)
+#define GLEE_EXT_separate_shader_objects     GLeeEnabled(&_GLEE_EXT_separate_shader_objects)
+#define GLEE_NV_parameter_buffer_object2     GLeeEnabled(&_GLEE_NV_parameter_buffer_object2)
+#define GLEE_NV_shader_buffer_load     GLeeEnabled(&_GLEE_NV_shader_buffer_load)
+#define GLEE_NV_vertex_buffer_unified_memory     GLeeEnabled(&_GLEE_NV_vertex_buffer_unified_memory)
+#define GLEE_NV_texture_barrier     GLeeEnabled(&_GLEE_NV_texture_barrier)
+#define GLEE_AMD_shader_stencil_export     GLeeEnabled(&_GLEE_AMD_shader_stencil_export)
+#define GLEE_AMD_seamless_cubemap_per_texture     GLeeEnabled(&_GLEE_AMD_seamless_cubemap_per_texture)
+#define GLEE_AMD_conservative_depth     GLeeEnabled(&_GLEE_AMD_conservative_depth)
+#define GLEE_EXT_shader_image_load_store     GLeeEnabled(&_GLEE_EXT_shader_image_load_store)
+#define GLEE_EXT_vertex_attrib_64bit     GLeeEnabled(&_GLEE_EXT_vertex_attrib_64bit)
+#define GLEE_NV_gpu_program5     GLeeEnabled(&_GLEE_NV_gpu_program5)
+#define GLEE_NV_gpu_shader5     GLeeEnabled(&_GLEE_NV_gpu_shader5)
+#define GLEE_NV_shader_buffer_store     GLeeEnabled(&_GLEE_NV_shader_buffer_store)
+#define GLEE_NV_tessellation_program5     GLeeEnabled(&_GLEE_NV_tessellation_program5)
+#define GLEE_NV_vertex_attrib_integer_64bit     GLeeEnabled(&_GLEE_NV_vertex_attrib_integer_64bit)
+#define GLEE_NV_multisample_coverage     GLeeEnabled(&_GLEE_NV_multisample_coverage)
+#define GLEE_AMD_name_gen_delete     GLeeEnabled(&_GLEE_AMD_name_gen_delete)
+#define GLEE_AMD_transform_feedback3_lines_triangles     GLeeEnabled(&_GLEE_AMD_transform_feedback3_lines_triangles)
+#define GLEE_AMD_depth_clamp_separate     GLeeEnabled(&_GLEE_AMD_depth_clamp_separate)
+#define GLEE_EXT_texture_sRGB_decode     GLeeEnabled(&_GLEE_EXT_texture_sRGB_decode)
+#define GLEE_NV_texture_multisample     GLeeEnabled(&_GLEE_NV_texture_multisample)
+#define GLEE_AMD_blend_minmax_factor     GLeeEnabled(&_GLEE_AMD_blend_minmax_factor)
+#define GLEE_AMD_sample_positions     GLeeEnabled(&_GLEE_AMD_sample_positions)
+#define GLEE_EXT_x11_sync_object     GLeeEnabled(&_GLEE_EXT_x11_sync_object)
+#define GLEE_AMD_multi_draw_indirect     GLeeEnabled(&_GLEE_AMD_multi_draw_indirect)
+#define GLEE_EXT_framebuffer_multisample_blit_scaled     GLeeEnabled(&_GLEE_EXT_framebuffer_multisample_blit_scaled)
+#define GLEE_SGIX_texture_select     GLeeEnabled(&_GLEE_SGIX_texture_select)
+#define GLEE_INGR_blend_func_separate     GLeeEnabled(&_GLEE_INGR_blend_func_separate)
+#define GLEE_SGIX_depth_pass_instrument     GLeeEnabled(&_GLEE_SGIX_depth_pass_instrument)
+#define GLEE_SGIX_igloo_interface     GLeeEnabled(&_GLEE_SGIX_igloo_interface)
+#define GLEE_OES_compressed_paletted_texture     GLeeEnabled(&_GLEE_OES_compressed_paletted_texture)
+#define GLEE_OES_fixed_point     GLeeEnabled(&_GLEE_OES_fixed_point)
+#define GLEE_OES_single_precision     GLeeEnabled(&_GLEE_OES_single_precision)
+#define GLEE_OES_query_matrix     GLeeEnabled(&_GLEE_OES_query_matrix)
+#define GLEE_OES_byte_coordinates     GLeeEnabled(&_GLEE_OES_byte_coordinates)
+#define GLEE_NV_gpu_program4     GLeeEnabled(&_GLEE_NV_gpu_program4)
+#define GLEE_NV_path_rendering     GLeeEnabled(&_GLEE_NV_path_rendering)
+#define GLEE_AMD_vertex_shader_tessellator     GLeeEnabled(&_GLEE_AMD_vertex_shader_tessellator)
+#define GLEE_EXT_fragment_lighting     GLeeEnabled(&_GLEE_EXT_fragment_lighting)
+#define GLEE_EXT_texture_compression_dxt1     GLeeEnabled(&_GLEE_EXT_texture_compression_dxt1)
+#define GLEE_EXT_scene_marker     GLeeEnabled(&_GLEE_EXT_scene_marker)
+#define GLEE_EXT_geometry_shader4     GLeeEnabled(&_GLEE_EXT_geometry_shader4)
+#define GLEE_EXT_texture_env     GLeeEnabled(&_GLEE_EXT_texture_env)
+#define GLEE_SGIX_texture_range     GLeeEnabled(&_GLEE_SGIX_texture_range)
+#define GLEE_SGIX_pixel_texture_bits     GLeeEnabled(&_GLEE_SGIX_pixel_texture_bits)
+#define GLEE_IBM_static_data     GLeeEnabled(&_GLEE_IBM_static_data)
+
+
+/*****************************************************************
+ * Additional types needed for extensions
+ *****************************************************************/
+
+/* Used for GLSL shader text */
+#ifndef GL_VERSION_2_0
+	typedef char GLchar; 
+#endif
+
+#ifdef _MSC_VER
+  #if _MSC_VER >= 1600
+    #include <stdint.h>
+  #else
+	typedef __int32 int32_t;
+	typedef unsigned __int32 uint32_t;
+	typedef __int64 int64_t;
+	typedef unsigned __int64 uint64_t;
+  #endif
+#else
+  #include <stdint.h>
+  #include <stddef.h>
+#endif
+
+#ifndef GL_VERSION_1_5
+	typedef ptrdiff_t GLintptr;
+	typedef ptrdiff_t GLsizeiptr;
+#endif
+
+#ifndef GL_NV_half_float
+	typedef unsigned short GLhalfNV;
+#endif
+
+#ifndef GL_ARB_vertex_buffer_object
+	typedef ptrdiff_t GLintptrARB;
+	typedef ptrdiff_t GLsizeiptrARB;
+#endif
+
+#ifndef GL_ARB_shader_objects
+	typedef int GLhandleARB;
+	typedef char GLcharARB;
+#endif
+
+#ifndef GL_EXT_timer_query
+	typedef signed long long GLint64EXT;
+	typedef unsigned long long GLuint64EXT;
+#endif
+
+#ifndef GL_ARB_sync
+	typedef int64_t GLint64;
+	typedef uint64_t GLuint64;
+	typedef struct __GLsync *GLsync;
+#endif
+
+/* Platform-specific */
+
+#ifdef _WIN32    
+
+	/* WGL */
+
+	#ifndef WGL_ARB_pbuffer
+	    DECLARE_HANDLE(HPBUFFERARB);
+	#endif
+	
+	#ifndef WGL_EXT_pbuffer
+	    DECLARE_HANDLE(HPBUFFEREXT);
+	#endif
+	
+    #ifndef WGL_NV_video_output
+        DECLARE_HANDLE(HPVIDEODEV);
+    #endif
+    
+    #ifndef WGL_NV_present_video
+        DECLARE_HANDLE(HVIDEOOUTPUTDEVICENV);
+    #endif    
+
+    #ifndef WGL_NV_gpu_affinity
+        DECLARE_HANDLE(HPGPUNV);
+        DECLARE_HANDLE(HGPUNV);
+
+        typedef struct _GPU_DEVICE {
+            DWORD  cb;
+            CHAR   DeviceName[32];
+            CHAR   DeviceString[128];
+            DWORD  Flags;
+            RECT   rcVirtualScreen;
+        } GPU_DEVICE, *PGPU_DEVICE;
+    #endif
+	
+#elif defined(__APPLE__) || defined(__APPLE_CC__)
+
+	/* Mac OS X */
+
+#else          
+
+	/* GLX */
+
+	typedef void (*__GLXextFuncPtr)(void);
+
+	#ifndef GLX_ARB_get_proc_address 
+	#define GLX_ARB_get_proc_address 1
+	    extern __GLXextFuncPtr glXGetProcAddressARB (const GLubyte *);
+	    extern void ( * glXGetProcAddressARB (const GLubyte *procName))(void);
+	    typedef __GLXextFuncPtr ( * PFNGLXGETPROCADDRESSARBPROC) (const GLubyte *procName);
+	#endif
+
+	#ifndef GLX_SGIX_fbconfig
+	    typedef XID GLXFBConfigIDSGIX;
+	    typedef struct __GLXFBConfigRec *GLXFBConfigSGIX;
+	#endif
+
+	#ifndef GLX_SGIX_pbuffer
+	typedef XID GLXPbufferSGIX;
+	typedef struct {
+		int type;
+		unsigned long serial;
+		Bool send_event;
+		Display *display;
+		GLXDrawable drawable;
+		int event_type;		  
+		int draw_type;		  
+		unsigned int mask;	  
+		int x, y;
+		int width, height;
+		int count;
+	} GLXBufferClobberEventSGIX;
+	#endif
+
+	#ifndef GLX_SGIX_hyperpipe
+		#define _GLX_HYPERPIPE_PIPE_NAME_LENGTH_SGIX 80
+		typedef struct 
+		{
+			char  pipeName[_GLX_HYPERPIPE_PIPE_NAME_LENGTH_SGIX];
+			int  networkId;
+		} GLXHyperpipeNetworkSGIX;
+
+		typedef struct 
+		{
+			char pipeName[_GLX_HYPERPIPE_PIPE_NAME_LENGTH_SGIX];
+			int channel;
+			unsigned int participationType;
+			int timeSlice;
+		} GLXHyperpipeConfigSGIX;
+
+		typedef struct 
+		{
+			char pipeName[_GLX_HYPERPIPE_PIPE_NAME_LENGTH_SGIX];
+			int srcXOrigin;
+			int srcYOrigin;
+			int srcWidth;
+			int srcHeight;
+			int destXOrigin;
+			int destYOrigin;
+			int destWidth;
+			int destHeight;
+		} GLXPipeRect;
+
+		typedef struct 
+		{
+			char pipeName[_GLX_HYPERPIPE_PIPE_NAME_LENGTH_SGIX];
+			int XOrigin; 
+			int YOrigin;
+			int maxHeight;
+			int maxWidth;
+		} GLXPipeRectLimits;
+	#endif 
+	
+	#ifndef GLX_NV_video_output
+    typedef unsigned int GLXVideoDeviceNV;
+    #endif // GLX_NV_video_output
+
+    #ifndef GLX_NV_video_capture
+    typedef XID GLXVideoCaptureDeviceNV;
+    #endif // GLX_NV_video_output
+    	
+#endif /* end platform specific */
+
+
+
+/* GL_VERSION_1_2 */
+
+#ifndef GL_VERSION_1_2
+#define GL_VERSION_1_2 1
+#define __GLEE_GL_VERSION_1_2 1
+/* Constants */
+#define GL_UNSIGNED_BYTE_3_3_2                             0x8032
+#define GL_UNSIGNED_SHORT_4_4_4_4                          0x8033
+#define GL_UNSIGNED_SHORT_5_5_5_1                          0x8034
+#define GL_UNSIGNED_INT_8_8_8_8                            0x8035
+#define GL_UNSIGNED_INT_10_10_10_2                         0x8036
+#define GL_TEXTURE_BINDING_3D                              0x806A
+#define GL_PACK_SKIP_IMAGES                                0x806B
+#define GL_PACK_IMAGE_HEIGHT                               0x806C
+#define GL_UNPACK_SKIP_IMAGES                              0x806D
+#define GL_UNPACK_IMAGE_HEIGHT                             0x806E
+#define GL_TEXTURE_3D                                      0x806F
+#define GL_PROXY_TEXTURE_3D                                0x8070
+#define GL_TEXTURE_DEPTH                                   0x8071
+#define GL_TEXTURE_WRAP_R                                  0x8072
+#define GL_MAX_3D_TEXTURE_SIZE                             0x8073
+#define GL_UNSIGNED_BYTE_2_3_3_REV                         0x8362
+#define GL_UNSIGNED_SHORT_5_6_5                            0x8363
+#define GL_UNSIGNED_SHORT_5_6_5_REV                        0x8364
+#define GL_UNSIGNED_SHORT_4_4_4_4_REV                      0x8365
+#define GL_UNSIGNED_SHORT_1_5_5_5_REV                      0x8366
+#define GL_UNSIGNED_INT_8_8_8_8_REV                        0x8367
+#define GL_UNSIGNED_INT_2_10_10_10_REV                     0x8368
+#define GL_BGR                                             0x80E0
+#define GL_BGRA                                            0x80E1
+#define GL_MAX_ELEMENTS_VERTICES                           0x80E8
+#define GL_MAX_ELEMENTS_INDICES                            0x80E9
+#define GL_CLAMP_TO_EDGE                                   0x812F
+#define GL_TEXTURE_MIN_LOD                                 0x813A
+#define GL_TEXTURE_MAX_LOD                                 0x813B
+#define GL_TEXTURE_BASE_LEVEL                              0x813C
+#define GL_TEXTURE_MAX_LEVEL                               0x813D
+#define GL_SMOOTH_POINT_SIZE_RANGE                         0x0B12
+#define GL_SMOOTH_POINT_SIZE_GRANULARITY                   0x0B13
+#define GL_SMOOTH_LINE_WIDTH_RANGE                         0x0B22
+#define GL_SMOOTH_LINE_WIDTH_GRANULARITY                   0x0B23
+#define GL_ALIASED_LINE_WIDTH_RANGE                        0x846E
+#define GL_RESCALE_NORMAL                                  0x803A
+#define GL_LIGHT_MODEL_COLOR_CONTROL                       0x81F8
+#define GL_SINGLE_COLOR                                    0x81F9
+#define GL_SEPARATE_SPECULAR_COLOR                         0x81FA
+#define GL_ALIASED_POINT_SIZE_RANGE                        0x846D
+#ifndef GLEE_H_DEFINED_glBlendColor
+#define GLEE_H_DEFINED_glBlendColor
+  typedef void (APIENTRYP GLEEPFNGLBLENDCOLORPROC) (GLclampf  red, GLclampf  green, GLclampf  blue, GLclampf  alpha);
+  GLEE_EXTERN GLEEPFNGLBLENDCOLORPROC GLeeFuncPtr_glBlendColor;
+  #define glBlendColor GLeeFuncPtr_glBlendColor
+#endif
+#ifndef GLEE_H_DEFINED_glBlendEquation
+#define GLEE_H_DEFINED_glBlendEquation
+  typedef void (APIENTRYP GLEEPFNGLBLENDEQUATIONPROC) (GLenum  mode);
+  GLEE_EXTERN GLEEPFNGLBLENDEQUATIONPROC GLeeFuncPtr_glBlendEquation;
+  #define glBlendEquation GLeeFuncPtr_glBlendEquation
+#endif
+#ifndef GLEE_H_DEFINED_glDrawRangeElements
+#define GLEE_H_DEFINED_glDrawRangeElements
+  typedef void (APIENTRYP GLEEPFNGLDRAWRANGEELEMENTSPROC) (GLenum  mode, GLuint  start, GLuint  end, GLsizei  count, GLenum  type, const GLvoid * indices);
+  GLEE_EXTERN GLEEPFNGLDRAWRANGEELEMENTSPROC GLeeFuncPtr_glDrawRangeElements;
+  #define glDrawRangeElements GLeeFuncPtr_glDrawRangeElements
+#endif
+#ifndef GLEE_H_DEFINED_glTexImage3D
+#define GLEE_H_DEFINED_glTexImage3D
+  typedef void (APIENTRYP GLEEPFNGLTEXIMAGE3DPROC) (GLenum  target, GLint  level, GLint  internalformat, GLsizei  width, GLsizei  height, GLsizei  depth, GLint  border, GLenum  format, GLenum  type, const GLvoid * pixels);
+  GLEE_EXTERN GLEEPFNGLTEXIMAGE3DPROC GLeeFuncPtr_glTexImage3D;
+  #define glTexImage3D GLeeFuncPtr_glTexImage3D
+#endif
+#ifndef GLEE_H_DEFINED_glTexSubImage3D
+#define GLEE_H_DEFINED_glTexSubImage3D
+  typedef void (APIENTRYP GLEEPFNGLTEXSUBIMAGE3DPROC) (GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLint  zoffset, GLsizei  width, GLsizei  height, GLsizei  depth, GLenum  format, GLenum  type, const GLvoid * pixels);
+  GLEE_EXTERN GLEEPFNGLTEXSUBIMAGE3DPROC GLeeFuncPtr_glTexSubImage3D;
+  #define glTexSubImage3D GLeeFuncPtr_glTexSubImage3D
+#endif
+#ifndef GLEE_H_DEFINED_glCopyTexSubImage3D
+#define GLEE_H_DEFINED_glCopyTexSubImage3D
+  typedef void (APIENTRYP GLEEPFNGLCOPYTEXSUBIMAGE3DPROC) (GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLint  zoffset, GLint  x, GLint  y, GLsizei  width, GLsizei  height);
+  GLEE_EXTERN GLEEPFNGLCOPYTEXSUBIMAGE3DPROC GLeeFuncPtr_glCopyTexSubImage3D;
+  #define glCopyTexSubImage3D GLeeFuncPtr_glCopyTexSubImage3D
+#endif
+#ifndef GLEE_H_DEFINED_glColorTable
+#define GLEE_H_DEFINED_glColorTable
+  typedef void (APIENTRYP GLEEPFNGLCOLORTABLEPROC) (GLenum  target, GLenum  internalformat, GLsizei  width, GLenum  format, GLenum  type, const GLvoid * table);
+  GLEE_EXTERN GLEEPFNGLCOLORTABLEPROC GLeeFuncPtr_glColorTable;
+  #define glColorTable GLeeFuncPtr_glColorTable
+#endif
+#ifndef GLEE_H_DEFINED_glColorTableParameterfv
+#define GLEE_H_DEFINED_glColorTableParameterfv
+  typedef void (APIENTRYP GLEEPFNGLCOLORTABLEPARAMETERFVPROC) (GLenum  target, GLenum  pname, const GLfloat * params);
+  GLEE_EXTERN GLEEPFNGLCOLORTABLEPARAMETERFVPROC GLeeFuncPtr_glColorTableParameterfv;
+  #define glColorTableParameterfv GLeeFuncPtr_glColorTableParameterfv
+#endif
+#ifndef GLEE_H_DEFINED_glColorTableParameteriv
+#define GLEE_H_DEFINED_glColorTableParameteriv
+  typedef void (APIENTRYP GLEEPFNGLCOLORTABLEPARAMETERIVPROC) (GLenum  target, GLenum  pname, const GLint * params);
+  GLEE_EXTERN GLEEPFNGLCOLORTABLEPARAMETERIVPROC GLeeFuncPtr_glColorTableParameteriv;
+  #define glColorTableParameteriv GLeeFuncPtr_glColorTableParameteriv
+#endif
+#ifndef GLEE_H_DEFINED_glCopyColorTable
+#define GLEE_H_DEFINED_glCopyColorTable
+  typedef void (APIENTRYP GLEEPFNGLCOPYCOLORTABLEPROC) (GLenum  target, GLenum  internalformat, GLint  x, GLint  y, GLsizei  width);
+  GLEE_EXTERN GLEEPFNGLCOPYCOLORTABLEPROC GLeeFuncPtr_glCopyColorTable;
+  #define glCopyColorTable GLeeFuncPtr_glCopyColorTable
+#endif
+#ifndef GLEE_H_DEFINED_glGetColorTable
+#define GLEE_H_DEFINED_glGetColorTable
+  typedef void (APIENTRYP GLEEPFNGLGETCOLORTABLEPROC) (GLenum  target, GLenum  format, GLenum  type, GLvoid * table);
+  GLEE_EXTERN GLEEPFNGLGETCOLORTABLEPROC GLeeFuncPtr_glGetColorTable;
+  #define glGetColorTable GLeeFuncPtr_glGetColorTable
+#endif
+#ifndef GLEE_H_DEFINED_glGetColorTableParameterfv
+#define GLEE_H_DEFINED_glGetColorTableParameterfv
+  typedef void (APIENTRYP GLEEPFNGLGETCOLORTABLEPARAMETERFVPROC) (GLenum  target, GLenum  pname, GLfloat * params);
+  GLEE_EXTERN GLEEPFNGLGETCOLORTABLEPARAMETERFVPROC GLeeFuncPtr_glGetColorTableParameterfv;
+  #define glGetColorTableParameterfv GLeeFuncPtr_glGetColorTableParameterfv
+#endif
+#ifndef GLEE_H_DEFINED_glGetColorTableParameteriv
+#define GLEE_H_DEFINED_glGetColorTableParameteriv
+  typedef void (APIENTRYP GLEEPFNGLGETCOLORTABLEPARAMETERIVPROC) (GLenum  target, GLenum  pname, GLint * params);
+  GLEE_EXTERN GLEEPFNGLGETCOLORTABLEPARAMETERIVPROC GLeeFuncPtr_glGetColorTableParameteriv;
+  #define glGetColorTableParameteriv GLeeFuncPtr_glGetColorTableParameteriv
+#endif
+#ifndef GLEE_H_DEFINED_glColorSubTable
+#define GLEE_H_DEFINED_glColorSubTable
+  typedef void (APIENTRYP GLEEPFNGLCOLORSUBTABLEPROC) (GLenum  target, GLsizei  start, GLsizei  count, GLenum  format, GLenum  type, const GLvoid * data);
+  GLEE_EXTERN GLEEPFNGLCOLORSUBTABLEPROC GLeeFuncPtr_glColorSubTable;
+  #define glColorSubTable GLeeFuncPtr_glColorSubTable
+#endif
+#ifndef GLEE_H_DEFINED_glCopyColorSubTable
+#define GLEE_H_DEFINED_glCopyColorSubTable
+  typedef void (APIENTRYP GLEEPFNGLCOPYCOLORSUBTABLEPROC) (GLenum  target, GLsizei  start, GLint  x, GLint  y, GLsizei  width);
+  GLEE_EXTERN GLEEPFNGLCOPYCOLORSUBTABLEPROC GLeeFuncPtr_glCopyColorSubTable;
+  #define glCopyColorSubTable GLeeFuncPtr_glCopyColorSubTable
+#endif
+#ifndef GLEE_H_DEFINED_glConvolutionFilter1D
+#define GLEE_H_DEFINED_glConvolutionFilter1D
+  typedef void (APIENTRYP GLEEPFNGLCONVOLUTIONFILTER1DPROC) (GLenum  target, GLenum  internalformat, GLsizei  width, GLenum  format, GLenum  type, const GLvoid * image);
+  GLEE_EXTERN GLEEPFNGLCONVOLUTIONFILTER1DPROC GLeeFuncPtr_glConvolutionFilter1D;
+  #define glConvolutionFilter1D GLeeFuncPtr_glConvolutionFilter1D
+#endif
+#ifndef GLEE_H_DEFINED_glConvolutionFilter2D
+#define GLEE_H_DEFINED_glConvolutionFilter2D
+  typedef void (APIENTRYP GLEEPFNGLCONVOLUTIONFILTER2DPROC) (GLenum  target, GLenum  internalformat, GLsizei  width, GLsizei  height, GLenum  format, GLenum  type, const GLvoid * image);
+  GLEE_EXTERN GLEEPFNGLCONVOLUTIONFILTER2DPROC GLeeFuncPtr_glConvolutionFilter2D;
+  #define glConvolutionFilter2D GLeeFuncPtr_glConvolutionFilter2D
+#endif
+#ifndef GLEE_H_DEFINED_glConvolutionParameterf
+#define GLEE_H_DEFINED_glConvolutionParameterf
+  typedef void (APIENTRYP GLEEPFNGLCONVOLUTIONPARAMETERFPROC) (GLenum  target, GLenum  pname, GLfloat  params);
+  GLEE_EXTERN GLEEPFNGLCONVOLUTIONPARAMETERFPROC GLeeFuncPtr_glConvolutionParameterf;
+  #define glConvolutionParameterf GLeeFuncPtr_glConvolutionParameterf
+#endif
+#ifndef GLEE_H_DEFINED_glConvolutionParameterfv
+#define GLEE_H_DEFINED_glConvolutionParameterfv
+  typedef void (APIENTRYP GLEEPFNGLCONVOLUTIONPARAMETERFVPROC) (GLenum  target, GLenum  pname, const GLfloat * params);
+  GLEE_EXTERN GLEEPFNGLCONVOLUTIONPARAMETERFVPROC GLeeFuncPtr_glConvolutionParameterfv;
+  #define glConvolutionParameterfv GLeeFuncPtr_glConvolutionParameterfv
+#endif
+#ifndef GLEE_H_DEFINED_glConvolutionParameteri
+#define GLEE_H_DEFINED_glConvolutionParameteri
+  typedef void (APIENTRYP GLEEPFNGLCONVOLUTIONPARAMETERIPROC) (GLenum  target, GLenum  pname, GLint  params);
+  GLEE_EXTERN GLEEPFNGLCONVOLUTIONPARAMETERIPROC GLeeFuncPtr_glConvolutionParameteri;
+  #define glConvolutionParameteri GLeeFuncPtr_glConvolutionParameteri
+#endif
+#ifndef GLEE_H_DEFINED_glConvolutionParameteriv
+#define GLEE_H_DEFINED_glConvolutionParameteriv
+  typedef void (APIENTRYP GLEEPFNGLCONVOLUTIONPARAMETERIVPROC) (GLenum  target, GLenum  pname, const GLint * params);
+  GLEE_EXTERN GLEEPFNGLCONVOLUTIONPARAMETERIVPROC GLeeFuncPtr_glConvolutionParameteriv;
+  #define glConvolutionParameteriv GLeeFuncPtr_glConvolutionParameteriv
+#endif
+#ifndef GLEE_H_DEFINED_glCopyConvolutionFilter1D
+#define GLEE_H_DEFINED_glCopyConvolutionFilter1D
+  typedef void (APIENTRYP GLEEPFNGLCOPYCONVOLUTIONFILTER1DPROC) (GLenum  target, GLenum  internalformat, GLint  x, GLint  y, GLsizei  width);
+  GLEE_EXTERN GLEEPFNGLCOPYCONVOLUTIONFILTER1DPROC GLeeFuncPtr_glCopyConvolutionFilter1D;
+  #define glCopyConvolutionFilter1D GLeeFuncPtr_glCopyConvolutionFilter1D
+#endif
+#ifndef GLEE_H_DEFINED_glCopyConvolutionFilter2D
+#define GLEE_H_DEFINED_glCopyConvolutionFilter2D
+  typedef void (APIENTRYP GLEEPFNGLCOPYCONVOLUTIONFILTER2DPROC) (GLenum  target, GLenum  internalformat, GLint  x, GLint  y, GLsizei  width, GLsizei  height);
+  GLEE_EXTERN GLEEPFNGLCOPYCONVOLUTIONFILTER2DPROC GLeeFuncPtr_glCopyConvolutionFilter2D;
+  #define glCopyConvolutionFilter2D GLeeFuncPtr_glCopyConvolutionFilter2D
+#endif
+#ifndef GLEE_H_DEFINED_glGetConvolutionFilter
+#define GLEE_H_DEFINED_glGetConvolutionFilter
+  typedef void (APIENTRYP GLEEPFNGLGETCONVOLUTIONFILTERPROC) (GLenum  target, GLenum  format, GLenum  type, GLvoid * image);
+  GLEE_EXTERN GLEEPFNGLGETCONVOLUTIONFILTERPROC GLeeFuncPtr_glGetConvolutionFilter;
+  #define glGetConvolutionFilter GLeeFuncPtr_glGetConvolutionFilter
+#endif
+#ifndef GLEE_H_DEFINED_glGetConvolutionParameterfv
+#define GLEE_H_DEFINED_glGetConvolutionParameterfv
+  typedef void (APIENTRYP GLEEPFNGLGETCONVOLUTIONPARAMETERFVPROC) (GLenum  target, GLenum  pname, GLfloat * params);
+  GLEE_EXTERN GLEEPFNGLGETCONVOLUTIONPARAMETERFVPROC GLeeFuncPtr_glGetConvolutionParameterfv;
+  #define glGetConvolutionParameterfv GLeeFuncPtr_glGetConvolutionParameterfv
+#endif
+#ifndef GLEE_H_DEFINED_glGetConvolutionParameteriv
+#define GLEE_H_DEFINED_glGetConvolutionParameteriv
+  typedef void (APIENTRYP GLEEPFNGLGETCONVOLUTIONPARAMETERIVPROC) (GLenum  target, GLenum  pname, GLint * params);
+  GLEE_EXTERN GLEEPFNGLGETCONVOLUTIONPARAMETERIVPROC GLeeFuncPtr_glGetConvolutionParameteriv;
+  #define glGetConvolutionParameteriv GLeeFuncPtr_glGetConvolutionParameteriv
+#endif
+#ifndef GLEE_H_DEFINED_glGetSeparableFilter
+#define GLEE_H_DEFINED_glGetSeparableFilter
+  typedef void (APIENTRYP GLEEPFNGLGETSEPARABLEFILTERPROC) (GLenum  target, GLenum  format, GLenum  type, GLvoid * row, GLvoid * column, GLvoid * span);
+  GLEE_EXTERN GLEEPFNGLGETSEPARABLEFILTERPROC GLeeFuncPtr_glGetSeparableFilter;
+  #define glGetSeparableFilter GLeeFuncPtr_glGetSeparableFilter
+#endif
+#ifndef GLEE_H_DEFINED_glSeparableFilter2D
+#define GLEE_H_DEFINED_glSeparableFilter2D
+  typedef void (APIENTRYP GLEEPFNGLSEPARABLEFILTER2DPROC) (GLenum  target, GLenum  internalformat, GLsizei  width, GLsizei  height, GLenum  format, GLenum  type, const GLvoid * row, const GLvoid * column);
+  GLEE_EXTERN GLEEPFNGLSEPARABLEFILTER2DPROC GLeeFuncPtr_glSeparableFilter2D;
+  #define glSeparableFilter2D GLeeFuncPtr_glSeparableFilter2D
+#endif
+#ifndef GLEE_H_DEFINED_glGetHistogram
+#define GLEE_H_DEFINED_glGetHistogram
+  typedef void (APIENTRYP GLEEPFNGLGETHISTOGRAMPROC) (GLenum  target, GLboolean  reset, GLenum  format, GLenum  type, GLvoid * values);
+  GLEE_EXTERN GLEEPFNGLGETHISTOGRAMPROC GLeeFuncPtr_glGetHistogram;
+  #define glGetHistogram GLeeFuncPtr_glGetHistogram
+#endif
+#ifndef GLEE_H_DEFINED_glGetHistogramParameterfv
+#define GLEE_H_DEFINED_glGetHistogramParameterfv
+  typedef void (APIENTRYP GLEEPFNGLGETHISTOGRAMPARAMETERFVPROC) (GLenum  target, GLenum  pname, GLfloat * params);
+  GLEE_EXTERN GLEEPFNGLGETHISTOGRAMPARAMETERFVPROC GLeeFuncPtr_glGetHistogramParameterfv;
+  #define glGetHistogramParameterfv GLeeFuncPtr_glGetHistogramParameterfv
+#endif
+#ifndef GLEE_H_DEFINED_glGetHistogramParameteriv
+#define GLEE_H_DEFINED_glGetHistogramParameteriv
+  typedef void (APIENTRYP GLEEPFNGLGETHISTOGRAMPARAMETERIVPROC) (GLenum  target, GLenum  pname, GLint * params);
+  GLEE_EXTERN GLEEPFNGLGETHISTOGRAMPARAMETERIVPROC GLeeFuncPtr_glGetHistogramParameteriv;
+  #define glGetHistogramParameteriv GLeeFuncPtr_glGetHistogramParameteriv
+#endif
+#ifndef GLEE_H_DEFINED_glGetMinmax
+#define GLEE_H_DEFINED_glGetMinmax
+  typedef void (APIENTRYP GLEEPFNGLGETMINMAXPROC) (GLenum  target, GLboolean  reset, GLenum  format, GLenum  type, GLvoid * values);
+  GLEE_EXTERN GLEEPFNGLGETMINMAXPROC GLeeFuncPtr_glGetMinmax;
+  #define glGetMinmax GLeeFuncPtr_glGetMinmax
+#endif
+#ifndef GLEE_H_DEFINED_glGetMinmaxParameterfv
+#define GLEE_H_DEFINED_glGetMinmaxParameterfv
+  typedef void (APIENTRYP GLEEPFNGLGETMINMAXPARAMETERFVPROC) (GLenum  target, GLenum  pname, GLfloat * params);
+  GLEE_EXTERN GLEEPFNGLGETMINMAXPARAMETERFVPROC GLeeFuncPtr_glGetMinmaxParameterfv;
+  #define glGetMinmaxParameterfv GLeeFuncPtr_glGetMinmaxParameterfv
+#endif
+#ifndef GLEE_H_DEFINED_glGetMinmaxParameteriv
+#define GLEE_H_DEFINED_glGetMinmaxParameteriv
+  typedef void (APIENTRYP GLEEPFNGLGETMINMAXPARAMETERIVPROC) (GLenum  target, GLenum  pname, GLint * params);
+  GLEE_EXTERN GLEEPFNGLGETMINMAXPARAMETERIVPROC GLeeFuncPtr_glGetMinmaxParameteriv;
+  #define glGetMinmaxParameteriv GLeeFuncPtr_glGetMinmaxParameteriv
+#endif
+#ifndef GLEE_H_DEFINED_glHistogram
+#define GLEE_H_DEFINED_glHistogram
+  typedef void (APIENTRYP GLEEPFNGLHISTOGRAMPROC) (GLenum  target, GLsizei  width, GLenum  internalformat, GLboolean  sink);
+  GLEE_EXTERN GLEEPFNGLHISTOGRAMPROC GLeeFuncPtr_glHistogram;
+  #define glHistogram GLeeFuncPtr_glHistogram
+#endif
+#ifndef GLEE_H_DEFINED_glMinmax
+#define GLEE_H_DEFINED_glMinmax
+  typedef void (APIENTRYP GLEEPFNGLMINMAXPROC) (GLenum  target, GLenum  internalformat, GLboolean  sink);
+  GLEE_EXTERN GLEEPFNGLMINMAXPROC GLeeFuncPtr_glMinmax;
+  #define glMinmax GLeeFuncPtr_glMinmax
+#endif
+#ifndef GLEE_H_DEFINED_glResetHistogram
+#define GLEE_H_DEFINED_glResetHistogram
+  typedef void (APIENTRYP GLEEPFNGLRESETHISTOGRAMPROC) (GLenum  target);
+  GLEE_EXTERN GLEEPFNGLRESETHISTOGRAMPROC GLeeFuncPtr_glResetHistogram;
+  #define glResetHistogram GLeeFuncPtr_glResetHistogram
+#endif
+#ifndef GLEE_H_DEFINED_glResetMinmax
+#define GLEE_H_DEFINED_glResetMinmax
+  typedef void (APIENTRYP GLEEPFNGLRESETMINMAXPROC) (GLenum  target);
+  GLEE_EXTERN GLEEPFNGLRESETMINMAXPROC GLeeFuncPtr_glResetMinmax;
+  #define glResetMinmax GLeeFuncPtr_glResetMinmax
+#endif
+#endif 
+
+/* GL_ARB_imaging */
+
+#ifndef GL_ARB_imaging
+#define GL_ARB_imaging 1
+#define __GLEE_GL_ARB_imaging 1
+/* Constants */
+#define GL_CONSTANT_COLOR                                  0x8001
+#define GL_ONE_MINUS_CONSTANT_COLOR                        0x8002
+#define GL_CONSTANT_ALPHA                                  0x8003
+#define GL_ONE_MINUS_CONSTANT_ALPHA                        0x8004
+#define GL_BLEND_COLOR                                     0x8005
+#define GL_FUNC_ADD                                        0x8006
+#define GL_MIN                                             0x8007
+#define GL_MAX                                             0x8008
+#define GL_BLEND_EQUATION                                  0x8009
+#define GL_FUNC_SUBTRACT                                   0x800A
+#define GL_FUNC_REVERSE_SUBTRACT                           0x800B
+#define GL_CONVOLUTION_1D                                  0x8010
+#define GL_CONVOLUTION_2D                                  0x8011
+#define GL_SEPARABLE_2D                                    0x8012
+#define GL_CONVOLUTION_BORDER_MODE                         0x8013
+#define GL_CONVOLUTION_FILTER_SCALE                        0x8014
+#define GL_CONVOLUTION_FILTER_BIAS                         0x8015
+#define GL_REDUCE                                          0x8016
+#define GL_CONVOLUTION_FORMAT                              0x8017
+#define GL_CONVOLUTION_WIDTH                               0x8018
+#define GL_CONVOLUTION_HEIGHT                              0x8019
+#define GL_MAX_CONVOLUTION_WIDTH                           0x801A
+#define GL_MAX_CONVOLUTION_HEIGHT                          0x801B
+#define GL_POST_CONVOLUTION_RED_SCALE                      0x801C
+#define GL_POST_CONVOLUTION_GREEN_SCALE                    0x801D
+#define GL_POST_CONVOLUTION_BLUE_SCALE                     0x801E
+#define GL_POST_CONVOLUTION_ALPHA_SCALE                    0x801F
+#define GL_POST_CONVOLUTION_RED_BIAS                       0x8020
+#define GL_POST_CONVOLUTION_GREEN_BIAS                     0x8021
+#define GL_POST_CONVOLUTION_BLUE_BIAS                      0x8022
+#define GL_POST_CONVOLUTION_ALPHA_BIAS                     0x8023
+#define GL_HISTOGRAM                                       0x8024
+#define GL_PROXY_HISTOGRAM                                 0x8025
+#define GL_HISTOGRAM_WIDTH                                 0x8026
+#define GL_HISTOGRAM_FORMAT                                0x8027
+#define GL_HISTOGRAM_RED_SIZE                              0x8028
+#define GL_HISTOGRAM_GREEN_SIZE                            0x8029
+#define GL_HISTOGRAM_BLUE_SIZE                             0x802A
+#define GL_HISTOGRAM_ALPHA_SIZE                            0x802B
+#define GL_HISTOGRAM_LUMINANCE_SIZE                        0x802C
+#define GL_HISTOGRAM_SINK                                  0x802D
+#define GL_MINMAX                                          0x802E
+#define GL_MINMAX_FORMAT                                   0x802F
+#define GL_MINMAX_SINK                                     0x8030
+#define GL_TABLE_TOO_LARGE                                 0x8031
+#define GL_COLOR_MATRIX                                    0x80B1
+#define GL_COLOR_MATRIX_STACK_DEPTH                        0x80B2
+#define GL_MAX_COLOR_MATRIX_STACK_DEPTH                    0x80B3
+#define GL_POST_COLOR_MATRIX_RED_SCALE                     0x80B4
+#define GL_POST_COLOR_MATRIX_GREEN_SCALE                   0x80B5
+#define GL_POST_COLOR_MATRIX_BLUE_SCALE                    0x80B6
+#define GL_POST_COLOR_MATRIX_ALPHA_SCALE                   0x80B7
+#define GL_POST_COLOR_MATRIX_RED_BIAS                      0x80B8
+#define GL_POST_COLOR_MATRIX_GREEN_BIAS                    0x80B9
+#define GL_POST_COLOR_MATRIX_BLUE_BIAS                     0x80BA
+#define GL_POST_COLOR_MATRIX_ALPHA_BIAS                    0x80BB
+#define GL_COLOR_TABLE                                     0x80D0
+#define GL_POST_CONVOLUTION_COLOR_TABLE                    0x80D1
+#define GL_POST_COLOR_MATRIX_COLOR_TABLE                   0x80D2
+#define GL_PROXY_COLOR_TABLE                               0x80D3
+#define GL_PROXY_POST_CONVOLUTION_COLOR_TABLE              0x80D4
+#define GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE             0x80D5
+#define GL_COLOR_TABLE_SCALE                               0x80D6
+#define GL_COLOR_TABLE_BIAS                                0x80D7
+#define GL_COLOR_TABLE_FORMAT                              0x80D8
+#define GL_COLOR_TABLE_WIDTH                               0x80D9
+#define GL_COLOR_TABLE_RED_SIZE                            0x80DA
+#define GL_COLOR_TABLE_GREEN_SIZE                          0x80DB
+#define GL_COLOR_TABLE_BLUE_SIZE                           0x80DC
+#define GL_COLOR_TABLE_ALPHA_SIZE                          0x80DD
+#define GL_COLOR_TABLE_LUMINANCE_SIZE                      0x80DE
+#define GL_COLOR_TABLE_INTENSITY_SIZE                      0x80DF
+#define GL_CONSTANT_BORDER                                 0x8151
+#define GL_REPLICATE_BORDER                                0x8153
+#define GL_CONVOLUTION_BORDER_COLOR                        0x8154
+#endif 
+
+/* GL_VERSION_1_3 */
+
+#ifndef GL_VERSION_1_3
+#define GL_VERSION_1_3 1
+#define __GLEE_GL_VERSION_1_3 1
+/* Constants */
+#define GL_TEXTURE0                                        0x84C0
+#define GL_TEXTURE1                                        0x84C1
+#define GL_TEXTURE2                                        0x84C2
+#define GL_TEXTURE3                                        0x84C3
+#define GL_TEXTURE4                                        0x84C4
+#define GL_TEXTURE5                                        0x84C5
+#define GL_TEXTURE6                                        0x84C6
+#define GL_TEXTURE7                                        0x84C7
+#define GL_TEXTURE8                                        0x84C8
+#define GL_TEXTURE9                                        0x84C9
+#define GL_TEXTURE10                                       0x84CA
+#define GL_TEXTURE11                                       0x84CB
+#define GL_TEXTURE12                                       0x84CC
+#define GL_TEXTURE13                                       0x84CD
+#define GL_TEXTURE14                                       0x84CE
+#define GL_TEXTURE15                                       0x84CF
+#define GL_TEXTURE16                                       0x84D0
+#define GL_TEXTURE17                                       0x84D1
+#define GL_TEXTURE18                                       0x84D2
+#define GL_TEXTURE19                                       0x84D3
+#define GL_TEXTURE20                                       0x84D4
+#define GL_TEXTURE21                                       0x84D5
+#define GL_TEXTURE22                                       0x84D6
+#define GL_TEXTURE23                                       0x84D7
+#define GL_TEXTURE24                                       0x84D8
+#define GL_TEXTURE25                                       0x84D9
+#define GL_TEXTURE26                                       0x84DA
+#define GL_TEXTURE27                                       0x84DB
+#define GL_TEXTURE28                                       0x84DC
+#define GL_TEXTURE29                                       0x84DD
+#define GL_TEXTURE30                                       0x84DE
+#define GL_TEXTURE31                                       0x84DF
+#define GL_ACTIVE_TEXTURE                                  0x84E0
+#define GL_MULTISAMPLE                                     0x809D
+#define GL_SAMPLE_ALPHA_TO_COVERAGE                        0x809E
+#define GL_SAMPLE_ALPHA_TO_ONE                             0x809F
+#define GL_SAMPLE_COVERAGE                                 0x80A0
+#define GL_SAMPLE_BUFFERS                                  0x80A8
+#define GL_SAMPLES                                         0x80A9
+#define GL_SAMPLE_COVERAGE_VALUE                           0x80AA
+#define GL_SAMPLE_COVERAGE_INVERT                          0x80AB
+#define GL_TEXTURE_CUBE_MAP                                0x8513
+#define GL_TEXTURE_BINDING_CUBE_MAP                        0x8514
+#define GL_TEXTURE_CUBE_MAP_POSITIVE_X                     0x8515
+#define GL_TEXTURE_CUBE_MAP_NEGATIVE_X                     0x8516
+#define GL_TEXTURE_CUBE_MAP_POSITIVE_Y                     0x8517
+#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Y                     0x8518
+#define GL_TEXTURE_CUBE_MAP_POSITIVE_Z                     0x8519
+#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Z                     0x851A
+#define GL_PROXY_TEXTURE_CUBE_MAP                          0x851B
+#define GL_MAX_CUBE_MAP_TEXTURE_SIZE                       0x851C
+#define GL_COMPRESSED_RGB                                  0x84ED
+#define GL_COMPRESSED_RGBA                                 0x84EE
+#define GL_TEXTURE_COMPRESSION_HINT                        0x84EF
+#define GL_TEXTURE_COMPRESSED_IMAGE_SIZE                   0x86A0
+#define GL_TEXTURE_COMPRESSED                              0x86A1
+#define GL_NUM_COMPRESSED_TEXTURE_FORMATS                  0x86A2
+#define GL_COMPRESSED_TEXTURE_FORMATS                      0x86A3
+#define GL_CLAMP_TO_BORDER                                 0x812D
+#define GL_CLIENT_ACTIVE_TEXTURE                           0x84E1
+#define GL_MAX_TEXTURE_UNITS                               0x84E2
+#define GL_TRANSPOSE_MODELVIEW_MATRIX                      0x84E3
+#define GL_TRANSPOSE_PROJECTION_MATRIX                     0x84E4
+#define GL_TRANSPOSE_TEXTURE_MATRIX                        0x84E5
+#define GL_TRANSPOSE_COLOR_MATRIX                          0x84E6
+#define GL_MULTISAMPLE_BIT                                 0x20000000
+#define GL_NORMAL_MAP                                      0x8511
+#define GL_REFLECTION_MAP                                  0x8512
+#define GL_COMPRESSED_ALPHA                                0x84E9
+#define GL_COMPRESSED_LUMINANCE                            0x84EA
+#define GL_COMPRESSED_LUMINANCE_ALPHA                      0x84EB
+#define GL_COMPRESSED_INTENSITY                            0x84EC
+#define GL_COMBINE                                         0x8570
+#define GL_COMBINE_RGB                                     0x8571
+#define GL_COMBINE_ALPHA                                   0x8572
+#define GL_SOURCE0_RGB                                     0x8580
+#define GL_SOURCE1_RGB                                     0x8581
+#define GL_SOURCE2_RGB                                     0x8582
+#define GL_SOURCE0_ALPHA                                   0x8588
+#define GL_SOURCE1_ALPHA                                   0x8589
+#define GL_SOURCE2_ALPHA                                   0x858A
+#define GL_OPERAND0_RGB                                    0x8590
+#define GL_OPERAND1_RGB                                    0x8591
+#define GL_OPERAND2_RGB                                    0x8592
+#define GL_OPERAND0_ALPHA                                  0x8598
+#define GL_OPERAND1_ALPHA                                  0x8599
+#define GL_OPERAND2_ALPHA                                  0x859A
+#define GL_RGB_SCALE                                       0x8573
+#define GL_ADD_SIGNED                                      0x8574
+#define GL_INTERPOLATE                                     0x8575
+#define GL_SUBTRACT                                        0x84E7
+#define GL_CONSTANT                                        0x8576
+#define GL_PRIMARY_COLOR                                   0x8577
+#define GL_PREVIOUS                                        0x8578
+#define GL_DOT3_RGB                                        0x86AE
+#define GL_DOT3_RGBA                                       0x86AF
+#ifndef GLEE_H_DEFINED_glActiveTexture
+#define GLEE_H_DEFINED_glActiveTexture
+  typedef void (APIENTRYP GLEEPFNGLACTIVETEXTUREPROC) (GLenum  texture);
+  GLEE_EXTERN GLEEPFNGLACTIVETEXTUREPROC GLeeFuncPtr_glActiveTexture;
+  #define glActiveTexture GLeeFuncPtr_glActiveTexture
+#endif
+#ifndef GLEE_H_DEFINED_glSampleCoverage
+#define GLEE_H_DEFINED_glSampleCoverage
+  typedef void (APIENTRYP GLEEPFNGLSAMPLECOVERAGEPROC) (GLclampf  value, GLboolean  invert);
+  GLEE_EXTERN GLEEPFNGLSAMPLECOVERAGEPROC GLeeFuncPtr_glSampleCoverage;
+  #define glSampleCoverage GLeeFuncPtr_glSampleCoverage
+#endif
+#ifndef GLEE_H_DEFINED_glCompressedTexImage3D
+#define GLEE_H_DEFINED_glCompressedTexImage3D
+  typedef void (APIENTRYP GLEEPFNGLCOMPRESSEDTEXIMAGE3DPROC) (GLenum  target, GLint  level, GLenum  internalformat, GLsizei  width, GLsizei  height, GLsizei  depth, GLint  border, GLsizei  imageSize, const GLvoid * data);
+  GLEE_EXTERN GLEEPFNGLCOMPRESSEDTEXIMAGE3DPROC GLeeFuncPtr_glCompressedTexImage3D;
+  #define glCompressedTexImage3D GLeeFuncPtr_glCompressedTexImage3D
+#endif
+#ifndef GLEE_H_DEFINED_glCompressedTexImage2D
+#define GLEE_H_DEFINED_glCompressedTexImage2D
+  typedef void (APIENTRYP GLEEPFNGLCOMPRESSEDTEXIMAGE2DPROC) (GLenum  target, GLint  level, GLenum  internalformat, GLsizei  width, GLsizei  height, GLint  border, GLsizei  imageSize, const GLvoid * data);
+  GLEE_EXTERN GLEEPFNGLCOMPRESSEDTEXIMAGE2DPROC GLeeFuncPtr_glCompressedTexImage2D;
+  #define glCompressedTexImage2D GLeeFuncPtr_glCompressedTexImage2D
+#endif
+#ifndef GLEE_H_DEFINED_glCompressedTexImage1D
+#define GLEE_H_DEFINED_glCompressedTexImage1D
+  typedef void (APIENTRYP GLEEPFNGLCOMPRESSEDTEXIMAGE1DPROC) (GLenum  target, GLint  level, GLenum  internalformat, GLsizei  width, GLint  border, GLsizei  imageSize, const GLvoid * data);
+  GLEE_EXTERN GLEEPFNGLCOMPRESSEDTEXIMAGE1DPROC GLeeFuncPtr_glCompressedTexImage1D;
+  #define glCompressedTexImage1D GLeeFuncPtr_glCompressedTexImage1D
+#endif
+#ifndef GLEE_H_DEFINED_glCompressedTexSubImage3D
+#define GLEE_H_DEFINED_glCompressedTexSubImage3D
+  typedef void (APIENTRYP GLEEPFNGLCOMPRESSEDTEXSUBIMAGE3DPROC) (GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLint  zoffset, GLsizei  width, GLsizei  height, GLsizei  depth, GLenum  format, GLsizei  imageSize, const GLvoid * data);
+  GLEE_EXTERN GLEEPFNGLCOMPRESSEDTEXSUBIMAGE3DPROC GLeeFuncPtr_glCompressedTexSubImage3D;
+  #define glCompressedTexSubImage3D GLeeFuncPtr_glCompressedTexSubImage3D
+#endif
+#ifndef GLEE_H_DEFINED_glCompressedTexSubImage2D
+#define GLEE_H_DEFINED_glCompressedTexSubImage2D
+  typedef void (APIENTRYP GLEEPFNGLCOMPRESSEDTEXSUBIMAGE2DPROC) (GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLsizei  width, GLsizei  height, GLenum  format, GLsizei  imageSize, const GLvoid * data);
+  GLEE_EXTERN GLEEPFNGLCOMPRESSEDTEXSUBIMAGE2DPROC GLeeFuncPtr_glCompressedTexSubImage2D;
+  #define glCompressedTexSubImage2D GLeeFuncPtr_glCompressedTexSubImage2D
+#endif
+#ifndef GLEE_H_DEFINED_glCompressedTexSubImage1D
+#define GLEE_H_DEFINED_glCompressedTexSubImage1D
+  typedef void (APIENTRYP GLEEPFNGLCOMPRESSEDTEXSUBIMAGE1DPROC) (GLenum  target, GLint  level, GLint  xoffset, GLsizei  width, GLenum  format, GLsizei  imageSize, const GLvoid * data);
+  GLEE_EXTERN GLEEPFNGLCOMPRESSEDTEXSUBIMAGE1DPROC GLeeFuncPtr_glCompressedTexSubImage1D;
+  #define glCompressedTexSubImage1D GLeeFuncPtr_glCompressedTexSubImage1D
+#endif
+#ifndef GLEE_H_DEFINED_glGetCompressedTexImage
+#define GLEE_H_DEFINED_glGetCompressedTexImage
+  typedef void (APIENTRYP GLEEPFNGLGETCOMPRESSEDTEXIMAGEPROC) (GLenum  target, GLint  level, GLvoid * img);
+  GLEE_EXTERN GLEEPFNGLGETCOMPRESSEDTEXIMAGEPROC GLeeFuncPtr_glGetCompressedTexImage;
+  #define glGetCompressedTexImage GLeeFuncPtr_glGetCompressedTexImage
+#endif
+#ifndef GLEE_H_DEFINED_glClientActiveTexture
+#define GLEE_H_DEFINED_glClientActiveTexture
+  typedef void (APIENTRYP GLEEPFNGLCLIENTACTIVETEXTUREPROC) (GLenum  texture);
+  GLEE_EXTERN GLEEPFNGLCLIENTACTIVETEXTUREPROC GLeeFuncPtr_glClientActiveTexture;
+  #define glClientActiveTexture GLeeFuncPtr_glClientActiveTexture
+#endif
+#ifndef GLEE_H_DEFINED_glMultiTexCoord1d
+#define GLEE_H_DEFINED_glMultiTexCoord1d
+  typedef void (APIENTRYP GLEEPFNGLMULTITEXCOORD1DPROC) (GLenum  target, GLdouble  s);
+  GLEE_EXTERN GLEEPFNGLMULTITEXCOORD1DPROC GLeeFuncPtr_glMultiTexCoord1d;
+  #define glMultiTexCoord1d GLeeFuncPtr_glMultiTexCoord1d
+#endif
+#ifndef GLEE_H_DEFINED_glMultiTexCoord1dv
+#define GLEE_H_DEFINED_glMultiTexCoord1dv
+  typedef void (APIENTRYP GLEEPFNGLMULTITEXCOORD1DVPROC) (GLenum  target, const GLdouble * v);
+  GLEE_EXTERN GLEEPFNGLMULTITEXCOORD1DVPROC GLeeFuncPtr_glMultiTexCoord1dv;
+  #define glMultiTexCoord1dv GLeeFuncPtr_glMultiTexCoord1dv
+#endif
+#ifndef GLEE_H_DEFINED_glMultiTexCoord1f
+#define GLEE_H_DEFINED_glMultiTexCoord1f
+  typedef void (APIENTRYP GLEEPFNGLMULTITEXCOORD1FPROC) (GLenum  target, GLfloat  s);
+  GLEE_EXTERN GLEEPFNGLMULTITEXCOORD1FPROC GLeeFuncPtr_glMultiTexCoord1f;
+  #define glMultiTexCoord1f GLeeFuncPtr_glMultiTexCoord1f
+#endif
+#ifndef GLEE_H_DEFINED_glMultiTexCoord1fv
+#define GLEE_H_DEFINED_glMultiTexCoord1fv
+  typedef void (APIENTRYP GLEEPFNGLMULTITEXCOORD1FVPROC) (GLenum  target, const GLfloat * v);
+  GLEE_EXTERN GLEEPFNGLMULTITEXCOORD1FVPROC GLeeFuncPtr_glMultiTexCoord1fv;
+  #define glMultiTexCoord1fv GLeeFuncPtr_glMultiTexCoord1fv
+#endif
+#ifndef GLEE_H_DEFINED_glMultiTexCoord1i
+#define GLEE_H_DEFINED_glMultiTexCoord1i
+  typedef void (APIENTRYP GLEEPFNGLMULTITEXCOORD1IPROC) (GLenum  target, GLint  s);
+  GLEE_EXTERN GLEEPFNGLMULTITEXCOORD1IPROC GLeeFuncPtr_glMultiTexCoord1i;
+  #define glMultiTexCoord1i GLeeFuncPtr_glMultiTexCoord1i
+#endif
+#ifndef GLEE_H_DEFINED_glMultiTexCoord1iv
+#define GLEE_H_DEFINED_glMultiTexCoord1iv
+  typedef void (APIENTRYP GLEEPFNGLMULTITEXCOORD1IVPROC) (GLenum  target, const GLint * v);
+  GLEE_EXTERN GLEEPFNGLMULTITEXCOORD1IVPROC GLeeFuncPtr_glMultiTexCoord1iv;
+  #define glMultiTexCoord1iv GLeeFuncPtr_glMultiTexCoord1iv
+#endif
+#ifndef GLEE_H_DEFINED_glMultiTexCoord1s
+#define GLEE_H_DEFINED_glMultiTexCoord1s
+  typedef void (APIENTRYP GLEEPFNGLMULTITEXCOORD1SPROC) (GLenum  target, GLshort  s);
+  GLEE_EXTERN GLEEPFNGLMULTITEXCOORD1SPROC GLeeFuncPtr_glMultiTexCoord1s;
+  #define glMultiTexCoord1s GLeeFuncPtr_glMultiTexCoord1s
+#endif
+#ifndef GLEE_H_DEFINED_glMultiTexCoord1sv
+#define GLEE_H_DEFINED_glMultiTexCoord1sv
+  typedef void (APIENTRYP GLEEPFNGLMULTITEXCOORD1SVPROC) (GLenum  target, const GLshort * v);
+  GLEE_EXTERN GLEEPFNGLMULTITEXCOORD1SVPROC GLeeFuncPtr_glMultiTexCoord1sv;
+  #define glMultiTexCoord1sv GLeeFuncPtr_glMultiTexCoord1sv
+#endif
+#ifndef GLEE_H_DEFINED_glMultiTexCoord2d
+#define GLEE_H_DEFINED_glMultiTexCoord2d
+  typedef void (APIENTRYP GLEEPFNGLMULTITEXCOORD2DPROC) (GLenum  target, GLdouble  s, GLdouble  t);
+  GLEE_EXTERN GLEEPFNGLMULTITEXCOORD2DPROC GLeeFuncPtr_glMultiTexCoord2d;
+  #define glMultiTexCoord2d GLeeFuncPtr_glMultiTexCoord2d
+#endif
+#ifndef GLEE_H_DEFINED_glMultiTexCoord2dv
+#define GLEE_H_DEFINED_glMultiTexCoord2dv
+  typedef void (APIENTRYP GLEEPFNGLMULTITEXCOORD2DVPROC) (GLenum  target, const GLdouble * v);
+  GLEE_EXTERN GLEEPFNGLMULTITEXCOORD2DVPROC GLeeFuncPtr_glMultiTexCoord2dv;
+  #define glMultiTexCoord2dv GLeeFuncPtr_glMultiTexCoord2dv
+#endif
+#ifndef GLEE_H_DEFINED_glMultiTexCoord2f
+#define GLEE_H_DEFINED_glMultiTexCoord2f
+  typedef void (APIENTRYP GLEEPFNGLMULTITEXCOORD2FPROC) (GLenum  target, GLfloat  s, GLfloat  t);
+  GLEE_EXTERN GLEEPFNGLMULTITEXCOORD2FPROC GLeeFuncPtr_glMultiTexCoord2f;
+  #define glMultiTexCoord2f GLeeFuncPtr_glMultiTexCoord2f
+#endif
+#ifndef GLEE_H_DEFINED_glMultiTexCoord2fv
+#define GLEE_H_DEFINED_glMultiTexCoord2fv
+  typedef void (APIENTRYP GLEEPFNGLMULTITEXCOORD2FVPROC) (GLenum  target, const GLfloat * v);
+  GLEE_EXTERN GLEEPFNGLMULTITEXCOORD2FVPROC GLeeFuncPtr_glMultiTexCoord2fv;
+  #define glMultiTexCoord2fv GLeeFuncPtr_glMultiTexCoord2fv
+#endif
+#ifndef GLEE_H_DEFINED_glMultiTexCoord2i
+#define GLEE_H_DEFINED_glMultiTexCoord2i
+  typedef void (APIENTRYP GLEEPFNGLMULTITEXCOORD2IPROC) (GLenum  target, GLint  s, GLint  t);
+  GLEE_EXTERN GLEEPFNGLMULTITEXCOORD2IPROC GLeeFuncPtr_glMultiTexCoord2i;
+  #define glMultiTexCoord2i GLeeFuncPtr_glMultiTexCoord2i
+#endif
+#ifndef GLEE_H_DEFINED_glMultiTexCoord2iv
+#define GLEE_H_DEFINED_glMultiTexCoord2iv
+  typedef void (APIENTRYP GLEEPFNGLMULTITEXCOORD2IVPROC) (GLenum  target, const GLint * v);
+  GLEE_EXTERN GLEEPFNGLMULTITEXCOORD2IVPROC GLeeFuncPtr_glMultiTexCoord2iv;
+  #define glMultiTexCoord2iv GLeeFuncPtr_glMultiTexCoord2iv
+#endif
+#ifndef GLEE_H_DEFINED_glMultiTexCoord2s
+#define GLEE_H_DEFINED_glMultiTexCoord2s
+  typedef void (APIENTRYP GLEEPFNGLMULTITEXCOORD2SPROC) (GLenum  target, GLshort  s, GLshort  t);
+  GLEE_EXTERN GLEEPFNGLMULTITEXCOORD2SPROC GLeeFuncPtr_glMultiTexCoord2s;
+  #define glMultiTexCoord2s GLeeFuncPtr_glMultiTexCoord2s
+#endif
+#ifndef GLEE_H_DEFINED_glMultiTexCoord2sv
+#define GLEE_H_DEFINED_glMultiTexCoord2sv
+  typedef void (APIENTRYP GLEEPFNGLMULTITEXCOORD2SVPROC) (GLenum  target, const GLshort * v);
+  GLEE_EXTERN GLEEPFNGLMULTITEXCOORD2SVPROC GLeeFuncPtr_glMultiTexCoord2sv;
+  #define glMultiTexCoord2sv GLeeFuncPtr_glMultiTexCoord2sv
+#endif
+#ifndef GLEE_H_DEFINED_glMultiTexCoord3d
+#define GLEE_H_DEFINED_glMultiTexCoord3d
+  typedef void (APIENTRYP GLEEPFNGLMULTITEXCOORD3DPROC) (GLenum  target, GLdouble  s, GLdouble  t, GLdouble  r);
+  GLEE_EXTERN GLEEPFNGLMULTITEXCOORD3DPROC GLeeFuncPtr_glMultiTexCoord3d;
+  #define glMultiTexCoord3d GLeeFuncPtr_glMultiTexCoord3d
+#endif
+#ifndef GLEE_H_DEFINED_glMultiTexCoord3dv
+#define GLEE_H_DEFINED_glMultiTexCoord3dv
+  typedef void (APIENTRYP GLEEPFNGLMULTITEXCOORD3DVPROC) (GLenum  target, const GLdouble * v);
+  GLEE_EXTERN GLEEPFNGLMULTITEXCOORD3DVPROC GLeeFuncPtr_glMultiTexCoord3dv;
+  #define glMultiTexCoord3dv GLeeFuncPtr_glMultiTexCoord3dv
+#endif
+#ifndef GLEE_H_DEFINED_glMultiTexCoord3f
+#define GLEE_H_DEFINED_glMultiTexCoord3f
+  typedef void (APIENTRYP GLEEPFNGLMULTITEXCOORD3FPROC) (GLenum  target, GLfloat  s, GLfloat  t, GLfloat  r);
+  GLEE_EXTERN GLEEPFNGLMULTITEXCOORD3FPROC GLeeFuncPtr_glMultiTexCoord3f;
+  #define glMultiTexCoord3f GLeeFuncPtr_glMultiTexCoord3f
+#endif
+#ifndef GLEE_H_DEFINED_glMultiTexCoord3fv
+#define GLEE_H_DEFINED_glMultiTexCoord3fv
+  typedef void (APIENTRYP GLEEPFNGLMULTITEXCOORD3FVPROC) (GLenum  target, const GLfloat * v);
+  GLEE_EXTERN GLEEPFNGLMULTITEXCOORD3FVPROC GLeeFuncPtr_glMultiTexCoord3fv;
+  #define glMultiTexCoord3fv GLeeFuncPtr_glMultiTexCoord3fv
+#endif
+#ifndef GLEE_H_DEFINED_glMultiTexCoord3i
+#define GLEE_H_DEFINED_glMultiTexCoord3i
+  typedef void (APIENTRYP GLEEPFNGLMULTITEXCOORD3IPROC) (GLenum  target, GLint  s, GLint  t, GLint  r);
+  GLEE_EXTERN GLEEPFNGLMULTITEXCOORD3IPROC GLeeFuncPtr_glMultiTexCoord3i;
+  #define glMultiTexCoord3i GLeeFuncPtr_glMultiTexCoord3i
+#endif
+#ifndef GLEE_H_DEFINED_glMultiTexCoord3iv
+#define GLEE_H_DEFINED_glMultiTexCoord3iv
+  typedef void (APIENTRYP GLEEPFNGLMULTITEXCOORD3IVPROC) (GLenum  target, const GLint * v);
+  GLEE_EXTERN GLEEPFNGLMULTITEXCOORD3IVPROC GLeeFuncPtr_glMultiTexCoord3iv;
+  #define glMultiTexCoord3iv GLeeFuncPtr_glMultiTexCoord3iv
+#endif
+#ifndef GLEE_H_DEFINED_glMultiTexCoord3s
+#define GLEE_H_DEFINED_glMultiTexCoord3s
+  typedef void (APIENTRYP GLEEPFNGLMULTITEXCOORD3SPROC) (GLenum  target, GLshort  s, GLshort  t, GLshort  r);
+  GLEE_EXTERN GLEEPFNGLMULTITEXCOORD3SPROC GLeeFuncPtr_glMultiTexCoord3s;
+  #define glMultiTexCoord3s GLeeFuncPtr_glMultiTexCoord3s
+#endif
+#ifndef GLEE_H_DEFINED_glMultiTexCoord3sv
+#define GLEE_H_DEFINED_glMultiTexCoord3sv
+  typedef void (APIENTRYP GLEEPFNGLMULTITEXCOORD3SVPROC) (GLenum  target, const GLshort * v);
+  GLEE_EXTERN GLEEPFNGLMULTITEXCOORD3SVPROC GLeeFuncPtr_glMultiTexCoord3sv;
+  #define glMultiTexCoord3sv GLeeFuncPtr_glMultiTexCoord3sv
+#endif
+#ifndef GLEE_H_DEFINED_glMultiTexCoord4d
+#define GLEE_H_DEFINED_glMultiTexCoord4d
+  typedef void (APIENTRYP GLEEPFNGLMULTITEXCOORD4DPROC) (GLenum  target, GLdouble  s, GLdouble  t, GLdouble  r, GLdouble  q);
+  GLEE_EXTERN GLEEPFNGLMULTITEXCOORD4DPROC GLeeFuncPtr_glMultiTexCoord4d;
+  #define glMultiTexCoord4d GLeeFuncPtr_glMultiTexCoord4d
+#endif
+#ifndef GLEE_H_DEFINED_glMultiTexCoord4dv
+#define GLEE_H_DEFINED_glMultiTexCoord4dv
+  typedef void (APIENTRYP GLEEPFNGLMULTITEXCOORD4DVPROC) (GLenum  target, const GLdouble * v);
+  GLEE_EXTERN GLEEPFNGLMULTITEXCOORD4DVPROC GLeeFuncPtr_glMultiTexCoord4dv;
+  #define glMultiTexCoord4dv GLeeFuncPtr_glMultiTexCoord4dv
+#endif
+#ifndef GLEE_H_DEFINED_glMultiTexCoord4f
+#define GLEE_H_DEFINED_glMultiTexCoord4f
+  typedef void (APIENTRYP GLEEPFNGLMULTITEXCOORD4FPROC) (GLenum  target, GLfloat  s, GLfloat  t, GLfloat  r, GLfloat  q);
+  GLEE_EXTERN GLEEPFNGLMULTITEXCOORD4FPROC GLeeFuncPtr_glMultiTexCoord4f;
+  #define glMultiTexCoord4f GLeeFuncPtr_glMultiTexCoord4f
+#endif
+#ifndef GLEE_H_DEFINED_glMultiTexCoord4fv
+#define GLEE_H_DEFINED_glMultiTexCoord4fv
+  typedef void (APIENTRYP GLEEPFNGLMULTITEXCOORD4FVPROC) (GLenum  target, const GLfloat * v);
+  GLEE_EXTERN GLEEPFNGLMULTITEXCOORD4FVPROC GLeeFuncPtr_glMultiTexCoord4fv;
+  #define glMultiTexCoord4fv GLeeFuncPtr_glMultiTexCoord4fv
+#endif
+#ifndef GLEE_H_DEFINED_glMultiTexCoord4i
+#define GLEE_H_DEFINED_glMultiTexCoord4i
+  typedef void (APIENTRYP GLEEPFNGLMULTITEXCOORD4IPROC) (GLenum  target, GLint  s, GLint  t, GLint  r, GLint  q);
+  GLEE_EXTERN GLEEPFNGLMULTITEXCOORD4IPROC GLeeFuncPtr_glMultiTexCoord4i;
+  #define glMultiTexCoord4i GLeeFuncPtr_glMultiTexCoord4i
+#endif
+#ifndef GLEE_H_DEFINED_glMultiTexCoord4iv
+#define GLEE_H_DEFINED_glMultiTexCoord4iv
+  typedef void (APIENTRYP GLEEPFNGLMULTITEXCOORD4IVPROC) (GLenum  target, const GLint * v);
+  GLEE_EXTERN GLEEPFNGLMULTITEXCOORD4IVPROC GLeeFuncPtr_glMultiTexCoord4iv;
+  #define glMultiTexCoord4iv GLeeFuncPtr_glMultiTexCoord4iv
+#endif
+#ifndef GLEE_H_DEFINED_glMultiTexCoord4s
+#define GLEE_H_DEFINED_glMultiTexCoord4s
+  typedef void (APIENTRYP GLEEPFNGLMULTITEXCOORD4SPROC) (GLenum  target, GLshort  s, GLshort  t, GLshort  r, GLshort  q);
+  GLEE_EXTERN GLEEPFNGLMULTITEXCOORD4SPROC GLeeFuncPtr_glMultiTexCoord4s;
+  #define glMultiTexCoord4s GLeeFuncPtr_glMultiTexCoord4s
+#endif
+#ifndef GLEE_H_DEFINED_glMultiTexCoord4sv
+#define GLEE_H_DEFINED_glMultiTexCoord4sv
+  typedef void (APIENTRYP GLEEPFNGLMULTITEXCOORD4SVPROC) (GLenum  target, const GLshort * v);
+  GLEE_EXTERN GLEEPFNGLMULTITEXCOORD4SVPROC GLeeFuncPtr_glMultiTexCoord4sv;
+  #define glMultiTexCoord4sv GLeeFuncPtr_glMultiTexCoord4sv
+#endif
+#ifndef GLEE_H_DEFINED_glLoadTransposeMatrixf
+#define GLEE_H_DEFINED_glLoadTransposeMatrixf
+  typedef void (APIENTRYP GLEEPFNGLLOADTRANSPOSEMATRIXFPROC) (const GLfloat * m);
+  GLEE_EXTERN GLEEPFNGLLOADTRANSPOSEMATRIXFPROC GLeeFuncPtr_glLoadTransposeMatrixf;
+  #define glLoadTransposeMatrixf GLeeFuncPtr_glLoadTransposeMatrixf
+#endif
+#ifndef GLEE_H_DEFINED_glLoadTransposeMatrixd
+#define GLEE_H_DEFINED_glLoadTransposeMatrixd
+  typedef void (APIENTRYP GLEEPFNGLLOADTRANSPOSEMATRIXDPROC) (const GLdouble * m);
+  GLEE_EXTERN GLEEPFNGLLOADTRANSPOSEMATRIXDPROC GLeeFuncPtr_glLoadTransposeMatrixd;
+  #define glLoadTransposeMatrixd GLeeFuncPtr_glLoadTransposeMatrixd
+#endif
+#ifndef GLEE_H_DEFINED_glMultTransposeMatrixf
+#define GLEE_H_DEFINED_glMultTransposeMatrixf
+  typedef void (APIENTRYP GLEEPFNGLMULTTRANSPOSEMATRIXFPROC) (const GLfloat * m);
+  GLEE_EXTERN GLEEPFNGLMULTTRANSPOSEMATRIXFPROC GLeeFuncPtr_glMultTransposeMatrixf;
+  #define glMultTransposeMatrixf GLeeFuncPtr_glMultTransposeMatrixf
+#endif
+#ifndef GLEE_H_DEFINED_glMultTransposeMatrixd
+#define GLEE_H_DEFINED_glMultTransposeMatrixd
+  typedef void (APIENTRYP GLEEPFNGLMULTTRANSPOSEMATRIXDPROC) (const GLdouble * m);
+  GLEE_EXTERN GLEEPFNGLMULTTRANSPOSEMATRIXDPROC GLeeFuncPtr_glMultTransposeMatrixd;
+  #define glMultTransposeMatrixd GLeeFuncPtr_glMultTransposeMatrixd
+#endif
+#endif 
+
+/* GL_VERSION_1_4 */
+
+#ifndef GL_VERSION_1_4
+#define GL_VERSION_1_4 1
+#define __GLEE_GL_VERSION_1_4 1
+/* Constants */
+#define GL_BLEND_DST_RGB                                   0x80C8
+#define GL_BLEND_SRC_RGB                                   0x80C9
+#define GL_BLEND_DST_ALPHA                                 0x80CA
+#define GL_BLEND_SRC_ALPHA                                 0x80CB
+#define GL_POINT_FADE_THRESHOLD_SIZE                       0x8128
+#define GL_DEPTH_COMPONENT16                               0x81A5
+#define GL_DEPTH_COMPONENT24                               0x81A6
+#define GL_DEPTH_COMPONENT32                               0x81A7
+#define GL_MIRRORED_REPEAT                                 0x8370
+#define GL_MAX_TEXTURE_LOD_BIAS                            0x84FD
+#define GL_TEXTURE_LOD_BIAS                                0x8501
+#define GL_INCR_WRAP                                       0x8507
+#define GL_DECR_WRAP                                       0x8508
+#define GL_TEXTURE_DEPTH_SIZE                              0x884A
+#define GL_TEXTURE_COMPARE_MODE                            0x884C
+#define GL_TEXTURE_COMPARE_FUNC                            0x884D
+#define GL_POINT_SIZE_MIN                                  0x8126
+#define GL_POINT_SIZE_MAX                                  0x8127
+#define GL_POINT_DISTANCE_ATTENUATION                      0x8129
+#define GL_GENERATE_MIPMAP                                 0x8191
+#define GL_GENERATE_MIPMAP_HINT                            0x8192
+#define GL_FOG_COORDINATE_SOURCE                           0x8450
+#define GL_FOG_COORDINATE                                  0x8451
+#define GL_FRAGMENT_DEPTH                                  0x8452
+#define GL_CURRENT_FOG_COORDINATE                          0x8453
+#define GL_FOG_COORDINATE_ARRAY_TYPE                       0x8454
+#define GL_FOG_COORDINATE_ARRAY_STRIDE                     0x8455
+#define GL_FOG_COORDINATE_ARRAY_POINTER                    0x8456
+#define GL_FOG_COORDINATE_ARRAY                            0x8457
+#define GL_COLOR_SUM                                       0x8458
+#define GL_CURRENT_SECONDARY_COLOR                         0x8459
+#define GL_SECONDARY_COLOR_ARRAY_SIZE                      0x845A
+#define GL_SECONDARY_COLOR_ARRAY_TYPE                      0x845B
+#define GL_SECONDARY_COLOR_ARRAY_STRIDE                    0x845C
+#define GL_SECONDARY_COLOR_ARRAY_POINTER                   0x845D
+#define GL_SECONDARY_COLOR_ARRAY                           0x845E
+#define GL_TEXTURE_FILTER_CONTROL                          0x8500
+#define GL_DEPTH_TEXTURE_MODE                              0x884B
+#define GL_COMPARE_R_TO_TEXTURE                            0x884E
+#ifndef GLEE_H_DEFINED_glBlendFuncSeparate
+#define GLEE_H_DEFINED_glBlendFuncSeparate
+  typedef void (APIENTRYP GLEEPFNGLBLENDFUNCSEPARATEPROC) (GLenum  sfactorRGB, GLenum  dfactorRGB, GLenum  sfactorAlpha, GLenum  dfactorAlpha);
+  GLEE_EXTERN GLEEPFNGLBLENDFUNCSEPARATEPROC GLeeFuncPtr_glBlendFuncSeparate;
+  #define glBlendFuncSeparate GLeeFuncPtr_glBlendFuncSeparate
+#endif
+#ifndef GLEE_H_DEFINED_glMultiDrawArrays
+#define GLEE_H_DEFINED_glMultiDrawArrays
+  typedef void (APIENTRYP GLEEPFNGLMULTIDRAWARRAYSPROC) (GLenum  mode, const GLint * first, const GLsizei * count, GLsizei  primcount);
+  GLEE_EXTERN GLEEPFNGLMULTIDRAWARRAYSPROC GLeeFuncPtr_glMultiDrawArrays;
+  #define glMultiDrawArrays GLeeFuncPtr_glMultiDrawArrays
+#endif
+#ifndef GLEE_H_DEFINED_glMultiDrawElements
+#define GLEE_H_DEFINED_glMultiDrawElements
+  typedef void (APIENTRYP GLEEPFNGLMULTIDRAWELEMENTSPROC) (GLenum  mode, const GLsizei * count, GLenum  type, const GLvoid* * indices, GLsizei  primcount);
+  GLEE_EXTERN GLEEPFNGLMULTIDRAWELEMENTSPROC GLeeFuncPtr_glMultiDrawElements;
+  #define glMultiDrawElements GLeeFuncPtr_glMultiDrawElements
+#endif
+#ifndef GLEE_H_DEFINED_glPointParameterf
+#define GLEE_H_DEFINED_glPointParameterf
+  typedef void (APIENTRYP GLEEPFNGLPOINTPARAMETERFPROC) (GLenum  pname, GLfloat  param);
+  GLEE_EXTERN GLEEPFNGLPOINTPARAMETERFPROC GLeeFuncPtr_glPointParameterf;
+  #define glPointParameterf GLeeFuncPtr_glPointParameterf
+#endif
+#ifndef GLEE_H_DEFINED_glPointParameterfv
+#define GLEE_H_DEFINED_glPointParameterfv
+  typedef void (APIENTRYP GLEEPFNGLPOINTPARAMETERFVPROC) (GLenum  pname, const GLfloat * params);
+  GLEE_EXTERN GLEEPFNGLPOINTPARAMETERFVPROC GLeeFuncPtr_glPointParameterfv;
+  #define glPointParameterfv GLeeFuncPtr_glPointParameterfv
+#endif
+#ifndef GLEE_H_DEFINED_glPointParameteri
+#define GLEE_H_DEFINED_glPointParameteri
+  typedef void (APIENTRYP GLEEPFNGLPOINTPARAMETERIPROC) (GLenum  pname, GLint  param);
+  GLEE_EXTERN GLEEPFNGLPOINTPARAMETERIPROC GLeeFuncPtr_glPointParameteri;
+  #define glPointParameteri GLeeFuncPtr_glPointParameteri
+#endif
+#ifndef GLEE_H_DEFINED_glPointParameteriv
+#define GLEE_H_DEFINED_glPointParameteriv
+  typedef void (APIENTRYP GLEEPFNGLPOINTPARAMETERIVPROC) (GLenum  pname, const GLint * params);
+  GLEE_EXTERN GLEEPFNGLPOINTPARAMETERIVPROC GLeeFuncPtr_glPointParameteriv;
+  #define glPointParameteriv GLeeFuncPtr_glPointParameteriv
+#endif
+#ifndef GLEE_H_DEFINED_glFogCoordf
+#define GLEE_H_DEFINED_glFogCoordf
+  typedef void (APIENTRYP GLEEPFNGLFOGCOORDFPROC) (GLfloat  coord);
+  GLEE_EXTERN GLEEPFNGLFOGCOORDFPROC GLeeFuncPtr_glFogCoordf;
+  #define glFogCoordf GLeeFuncPtr_glFogCoordf
+#endif
+#ifndef GLEE_H_DEFINED_glFogCoordfv
+#define GLEE_H_DEFINED_glFogCoordfv
+  typedef void (APIENTRYP GLEEPFNGLFOGCOORDFVPROC) (const GLfloat * coord);
+  GLEE_EXTERN GLEEPFNGLFOGCOORDFVPROC GLeeFuncPtr_glFogCoordfv;
+  #define glFogCoordfv GLeeFuncPtr_glFogCoordfv
+#endif
+#ifndef GLEE_H_DEFINED_glFogCoordd
+#define GLEE_H_DEFINED_glFogCoordd
+  typedef void (APIENTRYP GLEEPFNGLFOGCOORDDPROC) (GLdouble  coord);
+  GLEE_EXTERN GLEEPFNGLFOGCOORDDPROC GLeeFuncPtr_glFogCoordd;
+  #define glFogCoordd GLeeFuncPtr_glFogCoordd
+#endif
+#ifndef GLEE_H_DEFINED_glFogCoorddv
+#define GLEE_H_DEFINED_glFogCoorddv
+  typedef void (APIENTRYP GLEEPFNGLFOGCOORDDVPROC) (const GLdouble * coord);
+  GLEE_EXTERN GLEEPFNGLFOGCOORDDVPROC GLeeFuncPtr_glFogCoorddv;
+  #define glFogCoorddv GLeeFuncPtr_glFogCoorddv
+#endif
+#ifndef GLEE_H_DEFINED_glFogCoordPointer
+#define GLEE_H_DEFINED_glFogCoordPointer
+  typedef void (APIENTRYP GLEEPFNGLFOGCOORDPOINTERPROC) (GLenum  type, GLsizei  stride, const GLvoid * pointer);
+  GLEE_EXTERN GLEEPFNGLFOGCOORDPOINTERPROC GLeeFuncPtr_glFogCoordPointer;
+  #define glFogCoordPointer GLeeFuncPtr_glFogCoordPointer
+#endif
+#ifndef GLEE_H_DEFINED_glSecondaryColor3b
+#define GLEE_H_DEFINED_glSecondaryColor3b
+  typedef void (APIENTRYP GLEEPFNGLSECONDARYCOLOR3BPROC) (GLbyte  red, GLbyte  green, GLbyte  blue);
+  GLEE_EXTERN GLEEPFNGLSECONDARYCOLOR3BPROC GLeeFuncPtr_glSecondaryColor3b;
+  #define glSecondaryColor3b GLeeFuncPtr_glSecondaryColor3b
+#endif
+#ifndef GLEE_H_DEFINED_glSecondaryColor3bv
+#define GLEE_H_DEFINED_glSecondaryColor3bv
+  typedef void (APIENTRYP GLEEPFNGLSECONDARYCOLOR3BVPROC) (const GLbyte * v);
+  GLEE_EXTERN GLEEPFNGLSECONDARYCOLOR3BVPROC GLeeFuncPtr_glSecondaryColor3bv;
+  #define glSecondaryColor3bv GLeeFuncPtr_glSecondaryColor3bv
+#endif
+#ifndef GLEE_H_DEFINED_glSecondaryColor3d
+#define GLEE_H_DEFINED_glSecondaryColor3d
+  typedef void (APIENTRYP GLEEPFNGLSECONDARYCOLOR3DPROC) (GLdouble  red, GLdouble  green, GLdouble  blue);
+  GLEE_EXTERN GLEEPFNGLSECONDARYCOLOR3DPROC GLeeFuncPtr_glSecondaryColor3d;
+  #define glSecondaryColor3d GLeeFuncPtr_glSecondaryColor3d
+#endif
+#ifndef GLEE_H_DEFINED_glSecondaryColor3dv
+#define GLEE_H_DEFINED_glSecondaryColor3dv
+  typedef void (APIENTRYP GLEEPFNGLSECONDARYCOLOR3DVPROC) (const GLdouble * v);
+  GLEE_EXTERN GLEEPFNGLSECONDARYCOLOR3DVPROC GLeeFuncPtr_glSecondaryColor3dv;
+  #define glSecondaryColor3dv GLeeFuncPtr_glSecondaryColor3dv
+#endif
+#ifndef GLEE_H_DEFINED_glSecondaryColor3f
+#define GLEE_H_DEFINED_glSecondaryColor3f
+  typedef void (APIENTRYP GLEEPFNGLSECONDARYCOLOR3FPROC) (GLfloat  red, GLfloat  green, GLfloat  blue);
+  GLEE_EXTERN GLEEPFNGLSECONDARYCOLOR3FPROC GLeeFuncPtr_glSecondaryColor3f;
+  #define glSecondaryColor3f GLeeFuncPtr_glSecondaryColor3f
+#endif
+#ifndef GLEE_H_DEFINED_glSecondaryColor3fv
+#define GLEE_H_DEFINED_glSecondaryColor3fv
+  typedef void (APIENTRYP GLEEPFNGLSECONDARYCOLOR3FVPROC) (const GLfloat * v);
+  GLEE_EXTERN GLEEPFNGLSECONDARYCOLOR3FVPROC GLeeFuncPtr_glSecondaryColor3fv;
+  #define glSecondaryColor3fv GLeeFuncPtr_glSecondaryColor3fv
+#endif
+#ifndef GLEE_H_DEFINED_glSecondaryColor3i
+#define GLEE_H_DEFINED_glSecondaryColor3i
+  typedef void (APIENTRYP GLEEPFNGLSECONDARYCOLOR3IPROC) (GLint  red, GLint  green, GLint  blue);
+  GLEE_EXTERN GLEEPFNGLSECONDARYCOLOR3IPROC GLeeFuncPtr_glSecondaryColor3i;
+  #define glSecondaryColor3i GLeeFuncPtr_glSecondaryColor3i
+#endif
+#ifndef GLEE_H_DEFINED_glSecondaryColor3iv
+#define GLEE_H_DEFINED_glSecondaryColor3iv
+  typedef void (APIENTRYP GLEEPFNGLSECONDARYCOLOR3IVPROC) (const GLint * v);
+  GLEE_EXTERN GLEEPFNGLSECONDARYCOLOR3IVPROC GLeeFuncPtr_glSecondaryColor3iv;
+  #define glSecondaryColor3iv GLeeFuncPtr_glSecondaryColor3iv
+#endif
+#ifndef GLEE_H_DEFINED_glSecondaryColor3s
+#define GLEE_H_DEFINED_glSecondaryColor3s
+  typedef void (APIENTRYP GLEEPFNGLSECONDARYCOLOR3SPROC) (GLshort  red, GLshort  green, GLshort  blue);
+  GLEE_EXTERN GLEEPFNGLSECONDARYCOLOR3SPROC GLeeFuncPtr_glSecondaryColor3s;
+  #define glSecondaryColor3s GLeeFuncPtr_glSecondaryColor3s
+#endif
+#ifndef GLEE_H_DEFINED_glSecondaryColor3sv
+#define GLEE_H_DEFINED_glSecondaryColor3sv
+  typedef void (APIENTRYP GLEEPFNGLSECONDARYCOLOR3SVPROC) (const GLshort * v);
+  GLEE_EXTERN GLEEPFNGLSECONDARYCOLOR3SVPROC GLeeFuncPtr_glSecondaryColor3sv;
+  #define glSecondaryColor3sv GLeeFuncPtr_glSecondaryColor3sv
+#endif
+#ifndef GLEE_H_DEFINED_glSecondaryColor3ub
+#define GLEE_H_DEFINED_glSecondaryColor3ub
+  typedef void (APIENTRYP GLEEPFNGLSECONDARYCOLOR3UBPROC) (GLubyte  red, GLubyte  green, GLubyte  blue);
+  GLEE_EXTERN GLEEPFNGLSECONDARYCOLOR3UBPROC GLeeFuncPtr_glSecondaryColor3ub;
+  #define glSecondaryColor3ub GLeeFuncPtr_glSecondaryColor3ub
+#endif
+#ifndef GLEE_H_DEFINED_glSecondaryColor3ubv
+#define GLEE_H_DEFINED_glSecondaryColor3ubv
+  typedef void (APIENTRYP GLEEPFNGLSECONDARYCOLOR3UBVPROC) (const GLubyte * v);
+  GLEE_EXTERN GLEEPFNGLSECONDARYCOLOR3UBVPROC GLeeFuncPtr_glSecondaryColor3ubv;
+  #define glSecondaryColor3ubv GLeeFuncPtr_glSecondaryColor3ubv
+#endif
+#ifndef GLEE_H_DEFINED_glSecondaryColor3ui
+#define GLEE_H_DEFINED_glSecondaryColor3ui
+  typedef void (APIENTRYP GLEEPFNGLSECONDARYCOLOR3UIPROC) (GLuint  red, GLuint  green, GLuint  blue);
+  GLEE_EXTERN GLEEPFNGLSECONDARYCOLOR3UIPROC GLeeFuncPtr_glSecondaryColor3ui;
+  #define glSecondaryColor3ui GLeeFuncPtr_glSecondaryColor3ui
+#endif
+#ifndef GLEE_H_DEFINED_glSecondaryColor3uiv
+#define GLEE_H_DEFINED_glSecondaryColor3uiv
+  typedef void (APIENTRYP GLEEPFNGLSECONDARYCOLOR3UIVPROC) (const GLuint * v);
+  GLEE_EXTERN GLEEPFNGLSECONDARYCOLOR3UIVPROC GLeeFuncPtr_glSecondaryColor3uiv;
+  #define glSecondaryColor3uiv GLeeFuncPtr_glSecondaryColor3uiv
+#endif
+#ifndef GLEE_H_DEFINED_glSecondaryColor3us
+#define GLEE_H_DEFINED_glSecondaryColor3us
+  typedef void (APIENTRYP GLEEPFNGLSECONDARYCOLOR3USPROC) (GLushort  red, GLushort  green, GLushort  blue);
+  GLEE_EXTERN GLEEPFNGLSECONDARYCOLOR3USPROC GLeeFuncPtr_glSecondaryColor3us;
+  #define glSecondaryColor3us GLeeFuncPtr_glSecondaryColor3us
+#endif
+#ifndef GLEE_H_DEFINED_glSecondaryColor3usv
+#define GLEE_H_DEFINED_glSecondaryColor3usv
+  typedef void (APIENTRYP GLEEPFNGLSECONDARYCOLOR3USVPROC) (const GLushort * v);
+  GLEE_EXTERN GLEEPFNGLSECONDARYCOLOR3USVPROC GLeeFuncPtr_glSecondaryColor3usv;
+  #define glSecondaryColor3usv GLeeFuncPtr_glSecondaryColor3usv
+#endif
+#ifndef GLEE_H_DEFINED_glSecondaryColorPointer
+#define GLEE_H_DEFINED_glSecondaryColorPointer
+  typedef void (APIENTRYP GLEEPFNGLSECONDARYCOLORPOINTERPROC) (GLint  size, GLenum  type, GLsizei  stride, const GLvoid * pointer);
+  GLEE_EXTERN GLEEPFNGLSECONDARYCOLORPOINTERPROC GLeeFuncPtr_glSecondaryColorPointer;
+  #define glSecondaryColorPointer GLeeFuncPtr_glSecondaryColorPointer
+#endif
+#ifndef GLEE_H_DEFINED_glWindowPos2d
+#define GLEE_H_DEFINED_glWindowPos2d
+  typedef void (APIENTRYP GLEEPFNGLWINDOWPOS2DPROC) (GLdouble  x, GLdouble  y);
+  GLEE_EXTERN GLEEPFNGLWINDOWPOS2DPROC GLeeFuncPtr_glWindowPos2d;
+  #define glWindowPos2d GLeeFuncPtr_glWindowPos2d
+#endif
+#ifndef GLEE_H_DEFINED_glWindowPos2dv
+#define GLEE_H_DEFINED_glWindowPos2dv
+  typedef void (APIENTRYP GLEEPFNGLWINDOWPOS2DVPROC) (const GLdouble * v);
+  GLEE_EXTERN GLEEPFNGLWINDOWPOS2DVPROC GLeeFuncPtr_glWindowPos2dv;
+  #define glWindowPos2dv GLeeFuncPtr_glWindowPos2dv
+#endif
+#ifndef GLEE_H_DEFINED_glWindowPos2f
+#define GLEE_H_DEFINED_glWindowPos2f
+  typedef void (APIENTRYP GLEEPFNGLWINDOWPOS2FPROC) (GLfloat  x, GLfloat  y);
+  GLEE_EXTERN GLEEPFNGLWINDOWPOS2FPROC GLeeFuncPtr_glWindowPos2f;
+  #define glWindowPos2f GLeeFuncPtr_glWindowPos2f
+#endif
+#ifndef GLEE_H_DEFINED_glWindowPos2fv
+#define GLEE_H_DEFINED_glWindowPos2fv
+  typedef void (APIENTRYP GLEEPFNGLWINDOWPOS2FVPROC) (const GLfloat * v);
+  GLEE_EXTERN GLEEPFNGLWINDOWPOS2FVPROC GLeeFuncPtr_glWindowPos2fv;
+  #define glWindowPos2fv GLeeFuncPtr_glWindowPos2fv
+#endif
+#ifndef GLEE_H_DEFINED_glWindowPos2i
+#define GLEE_H_DEFINED_glWindowPos2i
+  typedef void (APIENTRYP GLEEPFNGLWINDOWPOS2IPROC) (GLint  x, GLint  y);
+  GLEE_EXTERN GLEEPFNGLWINDOWPOS2IPROC GLeeFuncPtr_glWindowPos2i;
+  #define glWindowPos2i GLeeFuncPtr_glWindowPos2i
+#endif
+#ifndef GLEE_H_DEFINED_glWindowPos2iv
+#define GLEE_H_DEFINED_glWindowPos2iv
+  typedef void (APIENTRYP GLEEPFNGLWINDOWPOS2IVPROC) (const GLint * v);
+  GLEE_EXTERN GLEEPFNGLWINDOWPOS2IVPROC GLeeFuncPtr_glWindowPos2iv;
+  #define glWindowPos2iv GLeeFuncPtr_glWindowPos2iv
+#endif
+#ifndef GLEE_H_DEFINED_glWindowPos2s
+#define GLEE_H_DEFINED_glWindowPos2s
+  typedef void (APIENTRYP GLEEPFNGLWINDOWPOS2SPROC) (GLshort  x, GLshort  y);
+  GLEE_EXTERN GLEEPFNGLWINDOWPOS2SPROC GLeeFuncPtr_glWindowPos2s;
+  #define glWindowPos2s GLeeFuncPtr_glWindowPos2s
+#endif
+#ifndef GLEE_H_DEFINED_glWindowPos2sv
+#define GLEE_H_DEFINED_glWindowPos2sv
+  typedef void (APIENTRYP GLEEPFNGLWINDOWPOS2SVPROC) (const GLshort * v);
+  GLEE_EXTERN GLEEPFNGLWINDOWPOS2SVPROC GLeeFuncPtr_glWindowPos2sv;
+  #define glWindowPos2sv GLeeFuncPtr_glWindowPos2sv
+#endif
+#ifndef GLEE_H_DEFINED_glWindowPos3d
+#define GLEE_H_DEFINED_glWindowPos3d
+  typedef void (APIENTRYP GLEEPFNGLWINDOWPOS3DPROC) (GLdouble  x, GLdouble  y, GLdouble  z);
+  GLEE_EXTERN GLEEPFNGLWINDOWPOS3DPROC GLeeFuncPtr_glWindowPos3d;
+  #define glWindowPos3d GLeeFuncPtr_glWindowPos3d
+#endif
+#ifndef GLEE_H_DEFINED_glWindowPos3dv
+#define GLEE_H_DEFINED_glWindowPos3dv
+  typedef void (APIENTRYP GLEEPFNGLWINDOWPOS3DVPROC) (const GLdouble * v);
+  GLEE_EXTERN GLEEPFNGLWINDOWPOS3DVPROC GLeeFuncPtr_glWindowPos3dv;
+  #define glWindowPos3dv GLeeFuncPtr_glWindowPos3dv
+#endif
+#ifndef GLEE_H_DEFINED_glWindowPos3f
+#define GLEE_H_DEFINED_glWindowPos3f
+  typedef void (APIENTRYP GLEEPFNGLWINDOWPOS3FPROC) (GLfloat  x, GLfloat  y, GLfloat  z);
+  GLEE_EXTERN GLEEPFNGLWINDOWPOS3FPROC GLeeFuncPtr_glWindowPos3f;
+  #define glWindowPos3f GLeeFuncPtr_glWindowPos3f
+#endif
+#ifndef GLEE_H_DEFINED_glWindowPos3fv
+#define GLEE_H_DEFINED_glWindowPos3fv
+  typedef void (APIENTRYP GLEEPFNGLWINDOWPOS3FVPROC) (const GLfloat * v);
+  GLEE_EXTERN GLEEPFNGLWINDOWPOS3FVPROC GLeeFuncPtr_glWindowPos3fv;
+  #define glWindowPos3fv GLeeFuncPtr_glWindowPos3fv
+#endif
+#ifndef GLEE_H_DEFINED_glWindowPos3i
+#define GLEE_H_DEFINED_glWindowPos3i
+  typedef void (APIENTRYP GLEEPFNGLWINDOWPOS3IPROC) (GLint  x, GLint  y, GLint  z);
+  GLEE_EXTERN GLEEPFNGLWINDOWPOS3IPROC GLeeFuncPtr_glWindowPos3i;
+  #define glWindowPos3i GLeeFuncPtr_glWindowPos3i
+#endif
+#ifndef GLEE_H_DEFINED_glWindowPos3iv
+#define GLEE_H_DEFINED_glWindowPos3iv
+  typedef void (APIENTRYP GLEEPFNGLWINDOWPOS3IVPROC) (const GLint * v);
+  GLEE_EXTERN GLEEPFNGLWINDOWPOS3IVPROC GLeeFuncPtr_glWindowPos3iv;
+  #define glWindowPos3iv GLeeFuncPtr_glWindowPos3iv
+#endif
+#ifndef GLEE_H_DEFINED_glWindowPos3s
+#define GLEE_H_DEFINED_glWindowPos3s
+  typedef void (APIENTRYP GLEEPFNGLWINDOWPOS3SPROC) (GLshort  x, GLshort  y, GLshort  z);
+  GLEE_EXTERN GLEEPFNGLWINDOWPOS3SPROC GLeeFuncPtr_glWindowPos3s;
+  #define glWindowPos3s GLeeFuncPtr_glWindowPos3s
+#endif
+#ifndef GLEE_H_DEFINED_glWindowPos3sv
+#define GLEE_H_DEFINED_glWindowPos3sv
+  typedef void (APIENTRYP GLEEPFNGLWINDOWPOS3SVPROC) (const GLshort * v);
+  GLEE_EXTERN GLEEPFNGLWINDOWPOS3SVPROC GLeeFuncPtr_glWindowPos3sv;
+  #define glWindowPos3sv GLeeFuncPtr_glWindowPos3sv
+#endif
+#endif 
+
+/* GL_VERSION_1_5 */
+
+#ifndef GL_VERSION_1_5
+#define GL_VERSION_1_5 1
+#define __GLEE_GL_VERSION_1_5 1
+/* Constants */
+#define GL_BUFFER_SIZE                                     0x8764
+#define GL_BUFFER_USAGE                                    0x8765
+#define GL_QUERY_COUNTER_BITS                              0x8864
+#define GL_CURRENT_QUERY                                   0x8865
+#define GL_QUERY_RESULT                                    0x8866
+#define GL_QUERY_RESULT_AVAILABLE                          0x8867
+#define GL_ARRAY_BUFFER                                    0x8892
+#define GL_ELEMENT_ARRAY_BUFFER                            0x8893
+#define GL_ARRAY_BUFFER_BINDING                            0x8894
+#define GL_ELEMENT_ARRAY_BUFFER_BINDING                    0x8895
+#define GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING              0x889F
+#define GL_READ_ONLY                                       0x88B8
+#define GL_WRITE_ONLY                                      0x88B9
+#define GL_READ_WRITE                                      0x88BA
+#define GL_BUFFER_ACCESS                                   0x88BB
+#define GL_BUFFER_MAPPED                                   0x88BC
+#define GL_BUFFER_MAP_POINTER                              0x88BD
+#define GL_STREAM_DRAW                                     0x88E0
+#define GL_STREAM_READ                                     0x88E1
+#define GL_STREAM_COPY                                     0x88E2
+#define GL_STATIC_DRAW                                     0x88E4
+#define GL_STATIC_READ                                     0x88E5
+#define GL_STATIC_COPY                                     0x88E6
+#define GL_DYNAMIC_DRAW                                    0x88E8
+#define GL_DYNAMIC_READ                                    0x88E9
+#define GL_DYNAMIC_COPY                                    0x88EA
+#define GL_SAMPLES_PASSED                                  0x8914
+#define GL_VERTEX_ARRAY_BUFFER_BINDING                     0x8896
+#define GL_NORMAL_ARRAY_BUFFER_BINDING                     0x8897
+#define GL_COLOR_ARRAY_BUFFER_BINDING                      0x8898
+#define GL_INDEX_ARRAY_BUFFER_BINDING                      0x8899
+#define GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING              0x889A
+#define GL_EDGE_FLAG_ARRAY_BUFFER_BINDING                  0x889B
+#define GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING            0x889C
+#define GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING             0x889D
+#define GL_WEIGHT_ARRAY_BUFFER_BINDING                     0x889E
+#define GL_FOG_COORD_SRC                                   0x8450
+#define GL_FOG_COORD                                       0x8451
+#define GL_CURRENT_FOG_COORD                               0x8453
+#define GL_FOG_COORD_ARRAY_TYPE                            0x8454
+#define GL_FOG_COORD_ARRAY_STRIDE                          0x8455
+#define GL_FOG_COORD_ARRAY_POINTER                         0x8456
+#define GL_FOG_COORD_ARRAY                                 0x8457
+#define GL_FOG_COORD_ARRAY_BUFFER_BINDING                  0x889D
+#define GL_SRC0_RGB                                        0x8580
+#define GL_SRC1_RGB                                        0x8581
+#define GL_SRC2_RGB                                        0x8582
+#define GL_SRC0_ALPHA                                      0x8588
+#define GL_SRC1_ALPHA                                      0x8589
+#define GL_SRC2_ALPHA                                      0x858A
+#ifndef GLEE_H_DEFINED_glGenQueries
+#define GLEE_H_DEFINED_glGenQueries
+  typedef void (APIENTRYP GLEEPFNGLGENQUERIESPROC) (GLsizei  n, GLuint * ids);
+  GLEE_EXTERN GLEEPFNGLGENQUERIESPROC GLeeFuncPtr_glGenQueries;
+  #define glGenQueries GLeeFuncPtr_glGenQueries
+#endif
+#ifndef GLEE_H_DEFINED_glDeleteQueries
+#define GLEE_H_DEFINED_glDeleteQueries
+  typedef void (APIENTRYP GLEEPFNGLDELETEQUERIESPROC) (GLsizei  n, const GLuint * ids);
+  GLEE_EXTERN GLEEPFNGLDELETEQUERIESPROC GLeeFuncPtr_glDeleteQueries;
+  #define glDeleteQueries GLeeFuncPtr_glDeleteQueries
+#endif
+#ifndef GLEE_H_DEFINED_glIsQuery
+#define GLEE_H_DEFINED_glIsQuery
+  typedef GLboolean (APIENTRYP GLEEPFNGLISQUERYPROC) (GLuint  id);
+  GLEE_EXTERN GLEEPFNGLISQUERYPROC GLeeFuncPtr_glIsQuery;
+  #define glIsQuery GLeeFuncPtr_glIsQuery
+#endif
+#ifndef GLEE_H_DEFINED_glBeginQuery
+#define GLEE_H_DEFINED_glBeginQuery
+  typedef void (APIENTRYP GLEEPFNGLBEGINQUERYPROC) (GLenum  target, GLuint  id);
+  GLEE_EXTERN GLEEPFNGLBEGINQUERYPROC GLeeFuncPtr_glBeginQuery;
+  #define glBeginQuery GLeeFuncPtr_glBeginQuery
+#endif
+#ifndef GLEE_H_DEFINED_glEndQuery
+#define GLEE_H_DEFINED_glEndQuery
+  typedef void (APIENTRYP GLEEPFNGLENDQUERYPROC) (GLenum  target);
+  GLEE_EXTERN GLEEPFNGLENDQUERYPROC GLeeFuncPtr_glEndQuery;
+  #define glEndQuery GLeeFuncPtr_glEndQuery
+#endif
+#ifndef GLEE_H_DEFINED_glGetQueryiv
+#define GLEE_H_DEFINED_glGetQueryiv
+  typedef void (APIENTRYP GLEEPFNGLGETQUERYIVPROC) (GLenum  target, GLenum  pname, GLint * params);
+  GLEE_EXTERN GLEEPFNGLGETQUERYIVPROC GLeeFuncPtr_glGetQueryiv;
+  #define glGetQueryiv GLeeFuncPtr_glGetQueryiv
+#endif
+#ifndef GLEE_H_DEFINED_glGetQueryObjectiv
+#define GLEE_H_DEFINED_glGetQueryObjectiv
+  typedef void (APIENTRYP GLEEPFNGLGETQUERYOBJECTIVPROC) (GLuint  id, GLenum  pname, GLint * params);
+  GLEE_EXTERN GLEEPFNGLGETQUERYOBJECTIVPROC GLeeFuncPtr_glGetQueryObjectiv;
+  #define glGetQueryObjectiv GLeeFuncPtr_glGetQueryObjectiv
+#endif
+#ifndef GLEE_H_DEFINED_glGetQueryObjectuiv
+#define GLEE_H_DEFINED_glGetQueryObjectuiv
+  typedef void (APIENTRYP GLEEPFNGLGETQUERYOBJECTUIVPROC) (GLuint  id, GLenum  pname, GLuint * params);
+  GLEE_EXTERN GLEEPFNGLGETQUERYOBJECTUIVPROC GLeeFuncPtr_glGetQueryObjectuiv;
+  #define glGetQueryObjectuiv GLeeFuncPtr_glGetQueryObjectuiv
+#endif
+#ifndef GLEE_H_DEFINED_glBindBuffer
+#define GLEE_H_DEFINED_glBindBuffer
+  typedef void (APIENTRYP GLEEPFNGLBINDBUFFERPROC) (GLenum  target, GLuint  buffer);
+  GLEE_EXTERN GLEEPFNGLBINDBUFFERPROC GLeeFuncPtr_glBindBuffer;
+  #define glBindBuffer GLeeFuncPtr_glBindBuffer
+#endif
+#ifndef GLEE_H_DEFINED_glDeleteBuffers
+#define GLEE_H_DEFINED_glDeleteBuffers
+  typedef void (APIENTRYP GLEEPFNGLDELETEBUFFERSPROC) (GLsizei  n, const GLuint * buffers);
+  GLEE_EXTERN GLEEPFNGLDELETEBUFFERSPROC GLeeFuncPtr_glDeleteBuffers;
+  #define glDeleteBuffers GLeeFuncPtr_glDeleteBuffers
+#endif
+#ifndef GLEE_H_DEFINED_glGenBuffers
+#define GLEE_H_DEFINED_glGenBuffers
+  typedef void (APIENTRYP GLEEPFNGLGENBUFFERSPROC) (GLsizei  n, GLuint * buffers);
+  GLEE_EXTERN GLEEPFNGLGENBUFFERSPROC GLeeFuncPtr_glGenBuffers;
+  #define glGenBuffers GLeeFuncPtr_glGenBuffers
+#endif
+#ifndef GLEE_H_DEFINED_glIsBuffer
+#define GLEE_H_DEFINED_glIsBuffer
+  typedef GLboolean (APIENTRYP GLEEPFNGLISBUFFERPROC) (GLuint  buffer);
+  GLEE_EXTERN GLEEPFNGLISBUFFERPROC GLeeFuncPtr_glIsBuffer;
+  #define glIsBuffer GLeeFuncPtr_glIsBuffer
+#endif
+#ifndef GLEE_H_DEFINED_glBufferData
+#define GLEE_H_DEFINED_glBufferData
+  typedef void (APIENTRYP GLEEPFNGLBUFFERDATAPROC) (GLenum  target, GLsizeiptr  size, const GLvoid * data, GLenum  usage);
+  GLEE_EXTERN GLEEPFNGLBUFFERDATAPROC GLeeFuncPtr_glBufferData;
+  #define glBufferData GLeeFuncPtr_glBufferData
+#endif
+#ifndef GLEE_H_DEFINED_glBufferSubData
+#define GLEE_H_DEFINED_glBufferSubData
+  typedef void (APIENTRYP GLEEPFNGLBUFFERSUBDATAPROC) (GLenum  target, GLintptr  offset, GLsizeiptr  size, const GLvoid * data);
+  GLEE_EXTERN GLEEPFNGLBUFFERSUBDATAPROC GLeeFuncPtr_glBufferSubData;
+  #define glBufferSubData GLeeFuncPtr_glBufferSubData
+#endif
+#ifndef GLEE_H_DEFINED_glGetBufferSubData
+#define GLEE_H_DEFINED_glGetBufferSubData
+  typedef void (APIENTRYP GLEEPFNGLGETBUFFERSUBDATAPROC) (GLenum  target, GLintptr  offset, GLsizeiptr  size, GLvoid * data);
+  GLEE_EXTERN GLEEPFNGLGETBUFFERSUBDATAPROC GLeeFuncPtr_glGetBufferSubData;
+  #define glGetBufferSubData GLeeFuncPtr_glGetBufferSubData
+#endif
+#ifndef GLEE_H_DEFINED_glMapBuffer
+#define GLEE_H_DEFINED_glMapBuffer
+  typedef GLvoid* (APIENTRYP GLEEPFNGLMAPBUFFERPROC) (GLenum  target, GLenum  access);
+  GLEE_EXTERN GLEEPFNGLMAPBUFFERPROC GLeeFuncPtr_glMapBuffer;
+  #define glMapBuffer GLeeFuncPtr_glMapBuffer
+#endif
+#ifndef GLEE_H_DEFINED_glUnmapBuffer
+#define GLEE_H_DEFINED_glUnmapBuffer
+  typedef GLboolean (APIENTRYP GLEEPFNGLUNMAPBUFFERPROC) (GLenum  target);
+  GLEE_EXTERN GLEEPFNGLUNMAPBUFFERPROC GLeeFuncPtr_glUnmapBuffer;
+  #define glUnmapBuffer GLeeFuncPtr_glUnmapBuffer
+#endif
+#ifndef GLEE_H_DEFINED_glGetBufferParameteriv
+#define GLEE_H_DEFINED_glGetBufferParameteriv
+  typedef void (APIENTRYP GLEEPFNGLGETBUFFERPARAMETERIVPROC) (GLenum  target, GLenum  pname, GLint * params);
+  GLEE_EXTERN GLEEPFNGLGETBUFFERPARAMETERIVPROC GLeeFuncPtr_glGetBufferParameteriv;
+  #define glGetBufferParameteriv GLeeFuncPtr_glGetBufferParameteriv
+#endif
+#ifndef GLEE_H_DEFINED_glGetBufferPointerv
+#define GLEE_H_DEFINED_glGetBufferPointerv
+  typedef void (APIENTRYP GLEEPFNGLGETBUFFERPOINTERVPROC) (GLenum  target, GLenum  pname, GLvoid* * params);
+  GLEE_EXTERN GLEEPFNGLGETBUFFERPOINTERVPROC GLeeFuncPtr_glGetBufferPointerv;
+  #define glGetBufferPointerv GLeeFuncPtr_glGetBufferPointerv
+#endif
+#endif 
+
+/* GL_VERSION_2_0 */
+
+#ifndef GL_VERSION_2_0
+#define GL_VERSION_2_0 1
+#define __GLEE_GL_VERSION_2_0 1
+/* Constants */
+#define GL_BLEND_EQUATION_RGB                              0x8009
+#define GL_VERTEX_ATTRIB_ARRAY_ENABLED                     0x8622
+#define GL_VERTEX_ATTRIB_ARRAY_SIZE                        0x8623
+#define GL_VERTEX_ATTRIB_ARRAY_STRIDE                      0x8624
+#define GL_VERTEX_ATTRIB_ARRAY_TYPE                        0x8625
+#define GL_CURRENT_VERTEX_ATTRIB                           0x8626
+#define GL_VERTEX_PROGRAM_POINT_SIZE                       0x8642
+#define GL_VERTEX_ATTRIB_ARRAY_POINTER                     0x8645
+#define GL_STENCIL_BACK_FUNC                               0x8800
+#define GL_STENCIL_BACK_FAIL                               0x8801
+#define GL_STENCIL_BACK_PASS_DEPTH_FAIL                    0x8802
+#define GL_STENCIL_BACK_PASS_DEPTH_PASS                    0x8803
+#define GL_MAX_DRAW_BUFFERS                                0x8824
+#define GL_DRAW_BUFFER0                                    0x8825
+#define GL_DRAW_BUFFER1                                    0x8826
+#define GL_DRAW_BUFFER2                                    0x8827
+#define GL_DRAW_BUFFER3                                    0x8828
+#define GL_DRAW_BUFFER4                                    0x8829
+#define GL_DRAW_BUFFER5                                    0x882A
+#define GL_DRAW_BUFFER6                                    0x882B
+#define GL_DRAW_BUFFER7                                    0x882C
+#define GL_DRAW_BUFFER8                                    0x882D
+#define GL_DRAW_BUFFER9                                    0x882E
+#define GL_DRAW_BUFFER10                                   0x882F
+#define GL_DRAW_BUFFER11                                   0x8830
+#define GL_DRAW_BUFFER12                                   0x8831
+#define GL_DRAW_BUFFER13                                   0x8832
+#define GL_DRAW_BUFFER14                                   0x8833
+#define GL_DRAW_BUFFER15                                   0x8834
+#define GL_BLEND_EQUATION_ALPHA                            0x883D
+#define GL_MAX_VERTEX_ATTRIBS                              0x8869
+#define GL_VERTEX_ATTRIB_ARRAY_NORMALIZED                  0x886A
+#define GL_MAX_TEXTURE_IMAGE_UNITS                         0x8872
+#define GL_FRAGMENT_SHADER                                 0x8B30
+#define GL_VERTEX_SHADER                                   0x8B31
+#define GL_MAX_FRAGMENT_UNIFORM_COMPONENTS                 0x8B49
+#define GL_MAX_VERTEX_UNIFORM_COMPONENTS                   0x8B4A
+#define GL_MAX_VARYING_FLOATS                              0x8B4B
+#define GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS                  0x8B4C
+#define GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS                0x8B4D
+#define GL_SHADER_TYPE                                     0x8B4F
+#define GL_FLOAT_VEC2                                      0x8B50
+#define GL_FLOAT_VEC3                                      0x8B51
+#define GL_FLOAT_VEC4                                      0x8B52
+#define GL_INT_VEC2                                        0x8B53
+#define GL_INT_VEC3                                        0x8B54
+#define GL_INT_VEC4                                        0x8B55
+#define GL_BOOL                                            0x8B56
+#define GL_BOOL_VEC2                                       0x8B57
+#define GL_BOOL_VEC3                                       0x8B58
+#define GL_BOOL_VEC4                                       0x8B59
+#define GL_FLOAT_MAT2                                      0x8B5A
+#define GL_FLOAT_MAT3                                      0x8B5B
+#define GL_FLOAT_MAT4                                      0x8B5C
+#define GL_SAMPLER_1D                                      0x8B5D
+#define GL_SAMPLER_2D                                      0x8B5E
+#define GL_SAMPLER_3D                                      0x8B5F
+#define GL_SAMPLER_CUBE                                    0x8B60
+#define GL_SAMPLER_1D_SHADOW                               0x8B61
+#define GL_SAMPLER_2D_SHADOW                               0x8B62
+#define GL_DELETE_STATUS                                   0x8B80
+#define GL_COMPILE_STATUS                                  0x8B81
+#define GL_LINK_STATUS                                     0x8B82
+#define GL_VALIDATE_STATUS                                 0x8B83
+#define GL_INFO_LOG_LENGTH                                 0x8B84
+#define GL_ATTACHED_SHADERS                                0x8B85
+#define GL_ACTIVE_UNIFORMS                                 0x8B86
+#define GL_ACTIVE_UNIFORM_MAX_LENGTH                       0x8B87
+#define GL_SHADER_SOURCE_LENGTH                            0x8B88
+#define GL_ACTIVE_ATTRIBUTES                               0x8B89
+#define GL_ACTIVE_ATTRIBUTE_MAX_LENGTH                     0x8B8A
+#define GL_FRAGMENT_SHADER_DERIVATIVE_HINT                 0x8B8B
+#define GL_SHADING_LANGUAGE_VERSION                        0x8B8C
+#define GL_CURRENT_PROGRAM                                 0x8B8D
+#define GL_POINT_SPRITE_COORD_ORIGIN                       0x8CA0
+#define GL_LOWER_LEFT                                      0x8CA1
+#define GL_UPPER_LEFT                                      0x8CA2
+#define GL_STENCIL_BACK_REF                                0x8CA3
+#define GL_STENCIL_BACK_VALUE_MASK                         0x8CA4
+#define GL_STENCIL_BACK_WRITEMASK                          0x8CA5
+#define GL_VERTEX_PROGRAM_TWO_SIDE                         0x8643
+#define GL_POINT_SPRITE                                    0x8861
+#define GL_COORD_REPLACE                                   0x8862
+#define GL_MAX_TEXTURE_COORDS                              0x8871
+#ifndef GLEE_H_DEFINED_glBlendEquationSeparate
+#define GLEE_H_DEFINED_glBlendEquationSeparate
+  typedef void (APIENTRYP GLEEPFNGLBLENDEQUATIONSEPARATEPROC) (GLenum  modeRGB, GLenum  modeAlpha);
+  GLEE_EXTERN GLEEPFNGLBLENDEQUATIONSEPARATEPROC GLeeFuncPtr_glBlendEquationSeparate;
+  #define glBlendEquationSeparate GLeeFuncPtr_glBlendEquationSeparate
+#endif
+#ifndef GLEE_H_DEFINED_glDrawBuffers
+#define GLEE_H_DEFINED_glDrawBuffers
+  typedef void (APIENTRYP GLEEPFNGLDRAWBUFFERSPROC) (GLsizei  n, const GLenum * bufs);
+  GLEE_EXTERN GLEEPFNGLDRAWBUFFERSPROC GLeeFuncPtr_glDrawBuffers;
+  #define glDrawBuffers GLeeFuncPtr_glDrawBuffers
+#endif
+#ifndef GLEE_H_DEFINED_glStencilOpSeparate
+#define GLEE_H_DEFINED_glStencilOpSeparate
+  typedef void (APIENTRYP GLEEPFNGLSTENCILOPSEPARATEPROC) (GLenum  face, GLenum  sfail, GLenum  dpfail, GLenum  dppass);
+  GLEE_EXTERN GLEEPFNGLSTENCILOPSEPARATEPROC GLeeFuncPtr_glStencilOpSeparate;
+  #define glStencilOpSeparate GLeeFuncPtr_glStencilOpSeparate
+#endif
+#ifndef GLEE_H_DEFINED_glStencilFuncSeparate
+#define GLEE_H_DEFINED_glStencilFuncSeparate
+  typedef void (APIENTRYP GLEEPFNGLSTENCILFUNCSEPARATEPROC) (GLenum  face, GLenum  func, GLint  ref, GLuint  mask);
+  GLEE_EXTERN GLEEPFNGLSTENCILFUNCSEPARATEPROC GLeeFuncPtr_glStencilFuncSeparate;
+  #define glStencilFuncSeparate GLeeFuncPtr_glStencilFuncSeparate
+#endif
+#ifndef GLEE_H_DEFINED_glStencilMaskSeparate
+#define GLEE_H_DEFINED_glStencilMaskSeparate
+  typedef void (APIENTRYP GLEEPFNGLSTENCILMASKSEPARATEPROC) (GLenum  face, GLuint  mask);
+  GLEE_EXTERN GLEEPFNGLSTENCILMASKSEPARATEPROC GLeeFuncPtr_glStencilMaskSeparate;
+  #define glStencilMaskSeparate GLeeFuncPtr_glStencilMaskSeparate
+#endif
+#ifndef GLEE_H_DEFINED_glAttachShader
+#define GLEE_H_DEFINED_glAttachShader
+  typedef void (APIENTRYP GLEEPFNGLATTACHSHADERPROC) (GLuint  program, GLuint  shader);
+  GLEE_EXTERN GLEEPFNGLATTACHSHADERPROC GLeeFuncPtr_glAttachShader;
+  #define glAttachShader GLeeFuncPtr_glAttachShader
+#endif
+#ifndef GLEE_H_DEFINED_glBindAttribLocation
+#define GLEE_H_DEFINED_glBindAttribLocation
+  typedef void (APIENTRYP GLEEPFNGLBINDATTRIBLOCATIONPROC) (GLuint  program, GLuint  index, const GLchar * name);
+  GLEE_EXTERN GLEEPFNGLBINDATTRIBLOCATIONPROC GLeeFuncPtr_glBindAttribLocation;
+  #define glBindAttribLocation GLeeFuncPtr_glBindAttribLocation
+#endif
+#ifndef GLEE_H_DEFINED_glCompileShader
+#define GLEE_H_DEFINED_glCompileShader
+  typedef void (APIENTRYP GLEEPFNGLCOMPILESHADERPROC) (GLuint  shader);
+  GLEE_EXTERN GLEEPFNGLCOMPILESHADERPROC GLeeFuncPtr_glCompileShader;
+  #define glCompileShader GLeeFuncPtr_glCompileShader
+#endif
+#ifndef GLEE_H_DEFINED_glCreateProgram
+#define GLEE_H_DEFINED_glCreateProgram
+  typedef GLuint (APIENTRYP GLEEPFNGLCREATEPROGRAMPROC) ();
+  GLEE_EXTERN GLEEPFNGLCREATEPROGRAMPROC GLeeFuncPtr_glCreateProgram;
+  #define glCreateProgram GLeeFuncPtr_glCreateProgram
+#endif
+#ifndef GLEE_H_DEFINED_glCreateShader
+#define GLEE_H_DEFINED_glCreateShader
+  typedef GLuint (APIENTRYP GLEEPFNGLCREATESHADERPROC) (GLenum  type);
+  GLEE_EXTERN GLEEPFNGLCREATESHADERPROC GLeeFuncPtr_glCreateShader;
+  #define glCreateShader GLeeFuncPtr_glCreateShader
+#endif
+#ifndef GLEE_H_DEFINED_glDeleteProgram
+#define GLEE_H_DEFINED_glDeleteProgram
+  typedef void (APIENTRYP GLEEPFNGLDELETEPROGRAMPROC) (GLuint  program);
+  GLEE_EXTERN GLEEPFNGLDELETEPROGRAMPROC GLeeFuncPtr_glDeleteProgram;
+  #define glDeleteProgram GLeeFuncPtr_glDeleteProgram
+#endif
+#ifndef GLEE_H_DEFINED_glDeleteShader
+#define GLEE_H_DEFINED_glDeleteShader
+  typedef void (APIENTRYP GLEEPFNGLDELETESHADERPROC) (GLuint  shader);
+  GLEE_EXTERN GLEEPFNGLDELETESHADERPROC GLeeFuncPtr_glDeleteShader;
+  #define glDeleteShader GLeeFuncPtr_glDeleteShader
+#endif
+#ifndef GLEE_H_DEFINED_glDetachShader
+#define GLEE_H_DEFINED_glDetachShader
+  typedef void (APIENTRYP GLEEPFNGLDETACHSHADERPROC) (GLuint  program, GLuint  shader);
+  GLEE_EXTERN GLEEPFNGLDETACHSHADERPROC GLeeFuncPtr_glDetachShader;
+  #define glDetachShader GLeeFuncPtr_glDetachShader
+#endif
+#ifndef GLEE_H_DEFINED_glDisableVertexAttribArray
+#define GLEE_H_DEFINED_glDisableVertexAttribArray
+  typedef void (APIENTRYP GLEEPFNGLDISABLEVERTEXATTRIBARRAYPROC) (GLuint  index);
+  GLEE_EXTERN GLEEPFNGLDISABLEVERTEXATTRIBARRAYPROC GLeeFuncPtr_glDisableVertexAttribArray;
+  #define glDisableVertexAttribArray GLeeFuncPtr_glDisableVertexAttribArray
+#endif
+#ifndef GLEE_H_DEFINED_glEnableVertexAttribArray
+#define GLEE_H_DEFINED_glEnableVertexAttribArray
+  typedef void (APIENTRYP GLEEPFNGLENABLEVERTEXATTRIBARRAYPROC) (GLuint  index);
+  GLEE_EXTERN GLEEPFNGLENABLEVERTEXATTRIBARRAYPROC GLeeFuncPtr_glEnableVertexAttribArray;
+  #define glEnableVertexAttribArray GLeeFuncPtr_glEnableVertexAttribArray
+#endif
+#ifndef GLEE_H_DEFINED_glGetActiveAttrib
+#define GLEE_H_DEFINED_glGetActiveAttrib
+  typedef void (APIENTRYP GLEEPFNGLGETACTIVEATTRIBPROC) (GLuint  program, GLuint  index, GLsizei  bufSize, GLsizei * length, GLint * size, GLenum * type, GLchar * name);
+  GLEE_EXTERN GLEEPFNGLGETACTIVEATTRIBPROC GLeeFuncPtr_glGetActiveAttrib;
+  #define glGetActiveAttrib GLeeFuncPtr_glGetActiveAttrib
+#endif
+#ifndef GLEE_H_DEFINED_glGetActiveUniform
+#define GLEE_H_DEFINED_glGetActiveUniform
+  typedef void (APIENTRYP GLEEPFNGLGETACTIVEUNIFORMPROC) (GLuint  program, GLuint  index, GLsizei  bufSize, GLsizei * length, GLint * size, GLenum * type, GLchar * name);
+  GLEE_EXTERN GLEEPFNGLGETACTIVEUNIFORMPROC GLeeFuncPtr_glGetActiveUniform;
+  #define glGetActiveUniform GLeeFuncPtr_glGetActiveUniform
+#endif
+#ifndef GLEE_H_DEFINED_glGetAttachedShaders
+#define GLEE_H_DEFINED_glGetAttachedShaders
+  typedef void (APIENTRYP GLEEPFNGLGETATTACHEDSHADERSPROC) (GLuint  program, GLsizei  maxCount, GLsizei * count, GLuint * obj);
+  GLEE_EXTERN GLEEPFNGLGETATTACHEDSHADERSPROC GLeeFuncPtr_glGetAttachedShaders;
+  #define glGetAttachedShaders GLeeFuncPtr_glGetAttachedShaders
+#endif
+#ifndef GLEE_H_DEFINED_glGetAttribLocation
+#define GLEE_H_DEFINED_glGetAttribLocation
+  typedef GLint (APIENTRYP GLEEPFNGLGETATTRIBLOCATIONPROC) (GLuint  program, const GLchar * name);
+  GLEE_EXTERN GLEEPFNGLGETATTRIBLOCATIONPROC GLeeFuncPtr_glGetAttribLocation;
+  #define glGetAttribLocation GLeeFuncPtr_glGetAttribLocation
+#endif
+#ifndef GLEE_H_DEFINED_glGetProgramiv
+#define GLEE_H_DEFINED_glGetProgramiv
+  typedef void (APIENTRYP GLEEPFNGLGETPROGRAMIVPROC) (GLuint  program, GLenum  pname, GLint * params);
+  GLEE_EXTERN GLEEPFNGLGETPROGRAMIVPROC GLeeFuncPtr_glGetProgramiv;
+  #define glGetProgramiv GLeeFuncPtr_glGetProgramiv
+#endif
+#ifndef GLEE_H_DEFINED_glGetProgramInfoLog
+#define GLEE_H_DEFINED_glGetProgramInfoLog
+  typedef void (APIENTRYP GLEEPFNGLGETPROGRAMINFOLOGPROC) (GLuint  program, GLsizei  bufSize, GLsizei * length, GLchar * infoLog);
+  GLEE_EXTERN GLEEPFNGLGETPROGRAMINFOLOGPROC GLeeFuncPtr_glGetProgramInfoLog;
+  #define glGetProgramInfoLog GLeeFuncPtr_glGetProgramInfoLog
+#endif
+#ifndef GLEE_H_DEFINED_glGetShaderiv
+#define GLEE_H_DEFINED_glGetShaderiv
+  typedef void (APIENTRYP GLEEPFNGLGETSHADERIVPROC) (GLuint  shader, GLenum  pname, GLint * params);
+  GLEE_EXTERN GLEEPFNGLGETSHADERIVPROC GLeeFuncPtr_glGetShaderiv;
+  #define glGetShaderiv GLeeFuncPtr_glGetShaderiv
+#endif
+#ifndef GLEE_H_DEFINED_glGetShaderInfoLog
+#define GLEE_H_DEFINED_glGetShaderInfoLog
+  typedef void (APIENTRYP GLEEPFNGLGETSHADERINFOLOGPROC) (GLuint  shader, GLsizei  bufSize, GLsizei * length, GLchar * infoLog);
+  GLEE_EXTERN GLEEPFNGLGETSHADERINFOLOGPROC GLeeFuncPtr_glGetShaderInfoLog;
+  #define glGetShaderInfoLog GLeeFuncPtr_glGetShaderInfoLog
+#endif
+#ifndef GLEE_H_DEFINED_glGetShaderSource
+#define GLEE_H_DEFINED_glGetShaderSource
+  typedef void (APIENTRYP GLEEPFNGLGETSHADERSOURCEPROC) (GLuint  shader, GLsizei  bufSize, GLsizei * length, GLchar * source);
+  GLEE_EXTERN GLEEPFNGLGETSHADERSOURCEPROC GLeeFuncPtr_glGetShaderSource;
+  #define glGetShaderSource GLeeFuncPtr_glGetShaderSource
+#endif
+#ifndef GLEE_H_DEFINED_glGetUniformLocation
+#define GLEE_H_DEFINED_glGetUniformLocation
+  typedef GLint (APIENTRYP GLEEPFNGLGETUNIFORMLOCATIONPROC) (GLuint  program, const GLchar * name);
+  GLEE_EXTERN GLEEPFNGLGETUNIFORMLOCATIONPROC GLeeFuncPtr_glGetUniformLocation;
+  #define glGetUniformLocation GLeeFuncPtr_glGetUniformLocation
+#endif
+#ifndef GLEE_H_DEFINED_glGetUniformfv
+#define GLEE_H_DEFINED_glGetUniformfv
+  typedef void (APIENTRYP GLEEPFNGLGETUNIFORMFVPROC) (GLuint  program, GLint  location, GLfloat * params);
+  GLEE_EXTERN GLEEPFNGLGETUNIFORMFVPROC GLeeFuncPtr_glGetUniformfv;
+  #define glGetUniformfv GLeeFuncPtr_glGetUniformfv
+#endif
+#ifndef GLEE_H_DEFINED_glGetUniformiv
+#define GLEE_H_DEFINED_glGetUniformiv
+  typedef void (APIENTRYP GLEEPFNGLGETUNIFORMIVPROC) (GLuint  program, GLint  location, GLint * params);
+  GLEE_EXTERN GLEEPFNGLGETUNIFORMIVPROC GLeeFuncPtr_glGetUniformiv;
+  #define glGetUniformiv GLeeFuncPtr_glGetUniformiv
+#endif
+#ifndef GLEE_H_DEFINED_glGetVertexAttribdv
+#define GLEE_H_DEFINED_glGetVertexAttribdv
+  typedef void (APIENTRYP GLEEPFNGLGETVERTEXATTRIBDVPROC) (GLuint  index, GLenum  pname, GLdouble * params);
+  GLEE_EXTERN GLEEPFNGLGETVERTEXATTRIBDVPROC GLeeFuncPtr_glGetVertexAttribdv;
+  #define glGetVertexAttribdv GLeeFuncPtr_glGetVertexAttribdv
+#endif
+#ifndef GLEE_H_DEFINED_glGetVertexAttribfv
+#define GLEE_H_DEFINED_glGetVertexAttribfv
+  typedef void (APIENTRYP GLEEPFNGLGETVERTEXATTRIBFVPROC) (GLuint  index, GLenum  pname, GLfloat * params);
+  GLEE_EXTERN GLEEPFNGLGETVERTEXATTRIBFVPROC GLeeFuncPtr_glGetVertexAttribfv;
+  #define glGetVertexAttribfv GLeeFuncPtr_glGetVertexAttribfv
+#endif
+#ifndef GLEE_H_DEFINED_glGetVertexAttribiv
+#define GLEE_H_DEFINED_glGetVertexAttribiv
+  typedef void (APIENTRYP GLEEPFNGLGETVERTEXATTRIBIVPROC) (GLuint  index, GLenum  pname, GLint * params);
+  GLEE_EXTERN GLEEPFNGLGETVERTEXATTRIBIVPROC GLeeFuncPtr_glGetVertexAttribiv;
+  #define glGetVertexAttribiv GLeeFuncPtr_glGetVertexAttribiv
+#endif
+#ifndef GLEE_H_DEFINED_glGetVertexAttribPointerv
+#define GLEE_H_DEFINED_glGetVertexAttribPointerv
+  typedef void (APIENTRYP GLEEPFNGLGETVERTEXATTRIBPOINTERVPROC) (GLuint  index, GLenum  pname, GLvoid* * pointer);
+  GLEE_EXTERN GLEEPFNGLGETVERTEXATTRIBPOINTERVPROC GLeeFuncPtr_glGetVertexAttribPointerv;
+  #define glGetVertexAttribPointerv GLeeFuncPtr_glGetVertexAttribPointerv
+#endif
+#ifndef GLEE_H_DEFINED_glIsProgram
+#define GLEE_H_DEFINED_glIsProgram
+  typedef GLboolean (APIENTRYP GLEEPFNGLISPROGRAMPROC) (GLuint  program);
+  GLEE_EXTERN GLEEPFNGLISPROGRAMPROC GLeeFuncPtr_glIsProgram;
+  #define glIsProgram GLeeFuncPtr_glIsProgram
+#endif
+#ifndef GLEE_H_DEFINED_glIsShader
+#define GLEE_H_DEFINED_glIsShader
+  typedef GLboolean (APIENTRYP GLEEPFNGLISSHADERPROC) (GLuint  shader);
+  GLEE_EXTERN GLEEPFNGLISSHADERPROC GLeeFuncPtr_glIsShader;
+  #define glIsShader GLeeFuncPtr_glIsShader
+#endif
+#ifndef GLEE_H_DEFINED_glLinkProgram
+#define GLEE_H_DEFINED_glLinkProgram
+  typedef void (APIENTRYP GLEEPFNGLLINKPROGRAMPROC) (GLuint  program);
+  GLEE_EXTERN GLEEPFNGLLINKPROGRAMPROC GLeeFuncPtr_glLinkProgram;
+  #define glLinkProgram GLeeFuncPtr_glLinkProgram
+#endif
+#ifndef GLEE_H_DEFINED_glShaderSource
+#define GLEE_H_DEFINED_glShaderSource
+  typedef void (APIENTRYP GLEEPFNGLSHADERSOURCEPROC) (GLuint  shader, GLsizei  count, const GLchar* * string, const GLint * length);
+  GLEE_EXTERN GLEEPFNGLSHADERSOURCEPROC GLeeFuncPtr_glShaderSource;
+  #define glShaderSource GLeeFuncPtr_glShaderSource
+#endif
+#ifndef GLEE_H_DEFINED_glUseProgram
+#define GLEE_H_DEFINED_glUseProgram
+  typedef void (APIENTRYP GLEEPFNGLUSEPROGRAMPROC) (GLuint  program);
+  GLEE_EXTERN GLEEPFNGLUSEPROGRAMPROC GLeeFuncPtr_glUseProgram;
+  #define glUseProgram GLeeFuncPtr_glUseProgram
+#endif
+#ifndef GLEE_H_DEFINED_glUniform1f
+#define GLEE_H_DEFINED_glUniform1f
+  typedef void (APIENTRYP GLEEPFNGLUNIFORM1FPROC) (GLint  location, GLfloat  v0);
+  GLEE_EXTERN GLEEPFNGLUNIFORM1FPROC GLeeFuncPtr_glUniform1f;
+  #define glUniform1f GLeeFuncPtr_glUniform1f
+#endif
+#ifndef GLEE_H_DEFINED_glUniform2f
+#define GLEE_H_DEFINED_glUniform2f
+  typedef void (APIENTRYP GLEEPFNGLUNIFORM2FPROC) (GLint  location, GLfloat  v0, GLfloat  v1);
+  GLEE_EXTERN GLEEPFNGLUNIFORM2FPROC GLeeFuncPtr_glUniform2f;
+  #define glUniform2f GLeeFuncPtr_glUniform2f
+#endif
+#ifndef GLEE_H_DEFINED_glUniform3f
+#define GLEE_H_DEFINED_glUniform3f
+  typedef void (APIENTRYP GLEEPFNGLUNIFORM3FPROC) (GLint  location, GLfloat  v0, GLfloat  v1, GLfloat  v2);
+  GLEE_EXTERN GLEEPFNGLUNIFORM3FPROC GLeeFuncPtr_glUniform3f;
+  #define glUniform3f GLeeFuncPtr_glUniform3f
+#endif
+#ifndef GLEE_H_DEFINED_glUniform4f
+#define GLEE_H_DEFINED_glUniform4f
+  typedef void (APIENTRYP GLEEPFNGLUNIFORM4FPROC) (GLint  location, GLfloat  v0, GLfloat  v1, GLfloat  v2, GLfloat  v3);
+  GLEE_EXTERN GLEEPFNGLUNIFORM4FPROC GLeeFuncPtr_glUniform4f;
+  #define glUniform4f GLeeFuncPtr_glUniform4f
+#endif
+#ifndef GLEE_H_DEFINED_glUniform1i
+#define GLEE_H_DEFINED_glUniform1i
+  typedef void (APIENTRYP GLEEPFNGLUNIFORM1IPROC) (GLint  location, GLint  v0);
+  GLEE_EXTERN GLEEPFNGLUNIFORM1IPROC GLeeFuncPtr_glUniform1i;
+  #define glUniform1i GLeeFuncPtr_glUniform1i
+#endif
+#ifndef GLEE_H_DEFINED_glUniform2i
+#define GLEE_H_DEFINED_glUniform2i
+  typedef void (APIENTRYP GLEEPFNGLUNIFORM2IPROC) (GLint  location, GLint  v0, GLint  v1);
+  GLEE_EXTERN GLEEPFNGLUNIFORM2IPROC GLeeFuncPtr_glUniform2i;
+  #define glUniform2i GLeeFuncPtr_glUniform2i
+#endif
+#ifndef GLEE_H_DEFINED_glUniform3i
+#define GLEE_H_DEFINED_glUniform3i
+  typedef void (APIENTRYP GLEEPFNGLUNIFORM3IPROC) (GLint  location, GLint  v0, GLint  v1, GLint  v2);
+  GLEE_EXTERN GLEEPFNGLUNIFORM3IPROC GLeeFuncPtr_glUniform3i;
+  #define glUniform3i GLeeFuncPtr_glUniform3i
+#endif
+#ifndef GLEE_H_DEFINED_glUniform4i
+#define GLEE_H_DEFINED_glUniform4i
+  typedef void (APIENTRYP GLEEPFNGLUNIFORM4IPROC) (GLint  location, GLint  v0, GLint  v1, GLint  v2, GLint  v3);
+  GLEE_EXTERN GLEEPFNGLUNIFORM4IPROC GLeeFuncPtr_glUniform4i;
+  #define glUniform4i GLeeFuncPtr_glUniform4i
+#endif
+#ifndef GLEE_H_DEFINED_glUniform1fv
+#define GLEE_H_DEFINED_glUniform1fv
+  typedef void (APIENTRYP GLEEPFNGLUNIFORM1FVPROC) (GLint  location, GLsizei  count, const GLfloat * value);
+  GLEE_EXTERN GLEEPFNGLUNIFORM1FVPROC GLeeFuncPtr_glUniform1fv;
+  #define glUniform1fv GLeeFuncPtr_glUniform1fv
+#endif
+#ifndef GLEE_H_DEFINED_glUniform2fv
+#define GLEE_H_DEFINED_glUniform2fv
+  typedef void (APIENTRYP GLEEPFNGLUNIFORM2FVPROC) (GLint  location, GLsizei  count, const GLfloat * value);
+  GLEE_EXTERN GLEEPFNGLUNIFORM2FVPROC GLeeFuncPtr_glUniform2fv;
+  #define glUniform2fv GLeeFuncPtr_glUniform2fv
+#endif
+#ifndef GLEE_H_DEFINED_glUniform3fv
+#define GLEE_H_DEFINED_glUniform3fv
+  typedef void (APIENTRYP GLEEPFNGLUNIFORM3FVPROC) (GLint  location, GLsizei  count, const GLfloat * value);
+  GLEE_EXTERN GLEEPFNGLUNIFORM3FVPROC GLeeFuncPtr_glUniform3fv;
+  #define glUniform3fv GLeeFuncPtr_glUniform3fv
+#endif
+#ifndef GLEE_H_DEFINED_glUniform4fv
+#define GLEE_H_DEFINED_glUniform4fv
+  typedef void (APIENTRYP GLEEPFNGLUNIFORM4FVPROC) (GLint  location, GLsizei  count, const GLfloat * value);
+  GLEE_EXTERN GLEEPFNGLUNIFORM4FVPROC GLeeFuncPtr_glUniform4fv;
+  #define glUniform4fv GLeeFuncPtr_glUniform4fv
+#endif
+#ifndef GLEE_H_DEFINED_glUniform1iv
+#define GLEE_H_DEFINED_glUniform1iv
+  typedef void (APIENTRYP GLEEPFNGLUNIFORM1IVPROC) (GLint  location, GLsizei  count, const GLint * value);
+  GLEE_EXTERN GLEEPFNGLUNIFORM1IVPROC GLeeFuncPtr_glUniform1iv;
+  #define glUniform1iv GLeeFuncPtr_glUniform1iv
+#endif
+#ifndef GLEE_H_DEFINED_glUniform2iv
+#define GLEE_H_DEFINED_glUniform2iv
+  typedef void (APIENTRYP GLEEPFNGLUNIFORM2IVPROC) (GLint  location, GLsizei  count, const GLint * value);
+  GLEE_EXTERN GLEEPFNGLUNIFORM2IVPROC GLeeFuncPtr_glUniform2iv;
+  #define glUniform2iv GLeeFuncPtr_glUniform2iv
+#endif
+#ifndef GLEE_H_DEFINED_glUniform3iv
+#define GLEE_H_DEFINED_glUniform3iv
+  typedef void (APIENTRYP GLEEPFNGLUNIFORM3IVPROC) (GLint  location, GLsizei  count, const GLint * value);
+  GLEE_EXTERN GLEEPFNGLUNIFORM3IVPROC GLeeFuncPtr_glUniform3iv;
+  #define glUniform3iv GLeeFuncPtr_glUniform3iv
+#endif
+#ifndef GLEE_H_DEFINED_glUniform4iv
+#define GLEE_H_DEFINED_glUniform4iv
+  typedef void (APIENTRYP GLEEPFNGLUNIFORM4IVPROC) (GLint  location, GLsizei  count, const GLint * value);
+  GLEE_EXTERN GLEEPFNGLUNIFORM4IVPROC GLeeFuncPtr_glUniform4iv;
+  #define glUniform4iv GLeeFuncPtr_glUniform4iv
+#endif
+#ifndef GLEE_H_DEFINED_glUniformMatrix2fv
+#define GLEE_H_DEFINED_glUniformMatrix2fv
+  typedef void (APIENTRYP GLEEPFNGLUNIFORMMATRIX2FVPROC) (GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value);
+  GLEE_EXTERN GLEEPFNGLUNIFORMMATRIX2FVPROC GLeeFuncPtr_glUniformMatrix2fv;
+  #define glUniformMatrix2fv GLeeFuncPtr_glUniformMatrix2fv
+#endif
+#ifndef GLEE_H_DEFINED_glUniformMatrix3fv
+#define GLEE_H_DEFINED_glUniformMatrix3fv
+  typedef void (APIENTRYP GLEEPFNGLUNIFORMMATRIX3FVPROC) (GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value);
+  GLEE_EXTERN GLEEPFNGLUNIFORMMATRIX3FVPROC GLeeFuncPtr_glUniformMatrix3fv;
+  #define glUniformMatrix3fv GLeeFuncPtr_glUniformMatrix3fv
+#endif
+#ifndef GLEE_H_DEFINED_glUniformMatrix4fv
+#define GLEE_H_DEFINED_glUniformMatrix4fv
+  typedef void (APIENTRYP GLEEPFNGLUNIFORMMATRIX4FVPROC) (GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value);
+  GLEE_EXTERN GLEEPFNGLUNIFORMMATRIX4FVPROC GLeeFuncPtr_glUniformMatrix4fv;
+  #define glUniformMatrix4fv GLeeFuncPtr_glUniformMatrix4fv
+#endif
+#ifndef GLEE_H_DEFINED_glValidateProgram
+#define GLEE_H_DEFINED_glValidateProgram
+  typedef void (APIENTRYP GLEEPFNGLVALIDATEPROGRAMPROC) (GLuint  program);
+  GLEE_EXTERN GLEEPFNGLVALIDATEPROGRAMPROC GLeeFuncPtr_glValidateProgram;
+  #define glValidateProgram GLeeFuncPtr_glValidateProgram
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttrib1d
+#define GLEE_H_DEFINED_glVertexAttrib1d
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIB1DPROC) (GLuint  index, GLdouble  x);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIB1DPROC GLeeFuncPtr_glVertexAttrib1d;
+  #define glVertexAttrib1d GLeeFuncPtr_glVertexAttrib1d
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttrib1dv
+#define GLEE_H_DEFINED_glVertexAttrib1dv
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIB1DVPROC) (GLuint  index, const GLdouble * v);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIB1DVPROC GLeeFuncPtr_glVertexAttrib1dv;
+  #define glVertexAttrib1dv GLeeFuncPtr_glVertexAttrib1dv
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttrib1f
+#define GLEE_H_DEFINED_glVertexAttrib1f
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIB1FPROC) (GLuint  index, GLfloat  x);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIB1FPROC GLeeFuncPtr_glVertexAttrib1f;
+  #define glVertexAttrib1f GLeeFuncPtr_glVertexAttrib1f
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttrib1fv
+#define GLEE_H_DEFINED_glVertexAttrib1fv
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIB1FVPROC) (GLuint  index, const GLfloat * v);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIB1FVPROC GLeeFuncPtr_glVertexAttrib1fv;
+  #define glVertexAttrib1fv GLeeFuncPtr_glVertexAttrib1fv
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttrib1s
+#define GLEE_H_DEFINED_glVertexAttrib1s
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIB1SPROC) (GLuint  index, GLshort  x);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIB1SPROC GLeeFuncPtr_glVertexAttrib1s;
+  #define glVertexAttrib1s GLeeFuncPtr_glVertexAttrib1s
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttrib1sv
+#define GLEE_H_DEFINED_glVertexAttrib1sv
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIB1SVPROC) (GLuint  index, const GLshort * v);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIB1SVPROC GLeeFuncPtr_glVertexAttrib1sv;
+  #define glVertexAttrib1sv GLeeFuncPtr_glVertexAttrib1sv
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttrib2d
+#define GLEE_H_DEFINED_glVertexAttrib2d
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIB2DPROC) (GLuint  index, GLdouble  x, GLdouble  y);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIB2DPROC GLeeFuncPtr_glVertexAttrib2d;
+  #define glVertexAttrib2d GLeeFuncPtr_glVertexAttrib2d
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttrib2dv
+#define GLEE_H_DEFINED_glVertexAttrib2dv
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIB2DVPROC) (GLuint  index, const GLdouble * v);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIB2DVPROC GLeeFuncPtr_glVertexAttrib2dv;
+  #define glVertexAttrib2dv GLeeFuncPtr_glVertexAttrib2dv
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttrib2f
+#define GLEE_H_DEFINED_glVertexAttrib2f
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIB2FPROC) (GLuint  index, GLfloat  x, GLfloat  y);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIB2FPROC GLeeFuncPtr_glVertexAttrib2f;
+  #define glVertexAttrib2f GLeeFuncPtr_glVertexAttrib2f
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttrib2fv
+#define GLEE_H_DEFINED_glVertexAttrib2fv
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIB2FVPROC) (GLuint  index, const GLfloat * v);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIB2FVPROC GLeeFuncPtr_glVertexAttrib2fv;
+  #define glVertexAttrib2fv GLeeFuncPtr_glVertexAttrib2fv
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttrib2s
+#define GLEE_H_DEFINED_glVertexAttrib2s
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIB2SPROC) (GLuint  index, GLshort  x, GLshort  y);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIB2SPROC GLeeFuncPtr_glVertexAttrib2s;
+  #define glVertexAttrib2s GLeeFuncPtr_glVertexAttrib2s
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttrib2sv
+#define GLEE_H_DEFINED_glVertexAttrib2sv
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIB2SVPROC) (GLuint  index, const GLshort * v);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIB2SVPROC GLeeFuncPtr_glVertexAttrib2sv;
+  #define glVertexAttrib2sv GLeeFuncPtr_glVertexAttrib2sv
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttrib3d
+#define GLEE_H_DEFINED_glVertexAttrib3d
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIB3DPROC) (GLuint  index, GLdouble  x, GLdouble  y, GLdouble  z);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIB3DPROC GLeeFuncPtr_glVertexAttrib3d;
+  #define glVertexAttrib3d GLeeFuncPtr_glVertexAttrib3d
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttrib3dv
+#define GLEE_H_DEFINED_glVertexAttrib3dv
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIB3DVPROC) (GLuint  index, const GLdouble * v);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIB3DVPROC GLeeFuncPtr_glVertexAttrib3dv;
+  #define glVertexAttrib3dv GLeeFuncPtr_glVertexAttrib3dv
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttrib3f
+#define GLEE_H_DEFINED_glVertexAttrib3f
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIB3FPROC) (GLuint  index, GLfloat  x, GLfloat  y, GLfloat  z);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIB3FPROC GLeeFuncPtr_glVertexAttrib3f;
+  #define glVertexAttrib3f GLeeFuncPtr_glVertexAttrib3f
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttrib3fv
+#define GLEE_H_DEFINED_glVertexAttrib3fv
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIB3FVPROC) (GLuint  index, const GLfloat * v);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIB3FVPROC GLeeFuncPtr_glVertexAttrib3fv;
+  #define glVertexAttrib3fv GLeeFuncPtr_glVertexAttrib3fv
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttrib3s
+#define GLEE_H_DEFINED_glVertexAttrib3s
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIB3SPROC) (GLuint  index, GLshort  x, GLshort  y, GLshort  z);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIB3SPROC GLeeFuncPtr_glVertexAttrib3s;
+  #define glVertexAttrib3s GLeeFuncPtr_glVertexAttrib3s
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttrib3sv
+#define GLEE_H_DEFINED_glVertexAttrib3sv
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIB3SVPROC) (GLuint  index, const GLshort * v);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIB3SVPROC GLeeFuncPtr_glVertexAttrib3sv;
+  #define glVertexAttrib3sv GLeeFuncPtr_glVertexAttrib3sv
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttrib4Nbv
+#define GLEE_H_DEFINED_glVertexAttrib4Nbv
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIB4NBVPROC) (GLuint  index, const GLbyte * v);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIB4NBVPROC GLeeFuncPtr_glVertexAttrib4Nbv;
+  #define glVertexAttrib4Nbv GLeeFuncPtr_glVertexAttrib4Nbv
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttrib4Niv
+#define GLEE_H_DEFINED_glVertexAttrib4Niv
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIB4NIVPROC) (GLuint  index, const GLint * v);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIB4NIVPROC GLeeFuncPtr_glVertexAttrib4Niv;
+  #define glVertexAttrib4Niv GLeeFuncPtr_glVertexAttrib4Niv
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttrib4Nsv
+#define GLEE_H_DEFINED_glVertexAttrib4Nsv
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIB4NSVPROC) (GLuint  index, const GLshort * v);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIB4NSVPROC GLeeFuncPtr_glVertexAttrib4Nsv;
+  #define glVertexAttrib4Nsv GLeeFuncPtr_glVertexAttrib4Nsv
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttrib4Nub
+#define GLEE_H_DEFINED_glVertexAttrib4Nub
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIB4NUBPROC) (GLuint  index, GLubyte  x, GLubyte  y, GLubyte  z, GLubyte  w);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIB4NUBPROC GLeeFuncPtr_glVertexAttrib4Nub;
+  #define glVertexAttrib4Nub GLeeFuncPtr_glVertexAttrib4Nub
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttrib4Nubv
+#define GLEE_H_DEFINED_glVertexAttrib4Nubv
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIB4NUBVPROC) (GLuint  index, const GLubyte * v);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIB4NUBVPROC GLeeFuncPtr_glVertexAttrib4Nubv;
+  #define glVertexAttrib4Nubv GLeeFuncPtr_glVertexAttrib4Nubv
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttrib4Nuiv
+#define GLEE_H_DEFINED_glVertexAttrib4Nuiv
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIB4NUIVPROC) (GLuint  index, const GLuint * v);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIB4NUIVPROC GLeeFuncPtr_glVertexAttrib4Nuiv;
+  #define glVertexAttrib4Nuiv GLeeFuncPtr_glVertexAttrib4Nuiv
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttrib4Nusv
+#define GLEE_H_DEFINED_glVertexAttrib4Nusv
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIB4NUSVPROC) (GLuint  index, const GLushort * v);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIB4NUSVPROC GLeeFuncPtr_glVertexAttrib4Nusv;
+  #define glVertexAttrib4Nusv GLeeFuncPtr_glVertexAttrib4Nusv
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttrib4bv
+#define GLEE_H_DEFINED_glVertexAttrib4bv
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIB4BVPROC) (GLuint  index, const GLbyte * v);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIB4BVPROC GLeeFuncPtr_glVertexAttrib4bv;
+  #define glVertexAttrib4bv GLeeFuncPtr_glVertexAttrib4bv
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttrib4d
+#define GLEE_H_DEFINED_glVertexAttrib4d
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIB4DPROC) (GLuint  index, GLdouble  x, GLdouble  y, GLdouble  z, GLdouble  w);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIB4DPROC GLeeFuncPtr_glVertexAttrib4d;
+  #define glVertexAttrib4d GLeeFuncPtr_glVertexAttrib4d
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttrib4dv
+#define GLEE_H_DEFINED_glVertexAttrib4dv
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIB4DVPROC) (GLuint  index, const GLdouble * v);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIB4DVPROC GLeeFuncPtr_glVertexAttrib4dv;
+  #define glVertexAttrib4dv GLeeFuncPtr_glVertexAttrib4dv
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttrib4f
+#define GLEE_H_DEFINED_glVertexAttrib4f
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIB4FPROC) (GLuint  index, GLfloat  x, GLfloat  y, GLfloat  z, GLfloat  w);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIB4FPROC GLeeFuncPtr_glVertexAttrib4f;
+  #define glVertexAttrib4f GLeeFuncPtr_glVertexAttrib4f
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttrib4fv
+#define GLEE_H_DEFINED_glVertexAttrib4fv
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIB4FVPROC) (GLuint  index, const GLfloat * v);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIB4FVPROC GLeeFuncPtr_glVertexAttrib4fv;
+  #define glVertexAttrib4fv GLeeFuncPtr_glVertexAttrib4fv
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttrib4iv
+#define GLEE_H_DEFINED_glVertexAttrib4iv
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIB4IVPROC) (GLuint  index, const GLint * v);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIB4IVPROC GLeeFuncPtr_glVertexAttrib4iv;
+  #define glVertexAttrib4iv GLeeFuncPtr_glVertexAttrib4iv
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttrib4s
+#define GLEE_H_DEFINED_glVertexAttrib4s
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIB4SPROC) (GLuint  index, GLshort  x, GLshort  y, GLshort  z, GLshort  w);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIB4SPROC GLeeFuncPtr_glVertexAttrib4s;
+  #define glVertexAttrib4s GLeeFuncPtr_glVertexAttrib4s
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttrib4sv
+#define GLEE_H_DEFINED_glVertexAttrib4sv
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIB4SVPROC) (GLuint  index, const GLshort * v);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIB4SVPROC GLeeFuncPtr_glVertexAttrib4sv;
+  #define glVertexAttrib4sv GLeeFuncPtr_glVertexAttrib4sv
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttrib4ubv
+#define GLEE_H_DEFINED_glVertexAttrib4ubv
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIB4UBVPROC) (GLuint  index, const GLubyte * v);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIB4UBVPROC GLeeFuncPtr_glVertexAttrib4ubv;
+  #define glVertexAttrib4ubv GLeeFuncPtr_glVertexAttrib4ubv
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttrib4uiv
+#define GLEE_H_DEFINED_glVertexAttrib4uiv
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIB4UIVPROC) (GLuint  index, const GLuint * v);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIB4UIVPROC GLeeFuncPtr_glVertexAttrib4uiv;
+  #define glVertexAttrib4uiv GLeeFuncPtr_glVertexAttrib4uiv
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttrib4usv
+#define GLEE_H_DEFINED_glVertexAttrib4usv
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIB4USVPROC) (GLuint  index, const GLushort * v);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIB4USVPROC GLeeFuncPtr_glVertexAttrib4usv;
+  #define glVertexAttrib4usv GLeeFuncPtr_glVertexAttrib4usv
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttribPointer
+#define GLEE_H_DEFINED_glVertexAttribPointer
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIBPOINTERPROC) (GLuint  index, GLint  size, GLenum  type, GLboolean  normalized, GLsizei  stride, const GLvoid * pointer);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIBPOINTERPROC GLeeFuncPtr_glVertexAttribPointer;
+  #define glVertexAttribPointer GLeeFuncPtr_glVertexAttribPointer
+#endif
+#endif 
+
+/* GL_VERSION_2_1 */
+
+#ifndef GL_VERSION_2_1
+#define GL_VERSION_2_1 1
+#define __GLEE_GL_VERSION_2_1 1
+/* Constants */
+#define GL_PIXEL_PACK_BUFFER                               0x88EB
+#define GL_PIXEL_UNPACK_BUFFER                             0x88EC
+#define GL_PIXEL_PACK_BUFFER_BINDING                       0x88ED
+#define GL_PIXEL_UNPACK_BUFFER_BINDING                     0x88EF
+#define GL_FLOAT_MAT2x3                                    0x8B65
+#define GL_FLOAT_MAT2x4                                    0x8B66
+#define GL_FLOAT_MAT3x2                                    0x8B67
+#define GL_FLOAT_MAT3x4                                    0x8B68
+#define GL_FLOAT_MAT4x2                                    0x8B69
+#define GL_FLOAT_MAT4x3                                    0x8B6A
+#define GL_SRGB                                            0x8C40
+#define GL_SRGB8                                           0x8C41
+#define GL_SRGB_ALPHA                                      0x8C42
+#define GL_SRGB8_ALPHA8                                    0x8C43
+#define GL_COMPRESSED_SRGB                                 0x8C48
+#define GL_COMPRESSED_SRGB_ALPHA                           0x8C49
+#define GL_CURRENT_RASTER_SECONDARY_COLOR                  0x845F
+#define GL_SLUMINANCE_ALPHA                                0x8C44
+#define GL_SLUMINANCE8_ALPHA8                              0x8C45
+#define GL_SLUMINANCE                                      0x8C46
+#define GL_SLUMINANCE8                                     0x8C47
+#define GL_COMPRESSED_SLUMINANCE                           0x8C4A
+#define GL_COMPRESSED_SLUMINANCE_ALPHA                     0x8C4B
+#ifndef GLEE_H_DEFINED_glUniformMatrix2x3fv
+#define GLEE_H_DEFINED_glUniformMatrix2x3fv
+  typedef void (APIENTRYP GLEEPFNGLUNIFORMMATRIX2X3FVPROC) (GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value);
+  GLEE_EXTERN GLEEPFNGLUNIFORMMATRIX2X3FVPROC GLeeFuncPtr_glUniformMatrix2x3fv;
+  #define glUniformMatrix2x3fv GLeeFuncPtr_glUniformMatrix2x3fv
+#endif
+#ifndef GLEE_H_DEFINED_glUniformMatrix3x2fv
+#define GLEE_H_DEFINED_glUniformMatrix3x2fv
+  typedef void (APIENTRYP GLEEPFNGLUNIFORMMATRIX3X2FVPROC) (GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value);
+  GLEE_EXTERN GLEEPFNGLUNIFORMMATRIX3X2FVPROC GLeeFuncPtr_glUniformMatrix3x2fv;
+  #define glUniformMatrix3x2fv GLeeFuncPtr_glUniformMatrix3x2fv
+#endif
+#ifndef GLEE_H_DEFINED_glUniformMatrix2x4fv
+#define GLEE_H_DEFINED_glUniformMatrix2x4fv
+  typedef void (APIENTRYP GLEEPFNGLUNIFORMMATRIX2X4FVPROC) (GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value);
+  GLEE_EXTERN GLEEPFNGLUNIFORMMATRIX2X4FVPROC GLeeFuncPtr_glUniformMatrix2x4fv;
+  #define glUniformMatrix2x4fv GLeeFuncPtr_glUniformMatrix2x4fv
+#endif
+#ifndef GLEE_H_DEFINED_glUniformMatrix4x2fv
+#define GLEE_H_DEFINED_glUniformMatrix4x2fv
+  typedef void (APIENTRYP GLEEPFNGLUNIFORMMATRIX4X2FVPROC) (GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value);
+  GLEE_EXTERN GLEEPFNGLUNIFORMMATRIX4X2FVPROC GLeeFuncPtr_glUniformMatrix4x2fv;
+  #define glUniformMatrix4x2fv GLeeFuncPtr_glUniformMatrix4x2fv
+#endif
+#ifndef GLEE_H_DEFINED_glUniformMatrix3x4fv
+#define GLEE_H_DEFINED_glUniformMatrix3x4fv
+  typedef void (APIENTRYP GLEEPFNGLUNIFORMMATRIX3X4FVPROC) (GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value);
+  GLEE_EXTERN GLEEPFNGLUNIFORMMATRIX3X4FVPROC GLeeFuncPtr_glUniformMatrix3x4fv;
+  #define glUniformMatrix3x4fv GLeeFuncPtr_glUniformMatrix3x4fv
+#endif
+#ifndef GLEE_H_DEFINED_glUniformMatrix4x3fv
+#define GLEE_H_DEFINED_glUniformMatrix4x3fv
+  typedef void (APIENTRYP GLEEPFNGLUNIFORMMATRIX4X3FVPROC) (GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value);
+  GLEE_EXTERN GLEEPFNGLUNIFORMMATRIX4X3FVPROC GLeeFuncPtr_glUniformMatrix4x3fv;
+  #define glUniformMatrix4x3fv GLeeFuncPtr_glUniformMatrix4x3fv
+#endif
+#endif 
+
+/* GL_VERSION_3_0 */
+
+#ifndef GL_VERSION_3_0
+#define GL_VERSION_3_0 1
+#define __GLEE_GL_VERSION_3_0 1
+/* Constants */
+#define GL_COMPARE_REF_TO_TEXTURE                          0x884E
+#define GL_CLIP_DISTANCE0                                  0x3000
+#define GL_CLIP_DISTANCE1                                  0x3001
+#define GL_CLIP_DISTANCE2                                  0x3002
+#define GL_CLIP_DISTANCE3                                  0x3003
+#define GL_CLIP_DISTANCE4                                  0x3004
+#define GL_CLIP_DISTANCE5                                  0x3005
+#define GL_CLIP_DISTANCE6                                  0x3006
+#define GL_CLIP_DISTANCE7                                  0x3007
+#define GL_MAX_CLIP_DISTANCES                              0x0D32
+#define GL_MAJOR_VERSION                                   0x821B
+#define GL_MINOR_VERSION                                   0x821C
+#define GL_NUM_EXTENSIONS                                  0x821D
+#define GL_CONTEXT_FLAGS                                   0x821E
+#define GL_COMPRESSED_RED                                  0x8225
+#define GL_COMPRESSED_RG                                   0x8226
+#define GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT             0x0001
+#define GL_RGBA32F                                         0x8814
+#define GL_RGB32F                                          0x8815
+#define GL_RGBA16F                                         0x881A
+#define GL_RGB16F                                          0x881B
+#define GL_VERTEX_ATTRIB_ARRAY_INTEGER                     0x88FD
+#define GL_MAX_ARRAY_TEXTURE_LAYERS                        0x88FF
+#define GL_MIN_PROGRAM_TEXEL_OFFSET                        0x8904
+#define GL_MAX_PROGRAM_TEXEL_OFFSET                        0x8905
+#define GL_CLAMP_READ_COLOR                                0x891C
+#define GL_FIXED_ONLY                                      0x891D
+#define GL_MAX_VARYING_COMPONENTS                          0x8B4B
+#define GL_TEXTURE_1D_ARRAY                                0x8C18
+#define GL_PROXY_TEXTURE_1D_ARRAY                          0x8C19
+#define GL_TEXTURE_2D_ARRAY                                0x8C1A
+#define GL_PROXY_TEXTURE_2D_ARRAY                          0x8C1B
+#define GL_TEXTURE_BINDING_1D_ARRAY                        0x8C1C
+#define GL_TEXTURE_BINDING_2D_ARRAY                        0x8C1D
+#define GL_R11F_G11F_B10F                                  0x8C3A
+#define GL_UNSIGNED_INT_10F_11F_11F_REV                    0x8C3B
+#define GL_RGB9_E5                                         0x8C3D
+#define GL_UNSIGNED_INT_5_9_9_9_REV                        0x8C3E
+#define GL_TEXTURE_SHARED_SIZE                             0x8C3F
+#define GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH           0x8C76
+#define GL_TRANSFORM_FEEDBACK_BUFFER_MODE                  0x8C7F
+#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS      0x8C80
+#define GL_TRANSFORM_FEEDBACK_VARYINGS                     0x8C83
+#define GL_TRANSFORM_FEEDBACK_BUFFER_START                 0x8C84
+#define GL_TRANSFORM_FEEDBACK_BUFFER_SIZE                  0x8C85
+#define GL_PRIMITIVES_GENERATED                            0x8C87
+#define GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN           0x8C88
+#define GL_RASTERIZER_DISCARD                              0x8C89
+#define GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS   0x8C8A
+#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS         0x8C8B
+#define GL_INTERLEAVED_ATTRIBS                             0x8C8C
+#define GL_SEPARATE_ATTRIBS                                0x8C8D
+#define GL_TRANSFORM_FEEDBACK_BUFFER                       0x8C8E
+#define GL_TRANSFORM_FEEDBACK_BUFFER_BINDING               0x8C8F
+#define GL_RGBA32UI                                        0x8D70
+#define GL_RGB32UI                                         0x8D71
+#define GL_RGBA16UI                                        0x8D76
+#define GL_RGB16UI                                         0x8D77
+#define GL_RGBA8UI                                         0x8D7C
+#define GL_RGB8UI                                          0x8D7D
+#define GL_RGBA32I                                         0x8D82
+#define GL_RGB32I                                          0x8D83
+#define GL_RGBA16I                                         0x8D88
+#define GL_RGB16I                                          0x8D89
+#define GL_RGBA8I                                          0x8D8E
+#define GL_RGB8I                                           0x8D8F
+#define GL_RED_INTEGER                                     0x8D94
+#define GL_GREEN_INTEGER                                   0x8D95
+#define GL_BLUE_INTEGER                                    0x8D96
+#define GL_RGB_INTEGER                                     0x8D98
+#define GL_RGBA_INTEGER                                    0x8D99
+#define GL_BGR_INTEGER                                     0x8D9A
+#define GL_BGRA_INTEGER                                    0x8D9B
+#define GL_SAMPLER_1D_ARRAY                                0x8DC0
+#define GL_SAMPLER_2D_ARRAY                                0x8DC1
+#define GL_SAMPLER_1D_ARRAY_SHADOW                         0x8DC3
+#define GL_SAMPLER_2D_ARRAY_SHADOW                         0x8DC4
+#define GL_SAMPLER_CUBE_SHADOW                             0x8DC5
+#define GL_UNSIGNED_INT_VEC2                               0x8DC6
+#define GL_UNSIGNED_INT_VEC3                               0x8DC7
+#define GL_UNSIGNED_INT_VEC4                               0x8DC8
+#define GL_INT_SAMPLER_1D                                  0x8DC9
+#define GL_INT_SAMPLER_2D                                  0x8DCA
+#define GL_INT_SAMPLER_3D                                  0x8DCB
+#define GL_INT_SAMPLER_CUBE                                0x8DCC
+#define GL_INT_SAMPLER_1D_ARRAY                            0x8DCE
+#define GL_INT_SAMPLER_2D_ARRAY                            0x8DCF
+#define GL_UNSIGNED_INT_SAMPLER_1D                         0x8DD1
+#define GL_UNSIGNED_INT_SAMPLER_2D                         0x8DD2
+#define GL_UNSIGNED_INT_SAMPLER_3D                         0x8DD3
+#define GL_UNSIGNED_INT_SAMPLER_CUBE                       0x8DD4
+#define GL_UNSIGNED_INT_SAMPLER_1D_ARRAY                   0x8DD6
+#define GL_UNSIGNED_INT_SAMPLER_2D_ARRAY                   0x8DD7
+#define GL_QUERY_WAIT                                      0x8E13
+#define GL_QUERY_NO_WAIT                                   0x8E14
+#define GL_QUERY_BY_REGION_WAIT                            0x8E15
+#define GL_QUERY_BY_REGION_NO_WAIT                         0x8E16
+#define GL_BUFFER_ACCESS_FLAGS                             0x911F
+#define GL_BUFFER_MAP_LENGTH                               0x9120
+#define GL_BUFFER_MAP_OFFSET                               0x9121
+#define GL_CLAMP_VERTEX_COLOR                              0x891A
+#define GL_CLAMP_FRAGMENT_COLOR                            0x891B
+#define GL_ALPHA_INTEGER                                   0x8D97
+#ifndef GLEE_H_DEFINED_glColorMaski
+#define GLEE_H_DEFINED_glColorMaski
+  typedef void (APIENTRYP GLEEPFNGLCOLORMASKIPROC) (GLuint  index, GLboolean  r, GLboolean  g, GLboolean  b, GLboolean  a);
+  GLEE_EXTERN GLEEPFNGLCOLORMASKIPROC GLeeFuncPtr_glColorMaski;
+  #define glColorMaski GLeeFuncPtr_glColorMaski
+#endif
+#ifndef GLEE_H_DEFINED_glGetBooleani_v
+#define GLEE_H_DEFINED_glGetBooleani_v
+  typedef void (APIENTRYP GLEEPFNGLGETBOOLEANI_VPROC) (GLenum  target, GLuint  index, GLboolean * data);
+  GLEE_EXTERN GLEEPFNGLGETBOOLEANI_VPROC GLeeFuncPtr_glGetBooleani_v;
+  #define glGetBooleani_v GLeeFuncPtr_glGetBooleani_v
+#endif
+#ifndef GLEE_H_DEFINED_glGetIntegeri_v
+#define GLEE_H_DEFINED_glGetIntegeri_v
+  typedef void (APIENTRYP GLEEPFNGLGETINTEGERI_VPROC) (GLenum  target, GLuint  index, GLint * data);
+  GLEE_EXTERN GLEEPFNGLGETINTEGERI_VPROC GLeeFuncPtr_glGetIntegeri_v;
+  #define glGetIntegeri_v GLeeFuncPtr_glGetIntegeri_v
+#endif
+#ifndef GLEE_H_DEFINED_glEnablei
+#define GLEE_H_DEFINED_glEnablei
+  typedef void (APIENTRYP GLEEPFNGLENABLEIPROC) (GLenum  target, GLuint  index);
+  GLEE_EXTERN GLEEPFNGLENABLEIPROC GLeeFuncPtr_glEnablei;
+  #define glEnablei GLeeFuncPtr_glEnablei
+#endif
+#ifndef GLEE_H_DEFINED_glDisablei
+#define GLEE_H_DEFINED_glDisablei
+  typedef void (APIENTRYP GLEEPFNGLDISABLEIPROC) (GLenum  target, GLuint  index);
+  GLEE_EXTERN GLEEPFNGLDISABLEIPROC GLeeFuncPtr_glDisablei;
+  #define glDisablei GLeeFuncPtr_glDisablei
+#endif
+#ifndef GLEE_H_DEFINED_glIsEnabledi
+#define GLEE_H_DEFINED_glIsEnabledi
+  typedef GLboolean (APIENTRYP GLEEPFNGLISENABLEDIPROC) (GLenum  target, GLuint  index);
+  GLEE_EXTERN GLEEPFNGLISENABLEDIPROC GLeeFuncPtr_glIsEnabledi;
+  #define glIsEnabledi GLeeFuncPtr_glIsEnabledi
+#endif
+#ifndef GLEE_H_DEFINED_glBeginTransformFeedback
+#define GLEE_H_DEFINED_glBeginTransformFeedback
+  typedef void (APIENTRYP GLEEPFNGLBEGINTRANSFORMFEEDBACKPROC) (GLenum  primitiveMode);
+  GLEE_EXTERN GLEEPFNGLBEGINTRANSFORMFEEDBACKPROC GLeeFuncPtr_glBeginTransformFeedback;
+  #define glBeginTransformFeedback GLeeFuncPtr_glBeginTransformFeedback
+#endif
+#ifndef GLEE_H_DEFINED_glEndTransformFeedback
+#define GLEE_H_DEFINED_glEndTransformFeedback
+  typedef void (APIENTRYP GLEEPFNGLENDTRANSFORMFEEDBACKPROC) ();
+  GLEE_EXTERN GLEEPFNGLENDTRANSFORMFEEDBACKPROC GLeeFuncPtr_glEndTransformFeedback;
+  #define glEndTransformFeedback GLeeFuncPtr_glEndTransformFeedback
+#endif
+#ifndef GLEE_H_DEFINED_glBindBufferRange
+#define GLEE_H_DEFINED_glBindBufferRange
+  typedef void (APIENTRYP GLEEPFNGLBINDBUFFERRANGEPROC) (GLenum  target, GLuint  index, GLuint  buffer, GLintptr  offset, GLsizeiptr  size);
+  GLEE_EXTERN GLEEPFNGLBINDBUFFERRANGEPROC GLeeFuncPtr_glBindBufferRange;
+  #define glBindBufferRange GLeeFuncPtr_glBindBufferRange
+#endif
+#ifndef GLEE_H_DEFINED_glBindBufferBase
+#define GLEE_H_DEFINED_glBindBufferBase
+  typedef void (APIENTRYP GLEEPFNGLBINDBUFFERBASEPROC) (GLenum  target, GLuint  index, GLuint  buffer);
+  GLEE_EXTERN GLEEPFNGLBINDBUFFERBASEPROC GLeeFuncPtr_glBindBufferBase;
+  #define glBindBufferBase GLeeFuncPtr_glBindBufferBase
+#endif
+#ifndef GLEE_H_DEFINED_glTransformFeedbackVaryings
+#define GLEE_H_DEFINED_glTransformFeedbackVaryings
+  typedef void (APIENTRYP GLEEPFNGLTRANSFORMFEEDBACKVARYINGSPROC) (GLuint  program, GLsizei  count, const GLchar* * varyings, GLenum  bufferMode);
+  GLEE_EXTERN GLEEPFNGLTRANSFORMFEEDBACKVARYINGSPROC GLeeFuncPtr_glTransformFeedbackVaryings;
+  #define glTransformFeedbackVaryings GLeeFuncPtr_glTransformFeedbackVaryings
+#endif
+#ifndef GLEE_H_DEFINED_glGetTransformFeedbackVarying
+#define GLEE_H_DEFINED_glGetTransformFeedbackVarying
+  typedef void (APIENTRYP GLEEPFNGLGETTRANSFORMFEEDBACKVARYINGPROC) (GLuint  program, GLuint  index, GLsizei  bufSize, GLsizei * length, GLsizei * size, GLenum * type, GLchar * name);
+  GLEE_EXTERN GLEEPFNGLGETTRANSFORMFEEDBACKVARYINGPROC GLeeFuncPtr_glGetTransformFeedbackVarying;
+  #define glGetTransformFeedbackVarying GLeeFuncPtr_glGetTransformFeedbackVarying
+#endif
+#ifndef GLEE_H_DEFINED_glClampColor
+#define GLEE_H_DEFINED_glClampColor
+  typedef void (APIENTRYP GLEEPFNGLCLAMPCOLORPROC) (GLenum  target, GLenum  clamp);
+  GLEE_EXTERN GLEEPFNGLCLAMPCOLORPROC GLeeFuncPtr_glClampColor;
+  #define glClampColor GLeeFuncPtr_glClampColor
+#endif
+#ifndef GLEE_H_DEFINED_glBeginConditionalRender
+#define GLEE_H_DEFINED_glBeginConditionalRender
+  typedef void (APIENTRYP GLEEPFNGLBEGINCONDITIONALRENDERPROC) (GLuint  id, GLenum  mode);
+  GLEE_EXTERN GLEEPFNGLBEGINCONDITIONALRENDERPROC GLeeFuncPtr_glBeginConditionalRender;
+  #define glBeginConditionalRender GLeeFuncPtr_glBeginConditionalRender
+#endif
+#ifndef GLEE_H_DEFINED_glEndConditionalRender
+#define GLEE_H_DEFINED_glEndConditionalRender
+  typedef void (APIENTRYP GLEEPFNGLENDCONDITIONALRENDERPROC) ();
+  GLEE_EXTERN GLEEPFNGLENDCONDITIONALRENDERPROC GLeeFuncPtr_glEndConditionalRender;
+  #define glEndConditionalRender GLeeFuncPtr_glEndConditionalRender
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttribIPointer
+#define GLEE_H_DEFINED_glVertexAttribIPointer
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIBIPOINTERPROC) (GLuint  index, GLint  size, GLenum  type, GLsizei  stride, const GLvoid * pointer);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIBIPOINTERPROC GLeeFuncPtr_glVertexAttribIPointer;
+  #define glVertexAttribIPointer GLeeFuncPtr_glVertexAttribIPointer
+#endif
+#ifndef GLEE_H_DEFINED_glGetVertexAttribIiv
+#define GLEE_H_DEFINED_glGetVertexAttribIiv
+  typedef void (APIENTRYP GLEEPFNGLGETVERTEXATTRIBIIVPROC) (GLuint  index, GLenum  pname, GLint * params);
+  GLEE_EXTERN GLEEPFNGLGETVERTEXATTRIBIIVPROC GLeeFuncPtr_glGetVertexAttribIiv;
+  #define glGetVertexAttribIiv GLeeFuncPtr_glGetVertexAttribIiv
+#endif
+#ifndef GLEE_H_DEFINED_glGetVertexAttribIuiv
+#define GLEE_H_DEFINED_glGetVertexAttribIuiv
+  typedef void (APIENTRYP GLEEPFNGLGETVERTEXATTRIBIUIVPROC) (GLuint  index, GLenum  pname, GLuint * params);
+  GLEE_EXTERN GLEEPFNGLGETVERTEXATTRIBIUIVPROC GLeeFuncPtr_glGetVertexAttribIuiv;
+  #define glGetVertexAttribIuiv GLeeFuncPtr_glGetVertexAttribIuiv
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttribI1i
+#define GLEE_H_DEFINED_glVertexAttribI1i
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIBI1IPROC) (GLuint  index, GLint  x);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIBI1IPROC GLeeFuncPtr_glVertexAttribI1i;
+  #define glVertexAttribI1i GLeeFuncPtr_glVertexAttribI1i
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttribI2i
+#define GLEE_H_DEFINED_glVertexAttribI2i
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIBI2IPROC) (GLuint  index, GLint  x, GLint  y);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIBI2IPROC GLeeFuncPtr_glVertexAttribI2i;
+  #define glVertexAttribI2i GLeeFuncPtr_glVertexAttribI2i
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttribI3i
+#define GLEE_H_DEFINED_glVertexAttribI3i
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIBI3IPROC) (GLuint  index, GLint  x, GLint  y, GLint  z);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIBI3IPROC GLeeFuncPtr_glVertexAttribI3i;
+  #define glVertexAttribI3i GLeeFuncPtr_glVertexAttribI3i
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttribI4i
+#define GLEE_H_DEFINED_glVertexAttribI4i
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIBI4IPROC) (GLuint  index, GLint  x, GLint  y, GLint  z, GLint  w);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIBI4IPROC GLeeFuncPtr_glVertexAttribI4i;
+  #define glVertexAttribI4i GLeeFuncPtr_glVertexAttribI4i
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttribI1ui
+#define GLEE_H_DEFINED_glVertexAttribI1ui
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIBI1UIPROC) (GLuint  index, GLuint  x);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIBI1UIPROC GLeeFuncPtr_glVertexAttribI1ui;
+  #define glVertexAttribI1ui GLeeFuncPtr_glVertexAttribI1ui
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttribI2ui
+#define GLEE_H_DEFINED_glVertexAttribI2ui
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIBI2UIPROC) (GLuint  index, GLuint  x, GLuint  y);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIBI2UIPROC GLeeFuncPtr_glVertexAttribI2ui;
+  #define glVertexAttribI2ui GLeeFuncPtr_glVertexAttribI2ui
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttribI3ui
+#define GLEE_H_DEFINED_glVertexAttribI3ui
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIBI3UIPROC) (GLuint  index, GLuint  x, GLuint  y, GLuint  z);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIBI3UIPROC GLeeFuncPtr_glVertexAttribI3ui;
+  #define glVertexAttribI3ui GLeeFuncPtr_glVertexAttribI3ui
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttribI4ui
+#define GLEE_H_DEFINED_glVertexAttribI4ui
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIBI4UIPROC) (GLuint  index, GLuint  x, GLuint  y, GLuint  z, GLuint  w);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIBI4UIPROC GLeeFuncPtr_glVertexAttribI4ui;
+  #define glVertexAttribI4ui GLeeFuncPtr_glVertexAttribI4ui
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttribI1iv
+#define GLEE_H_DEFINED_glVertexAttribI1iv
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIBI1IVPROC) (GLuint  index, const GLint * v);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIBI1IVPROC GLeeFuncPtr_glVertexAttribI1iv;
+  #define glVertexAttribI1iv GLeeFuncPtr_glVertexAttribI1iv
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttribI2iv
+#define GLEE_H_DEFINED_glVertexAttribI2iv
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIBI2IVPROC) (GLuint  index, const GLint * v);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIBI2IVPROC GLeeFuncPtr_glVertexAttribI2iv;
+  #define glVertexAttribI2iv GLeeFuncPtr_glVertexAttribI2iv
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttribI3iv
+#define GLEE_H_DEFINED_glVertexAttribI3iv
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIBI3IVPROC) (GLuint  index, const GLint * v);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIBI3IVPROC GLeeFuncPtr_glVertexAttribI3iv;
+  #define glVertexAttribI3iv GLeeFuncPtr_glVertexAttribI3iv
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttribI4iv
+#define GLEE_H_DEFINED_glVertexAttribI4iv
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIBI4IVPROC) (GLuint  index, const GLint * v);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIBI4IVPROC GLeeFuncPtr_glVertexAttribI4iv;
+  #define glVertexAttribI4iv GLeeFuncPtr_glVertexAttribI4iv
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttribI1uiv
+#define GLEE_H_DEFINED_glVertexAttribI1uiv
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIBI1UIVPROC) (GLuint  index, const GLuint * v);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIBI1UIVPROC GLeeFuncPtr_glVertexAttribI1uiv;
+  #define glVertexAttribI1uiv GLeeFuncPtr_glVertexAttribI1uiv
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttribI2uiv
+#define GLEE_H_DEFINED_glVertexAttribI2uiv
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIBI2UIVPROC) (GLuint  index, const GLuint * v);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIBI2UIVPROC GLeeFuncPtr_glVertexAttribI2uiv;
+  #define glVertexAttribI2uiv GLeeFuncPtr_glVertexAttribI2uiv
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttribI3uiv
+#define GLEE_H_DEFINED_glVertexAttribI3uiv
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIBI3UIVPROC) (GLuint  index, const GLuint * v);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIBI3UIVPROC GLeeFuncPtr_glVertexAttribI3uiv;
+  #define glVertexAttribI3uiv GLeeFuncPtr_glVertexAttribI3uiv
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttribI4uiv
+#define GLEE_H_DEFINED_glVertexAttribI4uiv
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIBI4UIVPROC) (GLuint  index, const GLuint * v);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIBI4UIVPROC GLeeFuncPtr_glVertexAttribI4uiv;
+  #define glVertexAttribI4uiv GLeeFuncPtr_glVertexAttribI4uiv
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttribI4bv
+#define GLEE_H_DEFINED_glVertexAttribI4bv
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIBI4BVPROC) (GLuint  index, const GLbyte * v);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIBI4BVPROC GLeeFuncPtr_glVertexAttribI4bv;
+  #define glVertexAttribI4bv GLeeFuncPtr_glVertexAttribI4bv
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttribI4sv
+#define GLEE_H_DEFINED_glVertexAttribI4sv
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIBI4SVPROC) (GLuint  index, const GLshort * v);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIBI4SVPROC GLeeFuncPtr_glVertexAttribI4sv;
+  #define glVertexAttribI4sv GLeeFuncPtr_glVertexAttribI4sv
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttribI4ubv
+#define GLEE_H_DEFINED_glVertexAttribI4ubv
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIBI4UBVPROC) (GLuint  index, const GLubyte * v);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIBI4UBVPROC GLeeFuncPtr_glVertexAttribI4ubv;
+  #define glVertexAttribI4ubv GLeeFuncPtr_glVertexAttribI4ubv
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttribI4usv
+#define GLEE_H_DEFINED_glVertexAttribI4usv
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIBI4USVPROC) (GLuint  index, const GLushort * v);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIBI4USVPROC GLeeFuncPtr_glVertexAttribI4usv;
+  #define glVertexAttribI4usv GLeeFuncPtr_glVertexAttribI4usv
+#endif
+#ifndef GLEE_H_DEFINED_glGetUniformuiv
+#define GLEE_H_DEFINED_glGetUniformuiv
+  typedef void (APIENTRYP GLEEPFNGLGETUNIFORMUIVPROC) (GLuint  program, GLint  location, GLuint * params);
+  GLEE_EXTERN GLEEPFNGLGETUNIFORMUIVPROC GLeeFuncPtr_glGetUniformuiv;
+  #define glGetUniformuiv GLeeFuncPtr_glGetUniformuiv
+#endif
+#ifndef GLEE_H_DEFINED_glBindFragDataLocation
+#define GLEE_H_DEFINED_glBindFragDataLocation
+  typedef void (APIENTRYP GLEEPFNGLBINDFRAGDATALOCATIONPROC) (GLuint  program, GLuint  color, const GLchar * name);
+  GLEE_EXTERN GLEEPFNGLBINDFRAGDATALOCATIONPROC GLeeFuncPtr_glBindFragDataLocation;
+  #define glBindFragDataLocation GLeeFuncPtr_glBindFragDataLocation
+#endif
+#ifndef GLEE_H_DEFINED_glGetFragDataLocation
+#define GLEE_H_DEFINED_glGetFragDataLocation
+  typedef GLint (APIENTRYP GLEEPFNGLGETFRAGDATALOCATIONPROC) (GLuint  program, const GLchar * name);
+  GLEE_EXTERN GLEEPFNGLGETFRAGDATALOCATIONPROC GLeeFuncPtr_glGetFragDataLocation;
+  #define glGetFragDataLocation GLeeFuncPtr_glGetFragDataLocation
+#endif
+#ifndef GLEE_H_DEFINED_glUniform1ui
+#define GLEE_H_DEFINED_glUniform1ui
+  typedef void (APIENTRYP GLEEPFNGLUNIFORM1UIPROC) (GLint  location, GLuint  v0);
+  GLEE_EXTERN GLEEPFNGLUNIFORM1UIPROC GLeeFuncPtr_glUniform1ui;
+  #define glUniform1ui GLeeFuncPtr_glUniform1ui
+#endif
+#ifndef GLEE_H_DEFINED_glUniform2ui
+#define GLEE_H_DEFINED_glUniform2ui
+  typedef void (APIENTRYP GLEEPFNGLUNIFORM2UIPROC) (GLint  location, GLuint  v0, GLuint  v1);
+  GLEE_EXTERN GLEEPFNGLUNIFORM2UIPROC GLeeFuncPtr_glUniform2ui;
+  #define glUniform2ui GLeeFuncPtr_glUniform2ui
+#endif
+#ifndef GLEE_H_DEFINED_glUniform3ui
+#define GLEE_H_DEFINED_glUniform3ui
+  typedef void (APIENTRYP GLEEPFNGLUNIFORM3UIPROC) (GLint  location, GLuint  v0, GLuint  v1, GLuint  v2);
+  GLEE_EXTERN GLEEPFNGLUNIFORM3UIPROC GLeeFuncPtr_glUniform3ui;
+  #define glUniform3ui GLeeFuncPtr_glUniform3ui
+#endif
+#ifndef GLEE_H_DEFINED_glUniform4ui
+#define GLEE_H_DEFINED_glUniform4ui
+  typedef void (APIENTRYP GLEEPFNGLUNIFORM4UIPROC) (GLint  location, GLuint  v0, GLuint  v1, GLuint  v2, GLuint  v3);
+  GLEE_EXTERN GLEEPFNGLUNIFORM4UIPROC GLeeFuncPtr_glUniform4ui;
+  #define glUniform4ui GLeeFuncPtr_glUniform4ui
+#endif
+#ifndef GLEE_H_DEFINED_glUniform1uiv
+#define GLEE_H_DEFINED_glUniform1uiv
+  typedef void (APIENTRYP GLEEPFNGLUNIFORM1UIVPROC) (GLint  location, GLsizei  count, const GLuint * value);
+  GLEE_EXTERN GLEEPFNGLUNIFORM1UIVPROC GLeeFuncPtr_glUniform1uiv;
+  #define glUniform1uiv GLeeFuncPtr_glUniform1uiv
+#endif
+#ifndef GLEE_H_DEFINED_glUniform2uiv
+#define GLEE_H_DEFINED_glUniform2uiv
+  typedef void (APIENTRYP GLEEPFNGLUNIFORM2UIVPROC) (GLint  location, GLsizei  count, const GLuint * value);
+  GLEE_EXTERN GLEEPFNGLUNIFORM2UIVPROC GLeeFuncPtr_glUniform2uiv;
+  #define glUniform2uiv GLeeFuncPtr_glUniform2uiv
+#endif
+#ifndef GLEE_H_DEFINED_glUniform3uiv
+#define GLEE_H_DEFINED_glUniform3uiv
+  typedef void (APIENTRYP GLEEPFNGLUNIFORM3UIVPROC) (GLint  location, GLsizei  count, const GLuint * value);
+  GLEE_EXTERN GLEEPFNGLUNIFORM3UIVPROC GLeeFuncPtr_glUniform3uiv;
+  #define glUniform3uiv GLeeFuncPtr_glUniform3uiv
+#endif
+#ifndef GLEE_H_DEFINED_glUniform4uiv
+#define GLEE_H_DEFINED_glUniform4uiv
+  typedef void (APIENTRYP GLEEPFNGLUNIFORM4UIVPROC) (GLint  location, GLsizei  count, const GLuint * value);
+  GLEE_EXTERN GLEEPFNGLUNIFORM4UIVPROC GLeeFuncPtr_glUniform4uiv;
+  #define glUniform4uiv GLeeFuncPtr_glUniform4uiv
+#endif
+#ifndef GLEE_H_DEFINED_glTexParameterIiv
+#define GLEE_H_DEFINED_glTexParameterIiv
+  typedef void (APIENTRYP GLEEPFNGLTEXPARAMETERIIVPROC) (GLenum  target, GLenum  pname, const GLint * params);
+  GLEE_EXTERN GLEEPFNGLTEXPARAMETERIIVPROC GLeeFuncPtr_glTexParameterIiv;
+  #define glTexParameterIiv GLeeFuncPtr_glTexParameterIiv
+#endif
+#ifndef GLEE_H_DEFINED_glTexParameterIuiv
+#define GLEE_H_DEFINED_glTexParameterIuiv
+  typedef void (APIENTRYP GLEEPFNGLTEXPARAMETERIUIVPROC) (GLenum  target, GLenum  pname, const GLuint * params);
+  GLEE_EXTERN GLEEPFNGLTEXPARAMETERIUIVPROC GLeeFuncPtr_glTexParameterIuiv;
+  #define glTexParameterIuiv GLeeFuncPtr_glTexParameterIuiv
+#endif
+#ifndef GLEE_H_DEFINED_glGetTexParameterIiv
+#define GLEE_H_DEFINED_glGetTexParameterIiv
+  typedef void (APIENTRYP GLEEPFNGLGETTEXPARAMETERIIVPROC) (GLenum  target, GLenum  pname, GLint * params);
+  GLEE_EXTERN GLEEPFNGLGETTEXPARAMETERIIVPROC GLeeFuncPtr_glGetTexParameterIiv;
+  #define glGetTexParameterIiv GLeeFuncPtr_glGetTexParameterIiv
+#endif
+#ifndef GLEE_H_DEFINED_glGetTexParameterIuiv
+#define GLEE_H_DEFINED_glGetTexParameterIuiv
+  typedef void (APIENTRYP GLEEPFNGLGETTEXPARAMETERIUIVPROC) (GLenum  target, GLenum  pname, GLuint * params);
+  GLEE_EXTERN GLEEPFNGLGETTEXPARAMETERIUIVPROC GLeeFuncPtr_glGetTexParameterIuiv;
+  #define glGetTexParameterIuiv GLeeFuncPtr_glGetTexParameterIuiv
+#endif
+#ifndef GLEE_H_DEFINED_glClearBufferiv
+#define GLEE_H_DEFINED_glClearBufferiv
+  typedef void (APIENTRYP GLEEPFNGLCLEARBUFFERIVPROC) (GLenum  buffer, GLint  drawbuffer, const GLint * value);
+  GLEE_EXTERN GLEEPFNGLCLEARBUFFERIVPROC GLeeFuncPtr_glClearBufferiv;
+  #define glClearBufferiv GLeeFuncPtr_glClearBufferiv
+#endif
+#ifndef GLEE_H_DEFINED_glClearBufferuiv
+#define GLEE_H_DEFINED_glClearBufferuiv
+  typedef void (APIENTRYP GLEEPFNGLCLEARBUFFERUIVPROC) (GLenum  buffer, GLint  drawbuffer, const GLuint * value);
+  GLEE_EXTERN GLEEPFNGLCLEARBUFFERUIVPROC GLeeFuncPtr_glClearBufferuiv;
+  #define glClearBufferuiv GLeeFuncPtr_glClearBufferuiv
+#endif
+#ifndef GLEE_H_DEFINED_glClearBufferfv
+#define GLEE_H_DEFINED_glClearBufferfv
+  typedef void (APIENTRYP GLEEPFNGLCLEARBUFFERFVPROC) (GLenum  buffer, GLint  drawbuffer, const GLfloat * value);
+  GLEE_EXTERN GLEEPFNGLCLEARBUFFERFVPROC GLeeFuncPtr_glClearBufferfv;
+  #define glClearBufferfv GLeeFuncPtr_glClearBufferfv
+#endif
+#ifndef GLEE_H_DEFINED_glClearBufferfi
+#define GLEE_H_DEFINED_glClearBufferfi
+  typedef void (APIENTRYP GLEEPFNGLCLEARBUFFERFIPROC) (GLenum  buffer, GLint  drawbuffer, GLfloat  depth, GLint  stencil);
+  GLEE_EXTERN GLEEPFNGLCLEARBUFFERFIPROC GLeeFuncPtr_glClearBufferfi;
+  #define glClearBufferfi GLeeFuncPtr_glClearBufferfi
+#endif
+#ifndef GLEE_H_DEFINED_glGetStringi
+#define GLEE_H_DEFINED_glGetStringi
+  typedef const GLubyte * (APIENTRYP GLEEPFNGLGETSTRINGIPROC) (GLenum  name, GLuint  index);
+  GLEE_EXTERN GLEEPFNGLGETSTRINGIPROC GLeeFuncPtr_glGetStringi;
+  #define glGetStringi GLeeFuncPtr_glGetStringi
+#endif
+#endif 
+
+/* GL_VERSION_3_1 */
+
+#ifndef GL_VERSION_3_1
+#define GL_VERSION_3_1 1
+#define __GLEE_GL_VERSION_3_1 1
+/* Constants */
+#define GL_SAMPLER_2D_RECT                                 0x8B63
+#define GL_SAMPLER_2D_RECT_SHADOW                          0x8B64
+#define GL_SAMPLER_BUFFER                                  0x8DC2
+#define GL_INT_SAMPLER_2D_RECT                             0x8DCD
+#define GL_INT_SAMPLER_BUFFER                              0x8DD0
+#define GL_UNSIGNED_INT_SAMPLER_2D_RECT                    0x8DD5
+#define GL_UNSIGNED_INT_SAMPLER_BUFFER                     0x8DD8
+#define GL_TEXTURE_BUFFER                                  0x8C2A
+#define GL_MAX_TEXTURE_BUFFER_SIZE                         0x8C2B
+#define GL_TEXTURE_BINDING_BUFFER                          0x8C2C
+#define GL_TEXTURE_BUFFER_DATA_STORE_BINDING               0x8C2D
+#define GL_TEXTURE_BUFFER_FORMAT                           0x8C2E
+#define GL_TEXTURE_RECTANGLE                               0x84F5
+#define GL_TEXTURE_BINDING_RECTANGLE                       0x84F6
+#define GL_PROXY_TEXTURE_RECTANGLE                         0x84F7
+#define GL_MAX_RECTANGLE_TEXTURE_SIZE                      0x84F8
+#define GL_RED_SNORM                                       0x8F90
+#define GL_RG_SNORM                                        0x8F91
+#define GL_RGB_SNORM                                       0x8F92
+#define GL_RGBA_SNORM                                      0x8F93
+#define GL_R8_SNORM                                        0x8F94
+#define GL_RG8_SNORM                                       0x8F95
+#define GL_RGB8_SNORM                                      0x8F96
+#define GL_RGBA8_SNORM                                     0x8F97
+#define GL_R16_SNORM                                       0x8F98
+#define GL_RG16_SNORM                                      0x8F99
+#define GL_RGB16_SNORM                                     0x8F9A
+#define GL_RGBA16_SNORM                                    0x8F9B
+#define GL_SIGNED_NORMALIZED                               0x8F9C
+#define GL_PRIMITIVE_RESTART                               0x8F9D
+#define GL_PRIMITIVE_RESTART_INDEX                         0x8F9E
+#ifndef GLEE_H_DEFINED_glDrawArraysInstanced
+#define GLEE_H_DEFINED_glDrawArraysInstanced
+  typedef void (APIENTRYP GLEEPFNGLDRAWARRAYSINSTANCEDPROC) (GLenum  mode, GLint  first, GLsizei  count, GLsizei  primcount);
+  GLEE_EXTERN GLEEPFNGLDRAWARRAYSINSTANCEDPROC GLeeFuncPtr_glDrawArraysInstanced;
+  #define glDrawArraysInstanced GLeeFuncPtr_glDrawArraysInstanced
+#endif
+#ifndef GLEE_H_DEFINED_glDrawElementsInstanced
+#define GLEE_H_DEFINED_glDrawElementsInstanced
+  typedef void (APIENTRYP GLEEPFNGLDRAWELEMENTSINSTANCEDPROC) (GLenum  mode, GLsizei  count, GLenum  type, const GLvoid * indices, GLsizei  primcount);
+  GLEE_EXTERN GLEEPFNGLDRAWELEMENTSINSTANCEDPROC GLeeFuncPtr_glDrawElementsInstanced;
+  #define glDrawElementsInstanced GLeeFuncPtr_glDrawElementsInstanced
+#endif
+#ifndef GLEE_H_DEFINED_glTexBuffer
+#define GLEE_H_DEFINED_glTexBuffer
+  typedef void (APIENTRYP GLEEPFNGLTEXBUFFERPROC) (GLenum  target, GLenum  internalformat, GLuint  buffer);
+  GLEE_EXTERN GLEEPFNGLTEXBUFFERPROC GLeeFuncPtr_glTexBuffer;
+  #define glTexBuffer GLeeFuncPtr_glTexBuffer
+#endif
+#ifndef GLEE_H_DEFINED_glPrimitiveRestartIndex
+#define GLEE_H_DEFINED_glPrimitiveRestartIndex
+  typedef void (APIENTRYP GLEEPFNGLPRIMITIVERESTARTINDEXPROC) (GLuint  index);
+  GLEE_EXTERN GLEEPFNGLPRIMITIVERESTARTINDEXPROC GLeeFuncPtr_glPrimitiveRestartIndex;
+  #define glPrimitiveRestartIndex GLeeFuncPtr_glPrimitiveRestartIndex
+#endif
+#endif 
+
+/* GL_VERSION_3_2 */
+
+#ifndef GL_VERSION_3_2
+#define GL_VERSION_3_2 1
+#define __GLEE_GL_VERSION_3_2 1
+/* Constants */
+#define GL_CONTEXT_CORE_PROFILE_BIT                        0x00000001
+#define GL_CONTEXT_COMPATIBILITY_PROFILE_BIT               0x00000002
+#define GL_LINES_ADJACENCY                                 0x000A
+#define GL_LINE_STRIP_ADJACENCY                            0x000B
+#define GL_TRIANGLES_ADJACENCY                             0x000C
+#define GL_TRIANGLE_STRIP_ADJACENCY                        0x000D
+#define GL_PROGRAM_POINT_SIZE                              0x8642
+#define GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS                0x8C29
+#define GL_FRAMEBUFFER_ATTACHMENT_LAYERED                  0x8DA7
+#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS            0x8DA8
+#define GL_GEOMETRY_SHADER                                 0x8DD9
+#define GL_GEOMETRY_VERTICES_OUT                           0x8916
+#define GL_GEOMETRY_INPUT_TYPE                             0x8917
+#define GL_GEOMETRY_OUTPUT_TYPE                            0x8918
+#define GL_MAX_GEOMETRY_UNIFORM_COMPONENTS                 0x8DDF
+#define GL_MAX_GEOMETRY_OUTPUT_VERTICES                    0x8DE0
+#define GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS            0x8DE1
+#define GL_MAX_VERTEX_OUTPUT_COMPONENTS                    0x9122
+#define GL_MAX_GEOMETRY_INPUT_COMPONENTS                   0x9123
+#define GL_MAX_GEOMETRY_OUTPUT_COMPONENTS                  0x9124
+#define GL_MAX_FRAGMENT_INPUT_COMPONENTS                   0x9125
+#define GL_CONTEXT_PROFILE_MASK                            0x9126
+#ifndef GLEE_H_DEFINED_glGetInteger64i_v
+#define GLEE_H_DEFINED_glGetInteger64i_v
+  typedef void (APIENTRYP GLEEPFNGLGETINTEGER64I_VPROC) (GLenum  target, GLuint  index, GLint64 * data);
+  GLEE_EXTERN GLEEPFNGLGETINTEGER64I_VPROC GLeeFuncPtr_glGetInteger64i_v;
+  #define glGetInteger64i_v GLeeFuncPtr_glGetInteger64i_v
+#endif
+#ifndef GLEE_H_DEFINED_glGetBufferParameteri64v
+#define GLEE_H_DEFINED_glGetBufferParameteri64v
+  typedef void (APIENTRYP GLEEPFNGLGETBUFFERPARAMETERI64VPROC) (GLenum  target, GLenum  pname, GLint64 * params);
+  GLEE_EXTERN GLEEPFNGLGETBUFFERPARAMETERI64VPROC GLeeFuncPtr_glGetBufferParameteri64v;
+  #define glGetBufferParameteri64v GLeeFuncPtr_glGetBufferParameteri64v
+#endif
+#ifndef GLEE_H_DEFINED_glFramebufferTexture
+#define GLEE_H_DEFINED_glFramebufferTexture
+  typedef void (APIENTRYP GLEEPFNGLFRAMEBUFFERTEXTUREPROC) (GLenum  target, GLenum  attachment, GLuint  texture, GLint  level);
+  GLEE_EXTERN GLEEPFNGLFRAMEBUFFERTEXTUREPROC GLeeFuncPtr_glFramebufferTexture;
+  #define glFramebufferTexture GLeeFuncPtr_glFramebufferTexture
+#endif
+#endif 
+
+/* GL_VERSION_3_3 */
+
+#ifndef GL_VERSION_3_3
+#define GL_VERSION_3_3 1
+#define __GLEE_GL_VERSION_3_3 1
+/* Constants */
+#define GL_VERTEX_ATTRIB_ARRAY_DIVISOR                     0x88FE
+#ifndef GLEE_H_DEFINED_glVertexAttribDivisor
+#define GLEE_H_DEFINED_glVertexAttribDivisor
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIBDIVISORPROC) (GLuint  index, GLuint  divisor);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIBDIVISORPROC GLeeFuncPtr_glVertexAttribDivisor;
+  #define glVertexAttribDivisor GLeeFuncPtr_glVertexAttribDivisor
+#endif
+#endif 
+
+/* GL_VERSION_4_0 */
+
+#ifndef GL_VERSION_4_0
+#define GL_VERSION_4_0 1
+#define __GLEE_GL_VERSION_4_0 1
+/* Constants */
+#define GL_SAMPLE_SHADING                                  0x8C36
+#define GL_MIN_SAMPLE_SHADING_VALUE                        0x8C37
+#define GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET               0x8E5E
+#define GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET               0x8E5F
+#define GL_TEXTURE_CUBE_MAP_ARRAY                          0x9009
+#define GL_TEXTURE_BINDING_CUBE_MAP_ARRAY                  0x900A
+#define GL_PROXY_TEXTURE_CUBE_MAP_ARRAY                    0x900B
+#define GL_SAMPLER_CUBE_MAP_ARRAY                          0x900C
+#define GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW                   0x900D
+#define GL_INT_SAMPLER_CUBE_MAP_ARRAY                      0x900E
+#define GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY             0x900F
+#ifndef GLEE_H_DEFINED_glMinSampleShading
+#define GLEE_H_DEFINED_glMinSampleShading
+  typedef void (APIENTRYP GLEEPFNGLMINSAMPLESHADINGPROC) (GLclampf  value);
+  GLEE_EXTERN GLEEPFNGLMINSAMPLESHADINGPROC GLeeFuncPtr_glMinSampleShading;
+  #define glMinSampleShading GLeeFuncPtr_glMinSampleShading
+#endif
+#ifndef GLEE_H_DEFINED_glBlendEquationi
+#define GLEE_H_DEFINED_glBlendEquationi
+  typedef void (APIENTRYP GLEEPFNGLBLENDEQUATIONIPROC) (GLuint  buf, GLenum  mode);
+  GLEE_EXTERN GLEEPFNGLBLENDEQUATIONIPROC GLeeFuncPtr_glBlendEquationi;
+  #define glBlendEquationi GLeeFuncPtr_glBlendEquationi
+#endif
+#ifndef GLEE_H_DEFINED_glBlendEquationSeparatei
+#define GLEE_H_DEFINED_glBlendEquationSeparatei
+  typedef void (APIENTRYP GLEEPFNGLBLENDEQUATIONSEPARATEIPROC) (GLuint  buf, GLenum  modeRGB, GLenum  modeAlpha);
+  GLEE_EXTERN GLEEPFNGLBLENDEQUATIONSEPARATEIPROC GLeeFuncPtr_glBlendEquationSeparatei;
+  #define glBlendEquationSeparatei GLeeFuncPtr_glBlendEquationSeparatei
+#endif
+#ifndef GLEE_H_DEFINED_glBlendFunci
+#define GLEE_H_DEFINED_glBlendFunci
+  typedef void (APIENTRYP GLEEPFNGLBLENDFUNCIPROC) (GLuint  buf, GLenum  src, GLenum  dst);
+  GLEE_EXTERN GLEEPFNGLBLENDFUNCIPROC GLeeFuncPtr_glBlendFunci;
+  #define glBlendFunci GLeeFuncPtr_glBlendFunci
+#endif
+#ifndef GLEE_H_DEFINED_glBlendFuncSeparatei
+#define GLEE_H_DEFINED_glBlendFuncSeparatei
+  typedef void (APIENTRYP GLEEPFNGLBLENDFUNCSEPARATEIPROC) (GLuint  buf, GLenum  srcRGB, GLenum  dstRGB, GLenum  srcAlpha, GLenum  dstAlpha);
+  GLEE_EXTERN GLEEPFNGLBLENDFUNCSEPARATEIPROC GLeeFuncPtr_glBlendFuncSeparatei;
+  #define glBlendFuncSeparatei GLeeFuncPtr_glBlendFuncSeparatei
+#endif
+#endif 
+
+/* GL_VERSION_4_1 */
+
+#ifndef GL_VERSION_4_1
+#define GL_VERSION_4_1 1
+#define __GLEE_GL_VERSION_4_1 1
+/* Constants */
+#endif 
+
+/* GL_VERSION_4_2 */
+
+#ifndef GL_VERSION_4_2
+#define GL_VERSION_4_2 1
+#define __GLEE_GL_VERSION_4_2 1
+/* Constants */
+#endif 
+
+/* GL_ARB_multitexture */
+
+#ifndef GL_ARB_multitexture
+#define GL_ARB_multitexture 1
+#define __GLEE_GL_ARB_multitexture 1
+/* Constants */
+#define GL_TEXTURE0_ARB                                    0x84C0
+#define GL_TEXTURE1_ARB                                    0x84C1
+#define GL_TEXTURE2_ARB                                    0x84C2
+#define GL_TEXTURE3_ARB                                    0x84C3
+#define GL_TEXTURE4_ARB                                    0x84C4
+#define GL_TEXTURE5_ARB                                    0x84C5
+#define GL_TEXTURE6_ARB                                    0x84C6
+#define GL_TEXTURE7_ARB                                    0x84C7
+#define GL_TEXTURE8_ARB                                    0x84C8
+#define GL_TEXTURE9_ARB                                    0x84C9
+#define GL_TEXTURE10_ARB                                   0x84CA
+#define GL_TEXTURE11_ARB                                   0x84CB
+#define GL_TEXTURE12_ARB                                   0x84CC
+#define GL_TEXTURE13_ARB                                   0x84CD
+#define GL_TEXTURE14_ARB                                   0x84CE
+#define GL_TEXTURE15_ARB                                   0x84CF
+#define GL_TEXTURE16_ARB                                   0x84D0
+#define GL_TEXTURE17_ARB                                   0x84D1
+#define GL_TEXTURE18_ARB                                   0x84D2
+#define GL_TEXTURE19_ARB                                   0x84D3
+#define GL_TEXTURE20_ARB                                   0x84D4
+#define GL_TEXTURE21_ARB                                   0x84D5
+#define GL_TEXTURE22_ARB                                   0x84D6
+#define GL_TEXTURE23_ARB                                   0x84D7
+#define GL_TEXTURE24_ARB                                   0x84D8
+#define GL_TEXTURE25_ARB                                   0x84D9
+#define GL_TEXTURE26_ARB                                   0x84DA
+#define GL_TEXTURE27_ARB                                   0x84DB
+#define GL_TEXTURE28_ARB                                   0x84DC
+#define GL_TEXTURE29_ARB                                   0x84DD
+#define GL_TEXTURE30_ARB                                   0x84DE
+#define GL_TEXTURE31_ARB                                   0x84DF
+#define GL_ACTIVE_TEXTURE_ARB                              0x84E0
+#define GL_CLIENT_ACTIVE_TEXTURE_ARB                       0x84E1
+#define GL_MAX_TEXTURE_UNITS_ARB                           0x84E2
+#ifndef GLEE_H_DEFINED_glActiveTextureARB
+#define GLEE_H_DEFINED_glActiveTextureARB
+  typedef void (APIENTRYP GLEEPFNGLACTIVETEXTUREARBPROC) (GLenum  texture);
+  GLEE_EXTERN GLEEPFNGLACTIVETEXTUREARBPROC GLeeFuncPtr_glActiveTextureARB;
+  #define glActiveTextureARB GLeeFuncPtr_glActiveTextureARB
+#endif
+#ifndef GLEE_H_DEFINED_glClientActiveTextureARB
+#define GLEE_H_DEFINED_glClientActiveTextureARB
+  typedef void (APIENTRYP GLEEPFNGLCLIENTACTIVETEXTUREARBPROC) (GLenum  texture);
+  GLEE_EXTERN GLEEPFNGLCLIENTACTIVETEXTUREARBPROC GLeeFuncPtr_glClientActiveTextureARB;
+  #define glClientActiveTextureARB GLeeFuncPtr_glClientActiveTextureARB
+#endif
+#ifndef GLEE_H_DEFINED_glMultiTexCoord1dARB
+#define GLEE_H_DEFINED_glMultiTexCoord1dARB
+  typedef void (APIENTRYP GLEEPFNGLMULTITEXCOORD1DARBPROC) (GLenum  target, GLdouble  s);
+  GLEE_EXTERN GLEEPFNGLMULTITEXCOORD1DARBPROC GLeeFuncPtr_glMultiTexCoord1dARB;
+  #define glMultiTexCoord1dARB GLeeFuncPtr_glMultiTexCoord1dARB
+#endif
+#ifndef GLEE_H_DEFINED_glMultiTexCoord1dvARB
+#define GLEE_H_DEFINED_glMultiTexCoord1dvARB
+  typedef void (APIENTRYP GLEEPFNGLMULTITEXCOORD1DVARBPROC) (GLenum  target, const GLdouble * v);
+  GLEE_EXTERN GLEEPFNGLMULTITEXCOORD1DVARBPROC GLeeFuncPtr_glMultiTexCoord1dvARB;
+  #define glMultiTexCoord1dvARB GLeeFuncPtr_glMultiTexCoord1dvARB
+#endif
+#ifndef GLEE_H_DEFINED_glMultiTexCoord1fARB
+#define GLEE_H_DEFINED_glMultiTexCoord1fARB
+  typedef void (APIENTRYP GLEEPFNGLMULTITEXCOORD1FARBPROC) (GLenum  target, GLfloat  s);
+  GLEE_EXTERN GLEEPFNGLMULTITEXCOORD1FARBPROC GLeeFuncPtr_glMultiTexCoord1fARB;
+  #define glMultiTexCoord1fARB GLeeFuncPtr_glMultiTexCoord1fARB
+#endif
+#ifndef GLEE_H_DEFINED_glMultiTexCoord1fvARB
+#define GLEE_H_DEFINED_glMultiTexCoord1fvARB
+  typedef void (APIENTRYP GLEEPFNGLMULTITEXCOORD1FVARBPROC) (GLenum  target, const GLfloat * v);
+  GLEE_EXTERN GLEEPFNGLMULTITEXCOORD1FVARBPROC GLeeFuncPtr_glMultiTexCoord1fvARB;
+  #define glMultiTexCoord1fvARB GLeeFuncPtr_glMultiTexCoord1fvARB
+#endif
+#ifndef GLEE_H_DEFINED_glMultiTexCoord1iARB
+#define GLEE_H_DEFINED_glMultiTexCoord1iARB
+  typedef void (APIENTRYP GLEEPFNGLMULTITEXCOORD1IARBPROC) (GLenum  target, GLint  s);
+  GLEE_EXTERN GLEEPFNGLMULTITEXCOORD1IARBPROC GLeeFuncPtr_glMultiTexCoord1iARB;
+  #define glMultiTexCoord1iARB GLeeFuncPtr_glMultiTexCoord1iARB
+#endif
+#ifndef GLEE_H_DEFINED_glMultiTexCoord1ivARB
+#define GLEE_H_DEFINED_glMultiTexCoord1ivARB
+  typedef void (APIENTRYP GLEEPFNGLMULTITEXCOORD1IVARBPROC) (GLenum  target, const GLint * v);
+  GLEE_EXTERN GLEEPFNGLMULTITEXCOORD1IVARBPROC GLeeFuncPtr_glMultiTexCoord1ivARB;
+  #define glMultiTexCoord1ivARB GLeeFuncPtr_glMultiTexCoord1ivARB
+#endif
+#ifndef GLEE_H_DEFINED_glMultiTexCoord1sARB
+#define GLEE_H_DEFINED_glMultiTexCoord1sARB
+  typedef void (APIENTRYP GLEEPFNGLMULTITEXCOORD1SARBPROC) (GLenum  target, GLshort  s);
+  GLEE_EXTERN GLEEPFNGLMULTITEXCOORD1SARBPROC GLeeFuncPtr_glMultiTexCoord1sARB;
+  #define glMultiTexCoord1sARB GLeeFuncPtr_glMultiTexCoord1sARB
+#endif
+#ifndef GLEE_H_DEFINED_glMultiTexCoord1svARB
+#define GLEE_H_DEFINED_glMultiTexCoord1svARB
+  typedef void (APIENTRYP GLEEPFNGLMULTITEXCOORD1SVARBPROC) (GLenum  target, const GLshort * v);
+  GLEE_EXTERN GLEEPFNGLMULTITEXCOORD1SVARBPROC GLeeFuncPtr_glMultiTexCoord1svARB;
+  #define glMultiTexCoord1svARB GLeeFuncPtr_glMultiTexCoord1svARB
+#endif
+#ifndef GLEE_H_DEFINED_glMultiTexCoord2dARB
+#define GLEE_H_DEFINED_glMultiTexCoord2dARB
+  typedef void (APIENTRYP GLEEPFNGLMULTITEXCOORD2DARBPROC) (GLenum  target, GLdouble  s, GLdouble  t);
+  GLEE_EXTERN GLEEPFNGLMULTITEXCOORD2DARBPROC GLeeFuncPtr_glMultiTexCoord2dARB;
+  #define glMultiTexCoord2dARB GLeeFuncPtr_glMultiTexCoord2dARB
+#endif
+#ifndef GLEE_H_DEFINED_glMultiTexCoord2dvARB
+#define GLEE_H_DEFINED_glMultiTexCoord2dvARB
+  typedef void (APIENTRYP GLEEPFNGLMULTITEXCOORD2DVARBPROC) (GLenum  target, const GLdouble * v);
+  GLEE_EXTERN GLEEPFNGLMULTITEXCOORD2DVARBPROC GLeeFuncPtr_glMultiTexCoord2dvARB;
+  #define glMultiTexCoord2dvARB GLeeFuncPtr_glMultiTexCoord2dvARB
+#endif
+#ifndef GLEE_H_DEFINED_glMultiTexCoord2fARB
+#define GLEE_H_DEFINED_glMultiTexCoord2fARB
+  typedef void (APIENTRYP GLEEPFNGLMULTITEXCOORD2FARBPROC) (GLenum  target, GLfloat  s, GLfloat  t);
+  GLEE_EXTERN GLEEPFNGLMULTITEXCOORD2FARBPROC GLeeFuncPtr_glMultiTexCoord2fARB;
+  #define glMultiTexCoord2fARB GLeeFuncPtr_glMultiTexCoord2fARB
+#endif
+#ifndef GLEE_H_DEFINED_glMultiTexCoord2fvARB
+#define GLEE_H_DEFINED_glMultiTexCoord2fvARB
+  typedef void (APIENTRYP GLEEPFNGLMULTITEXCOORD2FVARBPROC) (GLenum  target, const GLfloat * v);
+  GLEE_EXTERN GLEEPFNGLMULTITEXCOORD2FVARBPROC GLeeFuncPtr_glMultiTexCoord2fvARB;
+  #define glMultiTexCoord2fvARB GLeeFuncPtr_glMultiTexCoord2fvARB
+#endif
+#ifndef GLEE_H_DEFINED_glMultiTexCoord2iARB
+#define GLEE_H_DEFINED_glMultiTexCoord2iARB
+  typedef void (APIENTRYP GLEEPFNGLMULTITEXCOORD2IARBPROC) (GLenum  target, GLint  s, GLint  t);
+  GLEE_EXTERN GLEEPFNGLMULTITEXCOORD2IARBPROC GLeeFuncPtr_glMultiTexCoord2iARB;
+  #define glMultiTexCoord2iARB GLeeFuncPtr_glMultiTexCoord2iARB
+#endif
+#ifndef GLEE_H_DEFINED_glMultiTexCoord2ivARB
+#define GLEE_H_DEFINED_glMultiTexCoord2ivARB
+  typedef void (APIENTRYP GLEEPFNGLMULTITEXCOORD2IVARBPROC) (GLenum  target, const GLint * v);
+  GLEE_EXTERN GLEEPFNGLMULTITEXCOORD2IVARBPROC GLeeFuncPtr_glMultiTexCoord2ivARB;
+  #define glMultiTexCoord2ivARB GLeeFuncPtr_glMultiTexCoord2ivARB
+#endif
+#ifndef GLEE_H_DEFINED_glMultiTexCoord2sARB
+#define GLEE_H_DEFINED_glMultiTexCoord2sARB
+  typedef void (APIENTRYP GLEEPFNGLMULTITEXCOORD2SARBPROC) (GLenum  target, GLshort  s, GLshort  t);
+  GLEE_EXTERN GLEEPFNGLMULTITEXCOORD2SARBPROC GLeeFuncPtr_glMultiTexCoord2sARB;
+  #define glMultiTexCoord2sARB GLeeFuncPtr_glMultiTexCoord2sARB
+#endif
+#ifndef GLEE_H_DEFINED_glMultiTexCoord2svARB
+#define GLEE_H_DEFINED_glMultiTexCoord2svARB
+  typedef void (APIENTRYP GLEEPFNGLMULTITEXCOORD2SVARBPROC) (GLenum  target, const GLshort * v);
+  GLEE_EXTERN GLEEPFNGLMULTITEXCOORD2SVARBPROC GLeeFuncPtr_glMultiTexCoord2svARB;
+  #define glMultiTexCoord2svARB GLeeFuncPtr_glMultiTexCoord2svARB
+#endif
+#ifndef GLEE_H_DEFINED_glMultiTexCoord3dARB
+#define GLEE_H_DEFINED_glMultiTexCoord3dARB
+  typedef void (APIENTRYP GLEEPFNGLMULTITEXCOORD3DARBPROC) (GLenum  target, GLdouble  s, GLdouble  t, GLdouble  r);
+  GLEE_EXTERN GLEEPFNGLMULTITEXCOORD3DARBPROC GLeeFuncPtr_glMultiTexCoord3dARB;
+  #define glMultiTexCoord3dARB GLeeFuncPtr_glMultiTexCoord3dARB
+#endif
+#ifndef GLEE_H_DEFINED_glMultiTexCoord3dvARB
+#define GLEE_H_DEFINED_glMultiTexCoord3dvARB
+  typedef void (APIENTRYP GLEEPFNGLMULTITEXCOORD3DVARBPROC) (GLenum  target, const GLdouble * v);
+  GLEE_EXTERN GLEEPFNGLMULTITEXCOORD3DVARBPROC GLeeFuncPtr_glMultiTexCoord3dvARB;
+  #define glMultiTexCoord3dvARB GLeeFuncPtr_glMultiTexCoord3dvARB
+#endif
+#ifndef GLEE_H_DEFINED_glMultiTexCoord3fARB
+#define GLEE_H_DEFINED_glMultiTexCoord3fARB
+  typedef void (APIENTRYP GLEEPFNGLMULTITEXCOORD3FARBPROC) (GLenum  target, GLfloat  s, GLfloat  t, GLfloat  r);
+  GLEE_EXTERN GLEEPFNGLMULTITEXCOORD3FARBPROC GLeeFuncPtr_glMultiTexCoord3fARB;
+  #define glMultiTexCoord3fARB GLeeFuncPtr_glMultiTexCoord3fARB
+#endif
+#ifndef GLEE_H_DEFINED_glMultiTexCoord3fvARB
+#define GLEE_H_DEFINED_glMultiTexCoord3fvARB
+  typedef void (APIENTRYP GLEEPFNGLMULTITEXCOORD3FVARBPROC) (GLenum  target, const GLfloat * v);
+  GLEE_EXTERN GLEEPFNGLMULTITEXCOORD3FVARBPROC GLeeFuncPtr_glMultiTexCoord3fvARB;
+  #define glMultiTexCoord3fvARB GLeeFuncPtr_glMultiTexCoord3fvARB
+#endif
+#ifndef GLEE_H_DEFINED_glMultiTexCoord3iARB
+#define GLEE_H_DEFINED_glMultiTexCoord3iARB
+  typedef void (APIENTRYP GLEEPFNGLMULTITEXCOORD3IARBPROC) (GLenum  target, GLint  s, GLint  t, GLint  r);
+  GLEE_EXTERN GLEEPFNGLMULTITEXCOORD3IARBPROC GLeeFuncPtr_glMultiTexCoord3iARB;
+  #define glMultiTexCoord3iARB GLeeFuncPtr_glMultiTexCoord3iARB
+#endif
+#ifndef GLEE_H_DEFINED_glMultiTexCoord3ivARB
+#define GLEE_H_DEFINED_glMultiTexCoord3ivARB
+  typedef void (APIENTRYP GLEEPFNGLMULTITEXCOORD3IVARBPROC) (GLenum  target, const GLint * v);
+  GLEE_EXTERN GLEEPFNGLMULTITEXCOORD3IVARBPROC GLeeFuncPtr_glMultiTexCoord3ivARB;
+  #define glMultiTexCoord3ivARB GLeeFuncPtr_glMultiTexCoord3ivARB
+#endif
+#ifndef GLEE_H_DEFINED_glMultiTexCoord3sARB
+#define GLEE_H_DEFINED_glMultiTexCoord3sARB
+  typedef void (APIENTRYP GLEEPFNGLMULTITEXCOORD3SARBPROC) (GLenum  target, GLshort  s, GLshort  t, GLshort  r);
+  GLEE_EXTERN GLEEPFNGLMULTITEXCOORD3SARBPROC GLeeFuncPtr_glMultiTexCoord3sARB;
+  #define glMultiTexCoord3sARB GLeeFuncPtr_glMultiTexCoord3sARB
+#endif
+#ifndef GLEE_H_DEFINED_glMultiTexCoord3svARB
+#define GLEE_H_DEFINED_glMultiTexCoord3svARB
+  typedef void (APIENTRYP GLEEPFNGLMULTITEXCOORD3SVARBPROC) (GLenum  target, const GLshort * v);
+  GLEE_EXTERN GLEEPFNGLMULTITEXCOORD3SVARBPROC GLeeFuncPtr_glMultiTexCoord3svARB;
+  #define glMultiTexCoord3svARB GLeeFuncPtr_glMultiTexCoord3svARB
+#endif
+#ifndef GLEE_H_DEFINED_glMultiTexCoord4dARB
+#define GLEE_H_DEFINED_glMultiTexCoord4dARB
+  typedef void (APIENTRYP GLEEPFNGLMULTITEXCOORD4DARBPROC) (GLenum  target, GLdouble  s, GLdouble  t, GLdouble  r, GLdouble  q);
+  GLEE_EXTERN GLEEPFNGLMULTITEXCOORD4DARBPROC GLeeFuncPtr_glMultiTexCoord4dARB;
+  #define glMultiTexCoord4dARB GLeeFuncPtr_glMultiTexCoord4dARB
+#endif
+#ifndef GLEE_H_DEFINED_glMultiTexCoord4dvARB
+#define GLEE_H_DEFINED_glMultiTexCoord4dvARB
+  typedef void (APIENTRYP GLEEPFNGLMULTITEXCOORD4DVARBPROC) (GLenum  target, const GLdouble * v);
+  GLEE_EXTERN GLEEPFNGLMULTITEXCOORD4DVARBPROC GLeeFuncPtr_glMultiTexCoord4dvARB;
+  #define glMultiTexCoord4dvARB GLeeFuncPtr_glMultiTexCoord4dvARB
+#endif
+#ifndef GLEE_H_DEFINED_glMultiTexCoord4fARB
+#define GLEE_H_DEFINED_glMultiTexCoord4fARB
+  typedef void (APIENTRYP GLEEPFNGLMULTITEXCOORD4FARBPROC) (GLenum  target, GLfloat  s, GLfloat  t, GLfloat  r, GLfloat  q);
+  GLEE_EXTERN GLEEPFNGLMULTITEXCOORD4FARBPROC GLeeFuncPtr_glMultiTexCoord4fARB;
+  #define glMultiTexCoord4fARB GLeeFuncPtr_glMultiTexCoord4fARB
+#endif
+#ifndef GLEE_H_DEFINED_glMultiTexCoord4fvARB
+#define GLEE_H_DEFINED_glMultiTexCoord4fvARB
+  typedef void (APIENTRYP GLEEPFNGLMULTITEXCOORD4FVARBPROC) (GLenum  target, const GLfloat * v);
+  GLEE_EXTERN GLEEPFNGLMULTITEXCOORD4FVARBPROC GLeeFuncPtr_glMultiTexCoord4fvARB;
+  #define glMultiTexCoord4fvARB GLeeFuncPtr_glMultiTexCoord4fvARB
+#endif
+#ifndef GLEE_H_DEFINED_glMultiTexCoord4iARB
+#define GLEE_H_DEFINED_glMultiTexCoord4iARB
+  typedef void (APIENTRYP GLEEPFNGLMULTITEXCOORD4IARBPROC) (GLenum  target, GLint  s, GLint  t, GLint  r, GLint  q);
+  GLEE_EXTERN GLEEPFNGLMULTITEXCOORD4IARBPROC GLeeFuncPtr_glMultiTexCoord4iARB;
+  #define glMultiTexCoord4iARB GLeeFuncPtr_glMultiTexCoord4iARB
+#endif
+#ifndef GLEE_H_DEFINED_glMultiTexCoord4ivARB
+#define GLEE_H_DEFINED_glMultiTexCoord4ivARB
+  typedef void (APIENTRYP GLEEPFNGLMULTITEXCOORD4IVARBPROC) (GLenum  target, const GLint * v);
+  GLEE_EXTERN GLEEPFNGLMULTITEXCOORD4IVARBPROC GLeeFuncPtr_glMultiTexCoord4ivARB;
+  #define glMultiTexCoord4ivARB GLeeFuncPtr_glMultiTexCoord4ivARB
+#endif
+#ifndef GLEE_H_DEFINED_glMultiTexCoord4sARB
+#define GLEE_H_DEFINED_glMultiTexCoord4sARB
+  typedef void (APIENTRYP GLEEPFNGLMULTITEXCOORD4SARBPROC) (GLenum  target, GLshort  s, GLshort  t, GLshort  r, GLshort  q);
+  GLEE_EXTERN GLEEPFNGLMULTITEXCOORD4SARBPROC GLeeFuncPtr_glMultiTexCoord4sARB;
+  #define glMultiTexCoord4sARB GLeeFuncPtr_glMultiTexCoord4sARB
+#endif
+#ifndef GLEE_H_DEFINED_glMultiTexCoord4svARB
+#define GLEE_H_DEFINED_glMultiTexCoord4svARB
+  typedef void (APIENTRYP GLEEPFNGLMULTITEXCOORD4SVARBPROC) (GLenum  target, const GLshort * v);
+  GLEE_EXTERN GLEEPFNGLMULTITEXCOORD4SVARBPROC GLeeFuncPtr_glMultiTexCoord4svARB;
+  #define glMultiTexCoord4svARB GLeeFuncPtr_glMultiTexCoord4svARB
+#endif
+#endif 
+
+/* GL_ARB_transpose_matrix */
+
+#ifndef GL_ARB_transpose_matrix
+#define GL_ARB_transpose_matrix 1
+#define __GLEE_GL_ARB_transpose_matrix 1
+/* Constants */
+#define GL_TRANSPOSE_MODELVIEW_MATRIX_ARB                  0x84E3
+#define GL_TRANSPOSE_PROJECTION_MATRIX_ARB                 0x84E4
+#define GL_TRANSPOSE_TEXTURE_MATRIX_ARB                    0x84E5
+#define GL_TRANSPOSE_COLOR_MATRIX_ARB                      0x84E6
+#ifndef GLEE_H_DEFINED_glLoadTransposeMatrixfARB
+#define GLEE_H_DEFINED_glLoadTransposeMatrixfARB
+  typedef void (APIENTRYP GLEEPFNGLLOADTRANSPOSEMATRIXFARBPROC) (const GLfloat * m);
+  GLEE_EXTERN GLEEPFNGLLOADTRANSPOSEMATRIXFARBPROC GLeeFuncPtr_glLoadTransposeMatrixfARB;
+  #define glLoadTransposeMatrixfARB GLeeFuncPtr_glLoadTransposeMatrixfARB
+#endif
+#ifndef GLEE_H_DEFINED_glLoadTransposeMatrixdARB
+#define GLEE_H_DEFINED_glLoadTransposeMatrixdARB
+  typedef void (APIENTRYP GLEEPFNGLLOADTRANSPOSEMATRIXDARBPROC) (const GLdouble * m);
+  GLEE_EXTERN GLEEPFNGLLOADTRANSPOSEMATRIXDARBPROC GLeeFuncPtr_glLoadTransposeMatrixdARB;
+  #define glLoadTransposeMatrixdARB GLeeFuncPtr_glLoadTransposeMatrixdARB
+#endif
+#ifndef GLEE_H_DEFINED_glMultTransposeMatrixfARB
+#define GLEE_H_DEFINED_glMultTransposeMatrixfARB
+  typedef void (APIENTRYP GLEEPFNGLMULTTRANSPOSEMATRIXFARBPROC) (const GLfloat * m);
+  GLEE_EXTERN GLEEPFNGLMULTTRANSPOSEMATRIXFARBPROC GLeeFuncPtr_glMultTransposeMatrixfARB;
+  #define glMultTransposeMatrixfARB GLeeFuncPtr_glMultTransposeMatrixfARB
+#endif
+#ifndef GLEE_H_DEFINED_glMultTransposeMatrixdARB
+#define GLEE_H_DEFINED_glMultTransposeMatrixdARB
+  typedef void (APIENTRYP GLEEPFNGLMULTTRANSPOSEMATRIXDARBPROC) (const GLdouble * m);
+  GLEE_EXTERN GLEEPFNGLMULTTRANSPOSEMATRIXDARBPROC GLeeFuncPtr_glMultTransposeMatrixdARB;
+  #define glMultTransposeMatrixdARB GLeeFuncPtr_glMultTransposeMatrixdARB
+#endif
+#endif 
+
+/* GL_ARB_multisample */
+
+#ifndef GL_ARB_multisample
+#define GL_ARB_multisample 1
+#define __GLEE_GL_ARB_multisample 1
+/* Constants */
+#define GL_MULTISAMPLE_ARB                                 0x809D
+#define GL_SAMPLE_ALPHA_TO_COVERAGE_ARB                    0x809E
+#define GL_SAMPLE_ALPHA_TO_ONE_ARB                         0x809F
+#define GL_SAMPLE_COVERAGE_ARB                             0x80A0
+#define GL_SAMPLE_BUFFERS_ARB                              0x80A8
+#define GL_SAMPLES_ARB                                     0x80A9
+#define GL_SAMPLE_COVERAGE_VALUE_ARB                       0x80AA
+#define GL_SAMPLE_COVERAGE_INVERT_ARB                      0x80AB
+#define GL_MULTISAMPLE_BIT_ARB                             0x20000000
+#ifndef GLEE_H_DEFINED_glSampleCoverageARB
+#define GLEE_H_DEFINED_glSampleCoverageARB
+  typedef void (APIENTRYP GLEEPFNGLSAMPLECOVERAGEARBPROC) (GLclampf  value, GLboolean  invert);
+  GLEE_EXTERN GLEEPFNGLSAMPLECOVERAGEARBPROC GLeeFuncPtr_glSampleCoverageARB;
+  #define glSampleCoverageARB GLeeFuncPtr_glSampleCoverageARB
+#endif
+#endif 
+
+/* GL_ARB_texture_env_add */
+
+#ifndef GL_ARB_texture_env_add
+#define GL_ARB_texture_env_add 1
+#define __GLEE_GL_ARB_texture_env_add 1
+/* Constants */
+#endif 
+
+/* GL_ARB_texture_cube_map */
+
+#ifndef GL_ARB_texture_cube_map
+#define GL_ARB_texture_cube_map 1
+#define __GLEE_GL_ARB_texture_cube_map 1
+/* Constants */
+#define GL_NORMAL_MAP_ARB                                  0x8511
+#define GL_REFLECTION_MAP_ARB                              0x8512
+#define GL_TEXTURE_CUBE_MAP_ARB                            0x8513
+#define GL_TEXTURE_BINDING_CUBE_MAP_ARB                    0x8514
+#define GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB                 0x8515
+#define GL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB                 0x8516
+#define GL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB                 0x8517
+#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB                 0x8518
+#define GL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB                 0x8519
+#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB                 0x851A
+#define GL_PROXY_TEXTURE_CUBE_MAP_ARB                      0x851B
+#define GL_MAX_CUBE_MAP_TEXTURE_SIZE_ARB                   0x851C
+#endif 
+
+/* GL_ARB_texture_compression */
+
+#ifndef GL_ARB_texture_compression
+#define GL_ARB_texture_compression 1
+#define __GLEE_GL_ARB_texture_compression 1
+/* Constants */
+#define GL_COMPRESSED_ALPHA_ARB                            0x84E9
+#define GL_COMPRESSED_LUMINANCE_ARB                        0x84EA
+#define GL_COMPRESSED_LUMINANCE_ALPHA_ARB                  0x84EB
+#define GL_COMPRESSED_INTENSITY_ARB                        0x84EC
+#define GL_COMPRESSED_RGB_ARB                              0x84ED
+#define GL_COMPRESSED_RGBA_ARB                             0x84EE
+#define GL_TEXTURE_COMPRESSION_HINT_ARB                    0x84EF
+#define GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB               0x86A0
+#define GL_TEXTURE_COMPRESSED_ARB                          0x86A1
+#define GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB              0x86A2
+#define GL_COMPRESSED_TEXTURE_FORMATS_ARB                  0x86A3
+#ifndef GLEE_H_DEFINED_glCompressedTexImage3DARB
+#define GLEE_H_DEFINED_glCompressedTexImage3DARB
+  typedef void (APIENTRYP GLEEPFNGLCOMPRESSEDTEXIMAGE3DARBPROC) (GLenum  target, GLint  level, GLenum  internalformat, GLsizei  width, GLsizei  height, GLsizei  depth, GLint  border, GLsizei  imageSize, const GLvoid * data);
+  GLEE_EXTERN GLEEPFNGLCOMPRESSEDTEXIMAGE3DARBPROC GLeeFuncPtr_glCompressedTexImage3DARB;
+  #define glCompressedTexImage3DARB GLeeFuncPtr_glCompressedTexImage3DARB
+#endif
+#ifndef GLEE_H_DEFINED_glCompressedTexImage2DARB
+#define GLEE_H_DEFINED_glCompressedTexImage2DARB
+  typedef void (APIENTRYP GLEEPFNGLCOMPRESSEDTEXIMAGE2DARBPROC) (GLenum  target, GLint  level, GLenum  internalformat, GLsizei  width, GLsizei  height, GLint  border, GLsizei  imageSize, const GLvoid * data);
+  GLEE_EXTERN GLEEPFNGLCOMPRESSEDTEXIMAGE2DARBPROC GLeeFuncPtr_glCompressedTexImage2DARB;
+  #define glCompressedTexImage2DARB GLeeFuncPtr_glCompressedTexImage2DARB
+#endif
+#ifndef GLEE_H_DEFINED_glCompressedTexImage1DARB
+#define GLEE_H_DEFINED_glCompressedTexImage1DARB
+  typedef void (APIENTRYP GLEEPFNGLCOMPRESSEDTEXIMAGE1DARBPROC) (GLenum  target, GLint  level, GLenum  internalformat, GLsizei  width, GLint  border, GLsizei  imageSize, const GLvoid * data);
+  GLEE_EXTERN GLEEPFNGLCOMPRESSEDTEXIMAGE1DARBPROC GLeeFuncPtr_glCompressedTexImage1DARB;
+  #define glCompressedTexImage1DARB GLeeFuncPtr_glCompressedTexImage1DARB
+#endif
+#ifndef GLEE_H_DEFINED_glCompressedTexSubImage3DARB
+#define GLEE_H_DEFINED_glCompressedTexSubImage3DARB
+  typedef void (APIENTRYP GLEEPFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC) (GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLint  zoffset, GLsizei  width, GLsizei  height, GLsizei  depth, GLenum  format, GLsizei  imageSize, const GLvoid * data);
+  GLEE_EXTERN GLEEPFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC GLeeFuncPtr_glCompressedTexSubImage3DARB;
+  #define glCompressedTexSubImage3DARB GLeeFuncPtr_glCompressedTexSubImage3DARB
+#endif
+#ifndef GLEE_H_DEFINED_glCompressedTexSubImage2DARB
+#define GLEE_H_DEFINED_glCompressedTexSubImage2DARB
+  typedef void (APIENTRYP GLEEPFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC) (GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLsizei  width, GLsizei  height, GLenum  format, GLsizei  imageSize, const GLvoid * data);
+  GLEE_EXTERN GLEEPFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC GLeeFuncPtr_glCompressedTexSubImage2DARB;
+  #define glCompressedTexSubImage2DARB GLeeFuncPtr_glCompressedTexSubImage2DARB
+#endif
+#ifndef GLEE_H_DEFINED_glCompressedTexSubImage1DARB
+#define GLEE_H_DEFINED_glCompressedTexSubImage1DARB
+  typedef void (APIENTRYP GLEEPFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC) (GLenum  target, GLint  level, GLint  xoffset, GLsizei  width, GLenum  format, GLsizei  imageSize, const GLvoid * data);
+  GLEE_EXTERN GLEEPFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC GLeeFuncPtr_glCompressedTexSubImage1DARB;
+  #define glCompressedTexSubImage1DARB GLeeFuncPtr_glCompressedTexSubImage1DARB
+#endif
+#ifndef GLEE_H_DEFINED_glGetCompressedTexImageARB
+#define GLEE_H_DEFINED_glGetCompressedTexImageARB
+  typedef void (APIENTRYP GLEEPFNGLGETCOMPRESSEDTEXIMAGEARBPROC) (GLenum  target, GLint  level, GLvoid * img);
+  GLEE_EXTERN GLEEPFNGLGETCOMPRESSEDTEXIMAGEARBPROC GLeeFuncPtr_glGetCompressedTexImageARB;
+  #define glGetCompressedTexImageARB GLeeFuncPtr_glGetCompressedTexImageARB
+#endif
+#endif 
+
+/* GL_ARB_texture_border_clamp */
+
+#ifndef GL_ARB_texture_border_clamp
+#define GL_ARB_texture_border_clamp 1
+#define __GLEE_GL_ARB_texture_border_clamp 1
+/* Constants */
+#define GL_CLAMP_TO_BORDER_ARB                             0x812D
+#endif 
+
+/* GL_ARB_point_parameters */
+
+#ifndef GL_ARB_point_parameters
+#define GL_ARB_point_parameters 1
+#define __GLEE_GL_ARB_point_parameters 1
+/* Constants */
+#define GL_POINT_SIZE_MIN_ARB                              0x8126
+#define GL_POINT_SIZE_MAX_ARB                              0x8127
+#define GL_POINT_FADE_THRESHOLD_SIZE_ARB                   0x8128
+#define GL_POINT_DISTANCE_ATTENUATION_ARB                  0x8129
+#ifndef GLEE_H_DEFINED_glPointParameterfARB
+#define GLEE_H_DEFINED_glPointParameterfARB
+  typedef void (APIENTRYP GLEEPFNGLPOINTPARAMETERFARBPROC) (GLenum  pname, GLfloat  param);
+  GLEE_EXTERN GLEEPFNGLPOINTPARAMETERFARBPROC GLeeFuncPtr_glPointParameterfARB;
+  #define glPointParameterfARB GLeeFuncPtr_glPointParameterfARB
+#endif
+#ifndef GLEE_H_DEFINED_glPointParameterfvARB
+#define GLEE_H_DEFINED_glPointParameterfvARB
+  typedef void (APIENTRYP GLEEPFNGLPOINTPARAMETERFVARBPROC) (GLenum  pname, const GLfloat * params);
+  GLEE_EXTERN GLEEPFNGLPOINTPARAMETERFVARBPROC GLeeFuncPtr_glPointParameterfvARB;
+  #define glPointParameterfvARB GLeeFuncPtr_glPointParameterfvARB
+#endif
+#endif 
+
+/* GL_ARB_vertex_blend */
+
+#ifndef GL_ARB_vertex_blend
+#define GL_ARB_vertex_blend 1
+#define __GLEE_GL_ARB_vertex_blend 1
+/* Constants */
+#define GL_MAX_VERTEX_UNITS_ARB                            0x86A4
+#define GL_ACTIVE_VERTEX_UNITS_ARB                         0x86A5
+#define GL_WEIGHT_SUM_UNITY_ARB                            0x86A6
+#define GL_VERTEX_BLEND_ARB                                0x86A7
+#define GL_CURRENT_WEIGHT_ARB                              0x86A8
+#define GL_WEIGHT_ARRAY_TYPE_ARB                           0x86A9
+#define GL_WEIGHT_ARRAY_STRIDE_ARB                         0x86AA
+#define GL_WEIGHT_ARRAY_SIZE_ARB                           0x86AB
+#define GL_WEIGHT_ARRAY_POINTER_ARB                        0x86AC
+#define GL_WEIGHT_ARRAY_ARB                                0x86AD
+#define GL_MODELVIEW0_ARB                                  0x1700
+#define GL_MODELVIEW1_ARB                                  0x850A
+#define GL_MODELVIEW2_ARB                                  0x8722
+#define GL_MODELVIEW3_ARB                                  0x8723
+#define GL_MODELVIEW4_ARB                                  0x8724
+#define GL_MODELVIEW5_ARB                                  0x8725
+#define GL_MODELVIEW6_ARB                                  0x8726
+#define GL_MODELVIEW7_ARB                                  0x8727
+#define GL_MODELVIEW8_ARB                                  0x8728
+#define GL_MODELVIEW9_ARB                                  0x8729
+#define GL_MODELVIEW10_ARB                                 0x872A
+#define GL_MODELVIEW11_ARB                                 0x872B
+#define GL_MODELVIEW12_ARB                                 0x872C
+#define GL_MODELVIEW13_ARB                                 0x872D
+#define GL_MODELVIEW14_ARB                                 0x872E
+#define GL_MODELVIEW15_ARB                                 0x872F
+#define GL_MODELVIEW16_ARB                                 0x8730
+#define GL_MODELVIEW17_ARB                                 0x8731
+#define GL_MODELVIEW18_ARB                                 0x8732
+#define GL_MODELVIEW19_ARB                                 0x8733
+#define GL_MODELVIEW20_ARB                                 0x8734
+#define GL_MODELVIEW21_ARB                                 0x8735
+#define GL_MODELVIEW22_ARB                                 0x8736
+#define GL_MODELVIEW23_ARB                                 0x8737
+#define GL_MODELVIEW24_ARB                                 0x8738
+#define GL_MODELVIEW25_ARB                                 0x8739
+#define GL_MODELVIEW26_ARB                                 0x873A
+#define GL_MODELVIEW27_ARB                                 0x873B
+#define GL_MODELVIEW28_ARB                                 0x873C
+#define GL_MODELVIEW29_ARB                                 0x873D
+#define GL_MODELVIEW30_ARB                                 0x873E
+#define GL_MODELVIEW31_ARB                                 0x873F
+#ifndef GLEE_H_DEFINED_glWeightbvARB
+#define GLEE_H_DEFINED_glWeightbvARB
+  typedef void (APIENTRYP GLEEPFNGLWEIGHTBVARBPROC) (GLint  size, const GLbyte * weights);
+  GLEE_EXTERN GLEEPFNGLWEIGHTBVARBPROC GLeeFuncPtr_glWeightbvARB;
+  #define glWeightbvARB GLeeFuncPtr_glWeightbvARB
+#endif
+#ifndef GLEE_H_DEFINED_glWeightsvARB
+#define GLEE_H_DEFINED_glWeightsvARB
+  typedef void (APIENTRYP GLEEPFNGLWEIGHTSVARBPROC) (GLint  size, const GLshort * weights);
+  GLEE_EXTERN GLEEPFNGLWEIGHTSVARBPROC GLeeFuncPtr_glWeightsvARB;
+  #define glWeightsvARB GLeeFuncPtr_glWeightsvARB
+#endif
+#ifndef GLEE_H_DEFINED_glWeightivARB
+#define GLEE_H_DEFINED_glWeightivARB
+  typedef void (APIENTRYP GLEEPFNGLWEIGHTIVARBPROC) (GLint  size, const GLint * weights);
+  GLEE_EXTERN GLEEPFNGLWEIGHTIVARBPROC GLeeFuncPtr_glWeightivARB;
+  #define glWeightivARB GLeeFuncPtr_glWeightivARB
+#endif
+#ifndef GLEE_H_DEFINED_glWeightfvARB
+#define GLEE_H_DEFINED_glWeightfvARB
+  typedef void (APIENTRYP GLEEPFNGLWEIGHTFVARBPROC) (GLint  size, const GLfloat * weights);
+  GLEE_EXTERN GLEEPFNGLWEIGHTFVARBPROC GLeeFuncPtr_glWeightfvARB;
+  #define glWeightfvARB GLeeFuncPtr_glWeightfvARB
+#endif
+#ifndef GLEE_H_DEFINED_glWeightdvARB
+#define GLEE_H_DEFINED_glWeightdvARB
+  typedef void (APIENTRYP GLEEPFNGLWEIGHTDVARBPROC) (GLint  size, const GLdouble * weights);
+  GLEE_EXTERN GLEEPFNGLWEIGHTDVARBPROC GLeeFuncPtr_glWeightdvARB;
+  #define glWeightdvARB GLeeFuncPtr_glWeightdvARB
+#endif
+#ifndef GLEE_H_DEFINED_glWeightubvARB
+#define GLEE_H_DEFINED_glWeightubvARB
+  typedef void (APIENTRYP GLEEPFNGLWEIGHTUBVARBPROC) (GLint  size, const GLubyte * weights);
+  GLEE_EXTERN GLEEPFNGLWEIGHTUBVARBPROC GLeeFuncPtr_glWeightubvARB;
+  #define glWeightubvARB GLeeFuncPtr_glWeightubvARB
+#endif
+#ifndef GLEE_H_DEFINED_glWeightusvARB
+#define GLEE_H_DEFINED_glWeightusvARB
+  typedef void (APIENTRYP GLEEPFNGLWEIGHTUSVARBPROC) (GLint  size, const GLushort * weights);
+  GLEE_EXTERN GLEEPFNGLWEIGHTUSVARBPROC GLeeFuncPtr_glWeightusvARB;
+  #define glWeightusvARB GLeeFuncPtr_glWeightusvARB
+#endif
+#ifndef GLEE_H_DEFINED_glWeightuivARB
+#define GLEE_H_DEFINED_glWeightuivARB
+  typedef void (APIENTRYP GLEEPFNGLWEIGHTUIVARBPROC) (GLint  size, const GLuint * weights);
+  GLEE_EXTERN GLEEPFNGLWEIGHTUIVARBPROC GLeeFuncPtr_glWeightuivARB;
+  #define glWeightuivARB GLeeFuncPtr_glWeightuivARB
+#endif
+#ifndef GLEE_H_DEFINED_glWeightPointerARB
+#define GLEE_H_DEFINED_glWeightPointerARB
+  typedef void (APIENTRYP GLEEPFNGLWEIGHTPOINTERARBPROC) (GLint  size, GLenum  type, GLsizei  stride, const GLvoid * pointer);
+  GLEE_EXTERN GLEEPFNGLWEIGHTPOINTERARBPROC GLeeFuncPtr_glWeightPointerARB;
+  #define glWeightPointerARB GLeeFuncPtr_glWeightPointerARB
+#endif
+#ifndef GLEE_H_DEFINED_glVertexBlendARB
+#define GLEE_H_DEFINED_glVertexBlendARB
+  typedef void (APIENTRYP GLEEPFNGLVERTEXBLENDARBPROC) (GLint  count);
+  GLEE_EXTERN GLEEPFNGLVERTEXBLENDARBPROC GLeeFuncPtr_glVertexBlendARB;
+  #define glVertexBlendARB GLeeFuncPtr_glVertexBlendARB
+#endif
+#endif 
+
+/* GL_ARB_matrix_palette */
+
+#ifndef GL_ARB_matrix_palette
+#define GL_ARB_matrix_palette 1
+#define __GLEE_GL_ARB_matrix_palette 1
+/* Constants */
+#define GL_MATRIX_PALETTE_ARB                              0x8840
+#define GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB              0x8841
+#define GL_MAX_PALETTE_MATRICES_ARB                        0x8842
+#define GL_CURRENT_PALETTE_MATRIX_ARB                      0x8843
+#define GL_MATRIX_INDEX_ARRAY_ARB                          0x8844
+#define GL_CURRENT_MATRIX_INDEX_ARB                        0x8845
+#define GL_MATRIX_INDEX_ARRAY_SIZE_ARB                     0x8846
+#define GL_MATRIX_INDEX_ARRAY_TYPE_ARB                     0x8847
+#define GL_MATRIX_INDEX_ARRAY_STRIDE_ARB                   0x8848
+#define GL_MATRIX_INDEX_ARRAY_POINTER_ARB                  0x8849
+#ifndef GLEE_H_DEFINED_glCurrentPaletteMatrixARB
+#define GLEE_H_DEFINED_glCurrentPaletteMatrixARB
+  typedef void (APIENTRYP GLEEPFNGLCURRENTPALETTEMATRIXARBPROC) (GLint  index);
+  GLEE_EXTERN GLEEPFNGLCURRENTPALETTEMATRIXARBPROC GLeeFuncPtr_glCurrentPaletteMatrixARB;
+  #define glCurrentPaletteMatrixARB GLeeFuncPtr_glCurrentPaletteMatrixARB
+#endif
+#ifndef GLEE_H_DEFINED_glMatrixIndexubvARB
+#define GLEE_H_DEFINED_glMatrixIndexubvARB
+  typedef void (APIENTRYP GLEEPFNGLMATRIXINDEXUBVARBPROC) (GLint  size, const GLubyte * indices);
+  GLEE_EXTERN GLEEPFNGLMATRIXINDEXUBVARBPROC GLeeFuncPtr_glMatrixIndexubvARB;
+  #define glMatrixIndexubvARB GLeeFuncPtr_glMatrixIndexubvARB
+#endif
+#ifndef GLEE_H_DEFINED_glMatrixIndexusvARB
+#define GLEE_H_DEFINED_glMatrixIndexusvARB
+  typedef void (APIENTRYP GLEEPFNGLMATRIXINDEXUSVARBPROC) (GLint  size, const GLushort * indices);
+  GLEE_EXTERN GLEEPFNGLMATRIXINDEXUSVARBPROC GLeeFuncPtr_glMatrixIndexusvARB;
+  #define glMatrixIndexusvARB GLeeFuncPtr_glMatrixIndexusvARB
+#endif
+#ifndef GLEE_H_DEFINED_glMatrixIndexuivARB
+#define GLEE_H_DEFINED_glMatrixIndexuivARB
+  typedef void (APIENTRYP GLEEPFNGLMATRIXINDEXUIVARBPROC) (GLint  size, const GLuint * indices);
+  GLEE_EXTERN GLEEPFNGLMATRIXINDEXUIVARBPROC GLeeFuncPtr_glMatrixIndexuivARB;
+  #define glMatrixIndexuivARB GLeeFuncPtr_glMatrixIndexuivARB
+#endif
+#ifndef GLEE_H_DEFINED_glMatrixIndexPointerARB
+#define GLEE_H_DEFINED_glMatrixIndexPointerARB
+  typedef void (APIENTRYP GLEEPFNGLMATRIXINDEXPOINTERARBPROC) (GLint  size, GLenum  type, GLsizei  stride, const GLvoid * pointer);
+  GLEE_EXTERN GLEEPFNGLMATRIXINDEXPOINTERARBPROC GLeeFuncPtr_glMatrixIndexPointerARB;
+  #define glMatrixIndexPointerARB GLeeFuncPtr_glMatrixIndexPointerARB
+#endif
+#endif 
+
+/* GL_ARB_texture_env_combine */
+
+#ifndef GL_ARB_texture_env_combine
+#define GL_ARB_texture_env_combine 1
+#define __GLEE_GL_ARB_texture_env_combine 1
+/* Constants */
+#define GL_COMBINE_ARB                                     0x8570
+#define GL_COMBINE_RGB_ARB                                 0x8571
+#define GL_COMBINE_ALPHA_ARB                               0x8572
+#define GL_SOURCE0_RGB_ARB                                 0x8580
+#define GL_SOURCE1_RGB_ARB                                 0x8581
+#define GL_SOURCE2_RGB_ARB                                 0x8582
+#define GL_SOURCE0_ALPHA_ARB                               0x8588
+#define GL_SOURCE1_ALPHA_ARB                               0x8589
+#define GL_SOURCE2_ALPHA_ARB                               0x858A
+#define GL_OPERAND0_RGB_ARB                                0x8590
+#define GL_OPERAND1_RGB_ARB                                0x8591
+#define GL_OPERAND2_RGB_ARB                                0x8592
+#define GL_OPERAND0_ALPHA_ARB                              0x8598
+#define GL_OPERAND1_ALPHA_ARB                              0x8599
+#define GL_OPERAND2_ALPHA_ARB                              0x859A
+#define GL_RGB_SCALE_ARB                                   0x8573
+#define GL_ADD_SIGNED_ARB                                  0x8574
+#define GL_INTERPOLATE_ARB                                 0x8575
+#define GL_SUBTRACT_ARB                                    0x84E7
+#define GL_CONSTANT_ARB                                    0x8576
+#define GL_PRIMARY_COLOR_ARB                               0x8577
+#define GL_PREVIOUS_ARB                                    0x8578
+#endif 
+
+/* GL_ARB_texture_env_crossbar */
+
+#ifndef GL_ARB_texture_env_crossbar
+#define GL_ARB_texture_env_crossbar 1
+#define __GLEE_GL_ARB_texture_env_crossbar 1
+/* Constants */
+#endif 
+
+/* GL_ARB_texture_env_dot3 */
+
+#ifndef GL_ARB_texture_env_dot3
+#define GL_ARB_texture_env_dot3 1
+#define __GLEE_GL_ARB_texture_env_dot3 1
+/* Constants */
+#define GL_DOT3_RGB_ARB                                    0x86AE
+#define GL_DOT3_RGBA_ARB                                   0x86AF
+#endif 
+
+/* GL_ARB_texture_mirrored_repeat */
+
+#ifndef GL_ARB_texture_mirrored_repeat
+#define GL_ARB_texture_mirrored_repeat 1
+#define __GLEE_GL_ARB_texture_mirrored_repeat 1
+/* Constants */
+#define GL_MIRRORED_REPEAT_ARB                             0x8370
+#endif 
+
+/* GL_ARB_depth_texture */
+
+#ifndef GL_ARB_depth_texture
+#define GL_ARB_depth_texture 1
+#define __GLEE_GL_ARB_depth_texture 1
+/* Constants */
+#define GL_DEPTH_COMPONENT16_ARB                           0x81A5
+#define GL_DEPTH_COMPONENT24_ARB                           0x81A6
+#define GL_DEPTH_COMPONENT32_ARB                           0x81A7
+#define GL_TEXTURE_DEPTH_SIZE_ARB                          0x884A
+#define GL_DEPTH_TEXTURE_MODE_ARB                          0x884B
+#endif 
+
+/* GL_ARB_shadow */
+
+#ifndef GL_ARB_shadow
+#define GL_ARB_shadow 1
+#define __GLEE_GL_ARB_shadow 1
+/* Constants */
+#define GL_TEXTURE_COMPARE_MODE_ARB                        0x884C
+#define GL_TEXTURE_COMPARE_FUNC_ARB                        0x884D
+#define GL_COMPARE_R_TO_TEXTURE_ARB                        0x884E
+#endif 
+
+/* GL_ARB_shadow_ambient */
+
+#ifndef GL_ARB_shadow_ambient
+#define GL_ARB_shadow_ambient 1
+#define __GLEE_GL_ARB_shadow_ambient 1
+/* Constants */
+#define GL_TEXTURE_COMPARE_FAIL_VALUE_ARB                  0x80BF
+#endif 
+
+/* GL_ARB_window_pos */
+
+#ifndef GL_ARB_window_pos
+#define GL_ARB_window_pos 1
+#define __GLEE_GL_ARB_window_pos 1
+/* Constants */
+#ifndef GLEE_H_DEFINED_glWindowPos2dARB
+#define GLEE_H_DEFINED_glWindowPos2dARB
+  typedef void (APIENTRYP GLEEPFNGLWINDOWPOS2DARBPROC) (GLdouble  x, GLdouble  y);
+  GLEE_EXTERN GLEEPFNGLWINDOWPOS2DARBPROC GLeeFuncPtr_glWindowPos2dARB;
+  #define glWindowPos2dARB GLeeFuncPtr_glWindowPos2dARB
+#endif
+#ifndef GLEE_H_DEFINED_glWindowPos2dvARB
+#define GLEE_H_DEFINED_glWindowPos2dvARB
+  typedef void (APIENTRYP GLEEPFNGLWINDOWPOS2DVARBPROC) (const GLdouble * v);
+  GLEE_EXTERN GLEEPFNGLWINDOWPOS2DVARBPROC GLeeFuncPtr_glWindowPos2dvARB;
+  #define glWindowPos2dvARB GLeeFuncPtr_glWindowPos2dvARB
+#endif
+#ifndef GLEE_H_DEFINED_glWindowPos2fARB
+#define GLEE_H_DEFINED_glWindowPos2fARB
+  typedef void (APIENTRYP GLEEPFNGLWINDOWPOS2FARBPROC) (GLfloat  x, GLfloat  y);
+  GLEE_EXTERN GLEEPFNGLWINDOWPOS2FARBPROC GLeeFuncPtr_glWindowPos2fARB;
+  #define glWindowPos2fARB GLeeFuncPtr_glWindowPos2fARB
+#endif
+#ifndef GLEE_H_DEFINED_glWindowPos2fvARB
+#define GLEE_H_DEFINED_glWindowPos2fvARB
+  typedef void (APIENTRYP GLEEPFNGLWINDOWPOS2FVARBPROC) (const GLfloat * v);
+  GLEE_EXTERN GLEEPFNGLWINDOWPOS2FVARBPROC GLeeFuncPtr_glWindowPos2fvARB;
+  #define glWindowPos2fvARB GLeeFuncPtr_glWindowPos2fvARB
+#endif
+#ifndef GLEE_H_DEFINED_glWindowPos2iARB
+#define GLEE_H_DEFINED_glWindowPos2iARB
+  typedef void (APIENTRYP GLEEPFNGLWINDOWPOS2IARBPROC) (GLint  x, GLint  y);
+  GLEE_EXTERN GLEEPFNGLWINDOWPOS2IARBPROC GLeeFuncPtr_glWindowPos2iARB;
+  #define glWindowPos2iARB GLeeFuncPtr_glWindowPos2iARB
+#endif
+#ifndef GLEE_H_DEFINED_glWindowPos2ivARB
+#define GLEE_H_DEFINED_glWindowPos2ivARB
+  typedef void (APIENTRYP GLEEPFNGLWINDOWPOS2IVARBPROC) (const GLint * v);
+  GLEE_EXTERN GLEEPFNGLWINDOWPOS2IVARBPROC GLeeFuncPtr_glWindowPos2ivARB;
+  #define glWindowPos2ivARB GLeeFuncPtr_glWindowPos2ivARB
+#endif
+#ifndef GLEE_H_DEFINED_glWindowPos2sARB
+#define GLEE_H_DEFINED_glWindowPos2sARB
+  typedef void (APIENTRYP GLEEPFNGLWINDOWPOS2SARBPROC) (GLshort  x, GLshort  y);
+  GLEE_EXTERN GLEEPFNGLWINDOWPOS2SARBPROC GLeeFuncPtr_glWindowPos2sARB;
+  #define glWindowPos2sARB GLeeFuncPtr_glWindowPos2sARB
+#endif
+#ifndef GLEE_H_DEFINED_glWindowPos2svARB
+#define GLEE_H_DEFINED_glWindowPos2svARB
+  typedef void (APIENTRYP GLEEPFNGLWINDOWPOS2SVARBPROC) (const GLshort * v);
+  GLEE_EXTERN GLEEPFNGLWINDOWPOS2SVARBPROC GLeeFuncPtr_glWindowPos2svARB;
+  #define glWindowPos2svARB GLeeFuncPtr_glWindowPos2svARB
+#endif
+#ifndef GLEE_H_DEFINED_glWindowPos3dARB
+#define GLEE_H_DEFINED_glWindowPos3dARB
+  typedef void (APIENTRYP GLEEPFNGLWINDOWPOS3DARBPROC) (GLdouble  x, GLdouble  y, GLdouble  z);
+  GLEE_EXTERN GLEEPFNGLWINDOWPOS3DARBPROC GLeeFuncPtr_glWindowPos3dARB;
+  #define glWindowPos3dARB GLeeFuncPtr_glWindowPos3dARB
+#endif
+#ifndef GLEE_H_DEFINED_glWindowPos3dvARB
+#define GLEE_H_DEFINED_glWindowPos3dvARB
+  typedef void (APIENTRYP GLEEPFNGLWINDOWPOS3DVARBPROC) (const GLdouble * v);
+  GLEE_EXTERN GLEEPFNGLWINDOWPOS3DVARBPROC GLeeFuncPtr_glWindowPos3dvARB;
+  #define glWindowPos3dvARB GLeeFuncPtr_glWindowPos3dvARB
+#endif
+#ifndef GLEE_H_DEFINED_glWindowPos3fARB
+#define GLEE_H_DEFINED_glWindowPos3fARB
+  typedef void (APIENTRYP GLEEPFNGLWINDOWPOS3FARBPROC) (GLfloat  x, GLfloat  y, GLfloat  z);
+  GLEE_EXTERN GLEEPFNGLWINDOWPOS3FARBPROC GLeeFuncPtr_glWindowPos3fARB;
+  #define glWindowPos3fARB GLeeFuncPtr_glWindowPos3fARB
+#endif
+#ifndef GLEE_H_DEFINED_glWindowPos3fvARB
+#define GLEE_H_DEFINED_glWindowPos3fvARB
+  typedef void (APIENTRYP GLEEPFNGLWINDOWPOS3FVARBPROC) (const GLfloat * v);
+  GLEE_EXTERN GLEEPFNGLWINDOWPOS3FVARBPROC GLeeFuncPtr_glWindowPos3fvARB;
+  #define glWindowPos3fvARB GLeeFuncPtr_glWindowPos3fvARB
+#endif
+#ifndef GLEE_H_DEFINED_glWindowPos3iARB
+#define GLEE_H_DEFINED_glWindowPos3iARB
+  typedef void (APIENTRYP GLEEPFNGLWINDOWPOS3IARBPROC) (GLint  x, GLint  y, GLint  z);
+  GLEE_EXTERN GLEEPFNGLWINDOWPOS3IARBPROC GLeeFuncPtr_glWindowPos3iARB;
+  #define glWindowPos3iARB GLeeFuncPtr_glWindowPos3iARB
+#endif
+#ifndef GLEE_H_DEFINED_glWindowPos3ivARB
+#define GLEE_H_DEFINED_glWindowPos3ivARB
+  typedef void (APIENTRYP GLEEPFNGLWINDOWPOS3IVARBPROC) (const GLint * v);
+  GLEE_EXTERN GLEEPFNGLWINDOWPOS3IVARBPROC GLeeFuncPtr_glWindowPos3ivARB;
+  #define glWindowPos3ivARB GLeeFuncPtr_glWindowPos3ivARB
+#endif
+#ifndef GLEE_H_DEFINED_glWindowPos3sARB
+#define GLEE_H_DEFINED_glWindowPos3sARB
+  typedef void (APIENTRYP GLEEPFNGLWINDOWPOS3SARBPROC) (GLshort  x, GLshort  y, GLshort  z);
+  GLEE_EXTERN GLEEPFNGLWINDOWPOS3SARBPROC GLeeFuncPtr_glWindowPos3sARB;
+  #define glWindowPos3sARB GLeeFuncPtr_glWindowPos3sARB
+#endif
+#ifndef GLEE_H_DEFINED_glWindowPos3svARB
+#define GLEE_H_DEFINED_glWindowPos3svARB
+  typedef void (APIENTRYP GLEEPFNGLWINDOWPOS3SVARBPROC) (const GLshort * v);
+  GLEE_EXTERN GLEEPFNGLWINDOWPOS3SVARBPROC GLeeFuncPtr_glWindowPos3svARB;
+  #define glWindowPos3svARB GLeeFuncPtr_glWindowPos3svARB
+#endif
+#endif 
+
+/* GL_ARB_vertex_program */
+
+#ifndef GL_ARB_vertex_program
+#define GL_ARB_vertex_program 1
+#define __GLEE_GL_ARB_vertex_program 1
+/* Constants */
+#define GL_COLOR_SUM_ARB                                   0x8458
+#define GL_VERTEX_PROGRAM_ARB                              0x8620
+#define GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB                 0x8622
+#define GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB                    0x8623
+#define GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB                  0x8624
+#define GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB                    0x8625
+#define GL_CURRENT_VERTEX_ATTRIB_ARB                       0x8626
+#define GL_PROGRAM_LENGTH_ARB                              0x8627
+#define GL_PROGRAM_STRING_ARB                              0x8628
+#define GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB              0x862E
+#define GL_MAX_PROGRAM_MATRICES_ARB                        0x862F
+#define GL_CURRENT_MATRIX_STACK_DEPTH_ARB                  0x8640
+#define GL_CURRENT_MATRIX_ARB                              0x8641
+#define GL_VERTEX_PROGRAM_POINT_SIZE_ARB                   0x8642
+#define GL_VERTEX_PROGRAM_TWO_SIDE_ARB                     0x8643
+#define GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB                 0x8645
+#define GL_PROGRAM_ERROR_POSITION_ARB                      0x864B
+#define GL_PROGRAM_BINDING_ARB                             0x8677
+#define GL_MAX_VERTEX_ATTRIBS_ARB                          0x8869
+#define GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB              0x886A
+#define GL_PROGRAM_ERROR_STRING_ARB                        0x8874
+#define GL_PROGRAM_FORMAT_ASCII_ARB                        0x8875
+#define GL_PROGRAM_FORMAT_ARB                              0x8876
+#define GL_PROGRAM_INSTRUCTIONS_ARB                        0x88A0
+#define GL_MAX_PROGRAM_INSTRUCTIONS_ARB                    0x88A1
+#define GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB                 0x88A2
+#define GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB             0x88A3
+#define GL_PROGRAM_TEMPORARIES_ARB                         0x88A4
+#define GL_MAX_PROGRAM_TEMPORARIES_ARB                     0x88A5
+#define GL_PROGRAM_NATIVE_TEMPORARIES_ARB                  0x88A6
+#define GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB              0x88A7
+#define GL_PROGRAM_PARAMETERS_ARB                          0x88A8
+#define GL_MAX_PROGRAM_PARAMETERS_ARB                      0x88A9
+#define GL_PROGRAM_NATIVE_PARAMETERS_ARB                   0x88AA
+#define GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB               0x88AB
+#define GL_PROGRAM_ATTRIBS_ARB                             0x88AC
+#define GL_MAX_PROGRAM_ATTRIBS_ARB                         0x88AD
+#define GL_PROGRAM_NATIVE_ATTRIBS_ARB                      0x88AE
+#define GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB                  0x88AF
+#define GL_PROGRAM_ADDRESS_REGISTERS_ARB                   0x88B0
+#define GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB               0x88B1
+#define GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB            0x88B2
+#define GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB        0x88B3
+#define GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB                0x88B4
+#define GL_MAX_PROGRAM_ENV_PARAMETERS_ARB                  0x88B5
+#define GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB                 0x88B6
+#define GL_TRANSPOSE_CURRENT_MATRIX_ARB                    0x88B7
+#define GL_MATRIX0_ARB                                     0x88C0
+#define GL_MATRIX1_ARB                                     0x88C1
+#define GL_MATRIX2_ARB                                     0x88C2
+#define GL_MATRIX3_ARB                                     0x88C3
+#define GL_MATRIX4_ARB                                     0x88C4
+#define GL_MATRIX5_ARB                                     0x88C5
+#define GL_MATRIX6_ARB                                     0x88C6
+#define GL_MATRIX7_ARB                                     0x88C7
+#define GL_MATRIX8_ARB                                     0x88C8
+#define GL_MATRIX9_ARB                                     0x88C9
+#define GL_MATRIX10_ARB                                    0x88CA
+#define GL_MATRIX11_ARB                                    0x88CB
+#define GL_MATRIX12_ARB                                    0x88CC
+#define GL_MATRIX13_ARB                                    0x88CD
+#define GL_MATRIX14_ARB                                    0x88CE
+#define GL_MATRIX15_ARB                                    0x88CF
+#define GL_MATRIX16_ARB                                    0x88D0
+#define GL_MATRIX17_ARB                                    0x88D1
+#define GL_MATRIX18_ARB                                    0x88D2
+#define GL_MATRIX19_ARB                                    0x88D3
+#define GL_MATRIX20_ARB                                    0x88D4
+#define GL_MATRIX21_ARB                                    0x88D5
+#define GL_MATRIX22_ARB                                    0x88D6
+#define GL_MATRIX23_ARB                                    0x88D7
+#define GL_MATRIX24_ARB                                    0x88D8
+#define GL_MATRIX25_ARB                                    0x88D9
+#define GL_MATRIX26_ARB                                    0x88DA
+#define GL_MATRIX27_ARB                                    0x88DB
+#define GL_MATRIX28_ARB                                    0x88DC
+#define GL_MATRIX29_ARB                                    0x88DD
+#define GL_MATRIX30_ARB                                    0x88DE
+#define GL_MATRIX31_ARB                                    0x88DF
+#ifndef GLEE_H_DEFINED_glVertexAttrib1dARB
+#define GLEE_H_DEFINED_glVertexAttrib1dARB
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIB1DARBPROC) (GLuint  index, GLdouble  x);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIB1DARBPROC GLeeFuncPtr_glVertexAttrib1dARB;
+  #define glVertexAttrib1dARB GLeeFuncPtr_glVertexAttrib1dARB
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttrib1dvARB
+#define GLEE_H_DEFINED_glVertexAttrib1dvARB
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIB1DVARBPROC) (GLuint  index, const GLdouble * v);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIB1DVARBPROC GLeeFuncPtr_glVertexAttrib1dvARB;
+  #define glVertexAttrib1dvARB GLeeFuncPtr_glVertexAttrib1dvARB
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttrib1fARB
+#define GLEE_H_DEFINED_glVertexAttrib1fARB
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIB1FARBPROC) (GLuint  index, GLfloat  x);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIB1FARBPROC GLeeFuncPtr_glVertexAttrib1fARB;
+  #define glVertexAttrib1fARB GLeeFuncPtr_glVertexAttrib1fARB
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttrib1fvARB
+#define GLEE_H_DEFINED_glVertexAttrib1fvARB
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIB1FVARBPROC) (GLuint  index, const GLfloat * v);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIB1FVARBPROC GLeeFuncPtr_glVertexAttrib1fvARB;
+  #define glVertexAttrib1fvARB GLeeFuncPtr_glVertexAttrib1fvARB
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttrib1sARB
+#define GLEE_H_DEFINED_glVertexAttrib1sARB
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIB1SARBPROC) (GLuint  index, GLshort  x);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIB1SARBPROC GLeeFuncPtr_glVertexAttrib1sARB;
+  #define glVertexAttrib1sARB GLeeFuncPtr_glVertexAttrib1sARB
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttrib1svARB
+#define GLEE_H_DEFINED_glVertexAttrib1svARB
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIB1SVARBPROC) (GLuint  index, const GLshort * v);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIB1SVARBPROC GLeeFuncPtr_glVertexAttrib1svARB;
+  #define glVertexAttrib1svARB GLeeFuncPtr_glVertexAttrib1svARB
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttrib2dARB
+#define GLEE_H_DEFINED_glVertexAttrib2dARB
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIB2DARBPROC) (GLuint  index, GLdouble  x, GLdouble  y);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIB2DARBPROC GLeeFuncPtr_glVertexAttrib2dARB;
+  #define glVertexAttrib2dARB GLeeFuncPtr_glVertexAttrib2dARB
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttrib2dvARB
+#define GLEE_H_DEFINED_glVertexAttrib2dvARB
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIB2DVARBPROC) (GLuint  index, const GLdouble * v);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIB2DVARBPROC GLeeFuncPtr_glVertexAttrib2dvARB;
+  #define glVertexAttrib2dvARB GLeeFuncPtr_glVertexAttrib2dvARB
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttrib2fARB
+#define GLEE_H_DEFINED_glVertexAttrib2fARB
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIB2FARBPROC) (GLuint  index, GLfloat  x, GLfloat  y);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIB2FARBPROC GLeeFuncPtr_glVertexAttrib2fARB;
+  #define glVertexAttrib2fARB GLeeFuncPtr_glVertexAttrib2fARB
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttrib2fvARB
+#define GLEE_H_DEFINED_glVertexAttrib2fvARB
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIB2FVARBPROC) (GLuint  index, const GLfloat * v);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIB2FVARBPROC GLeeFuncPtr_glVertexAttrib2fvARB;
+  #define glVertexAttrib2fvARB GLeeFuncPtr_glVertexAttrib2fvARB
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttrib2sARB
+#define GLEE_H_DEFINED_glVertexAttrib2sARB
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIB2SARBPROC) (GLuint  index, GLshort  x, GLshort  y);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIB2SARBPROC GLeeFuncPtr_glVertexAttrib2sARB;
+  #define glVertexAttrib2sARB GLeeFuncPtr_glVertexAttrib2sARB
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttrib2svARB
+#define GLEE_H_DEFINED_glVertexAttrib2svARB
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIB2SVARBPROC) (GLuint  index, const GLshort * v);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIB2SVARBPROC GLeeFuncPtr_glVertexAttrib2svARB;
+  #define glVertexAttrib2svARB GLeeFuncPtr_glVertexAttrib2svARB
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttrib3dARB
+#define GLEE_H_DEFINED_glVertexAttrib3dARB
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIB3DARBPROC) (GLuint  index, GLdouble  x, GLdouble  y, GLdouble  z);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIB3DARBPROC GLeeFuncPtr_glVertexAttrib3dARB;
+  #define glVertexAttrib3dARB GLeeFuncPtr_glVertexAttrib3dARB
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttrib3dvARB
+#define GLEE_H_DEFINED_glVertexAttrib3dvARB
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIB3DVARBPROC) (GLuint  index, const GLdouble * v);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIB3DVARBPROC GLeeFuncPtr_glVertexAttrib3dvARB;
+  #define glVertexAttrib3dvARB GLeeFuncPtr_glVertexAttrib3dvARB
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttrib3fARB
+#define GLEE_H_DEFINED_glVertexAttrib3fARB
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIB3FARBPROC) (GLuint  index, GLfloat  x, GLfloat  y, GLfloat  z);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIB3FARBPROC GLeeFuncPtr_glVertexAttrib3fARB;
+  #define glVertexAttrib3fARB GLeeFuncPtr_glVertexAttrib3fARB
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttrib3fvARB
+#define GLEE_H_DEFINED_glVertexAttrib3fvARB
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIB3FVARBPROC) (GLuint  index, const GLfloat * v);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIB3FVARBPROC GLeeFuncPtr_glVertexAttrib3fvARB;
+  #define glVertexAttrib3fvARB GLeeFuncPtr_glVertexAttrib3fvARB
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttrib3sARB
+#define GLEE_H_DEFINED_glVertexAttrib3sARB
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIB3SARBPROC) (GLuint  index, GLshort  x, GLshort  y, GLshort  z);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIB3SARBPROC GLeeFuncPtr_glVertexAttrib3sARB;
+  #define glVertexAttrib3sARB GLeeFuncPtr_glVertexAttrib3sARB
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttrib3svARB
+#define GLEE_H_DEFINED_glVertexAttrib3svARB
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIB3SVARBPROC) (GLuint  index, const GLshort * v);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIB3SVARBPROC GLeeFuncPtr_glVertexAttrib3svARB;
+  #define glVertexAttrib3svARB GLeeFuncPtr_glVertexAttrib3svARB
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttrib4NbvARB
+#define GLEE_H_DEFINED_glVertexAttrib4NbvARB
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIB4NBVARBPROC) (GLuint  index, const GLbyte * v);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIB4NBVARBPROC GLeeFuncPtr_glVertexAttrib4NbvARB;
+  #define glVertexAttrib4NbvARB GLeeFuncPtr_glVertexAttrib4NbvARB
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttrib4NivARB
+#define GLEE_H_DEFINED_glVertexAttrib4NivARB
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIB4NIVARBPROC) (GLuint  index, const GLint * v);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIB4NIVARBPROC GLeeFuncPtr_glVertexAttrib4NivARB;
+  #define glVertexAttrib4NivARB GLeeFuncPtr_glVertexAttrib4NivARB
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttrib4NsvARB
+#define GLEE_H_DEFINED_glVertexAttrib4NsvARB
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIB4NSVARBPROC) (GLuint  index, const GLshort * v);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIB4NSVARBPROC GLeeFuncPtr_glVertexAttrib4NsvARB;
+  #define glVertexAttrib4NsvARB GLeeFuncPtr_glVertexAttrib4NsvARB
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttrib4NubARB
+#define GLEE_H_DEFINED_glVertexAttrib4NubARB
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIB4NUBARBPROC) (GLuint  index, GLubyte  x, GLubyte  y, GLubyte  z, GLubyte  w);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIB4NUBARBPROC GLeeFuncPtr_glVertexAttrib4NubARB;
+  #define glVertexAttrib4NubARB GLeeFuncPtr_glVertexAttrib4NubARB
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttrib4NubvARB
+#define GLEE_H_DEFINED_glVertexAttrib4NubvARB
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIB4NUBVARBPROC) (GLuint  index, const GLubyte * v);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIB4NUBVARBPROC GLeeFuncPtr_glVertexAttrib4NubvARB;
+  #define glVertexAttrib4NubvARB GLeeFuncPtr_glVertexAttrib4NubvARB
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttrib4NuivARB
+#define GLEE_H_DEFINED_glVertexAttrib4NuivARB
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIB4NUIVARBPROC) (GLuint  index, const GLuint * v);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIB4NUIVARBPROC GLeeFuncPtr_glVertexAttrib4NuivARB;
+  #define glVertexAttrib4NuivARB GLeeFuncPtr_glVertexAttrib4NuivARB
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttrib4NusvARB
+#define GLEE_H_DEFINED_glVertexAttrib4NusvARB
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIB4NUSVARBPROC) (GLuint  index, const GLushort * v);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIB4NUSVARBPROC GLeeFuncPtr_glVertexAttrib4NusvARB;
+  #define glVertexAttrib4NusvARB GLeeFuncPtr_glVertexAttrib4NusvARB
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttrib4bvARB
+#define GLEE_H_DEFINED_glVertexAttrib4bvARB
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIB4BVARBPROC) (GLuint  index, const GLbyte * v);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIB4BVARBPROC GLeeFuncPtr_glVertexAttrib4bvARB;
+  #define glVertexAttrib4bvARB GLeeFuncPtr_glVertexAttrib4bvARB
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttrib4dARB
+#define GLEE_H_DEFINED_glVertexAttrib4dARB
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIB4DARBPROC) (GLuint  index, GLdouble  x, GLdouble  y, GLdouble  z, GLdouble  w);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIB4DARBPROC GLeeFuncPtr_glVertexAttrib4dARB;
+  #define glVertexAttrib4dARB GLeeFuncPtr_glVertexAttrib4dARB
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttrib4dvARB
+#define GLEE_H_DEFINED_glVertexAttrib4dvARB
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIB4DVARBPROC) (GLuint  index, const GLdouble * v);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIB4DVARBPROC GLeeFuncPtr_glVertexAttrib4dvARB;
+  #define glVertexAttrib4dvARB GLeeFuncPtr_glVertexAttrib4dvARB
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttrib4fARB
+#define GLEE_H_DEFINED_glVertexAttrib4fARB
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIB4FARBPROC) (GLuint  index, GLfloat  x, GLfloat  y, GLfloat  z, GLfloat  w);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIB4FARBPROC GLeeFuncPtr_glVertexAttrib4fARB;
+  #define glVertexAttrib4fARB GLeeFuncPtr_glVertexAttrib4fARB
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttrib4fvARB
+#define GLEE_H_DEFINED_glVertexAttrib4fvARB
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIB4FVARBPROC) (GLuint  index, const GLfloat * v);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIB4FVARBPROC GLeeFuncPtr_glVertexAttrib4fvARB;
+  #define glVertexAttrib4fvARB GLeeFuncPtr_glVertexAttrib4fvARB
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttrib4ivARB
+#define GLEE_H_DEFINED_glVertexAttrib4ivARB
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIB4IVARBPROC) (GLuint  index, const GLint * v);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIB4IVARBPROC GLeeFuncPtr_glVertexAttrib4ivARB;
+  #define glVertexAttrib4ivARB GLeeFuncPtr_glVertexAttrib4ivARB
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttrib4sARB
+#define GLEE_H_DEFINED_glVertexAttrib4sARB
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIB4SARBPROC) (GLuint  index, GLshort  x, GLshort  y, GLshort  z, GLshort  w);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIB4SARBPROC GLeeFuncPtr_glVertexAttrib4sARB;
+  #define glVertexAttrib4sARB GLeeFuncPtr_glVertexAttrib4sARB
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttrib4svARB
+#define GLEE_H_DEFINED_glVertexAttrib4svARB
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIB4SVARBPROC) (GLuint  index, const GLshort * v);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIB4SVARBPROC GLeeFuncPtr_glVertexAttrib4svARB;
+  #define glVertexAttrib4svARB GLeeFuncPtr_glVertexAttrib4svARB
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttrib4ubvARB
+#define GLEE_H_DEFINED_glVertexAttrib4ubvARB
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIB4UBVARBPROC) (GLuint  index, const GLubyte * v);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIB4UBVARBPROC GLeeFuncPtr_glVertexAttrib4ubvARB;
+  #define glVertexAttrib4ubvARB GLeeFuncPtr_glVertexAttrib4ubvARB
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttrib4uivARB
+#define GLEE_H_DEFINED_glVertexAttrib4uivARB
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIB4UIVARBPROC) (GLuint  index, const GLuint * v);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIB4UIVARBPROC GLeeFuncPtr_glVertexAttrib4uivARB;
+  #define glVertexAttrib4uivARB GLeeFuncPtr_glVertexAttrib4uivARB
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttrib4usvARB
+#define GLEE_H_DEFINED_glVertexAttrib4usvARB
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIB4USVARBPROC) (GLuint  index, const GLushort * v);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIB4USVARBPROC GLeeFuncPtr_glVertexAttrib4usvARB;
+  #define glVertexAttrib4usvARB GLeeFuncPtr_glVertexAttrib4usvARB
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttribPointerARB
+#define GLEE_H_DEFINED_glVertexAttribPointerARB
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIBPOINTERARBPROC) (GLuint  index, GLint  size, GLenum  type, GLboolean  normalized, GLsizei  stride, const GLvoid * pointer);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIBPOINTERARBPROC GLeeFuncPtr_glVertexAttribPointerARB;
+  #define glVertexAttribPointerARB GLeeFuncPtr_glVertexAttribPointerARB
+#endif
+#ifndef GLEE_H_DEFINED_glEnableVertexAttribArrayARB
+#define GLEE_H_DEFINED_glEnableVertexAttribArrayARB
+  typedef void (APIENTRYP GLEEPFNGLENABLEVERTEXATTRIBARRAYARBPROC) (GLuint  index);
+  GLEE_EXTERN GLEEPFNGLENABLEVERTEXATTRIBARRAYARBPROC GLeeFuncPtr_glEnableVertexAttribArrayARB;
+  #define glEnableVertexAttribArrayARB GLeeFuncPtr_glEnableVertexAttribArrayARB
+#endif
+#ifndef GLEE_H_DEFINED_glDisableVertexAttribArrayARB
+#define GLEE_H_DEFINED_glDisableVertexAttribArrayARB
+  typedef void (APIENTRYP GLEEPFNGLDISABLEVERTEXATTRIBARRAYARBPROC) (GLuint  index);
+  GLEE_EXTERN GLEEPFNGLDISABLEVERTEXATTRIBARRAYARBPROC GLeeFuncPtr_glDisableVertexAttribArrayARB;
+  #define glDisableVertexAttribArrayARB GLeeFuncPtr_glDisableVertexAttribArrayARB
+#endif
+#ifndef GLEE_H_DEFINED_glProgramStringARB
+#define GLEE_H_DEFINED_glProgramStringARB
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMSTRINGARBPROC) (GLenum  target, GLenum  format, GLsizei  len, const GLvoid * string);
+  GLEE_EXTERN GLEEPFNGLPROGRAMSTRINGARBPROC GLeeFuncPtr_glProgramStringARB;
+  #define glProgramStringARB GLeeFuncPtr_glProgramStringARB
+#endif
+#ifndef GLEE_H_DEFINED_glBindProgramARB
+#define GLEE_H_DEFINED_glBindProgramARB
+  typedef void (APIENTRYP GLEEPFNGLBINDPROGRAMARBPROC) (GLenum  target, GLuint  program);
+  GLEE_EXTERN GLEEPFNGLBINDPROGRAMARBPROC GLeeFuncPtr_glBindProgramARB;
+  #define glBindProgramARB GLeeFuncPtr_glBindProgramARB
+#endif
+#ifndef GLEE_H_DEFINED_glDeleteProgramsARB
+#define GLEE_H_DEFINED_glDeleteProgramsARB
+  typedef void (APIENTRYP GLEEPFNGLDELETEPROGRAMSARBPROC) (GLsizei  n, const GLuint * programs);
+  GLEE_EXTERN GLEEPFNGLDELETEPROGRAMSARBPROC GLeeFuncPtr_glDeleteProgramsARB;
+  #define glDeleteProgramsARB GLeeFuncPtr_glDeleteProgramsARB
+#endif
+#ifndef GLEE_H_DEFINED_glGenProgramsARB
+#define GLEE_H_DEFINED_glGenProgramsARB
+  typedef void (APIENTRYP GLEEPFNGLGENPROGRAMSARBPROC) (GLsizei  n, GLuint * programs);
+  GLEE_EXTERN GLEEPFNGLGENPROGRAMSARBPROC GLeeFuncPtr_glGenProgramsARB;
+  #define glGenProgramsARB GLeeFuncPtr_glGenProgramsARB
+#endif
+#ifndef GLEE_H_DEFINED_glProgramEnvParameter4dARB
+#define GLEE_H_DEFINED_glProgramEnvParameter4dARB
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMENVPARAMETER4DARBPROC) (GLenum  target, GLuint  index, GLdouble  x, GLdouble  y, GLdouble  z, GLdouble  w);
+  GLEE_EXTERN GLEEPFNGLPROGRAMENVPARAMETER4DARBPROC GLeeFuncPtr_glProgramEnvParameter4dARB;
+  #define glProgramEnvParameter4dARB GLeeFuncPtr_glProgramEnvParameter4dARB
+#endif
+#ifndef GLEE_H_DEFINED_glProgramEnvParameter4dvARB
+#define GLEE_H_DEFINED_glProgramEnvParameter4dvARB
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMENVPARAMETER4DVARBPROC) (GLenum  target, GLuint  index, const GLdouble * params);
+  GLEE_EXTERN GLEEPFNGLPROGRAMENVPARAMETER4DVARBPROC GLeeFuncPtr_glProgramEnvParameter4dvARB;
+  #define glProgramEnvParameter4dvARB GLeeFuncPtr_glProgramEnvParameter4dvARB
+#endif
+#ifndef GLEE_H_DEFINED_glProgramEnvParameter4fARB
+#define GLEE_H_DEFINED_glProgramEnvParameter4fARB
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMENVPARAMETER4FARBPROC) (GLenum  target, GLuint  index, GLfloat  x, GLfloat  y, GLfloat  z, GLfloat  w);
+  GLEE_EXTERN GLEEPFNGLPROGRAMENVPARAMETER4FARBPROC GLeeFuncPtr_glProgramEnvParameter4fARB;
+  #define glProgramEnvParameter4fARB GLeeFuncPtr_glProgramEnvParameter4fARB
+#endif
+#ifndef GLEE_H_DEFINED_glProgramEnvParameter4fvARB
+#define GLEE_H_DEFINED_glProgramEnvParameter4fvARB
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMENVPARAMETER4FVARBPROC) (GLenum  target, GLuint  index, const GLfloat * params);
+  GLEE_EXTERN GLEEPFNGLPROGRAMENVPARAMETER4FVARBPROC GLeeFuncPtr_glProgramEnvParameter4fvARB;
+  #define glProgramEnvParameter4fvARB GLeeFuncPtr_glProgramEnvParameter4fvARB
+#endif
+#ifndef GLEE_H_DEFINED_glProgramLocalParameter4dARB
+#define GLEE_H_DEFINED_glProgramLocalParameter4dARB
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMLOCALPARAMETER4DARBPROC) (GLenum  target, GLuint  index, GLdouble  x, GLdouble  y, GLdouble  z, GLdouble  w);
+  GLEE_EXTERN GLEEPFNGLPROGRAMLOCALPARAMETER4DARBPROC GLeeFuncPtr_glProgramLocalParameter4dARB;
+  #define glProgramLocalParameter4dARB GLeeFuncPtr_glProgramLocalParameter4dARB
+#endif
+#ifndef GLEE_H_DEFINED_glProgramLocalParameter4dvARB
+#define GLEE_H_DEFINED_glProgramLocalParameter4dvARB
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMLOCALPARAMETER4DVARBPROC) (GLenum  target, GLuint  index, const GLdouble * params);
+  GLEE_EXTERN GLEEPFNGLPROGRAMLOCALPARAMETER4DVARBPROC GLeeFuncPtr_glProgramLocalParameter4dvARB;
+  #define glProgramLocalParameter4dvARB GLeeFuncPtr_glProgramLocalParameter4dvARB
+#endif
+#ifndef GLEE_H_DEFINED_glProgramLocalParameter4fARB
+#define GLEE_H_DEFINED_glProgramLocalParameter4fARB
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMLOCALPARAMETER4FARBPROC) (GLenum  target, GLuint  index, GLfloat  x, GLfloat  y, GLfloat  z, GLfloat  w);
+  GLEE_EXTERN GLEEPFNGLPROGRAMLOCALPARAMETER4FARBPROC GLeeFuncPtr_glProgramLocalParameter4fARB;
+  #define glProgramLocalParameter4fARB GLeeFuncPtr_glProgramLocalParameter4fARB
+#endif
+#ifndef GLEE_H_DEFINED_glProgramLocalParameter4fvARB
+#define GLEE_H_DEFINED_glProgramLocalParameter4fvARB
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMLOCALPARAMETER4FVARBPROC) (GLenum  target, GLuint  index, const GLfloat * params);
+  GLEE_EXTERN GLEEPFNGLPROGRAMLOCALPARAMETER4FVARBPROC GLeeFuncPtr_glProgramLocalParameter4fvARB;
+  #define glProgramLocalParameter4fvARB GLeeFuncPtr_glProgramLocalParameter4fvARB
+#endif
+#ifndef GLEE_H_DEFINED_glGetProgramEnvParameterdvARB
+#define GLEE_H_DEFINED_glGetProgramEnvParameterdvARB
+  typedef void (APIENTRYP GLEEPFNGLGETPROGRAMENVPARAMETERDVARBPROC) (GLenum  target, GLuint  index, GLdouble * params);
+  GLEE_EXTERN GLEEPFNGLGETPROGRAMENVPARAMETERDVARBPROC GLeeFuncPtr_glGetProgramEnvParameterdvARB;
+  #define glGetProgramEnvParameterdvARB GLeeFuncPtr_glGetProgramEnvParameterdvARB
+#endif
+#ifndef GLEE_H_DEFINED_glGetProgramEnvParameterfvARB
+#define GLEE_H_DEFINED_glGetProgramEnvParameterfvARB
+  typedef void (APIENTRYP GLEEPFNGLGETPROGRAMENVPARAMETERFVARBPROC) (GLenum  target, GLuint  index, GLfloat * params);
+  GLEE_EXTERN GLEEPFNGLGETPROGRAMENVPARAMETERFVARBPROC GLeeFuncPtr_glGetProgramEnvParameterfvARB;
+  #define glGetProgramEnvParameterfvARB GLeeFuncPtr_glGetProgramEnvParameterfvARB
+#endif
+#ifndef GLEE_H_DEFINED_glGetProgramLocalParameterdvARB
+#define GLEE_H_DEFINED_glGetProgramLocalParameterdvARB
+  typedef void (APIENTRYP GLEEPFNGLGETPROGRAMLOCALPARAMETERDVARBPROC) (GLenum  target, GLuint  index, GLdouble * params);
+  GLEE_EXTERN GLEEPFNGLGETPROGRAMLOCALPARAMETERDVARBPROC GLeeFuncPtr_glGetProgramLocalParameterdvARB;
+  #define glGetProgramLocalParameterdvARB GLeeFuncPtr_glGetProgramLocalParameterdvARB
+#endif
+#ifndef GLEE_H_DEFINED_glGetProgramLocalParameterfvARB
+#define GLEE_H_DEFINED_glGetProgramLocalParameterfvARB
+  typedef void (APIENTRYP GLEEPFNGLGETPROGRAMLOCALPARAMETERFVARBPROC) (GLenum  target, GLuint  index, GLfloat * params);
+  GLEE_EXTERN GLEEPFNGLGETPROGRAMLOCALPARAMETERFVARBPROC GLeeFuncPtr_glGetProgramLocalParameterfvARB;
+  #define glGetProgramLocalParameterfvARB GLeeFuncPtr_glGetProgramLocalParameterfvARB
+#endif
+#ifndef GLEE_H_DEFINED_glGetProgramivARB
+#define GLEE_H_DEFINED_glGetProgramivARB
+  typedef void (APIENTRYP GLEEPFNGLGETPROGRAMIVARBPROC) (GLenum  target, GLenum  pname, GLint * params);
+  GLEE_EXTERN GLEEPFNGLGETPROGRAMIVARBPROC GLeeFuncPtr_glGetProgramivARB;
+  #define glGetProgramivARB GLeeFuncPtr_glGetProgramivARB
+#endif
+#ifndef GLEE_H_DEFINED_glGetProgramStringARB
+#define GLEE_H_DEFINED_glGetProgramStringARB
+  typedef void (APIENTRYP GLEEPFNGLGETPROGRAMSTRINGARBPROC) (GLenum  target, GLenum  pname, GLvoid * string);
+  GLEE_EXTERN GLEEPFNGLGETPROGRAMSTRINGARBPROC GLeeFuncPtr_glGetProgramStringARB;
+  #define glGetProgramStringARB GLeeFuncPtr_glGetProgramStringARB
+#endif
+#ifndef GLEE_H_DEFINED_glGetVertexAttribdvARB
+#define GLEE_H_DEFINED_glGetVertexAttribdvARB
+  typedef void (APIENTRYP GLEEPFNGLGETVERTEXATTRIBDVARBPROC) (GLuint  index, GLenum  pname, GLdouble * params);
+  GLEE_EXTERN GLEEPFNGLGETVERTEXATTRIBDVARBPROC GLeeFuncPtr_glGetVertexAttribdvARB;
+  #define glGetVertexAttribdvARB GLeeFuncPtr_glGetVertexAttribdvARB
+#endif
+#ifndef GLEE_H_DEFINED_glGetVertexAttribfvARB
+#define GLEE_H_DEFINED_glGetVertexAttribfvARB
+  typedef void (APIENTRYP GLEEPFNGLGETVERTEXATTRIBFVARBPROC) (GLuint  index, GLenum  pname, GLfloat * params);
+  GLEE_EXTERN GLEEPFNGLGETVERTEXATTRIBFVARBPROC GLeeFuncPtr_glGetVertexAttribfvARB;
+  #define glGetVertexAttribfvARB GLeeFuncPtr_glGetVertexAttribfvARB
+#endif
+#ifndef GLEE_H_DEFINED_glGetVertexAttribivARB
+#define GLEE_H_DEFINED_glGetVertexAttribivARB
+  typedef void (APIENTRYP GLEEPFNGLGETVERTEXATTRIBIVARBPROC) (GLuint  index, GLenum  pname, GLint * params);
+  GLEE_EXTERN GLEEPFNGLGETVERTEXATTRIBIVARBPROC GLeeFuncPtr_glGetVertexAttribivARB;
+  #define glGetVertexAttribivARB GLeeFuncPtr_glGetVertexAttribivARB
+#endif
+#ifndef GLEE_H_DEFINED_glGetVertexAttribPointervARB
+#define GLEE_H_DEFINED_glGetVertexAttribPointervARB
+  typedef void (APIENTRYP GLEEPFNGLGETVERTEXATTRIBPOINTERVARBPROC) (GLuint  index, GLenum  pname, GLvoid* * pointer);
+  GLEE_EXTERN GLEEPFNGLGETVERTEXATTRIBPOINTERVARBPROC GLeeFuncPtr_glGetVertexAttribPointervARB;
+  #define glGetVertexAttribPointervARB GLeeFuncPtr_glGetVertexAttribPointervARB
+#endif
+#ifndef GLEE_H_DEFINED_glIsProgramARB
+#define GLEE_H_DEFINED_glIsProgramARB
+  typedef GLboolean (APIENTRYP GLEEPFNGLISPROGRAMARBPROC) (GLuint  program);
+  GLEE_EXTERN GLEEPFNGLISPROGRAMARBPROC GLeeFuncPtr_glIsProgramARB;
+  #define glIsProgramARB GLeeFuncPtr_glIsProgramARB
+#endif
+#endif 
+
+/* GL_ARB_fragment_program */
+
+#ifndef GL_ARB_fragment_program
+#define GL_ARB_fragment_program 1
+#define __GLEE_GL_ARB_fragment_program 1
+/* Constants */
+#define GL_FRAGMENT_PROGRAM_ARB                            0x8804
+#define GL_PROGRAM_ALU_INSTRUCTIONS_ARB                    0x8805
+#define GL_PROGRAM_TEX_INSTRUCTIONS_ARB                    0x8806
+#define GL_PROGRAM_TEX_INDIRECTIONS_ARB                    0x8807
+#define GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB             0x8808
+#define GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB             0x8809
+#define GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB             0x880A
+#define GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB                0x880B
+#define GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB                0x880C
+#define GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB                0x880D
+#define GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB         0x880E
+#define GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB         0x880F
+#define GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB         0x8810
+#define GL_MAX_TEXTURE_COORDS_ARB                          0x8871
+#define GL_MAX_TEXTURE_IMAGE_UNITS_ARB                     0x8872
+#endif 
+
+/* GL_ARB_vertex_buffer_object */
+
+#ifndef GL_ARB_vertex_buffer_object
+#define GL_ARB_vertex_buffer_object 1
+#define __GLEE_GL_ARB_vertex_buffer_object 1
+/* Constants */
+#define GL_BUFFER_SIZE_ARB                                 0x8764
+#define GL_BUFFER_USAGE_ARB                                0x8765
+#define GL_ARRAY_BUFFER_ARB                                0x8892
+#define GL_ELEMENT_ARRAY_BUFFER_ARB                        0x8893
+#define GL_ARRAY_BUFFER_BINDING_ARB                        0x8894
+#define GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB                0x8895
+#define GL_VERTEX_ARRAY_BUFFER_BINDING_ARB                 0x8896
+#define GL_NORMAL_ARRAY_BUFFER_BINDING_ARB                 0x8897
+#define GL_COLOR_ARRAY_BUFFER_BINDING_ARB                  0x8898
+#define GL_INDEX_ARRAY_BUFFER_BINDING_ARB                  0x8899
+#define GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB          0x889A
+#define GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB              0x889B
+#define GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB        0x889C
+#define GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB         0x889D
+#define GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB                 0x889E
+#define GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB          0x889F
+#define GL_READ_ONLY_ARB                                   0x88B8
+#define GL_WRITE_ONLY_ARB                                  0x88B9
+#define GL_READ_WRITE_ARB                                  0x88BA
+#define GL_BUFFER_ACCESS_ARB                               0x88BB
+#define GL_BUFFER_MAPPED_ARB                               0x88BC
+#define GL_BUFFER_MAP_POINTER_ARB                          0x88BD
+#define GL_STREAM_DRAW_ARB                                 0x88E0
+#define GL_STREAM_READ_ARB                                 0x88E1
+#define GL_STREAM_COPY_ARB                                 0x88E2
+#define GL_STATIC_DRAW_ARB                                 0x88E4
+#define GL_STATIC_READ_ARB                                 0x88E5
+#define GL_STATIC_COPY_ARB                                 0x88E6
+#define GL_DYNAMIC_DRAW_ARB                                0x88E8
+#define GL_DYNAMIC_READ_ARB                                0x88E9
+#define GL_DYNAMIC_COPY_ARB                                0x88EA
+#ifndef GLEE_H_DEFINED_glBindBufferARB
+#define GLEE_H_DEFINED_glBindBufferARB
+  typedef void (APIENTRYP GLEEPFNGLBINDBUFFERARBPROC) (GLenum  target, GLuint  buffer);
+  GLEE_EXTERN GLEEPFNGLBINDBUFFERARBPROC GLeeFuncPtr_glBindBufferARB;
+  #define glBindBufferARB GLeeFuncPtr_glBindBufferARB
+#endif
+#ifndef GLEE_H_DEFINED_glDeleteBuffersARB
+#define GLEE_H_DEFINED_glDeleteBuffersARB
+  typedef void (APIENTRYP GLEEPFNGLDELETEBUFFERSARBPROC) (GLsizei  n, const GLuint * buffers);
+  GLEE_EXTERN GLEEPFNGLDELETEBUFFERSARBPROC GLeeFuncPtr_glDeleteBuffersARB;
+  #define glDeleteBuffersARB GLeeFuncPtr_glDeleteBuffersARB
+#endif
+#ifndef GLEE_H_DEFINED_glGenBuffersARB
+#define GLEE_H_DEFINED_glGenBuffersARB
+  typedef void (APIENTRYP GLEEPFNGLGENBUFFERSARBPROC) (GLsizei  n, GLuint * buffers);
+  GLEE_EXTERN GLEEPFNGLGENBUFFERSARBPROC GLeeFuncPtr_glGenBuffersARB;
+  #define glGenBuffersARB GLeeFuncPtr_glGenBuffersARB
+#endif
+#ifndef GLEE_H_DEFINED_glIsBufferARB
+#define GLEE_H_DEFINED_glIsBufferARB
+  typedef GLboolean (APIENTRYP GLEEPFNGLISBUFFERARBPROC) (GLuint  buffer);
+  GLEE_EXTERN GLEEPFNGLISBUFFERARBPROC GLeeFuncPtr_glIsBufferARB;
+  #define glIsBufferARB GLeeFuncPtr_glIsBufferARB
+#endif
+#ifndef GLEE_H_DEFINED_glBufferDataARB
+#define GLEE_H_DEFINED_glBufferDataARB
+  typedef void (APIENTRYP GLEEPFNGLBUFFERDATAARBPROC) (GLenum  target, GLsizeiptrARB  size, const GLvoid * data, GLenum  usage);
+  GLEE_EXTERN GLEEPFNGLBUFFERDATAARBPROC GLeeFuncPtr_glBufferDataARB;
+  #define glBufferDataARB GLeeFuncPtr_glBufferDataARB
+#endif
+#ifndef GLEE_H_DEFINED_glBufferSubDataARB
+#define GLEE_H_DEFINED_glBufferSubDataARB
+  typedef void (APIENTRYP GLEEPFNGLBUFFERSUBDATAARBPROC) (GLenum  target, GLintptrARB  offset, GLsizeiptrARB  size, const GLvoid * data);
+  GLEE_EXTERN GLEEPFNGLBUFFERSUBDATAARBPROC GLeeFuncPtr_glBufferSubDataARB;
+  #define glBufferSubDataARB GLeeFuncPtr_glBufferSubDataARB
+#endif
+#ifndef GLEE_H_DEFINED_glGetBufferSubDataARB
+#define GLEE_H_DEFINED_glGetBufferSubDataARB
+  typedef void (APIENTRYP GLEEPFNGLGETBUFFERSUBDATAARBPROC) (GLenum  target, GLintptrARB  offset, GLsizeiptrARB  size, GLvoid * data);
+  GLEE_EXTERN GLEEPFNGLGETBUFFERSUBDATAARBPROC GLeeFuncPtr_glGetBufferSubDataARB;
+  #define glGetBufferSubDataARB GLeeFuncPtr_glGetBufferSubDataARB
+#endif
+#ifndef GLEE_H_DEFINED_glMapBufferARB
+#define GLEE_H_DEFINED_glMapBufferARB
+  typedef GLvoid* (APIENTRYP GLEEPFNGLMAPBUFFERARBPROC) (GLenum  target, GLenum  access);
+  GLEE_EXTERN GLEEPFNGLMAPBUFFERARBPROC GLeeFuncPtr_glMapBufferARB;
+  #define glMapBufferARB GLeeFuncPtr_glMapBufferARB
+#endif
+#ifndef GLEE_H_DEFINED_glUnmapBufferARB
+#define GLEE_H_DEFINED_glUnmapBufferARB
+  typedef GLboolean (APIENTRYP GLEEPFNGLUNMAPBUFFERARBPROC) (GLenum  target);
+  GLEE_EXTERN GLEEPFNGLUNMAPBUFFERARBPROC GLeeFuncPtr_glUnmapBufferARB;
+  #define glUnmapBufferARB GLeeFuncPtr_glUnmapBufferARB
+#endif
+#ifndef GLEE_H_DEFINED_glGetBufferParameterivARB
+#define GLEE_H_DEFINED_glGetBufferParameterivARB
+  typedef void (APIENTRYP GLEEPFNGLGETBUFFERPARAMETERIVARBPROC) (GLenum  target, GLenum  pname, GLint * params);
+  GLEE_EXTERN GLEEPFNGLGETBUFFERPARAMETERIVARBPROC GLeeFuncPtr_glGetBufferParameterivARB;
+  #define glGetBufferParameterivARB GLeeFuncPtr_glGetBufferParameterivARB
+#endif
+#ifndef GLEE_H_DEFINED_glGetBufferPointervARB
+#define GLEE_H_DEFINED_glGetBufferPointervARB
+  typedef void (APIENTRYP GLEEPFNGLGETBUFFERPOINTERVARBPROC) (GLenum  target, GLenum  pname, GLvoid* * params);
+  GLEE_EXTERN GLEEPFNGLGETBUFFERPOINTERVARBPROC GLeeFuncPtr_glGetBufferPointervARB;
+  #define glGetBufferPointervARB GLeeFuncPtr_glGetBufferPointervARB
+#endif
+#endif 
+
+/* GL_ARB_occlusion_query */
+
+#ifndef GL_ARB_occlusion_query
+#define GL_ARB_occlusion_query 1
+#define __GLEE_GL_ARB_occlusion_query 1
+/* Constants */
+#define GL_QUERY_COUNTER_BITS_ARB                          0x8864
+#define GL_CURRENT_QUERY_ARB                               0x8865
+#define GL_QUERY_RESULT_ARB                                0x8866
+#define GL_QUERY_RESULT_AVAILABLE_ARB                      0x8867
+#define GL_SAMPLES_PASSED_ARB                              0x8914
+#ifndef GLEE_H_DEFINED_glGenQueriesARB
+#define GLEE_H_DEFINED_glGenQueriesARB
+  typedef void (APIENTRYP GLEEPFNGLGENQUERIESARBPROC) (GLsizei  n, GLuint * ids);
+  GLEE_EXTERN GLEEPFNGLGENQUERIESARBPROC GLeeFuncPtr_glGenQueriesARB;
+  #define glGenQueriesARB GLeeFuncPtr_glGenQueriesARB
+#endif
+#ifndef GLEE_H_DEFINED_glDeleteQueriesARB
+#define GLEE_H_DEFINED_glDeleteQueriesARB
+  typedef void (APIENTRYP GLEEPFNGLDELETEQUERIESARBPROC) (GLsizei  n, const GLuint * ids);
+  GLEE_EXTERN GLEEPFNGLDELETEQUERIESARBPROC GLeeFuncPtr_glDeleteQueriesARB;
+  #define glDeleteQueriesARB GLeeFuncPtr_glDeleteQueriesARB
+#endif
+#ifndef GLEE_H_DEFINED_glIsQueryARB
+#define GLEE_H_DEFINED_glIsQueryARB
+  typedef GLboolean (APIENTRYP GLEEPFNGLISQUERYARBPROC) (GLuint  id);
+  GLEE_EXTERN GLEEPFNGLISQUERYARBPROC GLeeFuncPtr_glIsQueryARB;
+  #define glIsQueryARB GLeeFuncPtr_glIsQueryARB
+#endif
+#ifndef GLEE_H_DEFINED_glBeginQueryARB
+#define GLEE_H_DEFINED_glBeginQueryARB
+  typedef void (APIENTRYP GLEEPFNGLBEGINQUERYARBPROC) (GLenum  target, GLuint  id);
+  GLEE_EXTERN GLEEPFNGLBEGINQUERYARBPROC GLeeFuncPtr_glBeginQueryARB;
+  #define glBeginQueryARB GLeeFuncPtr_glBeginQueryARB
+#endif
+#ifndef GLEE_H_DEFINED_glEndQueryARB
+#define GLEE_H_DEFINED_glEndQueryARB
+  typedef void (APIENTRYP GLEEPFNGLENDQUERYARBPROC) (GLenum  target);
+  GLEE_EXTERN GLEEPFNGLENDQUERYARBPROC GLeeFuncPtr_glEndQueryARB;
+  #define glEndQueryARB GLeeFuncPtr_glEndQueryARB
+#endif
+#ifndef GLEE_H_DEFINED_glGetQueryivARB
+#define GLEE_H_DEFINED_glGetQueryivARB
+  typedef void (APIENTRYP GLEEPFNGLGETQUERYIVARBPROC) (GLenum  target, GLenum  pname, GLint * params);
+  GLEE_EXTERN GLEEPFNGLGETQUERYIVARBPROC GLeeFuncPtr_glGetQueryivARB;
+  #define glGetQueryivARB GLeeFuncPtr_glGetQueryivARB
+#endif
+#ifndef GLEE_H_DEFINED_glGetQueryObjectivARB
+#define GLEE_H_DEFINED_glGetQueryObjectivARB
+  typedef void (APIENTRYP GLEEPFNGLGETQUERYOBJECTIVARBPROC) (GLuint  id, GLenum  pname, GLint * params);
+  GLEE_EXTERN GLEEPFNGLGETQUERYOBJECTIVARBPROC GLeeFuncPtr_glGetQueryObjectivARB;
+  #define glGetQueryObjectivARB GLeeFuncPtr_glGetQueryObjectivARB
+#endif
+#ifndef GLEE_H_DEFINED_glGetQueryObjectuivARB
+#define GLEE_H_DEFINED_glGetQueryObjectuivARB
+  typedef void (APIENTRYP GLEEPFNGLGETQUERYOBJECTUIVARBPROC) (GLuint  id, GLenum  pname, GLuint * params);
+  GLEE_EXTERN GLEEPFNGLGETQUERYOBJECTUIVARBPROC GLeeFuncPtr_glGetQueryObjectuivARB;
+  #define glGetQueryObjectuivARB GLeeFuncPtr_glGetQueryObjectuivARB
+#endif
+#endif 
+
+/* GL_ARB_shader_objects */
+
+#ifndef GL_ARB_shader_objects
+#define GL_ARB_shader_objects 1
+#define __GLEE_GL_ARB_shader_objects 1
+/* Constants */
+#define GL_PROGRAM_OBJECT_ARB                              0x8B40
+#define GL_SHADER_OBJECT_ARB                               0x8B48
+#define GL_OBJECT_TYPE_ARB                                 0x8B4E
+#define GL_OBJECT_SUBTYPE_ARB                              0x8B4F
+#define GL_FLOAT_VEC2_ARB                                  0x8B50
+#define GL_FLOAT_VEC3_ARB                                  0x8B51
+#define GL_FLOAT_VEC4_ARB                                  0x8B52
+#define GL_INT_VEC2_ARB                                    0x8B53
+#define GL_INT_VEC3_ARB                                    0x8B54
+#define GL_INT_VEC4_ARB                                    0x8B55
+#define GL_BOOL_ARB                                        0x8B56
+#define GL_BOOL_VEC2_ARB                                   0x8B57
+#define GL_BOOL_VEC3_ARB                                   0x8B58
+#define GL_BOOL_VEC4_ARB                                   0x8B59
+#define GL_FLOAT_MAT2_ARB                                  0x8B5A
+#define GL_FLOAT_MAT3_ARB                                  0x8B5B
+#define GL_FLOAT_MAT4_ARB                                  0x8B5C
+#define GL_SAMPLER_1D_ARB                                  0x8B5D
+#define GL_SAMPLER_2D_ARB                                  0x8B5E
+#define GL_SAMPLER_3D_ARB                                  0x8B5F
+#define GL_SAMPLER_CUBE_ARB                                0x8B60
+#define GL_SAMPLER_1D_SHADOW_ARB                           0x8B61
+#define GL_SAMPLER_2D_SHADOW_ARB                           0x8B62
+#define GL_SAMPLER_2D_RECT_ARB                             0x8B63
+#define GL_SAMPLER_2D_RECT_SHADOW_ARB                      0x8B64
+#define GL_OBJECT_DELETE_STATUS_ARB                        0x8B80
+#define GL_OBJECT_COMPILE_STATUS_ARB                       0x8B81
+#define GL_OBJECT_LINK_STATUS_ARB                          0x8B82
+#define GL_OBJECT_VALIDATE_STATUS_ARB                      0x8B83
+#define GL_OBJECT_INFO_LOG_LENGTH_ARB                      0x8B84
+#define GL_OBJECT_ATTACHED_OBJECTS_ARB                     0x8B85
+#define GL_OBJECT_ACTIVE_UNIFORMS_ARB                      0x8B86
+#define GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB            0x8B87
+#define GL_OBJECT_SHADER_SOURCE_LENGTH_ARB                 0x8B88
+#ifndef GLEE_H_DEFINED_glDeleteObjectARB
+#define GLEE_H_DEFINED_glDeleteObjectARB
+  typedef void (APIENTRYP GLEEPFNGLDELETEOBJECTARBPROC) (GLhandleARB  obj);
+  GLEE_EXTERN GLEEPFNGLDELETEOBJECTARBPROC GLeeFuncPtr_glDeleteObjectARB;
+  #define glDeleteObjectARB GLeeFuncPtr_glDeleteObjectARB
+#endif
+#ifndef GLEE_H_DEFINED_glGetHandleARB
+#define GLEE_H_DEFINED_glGetHandleARB
+  typedef GLhandleARB (APIENTRYP GLEEPFNGLGETHANDLEARBPROC) (GLenum  pname);
+  GLEE_EXTERN GLEEPFNGLGETHANDLEARBPROC GLeeFuncPtr_glGetHandleARB;
+  #define glGetHandleARB GLeeFuncPtr_glGetHandleARB
+#endif
+#ifndef GLEE_H_DEFINED_glDetachObjectARB
+#define GLEE_H_DEFINED_glDetachObjectARB
+  typedef void (APIENTRYP GLEEPFNGLDETACHOBJECTARBPROC) (GLhandleARB  containerObj, GLhandleARB  attachedObj);
+  GLEE_EXTERN GLEEPFNGLDETACHOBJECTARBPROC GLeeFuncPtr_glDetachObjectARB;
+  #define glDetachObjectARB GLeeFuncPtr_glDetachObjectARB
+#endif
+#ifndef GLEE_H_DEFINED_glCreateShaderObjectARB
+#define GLEE_H_DEFINED_glCreateShaderObjectARB
+  typedef GLhandleARB (APIENTRYP GLEEPFNGLCREATESHADEROBJECTARBPROC) (GLenum  shaderType);
+  GLEE_EXTERN GLEEPFNGLCREATESHADEROBJECTARBPROC GLeeFuncPtr_glCreateShaderObjectARB;
+  #define glCreateShaderObjectARB GLeeFuncPtr_glCreateShaderObjectARB
+#endif
+#ifndef GLEE_H_DEFINED_glShaderSourceARB
+#define GLEE_H_DEFINED_glShaderSourceARB
+  typedef void (APIENTRYP GLEEPFNGLSHADERSOURCEARBPROC) (GLhandleARB  shaderObj, GLsizei  count, const GLcharARB* * string, const GLint * length);
+  GLEE_EXTERN GLEEPFNGLSHADERSOURCEARBPROC GLeeFuncPtr_glShaderSourceARB;
+  #define glShaderSourceARB GLeeFuncPtr_glShaderSourceARB
+#endif
+#ifndef GLEE_H_DEFINED_glCompileShaderARB
+#define GLEE_H_DEFINED_glCompileShaderARB
+  typedef void (APIENTRYP GLEEPFNGLCOMPILESHADERARBPROC) (GLhandleARB  shaderObj);
+  GLEE_EXTERN GLEEPFNGLCOMPILESHADERARBPROC GLeeFuncPtr_glCompileShaderARB;
+  #define glCompileShaderARB GLeeFuncPtr_glCompileShaderARB
+#endif
+#ifndef GLEE_H_DEFINED_glCreateProgramObjectARB
+#define GLEE_H_DEFINED_glCreateProgramObjectARB
+  typedef GLhandleARB (APIENTRYP GLEEPFNGLCREATEPROGRAMOBJECTARBPROC) ();
+  GLEE_EXTERN GLEEPFNGLCREATEPROGRAMOBJECTARBPROC GLeeFuncPtr_glCreateProgramObjectARB;
+  #define glCreateProgramObjectARB GLeeFuncPtr_glCreateProgramObjectARB
+#endif
+#ifndef GLEE_H_DEFINED_glAttachObjectARB
+#define GLEE_H_DEFINED_glAttachObjectARB
+  typedef void (APIENTRYP GLEEPFNGLATTACHOBJECTARBPROC) (GLhandleARB  containerObj, GLhandleARB  obj);
+  GLEE_EXTERN GLEEPFNGLATTACHOBJECTARBPROC GLeeFuncPtr_glAttachObjectARB;
+  #define glAttachObjectARB GLeeFuncPtr_glAttachObjectARB
+#endif
+#ifndef GLEE_H_DEFINED_glLinkProgramARB
+#define GLEE_H_DEFINED_glLinkProgramARB
+  typedef void (APIENTRYP GLEEPFNGLLINKPROGRAMARBPROC) (GLhandleARB  programObj);
+  GLEE_EXTERN GLEEPFNGLLINKPROGRAMARBPROC GLeeFuncPtr_glLinkProgramARB;
+  #define glLinkProgramARB GLeeFuncPtr_glLinkProgramARB
+#endif
+#ifndef GLEE_H_DEFINED_glUseProgramObjectARB
+#define GLEE_H_DEFINED_glUseProgramObjectARB
+  typedef void (APIENTRYP GLEEPFNGLUSEPROGRAMOBJECTARBPROC) (GLhandleARB  programObj);
+  GLEE_EXTERN GLEEPFNGLUSEPROGRAMOBJECTARBPROC GLeeFuncPtr_glUseProgramObjectARB;
+  #define glUseProgramObjectARB GLeeFuncPtr_glUseProgramObjectARB
+#endif
+#ifndef GLEE_H_DEFINED_glValidateProgramARB
+#define GLEE_H_DEFINED_glValidateProgramARB
+  typedef void (APIENTRYP GLEEPFNGLVALIDATEPROGRAMARBPROC) (GLhandleARB  programObj);
+  GLEE_EXTERN GLEEPFNGLVALIDATEPROGRAMARBPROC GLeeFuncPtr_glValidateProgramARB;
+  #define glValidateProgramARB GLeeFuncPtr_glValidateProgramARB
+#endif
+#ifndef GLEE_H_DEFINED_glUniform1fARB
+#define GLEE_H_DEFINED_glUniform1fARB
+  typedef void (APIENTRYP GLEEPFNGLUNIFORM1FARBPROC) (GLint  location, GLfloat  v0);
+  GLEE_EXTERN GLEEPFNGLUNIFORM1FARBPROC GLeeFuncPtr_glUniform1fARB;
+  #define glUniform1fARB GLeeFuncPtr_glUniform1fARB
+#endif
+#ifndef GLEE_H_DEFINED_glUniform2fARB
+#define GLEE_H_DEFINED_glUniform2fARB
+  typedef void (APIENTRYP GLEEPFNGLUNIFORM2FARBPROC) (GLint  location, GLfloat  v0, GLfloat  v1);
+  GLEE_EXTERN GLEEPFNGLUNIFORM2FARBPROC GLeeFuncPtr_glUniform2fARB;
+  #define glUniform2fARB GLeeFuncPtr_glUniform2fARB
+#endif
+#ifndef GLEE_H_DEFINED_glUniform3fARB
+#define GLEE_H_DEFINED_glUniform3fARB
+  typedef void (APIENTRYP GLEEPFNGLUNIFORM3FARBPROC) (GLint  location, GLfloat  v0, GLfloat  v1, GLfloat  v2);
+  GLEE_EXTERN GLEEPFNGLUNIFORM3FARBPROC GLeeFuncPtr_glUniform3fARB;
+  #define glUniform3fARB GLeeFuncPtr_glUniform3fARB
+#endif
+#ifndef GLEE_H_DEFINED_glUniform4fARB
+#define GLEE_H_DEFINED_glUniform4fARB
+  typedef void (APIENTRYP GLEEPFNGLUNIFORM4FARBPROC) (GLint  location, GLfloat  v0, GLfloat  v1, GLfloat  v2, GLfloat  v3);
+  GLEE_EXTERN GLEEPFNGLUNIFORM4FARBPROC GLeeFuncPtr_glUniform4fARB;
+  #define glUniform4fARB GLeeFuncPtr_glUniform4fARB
+#endif
+#ifndef GLEE_H_DEFINED_glUniform1iARB
+#define GLEE_H_DEFINED_glUniform1iARB
+  typedef void (APIENTRYP GLEEPFNGLUNIFORM1IARBPROC) (GLint  location, GLint  v0);
+  GLEE_EXTERN GLEEPFNGLUNIFORM1IARBPROC GLeeFuncPtr_glUniform1iARB;
+  #define glUniform1iARB GLeeFuncPtr_glUniform1iARB
+#endif
+#ifndef GLEE_H_DEFINED_glUniform2iARB
+#define GLEE_H_DEFINED_glUniform2iARB
+  typedef void (APIENTRYP GLEEPFNGLUNIFORM2IARBPROC) (GLint  location, GLint  v0, GLint  v1);
+  GLEE_EXTERN GLEEPFNGLUNIFORM2IARBPROC GLeeFuncPtr_glUniform2iARB;
+  #define glUniform2iARB GLeeFuncPtr_glUniform2iARB
+#endif
+#ifndef GLEE_H_DEFINED_glUniform3iARB
+#define GLEE_H_DEFINED_glUniform3iARB
+  typedef void (APIENTRYP GLEEPFNGLUNIFORM3IARBPROC) (GLint  location, GLint  v0, GLint  v1, GLint  v2);
+  GLEE_EXTERN GLEEPFNGLUNIFORM3IARBPROC GLeeFuncPtr_glUniform3iARB;
+  #define glUniform3iARB GLeeFuncPtr_glUniform3iARB
+#endif
+#ifndef GLEE_H_DEFINED_glUniform4iARB
+#define GLEE_H_DEFINED_glUniform4iARB
+  typedef void (APIENTRYP GLEEPFNGLUNIFORM4IARBPROC) (GLint  location, GLint  v0, GLint  v1, GLint  v2, GLint  v3);
+  GLEE_EXTERN GLEEPFNGLUNIFORM4IARBPROC GLeeFuncPtr_glUniform4iARB;
+  #define glUniform4iARB GLeeFuncPtr_glUniform4iARB
+#endif
+#ifndef GLEE_H_DEFINED_glUniform1fvARB
+#define GLEE_H_DEFINED_glUniform1fvARB
+  typedef void (APIENTRYP GLEEPFNGLUNIFORM1FVARBPROC) (GLint  location, GLsizei  count, const GLfloat * value);
+  GLEE_EXTERN GLEEPFNGLUNIFORM1FVARBPROC GLeeFuncPtr_glUniform1fvARB;
+  #define glUniform1fvARB GLeeFuncPtr_glUniform1fvARB
+#endif
+#ifndef GLEE_H_DEFINED_glUniform2fvARB
+#define GLEE_H_DEFINED_glUniform2fvARB
+  typedef void (APIENTRYP GLEEPFNGLUNIFORM2FVARBPROC) (GLint  location, GLsizei  count, const GLfloat * value);
+  GLEE_EXTERN GLEEPFNGLUNIFORM2FVARBPROC GLeeFuncPtr_glUniform2fvARB;
+  #define glUniform2fvARB GLeeFuncPtr_glUniform2fvARB
+#endif
+#ifndef GLEE_H_DEFINED_glUniform3fvARB
+#define GLEE_H_DEFINED_glUniform3fvARB
+  typedef void (APIENTRYP GLEEPFNGLUNIFORM3FVARBPROC) (GLint  location, GLsizei  count, const GLfloat * value);
+  GLEE_EXTERN GLEEPFNGLUNIFORM3FVARBPROC GLeeFuncPtr_glUniform3fvARB;
+  #define glUniform3fvARB GLeeFuncPtr_glUniform3fvARB
+#endif
+#ifndef GLEE_H_DEFINED_glUniform4fvARB
+#define GLEE_H_DEFINED_glUniform4fvARB
+  typedef void (APIENTRYP GLEEPFNGLUNIFORM4FVARBPROC) (GLint  location, GLsizei  count, const GLfloat * value);
+  GLEE_EXTERN GLEEPFNGLUNIFORM4FVARBPROC GLeeFuncPtr_glUniform4fvARB;
+  #define glUniform4fvARB GLeeFuncPtr_glUniform4fvARB
+#endif
+#ifndef GLEE_H_DEFINED_glUniform1ivARB
+#define GLEE_H_DEFINED_glUniform1ivARB
+  typedef void (APIENTRYP GLEEPFNGLUNIFORM1IVARBPROC) (GLint  location, GLsizei  count, const GLint * value);
+  GLEE_EXTERN GLEEPFNGLUNIFORM1IVARBPROC GLeeFuncPtr_glUniform1ivARB;
+  #define glUniform1ivARB GLeeFuncPtr_glUniform1ivARB
+#endif
+#ifndef GLEE_H_DEFINED_glUniform2ivARB
+#define GLEE_H_DEFINED_glUniform2ivARB
+  typedef void (APIENTRYP GLEEPFNGLUNIFORM2IVARBPROC) (GLint  location, GLsizei  count, const GLint * value);
+  GLEE_EXTERN GLEEPFNGLUNIFORM2IVARBPROC GLeeFuncPtr_glUniform2ivARB;
+  #define glUniform2ivARB GLeeFuncPtr_glUniform2ivARB
+#endif
+#ifndef GLEE_H_DEFINED_glUniform3ivARB
+#define GLEE_H_DEFINED_glUniform3ivARB
+  typedef void (APIENTRYP GLEEPFNGLUNIFORM3IVARBPROC) (GLint  location, GLsizei  count, const GLint * value);
+  GLEE_EXTERN GLEEPFNGLUNIFORM3IVARBPROC GLeeFuncPtr_glUniform3ivARB;
+  #define glUniform3ivARB GLeeFuncPtr_glUniform3ivARB
+#endif
+#ifndef GLEE_H_DEFINED_glUniform4ivARB
+#define GLEE_H_DEFINED_glUniform4ivARB
+  typedef void (APIENTRYP GLEEPFNGLUNIFORM4IVARBPROC) (GLint  location, GLsizei  count, const GLint * value);
+  GLEE_EXTERN GLEEPFNGLUNIFORM4IVARBPROC GLeeFuncPtr_glUniform4ivARB;
+  #define glUniform4ivARB GLeeFuncPtr_glUniform4ivARB
+#endif
+#ifndef GLEE_H_DEFINED_glUniformMatrix2fvARB
+#define GLEE_H_DEFINED_glUniformMatrix2fvARB
+  typedef void (APIENTRYP GLEEPFNGLUNIFORMMATRIX2FVARBPROC) (GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value);
+  GLEE_EXTERN GLEEPFNGLUNIFORMMATRIX2FVARBPROC GLeeFuncPtr_glUniformMatrix2fvARB;
+  #define glUniformMatrix2fvARB GLeeFuncPtr_glUniformMatrix2fvARB
+#endif
+#ifndef GLEE_H_DEFINED_glUniformMatrix3fvARB
+#define GLEE_H_DEFINED_glUniformMatrix3fvARB
+  typedef void (APIENTRYP GLEEPFNGLUNIFORMMATRIX3FVARBPROC) (GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value);
+  GLEE_EXTERN GLEEPFNGLUNIFORMMATRIX3FVARBPROC GLeeFuncPtr_glUniformMatrix3fvARB;
+  #define glUniformMatrix3fvARB GLeeFuncPtr_glUniformMatrix3fvARB
+#endif
+#ifndef GLEE_H_DEFINED_glUniformMatrix4fvARB
+#define GLEE_H_DEFINED_glUniformMatrix4fvARB
+  typedef void (APIENTRYP GLEEPFNGLUNIFORMMATRIX4FVARBPROC) (GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value);
+  GLEE_EXTERN GLEEPFNGLUNIFORMMATRIX4FVARBPROC GLeeFuncPtr_glUniformMatrix4fvARB;
+  #define glUniformMatrix4fvARB GLeeFuncPtr_glUniformMatrix4fvARB
+#endif
+#ifndef GLEE_H_DEFINED_glGetObjectParameterfvARB
+#define GLEE_H_DEFINED_glGetObjectParameterfvARB
+  typedef void (APIENTRYP GLEEPFNGLGETOBJECTPARAMETERFVARBPROC) (GLhandleARB  obj, GLenum  pname, GLfloat * params);
+  GLEE_EXTERN GLEEPFNGLGETOBJECTPARAMETERFVARBPROC GLeeFuncPtr_glGetObjectParameterfvARB;
+  #define glGetObjectParameterfvARB GLeeFuncPtr_glGetObjectParameterfvARB
+#endif
+#ifndef GLEE_H_DEFINED_glGetObjectParameterivARB
+#define GLEE_H_DEFINED_glGetObjectParameterivARB
+  typedef void (APIENTRYP GLEEPFNGLGETOBJECTPARAMETERIVARBPROC) (GLhandleARB  obj, GLenum  pname, GLint * params);
+  GLEE_EXTERN GLEEPFNGLGETOBJECTPARAMETERIVARBPROC GLeeFuncPtr_glGetObjectParameterivARB;
+  #define glGetObjectParameterivARB GLeeFuncPtr_glGetObjectParameterivARB
+#endif
+#ifndef GLEE_H_DEFINED_glGetInfoLogARB
+#define GLEE_H_DEFINED_glGetInfoLogARB
+  typedef void (APIENTRYP GLEEPFNGLGETINFOLOGARBPROC) (GLhandleARB  obj, GLsizei  maxLength, GLsizei * length, GLcharARB * infoLog);
+  GLEE_EXTERN GLEEPFNGLGETINFOLOGARBPROC GLeeFuncPtr_glGetInfoLogARB;
+  #define glGetInfoLogARB GLeeFuncPtr_glGetInfoLogARB
+#endif
+#ifndef GLEE_H_DEFINED_glGetAttachedObjectsARB
+#define GLEE_H_DEFINED_glGetAttachedObjectsARB
+  typedef void (APIENTRYP GLEEPFNGLGETATTACHEDOBJECTSARBPROC) (GLhandleARB  containerObj, GLsizei  maxCount, GLsizei * count, GLhandleARB * obj);
+  GLEE_EXTERN GLEEPFNGLGETATTACHEDOBJECTSARBPROC GLeeFuncPtr_glGetAttachedObjectsARB;
+  #define glGetAttachedObjectsARB GLeeFuncPtr_glGetAttachedObjectsARB
+#endif
+#ifndef GLEE_H_DEFINED_glGetUniformLocationARB
+#define GLEE_H_DEFINED_glGetUniformLocationARB
+  typedef GLint (APIENTRYP GLEEPFNGLGETUNIFORMLOCATIONARBPROC) (GLhandleARB  programObj, const GLcharARB * name);
+  GLEE_EXTERN GLEEPFNGLGETUNIFORMLOCATIONARBPROC GLeeFuncPtr_glGetUniformLocationARB;
+  #define glGetUniformLocationARB GLeeFuncPtr_glGetUniformLocationARB
+#endif
+#ifndef GLEE_H_DEFINED_glGetActiveUniformARB
+#define GLEE_H_DEFINED_glGetActiveUniformARB
+  typedef void (APIENTRYP GLEEPFNGLGETACTIVEUNIFORMARBPROC) (GLhandleARB  programObj, GLuint  index, GLsizei  maxLength, GLsizei * length, GLint * size, GLenum * type, GLcharARB * name);
+  GLEE_EXTERN GLEEPFNGLGETACTIVEUNIFORMARBPROC GLeeFuncPtr_glGetActiveUniformARB;
+  #define glGetActiveUniformARB GLeeFuncPtr_glGetActiveUniformARB
+#endif
+#ifndef GLEE_H_DEFINED_glGetUniformfvARB
+#define GLEE_H_DEFINED_glGetUniformfvARB
+  typedef void (APIENTRYP GLEEPFNGLGETUNIFORMFVARBPROC) (GLhandleARB  programObj, GLint  location, GLfloat * params);
+  GLEE_EXTERN GLEEPFNGLGETUNIFORMFVARBPROC GLeeFuncPtr_glGetUniformfvARB;
+  #define glGetUniformfvARB GLeeFuncPtr_glGetUniformfvARB
+#endif
+#ifndef GLEE_H_DEFINED_glGetUniformivARB
+#define GLEE_H_DEFINED_glGetUniformivARB
+  typedef void (APIENTRYP GLEEPFNGLGETUNIFORMIVARBPROC) (GLhandleARB  programObj, GLint  location, GLint * params);
+  GLEE_EXTERN GLEEPFNGLGETUNIFORMIVARBPROC GLeeFuncPtr_glGetUniformivARB;
+  #define glGetUniformivARB GLeeFuncPtr_glGetUniformivARB
+#endif
+#ifndef GLEE_H_DEFINED_glGetShaderSourceARB
+#define GLEE_H_DEFINED_glGetShaderSourceARB
+  typedef void (APIENTRYP GLEEPFNGLGETSHADERSOURCEARBPROC) (GLhandleARB  obj, GLsizei  maxLength, GLsizei * length, GLcharARB * source);
+  GLEE_EXTERN GLEEPFNGLGETSHADERSOURCEARBPROC GLeeFuncPtr_glGetShaderSourceARB;
+  #define glGetShaderSourceARB GLeeFuncPtr_glGetShaderSourceARB
+#endif
+#endif 
+
+/* GL_ARB_vertex_shader */
+
+#ifndef GL_ARB_vertex_shader
+#define GL_ARB_vertex_shader 1
+#define __GLEE_GL_ARB_vertex_shader 1
+/* Constants */
+#define GL_VERTEX_SHADER_ARB                               0x8B31
+#define GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB               0x8B4A
+#define GL_MAX_VARYING_FLOATS_ARB                          0x8B4B
+#define GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB              0x8B4C
+#define GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB            0x8B4D
+#define GL_OBJECT_ACTIVE_ATTRIBUTES_ARB                    0x8B89
+#define GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB          0x8B8A
+#ifndef GLEE_H_DEFINED_glBindAttribLocationARB
+#define GLEE_H_DEFINED_glBindAttribLocationARB
+  typedef void (APIENTRYP GLEEPFNGLBINDATTRIBLOCATIONARBPROC) (GLhandleARB  programObj, GLuint  index, const GLcharARB * name);
+  GLEE_EXTERN GLEEPFNGLBINDATTRIBLOCATIONARBPROC GLeeFuncPtr_glBindAttribLocationARB;
+  #define glBindAttribLocationARB GLeeFuncPtr_glBindAttribLocationARB
+#endif
+#ifndef GLEE_H_DEFINED_glGetActiveAttribARB
+#define GLEE_H_DEFINED_glGetActiveAttribARB
+  typedef void (APIENTRYP GLEEPFNGLGETACTIVEATTRIBARBPROC) (GLhandleARB  programObj, GLuint  index, GLsizei  maxLength, GLsizei * length, GLint * size, GLenum * type, GLcharARB * name);
+  GLEE_EXTERN GLEEPFNGLGETACTIVEATTRIBARBPROC GLeeFuncPtr_glGetActiveAttribARB;
+  #define glGetActiveAttribARB GLeeFuncPtr_glGetActiveAttribARB
+#endif
+#ifndef GLEE_H_DEFINED_glGetAttribLocationARB
+#define GLEE_H_DEFINED_glGetAttribLocationARB
+  typedef GLint (APIENTRYP GLEEPFNGLGETATTRIBLOCATIONARBPROC) (GLhandleARB  programObj, const GLcharARB * name);
+  GLEE_EXTERN GLEEPFNGLGETATTRIBLOCATIONARBPROC GLeeFuncPtr_glGetAttribLocationARB;
+  #define glGetAttribLocationARB GLeeFuncPtr_glGetAttribLocationARB
+#endif
+#endif 
+
+/* GL_ARB_fragment_shader */
+
+#ifndef GL_ARB_fragment_shader
+#define GL_ARB_fragment_shader 1
+#define __GLEE_GL_ARB_fragment_shader 1
+/* Constants */
+#define GL_FRAGMENT_SHADER_ARB                             0x8B30
+#define GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB             0x8B49
+#define GL_FRAGMENT_SHADER_DERIVATIVE_HINT_ARB             0x8B8B
+#endif 
+
+/* GL_ARB_shading_language_100 */
+
+#ifndef GL_ARB_shading_language_100
+#define GL_ARB_shading_language_100 1
+#define __GLEE_GL_ARB_shading_language_100 1
+/* Constants */
+#define GL_SHADING_LANGUAGE_VERSION_ARB                    0x8B8C
+#endif 
+
+/* GL_ARB_texture_non_power_of_two */
+
+#ifndef GL_ARB_texture_non_power_of_two
+#define GL_ARB_texture_non_power_of_two 1
+#define __GLEE_GL_ARB_texture_non_power_of_two 1
+/* Constants */
+#endif 
+
+/* GL_ARB_point_sprite */
+
+#ifndef GL_ARB_point_sprite
+#define GL_ARB_point_sprite 1
+#define __GLEE_GL_ARB_point_sprite 1
+/* Constants */
+#define GL_POINT_SPRITE_ARB                                0x8861
+#define GL_COORD_REPLACE_ARB                               0x8862
+#endif 
+
+/* GL_ARB_fragment_program_shadow */
+
+#ifndef GL_ARB_fragment_program_shadow
+#define GL_ARB_fragment_program_shadow 1
+#define __GLEE_GL_ARB_fragment_program_shadow 1
+/* Constants */
+#endif 
+
+/* GL_ARB_draw_buffers */
+
+#ifndef GL_ARB_draw_buffers
+#define GL_ARB_draw_buffers 1
+#define __GLEE_GL_ARB_draw_buffers 1
+/* Constants */
+#define GL_MAX_DRAW_BUFFERS_ARB                            0x8824
+#define GL_DRAW_BUFFER0_ARB                                0x8825
+#define GL_DRAW_BUFFER1_ARB                                0x8826
+#define GL_DRAW_BUFFER2_ARB                                0x8827
+#define GL_DRAW_BUFFER3_ARB                                0x8828
+#define GL_DRAW_BUFFER4_ARB                                0x8829
+#define GL_DRAW_BUFFER5_ARB                                0x882A
+#define GL_DRAW_BUFFER6_ARB                                0x882B
+#define GL_DRAW_BUFFER7_ARB                                0x882C
+#define GL_DRAW_BUFFER8_ARB                                0x882D
+#define GL_DRAW_BUFFER9_ARB                                0x882E
+#define GL_DRAW_BUFFER10_ARB                               0x882F
+#define GL_DRAW_BUFFER11_ARB                               0x8830
+#define GL_DRAW_BUFFER12_ARB                               0x8831
+#define GL_DRAW_BUFFER13_ARB                               0x8832
+#define GL_DRAW_BUFFER14_ARB                               0x8833
+#define GL_DRAW_BUFFER15_ARB                               0x8834
+#ifndef GLEE_H_DEFINED_glDrawBuffersARB
+#define GLEE_H_DEFINED_glDrawBuffersARB
+  typedef void (APIENTRYP GLEEPFNGLDRAWBUFFERSARBPROC) (GLsizei  n, const GLenum * bufs);
+  GLEE_EXTERN GLEEPFNGLDRAWBUFFERSARBPROC GLeeFuncPtr_glDrawBuffersARB;
+  #define glDrawBuffersARB GLeeFuncPtr_glDrawBuffersARB
+#endif
+#endif 
+
+/* GL_ARB_texture_rectangle */
+
+#ifndef GL_ARB_texture_rectangle
+#define GL_ARB_texture_rectangle 1
+#define __GLEE_GL_ARB_texture_rectangle 1
+/* Constants */
+#define GL_TEXTURE_RECTANGLE_ARB                           0x84F5
+#define GL_TEXTURE_BINDING_RECTANGLE_ARB                   0x84F6
+#define GL_PROXY_TEXTURE_RECTANGLE_ARB                     0x84F7
+#define GL_MAX_RECTANGLE_TEXTURE_SIZE_ARB                  0x84F8
+#endif 
+
+/* GL_ARB_color_buffer_float */
+
+#ifndef GL_ARB_color_buffer_float
+#define GL_ARB_color_buffer_float 1
+#define __GLEE_GL_ARB_color_buffer_float 1
+/* Constants */
+#define GL_RGBA_FLOAT_MODE_ARB                             0x8820
+#define GL_CLAMP_VERTEX_COLOR_ARB                          0x891A
+#define GL_CLAMP_FRAGMENT_COLOR_ARB                        0x891B
+#define GL_CLAMP_READ_COLOR_ARB                            0x891C
+#define GL_FIXED_ONLY_ARB                                  0x891D
+#ifndef GLEE_H_DEFINED_glClampColorARB
+#define GLEE_H_DEFINED_glClampColorARB
+  typedef void (APIENTRYP GLEEPFNGLCLAMPCOLORARBPROC) (GLenum  target, GLenum  clamp);
+  GLEE_EXTERN GLEEPFNGLCLAMPCOLORARBPROC GLeeFuncPtr_glClampColorARB;
+  #define glClampColorARB GLeeFuncPtr_glClampColorARB
+#endif
+#endif 
+
+/* GL_ARB_half_float_pixel */
+
+#ifndef GL_ARB_half_float_pixel
+#define GL_ARB_half_float_pixel 1
+#define __GLEE_GL_ARB_half_float_pixel 1
+/* Constants */
+#define GL_HALF_FLOAT_ARB                                  0x140B
+#endif 
+
+/* GL_ARB_texture_float */
+
+#ifndef GL_ARB_texture_float
+#define GL_ARB_texture_float 1
+#define __GLEE_GL_ARB_texture_float 1
+/* Constants */
+#define GL_TEXTURE_RED_TYPE_ARB                            0x8C10
+#define GL_TEXTURE_GREEN_TYPE_ARB                          0x8C11
+#define GL_TEXTURE_BLUE_TYPE_ARB                           0x8C12
+#define GL_TEXTURE_ALPHA_TYPE_ARB                          0x8C13
+#define GL_TEXTURE_LUMINANCE_TYPE_ARB                      0x8C14
+#define GL_TEXTURE_INTENSITY_TYPE_ARB                      0x8C15
+#define GL_TEXTURE_DEPTH_TYPE_ARB                          0x8C16
+#define GL_UNSIGNED_NORMALIZED_ARB                         0x8C17
+#define GL_RGBA32F_ARB                                     0x8814
+#define GL_RGB32F_ARB                                      0x8815
+#define GL_ALPHA32F_ARB                                    0x8816
+#define GL_INTENSITY32F_ARB                                0x8817
+#define GL_LUMINANCE32F_ARB                                0x8818
+#define GL_LUMINANCE_ALPHA32F_ARB                          0x8819
+#define GL_RGBA16F_ARB                                     0x881A
+#define GL_RGB16F_ARB                                      0x881B
+#define GL_ALPHA16F_ARB                                    0x881C
+#define GL_INTENSITY16F_ARB                                0x881D
+#define GL_LUMINANCE16F_ARB                                0x881E
+#define GL_LUMINANCE_ALPHA16F_ARB                          0x881F
+#endif 
+
+/* GL_ARB_pixel_buffer_object */
+
+#ifndef GL_ARB_pixel_buffer_object
+#define GL_ARB_pixel_buffer_object 1
+#define __GLEE_GL_ARB_pixel_buffer_object 1
+/* Constants */
+#define GL_PIXEL_PACK_BUFFER_ARB                           0x88EB
+#define GL_PIXEL_UNPACK_BUFFER_ARB                         0x88EC
+#define GL_PIXEL_PACK_BUFFER_BINDING_ARB                   0x88ED
+#define GL_PIXEL_UNPACK_BUFFER_BINDING_ARB                 0x88EF
+#endif 
+
+/* GL_ARB_depth_buffer_float */
+
+#ifndef GL_ARB_depth_buffer_float
+#define GL_ARB_depth_buffer_float 1
+#define __GLEE_GL_ARB_depth_buffer_float 1
+/* Constants */
+#define GL_DEPTH_COMPONENT32F                              0x8CAC
+#define GL_DEPTH32F_STENCIL8                               0x8CAD
+#define GL_FLOAT_32_UNSIGNED_INT_24_8_REV                  0x8DAD
+#endif 
+
+/* GL_ARB_draw_instanced */
+
+#ifndef GL_ARB_draw_instanced
+#define GL_ARB_draw_instanced 1
+#define __GLEE_GL_ARB_draw_instanced 1
+/* Constants */
+#ifndef GLEE_H_DEFINED_glDrawArraysInstancedARB
+#define GLEE_H_DEFINED_glDrawArraysInstancedARB
+  typedef void (APIENTRYP GLEEPFNGLDRAWARRAYSINSTANCEDARBPROC) (GLenum  mode, GLint  first, GLsizei  count, GLsizei  primcount);
+  GLEE_EXTERN GLEEPFNGLDRAWARRAYSINSTANCEDARBPROC GLeeFuncPtr_glDrawArraysInstancedARB;
+  #define glDrawArraysInstancedARB GLeeFuncPtr_glDrawArraysInstancedARB
+#endif
+#ifndef GLEE_H_DEFINED_glDrawElementsInstancedARB
+#define GLEE_H_DEFINED_glDrawElementsInstancedARB
+  typedef void (APIENTRYP GLEEPFNGLDRAWELEMENTSINSTANCEDARBPROC) (GLenum  mode, GLsizei  count, GLenum  type, const GLvoid * indices, GLsizei  primcount);
+  GLEE_EXTERN GLEEPFNGLDRAWELEMENTSINSTANCEDARBPROC GLeeFuncPtr_glDrawElementsInstancedARB;
+  #define glDrawElementsInstancedARB GLeeFuncPtr_glDrawElementsInstancedARB
+#endif
+#endif 
+
+/* GL_ARB_framebuffer_object */
+
+#ifndef GL_ARB_framebuffer_object
+#define GL_ARB_framebuffer_object 1
+#define __GLEE_GL_ARB_framebuffer_object 1
+/* Constants */
+#define GL_INVALID_FRAMEBUFFER_OPERATION                   0x0506
+#define GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING           0x8210
+#define GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE           0x8211
+#define GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE                 0x8212
+#define GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE               0x8213
+#define GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE                0x8214
+#define GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE               0x8215
+#define GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE               0x8216
+#define GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE             0x8217
+#define GL_FRAMEBUFFER_DEFAULT                             0x8218
+#define GL_FRAMEBUFFER_UNDEFINED                           0x8219
+#define GL_DEPTH_STENCIL_ATTACHMENT                        0x821A
+#define GL_MAX_RENDERBUFFER_SIZE                           0x84E8
+#define GL_DEPTH_STENCIL                                   0x84F9
+#define GL_UNSIGNED_INT_24_8                               0x84FA
+#define GL_DEPTH24_STENCIL8                                0x88F0
+#define GL_TEXTURE_STENCIL_SIZE                            0x88F1
+#define GL_TEXTURE_RED_TYPE                                0x8C10
+#define GL_TEXTURE_GREEN_TYPE                              0x8C11
+#define GL_TEXTURE_BLUE_TYPE                               0x8C12
+#define GL_TEXTURE_ALPHA_TYPE                              0x8C13
+#define GL_TEXTURE_DEPTH_TYPE                              0x8C16
+#define GL_UNSIGNED_NORMALIZED                             0x8C17
+#define GL_FRAMEBUFFER_BINDING                             0x8CA6
+#define GL_DRAW_FRAMEBUFFER_BINDING                        GL_FRAMEBUFFER_BINDING
+#define GL_RENDERBUFFER_BINDING                            0x8CA7
+#define GL_READ_FRAMEBUFFER                                0x8CA8
+#define GL_DRAW_FRAMEBUFFER                                0x8CA9
+#define GL_READ_FRAMEBUFFER_BINDING                        0x8CAA
+#define GL_RENDERBUFFER_SAMPLES                            0x8CAB
+#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE              0x8CD0
+#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME              0x8CD1
+#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL            0x8CD2
+#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE    0x8CD3
+#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER            0x8CD4
+#define GL_FRAMEBUFFER_COMPLETE                            0x8CD5
+#define GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT               0x8CD6
+#define GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT       0x8CD7
+#define GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER              0x8CDB
+#define GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER              0x8CDC
+#define GL_FRAMEBUFFER_UNSUPPORTED                         0x8CDD
+#define GL_MAX_COLOR_ATTACHMENTS                           0x8CDF
+#define GL_COLOR_ATTACHMENT0                               0x8CE0
+#define GL_COLOR_ATTACHMENT1                               0x8CE1
+#define GL_COLOR_ATTACHMENT2                               0x8CE2
+#define GL_COLOR_ATTACHMENT3                               0x8CE3
+#define GL_COLOR_ATTACHMENT4                               0x8CE4
+#define GL_COLOR_ATTACHMENT5                               0x8CE5
+#define GL_COLOR_ATTACHMENT6                               0x8CE6
+#define GL_COLOR_ATTACHMENT7                               0x8CE7
+#define GL_COLOR_ATTACHMENT8                               0x8CE8
+#define GL_COLOR_ATTACHMENT9                               0x8CE9
+#define GL_COLOR_ATTACHMENT10                              0x8CEA
+#define GL_COLOR_ATTACHMENT11                              0x8CEB
+#define GL_COLOR_ATTACHMENT12                              0x8CEC
+#define GL_COLOR_ATTACHMENT13                              0x8CED
+#define GL_COLOR_ATTACHMENT14                              0x8CEE
+#define GL_COLOR_ATTACHMENT15                              0x8CEF
+#define GL_DEPTH_ATTACHMENT                                0x8D00
+#define GL_STENCIL_ATTACHMENT                              0x8D20
+#define GL_FRAMEBUFFER                                     0x8D40
+#define GL_RENDERBUFFER                                    0x8D41
+#define GL_RENDERBUFFER_WIDTH                              0x8D42
+#define GL_RENDERBUFFER_HEIGHT                             0x8D43
+#define GL_RENDERBUFFER_INTERNAL_FORMAT                    0x8D44
+#define GL_STENCIL_INDEX1                                  0x8D46
+#define GL_STENCIL_INDEX4                                  0x8D47
+#define GL_STENCIL_INDEX8                                  0x8D48
+#define GL_STENCIL_INDEX16                                 0x8D49
+#define GL_RENDERBUFFER_RED_SIZE                           0x8D50
+#define GL_RENDERBUFFER_GREEN_SIZE                         0x8D51
+#define GL_RENDERBUFFER_BLUE_SIZE                          0x8D52
+#define GL_RENDERBUFFER_ALPHA_SIZE                         0x8D53
+#define GL_RENDERBUFFER_DEPTH_SIZE                         0x8D54
+#define GL_RENDERBUFFER_STENCIL_SIZE                       0x8D55
+#define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE              0x8D56
+#define GL_MAX_SAMPLES                                     0x8D57
+#define GL_INDEX                                           0x8222
+#define GL_TEXTURE_LUMINANCE_TYPE                          0x8C14
+#define GL_TEXTURE_INTENSITY_TYPE                          0x8C15
+#ifndef GLEE_H_DEFINED_glIsRenderbuffer
+#define GLEE_H_DEFINED_glIsRenderbuffer
+  typedef GLboolean (APIENTRYP GLEEPFNGLISRENDERBUFFERPROC) (GLuint  renderbuffer);
+  GLEE_EXTERN GLEEPFNGLISRENDERBUFFERPROC GLeeFuncPtr_glIsRenderbuffer;
+  #define glIsRenderbuffer GLeeFuncPtr_glIsRenderbuffer
+#endif
+#ifndef GLEE_H_DEFINED_glBindRenderbuffer
+#define GLEE_H_DEFINED_glBindRenderbuffer
+  typedef void (APIENTRYP GLEEPFNGLBINDRENDERBUFFERPROC) (GLenum  target, GLuint  renderbuffer);
+  GLEE_EXTERN GLEEPFNGLBINDRENDERBUFFERPROC GLeeFuncPtr_glBindRenderbuffer;
+  #define glBindRenderbuffer GLeeFuncPtr_glBindRenderbuffer
+#endif
+#ifndef GLEE_H_DEFINED_glDeleteRenderbuffers
+#define GLEE_H_DEFINED_glDeleteRenderbuffers
+  typedef void (APIENTRYP GLEEPFNGLDELETERENDERBUFFERSPROC) (GLsizei  n, const GLuint * renderbuffers);
+  GLEE_EXTERN GLEEPFNGLDELETERENDERBUFFERSPROC GLeeFuncPtr_glDeleteRenderbuffers;
+  #define glDeleteRenderbuffers GLeeFuncPtr_glDeleteRenderbuffers
+#endif
+#ifndef GLEE_H_DEFINED_glGenRenderbuffers
+#define GLEE_H_DEFINED_glGenRenderbuffers
+  typedef void (APIENTRYP GLEEPFNGLGENRENDERBUFFERSPROC) (GLsizei  n, GLuint * renderbuffers);
+  GLEE_EXTERN GLEEPFNGLGENRENDERBUFFERSPROC GLeeFuncPtr_glGenRenderbuffers;
+  #define glGenRenderbuffers GLeeFuncPtr_glGenRenderbuffers
+#endif
+#ifndef GLEE_H_DEFINED_glRenderbufferStorage
+#define GLEE_H_DEFINED_glRenderbufferStorage
+  typedef void (APIENTRYP GLEEPFNGLRENDERBUFFERSTORAGEPROC) (GLenum  target, GLenum  internalformat, GLsizei  width, GLsizei  height);
+  GLEE_EXTERN GLEEPFNGLRENDERBUFFERSTORAGEPROC GLeeFuncPtr_glRenderbufferStorage;
+  #define glRenderbufferStorage GLeeFuncPtr_glRenderbufferStorage
+#endif
+#ifndef GLEE_H_DEFINED_glGetRenderbufferParameteriv
+#define GLEE_H_DEFINED_glGetRenderbufferParameteriv
+  typedef void (APIENTRYP GLEEPFNGLGETRENDERBUFFERPARAMETERIVPROC) (GLenum  target, GLenum  pname, GLint * params);
+  GLEE_EXTERN GLEEPFNGLGETRENDERBUFFERPARAMETERIVPROC GLeeFuncPtr_glGetRenderbufferParameteriv;
+  #define glGetRenderbufferParameteriv GLeeFuncPtr_glGetRenderbufferParameteriv
+#endif
+#ifndef GLEE_H_DEFINED_glIsFramebuffer
+#define GLEE_H_DEFINED_glIsFramebuffer
+  typedef GLboolean (APIENTRYP GLEEPFNGLISFRAMEBUFFERPROC) (GLuint  framebuffer);
+  GLEE_EXTERN GLEEPFNGLISFRAMEBUFFERPROC GLeeFuncPtr_glIsFramebuffer;
+  #define glIsFramebuffer GLeeFuncPtr_glIsFramebuffer
+#endif
+#ifndef GLEE_H_DEFINED_glBindFramebuffer
+#define GLEE_H_DEFINED_glBindFramebuffer
+  typedef void (APIENTRYP GLEEPFNGLBINDFRAMEBUFFERPROC) (GLenum  target, GLuint  framebuffer);
+  GLEE_EXTERN GLEEPFNGLBINDFRAMEBUFFERPROC GLeeFuncPtr_glBindFramebuffer;
+  #define glBindFramebuffer GLeeFuncPtr_glBindFramebuffer
+#endif
+#ifndef GLEE_H_DEFINED_glDeleteFramebuffers
+#define GLEE_H_DEFINED_glDeleteFramebuffers
+  typedef void (APIENTRYP GLEEPFNGLDELETEFRAMEBUFFERSPROC) (GLsizei  n, const GLuint * framebuffers);
+  GLEE_EXTERN GLEEPFNGLDELETEFRAMEBUFFERSPROC GLeeFuncPtr_glDeleteFramebuffers;
+  #define glDeleteFramebuffers GLeeFuncPtr_glDeleteFramebuffers
+#endif
+#ifndef GLEE_H_DEFINED_glGenFramebuffers
+#define GLEE_H_DEFINED_glGenFramebuffers
+  typedef void (APIENTRYP GLEEPFNGLGENFRAMEBUFFERSPROC) (GLsizei  n, GLuint * framebuffers);
+  GLEE_EXTERN GLEEPFNGLGENFRAMEBUFFERSPROC GLeeFuncPtr_glGenFramebuffers;
+  #define glGenFramebuffers GLeeFuncPtr_glGenFramebuffers
+#endif
+#ifndef GLEE_H_DEFINED_glCheckFramebufferStatus
+#define GLEE_H_DEFINED_glCheckFramebufferStatus
+  typedef GLenum (APIENTRYP GLEEPFNGLCHECKFRAMEBUFFERSTATUSPROC) (GLenum  target);
+  GLEE_EXTERN GLEEPFNGLCHECKFRAMEBUFFERSTATUSPROC GLeeFuncPtr_glCheckFramebufferStatus;
+  #define glCheckFramebufferStatus GLeeFuncPtr_glCheckFramebufferStatus
+#endif
+#ifndef GLEE_H_DEFINED_glFramebufferTexture1D
+#define GLEE_H_DEFINED_glFramebufferTexture1D
+  typedef void (APIENTRYP GLEEPFNGLFRAMEBUFFERTEXTURE1DPROC) (GLenum  target, GLenum  attachment, GLenum  textarget, GLuint  texture, GLint  level);
+  GLEE_EXTERN GLEEPFNGLFRAMEBUFFERTEXTURE1DPROC GLeeFuncPtr_glFramebufferTexture1D;
+  #define glFramebufferTexture1D GLeeFuncPtr_glFramebufferTexture1D
+#endif
+#ifndef GLEE_H_DEFINED_glFramebufferTexture2D
+#define GLEE_H_DEFINED_glFramebufferTexture2D
+  typedef void (APIENTRYP GLEEPFNGLFRAMEBUFFERTEXTURE2DPROC) (GLenum  target, GLenum  attachment, GLenum  textarget, GLuint  texture, GLint  level);
+  GLEE_EXTERN GLEEPFNGLFRAMEBUFFERTEXTURE2DPROC GLeeFuncPtr_glFramebufferTexture2D;
+  #define glFramebufferTexture2D GLeeFuncPtr_glFramebufferTexture2D
+#endif
+#ifndef GLEE_H_DEFINED_glFramebufferTexture3D
+#define GLEE_H_DEFINED_glFramebufferTexture3D
+  typedef void (APIENTRYP GLEEPFNGLFRAMEBUFFERTEXTURE3DPROC) (GLenum  target, GLenum  attachment, GLenum  textarget, GLuint  texture, GLint  level, GLint  zoffset);
+  GLEE_EXTERN GLEEPFNGLFRAMEBUFFERTEXTURE3DPROC GLeeFuncPtr_glFramebufferTexture3D;
+  #define glFramebufferTexture3D GLeeFuncPtr_glFramebufferTexture3D
+#endif
+#ifndef GLEE_H_DEFINED_glFramebufferRenderbuffer
+#define GLEE_H_DEFINED_glFramebufferRenderbuffer
+  typedef void (APIENTRYP GLEEPFNGLFRAMEBUFFERRENDERBUFFERPROC) (GLenum  target, GLenum  attachment, GLenum  renderbuffertarget, GLuint  renderbuffer);
+  GLEE_EXTERN GLEEPFNGLFRAMEBUFFERRENDERBUFFERPROC GLeeFuncPtr_glFramebufferRenderbuffer;
+  #define glFramebufferRenderbuffer GLeeFuncPtr_glFramebufferRenderbuffer
+#endif
+#ifndef GLEE_H_DEFINED_glGetFramebufferAttachmentParameteriv
+#define GLEE_H_DEFINED_glGetFramebufferAttachmentParameteriv
+  typedef void (APIENTRYP GLEEPFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC) (GLenum  target, GLenum  attachment, GLenum  pname, GLint * params);
+  GLEE_EXTERN GLEEPFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC GLeeFuncPtr_glGetFramebufferAttachmentParameteriv;
+  #define glGetFramebufferAttachmentParameteriv GLeeFuncPtr_glGetFramebufferAttachmentParameteriv
+#endif
+#ifndef GLEE_H_DEFINED_glGenerateMipmap
+#define GLEE_H_DEFINED_glGenerateMipmap
+  typedef void (APIENTRYP GLEEPFNGLGENERATEMIPMAPPROC) (GLenum  target);
+  GLEE_EXTERN GLEEPFNGLGENERATEMIPMAPPROC GLeeFuncPtr_glGenerateMipmap;
+  #define glGenerateMipmap GLeeFuncPtr_glGenerateMipmap
+#endif
+#ifndef GLEE_H_DEFINED_glBlitFramebuffer
+#define GLEE_H_DEFINED_glBlitFramebuffer
+  typedef void (APIENTRYP GLEEPFNGLBLITFRAMEBUFFERPROC) (GLint  srcX0, GLint  srcY0, GLint  srcX1, GLint  srcY1, GLint  dstX0, GLint  dstY0, GLint  dstX1, GLint  dstY1, GLbitfield  mask, GLenum  filter);
+  GLEE_EXTERN GLEEPFNGLBLITFRAMEBUFFERPROC GLeeFuncPtr_glBlitFramebuffer;
+  #define glBlitFramebuffer GLeeFuncPtr_glBlitFramebuffer
+#endif
+#ifndef GLEE_H_DEFINED_glRenderbufferStorageMultisample
+#define GLEE_H_DEFINED_glRenderbufferStorageMultisample
+  typedef void (APIENTRYP GLEEPFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC) (GLenum  target, GLsizei  samples, GLenum  internalformat, GLsizei  width, GLsizei  height);
+  GLEE_EXTERN GLEEPFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC GLeeFuncPtr_glRenderbufferStorageMultisample;
+  #define glRenderbufferStorageMultisample GLeeFuncPtr_glRenderbufferStorageMultisample
+#endif
+#ifndef GLEE_H_DEFINED_glFramebufferTextureLayer
+#define GLEE_H_DEFINED_glFramebufferTextureLayer
+  typedef void (APIENTRYP GLEEPFNGLFRAMEBUFFERTEXTURELAYERPROC) (GLenum  target, GLenum  attachment, GLuint  texture, GLint  level, GLint  layer);
+  GLEE_EXTERN GLEEPFNGLFRAMEBUFFERTEXTURELAYERPROC GLeeFuncPtr_glFramebufferTextureLayer;
+  #define glFramebufferTextureLayer GLeeFuncPtr_glFramebufferTextureLayer
+#endif
+#endif 
+
+/* GL_ARB_framebuffer_sRGB */
+
+#ifndef GL_ARB_framebuffer_sRGB
+#define GL_ARB_framebuffer_sRGB 1
+#define __GLEE_GL_ARB_framebuffer_sRGB 1
+/* Constants */
+#define GL_FRAMEBUFFER_SRGB                                0x8DB9
+#endif 
+
+/* GL_ARB_geometry_shader4 */
+
+#ifndef GL_ARB_geometry_shader4
+#define GL_ARB_geometry_shader4 1
+#define __GLEE_GL_ARB_geometry_shader4 1
+/* Constants */
+#define GL_LINES_ADJACENCY_ARB                             0x000A
+#define GL_LINE_STRIP_ADJACENCY_ARB                        0x000B
+#define GL_TRIANGLES_ADJACENCY_ARB                         0x000C
+#define GL_TRIANGLE_STRIP_ADJACENCY_ARB                    0x000D
+#define GL_PROGRAM_POINT_SIZE_ARB                          0x8642
+#define GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB            0x8C29
+#define GL_FRAMEBUFFER_ATTACHMENT_LAYERED_ARB              0x8DA7
+#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB        0x8DA8
+#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB          0x8DA9
+#define GL_GEOMETRY_SHADER_ARB                             0x8DD9
+#define GL_GEOMETRY_VERTICES_OUT_ARB                       0x8DDA
+#define GL_GEOMETRY_INPUT_TYPE_ARB                         0x8DDB
+#define GL_GEOMETRY_OUTPUT_TYPE_ARB                        0x8DDC
+#define GL_MAX_GEOMETRY_VARYING_COMPONENTS_ARB             0x8DDD
+#define GL_MAX_VERTEX_VARYING_COMPONENTS_ARB               0x8DDE
+#define GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB             0x8DDF
+#define GL_MAX_GEOMETRY_OUTPUT_VERTICES_ARB                0x8DE0
+#define GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB        0x8DE1
+#ifndef GLEE_H_DEFINED_glProgramParameteriARB
+#define GLEE_H_DEFINED_glProgramParameteriARB
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMPARAMETERIARBPROC) (GLuint  program, GLenum  pname, GLint  value);
+  GLEE_EXTERN GLEEPFNGLPROGRAMPARAMETERIARBPROC GLeeFuncPtr_glProgramParameteriARB;
+  #define glProgramParameteriARB GLeeFuncPtr_glProgramParameteriARB
+#endif
+#ifndef GLEE_H_DEFINED_glFramebufferTextureARB
+#define GLEE_H_DEFINED_glFramebufferTextureARB
+  typedef void (APIENTRYP GLEEPFNGLFRAMEBUFFERTEXTUREARBPROC) (GLenum  target, GLenum  attachment, GLuint  texture, GLint  level);
+  GLEE_EXTERN GLEEPFNGLFRAMEBUFFERTEXTUREARBPROC GLeeFuncPtr_glFramebufferTextureARB;
+  #define glFramebufferTextureARB GLeeFuncPtr_glFramebufferTextureARB
+#endif
+#ifndef GLEE_H_DEFINED_glFramebufferTextureLayerARB
+#define GLEE_H_DEFINED_glFramebufferTextureLayerARB
+  typedef void (APIENTRYP GLEEPFNGLFRAMEBUFFERTEXTURELAYERARBPROC) (GLenum  target, GLenum  attachment, GLuint  texture, GLint  level, GLint  layer);
+  GLEE_EXTERN GLEEPFNGLFRAMEBUFFERTEXTURELAYERARBPROC GLeeFuncPtr_glFramebufferTextureLayerARB;
+  #define glFramebufferTextureLayerARB GLeeFuncPtr_glFramebufferTextureLayerARB
+#endif
+#ifndef GLEE_H_DEFINED_glFramebufferTextureFaceARB
+#define GLEE_H_DEFINED_glFramebufferTextureFaceARB
+  typedef void (APIENTRYP GLEEPFNGLFRAMEBUFFERTEXTUREFACEARBPROC) (GLenum  target, GLenum  attachment, GLuint  texture, GLint  level, GLenum  face);
+  GLEE_EXTERN GLEEPFNGLFRAMEBUFFERTEXTUREFACEARBPROC GLeeFuncPtr_glFramebufferTextureFaceARB;
+  #define glFramebufferTextureFaceARB GLeeFuncPtr_glFramebufferTextureFaceARB
+#endif
+#endif 
+
+/* GL_ARB_half_float_vertex */
+
+#ifndef GL_ARB_half_float_vertex
+#define GL_ARB_half_float_vertex 1
+#define __GLEE_GL_ARB_half_float_vertex 1
+/* Constants */
+#define GL_HALF_FLOAT                                      0x140B
+#endif 
+
+/* GL_ARB_instanced_arrays */
+
+#ifndef GL_ARB_instanced_arrays
+#define GL_ARB_instanced_arrays 1
+#define __GLEE_GL_ARB_instanced_arrays 1
+/* Constants */
+#define GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ARB                 0x88FE
+#ifndef GLEE_H_DEFINED_glVertexAttribDivisorARB
+#define GLEE_H_DEFINED_glVertexAttribDivisorARB
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIBDIVISORARBPROC) (GLuint  index, GLuint  divisor);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIBDIVISORARBPROC GLeeFuncPtr_glVertexAttribDivisorARB;
+  #define glVertexAttribDivisorARB GLeeFuncPtr_glVertexAttribDivisorARB
+#endif
+#endif 
+
+/* GL_ARB_map_buffer_range */
+
+#ifndef GL_ARB_map_buffer_range
+#define GL_ARB_map_buffer_range 1
+#define __GLEE_GL_ARB_map_buffer_range 1
+/* Constants */
+#define GL_MAP_READ_BIT                                    0x0001
+#define GL_MAP_WRITE_BIT                                   0x0002
+#define GL_MAP_INVALIDATE_RANGE_BIT                        0x0004
+#define GL_MAP_INVALIDATE_BUFFER_BIT                       0x0008
+#define GL_MAP_FLUSH_EXPLICIT_BIT                          0x0010
+#define GL_MAP_UNSYNCHRONIZED_BIT                          0x0020
+#ifndef GLEE_H_DEFINED_glMapBufferRange
+#define GLEE_H_DEFINED_glMapBufferRange
+  typedef GLvoid* (APIENTRYP GLEEPFNGLMAPBUFFERRANGEPROC) (GLenum  target, GLintptr  offset, GLsizeiptr  length, GLbitfield  access);
+  GLEE_EXTERN GLEEPFNGLMAPBUFFERRANGEPROC GLeeFuncPtr_glMapBufferRange;
+  #define glMapBufferRange GLeeFuncPtr_glMapBufferRange
+#endif
+#ifndef GLEE_H_DEFINED_glFlushMappedBufferRange
+#define GLEE_H_DEFINED_glFlushMappedBufferRange
+  typedef void (APIENTRYP GLEEPFNGLFLUSHMAPPEDBUFFERRANGEPROC) (GLenum  target, GLintptr  offset, GLsizeiptr  length);
+  GLEE_EXTERN GLEEPFNGLFLUSHMAPPEDBUFFERRANGEPROC GLeeFuncPtr_glFlushMappedBufferRange;
+  #define glFlushMappedBufferRange GLeeFuncPtr_glFlushMappedBufferRange
+#endif
+#endif 
+
+/* GL_ARB_texture_buffer_object */
+
+#ifndef GL_ARB_texture_buffer_object
+#define GL_ARB_texture_buffer_object 1
+#define __GLEE_GL_ARB_texture_buffer_object 1
+/* Constants */
+#define GL_TEXTURE_BUFFER_ARB                              0x8C2A
+#define GL_MAX_TEXTURE_BUFFER_SIZE_ARB                     0x8C2B
+#define GL_TEXTURE_BINDING_BUFFER_ARB                      0x8C2C
+#define GL_TEXTURE_BUFFER_DATA_STORE_BINDING_ARB           0x8C2D
+#define GL_TEXTURE_BUFFER_FORMAT_ARB                       0x8C2E
+#ifndef GLEE_H_DEFINED_glTexBufferARB
+#define GLEE_H_DEFINED_glTexBufferARB
+  typedef void (APIENTRYP GLEEPFNGLTEXBUFFERARBPROC) (GLenum  target, GLenum  internalformat, GLuint  buffer);
+  GLEE_EXTERN GLEEPFNGLTEXBUFFERARBPROC GLeeFuncPtr_glTexBufferARB;
+  #define glTexBufferARB GLeeFuncPtr_glTexBufferARB
+#endif
+#endif 
+
+/* GL_ARB_texture_compression_rgtc */
+
+#ifndef GL_ARB_texture_compression_rgtc
+#define GL_ARB_texture_compression_rgtc 1
+#define __GLEE_GL_ARB_texture_compression_rgtc 1
+/* Constants */
+#define GL_COMPRESSED_RED_RGTC1                            0x8DBB
+#define GL_COMPRESSED_SIGNED_RED_RGTC1                     0x8DBC
+#define GL_COMPRESSED_RG_RGTC2                             0x8DBD
+#define GL_COMPRESSED_SIGNED_RG_RGTC2                      0x8DBE
+#endif 
+
+/* GL_ARB_texture_rg */
+
+#ifndef GL_ARB_texture_rg
+#define GL_ARB_texture_rg 1
+#define __GLEE_GL_ARB_texture_rg 1
+/* Constants */
+#define GL_RG                                              0x8227
+#define GL_RG_INTEGER                                      0x8228
+#define GL_R8                                              0x8229
+#define GL_R16                                             0x822A
+#define GL_RG8                                             0x822B
+#define GL_RG16                                            0x822C
+#define GL_R16F                                            0x822D
+#define GL_R32F                                            0x822E
+#define GL_RG16F                                           0x822F
+#define GL_RG32F                                           0x8230
+#define GL_R8I                                             0x8231
+#define GL_R8UI                                            0x8232
+#define GL_R16I                                            0x8233
+#define GL_R16UI                                           0x8234
+#define GL_R32I                                            0x8235
+#define GL_R32UI                                           0x8236
+#define GL_RG8I                                            0x8237
+#define GL_RG8UI                                           0x8238
+#define GL_RG16I                                           0x8239
+#define GL_RG16UI                                          0x823A
+#define GL_RG32I                                           0x823B
+#define GL_RG32UI                                          0x823C
+#endif 
+
+/* GL_ARB_vertex_array_object */
+
+#ifndef GL_ARB_vertex_array_object
+#define GL_ARB_vertex_array_object 1
+#define __GLEE_GL_ARB_vertex_array_object 1
+/* Constants */
+#define GL_VERTEX_ARRAY_BINDING                            0x85B5
+#ifndef GLEE_H_DEFINED_glBindVertexArray
+#define GLEE_H_DEFINED_glBindVertexArray
+  typedef void (APIENTRYP GLEEPFNGLBINDVERTEXARRAYPROC) (GLuint  array);
+  GLEE_EXTERN GLEEPFNGLBINDVERTEXARRAYPROC GLeeFuncPtr_glBindVertexArray;
+  #define glBindVertexArray GLeeFuncPtr_glBindVertexArray
+#endif
+#ifndef GLEE_H_DEFINED_glDeleteVertexArrays
+#define GLEE_H_DEFINED_glDeleteVertexArrays
+  typedef void (APIENTRYP GLEEPFNGLDELETEVERTEXARRAYSPROC) (GLsizei  n, const GLuint * arrays);
+  GLEE_EXTERN GLEEPFNGLDELETEVERTEXARRAYSPROC GLeeFuncPtr_glDeleteVertexArrays;
+  #define glDeleteVertexArrays GLeeFuncPtr_glDeleteVertexArrays
+#endif
+#ifndef GLEE_H_DEFINED_glGenVertexArrays
+#define GLEE_H_DEFINED_glGenVertexArrays
+  typedef void (APIENTRYP GLEEPFNGLGENVERTEXARRAYSPROC) (GLsizei  n, GLuint * arrays);
+  GLEE_EXTERN GLEEPFNGLGENVERTEXARRAYSPROC GLeeFuncPtr_glGenVertexArrays;
+  #define glGenVertexArrays GLeeFuncPtr_glGenVertexArrays
+#endif
+#ifndef GLEE_H_DEFINED_glIsVertexArray
+#define GLEE_H_DEFINED_glIsVertexArray
+  typedef GLboolean (APIENTRYP GLEEPFNGLISVERTEXARRAYPROC) (GLuint  array);
+  GLEE_EXTERN GLEEPFNGLISVERTEXARRAYPROC GLeeFuncPtr_glIsVertexArray;
+  #define glIsVertexArray GLeeFuncPtr_glIsVertexArray
+#endif
+#endif 
+
+/* GL_ARB_uniform_buffer_object */
+
+#ifndef GL_ARB_uniform_buffer_object
+#define GL_ARB_uniform_buffer_object 1
+#define __GLEE_GL_ARB_uniform_buffer_object 1
+/* Constants */
+#define GL_UNIFORM_BUFFER                                  0x8A11
+#define GL_UNIFORM_BUFFER_BINDING                          0x8A28
+#define GL_UNIFORM_BUFFER_START                            0x8A29
+#define GL_UNIFORM_BUFFER_SIZE                             0x8A2A
+#define GL_MAX_VERTEX_UNIFORM_BLOCKS                       0x8A2B
+#define GL_MAX_GEOMETRY_UNIFORM_BLOCKS                     0x8A2C
+#define GL_MAX_FRAGMENT_UNIFORM_BLOCKS                     0x8A2D
+#define GL_MAX_COMBINED_UNIFORM_BLOCKS                     0x8A2E
+#define GL_MAX_UNIFORM_BUFFER_BINDINGS                     0x8A2F
+#define GL_MAX_UNIFORM_BLOCK_SIZE                          0x8A30
+#define GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS          0x8A31
+#define GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS        0x8A32
+#define GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS        0x8A33
+#define GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT                 0x8A34
+#define GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH            0x8A35
+#define GL_ACTIVE_UNIFORM_BLOCKS                           0x8A36
+#define GL_UNIFORM_TYPE                                    0x8A37
+#define GL_UNIFORM_SIZE                                    0x8A38
+#define GL_UNIFORM_NAME_LENGTH                             0x8A39
+#define GL_UNIFORM_BLOCK_INDEX                             0x8A3A
+#define GL_UNIFORM_OFFSET                                  0x8A3B
+#define GL_UNIFORM_ARRAY_STRIDE                            0x8A3C
+#define GL_UNIFORM_MATRIX_STRIDE                           0x8A3D
+#define GL_UNIFORM_IS_ROW_MAJOR                            0x8A3E
+#define GL_UNIFORM_BLOCK_BINDING                           0x8A3F
+#define GL_UNIFORM_BLOCK_DATA_SIZE                         0x8A40
+#define GL_UNIFORM_BLOCK_NAME_LENGTH                       0x8A41
+#define GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS                   0x8A42
+#define GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES            0x8A43
+#define GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER       0x8A44
+#define GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER     0x8A45
+#define GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER     0x8A46
+#define GL_INVALID_INDEX                                   0xFFFFFFFFu
+#ifndef GLEE_H_DEFINED_glGetUniformIndices
+#define GLEE_H_DEFINED_glGetUniformIndices
+  typedef void (APIENTRYP GLEEPFNGLGETUNIFORMINDICESPROC) (GLuint  program, GLsizei  uniformCount, const GLchar* * uniformNames, GLuint * uniformIndices);
+  GLEE_EXTERN GLEEPFNGLGETUNIFORMINDICESPROC GLeeFuncPtr_glGetUniformIndices;
+  #define glGetUniformIndices GLeeFuncPtr_glGetUniformIndices
+#endif
+#ifndef GLEE_H_DEFINED_glGetActiveUniformsiv
+#define GLEE_H_DEFINED_glGetActiveUniformsiv
+  typedef void (APIENTRYP GLEEPFNGLGETACTIVEUNIFORMSIVPROC) (GLuint  program, GLsizei  uniformCount, const GLuint * uniformIndices, GLenum  pname, GLint * params);
+  GLEE_EXTERN GLEEPFNGLGETACTIVEUNIFORMSIVPROC GLeeFuncPtr_glGetActiveUniformsiv;
+  #define glGetActiveUniformsiv GLeeFuncPtr_glGetActiveUniformsiv
+#endif
+#ifndef GLEE_H_DEFINED_glGetActiveUniformName
+#define GLEE_H_DEFINED_glGetActiveUniformName
+  typedef void (APIENTRYP GLEEPFNGLGETACTIVEUNIFORMNAMEPROC) (GLuint  program, GLuint  uniformIndex, GLsizei  bufSize, GLsizei * length, GLchar * uniformName);
+  GLEE_EXTERN GLEEPFNGLGETACTIVEUNIFORMNAMEPROC GLeeFuncPtr_glGetActiveUniformName;
+  #define glGetActiveUniformName GLeeFuncPtr_glGetActiveUniformName
+#endif
+#ifndef GLEE_H_DEFINED_glGetUniformBlockIndex
+#define GLEE_H_DEFINED_glGetUniformBlockIndex
+  typedef GLuint (APIENTRYP GLEEPFNGLGETUNIFORMBLOCKINDEXPROC) (GLuint  program, const GLchar * uniformBlockName);
+  GLEE_EXTERN GLEEPFNGLGETUNIFORMBLOCKINDEXPROC GLeeFuncPtr_glGetUniformBlockIndex;
+  #define glGetUniformBlockIndex GLeeFuncPtr_glGetUniformBlockIndex
+#endif
+#ifndef GLEE_H_DEFINED_glGetActiveUniformBlockiv
+#define GLEE_H_DEFINED_glGetActiveUniformBlockiv
+  typedef void (APIENTRYP GLEEPFNGLGETACTIVEUNIFORMBLOCKIVPROC) (GLuint  program, GLuint  uniformBlockIndex, GLenum  pname, GLint * params);
+  GLEE_EXTERN GLEEPFNGLGETACTIVEUNIFORMBLOCKIVPROC GLeeFuncPtr_glGetActiveUniformBlockiv;
+  #define glGetActiveUniformBlockiv GLeeFuncPtr_glGetActiveUniformBlockiv
+#endif
+#ifndef GLEE_H_DEFINED_glGetActiveUniformBlockName
+#define GLEE_H_DEFINED_glGetActiveUniformBlockName
+  typedef void (APIENTRYP GLEEPFNGLGETACTIVEUNIFORMBLOCKNAMEPROC) (GLuint  program, GLuint  uniformBlockIndex, GLsizei  bufSize, GLsizei * length, GLchar * uniformBlockName);
+  GLEE_EXTERN GLEEPFNGLGETACTIVEUNIFORMBLOCKNAMEPROC GLeeFuncPtr_glGetActiveUniformBlockName;
+  #define glGetActiveUniformBlockName GLeeFuncPtr_glGetActiveUniformBlockName
+#endif
+#ifndef GLEE_H_DEFINED_glUniformBlockBinding
+#define GLEE_H_DEFINED_glUniformBlockBinding
+  typedef void (APIENTRYP GLEEPFNGLUNIFORMBLOCKBINDINGPROC) (GLuint  program, GLuint  uniformBlockIndex, GLuint  uniformBlockBinding);
+  GLEE_EXTERN GLEEPFNGLUNIFORMBLOCKBINDINGPROC GLeeFuncPtr_glUniformBlockBinding;
+  #define glUniformBlockBinding GLeeFuncPtr_glUniformBlockBinding
+#endif
+#endif 
+
+/* GL_ARB_compatibility */
+
+#ifndef GL_ARB_compatibility
+#define GL_ARB_compatibility 1
+#define __GLEE_GL_ARB_compatibility 1
+/* Constants */
+#endif 
+
+/* GL_ARB_copy_buffer */
+
+#ifndef GL_ARB_copy_buffer
+#define GL_ARB_copy_buffer 1
+#define __GLEE_GL_ARB_copy_buffer 1
+/* Constants */
+#define GL_COPY_READ_BUFFER                                0x8F36
+#define GL_COPY_WRITE_BUFFER                               0x8F37
+#ifndef GLEE_H_DEFINED_glCopyBufferSubData
+#define GLEE_H_DEFINED_glCopyBufferSubData
+  typedef void (APIENTRYP GLEEPFNGLCOPYBUFFERSUBDATAPROC) (GLenum  readTarget, GLenum  writeTarget, GLintptr  readOffset, GLintptr  writeOffset, GLsizeiptr  size);
+  GLEE_EXTERN GLEEPFNGLCOPYBUFFERSUBDATAPROC GLeeFuncPtr_glCopyBufferSubData;
+  #define glCopyBufferSubData GLeeFuncPtr_glCopyBufferSubData
+#endif
+#endif 
+
+/* GL_ARB_shader_texture_lod */
+
+#ifndef GL_ARB_shader_texture_lod
+#define GL_ARB_shader_texture_lod 1
+#define __GLEE_GL_ARB_shader_texture_lod 1
+/* Constants */
+#endif 
+
+/* GL_ARB_depth_clamp */
+
+#ifndef GL_ARB_depth_clamp
+#define GL_ARB_depth_clamp 1
+#define __GLEE_GL_ARB_depth_clamp 1
+/* Constants */
+#define GL_DEPTH_CLAMP                                     0x864F
+#endif 
+
+/* GL_ARB_draw_elements_base_vertex */
+
+#ifndef GL_ARB_draw_elements_base_vertex
+#define GL_ARB_draw_elements_base_vertex 1
+#define __GLEE_GL_ARB_draw_elements_base_vertex 1
+/* Constants */
+#ifndef GLEE_H_DEFINED_glDrawElementsBaseVertex
+#define GLEE_H_DEFINED_glDrawElementsBaseVertex
+  typedef void (APIENTRYP GLEEPFNGLDRAWELEMENTSBASEVERTEXPROC) (GLenum  mode, GLsizei  count, GLenum  type, const GLvoid * indices, GLint  basevertex);
+  GLEE_EXTERN GLEEPFNGLDRAWELEMENTSBASEVERTEXPROC GLeeFuncPtr_glDrawElementsBaseVertex;
+  #define glDrawElementsBaseVertex GLeeFuncPtr_glDrawElementsBaseVertex
+#endif
+#ifndef GLEE_H_DEFINED_glDrawRangeElementsBaseVertex
+#define GLEE_H_DEFINED_glDrawRangeElementsBaseVertex
+  typedef void (APIENTRYP GLEEPFNGLDRAWRANGEELEMENTSBASEVERTEXPROC) (GLenum  mode, GLuint  start, GLuint  end, GLsizei  count, GLenum  type, const GLvoid * indices, GLint  basevertex);
+  GLEE_EXTERN GLEEPFNGLDRAWRANGEELEMENTSBASEVERTEXPROC GLeeFuncPtr_glDrawRangeElementsBaseVertex;
+  #define glDrawRangeElementsBaseVertex GLeeFuncPtr_glDrawRangeElementsBaseVertex
+#endif
+#ifndef GLEE_H_DEFINED_glDrawElementsInstancedBaseVertex
+#define GLEE_H_DEFINED_glDrawElementsInstancedBaseVertex
+  typedef void (APIENTRYP GLEEPFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC) (GLenum  mode, GLsizei  count, GLenum  type, const GLvoid * indices, GLsizei  primcount, GLint  basevertex);
+  GLEE_EXTERN GLEEPFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC GLeeFuncPtr_glDrawElementsInstancedBaseVertex;
+  #define glDrawElementsInstancedBaseVertex GLeeFuncPtr_glDrawElementsInstancedBaseVertex
+#endif
+#ifndef GLEE_H_DEFINED_glMultiDrawElementsBaseVertex
+#define GLEE_H_DEFINED_glMultiDrawElementsBaseVertex
+  typedef void (APIENTRYP GLEEPFNGLMULTIDRAWELEMENTSBASEVERTEXPROC) (GLenum  mode, const GLsizei * count, GLenum  type, const GLvoid* * indices, GLsizei  primcount, const GLint * basevertex);
+  GLEE_EXTERN GLEEPFNGLMULTIDRAWELEMENTSBASEVERTEXPROC GLeeFuncPtr_glMultiDrawElementsBaseVertex;
+  #define glMultiDrawElementsBaseVertex GLeeFuncPtr_glMultiDrawElementsBaseVertex
+#endif
+#endif 
+
+/* GL_ARB_fragment_coord_conventions */
+
+#ifndef GL_ARB_fragment_coord_conventions
+#define GL_ARB_fragment_coord_conventions 1
+#define __GLEE_GL_ARB_fragment_coord_conventions 1
+/* Constants */
+#endif 
+
+/* GL_ARB_provoking_vertex */
+
+#ifndef GL_ARB_provoking_vertex
+#define GL_ARB_provoking_vertex 1
+#define __GLEE_GL_ARB_provoking_vertex 1
+/* Constants */
+#define GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION        0x8E4C
+#define GL_FIRST_VERTEX_CONVENTION                         0x8E4D
+#define GL_LAST_VERTEX_CONVENTION                          0x8E4E
+#define GL_PROVOKING_VERTEX                                0x8E4F
+#ifndef GLEE_H_DEFINED_glProvokingVertex
+#define GLEE_H_DEFINED_glProvokingVertex
+  typedef void (APIENTRYP GLEEPFNGLPROVOKINGVERTEXPROC) (GLenum  mode);
+  GLEE_EXTERN GLEEPFNGLPROVOKINGVERTEXPROC GLeeFuncPtr_glProvokingVertex;
+  #define glProvokingVertex GLeeFuncPtr_glProvokingVertex
+#endif
+#endif 
+
+/* GL_ARB_seamless_cube_map */
+
+#ifndef GL_ARB_seamless_cube_map
+#define GL_ARB_seamless_cube_map 1
+#define __GLEE_GL_ARB_seamless_cube_map 1
+/* Constants */
+#define GL_TEXTURE_CUBE_MAP_SEAMLESS                       0x884F
+#endif 
+
+/* GL_ARB_sync */
+
+#ifndef GL_ARB_sync
+#define GL_ARB_sync 1
+#define __GLEE_GL_ARB_sync 1
+/* Constants */
+#define GL_MAX_SERVER_WAIT_TIMEOUT                         0x9111
+#define GL_OBJECT_TYPE                                     0x9112
+#define GL_SYNC_CONDITION                                  0x9113
+#define GL_SYNC_STATUS                                     0x9114
+#define GL_SYNC_FLAGS                                      0x9115
+#define GL_SYNC_FENCE                                      0x9116
+#define GL_SYNC_GPU_COMMANDS_COMPLETE                      0x9117
+#define GL_UNSIGNALED                                      0x9118
+#define GL_SIGNALED                                        0x9119
+#define GL_ALREADY_SIGNALED                                0x911A
+#define GL_TIMEOUT_EXPIRED                                 0x911B
+#define GL_CONDITION_SATISFIED                             0x911C
+#define GL_WAIT_FAILED                                     0x911D
+#define GL_SYNC_FLUSH_COMMANDS_BIT                         0x00000001
+#define GL_TIMEOUT_IGNORED                                 0xFFFFFFFFFFFFFFFFull
+#ifndef GLEE_H_DEFINED_glFenceSync
+#define GLEE_H_DEFINED_glFenceSync
+  typedef GLsync (APIENTRYP GLEEPFNGLFENCESYNCPROC) (GLenum  condition, GLbitfield  flags);
+  GLEE_EXTERN GLEEPFNGLFENCESYNCPROC GLeeFuncPtr_glFenceSync;
+  #define glFenceSync GLeeFuncPtr_glFenceSync
+#endif
+#ifndef GLEE_H_DEFINED_glIsSync
+#define GLEE_H_DEFINED_glIsSync
+  typedef GLboolean (APIENTRYP GLEEPFNGLISSYNCPROC) (GLsync  sync);
+  GLEE_EXTERN GLEEPFNGLISSYNCPROC GLeeFuncPtr_glIsSync;
+  #define glIsSync GLeeFuncPtr_glIsSync
+#endif
+#ifndef GLEE_H_DEFINED_glDeleteSync
+#define GLEE_H_DEFINED_glDeleteSync
+  typedef void (APIENTRYP GLEEPFNGLDELETESYNCPROC) (GLsync  sync);
+  GLEE_EXTERN GLEEPFNGLDELETESYNCPROC GLeeFuncPtr_glDeleteSync;
+  #define glDeleteSync GLeeFuncPtr_glDeleteSync
+#endif
+#ifndef GLEE_H_DEFINED_glClientWaitSync
+#define GLEE_H_DEFINED_glClientWaitSync
+  typedef GLenum (APIENTRYP GLEEPFNGLCLIENTWAITSYNCPROC) (GLsync  sync, GLbitfield  flags, GLuint64  timeout);
+  GLEE_EXTERN GLEEPFNGLCLIENTWAITSYNCPROC GLeeFuncPtr_glClientWaitSync;
+  #define glClientWaitSync GLeeFuncPtr_glClientWaitSync
+#endif
+#ifndef GLEE_H_DEFINED_glWaitSync
+#define GLEE_H_DEFINED_glWaitSync
+  typedef void (APIENTRYP GLEEPFNGLWAITSYNCPROC) (GLsync  sync, GLbitfield  flags, GLuint64  timeout);
+  GLEE_EXTERN GLEEPFNGLWAITSYNCPROC GLeeFuncPtr_glWaitSync;
+  #define glWaitSync GLeeFuncPtr_glWaitSync
+#endif
+#ifndef GLEE_H_DEFINED_glGetInteger64v
+#define GLEE_H_DEFINED_glGetInteger64v
+  typedef void (APIENTRYP GLEEPFNGLGETINTEGER64VPROC) (GLenum  pname, GLint64 * params);
+  GLEE_EXTERN GLEEPFNGLGETINTEGER64VPROC GLeeFuncPtr_glGetInteger64v;
+  #define glGetInteger64v GLeeFuncPtr_glGetInteger64v
+#endif
+#ifndef GLEE_H_DEFINED_glGetSynciv
+#define GLEE_H_DEFINED_glGetSynciv
+  typedef void (APIENTRYP GLEEPFNGLGETSYNCIVPROC) (GLsync  sync, GLenum  pname, GLsizei  bufSize, GLsizei * length, GLint * values);
+  GLEE_EXTERN GLEEPFNGLGETSYNCIVPROC GLeeFuncPtr_glGetSynciv;
+  #define glGetSynciv GLeeFuncPtr_glGetSynciv
+#endif
+#endif 
+
+/* GL_ARB_texture_multisample */
+
+#ifndef GL_ARB_texture_multisample
+#define GL_ARB_texture_multisample 1
+#define __GLEE_GL_ARB_texture_multisample 1
+/* Constants */
+#define GL_SAMPLE_POSITION                                 0x8E50
+#define GL_SAMPLE_MASK                                     0x8E51
+#define GL_SAMPLE_MASK_VALUE                               0x8E52
+#define GL_MAX_SAMPLE_MASK_WORDS                           0x8E59
+#define GL_TEXTURE_2D_MULTISAMPLE                          0x9100
+#define GL_PROXY_TEXTURE_2D_MULTISAMPLE                    0x9101
+#define GL_TEXTURE_2D_MULTISAMPLE_ARRAY                    0x9102
+#define GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY              0x9103
+#define GL_TEXTURE_BINDING_2D_MULTISAMPLE                  0x9104
+#define GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY            0x9105
+#define GL_TEXTURE_SAMPLES                                 0x9106
+#define GL_TEXTURE_FIXED_SAMPLE_LOCATIONS                  0x9107
+#define GL_SAMPLER_2D_MULTISAMPLE                          0x9108
+#define GL_INT_SAMPLER_2D_MULTISAMPLE                      0x9109
+#define GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE             0x910A
+#define GL_SAMPLER_2D_MULTISAMPLE_ARRAY                    0x910B
+#define GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY                0x910C
+#define GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY       0x910D
+#define GL_MAX_COLOR_TEXTURE_SAMPLES                       0x910E
+#define GL_MAX_DEPTH_TEXTURE_SAMPLES                       0x910F
+#define GL_MAX_INTEGER_SAMPLES                             0x9110
+#ifndef GLEE_H_DEFINED_glTexImage2DMultisample
+#define GLEE_H_DEFINED_glTexImage2DMultisample
+  typedef void (APIENTRYP GLEEPFNGLTEXIMAGE2DMULTISAMPLEPROC) (GLenum  target, GLsizei  samples, GLint  internalformat, GLsizei  width, GLsizei  height, GLboolean  fixedsamplelocations);
+  GLEE_EXTERN GLEEPFNGLTEXIMAGE2DMULTISAMPLEPROC GLeeFuncPtr_glTexImage2DMultisample;
+  #define glTexImage2DMultisample GLeeFuncPtr_glTexImage2DMultisample
+#endif
+#ifndef GLEE_H_DEFINED_glTexImage3DMultisample
+#define GLEE_H_DEFINED_glTexImage3DMultisample
+  typedef void (APIENTRYP GLEEPFNGLTEXIMAGE3DMULTISAMPLEPROC) (GLenum  target, GLsizei  samples, GLint  internalformat, GLsizei  width, GLsizei  height, GLsizei  depth, GLboolean  fixedsamplelocations);
+  GLEE_EXTERN GLEEPFNGLTEXIMAGE3DMULTISAMPLEPROC GLeeFuncPtr_glTexImage3DMultisample;
+  #define glTexImage3DMultisample GLeeFuncPtr_glTexImage3DMultisample
+#endif
+#ifndef GLEE_H_DEFINED_glGetMultisamplefv
+#define GLEE_H_DEFINED_glGetMultisamplefv
+  typedef void (APIENTRYP GLEEPFNGLGETMULTISAMPLEFVPROC) (GLenum  pname, GLuint  index, GLfloat * val);
+  GLEE_EXTERN GLEEPFNGLGETMULTISAMPLEFVPROC GLeeFuncPtr_glGetMultisamplefv;
+  #define glGetMultisamplefv GLeeFuncPtr_glGetMultisamplefv
+#endif
+#ifndef GLEE_H_DEFINED_glSampleMaski
+#define GLEE_H_DEFINED_glSampleMaski
+  typedef void (APIENTRYP GLEEPFNGLSAMPLEMASKIPROC) (GLuint  index, GLbitfield  mask);
+  GLEE_EXTERN GLEEPFNGLSAMPLEMASKIPROC GLeeFuncPtr_glSampleMaski;
+  #define glSampleMaski GLeeFuncPtr_glSampleMaski
+#endif
+#endif 
+
+/* GL_ARB_vertex_array_bgra */
+
+#ifndef GL_ARB_vertex_array_bgra
+#define GL_ARB_vertex_array_bgra 1
+#define __GLEE_GL_ARB_vertex_array_bgra 1
+/* Constants */
+#endif 
+
+/* GL_ARB_draw_buffers_blend */
+
+#ifndef GL_ARB_draw_buffers_blend
+#define GL_ARB_draw_buffers_blend 1
+#define __GLEE_GL_ARB_draw_buffers_blend 1
+/* Constants */
+#ifndef GLEE_H_DEFINED_glBlendEquationiARB
+#define GLEE_H_DEFINED_glBlendEquationiARB
+  typedef void (APIENTRYP GLEEPFNGLBLENDEQUATIONIARBPROC) (GLuint  buf, GLenum  mode);
+  GLEE_EXTERN GLEEPFNGLBLENDEQUATIONIARBPROC GLeeFuncPtr_glBlendEquationiARB;
+  #define glBlendEquationiARB GLeeFuncPtr_glBlendEquationiARB
+#endif
+#ifndef GLEE_H_DEFINED_glBlendEquationSeparateiARB
+#define GLEE_H_DEFINED_glBlendEquationSeparateiARB
+  typedef void (APIENTRYP GLEEPFNGLBLENDEQUATIONSEPARATEIARBPROC) (GLuint  buf, GLenum  modeRGB, GLenum  modeAlpha);
+  GLEE_EXTERN GLEEPFNGLBLENDEQUATIONSEPARATEIARBPROC GLeeFuncPtr_glBlendEquationSeparateiARB;
+  #define glBlendEquationSeparateiARB GLeeFuncPtr_glBlendEquationSeparateiARB
+#endif
+#ifndef GLEE_H_DEFINED_glBlendFunciARB
+#define GLEE_H_DEFINED_glBlendFunciARB
+  typedef void (APIENTRYP GLEEPFNGLBLENDFUNCIARBPROC) (GLuint  buf, GLenum  src, GLenum  dst);
+  GLEE_EXTERN GLEEPFNGLBLENDFUNCIARBPROC GLeeFuncPtr_glBlendFunciARB;
+  #define glBlendFunciARB GLeeFuncPtr_glBlendFunciARB
+#endif
+#ifndef GLEE_H_DEFINED_glBlendFuncSeparateiARB
+#define GLEE_H_DEFINED_glBlendFuncSeparateiARB
+  typedef void (APIENTRYP GLEEPFNGLBLENDFUNCSEPARATEIARBPROC) (GLuint  buf, GLenum  srcRGB, GLenum  dstRGB, GLenum  srcAlpha, GLenum  dstAlpha);
+  GLEE_EXTERN GLEEPFNGLBLENDFUNCSEPARATEIARBPROC GLeeFuncPtr_glBlendFuncSeparateiARB;
+  #define glBlendFuncSeparateiARB GLeeFuncPtr_glBlendFuncSeparateiARB
+#endif
+#endif 
+
+/* GL_ARB_sample_shading */
+
+#ifndef GL_ARB_sample_shading
+#define GL_ARB_sample_shading 1
+#define __GLEE_GL_ARB_sample_shading 1
+/* Constants */
+#define GL_SAMPLE_SHADING_ARB                              0x8C36
+#define GL_MIN_SAMPLE_SHADING_VALUE_ARB                    0x8C37
+#ifndef GLEE_H_DEFINED_glMinSampleShadingARB
+#define GLEE_H_DEFINED_glMinSampleShadingARB
+  typedef void (APIENTRYP GLEEPFNGLMINSAMPLESHADINGARBPROC) (GLclampf  value);
+  GLEE_EXTERN GLEEPFNGLMINSAMPLESHADINGARBPROC GLeeFuncPtr_glMinSampleShadingARB;
+  #define glMinSampleShadingARB GLeeFuncPtr_glMinSampleShadingARB
+#endif
+#endif 
+
+/* GL_ARB_texture_cube_map_array */
+
+#ifndef GL_ARB_texture_cube_map_array
+#define GL_ARB_texture_cube_map_array 1
+#define __GLEE_GL_ARB_texture_cube_map_array 1
+/* Constants */
+#define GL_TEXTURE_CUBE_MAP_ARRAY_ARB                      0x9009
+#define GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_ARB              0x900A
+#define GL_PROXY_TEXTURE_CUBE_MAP_ARRAY_ARB                0x900B
+#define GL_SAMPLER_CUBE_MAP_ARRAY_ARB                      0x900C
+#define GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_ARB               0x900D
+#define GL_INT_SAMPLER_CUBE_MAP_ARRAY_ARB                  0x900E
+#define GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_ARB         0x900F
+#endif 
+
+/* GL_ARB_texture_gather */
+
+#ifndef GL_ARB_texture_gather
+#define GL_ARB_texture_gather 1
+#define __GLEE_GL_ARB_texture_gather 1
+/* Constants */
+#define GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_ARB           0x8E5E
+#define GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_ARB           0x8E5F
+#endif 
+
+/* GL_ARB_texture_query_lod */
+
+#ifndef GL_ARB_texture_query_lod
+#define GL_ARB_texture_query_lod 1
+#define __GLEE_GL_ARB_texture_query_lod 1
+/* Constants */
+#endif 
+
+/* GL_ARB_shading_language_include */
+
+#ifndef GL_ARB_shading_language_include
+#define GL_ARB_shading_language_include 1
+#define __GLEE_GL_ARB_shading_language_include 1
+/* Constants */
+#define GL_SHADER_INCLUDE_ARB                              0x8DAE
+#define GL_NAMED_STRING_LENGTH_ARB                         0x8DE9
+#define GL_NAMED_STRING_TYPE_ARB                           0x8DEA
+#ifndef GLEE_H_DEFINED_glNamedStringARB
+#define GLEE_H_DEFINED_glNamedStringARB
+  typedef void (APIENTRYP GLEEPFNGLNAMEDSTRINGARBPROC) (GLenum  type, GLint  namelen, const GLchar * name, GLint  stringlen, const GLchar * string);
+  GLEE_EXTERN GLEEPFNGLNAMEDSTRINGARBPROC GLeeFuncPtr_glNamedStringARB;
+  #define glNamedStringARB GLeeFuncPtr_glNamedStringARB
+#endif
+#ifndef GLEE_H_DEFINED_glDeleteNamedStringARB
+#define GLEE_H_DEFINED_glDeleteNamedStringARB
+  typedef void (APIENTRYP GLEEPFNGLDELETENAMEDSTRINGARBPROC) (GLint  namelen, const GLchar * name);
+  GLEE_EXTERN GLEEPFNGLDELETENAMEDSTRINGARBPROC GLeeFuncPtr_glDeleteNamedStringARB;
+  #define glDeleteNamedStringARB GLeeFuncPtr_glDeleteNamedStringARB
+#endif
+#ifndef GLEE_H_DEFINED_glCompileShaderIncludeARB
+#define GLEE_H_DEFINED_glCompileShaderIncludeARB
+  typedef void (APIENTRYP GLEEPFNGLCOMPILESHADERINCLUDEARBPROC) (GLuint  shader, GLsizei  count, const GLchar* * path, const GLint * length);
+  GLEE_EXTERN GLEEPFNGLCOMPILESHADERINCLUDEARBPROC GLeeFuncPtr_glCompileShaderIncludeARB;
+  #define glCompileShaderIncludeARB GLeeFuncPtr_glCompileShaderIncludeARB
+#endif
+#ifndef GLEE_H_DEFINED_glIsNamedStringARB
+#define GLEE_H_DEFINED_glIsNamedStringARB
+  typedef GLboolean (APIENTRYP GLEEPFNGLISNAMEDSTRINGARBPROC) (GLint  namelen, const GLchar * name);
+  GLEE_EXTERN GLEEPFNGLISNAMEDSTRINGARBPROC GLeeFuncPtr_glIsNamedStringARB;
+  #define glIsNamedStringARB GLeeFuncPtr_glIsNamedStringARB
+#endif
+#ifndef GLEE_H_DEFINED_glGetNamedStringARB
+#define GLEE_H_DEFINED_glGetNamedStringARB
+  typedef void (APIENTRYP GLEEPFNGLGETNAMEDSTRINGARBPROC) (GLint  namelen, const GLchar * name, GLsizei  bufSize, GLint * stringlen, GLchar * string);
+  GLEE_EXTERN GLEEPFNGLGETNAMEDSTRINGARBPROC GLeeFuncPtr_glGetNamedStringARB;
+  #define glGetNamedStringARB GLeeFuncPtr_glGetNamedStringARB
+#endif
+#ifndef GLEE_H_DEFINED_glGetNamedStringivARB
+#define GLEE_H_DEFINED_glGetNamedStringivARB
+  typedef void (APIENTRYP GLEEPFNGLGETNAMEDSTRINGIVARBPROC) (GLint  namelen, const GLchar * name, GLenum  pname, GLint * params);
+  GLEE_EXTERN GLEEPFNGLGETNAMEDSTRINGIVARBPROC GLeeFuncPtr_glGetNamedStringivARB;
+  #define glGetNamedStringivARB GLeeFuncPtr_glGetNamedStringivARB
+#endif
+#endif 
+
+/* GL_ARB_texture_compression_bptc */
+
+#ifndef GL_ARB_texture_compression_bptc
+#define GL_ARB_texture_compression_bptc 1
+#define __GLEE_GL_ARB_texture_compression_bptc 1
+/* Constants */
+#define GL_COMPRESSED_RGBA_BPTC_UNORM_ARB                  0x8E8C
+#define GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB            0x8E8D
+#define GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB            0x8E8E
+#define GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB          0x8E8F
+#endif 
+
+/* GL_ARB_blend_func_extended */
+
+#ifndef GL_ARB_blend_func_extended
+#define GL_ARB_blend_func_extended 1
+#define __GLEE_GL_ARB_blend_func_extended 1
+/* Constants */
+#define GL_SRC1_COLOR                                      0x88F9
+#define GL_ONE_MINUS_SRC1_COLOR                            0x88FA
+#define GL_ONE_MINUS_SRC1_ALPHA                            0x88FB
+#define GL_MAX_DUAL_SOURCE_DRAW_BUFFERS                    0x88FC
+#ifndef GLEE_H_DEFINED_glBindFragDataLocationIndexed
+#define GLEE_H_DEFINED_glBindFragDataLocationIndexed
+  typedef void (APIENTRYP GLEEPFNGLBINDFRAGDATALOCATIONINDEXEDPROC) (GLuint  program, GLuint  colorNumber, GLuint  index, const GLchar * name);
+  GLEE_EXTERN GLEEPFNGLBINDFRAGDATALOCATIONINDEXEDPROC GLeeFuncPtr_glBindFragDataLocationIndexed;
+  #define glBindFragDataLocationIndexed GLeeFuncPtr_glBindFragDataLocationIndexed
+#endif
+#ifndef GLEE_H_DEFINED_glGetFragDataIndex
+#define GLEE_H_DEFINED_glGetFragDataIndex
+  typedef GLint (APIENTRYP GLEEPFNGLGETFRAGDATAINDEXPROC) (GLuint  program, const GLchar * name);
+  GLEE_EXTERN GLEEPFNGLGETFRAGDATAINDEXPROC GLeeFuncPtr_glGetFragDataIndex;
+  #define glGetFragDataIndex GLeeFuncPtr_glGetFragDataIndex
+#endif
+#endif 
+
+/* GL_ARB_explicit_attrib_location */
+
+#ifndef GL_ARB_explicit_attrib_location
+#define GL_ARB_explicit_attrib_location 1
+#define __GLEE_GL_ARB_explicit_attrib_location 1
+/* Constants */
+#endif 
+
+/* GL_ARB_occlusion_query2 */
+
+#ifndef GL_ARB_occlusion_query2
+#define GL_ARB_occlusion_query2 1
+#define __GLEE_GL_ARB_occlusion_query2 1
+/* Constants */
+#define GL_ANY_SAMPLES_PASSED                              0x8C2F
+#endif 
+
+/* GL_ARB_sampler_objects */
+
+#ifndef GL_ARB_sampler_objects
+#define GL_ARB_sampler_objects 1
+#define __GLEE_GL_ARB_sampler_objects 1
+/* Constants */
+#define GL_SAMPLER_BINDING                                 0x8919
+#ifndef GLEE_H_DEFINED_glGenSamplers
+#define GLEE_H_DEFINED_glGenSamplers
+  typedef void (APIENTRYP GLEEPFNGLGENSAMPLERSPROC) (GLsizei  count, GLuint * samplers);
+  GLEE_EXTERN GLEEPFNGLGENSAMPLERSPROC GLeeFuncPtr_glGenSamplers;
+  #define glGenSamplers GLeeFuncPtr_glGenSamplers
+#endif
+#ifndef GLEE_H_DEFINED_glDeleteSamplers
+#define GLEE_H_DEFINED_glDeleteSamplers
+  typedef void (APIENTRYP GLEEPFNGLDELETESAMPLERSPROC) (GLsizei  count, const GLuint * samplers);
+  GLEE_EXTERN GLEEPFNGLDELETESAMPLERSPROC GLeeFuncPtr_glDeleteSamplers;
+  #define glDeleteSamplers GLeeFuncPtr_glDeleteSamplers
+#endif
+#ifndef GLEE_H_DEFINED_glIsSampler
+#define GLEE_H_DEFINED_glIsSampler
+  typedef GLboolean (APIENTRYP GLEEPFNGLISSAMPLERPROC) (GLuint  sampler);
+  GLEE_EXTERN GLEEPFNGLISSAMPLERPROC GLeeFuncPtr_glIsSampler;
+  #define glIsSampler GLeeFuncPtr_glIsSampler
+#endif
+#ifndef GLEE_H_DEFINED_glBindSampler
+#define GLEE_H_DEFINED_glBindSampler
+  typedef void (APIENTRYP GLEEPFNGLBINDSAMPLERPROC) (GLuint  unit, GLuint  sampler);
+  GLEE_EXTERN GLEEPFNGLBINDSAMPLERPROC GLeeFuncPtr_glBindSampler;
+  #define glBindSampler GLeeFuncPtr_glBindSampler
+#endif
+#ifndef GLEE_H_DEFINED_glSamplerParameteri
+#define GLEE_H_DEFINED_glSamplerParameteri
+  typedef void (APIENTRYP GLEEPFNGLSAMPLERPARAMETERIPROC) (GLuint  sampler, GLenum  pname, GLint  param);
+  GLEE_EXTERN GLEEPFNGLSAMPLERPARAMETERIPROC GLeeFuncPtr_glSamplerParameteri;
+  #define glSamplerParameteri GLeeFuncPtr_glSamplerParameteri
+#endif
+#ifndef GLEE_H_DEFINED_glSamplerParameteriv
+#define GLEE_H_DEFINED_glSamplerParameteriv
+  typedef void (APIENTRYP GLEEPFNGLSAMPLERPARAMETERIVPROC) (GLuint  sampler, GLenum  pname, const GLint * param);
+  GLEE_EXTERN GLEEPFNGLSAMPLERPARAMETERIVPROC GLeeFuncPtr_glSamplerParameteriv;
+  #define glSamplerParameteriv GLeeFuncPtr_glSamplerParameteriv
+#endif
+#ifndef GLEE_H_DEFINED_glSamplerParameterf
+#define GLEE_H_DEFINED_glSamplerParameterf
+  typedef void (APIENTRYP GLEEPFNGLSAMPLERPARAMETERFPROC) (GLuint  sampler, GLenum  pname, GLfloat  param);
+  GLEE_EXTERN GLEEPFNGLSAMPLERPARAMETERFPROC GLeeFuncPtr_glSamplerParameterf;
+  #define glSamplerParameterf GLeeFuncPtr_glSamplerParameterf
+#endif
+#ifndef GLEE_H_DEFINED_glSamplerParameterfv
+#define GLEE_H_DEFINED_glSamplerParameterfv
+  typedef void (APIENTRYP GLEEPFNGLSAMPLERPARAMETERFVPROC) (GLuint  sampler, GLenum  pname, const GLfloat * param);
+  GLEE_EXTERN GLEEPFNGLSAMPLERPARAMETERFVPROC GLeeFuncPtr_glSamplerParameterfv;
+  #define glSamplerParameterfv GLeeFuncPtr_glSamplerParameterfv
+#endif
+#ifndef GLEE_H_DEFINED_glSamplerParameterIiv
+#define GLEE_H_DEFINED_glSamplerParameterIiv
+  typedef void (APIENTRYP GLEEPFNGLSAMPLERPARAMETERIIVPROC) (GLuint  sampler, GLenum  pname, const GLint * param);
+  GLEE_EXTERN GLEEPFNGLSAMPLERPARAMETERIIVPROC GLeeFuncPtr_glSamplerParameterIiv;
+  #define glSamplerParameterIiv GLeeFuncPtr_glSamplerParameterIiv
+#endif
+#ifndef GLEE_H_DEFINED_glSamplerParameterIuiv
+#define GLEE_H_DEFINED_glSamplerParameterIuiv
+  typedef void (APIENTRYP GLEEPFNGLSAMPLERPARAMETERIUIVPROC) (GLuint  sampler, GLenum  pname, const GLuint * param);
+  GLEE_EXTERN GLEEPFNGLSAMPLERPARAMETERIUIVPROC GLeeFuncPtr_glSamplerParameterIuiv;
+  #define glSamplerParameterIuiv GLeeFuncPtr_glSamplerParameterIuiv
+#endif
+#ifndef GLEE_H_DEFINED_glGetSamplerParameteriv
+#define GLEE_H_DEFINED_glGetSamplerParameteriv
+  typedef void (APIENTRYP GLEEPFNGLGETSAMPLERPARAMETERIVPROC) (GLuint  sampler, GLenum  pname, GLint * params);
+  GLEE_EXTERN GLEEPFNGLGETSAMPLERPARAMETERIVPROC GLeeFuncPtr_glGetSamplerParameteriv;
+  #define glGetSamplerParameteriv GLeeFuncPtr_glGetSamplerParameteriv
+#endif
+#ifndef GLEE_H_DEFINED_glGetSamplerParameterIiv
+#define GLEE_H_DEFINED_glGetSamplerParameterIiv
+  typedef void (APIENTRYP GLEEPFNGLGETSAMPLERPARAMETERIIVPROC) (GLuint  sampler, GLenum  pname, GLint * params);
+  GLEE_EXTERN GLEEPFNGLGETSAMPLERPARAMETERIIVPROC GLeeFuncPtr_glGetSamplerParameterIiv;
+  #define glGetSamplerParameterIiv GLeeFuncPtr_glGetSamplerParameterIiv
+#endif
+#ifndef GLEE_H_DEFINED_glGetSamplerParameterfv
+#define GLEE_H_DEFINED_glGetSamplerParameterfv
+  typedef void (APIENTRYP GLEEPFNGLGETSAMPLERPARAMETERFVPROC) (GLuint  sampler, GLenum  pname, GLfloat * params);
+  GLEE_EXTERN GLEEPFNGLGETSAMPLERPARAMETERFVPROC GLeeFuncPtr_glGetSamplerParameterfv;
+  #define glGetSamplerParameterfv GLeeFuncPtr_glGetSamplerParameterfv
+#endif
+#ifndef GLEE_H_DEFINED_glGetSamplerParameterIuiv
+#define GLEE_H_DEFINED_glGetSamplerParameterIuiv
+  typedef void (APIENTRYP GLEEPFNGLGETSAMPLERPARAMETERIUIVPROC) (GLuint  sampler, GLenum  pname, GLuint * params);
+  GLEE_EXTERN GLEEPFNGLGETSAMPLERPARAMETERIUIVPROC GLeeFuncPtr_glGetSamplerParameterIuiv;
+  #define glGetSamplerParameterIuiv GLeeFuncPtr_glGetSamplerParameterIuiv
+#endif
+#endif 
+
+/* GL_ARB_shader_bit_encoding */
+
+#ifndef GL_ARB_shader_bit_encoding
+#define GL_ARB_shader_bit_encoding 1
+#define __GLEE_GL_ARB_shader_bit_encoding 1
+/* Constants */
+#endif 
+
+/* GL_ARB_texture_rgb10_a2ui */
+
+#ifndef GL_ARB_texture_rgb10_a2ui
+#define GL_ARB_texture_rgb10_a2ui 1
+#define __GLEE_GL_ARB_texture_rgb10_a2ui 1
+/* Constants */
+#define GL_RGB10_A2UI                                      0x906F
+#endif 
+
+/* GL_ARB_texture_swizzle */
+
+#ifndef GL_ARB_texture_swizzle
+#define GL_ARB_texture_swizzle 1
+#define __GLEE_GL_ARB_texture_swizzle 1
+/* Constants */
+#define GL_TEXTURE_SWIZZLE_R                               0x8E42
+#define GL_TEXTURE_SWIZZLE_G                               0x8E43
+#define GL_TEXTURE_SWIZZLE_B                               0x8E44
+#define GL_TEXTURE_SWIZZLE_A                               0x8E45
+#define GL_TEXTURE_SWIZZLE_RGBA                            0x8E46
+#endif 
+
+/* GL_ARB_timer_query */
+
+#ifndef GL_ARB_timer_query
+#define GL_ARB_timer_query 1
+#define __GLEE_GL_ARB_timer_query 1
+/* Constants */
+#define GL_TIME_ELAPSED                                    0x88BF
+#define GL_TIMESTAMP                                       0x8E28
+#ifndef GLEE_H_DEFINED_glQueryCounter
+#define GLEE_H_DEFINED_glQueryCounter
+  typedef void (APIENTRYP GLEEPFNGLQUERYCOUNTERPROC) (GLuint  id, GLenum  target);
+  GLEE_EXTERN GLEEPFNGLQUERYCOUNTERPROC GLeeFuncPtr_glQueryCounter;
+  #define glQueryCounter GLeeFuncPtr_glQueryCounter
+#endif
+#ifndef GLEE_H_DEFINED_glGetQueryObjecti64v
+#define GLEE_H_DEFINED_glGetQueryObjecti64v
+  typedef void (APIENTRYP GLEEPFNGLGETQUERYOBJECTI64VPROC) (GLuint  id, GLenum  pname, GLint64 * params);
+  GLEE_EXTERN GLEEPFNGLGETQUERYOBJECTI64VPROC GLeeFuncPtr_glGetQueryObjecti64v;
+  #define glGetQueryObjecti64v GLeeFuncPtr_glGetQueryObjecti64v
+#endif
+#ifndef GLEE_H_DEFINED_glGetQueryObjectui64v
+#define GLEE_H_DEFINED_glGetQueryObjectui64v
+  typedef void (APIENTRYP GLEEPFNGLGETQUERYOBJECTUI64VPROC) (GLuint  id, GLenum  pname, GLuint64 * params);
+  GLEE_EXTERN GLEEPFNGLGETQUERYOBJECTUI64VPROC GLeeFuncPtr_glGetQueryObjectui64v;
+  #define glGetQueryObjectui64v GLeeFuncPtr_glGetQueryObjectui64v
+#endif
+#endif 
+
+/* GL_ARB_vertex_type_2_10_10_10_rev */
+
+#ifndef GL_ARB_vertex_type_2_10_10_10_rev
+#define GL_ARB_vertex_type_2_10_10_10_rev 1
+#define __GLEE_GL_ARB_vertex_type_2_10_10_10_rev 1
+/* Constants */
+#define GL_INT_2_10_10_10_REV                              0x8D9F
+#ifndef GLEE_H_DEFINED_glVertexP2ui
+#define GLEE_H_DEFINED_glVertexP2ui
+  typedef void (APIENTRYP GLEEPFNGLVERTEXP2UIPROC) (GLenum  type, GLuint  value);
+  GLEE_EXTERN GLEEPFNGLVERTEXP2UIPROC GLeeFuncPtr_glVertexP2ui;
+  #define glVertexP2ui GLeeFuncPtr_glVertexP2ui
+#endif
+#ifndef GLEE_H_DEFINED_glVertexP2uiv
+#define GLEE_H_DEFINED_glVertexP2uiv
+  typedef void (APIENTRYP GLEEPFNGLVERTEXP2UIVPROC) (GLenum  type, const GLuint * value);
+  GLEE_EXTERN GLEEPFNGLVERTEXP2UIVPROC GLeeFuncPtr_glVertexP2uiv;
+  #define glVertexP2uiv GLeeFuncPtr_glVertexP2uiv
+#endif
+#ifndef GLEE_H_DEFINED_glVertexP3ui
+#define GLEE_H_DEFINED_glVertexP3ui
+  typedef void (APIENTRYP GLEEPFNGLVERTEXP3UIPROC) (GLenum  type, GLuint  value);
+  GLEE_EXTERN GLEEPFNGLVERTEXP3UIPROC GLeeFuncPtr_glVertexP3ui;
+  #define glVertexP3ui GLeeFuncPtr_glVertexP3ui
+#endif
+#ifndef GLEE_H_DEFINED_glVertexP3uiv
+#define GLEE_H_DEFINED_glVertexP3uiv
+  typedef void (APIENTRYP GLEEPFNGLVERTEXP3UIVPROC) (GLenum  type, const GLuint * value);
+  GLEE_EXTERN GLEEPFNGLVERTEXP3UIVPROC GLeeFuncPtr_glVertexP3uiv;
+  #define glVertexP3uiv GLeeFuncPtr_glVertexP3uiv
+#endif
+#ifndef GLEE_H_DEFINED_glVertexP4ui
+#define GLEE_H_DEFINED_glVertexP4ui
+  typedef void (APIENTRYP GLEEPFNGLVERTEXP4UIPROC) (GLenum  type, GLuint  value);
+  GLEE_EXTERN GLEEPFNGLVERTEXP4UIPROC GLeeFuncPtr_glVertexP4ui;
+  #define glVertexP4ui GLeeFuncPtr_glVertexP4ui
+#endif
+#ifndef GLEE_H_DEFINED_glVertexP4uiv
+#define GLEE_H_DEFINED_glVertexP4uiv
+  typedef void (APIENTRYP GLEEPFNGLVERTEXP4UIVPROC) (GLenum  type, const GLuint * value);
+  GLEE_EXTERN GLEEPFNGLVERTEXP4UIVPROC GLeeFuncPtr_glVertexP4uiv;
+  #define glVertexP4uiv GLeeFuncPtr_glVertexP4uiv
+#endif
+#ifndef GLEE_H_DEFINED_glTexCoordP1ui
+#define GLEE_H_DEFINED_glTexCoordP1ui
+  typedef void (APIENTRYP GLEEPFNGLTEXCOORDP1UIPROC) (GLenum  type, GLuint  coords);
+  GLEE_EXTERN GLEEPFNGLTEXCOORDP1UIPROC GLeeFuncPtr_glTexCoordP1ui;
+  #define glTexCoordP1ui GLeeFuncPtr_glTexCoordP1ui
+#endif
+#ifndef GLEE_H_DEFINED_glTexCoordP1uiv
+#define GLEE_H_DEFINED_glTexCoordP1uiv
+  typedef void (APIENTRYP GLEEPFNGLTEXCOORDP1UIVPROC) (GLenum  type, const GLuint * coords);
+  GLEE_EXTERN GLEEPFNGLTEXCOORDP1UIVPROC GLeeFuncPtr_glTexCoordP1uiv;
+  #define glTexCoordP1uiv GLeeFuncPtr_glTexCoordP1uiv
+#endif
+#ifndef GLEE_H_DEFINED_glTexCoordP2ui
+#define GLEE_H_DEFINED_glTexCoordP2ui
+  typedef void (APIENTRYP GLEEPFNGLTEXCOORDP2UIPROC) (GLenum  type, GLuint  coords);
+  GLEE_EXTERN GLEEPFNGLTEXCOORDP2UIPROC GLeeFuncPtr_glTexCoordP2ui;
+  #define glTexCoordP2ui GLeeFuncPtr_glTexCoordP2ui
+#endif
+#ifndef GLEE_H_DEFINED_glTexCoordP2uiv
+#define GLEE_H_DEFINED_glTexCoordP2uiv
+  typedef void (APIENTRYP GLEEPFNGLTEXCOORDP2UIVPROC) (GLenum  type, const GLuint * coords);
+  GLEE_EXTERN GLEEPFNGLTEXCOORDP2UIVPROC GLeeFuncPtr_glTexCoordP2uiv;
+  #define glTexCoordP2uiv GLeeFuncPtr_glTexCoordP2uiv
+#endif
+#ifndef GLEE_H_DEFINED_glTexCoordP3ui
+#define GLEE_H_DEFINED_glTexCoordP3ui
+  typedef void (APIENTRYP GLEEPFNGLTEXCOORDP3UIPROC) (GLenum  type, GLuint  coords);
+  GLEE_EXTERN GLEEPFNGLTEXCOORDP3UIPROC GLeeFuncPtr_glTexCoordP3ui;
+  #define glTexCoordP3ui GLeeFuncPtr_glTexCoordP3ui
+#endif
+#ifndef GLEE_H_DEFINED_glTexCoordP3uiv
+#define GLEE_H_DEFINED_glTexCoordP3uiv
+  typedef void (APIENTRYP GLEEPFNGLTEXCOORDP3UIVPROC) (GLenum  type, const GLuint * coords);
+  GLEE_EXTERN GLEEPFNGLTEXCOORDP3UIVPROC GLeeFuncPtr_glTexCoordP3uiv;
+  #define glTexCoordP3uiv GLeeFuncPtr_glTexCoordP3uiv
+#endif
+#ifndef GLEE_H_DEFINED_glTexCoordP4ui
+#define GLEE_H_DEFINED_glTexCoordP4ui
+  typedef void (APIENTRYP GLEEPFNGLTEXCOORDP4UIPROC) (GLenum  type, GLuint  coords);
+  GLEE_EXTERN GLEEPFNGLTEXCOORDP4UIPROC GLeeFuncPtr_glTexCoordP4ui;
+  #define glTexCoordP4ui GLeeFuncPtr_glTexCoordP4ui
+#endif
+#ifndef GLEE_H_DEFINED_glTexCoordP4uiv
+#define GLEE_H_DEFINED_glTexCoordP4uiv
+  typedef void (APIENTRYP GLEEPFNGLTEXCOORDP4UIVPROC) (GLenum  type, const GLuint * coords);
+  GLEE_EXTERN GLEEPFNGLTEXCOORDP4UIVPROC GLeeFuncPtr_glTexCoordP4uiv;
+  #define glTexCoordP4uiv GLeeFuncPtr_glTexCoordP4uiv
+#endif
+#ifndef GLEE_H_DEFINED_glMultiTexCoordP1ui
+#define GLEE_H_DEFINED_glMultiTexCoordP1ui
+  typedef void (APIENTRYP GLEEPFNGLMULTITEXCOORDP1UIPROC) (GLenum  texture, GLenum  type, GLuint  coords);
+  GLEE_EXTERN GLEEPFNGLMULTITEXCOORDP1UIPROC GLeeFuncPtr_glMultiTexCoordP1ui;
+  #define glMultiTexCoordP1ui GLeeFuncPtr_glMultiTexCoordP1ui
+#endif
+#ifndef GLEE_H_DEFINED_glMultiTexCoordP1uiv
+#define GLEE_H_DEFINED_glMultiTexCoordP1uiv
+  typedef void (APIENTRYP GLEEPFNGLMULTITEXCOORDP1UIVPROC) (GLenum  texture, GLenum  type, const GLuint * coords);
+  GLEE_EXTERN GLEEPFNGLMULTITEXCOORDP1UIVPROC GLeeFuncPtr_glMultiTexCoordP1uiv;
+  #define glMultiTexCoordP1uiv GLeeFuncPtr_glMultiTexCoordP1uiv
+#endif
+#ifndef GLEE_H_DEFINED_glMultiTexCoordP2ui
+#define GLEE_H_DEFINED_glMultiTexCoordP2ui
+  typedef void (APIENTRYP GLEEPFNGLMULTITEXCOORDP2UIPROC) (GLenum  texture, GLenum  type, GLuint  coords);
+  GLEE_EXTERN GLEEPFNGLMULTITEXCOORDP2UIPROC GLeeFuncPtr_glMultiTexCoordP2ui;
+  #define glMultiTexCoordP2ui GLeeFuncPtr_glMultiTexCoordP2ui
+#endif
+#ifndef GLEE_H_DEFINED_glMultiTexCoordP2uiv
+#define GLEE_H_DEFINED_glMultiTexCoordP2uiv
+  typedef void (APIENTRYP GLEEPFNGLMULTITEXCOORDP2UIVPROC) (GLenum  texture, GLenum  type, const GLuint * coords);
+  GLEE_EXTERN GLEEPFNGLMULTITEXCOORDP2UIVPROC GLeeFuncPtr_glMultiTexCoordP2uiv;
+  #define glMultiTexCoordP2uiv GLeeFuncPtr_glMultiTexCoordP2uiv
+#endif
+#ifndef GLEE_H_DEFINED_glMultiTexCoordP3ui
+#define GLEE_H_DEFINED_glMultiTexCoordP3ui
+  typedef void (APIENTRYP GLEEPFNGLMULTITEXCOORDP3UIPROC) (GLenum  texture, GLenum  type, GLuint  coords);
+  GLEE_EXTERN GLEEPFNGLMULTITEXCOORDP3UIPROC GLeeFuncPtr_glMultiTexCoordP3ui;
+  #define glMultiTexCoordP3ui GLeeFuncPtr_glMultiTexCoordP3ui
+#endif
+#ifndef GLEE_H_DEFINED_glMultiTexCoordP3uiv
+#define GLEE_H_DEFINED_glMultiTexCoordP3uiv
+  typedef void (APIENTRYP GLEEPFNGLMULTITEXCOORDP3UIVPROC) (GLenum  texture, GLenum  type, const GLuint * coords);
+  GLEE_EXTERN GLEEPFNGLMULTITEXCOORDP3UIVPROC GLeeFuncPtr_glMultiTexCoordP3uiv;
+  #define glMultiTexCoordP3uiv GLeeFuncPtr_glMultiTexCoordP3uiv
+#endif
+#ifndef GLEE_H_DEFINED_glMultiTexCoordP4ui
+#define GLEE_H_DEFINED_glMultiTexCoordP4ui
+  typedef void (APIENTRYP GLEEPFNGLMULTITEXCOORDP4UIPROC) (GLenum  texture, GLenum  type, GLuint  coords);
+  GLEE_EXTERN GLEEPFNGLMULTITEXCOORDP4UIPROC GLeeFuncPtr_glMultiTexCoordP4ui;
+  #define glMultiTexCoordP4ui GLeeFuncPtr_glMultiTexCoordP4ui
+#endif
+#ifndef GLEE_H_DEFINED_glMultiTexCoordP4uiv
+#define GLEE_H_DEFINED_glMultiTexCoordP4uiv
+  typedef void (APIENTRYP GLEEPFNGLMULTITEXCOORDP4UIVPROC) (GLenum  texture, GLenum  type, const GLuint * coords);
+  GLEE_EXTERN GLEEPFNGLMULTITEXCOORDP4UIVPROC GLeeFuncPtr_glMultiTexCoordP4uiv;
+  #define glMultiTexCoordP4uiv GLeeFuncPtr_glMultiTexCoordP4uiv
+#endif
+#ifndef GLEE_H_DEFINED_glNormalP3ui
+#define GLEE_H_DEFINED_glNormalP3ui
+  typedef void (APIENTRYP GLEEPFNGLNORMALP3UIPROC) (GLenum  type, GLuint  coords);
+  GLEE_EXTERN GLEEPFNGLNORMALP3UIPROC GLeeFuncPtr_glNormalP3ui;
+  #define glNormalP3ui GLeeFuncPtr_glNormalP3ui
+#endif
+#ifndef GLEE_H_DEFINED_glNormalP3uiv
+#define GLEE_H_DEFINED_glNormalP3uiv
+  typedef void (APIENTRYP GLEEPFNGLNORMALP3UIVPROC) (GLenum  type, const GLuint * coords);
+  GLEE_EXTERN GLEEPFNGLNORMALP3UIVPROC GLeeFuncPtr_glNormalP3uiv;
+  #define glNormalP3uiv GLeeFuncPtr_glNormalP3uiv
+#endif
+#ifndef GLEE_H_DEFINED_glColorP3ui
+#define GLEE_H_DEFINED_glColorP3ui
+  typedef void (APIENTRYP GLEEPFNGLCOLORP3UIPROC) (GLenum  type, GLuint  color);
+  GLEE_EXTERN GLEEPFNGLCOLORP3UIPROC GLeeFuncPtr_glColorP3ui;
+  #define glColorP3ui GLeeFuncPtr_glColorP3ui
+#endif
+#ifndef GLEE_H_DEFINED_glColorP3uiv
+#define GLEE_H_DEFINED_glColorP3uiv
+  typedef void (APIENTRYP GLEEPFNGLCOLORP3UIVPROC) (GLenum  type, const GLuint * color);
+  GLEE_EXTERN GLEEPFNGLCOLORP3UIVPROC GLeeFuncPtr_glColorP3uiv;
+  #define glColorP3uiv GLeeFuncPtr_glColorP3uiv
+#endif
+#ifndef GLEE_H_DEFINED_glColorP4ui
+#define GLEE_H_DEFINED_glColorP4ui
+  typedef void (APIENTRYP GLEEPFNGLCOLORP4UIPROC) (GLenum  type, GLuint  color);
+  GLEE_EXTERN GLEEPFNGLCOLORP4UIPROC GLeeFuncPtr_glColorP4ui;
+  #define glColorP4ui GLeeFuncPtr_glColorP4ui
+#endif
+#ifndef GLEE_H_DEFINED_glColorP4uiv
+#define GLEE_H_DEFINED_glColorP4uiv
+  typedef void (APIENTRYP GLEEPFNGLCOLORP4UIVPROC) (GLenum  type, const GLuint * color);
+  GLEE_EXTERN GLEEPFNGLCOLORP4UIVPROC GLeeFuncPtr_glColorP4uiv;
+  #define glColorP4uiv GLeeFuncPtr_glColorP4uiv
+#endif
+#ifndef GLEE_H_DEFINED_glSecondaryColorP3ui
+#define GLEE_H_DEFINED_glSecondaryColorP3ui
+  typedef void (APIENTRYP GLEEPFNGLSECONDARYCOLORP3UIPROC) (GLenum  type, GLuint  color);
+  GLEE_EXTERN GLEEPFNGLSECONDARYCOLORP3UIPROC GLeeFuncPtr_glSecondaryColorP3ui;
+  #define glSecondaryColorP3ui GLeeFuncPtr_glSecondaryColorP3ui
+#endif
+#ifndef GLEE_H_DEFINED_glSecondaryColorP3uiv
+#define GLEE_H_DEFINED_glSecondaryColorP3uiv
+  typedef void (APIENTRYP GLEEPFNGLSECONDARYCOLORP3UIVPROC) (GLenum  type, const GLuint * color);
+  GLEE_EXTERN GLEEPFNGLSECONDARYCOLORP3UIVPROC GLeeFuncPtr_glSecondaryColorP3uiv;
+  #define glSecondaryColorP3uiv GLeeFuncPtr_glSecondaryColorP3uiv
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttribP1ui
+#define GLEE_H_DEFINED_glVertexAttribP1ui
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIBP1UIPROC) (GLuint  index, GLenum  type, GLboolean  normalized, GLuint  value);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIBP1UIPROC GLeeFuncPtr_glVertexAttribP1ui;
+  #define glVertexAttribP1ui GLeeFuncPtr_glVertexAttribP1ui
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttribP1uiv
+#define GLEE_H_DEFINED_glVertexAttribP1uiv
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIBP1UIVPROC) (GLuint  index, GLenum  type, GLboolean  normalized, const GLuint * value);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIBP1UIVPROC GLeeFuncPtr_glVertexAttribP1uiv;
+  #define glVertexAttribP1uiv GLeeFuncPtr_glVertexAttribP1uiv
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttribP2ui
+#define GLEE_H_DEFINED_glVertexAttribP2ui
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIBP2UIPROC) (GLuint  index, GLenum  type, GLboolean  normalized, GLuint  value);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIBP2UIPROC GLeeFuncPtr_glVertexAttribP2ui;
+  #define glVertexAttribP2ui GLeeFuncPtr_glVertexAttribP2ui
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttribP2uiv
+#define GLEE_H_DEFINED_glVertexAttribP2uiv
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIBP2UIVPROC) (GLuint  index, GLenum  type, GLboolean  normalized, const GLuint * value);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIBP2UIVPROC GLeeFuncPtr_glVertexAttribP2uiv;
+  #define glVertexAttribP2uiv GLeeFuncPtr_glVertexAttribP2uiv
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttribP3ui
+#define GLEE_H_DEFINED_glVertexAttribP3ui
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIBP3UIPROC) (GLuint  index, GLenum  type, GLboolean  normalized, GLuint  value);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIBP3UIPROC GLeeFuncPtr_glVertexAttribP3ui;
+  #define glVertexAttribP3ui GLeeFuncPtr_glVertexAttribP3ui
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttribP3uiv
+#define GLEE_H_DEFINED_glVertexAttribP3uiv
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIBP3UIVPROC) (GLuint  index, GLenum  type, GLboolean  normalized, const GLuint * value);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIBP3UIVPROC GLeeFuncPtr_glVertexAttribP3uiv;
+  #define glVertexAttribP3uiv GLeeFuncPtr_glVertexAttribP3uiv
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttribP4ui
+#define GLEE_H_DEFINED_glVertexAttribP4ui
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIBP4UIPROC) (GLuint  index, GLenum  type, GLboolean  normalized, GLuint  value);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIBP4UIPROC GLeeFuncPtr_glVertexAttribP4ui;
+  #define glVertexAttribP4ui GLeeFuncPtr_glVertexAttribP4ui
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttribP4uiv
+#define GLEE_H_DEFINED_glVertexAttribP4uiv
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIBP4UIVPROC) (GLuint  index, GLenum  type, GLboolean  normalized, const GLuint * value);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIBP4UIVPROC GLeeFuncPtr_glVertexAttribP4uiv;
+  #define glVertexAttribP4uiv GLeeFuncPtr_glVertexAttribP4uiv
+#endif
+#endif 
+
+/* GL_ARB_draw_indirect */
+
+#ifndef GL_ARB_draw_indirect
+#define GL_ARB_draw_indirect 1
+#define __GLEE_GL_ARB_draw_indirect 1
+/* Constants */
+#define GL_DRAW_INDIRECT_BUFFER                            0x8F3F
+#define GL_DRAW_INDIRECT_BUFFER_BINDING                    0x8F43
+#ifndef GLEE_H_DEFINED_glDrawArraysIndirect
+#define GLEE_H_DEFINED_glDrawArraysIndirect
+  typedef void (APIENTRYP GLEEPFNGLDRAWARRAYSINDIRECTPROC) (GLenum  mode, const GLvoid * indirect);
+  GLEE_EXTERN GLEEPFNGLDRAWARRAYSINDIRECTPROC GLeeFuncPtr_glDrawArraysIndirect;
+  #define glDrawArraysIndirect GLeeFuncPtr_glDrawArraysIndirect
+#endif
+#ifndef GLEE_H_DEFINED_glDrawElementsIndirect
+#define GLEE_H_DEFINED_glDrawElementsIndirect
+  typedef void (APIENTRYP GLEEPFNGLDRAWELEMENTSINDIRECTPROC) (GLenum  mode, GLenum  type, const GLvoid * indirect);
+  GLEE_EXTERN GLEEPFNGLDRAWELEMENTSINDIRECTPROC GLeeFuncPtr_glDrawElementsIndirect;
+  #define glDrawElementsIndirect GLeeFuncPtr_glDrawElementsIndirect
+#endif
+#endif 
+
+/* GL_ARB_gpu_shader5 */
+
+#ifndef GL_ARB_gpu_shader5
+#define GL_ARB_gpu_shader5 1
+#define __GLEE_GL_ARB_gpu_shader5 1
+/* Constants */
+#define GL_GEOMETRY_SHADER_INVOCATIONS                     0x887F
+#define GL_MAX_GEOMETRY_SHADER_INVOCATIONS                 0x8E5A
+#define GL_MIN_FRAGMENT_INTERPOLATION_OFFSET               0x8E5B
+#define GL_MAX_FRAGMENT_INTERPOLATION_OFFSET               0x8E5C
+#define GL_FRAGMENT_INTERPOLATION_OFFSET_BITS              0x8E5D
+#endif 
+
+/* GL_ARB_gpu_shader_fp64 */
+
+#ifndef GL_ARB_gpu_shader_fp64
+#define GL_ARB_gpu_shader_fp64 1
+#define __GLEE_GL_ARB_gpu_shader_fp64 1
+/* Constants */
+#define GL_DOUBLE_VEC2                                     0x8FFC
+#define GL_DOUBLE_VEC3                                     0x8FFD
+#define GL_DOUBLE_VEC4                                     0x8FFE
+#define GL_DOUBLE_MAT2                                     0x8F46
+#define GL_DOUBLE_MAT3                                     0x8F47
+#define GL_DOUBLE_MAT4                                     0x8F48
+#define GL_DOUBLE_MAT2x3                                   0x8F49
+#define GL_DOUBLE_MAT2x4                                   0x8F4A
+#define GL_DOUBLE_MAT3x2                                   0x8F4B
+#define GL_DOUBLE_MAT3x4                                   0x8F4C
+#define GL_DOUBLE_MAT4x2                                   0x8F4D
+#define GL_DOUBLE_MAT4x3                                   0x8F4E
+#ifndef GLEE_H_DEFINED_glUniform1d
+#define GLEE_H_DEFINED_glUniform1d
+  typedef void (APIENTRYP GLEEPFNGLUNIFORM1DPROC) (GLint  location, GLdouble  x);
+  GLEE_EXTERN GLEEPFNGLUNIFORM1DPROC GLeeFuncPtr_glUniform1d;
+  #define glUniform1d GLeeFuncPtr_glUniform1d
+#endif
+#ifndef GLEE_H_DEFINED_glUniform2d
+#define GLEE_H_DEFINED_glUniform2d
+  typedef void (APIENTRYP GLEEPFNGLUNIFORM2DPROC) (GLint  location, GLdouble  x, GLdouble  y);
+  GLEE_EXTERN GLEEPFNGLUNIFORM2DPROC GLeeFuncPtr_glUniform2d;
+  #define glUniform2d GLeeFuncPtr_glUniform2d
+#endif
+#ifndef GLEE_H_DEFINED_glUniform3d
+#define GLEE_H_DEFINED_glUniform3d
+  typedef void (APIENTRYP GLEEPFNGLUNIFORM3DPROC) (GLint  location, GLdouble  x, GLdouble  y, GLdouble  z);
+  GLEE_EXTERN GLEEPFNGLUNIFORM3DPROC GLeeFuncPtr_glUniform3d;
+  #define glUniform3d GLeeFuncPtr_glUniform3d
+#endif
+#ifndef GLEE_H_DEFINED_glUniform4d
+#define GLEE_H_DEFINED_glUniform4d
+  typedef void (APIENTRYP GLEEPFNGLUNIFORM4DPROC) (GLint  location, GLdouble  x, GLdouble  y, GLdouble  z, GLdouble  w);
+  GLEE_EXTERN GLEEPFNGLUNIFORM4DPROC GLeeFuncPtr_glUniform4d;
+  #define glUniform4d GLeeFuncPtr_glUniform4d
+#endif
+#ifndef GLEE_H_DEFINED_glUniform1dv
+#define GLEE_H_DEFINED_glUniform1dv
+  typedef void (APIENTRYP GLEEPFNGLUNIFORM1DVPROC) (GLint  location, GLsizei  count, const GLdouble * value);
+  GLEE_EXTERN GLEEPFNGLUNIFORM1DVPROC GLeeFuncPtr_glUniform1dv;
+  #define glUniform1dv GLeeFuncPtr_glUniform1dv
+#endif
+#ifndef GLEE_H_DEFINED_glUniform2dv
+#define GLEE_H_DEFINED_glUniform2dv
+  typedef void (APIENTRYP GLEEPFNGLUNIFORM2DVPROC) (GLint  location, GLsizei  count, const GLdouble * value);
+  GLEE_EXTERN GLEEPFNGLUNIFORM2DVPROC GLeeFuncPtr_glUniform2dv;
+  #define glUniform2dv GLeeFuncPtr_glUniform2dv
+#endif
+#ifndef GLEE_H_DEFINED_glUniform3dv
+#define GLEE_H_DEFINED_glUniform3dv
+  typedef void (APIENTRYP GLEEPFNGLUNIFORM3DVPROC) (GLint  location, GLsizei  count, const GLdouble * value);
+  GLEE_EXTERN GLEEPFNGLUNIFORM3DVPROC GLeeFuncPtr_glUniform3dv;
+  #define glUniform3dv GLeeFuncPtr_glUniform3dv
+#endif
+#ifndef GLEE_H_DEFINED_glUniform4dv
+#define GLEE_H_DEFINED_glUniform4dv
+  typedef void (APIENTRYP GLEEPFNGLUNIFORM4DVPROC) (GLint  location, GLsizei  count, const GLdouble * value);
+  GLEE_EXTERN GLEEPFNGLUNIFORM4DVPROC GLeeFuncPtr_glUniform4dv;
+  #define glUniform4dv GLeeFuncPtr_glUniform4dv
+#endif
+#ifndef GLEE_H_DEFINED_glUniformMatrix2dv
+#define GLEE_H_DEFINED_glUniformMatrix2dv
+  typedef void (APIENTRYP GLEEPFNGLUNIFORMMATRIX2DVPROC) (GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value);
+  GLEE_EXTERN GLEEPFNGLUNIFORMMATRIX2DVPROC GLeeFuncPtr_glUniformMatrix2dv;
+  #define glUniformMatrix2dv GLeeFuncPtr_glUniformMatrix2dv
+#endif
+#ifndef GLEE_H_DEFINED_glUniformMatrix3dv
+#define GLEE_H_DEFINED_glUniformMatrix3dv
+  typedef void (APIENTRYP GLEEPFNGLUNIFORMMATRIX3DVPROC) (GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value);
+  GLEE_EXTERN GLEEPFNGLUNIFORMMATRIX3DVPROC GLeeFuncPtr_glUniformMatrix3dv;
+  #define glUniformMatrix3dv GLeeFuncPtr_glUniformMatrix3dv
+#endif
+#ifndef GLEE_H_DEFINED_glUniformMatrix4dv
+#define GLEE_H_DEFINED_glUniformMatrix4dv
+  typedef void (APIENTRYP GLEEPFNGLUNIFORMMATRIX4DVPROC) (GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value);
+  GLEE_EXTERN GLEEPFNGLUNIFORMMATRIX4DVPROC GLeeFuncPtr_glUniformMatrix4dv;
+  #define glUniformMatrix4dv GLeeFuncPtr_glUniformMatrix4dv
+#endif
+#ifndef GLEE_H_DEFINED_glUniformMatrix2x3dv
+#define GLEE_H_DEFINED_glUniformMatrix2x3dv
+  typedef void (APIENTRYP GLEEPFNGLUNIFORMMATRIX2X3DVPROC) (GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value);
+  GLEE_EXTERN GLEEPFNGLUNIFORMMATRIX2X3DVPROC GLeeFuncPtr_glUniformMatrix2x3dv;
+  #define glUniformMatrix2x3dv GLeeFuncPtr_glUniformMatrix2x3dv
+#endif
+#ifndef GLEE_H_DEFINED_glUniformMatrix2x4dv
+#define GLEE_H_DEFINED_glUniformMatrix2x4dv
+  typedef void (APIENTRYP GLEEPFNGLUNIFORMMATRIX2X4DVPROC) (GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value);
+  GLEE_EXTERN GLEEPFNGLUNIFORMMATRIX2X4DVPROC GLeeFuncPtr_glUniformMatrix2x4dv;
+  #define glUniformMatrix2x4dv GLeeFuncPtr_glUniformMatrix2x4dv
+#endif
+#ifndef GLEE_H_DEFINED_glUniformMatrix3x2dv
+#define GLEE_H_DEFINED_glUniformMatrix3x2dv
+  typedef void (APIENTRYP GLEEPFNGLUNIFORMMATRIX3X2DVPROC) (GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value);
+  GLEE_EXTERN GLEEPFNGLUNIFORMMATRIX3X2DVPROC GLeeFuncPtr_glUniformMatrix3x2dv;
+  #define glUniformMatrix3x2dv GLeeFuncPtr_glUniformMatrix3x2dv
+#endif
+#ifndef GLEE_H_DEFINED_glUniformMatrix3x4dv
+#define GLEE_H_DEFINED_glUniformMatrix3x4dv
+  typedef void (APIENTRYP GLEEPFNGLUNIFORMMATRIX3X4DVPROC) (GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value);
+  GLEE_EXTERN GLEEPFNGLUNIFORMMATRIX3X4DVPROC GLeeFuncPtr_glUniformMatrix3x4dv;
+  #define glUniformMatrix3x4dv GLeeFuncPtr_glUniformMatrix3x4dv
+#endif
+#ifndef GLEE_H_DEFINED_glUniformMatrix4x2dv
+#define GLEE_H_DEFINED_glUniformMatrix4x2dv
+  typedef void (APIENTRYP GLEEPFNGLUNIFORMMATRIX4X2DVPROC) (GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value);
+  GLEE_EXTERN GLEEPFNGLUNIFORMMATRIX4X2DVPROC GLeeFuncPtr_glUniformMatrix4x2dv;
+  #define glUniformMatrix4x2dv GLeeFuncPtr_glUniformMatrix4x2dv
+#endif
+#ifndef GLEE_H_DEFINED_glUniformMatrix4x3dv
+#define GLEE_H_DEFINED_glUniformMatrix4x3dv
+  typedef void (APIENTRYP GLEEPFNGLUNIFORMMATRIX4X3DVPROC) (GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value);
+  GLEE_EXTERN GLEEPFNGLUNIFORMMATRIX4X3DVPROC GLeeFuncPtr_glUniformMatrix4x3dv;
+  #define glUniformMatrix4x3dv GLeeFuncPtr_glUniformMatrix4x3dv
+#endif
+#ifndef GLEE_H_DEFINED_glGetUniformdv
+#define GLEE_H_DEFINED_glGetUniformdv
+  typedef void (APIENTRYP GLEEPFNGLGETUNIFORMDVPROC) (GLuint  program, GLint  location, GLdouble * params);
+  GLEE_EXTERN GLEEPFNGLGETUNIFORMDVPROC GLeeFuncPtr_glGetUniformdv;
+  #define glGetUniformdv GLeeFuncPtr_glGetUniformdv
+#endif
+#endif 
+
+/* GL_ARB_shader_subroutine */
+
+#ifndef GL_ARB_shader_subroutine
+#define GL_ARB_shader_subroutine 1
+#define __GLEE_GL_ARB_shader_subroutine 1
+/* Constants */
+#define GL_ACTIVE_SUBROUTINES                              0x8DE5
+#define GL_ACTIVE_SUBROUTINE_UNIFORMS                      0x8DE6
+#define GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS             0x8E47
+#define GL_ACTIVE_SUBROUTINE_MAX_LENGTH                    0x8E48
+#define GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH            0x8E49
+#define GL_MAX_SUBROUTINES                                 0x8DE7
+#define GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS                0x8DE8
+#define GL_NUM_COMPATIBLE_SUBROUTINES                      0x8E4A
+#define GL_COMPATIBLE_SUBROUTINES                          0x8E4B
+#ifndef GLEE_H_DEFINED_glGetSubroutineUniformLocation
+#define GLEE_H_DEFINED_glGetSubroutineUniformLocation
+  typedef GLint (APIENTRYP GLEEPFNGLGETSUBROUTINEUNIFORMLOCATIONPROC) (GLuint  program, GLenum  shadertype, const GLchar * name);
+  GLEE_EXTERN GLEEPFNGLGETSUBROUTINEUNIFORMLOCATIONPROC GLeeFuncPtr_glGetSubroutineUniformLocation;
+  #define glGetSubroutineUniformLocation GLeeFuncPtr_glGetSubroutineUniformLocation
+#endif
+#ifndef GLEE_H_DEFINED_glGetSubroutineIndex
+#define GLEE_H_DEFINED_glGetSubroutineIndex
+  typedef GLuint (APIENTRYP GLEEPFNGLGETSUBROUTINEINDEXPROC) (GLuint  program, GLenum  shadertype, const GLchar * name);
+  GLEE_EXTERN GLEEPFNGLGETSUBROUTINEINDEXPROC GLeeFuncPtr_glGetSubroutineIndex;
+  #define glGetSubroutineIndex GLeeFuncPtr_glGetSubroutineIndex
+#endif
+#ifndef GLEE_H_DEFINED_glGetActiveSubroutineUniformiv
+#define GLEE_H_DEFINED_glGetActiveSubroutineUniformiv
+  typedef void (APIENTRYP GLEEPFNGLGETACTIVESUBROUTINEUNIFORMIVPROC) (GLuint  program, GLenum  shadertype, GLuint  index, GLenum  pname, GLint * values);
+  GLEE_EXTERN GLEEPFNGLGETACTIVESUBROUTINEUNIFORMIVPROC GLeeFuncPtr_glGetActiveSubroutineUniformiv;
+  #define glGetActiveSubroutineUniformiv GLeeFuncPtr_glGetActiveSubroutineUniformiv
+#endif
+#ifndef GLEE_H_DEFINED_glGetActiveSubroutineUniformName
+#define GLEE_H_DEFINED_glGetActiveSubroutineUniformName
+  typedef void (APIENTRYP GLEEPFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC) (GLuint  program, GLenum  shadertype, GLuint  index, GLsizei  bufsize, GLsizei * length, GLchar * name);
+  GLEE_EXTERN GLEEPFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC GLeeFuncPtr_glGetActiveSubroutineUniformName;
+  #define glGetActiveSubroutineUniformName GLeeFuncPtr_glGetActiveSubroutineUniformName
+#endif
+#ifndef GLEE_H_DEFINED_glGetActiveSubroutineName
+#define GLEE_H_DEFINED_glGetActiveSubroutineName
+  typedef void (APIENTRYP GLEEPFNGLGETACTIVESUBROUTINENAMEPROC) (GLuint  program, GLenum  shadertype, GLuint  index, GLsizei  bufsize, GLsizei * length, GLchar * name);
+  GLEE_EXTERN GLEEPFNGLGETACTIVESUBROUTINENAMEPROC GLeeFuncPtr_glGetActiveSubroutineName;
+  #define glGetActiveSubroutineName GLeeFuncPtr_glGetActiveSubroutineName
+#endif
+#ifndef GLEE_H_DEFINED_glUniformSubroutinesuiv
+#define GLEE_H_DEFINED_glUniformSubroutinesuiv
+  typedef void (APIENTRYP GLEEPFNGLUNIFORMSUBROUTINESUIVPROC) (GLenum  shadertype, GLsizei  count, const GLuint * indices);
+  GLEE_EXTERN GLEEPFNGLUNIFORMSUBROUTINESUIVPROC GLeeFuncPtr_glUniformSubroutinesuiv;
+  #define glUniformSubroutinesuiv GLeeFuncPtr_glUniformSubroutinesuiv
+#endif
+#ifndef GLEE_H_DEFINED_glGetUniformSubroutineuiv
+#define GLEE_H_DEFINED_glGetUniformSubroutineuiv
+  typedef void (APIENTRYP GLEEPFNGLGETUNIFORMSUBROUTINEUIVPROC) (GLenum  shadertype, GLint  location, GLuint * params);
+  GLEE_EXTERN GLEEPFNGLGETUNIFORMSUBROUTINEUIVPROC GLeeFuncPtr_glGetUniformSubroutineuiv;
+  #define glGetUniformSubroutineuiv GLeeFuncPtr_glGetUniformSubroutineuiv
+#endif
+#ifndef GLEE_H_DEFINED_glGetProgramStageiv
+#define GLEE_H_DEFINED_glGetProgramStageiv
+  typedef void (APIENTRYP GLEEPFNGLGETPROGRAMSTAGEIVPROC) (GLuint  program, GLenum  shadertype, GLenum  pname, GLint * values);
+  GLEE_EXTERN GLEEPFNGLGETPROGRAMSTAGEIVPROC GLeeFuncPtr_glGetProgramStageiv;
+  #define glGetProgramStageiv GLeeFuncPtr_glGetProgramStageiv
+#endif
+#endif 
+
+/* GL_ARB_tessellation_shader */
+
+#ifndef GL_ARB_tessellation_shader
+#define GL_ARB_tessellation_shader 1
+#define __GLEE_GL_ARB_tessellation_shader 1
+/* Constants */
+#define GL_PATCHES                                         0x000E
+#define GL_PATCH_VERTICES                                  0x8E72
+#define GL_PATCH_DEFAULT_INNER_LEVEL                       0x8E73
+#define GL_PATCH_DEFAULT_OUTER_LEVEL                       0x8E74
+#define GL_TESS_CONTROL_OUTPUT_VERTICES                    0x8E75
+#define GL_TESS_GEN_MODE                                   0x8E76
+#define GL_TESS_GEN_SPACING                                0x8E77
+#define GL_TESS_GEN_VERTEX_ORDER                           0x8E78
+#define GL_TESS_GEN_POINT_MODE                             0x8E79
+#define GL_ISOLINES                                        0x8E7A
+#define GL_FRACTIONAL_ODD                                  0x8E7B
+#define GL_FRACTIONAL_EVEN                                 0x8E7C
+#define GL_MAX_PATCH_VERTICES                              0x8E7D
+#define GL_MAX_TESS_GEN_LEVEL                              0x8E7E
+#define GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS             0x8E7F
+#define GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS          0x8E80
+#define GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS            0x8E81
+#define GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS         0x8E82
+#define GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS              0x8E83
+#define GL_MAX_TESS_PATCH_COMPONENTS                       0x8E84
+#define GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS        0x8E85
+#define GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS           0x8E86
+#define GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS                 0x8E89
+#define GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS              0x8E8A
+#define GL_MAX_TESS_CONTROL_INPUT_COMPONENTS               0x886C
+#define GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS            0x886D
+#define GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS    0x8E1E
+#define GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS 0x8E1F
+#define GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER 0x84F0
+#define GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER 0x84F1
+#define GL_TESS_EVALUATION_SHADER                          0x8E87
+#define GL_TESS_CONTROL_SHADER                             0x8E88
+#ifndef GLEE_H_DEFINED_glPatchParameteri
+#define GLEE_H_DEFINED_glPatchParameteri
+  typedef void (APIENTRYP GLEEPFNGLPATCHPARAMETERIPROC) (GLenum  pname, GLint  value);
+  GLEE_EXTERN GLEEPFNGLPATCHPARAMETERIPROC GLeeFuncPtr_glPatchParameteri;
+  #define glPatchParameteri GLeeFuncPtr_glPatchParameteri
+#endif
+#ifndef GLEE_H_DEFINED_glPatchParameterfv
+#define GLEE_H_DEFINED_glPatchParameterfv
+  typedef void (APIENTRYP GLEEPFNGLPATCHPARAMETERFVPROC) (GLenum  pname, const GLfloat * values);
+  GLEE_EXTERN GLEEPFNGLPATCHPARAMETERFVPROC GLeeFuncPtr_glPatchParameterfv;
+  #define glPatchParameterfv GLeeFuncPtr_glPatchParameterfv
+#endif
+#endif 
+
+/* GL_ARB_texture_buffer_object_rgb32 */
+
+#ifndef GL_ARB_texture_buffer_object_rgb32
+#define GL_ARB_texture_buffer_object_rgb32 1
+#define __GLEE_GL_ARB_texture_buffer_object_rgb32 1
+/* Constants */
+#endif 
+
+/* GL_ARB_transform_feedback2 */
+
+#ifndef GL_ARB_transform_feedback2
+#define GL_ARB_transform_feedback2 1
+#define __GLEE_GL_ARB_transform_feedback2 1
+/* Constants */
+#define GL_TRANSFORM_FEEDBACK                              0x8E22
+#define GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED                0x8E23
+#define GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE                0x8E24
+#define GL_TRANSFORM_FEEDBACK_BINDING                      0x8E25
+#ifndef GLEE_H_DEFINED_glBindTransformFeedback
+#define GLEE_H_DEFINED_glBindTransformFeedback
+  typedef void (APIENTRYP GLEEPFNGLBINDTRANSFORMFEEDBACKPROC) (GLenum  target, GLuint  id);
+  GLEE_EXTERN GLEEPFNGLBINDTRANSFORMFEEDBACKPROC GLeeFuncPtr_glBindTransformFeedback;
+  #define glBindTransformFeedback GLeeFuncPtr_glBindTransformFeedback
+#endif
+#ifndef GLEE_H_DEFINED_glDeleteTransformFeedbacks
+#define GLEE_H_DEFINED_glDeleteTransformFeedbacks
+  typedef void (APIENTRYP GLEEPFNGLDELETETRANSFORMFEEDBACKSPROC) (GLsizei  n, const GLuint * ids);
+  GLEE_EXTERN GLEEPFNGLDELETETRANSFORMFEEDBACKSPROC GLeeFuncPtr_glDeleteTransformFeedbacks;
+  #define glDeleteTransformFeedbacks GLeeFuncPtr_glDeleteTransformFeedbacks
+#endif
+#ifndef GLEE_H_DEFINED_glGenTransformFeedbacks
+#define GLEE_H_DEFINED_glGenTransformFeedbacks
+  typedef void (APIENTRYP GLEEPFNGLGENTRANSFORMFEEDBACKSPROC) (GLsizei  n, GLuint * ids);
+  GLEE_EXTERN GLEEPFNGLGENTRANSFORMFEEDBACKSPROC GLeeFuncPtr_glGenTransformFeedbacks;
+  #define glGenTransformFeedbacks GLeeFuncPtr_glGenTransformFeedbacks
+#endif
+#ifndef GLEE_H_DEFINED_glIsTransformFeedback
+#define GLEE_H_DEFINED_glIsTransformFeedback
+  typedef GLboolean (APIENTRYP GLEEPFNGLISTRANSFORMFEEDBACKPROC) (GLuint  id);
+  GLEE_EXTERN GLEEPFNGLISTRANSFORMFEEDBACKPROC GLeeFuncPtr_glIsTransformFeedback;
+  #define glIsTransformFeedback GLeeFuncPtr_glIsTransformFeedback
+#endif
+#ifndef GLEE_H_DEFINED_glPauseTransformFeedback
+#define GLEE_H_DEFINED_glPauseTransformFeedback
+  typedef void (APIENTRYP GLEEPFNGLPAUSETRANSFORMFEEDBACKPROC) ();
+  GLEE_EXTERN GLEEPFNGLPAUSETRANSFORMFEEDBACKPROC GLeeFuncPtr_glPauseTransformFeedback;
+  #define glPauseTransformFeedback GLeeFuncPtr_glPauseTransformFeedback
+#endif
+#ifndef GLEE_H_DEFINED_glResumeTransformFeedback
+#define GLEE_H_DEFINED_glResumeTransformFeedback
+  typedef void (APIENTRYP GLEEPFNGLRESUMETRANSFORMFEEDBACKPROC) ();
+  GLEE_EXTERN GLEEPFNGLRESUMETRANSFORMFEEDBACKPROC GLeeFuncPtr_glResumeTransformFeedback;
+  #define glResumeTransformFeedback GLeeFuncPtr_glResumeTransformFeedback
+#endif
+#ifndef GLEE_H_DEFINED_glDrawTransformFeedback
+#define GLEE_H_DEFINED_glDrawTransformFeedback
+  typedef void (APIENTRYP GLEEPFNGLDRAWTRANSFORMFEEDBACKPROC) (GLenum  mode, GLuint  id);
+  GLEE_EXTERN GLEEPFNGLDRAWTRANSFORMFEEDBACKPROC GLeeFuncPtr_glDrawTransformFeedback;
+  #define glDrawTransformFeedback GLeeFuncPtr_glDrawTransformFeedback
+#endif
+#endif 
+
+/* GL_ARB_transform_feedback3 */
+
+#ifndef GL_ARB_transform_feedback3
+#define GL_ARB_transform_feedback3 1
+#define __GLEE_GL_ARB_transform_feedback3 1
+/* Constants */
+#define GL_MAX_TRANSFORM_FEEDBACK_BUFFERS                  0x8E70
+#define GL_MAX_VERTEX_STREAMS                              0x8E71
+#ifndef GLEE_H_DEFINED_glDrawTransformFeedbackStream
+#define GLEE_H_DEFINED_glDrawTransformFeedbackStream
+  typedef void (APIENTRYP GLEEPFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC) (GLenum  mode, GLuint  id, GLuint  stream);
+  GLEE_EXTERN GLEEPFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC GLeeFuncPtr_glDrawTransformFeedbackStream;
+  #define glDrawTransformFeedbackStream GLeeFuncPtr_glDrawTransformFeedbackStream
+#endif
+#ifndef GLEE_H_DEFINED_glBeginQueryIndexed
+#define GLEE_H_DEFINED_glBeginQueryIndexed
+  typedef void (APIENTRYP GLEEPFNGLBEGINQUERYINDEXEDPROC) (GLenum  target, GLuint  index, GLuint  id);
+  GLEE_EXTERN GLEEPFNGLBEGINQUERYINDEXEDPROC GLeeFuncPtr_glBeginQueryIndexed;
+  #define glBeginQueryIndexed GLeeFuncPtr_glBeginQueryIndexed
+#endif
+#ifndef GLEE_H_DEFINED_glEndQueryIndexed
+#define GLEE_H_DEFINED_glEndQueryIndexed
+  typedef void (APIENTRYP GLEEPFNGLENDQUERYINDEXEDPROC) (GLenum  target, GLuint  index);
+  GLEE_EXTERN GLEEPFNGLENDQUERYINDEXEDPROC GLeeFuncPtr_glEndQueryIndexed;
+  #define glEndQueryIndexed GLeeFuncPtr_glEndQueryIndexed
+#endif
+#ifndef GLEE_H_DEFINED_glGetQueryIndexediv
+#define GLEE_H_DEFINED_glGetQueryIndexediv
+  typedef void (APIENTRYP GLEEPFNGLGETQUERYINDEXEDIVPROC) (GLenum  target, GLuint  index, GLenum  pname, GLint * params);
+  GLEE_EXTERN GLEEPFNGLGETQUERYINDEXEDIVPROC GLeeFuncPtr_glGetQueryIndexediv;
+  #define glGetQueryIndexediv GLeeFuncPtr_glGetQueryIndexediv
+#endif
+#endif 
+
+/* GL_ARB_ES2_compatibility */
+
+#ifndef GL_ARB_ES2_compatibility
+#define GL_ARB_ES2_compatibility 1
+#define __GLEE_GL_ARB_ES2_compatibility 1
+/* Constants */
+#define GL_FIXED                                           0x140C
+#define GL_IMPLEMENTATION_COLOR_READ_TYPE                  0x8B9A
+#define GL_IMPLEMENTATION_COLOR_READ_FORMAT                0x8B9B
+#define GL_LOW_FLOAT                                       0x8DF0
+#define GL_MEDIUM_FLOAT                                    0x8DF1
+#define GL_HIGH_FLOAT                                      0x8DF2
+#define GL_LOW_INT                                         0x8DF3
+#define GL_MEDIUM_INT                                      0x8DF4
+#define GL_HIGH_INT                                        0x8DF5
+#define GL_SHADER_COMPILER                                 0x8DFA
+#define GL_NUM_SHADER_BINARY_FORMATS                       0x8DF9
+#define GL_MAX_VERTEX_UNIFORM_VECTORS                      0x8DFB
+#define GL_MAX_VARYING_VECTORS                             0x8DFC
+#define GL_MAX_FRAGMENT_UNIFORM_VECTORS                    0x8DFD
+#ifndef GLEE_H_DEFINED_glReleaseShaderCompiler
+#define GLEE_H_DEFINED_glReleaseShaderCompiler
+  typedef void (APIENTRYP GLEEPFNGLRELEASESHADERCOMPILERPROC) ();
+  GLEE_EXTERN GLEEPFNGLRELEASESHADERCOMPILERPROC GLeeFuncPtr_glReleaseShaderCompiler;
+  #define glReleaseShaderCompiler GLeeFuncPtr_glReleaseShaderCompiler
+#endif
+#ifndef GLEE_H_DEFINED_glShaderBinary
+#define GLEE_H_DEFINED_glShaderBinary
+  typedef void (APIENTRYP GLEEPFNGLSHADERBINARYPROC) (GLsizei  count, const GLuint * shaders, GLenum  binaryformat, const GLvoid * binary, GLsizei  length);
+  GLEE_EXTERN GLEEPFNGLSHADERBINARYPROC GLeeFuncPtr_glShaderBinary;
+  #define glShaderBinary GLeeFuncPtr_glShaderBinary
+#endif
+#ifndef GLEE_H_DEFINED_glGetShaderPrecisionFormat
+#define GLEE_H_DEFINED_glGetShaderPrecisionFormat
+  typedef void (APIENTRYP GLEEPFNGLGETSHADERPRECISIONFORMATPROC) (GLenum  shadertype, GLenum  precisiontype, GLint * range, GLint * precision);
+  GLEE_EXTERN GLEEPFNGLGETSHADERPRECISIONFORMATPROC GLeeFuncPtr_glGetShaderPrecisionFormat;
+  #define glGetShaderPrecisionFormat GLeeFuncPtr_glGetShaderPrecisionFormat
+#endif
+#ifndef GLEE_H_DEFINED_glDepthRangef
+#define GLEE_H_DEFINED_glDepthRangef
+  typedef void (APIENTRYP GLEEPFNGLDEPTHRANGEFPROC) (GLclampf  n, GLclampf  f);
+  GLEE_EXTERN GLEEPFNGLDEPTHRANGEFPROC GLeeFuncPtr_glDepthRangef;
+  #define glDepthRangef GLeeFuncPtr_glDepthRangef
+#endif
+#ifndef GLEE_H_DEFINED_glClearDepthf
+#define GLEE_H_DEFINED_glClearDepthf
+  typedef void (APIENTRYP GLEEPFNGLCLEARDEPTHFPROC) (GLclampf  d);
+  GLEE_EXTERN GLEEPFNGLCLEARDEPTHFPROC GLeeFuncPtr_glClearDepthf;
+  #define glClearDepthf GLeeFuncPtr_glClearDepthf
+#endif
+#endif 
+
+/* GL_ARB_get_program_binary */
+
+#ifndef GL_ARB_get_program_binary
+#define GL_ARB_get_program_binary 1
+#define __GLEE_GL_ARB_get_program_binary 1
+/* Constants */
+#define GL_PROGRAM_BINARY_RETRIEVABLE_HINT                 0x8257
+#define GL_PROGRAM_BINARY_LENGTH                           0x8741
+#define GL_NUM_PROGRAM_BINARY_FORMATS                      0x87FE
+#define GL_PROGRAM_BINARY_FORMATS                          0x87FF
+#ifndef GLEE_H_DEFINED_glGetProgramBinary
+#define GLEE_H_DEFINED_glGetProgramBinary
+  typedef void (APIENTRYP GLEEPFNGLGETPROGRAMBINARYPROC) (GLuint  program, GLsizei  bufSize, GLsizei * length, GLenum * binaryFormat, GLvoid * binary);
+  GLEE_EXTERN GLEEPFNGLGETPROGRAMBINARYPROC GLeeFuncPtr_glGetProgramBinary;
+  #define glGetProgramBinary GLeeFuncPtr_glGetProgramBinary
+#endif
+#ifndef GLEE_H_DEFINED_glProgramBinary
+#define GLEE_H_DEFINED_glProgramBinary
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMBINARYPROC) (GLuint  program, GLenum  binaryFormat, const GLvoid * binary, GLsizei  length);
+  GLEE_EXTERN GLEEPFNGLPROGRAMBINARYPROC GLeeFuncPtr_glProgramBinary;
+  #define glProgramBinary GLeeFuncPtr_glProgramBinary
+#endif
+#ifndef GLEE_H_DEFINED_glProgramParameteri
+#define GLEE_H_DEFINED_glProgramParameteri
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMPARAMETERIPROC) (GLuint  program, GLenum  pname, GLint  value);
+  GLEE_EXTERN GLEEPFNGLPROGRAMPARAMETERIPROC GLeeFuncPtr_glProgramParameteri;
+  #define glProgramParameteri GLeeFuncPtr_glProgramParameteri
+#endif
+#endif 
+
+/* GL_ARB_separate_shader_objects */
+
+#ifndef GL_ARB_separate_shader_objects
+#define GL_ARB_separate_shader_objects 1
+#define __GLEE_GL_ARB_separate_shader_objects 1
+/* Constants */
+#define GL_VERTEX_SHADER_BIT                               0x00000001
+#define GL_FRAGMENT_SHADER_BIT                             0x00000002
+#define GL_GEOMETRY_SHADER_BIT                             0x00000004
+#define GL_TESS_CONTROL_SHADER_BIT                         0x00000008
+#define GL_TESS_EVALUATION_SHADER_BIT                      0x00000010
+#define GL_ALL_SHADER_BITS                                 0xFFFFFFFF
+#define GL_PROGRAM_SEPARABLE                               0x8258
+#define GL_ACTIVE_PROGRAM                                  0x8259
+#define GL_PROGRAM_PIPELINE_BINDING                        0x825A
+#ifndef GLEE_H_DEFINED_glUseProgramStages
+#define GLEE_H_DEFINED_glUseProgramStages
+  typedef void (APIENTRYP GLEEPFNGLUSEPROGRAMSTAGESPROC) (GLuint  pipeline, GLbitfield  stages, GLuint  program);
+  GLEE_EXTERN GLEEPFNGLUSEPROGRAMSTAGESPROC GLeeFuncPtr_glUseProgramStages;
+  #define glUseProgramStages GLeeFuncPtr_glUseProgramStages
+#endif
+#ifndef GLEE_H_DEFINED_glActiveShaderProgram
+#define GLEE_H_DEFINED_glActiveShaderProgram
+  typedef void (APIENTRYP GLEEPFNGLACTIVESHADERPROGRAMPROC) (GLuint  pipeline, GLuint  program);
+  GLEE_EXTERN GLEEPFNGLACTIVESHADERPROGRAMPROC GLeeFuncPtr_glActiveShaderProgram;
+  #define glActiveShaderProgram GLeeFuncPtr_glActiveShaderProgram
+#endif
+#ifndef GLEE_H_DEFINED_glCreateShaderProgramv
+#define GLEE_H_DEFINED_glCreateShaderProgramv
+  typedef GLuint (APIENTRYP GLEEPFNGLCREATESHADERPROGRAMVPROC) (GLenum  type, GLsizei  count, const GLchar* * strings);
+  GLEE_EXTERN GLEEPFNGLCREATESHADERPROGRAMVPROC GLeeFuncPtr_glCreateShaderProgramv;
+  #define glCreateShaderProgramv GLeeFuncPtr_glCreateShaderProgramv
+#endif
+#ifndef GLEE_H_DEFINED_glBindProgramPipeline
+#define GLEE_H_DEFINED_glBindProgramPipeline
+  typedef void (APIENTRYP GLEEPFNGLBINDPROGRAMPIPELINEPROC) (GLuint  pipeline);
+  GLEE_EXTERN GLEEPFNGLBINDPROGRAMPIPELINEPROC GLeeFuncPtr_glBindProgramPipeline;
+  #define glBindProgramPipeline GLeeFuncPtr_glBindProgramPipeline
+#endif
+#ifndef GLEE_H_DEFINED_glDeleteProgramPipelines
+#define GLEE_H_DEFINED_glDeleteProgramPipelines
+  typedef void (APIENTRYP GLEEPFNGLDELETEPROGRAMPIPELINESPROC) (GLsizei  n, const GLuint * pipelines);
+  GLEE_EXTERN GLEEPFNGLDELETEPROGRAMPIPELINESPROC GLeeFuncPtr_glDeleteProgramPipelines;
+  #define glDeleteProgramPipelines GLeeFuncPtr_glDeleteProgramPipelines
+#endif
+#ifndef GLEE_H_DEFINED_glGenProgramPipelines
+#define GLEE_H_DEFINED_glGenProgramPipelines
+  typedef void (APIENTRYP GLEEPFNGLGENPROGRAMPIPELINESPROC) (GLsizei  n, GLuint * pipelines);
+  GLEE_EXTERN GLEEPFNGLGENPROGRAMPIPELINESPROC GLeeFuncPtr_glGenProgramPipelines;
+  #define glGenProgramPipelines GLeeFuncPtr_glGenProgramPipelines
+#endif
+#ifndef GLEE_H_DEFINED_glIsProgramPipeline
+#define GLEE_H_DEFINED_glIsProgramPipeline
+  typedef GLboolean (APIENTRYP GLEEPFNGLISPROGRAMPIPELINEPROC) (GLuint  pipeline);
+  GLEE_EXTERN GLEEPFNGLISPROGRAMPIPELINEPROC GLeeFuncPtr_glIsProgramPipeline;
+  #define glIsProgramPipeline GLeeFuncPtr_glIsProgramPipeline
+#endif
+#ifndef GLEE_H_DEFINED_glGetProgramPipelineiv
+#define GLEE_H_DEFINED_glGetProgramPipelineiv
+  typedef void (APIENTRYP GLEEPFNGLGETPROGRAMPIPELINEIVPROC) (GLuint  pipeline, GLenum  pname, GLint * params);
+  GLEE_EXTERN GLEEPFNGLGETPROGRAMPIPELINEIVPROC GLeeFuncPtr_glGetProgramPipelineiv;
+  #define glGetProgramPipelineiv GLeeFuncPtr_glGetProgramPipelineiv
+#endif
+#ifndef GLEE_H_DEFINED_glProgramUniform1i
+#define GLEE_H_DEFINED_glProgramUniform1i
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMUNIFORM1IPROC) (GLuint  program, GLint  location, GLint  v0);
+  GLEE_EXTERN GLEEPFNGLPROGRAMUNIFORM1IPROC GLeeFuncPtr_glProgramUniform1i;
+  #define glProgramUniform1i GLeeFuncPtr_glProgramUniform1i
+#endif
+#ifndef GLEE_H_DEFINED_glProgramUniform1iv
+#define GLEE_H_DEFINED_glProgramUniform1iv
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMUNIFORM1IVPROC) (GLuint  program, GLint  location, GLsizei  count, const GLint * value);
+  GLEE_EXTERN GLEEPFNGLPROGRAMUNIFORM1IVPROC GLeeFuncPtr_glProgramUniform1iv;
+  #define glProgramUniform1iv GLeeFuncPtr_glProgramUniform1iv
+#endif
+#ifndef GLEE_H_DEFINED_glProgramUniform1f
+#define GLEE_H_DEFINED_glProgramUniform1f
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMUNIFORM1FPROC) (GLuint  program, GLint  location, GLfloat  v0);
+  GLEE_EXTERN GLEEPFNGLPROGRAMUNIFORM1FPROC GLeeFuncPtr_glProgramUniform1f;
+  #define glProgramUniform1f GLeeFuncPtr_glProgramUniform1f
+#endif
+#ifndef GLEE_H_DEFINED_glProgramUniform1fv
+#define GLEE_H_DEFINED_glProgramUniform1fv
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMUNIFORM1FVPROC) (GLuint  program, GLint  location, GLsizei  count, const GLfloat * value);
+  GLEE_EXTERN GLEEPFNGLPROGRAMUNIFORM1FVPROC GLeeFuncPtr_glProgramUniform1fv;
+  #define glProgramUniform1fv GLeeFuncPtr_glProgramUniform1fv
+#endif
+#ifndef GLEE_H_DEFINED_glProgramUniform1d
+#define GLEE_H_DEFINED_glProgramUniform1d
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMUNIFORM1DPROC) (GLuint  program, GLint  location, GLdouble  v0);
+  GLEE_EXTERN GLEEPFNGLPROGRAMUNIFORM1DPROC GLeeFuncPtr_glProgramUniform1d;
+  #define glProgramUniform1d GLeeFuncPtr_glProgramUniform1d
+#endif
+#ifndef GLEE_H_DEFINED_glProgramUniform1dv
+#define GLEE_H_DEFINED_glProgramUniform1dv
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMUNIFORM1DVPROC) (GLuint  program, GLint  location, GLsizei  count, const GLdouble * value);
+  GLEE_EXTERN GLEEPFNGLPROGRAMUNIFORM1DVPROC GLeeFuncPtr_glProgramUniform1dv;
+  #define glProgramUniform1dv GLeeFuncPtr_glProgramUniform1dv
+#endif
+#ifndef GLEE_H_DEFINED_glProgramUniform1ui
+#define GLEE_H_DEFINED_glProgramUniform1ui
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMUNIFORM1UIPROC) (GLuint  program, GLint  location, GLuint  v0);
+  GLEE_EXTERN GLEEPFNGLPROGRAMUNIFORM1UIPROC GLeeFuncPtr_glProgramUniform1ui;
+  #define glProgramUniform1ui GLeeFuncPtr_glProgramUniform1ui
+#endif
+#ifndef GLEE_H_DEFINED_glProgramUniform1uiv
+#define GLEE_H_DEFINED_glProgramUniform1uiv
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMUNIFORM1UIVPROC) (GLuint  program, GLint  location, GLsizei  count, const GLuint * value);
+  GLEE_EXTERN GLEEPFNGLPROGRAMUNIFORM1UIVPROC GLeeFuncPtr_glProgramUniform1uiv;
+  #define glProgramUniform1uiv GLeeFuncPtr_glProgramUniform1uiv
+#endif
+#ifndef GLEE_H_DEFINED_glProgramUniform2i
+#define GLEE_H_DEFINED_glProgramUniform2i
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMUNIFORM2IPROC) (GLuint  program, GLint  location, GLint  v0, GLint  v1);
+  GLEE_EXTERN GLEEPFNGLPROGRAMUNIFORM2IPROC GLeeFuncPtr_glProgramUniform2i;
+  #define glProgramUniform2i GLeeFuncPtr_glProgramUniform2i
+#endif
+#ifndef GLEE_H_DEFINED_glProgramUniform2iv
+#define GLEE_H_DEFINED_glProgramUniform2iv
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMUNIFORM2IVPROC) (GLuint  program, GLint  location, GLsizei  count, const GLint * value);
+  GLEE_EXTERN GLEEPFNGLPROGRAMUNIFORM2IVPROC GLeeFuncPtr_glProgramUniform2iv;
+  #define glProgramUniform2iv GLeeFuncPtr_glProgramUniform2iv
+#endif
+#ifndef GLEE_H_DEFINED_glProgramUniform2f
+#define GLEE_H_DEFINED_glProgramUniform2f
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMUNIFORM2FPROC) (GLuint  program, GLint  location, GLfloat  v0, GLfloat  v1);
+  GLEE_EXTERN GLEEPFNGLPROGRAMUNIFORM2FPROC GLeeFuncPtr_glProgramUniform2f;
+  #define glProgramUniform2f GLeeFuncPtr_glProgramUniform2f
+#endif
+#ifndef GLEE_H_DEFINED_glProgramUniform2fv
+#define GLEE_H_DEFINED_glProgramUniform2fv
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMUNIFORM2FVPROC) (GLuint  program, GLint  location, GLsizei  count, const GLfloat * value);
+  GLEE_EXTERN GLEEPFNGLPROGRAMUNIFORM2FVPROC GLeeFuncPtr_glProgramUniform2fv;
+  #define glProgramUniform2fv GLeeFuncPtr_glProgramUniform2fv
+#endif
+#ifndef GLEE_H_DEFINED_glProgramUniform2d
+#define GLEE_H_DEFINED_glProgramUniform2d
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMUNIFORM2DPROC) (GLuint  program, GLint  location, GLdouble  v0, GLdouble  v1);
+  GLEE_EXTERN GLEEPFNGLPROGRAMUNIFORM2DPROC GLeeFuncPtr_glProgramUniform2d;
+  #define glProgramUniform2d GLeeFuncPtr_glProgramUniform2d
+#endif
+#ifndef GLEE_H_DEFINED_glProgramUniform2dv
+#define GLEE_H_DEFINED_glProgramUniform2dv
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMUNIFORM2DVPROC) (GLuint  program, GLint  location, GLsizei  count, const GLdouble * value);
+  GLEE_EXTERN GLEEPFNGLPROGRAMUNIFORM2DVPROC GLeeFuncPtr_glProgramUniform2dv;
+  #define glProgramUniform2dv GLeeFuncPtr_glProgramUniform2dv
+#endif
+#ifndef GLEE_H_DEFINED_glProgramUniform2ui
+#define GLEE_H_DEFINED_glProgramUniform2ui
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMUNIFORM2UIPROC) (GLuint  program, GLint  location, GLuint  v0, GLuint  v1);
+  GLEE_EXTERN GLEEPFNGLPROGRAMUNIFORM2UIPROC GLeeFuncPtr_glProgramUniform2ui;
+  #define glProgramUniform2ui GLeeFuncPtr_glProgramUniform2ui
+#endif
+#ifndef GLEE_H_DEFINED_glProgramUniform2uiv
+#define GLEE_H_DEFINED_glProgramUniform2uiv
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMUNIFORM2UIVPROC) (GLuint  program, GLint  location, GLsizei  count, const GLuint * value);
+  GLEE_EXTERN GLEEPFNGLPROGRAMUNIFORM2UIVPROC GLeeFuncPtr_glProgramUniform2uiv;
+  #define glProgramUniform2uiv GLeeFuncPtr_glProgramUniform2uiv
+#endif
+#ifndef GLEE_H_DEFINED_glProgramUniform3i
+#define GLEE_H_DEFINED_glProgramUniform3i
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMUNIFORM3IPROC) (GLuint  program, GLint  location, GLint  v0, GLint  v1, GLint  v2);
+  GLEE_EXTERN GLEEPFNGLPROGRAMUNIFORM3IPROC GLeeFuncPtr_glProgramUniform3i;
+  #define glProgramUniform3i GLeeFuncPtr_glProgramUniform3i
+#endif
+#ifndef GLEE_H_DEFINED_glProgramUniform3iv
+#define GLEE_H_DEFINED_glProgramUniform3iv
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMUNIFORM3IVPROC) (GLuint  program, GLint  location, GLsizei  count, const GLint * value);
+  GLEE_EXTERN GLEEPFNGLPROGRAMUNIFORM3IVPROC GLeeFuncPtr_glProgramUniform3iv;
+  #define glProgramUniform3iv GLeeFuncPtr_glProgramUniform3iv
+#endif
+#ifndef GLEE_H_DEFINED_glProgramUniform3f
+#define GLEE_H_DEFINED_glProgramUniform3f
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMUNIFORM3FPROC) (GLuint  program, GLint  location, GLfloat  v0, GLfloat  v1, GLfloat  v2);
+  GLEE_EXTERN GLEEPFNGLPROGRAMUNIFORM3FPROC GLeeFuncPtr_glProgramUniform3f;
+  #define glProgramUniform3f GLeeFuncPtr_glProgramUniform3f
+#endif
+#ifndef GLEE_H_DEFINED_glProgramUniform3fv
+#define GLEE_H_DEFINED_glProgramUniform3fv
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMUNIFORM3FVPROC) (GLuint  program, GLint  location, GLsizei  count, const GLfloat * value);
+  GLEE_EXTERN GLEEPFNGLPROGRAMUNIFORM3FVPROC GLeeFuncPtr_glProgramUniform3fv;
+  #define glProgramUniform3fv GLeeFuncPtr_glProgramUniform3fv
+#endif
+#ifndef GLEE_H_DEFINED_glProgramUniform3d
+#define GLEE_H_DEFINED_glProgramUniform3d
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMUNIFORM3DPROC) (GLuint  program, GLint  location, GLdouble  v0, GLdouble  v1, GLdouble  v2);
+  GLEE_EXTERN GLEEPFNGLPROGRAMUNIFORM3DPROC GLeeFuncPtr_glProgramUniform3d;
+  #define glProgramUniform3d GLeeFuncPtr_glProgramUniform3d
+#endif
+#ifndef GLEE_H_DEFINED_glProgramUniform3dv
+#define GLEE_H_DEFINED_glProgramUniform3dv
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMUNIFORM3DVPROC) (GLuint  program, GLint  location, GLsizei  count, const GLdouble * value);
+  GLEE_EXTERN GLEEPFNGLPROGRAMUNIFORM3DVPROC GLeeFuncPtr_glProgramUniform3dv;
+  #define glProgramUniform3dv GLeeFuncPtr_glProgramUniform3dv
+#endif
+#ifndef GLEE_H_DEFINED_glProgramUniform3ui
+#define GLEE_H_DEFINED_glProgramUniform3ui
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMUNIFORM3UIPROC) (GLuint  program, GLint  location, GLuint  v0, GLuint  v1, GLuint  v2);
+  GLEE_EXTERN GLEEPFNGLPROGRAMUNIFORM3UIPROC GLeeFuncPtr_glProgramUniform3ui;
+  #define glProgramUniform3ui GLeeFuncPtr_glProgramUniform3ui
+#endif
+#ifndef GLEE_H_DEFINED_glProgramUniform3uiv
+#define GLEE_H_DEFINED_glProgramUniform3uiv
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMUNIFORM3UIVPROC) (GLuint  program, GLint  location, GLsizei  count, const GLuint * value);
+  GLEE_EXTERN GLEEPFNGLPROGRAMUNIFORM3UIVPROC GLeeFuncPtr_glProgramUniform3uiv;
+  #define glProgramUniform3uiv GLeeFuncPtr_glProgramUniform3uiv
+#endif
+#ifndef GLEE_H_DEFINED_glProgramUniform4i
+#define GLEE_H_DEFINED_glProgramUniform4i
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMUNIFORM4IPROC) (GLuint  program, GLint  location, GLint  v0, GLint  v1, GLint  v2, GLint  v3);
+  GLEE_EXTERN GLEEPFNGLPROGRAMUNIFORM4IPROC GLeeFuncPtr_glProgramUniform4i;
+  #define glProgramUniform4i GLeeFuncPtr_glProgramUniform4i
+#endif
+#ifndef GLEE_H_DEFINED_glProgramUniform4iv
+#define GLEE_H_DEFINED_glProgramUniform4iv
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMUNIFORM4IVPROC) (GLuint  program, GLint  location, GLsizei  count, const GLint * value);
+  GLEE_EXTERN GLEEPFNGLPROGRAMUNIFORM4IVPROC GLeeFuncPtr_glProgramUniform4iv;
+  #define glProgramUniform4iv GLeeFuncPtr_glProgramUniform4iv
+#endif
+#ifndef GLEE_H_DEFINED_glProgramUniform4f
+#define GLEE_H_DEFINED_glProgramUniform4f
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMUNIFORM4FPROC) (GLuint  program, GLint  location, GLfloat  v0, GLfloat  v1, GLfloat  v2, GLfloat  v3);
+  GLEE_EXTERN GLEEPFNGLPROGRAMUNIFORM4FPROC GLeeFuncPtr_glProgramUniform4f;
+  #define glProgramUniform4f GLeeFuncPtr_glProgramUniform4f
+#endif
+#ifndef GLEE_H_DEFINED_glProgramUniform4fv
+#define GLEE_H_DEFINED_glProgramUniform4fv
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMUNIFORM4FVPROC) (GLuint  program, GLint  location, GLsizei  count, const GLfloat * value);
+  GLEE_EXTERN GLEEPFNGLPROGRAMUNIFORM4FVPROC GLeeFuncPtr_glProgramUniform4fv;
+  #define glProgramUniform4fv GLeeFuncPtr_glProgramUniform4fv
+#endif
+#ifndef GLEE_H_DEFINED_glProgramUniform4d
+#define GLEE_H_DEFINED_glProgramUniform4d
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMUNIFORM4DPROC) (GLuint  program, GLint  location, GLdouble  v0, GLdouble  v1, GLdouble  v2, GLdouble  v3);
+  GLEE_EXTERN GLEEPFNGLPROGRAMUNIFORM4DPROC GLeeFuncPtr_glProgramUniform4d;
+  #define glProgramUniform4d GLeeFuncPtr_glProgramUniform4d
+#endif
+#ifndef GLEE_H_DEFINED_glProgramUniform4dv
+#define GLEE_H_DEFINED_glProgramUniform4dv
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMUNIFORM4DVPROC) (GLuint  program, GLint  location, GLsizei  count, const GLdouble * value);
+  GLEE_EXTERN GLEEPFNGLPROGRAMUNIFORM4DVPROC GLeeFuncPtr_glProgramUniform4dv;
+  #define glProgramUniform4dv GLeeFuncPtr_glProgramUniform4dv
+#endif
+#ifndef GLEE_H_DEFINED_glProgramUniform4ui
+#define GLEE_H_DEFINED_glProgramUniform4ui
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMUNIFORM4UIPROC) (GLuint  program, GLint  location, GLuint  v0, GLuint  v1, GLuint  v2, GLuint  v3);
+  GLEE_EXTERN GLEEPFNGLPROGRAMUNIFORM4UIPROC GLeeFuncPtr_glProgramUniform4ui;
+  #define glProgramUniform4ui GLeeFuncPtr_glProgramUniform4ui
+#endif
+#ifndef GLEE_H_DEFINED_glProgramUniform4uiv
+#define GLEE_H_DEFINED_glProgramUniform4uiv
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMUNIFORM4UIVPROC) (GLuint  program, GLint  location, GLsizei  count, const GLuint * value);
+  GLEE_EXTERN GLEEPFNGLPROGRAMUNIFORM4UIVPROC GLeeFuncPtr_glProgramUniform4uiv;
+  #define glProgramUniform4uiv GLeeFuncPtr_glProgramUniform4uiv
+#endif
+#ifndef GLEE_H_DEFINED_glProgramUniformMatrix2fv
+#define GLEE_H_DEFINED_glProgramUniformMatrix2fv
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMUNIFORMMATRIX2FVPROC) (GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value);
+  GLEE_EXTERN GLEEPFNGLPROGRAMUNIFORMMATRIX2FVPROC GLeeFuncPtr_glProgramUniformMatrix2fv;
+  #define glProgramUniformMatrix2fv GLeeFuncPtr_glProgramUniformMatrix2fv
+#endif
+#ifndef GLEE_H_DEFINED_glProgramUniformMatrix3fv
+#define GLEE_H_DEFINED_glProgramUniformMatrix3fv
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMUNIFORMMATRIX3FVPROC) (GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value);
+  GLEE_EXTERN GLEEPFNGLPROGRAMUNIFORMMATRIX3FVPROC GLeeFuncPtr_glProgramUniformMatrix3fv;
+  #define glProgramUniformMatrix3fv GLeeFuncPtr_glProgramUniformMatrix3fv
+#endif
+#ifndef GLEE_H_DEFINED_glProgramUniformMatrix4fv
+#define GLEE_H_DEFINED_glProgramUniformMatrix4fv
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMUNIFORMMATRIX4FVPROC) (GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value);
+  GLEE_EXTERN GLEEPFNGLPROGRAMUNIFORMMATRIX4FVPROC GLeeFuncPtr_glProgramUniformMatrix4fv;
+  #define glProgramUniformMatrix4fv GLeeFuncPtr_glProgramUniformMatrix4fv
+#endif
+#ifndef GLEE_H_DEFINED_glProgramUniformMatrix2dv
+#define GLEE_H_DEFINED_glProgramUniformMatrix2dv
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMUNIFORMMATRIX2DVPROC) (GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value);
+  GLEE_EXTERN GLEEPFNGLPROGRAMUNIFORMMATRIX2DVPROC GLeeFuncPtr_glProgramUniformMatrix2dv;
+  #define glProgramUniformMatrix2dv GLeeFuncPtr_glProgramUniformMatrix2dv
+#endif
+#ifndef GLEE_H_DEFINED_glProgramUniformMatrix3dv
+#define GLEE_H_DEFINED_glProgramUniformMatrix3dv
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMUNIFORMMATRIX3DVPROC) (GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value);
+  GLEE_EXTERN GLEEPFNGLPROGRAMUNIFORMMATRIX3DVPROC GLeeFuncPtr_glProgramUniformMatrix3dv;
+  #define glProgramUniformMatrix3dv GLeeFuncPtr_glProgramUniformMatrix3dv
+#endif
+#ifndef GLEE_H_DEFINED_glProgramUniformMatrix4dv
+#define GLEE_H_DEFINED_glProgramUniformMatrix4dv
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMUNIFORMMATRIX4DVPROC) (GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value);
+  GLEE_EXTERN GLEEPFNGLPROGRAMUNIFORMMATRIX4DVPROC GLeeFuncPtr_glProgramUniformMatrix4dv;
+  #define glProgramUniformMatrix4dv GLeeFuncPtr_glProgramUniformMatrix4dv
+#endif
+#ifndef GLEE_H_DEFINED_glProgramUniformMatrix2x3fv
+#define GLEE_H_DEFINED_glProgramUniformMatrix2x3fv
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMUNIFORMMATRIX2X3FVPROC) (GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value);
+  GLEE_EXTERN GLEEPFNGLPROGRAMUNIFORMMATRIX2X3FVPROC GLeeFuncPtr_glProgramUniformMatrix2x3fv;
+  #define glProgramUniformMatrix2x3fv GLeeFuncPtr_glProgramUniformMatrix2x3fv
+#endif
+#ifndef GLEE_H_DEFINED_glProgramUniformMatrix3x2fv
+#define GLEE_H_DEFINED_glProgramUniformMatrix3x2fv
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMUNIFORMMATRIX3X2FVPROC) (GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value);
+  GLEE_EXTERN GLEEPFNGLPROGRAMUNIFORMMATRIX3X2FVPROC GLeeFuncPtr_glProgramUniformMatrix3x2fv;
+  #define glProgramUniformMatrix3x2fv GLeeFuncPtr_glProgramUniformMatrix3x2fv
+#endif
+#ifndef GLEE_H_DEFINED_glProgramUniformMatrix2x4fv
+#define GLEE_H_DEFINED_glProgramUniformMatrix2x4fv
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMUNIFORMMATRIX2X4FVPROC) (GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value);
+  GLEE_EXTERN GLEEPFNGLPROGRAMUNIFORMMATRIX2X4FVPROC GLeeFuncPtr_glProgramUniformMatrix2x4fv;
+  #define glProgramUniformMatrix2x4fv GLeeFuncPtr_glProgramUniformMatrix2x4fv
+#endif
+#ifndef GLEE_H_DEFINED_glProgramUniformMatrix4x2fv
+#define GLEE_H_DEFINED_glProgramUniformMatrix4x2fv
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMUNIFORMMATRIX4X2FVPROC) (GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value);
+  GLEE_EXTERN GLEEPFNGLPROGRAMUNIFORMMATRIX4X2FVPROC GLeeFuncPtr_glProgramUniformMatrix4x2fv;
+  #define glProgramUniformMatrix4x2fv GLeeFuncPtr_glProgramUniformMatrix4x2fv
+#endif
+#ifndef GLEE_H_DEFINED_glProgramUniformMatrix3x4fv
+#define GLEE_H_DEFINED_glProgramUniformMatrix3x4fv
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMUNIFORMMATRIX3X4FVPROC) (GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value);
+  GLEE_EXTERN GLEEPFNGLPROGRAMUNIFORMMATRIX3X4FVPROC GLeeFuncPtr_glProgramUniformMatrix3x4fv;
+  #define glProgramUniformMatrix3x4fv GLeeFuncPtr_glProgramUniformMatrix3x4fv
+#endif
+#ifndef GLEE_H_DEFINED_glProgramUniformMatrix4x3fv
+#define GLEE_H_DEFINED_glProgramUniformMatrix4x3fv
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMUNIFORMMATRIX4X3FVPROC) (GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value);
+  GLEE_EXTERN GLEEPFNGLPROGRAMUNIFORMMATRIX4X3FVPROC GLeeFuncPtr_glProgramUniformMatrix4x3fv;
+  #define glProgramUniformMatrix4x3fv GLeeFuncPtr_glProgramUniformMatrix4x3fv
+#endif
+#ifndef GLEE_H_DEFINED_glProgramUniformMatrix2x3dv
+#define GLEE_H_DEFINED_glProgramUniformMatrix2x3dv
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMUNIFORMMATRIX2X3DVPROC) (GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value);
+  GLEE_EXTERN GLEEPFNGLPROGRAMUNIFORMMATRIX2X3DVPROC GLeeFuncPtr_glProgramUniformMatrix2x3dv;
+  #define glProgramUniformMatrix2x3dv GLeeFuncPtr_glProgramUniformMatrix2x3dv
+#endif
+#ifndef GLEE_H_DEFINED_glProgramUniformMatrix3x2dv
+#define GLEE_H_DEFINED_glProgramUniformMatrix3x2dv
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMUNIFORMMATRIX3X2DVPROC) (GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value);
+  GLEE_EXTERN GLEEPFNGLPROGRAMUNIFORMMATRIX3X2DVPROC GLeeFuncPtr_glProgramUniformMatrix3x2dv;
+  #define glProgramUniformMatrix3x2dv GLeeFuncPtr_glProgramUniformMatrix3x2dv
+#endif
+#ifndef GLEE_H_DEFINED_glProgramUniformMatrix2x4dv
+#define GLEE_H_DEFINED_glProgramUniformMatrix2x4dv
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMUNIFORMMATRIX2X4DVPROC) (GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value);
+  GLEE_EXTERN GLEEPFNGLPROGRAMUNIFORMMATRIX2X4DVPROC GLeeFuncPtr_glProgramUniformMatrix2x4dv;
+  #define glProgramUniformMatrix2x4dv GLeeFuncPtr_glProgramUniformMatrix2x4dv
+#endif
+#ifndef GLEE_H_DEFINED_glProgramUniformMatrix4x2dv
+#define GLEE_H_DEFINED_glProgramUniformMatrix4x2dv
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMUNIFORMMATRIX4X2DVPROC) (GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value);
+  GLEE_EXTERN GLEEPFNGLPROGRAMUNIFORMMATRIX4X2DVPROC GLeeFuncPtr_glProgramUniformMatrix4x2dv;
+  #define glProgramUniformMatrix4x2dv GLeeFuncPtr_glProgramUniformMatrix4x2dv
+#endif
+#ifndef GLEE_H_DEFINED_glProgramUniformMatrix3x4dv
+#define GLEE_H_DEFINED_glProgramUniformMatrix3x4dv
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMUNIFORMMATRIX3X4DVPROC) (GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value);
+  GLEE_EXTERN GLEEPFNGLPROGRAMUNIFORMMATRIX3X4DVPROC GLeeFuncPtr_glProgramUniformMatrix3x4dv;
+  #define glProgramUniformMatrix3x4dv GLeeFuncPtr_glProgramUniformMatrix3x4dv
+#endif
+#ifndef GLEE_H_DEFINED_glProgramUniformMatrix4x3dv
+#define GLEE_H_DEFINED_glProgramUniformMatrix4x3dv
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMUNIFORMMATRIX4X3DVPROC) (GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value);
+  GLEE_EXTERN GLEEPFNGLPROGRAMUNIFORMMATRIX4X3DVPROC GLeeFuncPtr_glProgramUniformMatrix4x3dv;
+  #define glProgramUniformMatrix4x3dv GLeeFuncPtr_glProgramUniformMatrix4x3dv
+#endif
+#ifndef GLEE_H_DEFINED_glValidateProgramPipeline
+#define GLEE_H_DEFINED_glValidateProgramPipeline
+  typedef void (APIENTRYP GLEEPFNGLVALIDATEPROGRAMPIPELINEPROC) (GLuint  pipeline);
+  GLEE_EXTERN GLEEPFNGLVALIDATEPROGRAMPIPELINEPROC GLeeFuncPtr_glValidateProgramPipeline;
+  #define glValidateProgramPipeline GLeeFuncPtr_glValidateProgramPipeline
+#endif
+#ifndef GLEE_H_DEFINED_glGetProgramPipelineInfoLog
+#define GLEE_H_DEFINED_glGetProgramPipelineInfoLog
+  typedef void (APIENTRYP GLEEPFNGLGETPROGRAMPIPELINEINFOLOGPROC) (GLuint  pipeline, GLsizei  bufSize, GLsizei * length, GLchar * infoLog);
+  GLEE_EXTERN GLEEPFNGLGETPROGRAMPIPELINEINFOLOGPROC GLeeFuncPtr_glGetProgramPipelineInfoLog;
+  #define glGetProgramPipelineInfoLog GLeeFuncPtr_glGetProgramPipelineInfoLog
+#endif
+#endif 
+
+/* GL_ARB_shader_precision */
+
+#ifndef GL_ARB_shader_precision
+#define GL_ARB_shader_precision 1
+#define __GLEE_GL_ARB_shader_precision 1
+/* Constants */
+#endif 
+
+/* GL_ARB_vertex_attrib_64bit */
+
+#ifndef GL_ARB_vertex_attrib_64bit
+#define GL_ARB_vertex_attrib_64bit 1
+#define __GLEE_GL_ARB_vertex_attrib_64bit 1
+/* Constants */
+#ifndef GLEE_H_DEFINED_glVertexAttribL1d
+#define GLEE_H_DEFINED_glVertexAttribL1d
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIBL1DPROC) (GLuint  index, GLdouble  x);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIBL1DPROC GLeeFuncPtr_glVertexAttribL1d;
+  #define glVertexAttribL1d GLeeFuncPtr_glVertexAttribL1d
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttribL2d
+#define GLEE_H_DEFINED_glVertexAttribL2d
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIBL2DPROC) (GLuint  index, GLdouble  x, GLdouble  y);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIBL2DPROC GLeeFuncPtr_glVertexAttribL2d;
+  #define glVertexAttribL2d GLeeFuncPtr_glVertexAttribL2d
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttribL3d
+#define GLEE_H_DEFINED_glVertexAttribL3d
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIBL3DPROC) (GLuint  index, GLdouble  x, GLdouble  y, GLdouble  z);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIBL3DPROC GLeeFuncPtr_glVertexAttribL3d;
+  #define glVertexAttribL3d GLeeFuncPtr_glVertexAttribL3d
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttribL4d
+#define GLEE_H_DEFINED_glVertexAttribL4d
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIBL4DPROC) (GLuint  index, GLdouble  x, GLdouble  y, GLdouble  z, GLdouble  w);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIBL4DPROC GLeeFuncPtr_glVertexAttribL4d;
+  #define glVertexAttribL4d GLeeFuncPtr_glVertexAttribL4d
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttribL1dv
+#define GLEE_H_DEFINED_glVertexAttribL1dv
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIBL1DVPROC) (GLuint  index, const GLdouble * v);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIBL1DVPROC GLeeFuncPtr_glVertexAttribL1dv;
+  #define glVertexAttribL1dv GLeeFuncPtr_glVertexAttribL1dv
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttribL2dv
+#define GLEE_H_DEFINED_glVertexAttribL2dv
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIBL2DVPROC) (GLuint  index, const GLdouble * v);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIBL2DVPROC GLeeFuncPtr_glVertexAttribL2dv;
+  #define glVertexAttribL2dv GLeeFuncPtr_glVertexAttribL2dv
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttribL3dv
+#define GLEE_H_DEFINED_glVertexAttribL3dv
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIBL3DVPROC) (GLuint  index, const GLdouble * v);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIBL3DVPROC GLeeFuncPtr_glVertexAttribL3dv;
+  #define glVertexAttribL3dv GLeeFuncPtr_glVertexAttribL3dv
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttribL4dv
+#define GLEE_H_DEFINED_glVertexAttribL4dv
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIBL4DVPROC) (GLuint  index, const GLdouble * v);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIBL4DVPROC GLeeFuncPtr_glVertexAttribL4dv;
+  #define glVertexAttribL4dv GLeeFuncPtr_glVertexAttribL4dv
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttribLPointer
+#define GLEE_H_DEFINED_glVertexAttribLPointer
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIBLPOINTERPROC) (GLuint  index, GLint  size, GLenum  type, GLsizei  stride, const GLvoid * pointer);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIBLPOINTERPROC GLeeFuncPtr_glVertexAttribLPointer;
+  #define glVertexAttribLPointer GLeeFuncPtr_glVertexAttribLPointer
+#endif
+#ifndef GLEE_H_DEFINED_glGetVertexAttribLdv
+#define GLEE_H_DEFINED_glGetVertexAttribLdv
+  typedef void (APIENTRYP GLEEPFNGLGETVERTEXATTRIBLDVPROC) (GLuint  index, GLenum  pname, GLdouble * params);
+  GLEE_EXTERN GLEEPFNGLGETVERTEXATTRIBLDVPROC GLeeFuncPtr_glGetVertexAttribLdv;
+  #define glGetVertexAttribLdv GLeeFuncPtr_glGetVertexAttribLdv
+#endif
+#endif 
+
+/* GL_ARB_viewport_array */
+
+#ifndef GL_ARB_viewport_array
+#define GL_ARB_viewport_array 1
+#define __GLEE_GL_ARB_viewport_array 1
+/* Constants */
+#define GL_MAX_VIEWPORTS                                   0x825B
+#define GL_VIEWPORT_SUBPIXEL_BITS                          0x825C
+#define GL_VIEWPORT_BOUNDS_RANGE                           0x825D
+#define GL_LAYER_PROVOKING_VERTEX                          0x825E
+#define GL_VIEWPORT_INDEX_PROVOKING_VERTEX                 0x825F
+#define GL_UNDEFINED_VERTEX                                0x8260
+#ifndef GLEE_H_DEFINED_glViewportArrayv
+#define GLEE_H_DEFINED_glViewportArrayv
+  typedef void (APIENTRYP GLEEPFNGLVIEWPORTARRAYVPROC) (GLuint  first, GLsizei  count, const GLfloat * v);
+  GLEE_EXTERN GLEEPFNGLVIEWPORTARRAYVPROC GLeeFuncPtr_glViewportArrayv;
+  #define glViewportArrayv GLeeFuncPtr_glViewportArrayv
+#endif
+#ifndef GLEE_H_DEFINED_glViewportIndexedf
+#define GLEE_H_DEFINED_glViewportIndexedf
+  typedef void (APIENTRYP GLEEPFNGLVIEWPORTINDEXEDFPROC) (GLuint  index, GLfloat  x, GLfloat  y, GLfloat  w, GLfloat  h);
+  GLEE_EXTERN GLEEPFNGLVIEWPORTINDEXEDFPROC GLeeFuncPtr_glViewportIndexedf;
+  #define glViewportIndexedf GLeeFuncPtr_glViewportIndexedf
+#endif
+#ifndef GLEE_H_DEFINED_glViewportIndexedfv
+#define GLEE_H_DEFINED_glViewportIndexedfv
+  typedef void (APIENTRYP GLEEPFNGLVIEWPORTINDEXEDFVPROC) (GLuint  index, const GLfloat * v);
+  GLEE_EXTERN GLEEPFNGLVIEWPORTINDEXEDFVPROC GLeeFuncPtr_glViewportIndexedfv;
+  #define glViewportIndexedfv GLeeFuncPtr_glViewportIndexedfv
+#endif
+#ifndef GLEE_H_DEFINED_glScissorArrayv
+#define GLEE_H_DEFINED_glScissorArrayv
+  typedef void (APIENTRYP GLEEPFNGLSCISSORARRAYVPROC) (GLuint  first, GLsizei  count, const GLint * v);
+  GLEE_EXTERN GLEEPFNGLSCISSORARRAYVPROC GLeeFuncPtr_glScissorArrayv;
+  #define glScissorArrayv GLeeFuncPtr_glScissorArrayv
+#endif
+#ifndef GLEE_H_DEFINED_glScissorIndexed
+#define GLEE_H_DEFINED_glScissorIndexed
+  typedef void (APIENTRYP GLEEPFNGLSCISSORINDEXEDPROC) (GLuint  index, GLint  left, GLint  bottom, GLsizei  width, GLsizei  height);
+  GLEE_EXTERN GLEEPFNGLSCISSORINDEXEDPROC GLeeFuncPtr_glScissorIndexed;
+  #define glScissorIndexed GLeeFuncPtr_glScissorIndexed
+#endif
+#ifndef GLEE_H_DEFINED_glScissorIndexedv
+#define GLEE_H_DEFINED_glScissorIndexedv
+  typedef void (APIENTRYP GLEEPFNGLSCISSORINDEXEDVPROC) (GLuint  index, const GLint * v);
+  GLEE_EXTERN GLEEPFNGLSCISSORINDEXEDVPROC GLeeFuncPtr_glScissorIndexedv;
+  #define glScissorIndexedv GLeeFuncPtr_glScissorIndexedv
+#endif
+#ifndef GLEE_H_DEFINED_glDepthRangeArrayv
+#define GLEE_H_DEFINED_glDepthRangeArrayv
+  typedef void (APIENTRYP GLEEPFNGLDEPTHRANGEARRAYVPROC) (GLuint  first, GLsizei  count, const GLclampd * v);
+  GLEE_EXTERN GLEEPFNGLDEPTHRANGEARRAYVPROC GLeeFuncPtr_glDepthRangeArrayv;
+  #define glDepthRangeArrayv GLeeFuncPtr_glDepthRangeArrayv
+#endif
+#ifndef GLEE_H_DEFINED_glDepthRangeIndexed
+#define GLEE_H_DEFINED_glDepthRangeIndexed
+  typedef void (APIENTRYP GLEEPFNGLDEPTHRANGEINDEXEDPROC) (GLuint  index, GLclampd  n, GLclampd  f);
+  GLEE_EXTERN GLEEPFNGLDEPTHRANGEINDEXEDPROC GLeeFuncPtr_glDepthRangeIndexed;
+  #define glDepthRangeIndexed GLeeFuncPtr_glDepthRangeIndexed
+#endif
+#ifndef GLEE_H_DEFINED_glGetFloati_v
+#define GLEE_H_DEFINED_glGetFloati_v
+  typedef void (APIENTRYP GLEEPFNGLGETFLOATI_VPROC) (GLenum  target, GLuint  index, GLfloat * data);
+  GLEE_EXTERN GLEEPFNGLGETFLOATI_VPROC GLeeFuncPtr_glGetFloati_v;
+  #define glGetFloati_v GLeeFuncPtr_glGetFloati_v
+#endif
+#ifndef GLEE_H_DEFINED_glGetDoublei_v
+#define GLEE_H_DEFINED_glGetDoublei_v
+  typedef void (APIENTRYP GLEEPFNGLGETDOUBLEI_VPROC) (GLenum  target, GLuint  index, GLdouble * data);
+  GLEE_EXTERN GLEEPFNGLGETDOUBLEI_VPROC GLeeFuncPtr_glGetDoublei_v;
+  #define glGetDoublei_v GLeeFuncPtr_glGetDoublei_v
+#endif
+#endif 
+
+/* GL_ARB_cl_event */
+
+#ifndef GL_ARB_cl_event
+#define GL_ARB_cl_event 1
+#define __GLEE_GL_ARB_cl_event 1
+/* Constants */
+#define GL_SYNC_CL_EVENT_ARB                               0x8240
+#define GL_SYNC_CL_EVENT_COMPLETE_ARB                      0x8241
+#ifndef GLEE_H_DEFINED_glCreateSyncFromCLeventARB
+#define GLEE_H_DEFINED_glCreateSyncFromCLeventARB
+  typedef GLsync (APIENTRYP GLEEPFNGLCREATESYNCFROMCLEVENTARBPROC) (struct _cl_context *  context, struct _cl_event *  event, GLbitfield  flags);
+  GLEE_EXTERN GLEEPFNGLCREATESYNCFROMCLEVENTARBPROC GLeeFuncPtr_glCreateSyncFromCLeventARB;
+  #define glCreateSyncFromCLeventARB GLeeFuncPtr_glCreateSyncFromCLeventARB
+#endif
+#endif 
+
+/* GL_ARB_robustness */
+
+#ifndef GL_ARB_robustness
+#define GL_ARB_robustness 1
+#define __GLEE_GL_ARB_robustness 1
+/* Constants */
+#define GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB              0x00000004
+#define GL_LOSE_CONTEXT_ON_RESET_ARB                       0x8252
+#define GL_GUILTY_CONTEXT_RESET_ARB                        0x8253
+#define GL_INNOCENT_CONTEXT_RESET_ARB                      0x8254
+#define GL_UNKNOWN_CONTEXT_RESET_ARB                       0x8255
+#define GL_RESET_NOTIFICATION_STRATEGY_ARB                 0x8256
+#define GL_NO_RESET_NOTIFICATION_ARB                       0x8261
+#ifndef GLEE_H_DEFINED_glGetGraphicsResetStatusARB
+#define GLEE_H_DEFINED_glGetGraphicsResetStatusARB
+  typedef GLenum (APIENTRYP GLEEPFNGLGETGRAPHICSRESETSTATUSARBPROC) ();
+  GLEE_EXTERN GLEEPFNGLGETGRAPHICSRESETSTATUSARBPROC GLeeFuncPtr_glGetGraphicsResetStatusARB;
+  #define glGetGraphicsResetStatusARB GLeeFuncPtr_glGetGraphicsResetStatusARB
+#endif
+#ifndef GLEE_H_DEFINED_glGetnMapdvARB
+#define GLEE_H_DEFINED_glGetnMapdvARB
+  typedef void (APIENTRYP GLEEPFNGLGETNMAPDVARBPROC) (GLenum  target, GLenum  query, GLsizei  bufSize, GLdouble * v);
+  GLEE_EXTERN GLEEPFNGLGETNMAPDVARBPROC GLeeFuncPtr_glGetnMapdvARB;
+  #define glGetnMapdvARB GLeeFuncPtr_glGetnMapdvARB
+#endif
+#ifndef GLEE_H_DEFINED_glGetnMapfvARB
+#define GLEE_H_DEFINED_glGetnMapfvARB
+  typedef void (APIENTRYP GLEEPFNGLGETNMAPFVARBPROC) (GLenum  target, GLenum  query, GLsizei  bufSize, GLfloat * v);
+  GLEE_EXTERN GLEEPFNGLGETNMAPFVARBPROC GLeeFuncPtr_glGetnMapfvARB;
+  #define glGetnMapfvARB GLeeFuncPtr_glGetnMapfvARB
+#endif
+#ifndef GLEE_H_DEFINED_glGetnMapivARB
+#define GLEE_H_DEFINED_glGetnMapivARB
+  typedef void (APIENTRYP GLEEPFNGLGETNMAPIVARBPROC) (GLenum  target, GLenum  query, GLsizei  bufSize, GLint * v);
+  GLEE_EXTERN GLEEPFNGLGETNMAPIVARBPROC GLeeFuncPtr_glGetnMapivARB;
+  #define glGetnMapivARB GLeeFuncPtr_glGetnMapivARB
+#endif
+#ifndef GLEE_H_DEFINED_glGetnPixelMapfvARB
+#define GLEE_H_DEFINED_glGetnPixelMapfvARB
+  typedef void (APIENTRYP GLEEPFNGLGETNPIXELMAPFVARBPROC) (GLenum  map, GLsizei  bufSize, GLfloat * values);
+  GLEE_EXTERN GLEEPFNGLGETNPIXELMAPFVARBPROC GLeeFuncPtr_glGetnPixelMapfvARB;
+  #define glGetnPixelMapfvARB GLeeFuncPtr_glGetnPixelMapfvARB
+#endif
+#ifndef GLEE_H_DEFINED_glGetnPixelMapuivARB
+#define GLEE_H_DEFINED_glGetnPixelMapuivARB
+  typedef void (APIENTRYP GLEEPFNGLGETNPIXELMAPUIVARBPROC) (GLenum  map, GLsizei  bufSize, GLuint * values);
+  GLEE_EXTERN GLEEPFNGLGETNPIXELMAPUIVARBPROC GLeeFuncPtr_glGetnPixelMapuivARB;
+  #define glGetnPixelMapuivARB GLeeFuncPtr_glGetnPixelMapuivARB
+#endif
+#ifndef GLEE_H_DEFINED_glGetnPixelMapusvARB
+#define GLEE_H_DEFINED_glGetnPixelMapusvARB
+  typedef void (APIENTRYP GLEEPFNGLGETNPIXELMAPUSVARBPROC) (GLenum  map, GLsizei  bufSize, GLushort * values);
+  GLEE_EXTERN GLEEPFNGLGETNPIXELMAPUSVARBPROC GLeeFuncPtr_glGetnPixelMapusvARB;
+  #define glGetnPixelMapusvARB GLeeFuncPtr_glGetnPixelMapusvARB
+#endif
+#ifndef GLEE_H_DEFINED_glGetnPolygonStippleARB
+#define GLEE_H_DEFINED_glGetnPolygonStippleARB
+  typedef void (APIENTRYP GLEEPFNGLGETNPOLYGONSTIPPLEARBPROC) (GLsizei  bufSize, GLubyte * pattern);
+  GLEE_EXTERN GLEEPFNGLGETNPOLYGONSTIPPLEARBPROC GLeeFuncPtr_glGetnPolygonStippleARB;
+  #define glGetnPolygonStippleARB GLeeFuncPtr_glGetnPolygonStippleARB
+#endif
+#ifndef GLEE_H_DEFINED_glGetnColorTableARB
+#define GLEE_H_DEFINED_glGetnColorTableARB
+  typedef void (APIENTRYP GLEEPFNGLGETNCOLORTABLEARBPROC) (GLenum  target, GLenum  format, GLenum  type, GLsizei  bufSize, GLvoid * table);
+  GLEE_EXTERN GLEEPFNGLGETNCOLORTABLEARBPROC GLeeFuncPtr_glGetnColorTableARB;
+  #define glGetnColorTableARB GLeeFuncPtr_glGetnColorTableARB
+#endif
+#ifndef GLEE_H_DEFINED_glGetnConvolutionFilterARB
+#define GLEE_H_DEFINED_glGetnConvolutionFilterARB
+  typedef void (APIENTRYP GLEEPFNGLGETNCONVOLUTIONFILTERARBPROC) (GLenum  target, GLenum  format, GLenum  type, GLsizei  bufSize, GLvoid * image);
+  GLEE_EXTERN GLEEPFNGLGETNCONVOLUTIONFILTERARBPROC GLeeFuncPtr_glGetnConvolutionFilterARB;
+  #define glGetnConvolutionFilterARB GLeeFuncPtr_glGetnConvolutionFilterARB
+#endif
+#ifndef GLEE_H_DEFINED_glGetnSeparableFilterARB
+#define GLEE_H_DEFINED_glGetnSeparableFilterARB
+  typedef void (APIENTRYP GLEEPFNGLGETNSEPARABLEFILTERARBPROC) (GLenum  target, GLenum  format, GLenum  type, GLsizei  rowBufSize, GLvoid * row, GLsizei  columnBufSize, GLvoid * column, GLvoid * span);
+  GLEE_EXTERN GLEEPFNGLGETNSEPARABLEFILTERARBPROC GLeeFuncPtr_glGetnSeparableFilterARB;
+  #define glGetnSeparableFilterARB GLeeFuncPtr_glGetnSeparableFilterARB
+#endif
+#ifndef GLEE_H_DEFINED_glGetnHistogramARB
+#define GLEE_H_DEFINED_glGetnHistogramARB
+  typedef void (APIENTRYP GLEEPFNGLGETNHISTOGRAMARBPROC) (GLenum  target, GLboolean  reset, GLenum  format, GLenum  type, GLsizei  bufSize, GLvoid * values);
+  GLEE_EXTERN GLEEPFNGLGETNHISTOGRAMARBPROC GLeeFuncPtr_glGetnHistogramARB;
+  #define glGetnHistogramARB GLeeFuncPtr_glGetnHistogramARB
+#endif
+#ifndef GLEE_H_DEFINED_glGetnMinmaxARB
+#define GLEE_H_DEFINED_glGetnMinmaxARB
+  typedef void (APIENTRYP GLEEPFNGLGETNMINMAXARBPROC) (GLenum  target, GLboolean  reset, GLenum  format, GLenum  type, GLsizei  bufSize, GLvoid * values);
+  GLEE_EXTERN GLEEPFNGLGETNMINMAXARBPROC GLeeFuncPtr_glGetnMinmaxARB;
+  #define glGetnMinmaxARB GLeeFuncPtr_glGetnMinmaxARB
+#endif
+#ifndef GLEE_H_DEFINED_glGetnTexImageARB
+#define GLEE_H_DEFINED_glGetnTexImageARB
+  typedef void (APIENTRYP GLEEPFNGLGETNTEXIMAGEARBPROC) (GLenum  target, GLint  level, GLenum  format, GLenum  type, GLsizei  bufSize, GLvoid * img);
+  GLEE_EXTERN GLEEPFNGLGETNTEXIMAGEARBPROC GLeeFuncPtr_glGetnTexImageARB;
+  #define glGetnTexImageARB GLeeFuncPtr_glGetnTexImageARB
+#endif
+#ifndef GLEE_H_DEFINED_glReadnPixelsARB
+#define GLEE_H_DEFINED_glReadnPixelsARB
+  typedef void (APIENTRYP GLEEPFNGLREADNPIXELSARBPROC) (GLint  x, GLint  y, GLsizei  width, GLsizei  height, GLenum  format, GLenum  type, GLsizei  bufSize, GLvoid * data);
+  GLEE_EXTERN GLEEPFNGLREADNPIXELSARBPROC GLeeFuncPtr_glReadnPixelsARB;
+  #define glReadnPixelsARB GLeeFuncPtr_glReadnPixelsARB
+#endif
+#ifndef GLEE_H_DEFINED_glGetnCompressedTexImageARB
+#define GLEE_H_DEFINED_glGetnCompressedTexImageARB
+  typedef void (APIENTRYP GLEEPFNGLGETNCOMPRESSEDTEXIMAGEARBPROC) (GLenum  target, GLint  lod, GLsizei  bufSize, GLvoid * img);
+  GLEE_EXTERN GLEEPFNGLGETNCOMPRESSEDTEXIMAGEARBPROC GLeeFuncPtr_glGetnCompressedTexImageARB;
+  #define glGetnCompressedTexImageARB GLeeFuncPtr_glGetnCompressedTexImageARB
+#endif
+#ifndef GLEE_H_DEFINED_glGetnUniformfvARB
+#define GLEE_H_DEFINED_glGetnUniformfvARB
+  typedef void (APIENTRYP GLEEPFNGLGETNUNIFORMFVARBPROC) (GLuint  program, GLint  location, GLsizei  bufSize, GLfloat * params);
+  GLEE_EXTERN GLEEPFNGLGETNUNIFORMFVARBPROC GLeeFuncPtr_glGetnUniformfvARB;
+  #define glGetnUniformfvARB GLeeFuncPtr_glGetnUniformfvARB
+#endif
+#ifndef GLEE_H_DEFINED_glGetnUniformivARB
+#define GLEE_H_DEFINED_glGetnUniformivARB
+  typedef void (APIENTRYP GLEEPFNGLGETNUNIFORMIVARBPROC) (GLuint  program, GLint  location, GLsizei  bufSize, GLint * params);
+  GLEE_EXTERN GLEEPFNGLGETNUNIFORMIVARBPROC GLeeFuncPtr_glGetnUniformivARB;
+  #define glGetnUniformivARB GLeeFuncPtr_glGetnUniformivARB
+#endif
+#ifndef GLEE_H_DEFINED_glGetnUniformuivARB
+#define GLEE_H_DEFINED_glGetnUniformuivARB
+  typedef void (APIENTRYP GLEEPFNGLGETNUNIFORMUIVARBPROC) (GLuint  program, GLint  location, GLsizei  bufSize, GLuint * params);
+  GLEE_EXTERN GLEEPFNGLGETNUNIFORMUIVARBPROC GLeeFuncPtr_glGetnUniformuivARB;
+  #define glGetnUniformuivARB GLeeFuncPtr_glGetnUniformuivARB
+#endif
+#ifndef GLEE_H_DEFINED_glGetnUniformdvARB
+#define GLEE_H_DEFINED_glGetnUniformdvARB
+  typedef void (APIENTRYP GLEEPFNGLGETNUNIFORMDVARBPROC) (GLuint  program, GLint  location, GLsizei  bufSize, GLdouble * params);
+  GLEE_EXTERN GLEEPFNGLGETNUNIFORMDVARBPROC GLeeFuncPtr_glGetnUniformdvARB;
+  #define glGetnUniformdvARB GLeeFuncPtr_glGetnUniformdvARB
+#endif
+#endif 
+
+/* GL_ARB_shader_stencil_export */
+
+#ifndef GL_ARB_shader_stencil_export
+#define GL_ARB_shader_stencil_export 1
+#define __GLEE_GL_ARB_shader_stencil_export 1
+/* Constants */
+#endif 
+
+/* GL_ARB_base_instance */
+
+#ifndef GL_ARB_base_instance
+#define GL_ARB_base_instance 1
+#define __GLEE_GL_ARB_base_instance 1
+/* Constants */
+#ifndef GLEE_H_DEFINED_glDrawArraysInstancedBaseInstance
+#define GLEE_H_DEFINED_glDrawArraysInstancedBaseInstance
+  typedef void (APIENTRYP GLEEPFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC) (GLenum  mode, GLint  first, GLsizei  count, GLsizei  primcount, GLuint  baseinstance);
+  GLEE_EXTERN GLEEPFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC GLeeFuncPtr_glDrawArraysInstancedBaseInstance;
+  #define glDrawArraysInstancedBaseInstance GLeeFuncPtr_glDrawArraysInstancedBaseInstance
+#endif
+#ifndef GLEE_H_DEFINED_glDrawElementsInstancedBaseInstance
+#define GLEE_H_DEFINED_glDrawElementsInstancedBaseInstance
+  typedef void (APIENTRYP GLEEPFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC) (GLenum  mode, GLsizei  count, GLenum  type, const void * indices, GLsizei  primcount, GLuint  baseinstance);
+  GLEE_EXTERN GLEEPFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC GLeeFuncPtr_glDrawElementsInstancedBaseInstance;
+  #define glDrawElementsInstancedBaseInstance GLeeFuncPtr_glDrawElementsInstancedBaseInstance
+#endif
+#ifndef GLEE_H_DEFINED_glDrawElementsInstancedBaseVertexBaseInstance
+#define GLEE_H_DEFINED_glDrawElementsInstancedBaseVertexBaseInstance
+  typedef void (APIENTRYP GLEEPFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC) (GLenum  mode, GLsizei  count, GLenum  type, const void * indices, GLsizei  primcount, GLint  basevertex, GLuint  baseinstance);
+  GLEE_EXTERN GLEEPFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC GLeeFuncPtr_glDrawElementsInstancedBaseVertexBaseInstance;
+  #define glDrawElementsInstancedBaseVertexBaseInstance GLeeFuncPtr_glDrawElementsInstancedBaseVertexBaseInstance
+#endif
+#endif 
+
+/* GL_ARB_shading_language_420pack */
+
+#ifndef GL_ARB_shading_language_420pack
+#define GL_ARB_shading_language_420pack 1
+#define __GLEE_GL_ARB_shading_language_420pack 1
+/* Constants */
+#endif 
+
+/* GL_ARB_transform_feedback_instanced */
+
+#ifndef GL_ARB_transform_feedback_instanced
+#define GL_ARB_transform_feedback_instanced 1
+#define __GLEE_GL_ARB_transform_feedback_instanced 1
+/* Constants */
+#ifndef GLEE_H_DEFINED_glDrawTransformFeedbackInstanced
+#define GLEE_H_DEFINED_glDrawTransformFeedbackInstanced
+  typedef void (APIENTRYP GLEEPFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC) (GLenum  mode, GLuint  id, GLsizei  primcount);
+  GLEE_EXTERN GLEEPFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC GLeeFuncPtr_glDrawTransformFeedbackInstanced;
+  #define glDrawTransformFeedbackInstanced GLeeFuncPtr_glDrawTransformFeedbackInstanced
+#endif
+#ifndef GLEE_H_DEFINED_glDrawTransformFeedbackStreamInstanced
+#define GLEE_H_DEFINED_glDrawTransformFeedbackStreamInstanced
+  typedef void (APIENTRYP GLEEPFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC) (GLenum  mode, GLuint  id, GLuint  stream, GLsizei  primcount);
+  GLEE_EXTERN GLEEPFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC GLeeFuncPtr_glDrawTransformFeedbackStreamInstanced;
+  #define glDrawTransformFeedbackStreamInstanced GLeeFuncPtr_glDrawTransformFeedbackStreamInstanced
+#endif
+#endif 
+
+/* GL_ARB_compressed_texture_pixel_storage */
+
+#ifndef GL_ARB_compressed_texture_pixel_storage
+#define GL_ARB_compressed_texture_pixel_storage 1
+#define __GLEE_GL_ARB_compressed_texture_pixel_storage 1
+/* Constants */
+#define GL_UNPACK_COMPRESSED_BLOCK_WIDTH                   0x9127
+#define GL_UNPACK_COMPRESSED_BLOCK_HEIGHT                  0x9128
+#define GL_UNPACK_COMPRESSED_BLOCK_DEPTH                   0x9129
+#define GL_UNPACK_COMPRESSED_BLOCK_SIZE                    0x912A
+#define GL_PACK_COMPRESSED_BLOCK_WIDTH                     0x912B
+#define GL_PACK_COMPRESSED_BLOCK_HEIGHT                    0x912C
+#define GL_PACK_COMPRESSED_BLOCK_DEPTH                     0x912D
+#define GL_PACK_COMPRESSED_BLOCK_SIZE                      0x912E
+#endif 
+
+/* GL_ARB_conservative_depth */
+
+#ifndef GL_ARB_conservative_depth
+#define GL_ARB_conservative_depth 1
+#define __GLEE_GL_ARB_conservative_depth 1
+/* Constants */
+#endif 
+
+/* GL_ARB_internalformat_query */
+
+#ifndef GL_ARB_internalformat_query
+#define GL_ARB_internalformat_query 1
+#define __GLEE_GL_ARB_internalformat_query 1
+/* Constants */
+#define GL_NUM_SAMPLE_COUNTS                               0x9380
+#ifndef GLEE_H_DEFINED_glGetInternalformativ
+#define GLEE_H_DEFINED_glGetInternalformativ
+  typedef void (APIENTRYP GLEEPFNGLGETINTERNALFORMATIVPROC) (GLenum  target, GLenum  internalformat, GLenum  pname, GLsizei  bufSize, GLint * params);
+  GLEE_EXTERN GLEEPFNGLGETINTERNALFORMATIVPROC GLeeFuncPtr_glGetInternalformativ;
+  #define glGetInternalformativ GLeeFuncPtr_glGetInternalformativ
+#endif
+#endif 
+
+/* GL_ARB_map_buffer_alignment */
+
+#ifndef GL_ARB_map_buffer_alignment
+#define GL_ARB_map_buffer_alignment 1
+#define __GLEE_GL_ARB_map_buffer_alignment 1
+/* Constants */
+#define GL_MIN_MAP_BUFFER_ALIGNMENT                        0x90BC
+#endif 
+
+/* GL_ARB_shader_atomic_counters */
+
+#ifndef GL_ARB_shader_atomic_counters
+#define GL_ARB_shader_atomic_counters 1
+#define __GLEE_GL_ARB_shader_atomic_counters 1
+/* Constants */
+#define GL_ATOMIC_COUNTER_BUFFER                           0x92C0
+#define GL_ATOMIC_COUNTER_BUFFER_BINDING                   0x92C1
+#define GL_ATOMIC_COUNTER_BUFFER_START                     0x92C2
+#define GL_ATOMIC_COUNTER_BUFFER_SIZE                      0x92C3
+#define GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE                 0x92C4
+#define GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS    0x92C5
+#define GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES 0x92C6
+#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER 0x92C7
+#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER 0x92C8
+#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER 0x92C9
+#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER 0x92CA
+#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER 0x92CB
+#define GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS               0x92CC
+#define GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS         0x92CD
+#define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS      0x92CE
+#define GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS             0x92CF
+#define GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS             0x92D0
+#define GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS             0x92D1
+#define GL_MAX_VERTEX_ATOMIC_COUNTERS                      0x92D2
+#define GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS                0x92D3
+#define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS             0x92D4
+#define GL_MAX_GEOMETRY_ATOMIC_COUNTERS                    0x92D5
+#define GL_MAX_FRAGMENT_ATOMIC_COUNTERS                    0x92D6
+#define GL_MAX_COMBINED_ATOMIC_COUNTERS                    0x92D7
+#define GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE                  0x92D8
+#define GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS              0x92DC
+#define GL_ACTIVE_ATOMIC_COUNTER_BUFFERS                   0x92D9
+#define GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX             0x92DA
+#define GL_UNSIGNED_INT_ATOMIC_COUNTER                     0x92DB
+#ifndef GLEE_H_DEFINED_glGetActiveAtomicCounterBufferiv
+#define GLEE_H_DEFINED_glGetActiveAtomicCounterBufferiv
+  typedef void (APIENTRYP GLEEPFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC) (GLuint  program, GLuint  bufferIndex, GLenum  pname, GLint * params);
+  GLEE_EXTERN GLEEPFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC GLeeFuncPtr_glGetActiveAtomicCounterBufferiv;
+  #define glGetActiveAtomicCounterBufferiv GLeeFuncPtr_glGetActiveAtomicCounterBufferiv
+#endif
+#endif 
+
+/* GL_ARB_shader_image_load_store */
+
+#ifndef GL_ARB_shader_image_load_store
+#define GL_ARB_shader_image_load_store 1
+#define __GLEE_GL_ARB_shader_image_load_store 1
+/* Constants */
+#define GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT                 0x00000001
+#define GL_ELEMENT_ARRAY_BARRIER_BIT                       0x00000002
+#define GL_UNIFORM_BARRIER_BIT                             0x00000004
+#define GL_TEXTURE_FETCH_BARRIER_BIT                       0x00000008
+#define GL_SHADER_IMAGE_ACCESS_BARRIER_BIT                 0x00000020
+#define GL_COMMAND_BARRIER_BIT                             0x00000040
+#define GL_PIXEL_BUFFER_BARRIER_BIT                        0x00000080
+#define GL_TEXTURE_UPDATE_BARRIER_BIT                      0x00000100
+#define GL_BUFFER_UPDATE_BARRIER_BIT                       0x00000200
+#define GL_FRAMEBUFFER_BARRIER_BIT                         0x00000400
+#define GL_TRANSFORM_FEEDBACK_BARRIER_BIT                  0x00000800
+#define GL_ATOMIC_COUNTER_BARRIER_BIT                      0x00001000
+#define GL_ALL_BARRIER_BITS                                0xFFFFFFFF
+#define GL_MAX_IMAGE_UNITS                                 0x8F38
+#define GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS   0x8F39
+#define GL_IMAGE_BINDING_NAME                              0x8F3A
+#define GL_IMAGE_BINDING_LEVEL                             0x8F3B
+#define GL_IMAGE_BINDING_LAYERED                           0x8F3C
+#define GL_IMAGE_BINDING_LAYER                             0x8F3D
+#define GL_IMAGE_BINDING_ACCESS                            0x8F3E
+#define GL_IMAGE_1D                                        0x904C
+#define GL_IMAGE_2D                                        0x904D
+#define GL_IMAGE_3D                                        0x904E
+#define GL_IMAGE_2D_RECT                                   0x904F
+#define GL_IMAGE_CUBE                                      0x9050
+#define GL_IMAGE_BUFFER                                    0x9051
+#define GL_IMAGE_1D_ARRAY                                  0x9052
+#define GL_IMAGE_2D_ARRAY                                  0x9053
+#define GL_IMAGE_CUBE_MAP_ARRAY                            0x9054
+#define GL_IMAGE_2D_MULTISAMPLE                            0x9055
+#define GL_IMAGE_2D_MULTISAMPLE_ARRAY                      0x9056
+#define GL_INT_IMAGE_1D                                    0x9057
+#define GL_INT_IMAGE_2D                                    0x9058
+#define GL_INT_IMAGE_3D                                    0x9059
+#define GL_INT_IMAGE_2D_RECT                               0x905A
+#define GL_INT_IMAGE_CUBE                                  0x905B
+#define GL_INT_IMAGE_BUFFER                                0x905C
+#define GL_INT_IMAGE_1D_ARRAY                              0x905D
+#define GL_INT_IMAGE_2D_ARRAY                              0x905E
+#define GL_INT_IMAGE_CUBE_MAP_ARRAY                        0x905F
+#define GL_INT_IMAGE_2D_MULTISAMPLE                        0x9060
+#define GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY                  0x9061
+#define GL_UNSIGNED_INT_IMAGE_1D                           0x9062
+#define GL_UNSIGNED_INT_IMAGE_2D                           0x9063
+#define GL_UNSIGNED_INT_IMAGE_3D                           0x9064
+#define GL_UNSIGNED_INT_IMAGE_2D_RECT                      0x9065
+#define GL_UNSIGNED_INT_IMAGE_CUBE                         0x9066
+#define GL_UNSIGNED_INT_IMAGE_BUFFER                       0x9067
+#define GL_UNSIGNED_INT_IMAGE_1D_ARRAY                     0x9068
+#define GL_UNSIGNED_INT_IMAGE_2D_ARRAY                     0x9069
+#define GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY               0x906A
+#define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE               0x906B
+#define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY         0x906C
+#define GL_MAX_IMAGE_SAMPLES                               0x906D
+#define GL_IMAGE_BINDING_FORMAT                            0x906E
+#define GL_IMAGE_FORMAT_COMPATIBILITY_TYPE                 0x90C7
+#define GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE              0x90C8
+#define GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS             0x90C9
+#define GL_MAX_VERTEX_IMAGE_UNIFORMS                       0x90CA
+#define GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS                 0x90CB
+#define GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS              0x90CC
+#define GL_MAX_GEOMETRY_IMAGE_UNIFORMS                     0x90CD
+#define GL_MAX_FRAGMENT_IMAGE_UNIFORMS                     0x90CE
+#define GL_MAX_COMBINED_IMAGE_UNIFORMS                     0x90CF
+#ifndef GLEE_H_DEFINED_glBindImageTexture
+#define GLEE_H_DEFINED_glBindImageTexture
+  typedef void (APIENTRYP GLEEPFNGLBINDIMAGETEXTUREPROC) (GLuint  unit, GLuint  texture, GLint  level, GLboolean  layered, GLint  layer, GLenum  access, GLenum  format);
+  GLEE_EXTERN GLEEPFNGLBINDIMAGETEXTUREPROC GLeeFuncPtr_glBindImageTexture;
+  #define glBindImageTexture GLeeFuncPtr_glBindImageTexture
+#endif
+#ifndef GLEE_H_DEFINED_glMemoryBarrier
+#define GLEE_H_DEFINED_glMemoryBarrier
+  typedef void (APIENTRYP GLEEPFNGLMEMORYBARRIERPROC) (GLbitfield  barriers);
+  GLEE_EXTERN GLEEPFNGLMEMORYBARRIERPROC GLeeFuncPtr_glMemoryBarrier;
+  #define glMemoryBarrier GLeeFuncPtr_glMemoryBarrier
+#endif
+#endif 
+
+/* GL_ARB_shading_language_packing */
+
+#ifndef GL_ARB_shading_language_packing
+#define GL_ARB_shading_language_packing 1
+#define __GLEE_GL_ARB_shading_language_packing 1
+/* Constants */
+#endif 
+
+/* GL_ARB_texture_storage */
+
+#ifndef GL_ARB_texture_storage
+#define GL_ARB_texture_storage 1
+#define __GLEE_GL_ARB_texture_storage 1
+/* Constants */
+#define GL_TEXTURE_IMMUTABLE_FORMAT                        0x912F
+#ifndef GLEE_H_DEFINED_glTexStorage1D
+#define GLEE_H_DEFINED_glTexStorage1D
+  typedef void (APIENTRYP GLEEPFNGLTEXSTORAGE1DPROC) (GLenum  target, GLsizei  levels, GLenum  internalformat, GLsizei  width);
+  GLEE_EXTERN GLEEPFNGLTEXSTORAGE1DPROC GLeeFuncPtr_glTexStorage1D;
+  #define glTexStorage1D GLeeFuncPtr_glTexStorage1D
+#endif
+#ifndef GLEE_H_DEFINED_glTexStorage2D
+#define GLEE_H_DEFINED_glTexStorage2D
+  typedef void (APIENTRYP GLEEPFNGLTEXSTORAGE2DPROC) (GLenum  target, GLsizei  levels, GLenum  internalformat, GLsizei  width, GLsizei  height);
+  GLEE_EXTERN GLEEPFNGLTEXSTORAGE2DPROC GLeeFuncPtr_glTexStorage2D;
+  #define glTexStorage2D GLeeFuncPtr_glTexStorage2D
+#endif
+#ifndef GLEE_H_DEFINED_glTexStorage3D
+#define GLEE_H_DEFINED_glTexStorage3D
+  typedef void (APIENTRYP GLEEPFNGLTEXSTORAGE3DPROC) (GLenum  target, GLsizei  levels, GLenum  internalformat, GLsizei  width, GLsizei  height, GLsizei  depth);
+  GLEE_EXTERN GLEEPFNGLTEXSTORAGE3DPROC GLeeFuncPtr_glTexStorage3D;
+  #define glTexStorage3D GLeeFuncPtr_glTexStorage3D
+#endif
+#ifndef GLEE_H_DEFINED_glTextureStorage1DEXT
+#define GLEE_H_DEFINED_glTextureStorage1DEXT
+  typedef void (APIENTRYP GLEEPFNGLTEXTURESTORAGE1DEXTPROC) (GLuint  texture, GLenum  target, GLsizei  levels, GLenum  internalformat, GLsizei  width);
+  GLEE_EXTERN GLEEPFNGLTEXTURESTORAGE1DEXTPROC GLeeFuncPtr_glTextureStorage1DEXT;
+  #define glTextureStorage1DEXT GLeeFuncPtr_glTextureStorage1DEXT
+#endif
+#ifndef GLEE_H_DEFINED_glTextureStorage2DEXT
+#define GLEE_H_DEFINED_glTextureStorage2DEXT
+  typedef void (APIENTRYP GLEEPFNGLTEXTURESTORAGE2DEXTPROC) (GLuint  texture, GLenum  target, GLsizei  levels, GLenum  internalformat, GLsizei  width, GLsizei  height);
+  GLEE_EXTERN GLEEPFNGLTEXTURESTORAGE2DEXTPROC GLeeFuncPtr_glTextureStorage2DEXT;
+  #define glTextureStorage2DEXT GLeeFuncPtr_glTextureStorage2DEXT
+#endif
+#ifndef GLEE_H_DEFINED_glTextureStorage3DEXT
+#define GLEE_H_DEFINED_glTextureStorage3DEXT
+  typedef void (APIENTRYP GLEEPFNGLTEXTURESTORAGE3DEXTPROC) (GLuint  texture, GLenum  target, GLsizei  levels, GLenum  internalformat, GLsizei  width, GLsizei  height, GLsizei  depth);
+  GLEE_EXTERN GLEEPFNGLTEXTURESTORAGE3DEXTPROC GLeeFuncPtr_glTextureStorage3DEXT;
+  #define glTextureStorage3DEXT GLeeFuncPtr_glTextureStorage3DEXT
+#endif
+#endif 
+
+/* GL_EXT_abgr */
+
+#ifndef GL_EXT_abgr
+#define GL_EXT_abgr 1
+#define __GLEE_GL_EXT_abgr 1
+/* Constants */
+#define GL_ABGR_EXT                                        0x8000
+#endif 
+
+/* GL_EXT_blend_color */
+
+#ifndef GL_EXT_blend_color
+#define GL_EXT_blend_color 1
+#define __GLEE_GL_EXT_blend_color 1
+/* Constants */
+#define GL_CONSTANT_COLOR_EXT                              0x8001
+#define GL_ONE_MINUS_CONSTANT_COLOR_EXT                    0x8002
+#define GL_CONSTANT_ALPHA_EXT                              0x8003
+#define GL_ONE_MINUS_CONSTANT_ALPHA_EXT                    0x8004
+#define GL_BLEND_COLOR_EXT                                 0x8005
+#ifndef GLEE_H_DEFINED_glBlendColorEXT
+#define GLEE_H_DEFINED_glBlendColorEXT
+  typedef void (APIENTRYP GLEEPFNGLBLENDCOLOREXTPROC) (GLclampf  red, GLclampf  green, GLclampf  blue, GLclampf  alpha);
+  GLEE_EXTERN GLEEPFNGLBLENDCOLOREXTPROC GLeeFuncPtr_glBlendColorEXT;
+  #define glBlendColorEXT GLeeFuncPtr_glBlendColorEXT
+#endif
+#endif 
+
+/* GL_EXT_polygon_offset */
+
+#ifndef GL_EXT_polygon_offset
+#define GL_EXT_polygon_offset 1
+#define __GLEE_GL_EXT_polygon_offset 1
+/* Constants */
+#define GL_POLYGON_OFFSET_EXT                              0x8037
+#define GL_POLYGON_OFFSET_FACTOR_EXT                       0x8038
+#define GL_POLYGON_OFFSET_BIAS_EXT                         0x8039
+#ifndef GLEE_H_DEFINED_glPolygonOffsetEXT
+#define GLEE_H_DEFINED_glPolygonOffsetEXT
+  typedef void (APIENTRYP GLEEPFNGLPOLYGONOFFSETEXTPROC) (GLfloat  factor, GLfloat  bias);
+  GLEE_EXTERN GLEEPFNGLPOLYGONOFFSETEXTPROC GLeeFuncPtr_glPolygonOffsetEXT;
+  #define glPolygonOffsetEXT GLeeFuncPtr_glPolygonOffsetEXT
+#endif
+#endif 
+
+/* GL_EXT_texture */
+
+#ifndef GL_EXT_texture
+#define GL_EXT_texture 1
+#define __GLEE_GL_EXT_texture 1
+/* Constants */
+#define GL_ALPHA4_EXT                                      0x803B
+#define GL_ALPHA8_EXT                                      0x803C
+#define GL_ALPHA12_EXT                                     0x803D
+#define GL_ALPHA16_EXT                                     0x803E
+#define GL_LUMINANCE4_EXT                                  0x803F
+#define GL_LUMINANCE8_EXT                                  0x8040
+#define GL_LUMINANCE12_EXT                                 0x8041
+#define GL_LUMINANCE16_EXT                                 0x8042
+#define GL_LUMINANCE4_ALPHA4_EXT                           0x8043
+#define GL_LUMINANCE6_ALPHA2_EXT                           0x8044
+#define GL_LUMINANCE8_ALPHA8_EXT                           0x8045
+#define GL_LUMINANCE12_ALPHA4_EXT                          0x8046
+#define GL_LUMINANCE12_ALPHA12_EXT                         0x8047
+#define GL_LUMINANCE16_ALPHA16_EXT                         0x8048
+#define GL_INTENSITY_EXT                                   0x8049
+#define GL_INTENSITY4_EXT                                  0x804A
+#define GL_INTENSITY8_EXT                                  0x804B
+#define GL_INTENSITY12_EXT                                 0x804C
+#define GL_INTENSITY16_EXT                                 0x804D
+#define GL_RGB2_EXT                                        0x804E
+#define GL_RGB4_EXT                                        0x804F
+#define GL_RGB5_EXT                                        0x8050
+#define GL_RGB8_EXT                                        0x8051
+#define GL_RGB10_EXT                                       0x8052
+#define GL_RGB12_EXT                                       0x8053
+#define GL_RGB16_EXT                                       0x8054
+#define GL_RGBA2_EXT                                       0x8055
+#define GL_RGBA4_EXT                                       0x8056
+#define GL_RGB5_A1_EXT                                     0x8057
+#define GL_RGBA8_EXT                                       0x8058
+#define GL_RGB10_A2_EXT                                    0x8059
+#define GL_RGBA12_EXT                                      0x805A
+#define GL_RGBA16_EXT                                      0x805B
+#define GL_TEXTURE_RED_SIZE_EXT                            0x805C
+#define GL_TEXTURE_GREEN_SIZE_EXT                          0x805D
+#define GL_TEXTURE_BLUE_SIZE_EXT                           0x805E
+#define GL_TEXTURE_ALPHA_SIZE_EXT                          0x805F
+#define GL_TEXTURE_LUMINANCE_SIZE_EXT                      0x8060
+#define GL_TEXTURE_INTENSITY_SIZE_EXT                      0x8061
+#define GL_REPLACE_EXT                                     0x8062
+#define GL_PROXY_TEXTURE_1D_EXT                            0x8063
+#define GL_PROXY_TEXTURE_2D_EXT                            0x8064
+#define GL_TEXTURE_TOO_LARGE_EXT                           0x8065
+#endif 
+
+/* GL_EXT_texture3D */
+
+#ifndef GL_EXT_texture3D
+#define GL_EXT_texture3D 1
+#define __GLEE_GL_EXT_texture3D 1
+/* Constants */
+#define GL_PACK_SKIP_IMAGES_EXT                            0x806B
+#define GL_PACK_IMAGE_HEIGHT_EXT                           0x806C
+#define GL_UNPACK_SKIP_IMAGES_EXT                          0x806D
+#define GL_UNPACK_IMAGE_HEIGHT_EXT                         0x806E
+#define GL_TEXTURE_3D_EXT                                  0x806F
+#define GL_PROXY_TEXTURE_3D_EXT                            0x8070
+#define GL_TEXTURE_DEPTH_EXT                               0x8071
+#define GL_TEXTURE_WRAP_R_EXT                              0x8072
+#define GL_MAX_3D_TEXTURE_SIZE_EXT                         0x8073
+#ifndef GLEE_H_DEFINED_glTexImage3DEXT
+#define GLEE_H_DEFINED_glTexImage3DEXT
+  typedef void (APIENTRYP GLEEPFNGLTEXIMAGE3DEXTPROC) (GLenum  target, GLint  level, GLenum  internalformat, GLsizei  width, GLsizei  height, GLsizei  depth, GLint  border, GLenum  format, GLenum  type, const GLvoid * pixels);
+  GLEE_EXTERN GLEEPFNGLTEXIMAGE3DEXTPROC GLeeFuncPtr_glTexImage3DEXT;
+  #define glTexImage3DEXT GLeeFuncPtr_glTexImage3DEXT
+#endif
+#ifndef GLEE_H_DEFINED_glTexSubImage3DEXT
+#define GLEE_H_DEFINED_glTexSubImage3DEXT
+  typedef void (APIENTRYP GLEEPFNGLTEXSUBIMAGE3DEXTPROC) (GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLint  zoffset, GLsizei  width, GLsizei  height, GLsizei  depth, GLenum  format, GLenum  type, const GLvoid * pixels);
+  GLEE_EXTERN GLEEPFNGLTEXSUBIMAGE3DEXTPROC GLeeFuncPtr_glTexSubImage3DEXT;
+  #define glTexSubImage3DEXT GLeeFuncPtr_glTexSubImage3DEXT
+#endif
+#endif 
+
+/* GL_SGIS_texture_filter4 */
+
+#ifndef GL_SGIS_texture_filter4
+#define GL_SGIS_texture_filter4 1
+#define __GLEE_GL_SGIS_texture_filter4 1
+/* Constants */
+#define GL_FILTER4_SGIS                                    0x8146
+#define GL_TEXTURE_FILTER4_SIZE_SGIS                       0x8147
+#ifndef GLEE_H_DEFINED_glGetTexFilterFuncSGIS
+#define GLEE_H_DEFINED_glGetTexFilterFuncSGIS
+  typedef void (APIENTRYP GLEEPFNGLGETTEXFILTERFUNCSGISPROC) (GLenum  target, GLenum  filter, GLfloat * weights);
+  GLEE_EXTERN GLEEPFNGLGETTEXFILTERFUNCSGISPROC GLeeFuncPtr_glGetTexFilterFuncSGIS;
+  #define glGetTexFilterFuncSGIS GLeeFuncPtr_glGetTexFilterFuncSGIS
+#endif
+#ifndef GLEE_H_DEFINED_glTexFilterFuncSGIS
+#define GLEE_H_DEFINED_glTexFilterFuncSGIS
+  typedef void (APIENTRYP GLEEPFNGLTEXFILTERFUNCSGISPROC) (GLenum  target, GLenum  filter, GLsizei  n, const GLfloat * weights);
+  GLEE_EXTERN GLEEPFNGLTEXFILTERFUNCSGISPROC GLeeFuncPtr_glTexFilterFuncSGIS;
+  #define glTexFilterFuncSGIS GLeeFuncPtr_glTexFilterFuncSGIS
+#endif
+#endif 
+
+/* GL_EXT_subtexture */
+
+#ifndef GL_EXT_subtexture
+#define GL_EXT_subtexture 1
+#define __GLEE_GL_EXT_subtexture 1
+/* Constants */
+#ifndef GLEE_H_DEFINED_glTexSubImage1DEXT
+#define GLEE_H_DEFINED_glTexSubImage1DEXT
+  typedef void (APIENTRYP GLEEPFNGLTEXSUBIMAGE1DEXTPROC) (GLenum  target, GLint  level, GLint  xoffset, GLsizei  width, GLenum  format, GLenum  type, const GLvoid * pixels);
+  GLEE_EXTERN GLEEPFNGLTEXSUBIMAGE1DEXTPROC GLeeFuncPtr_glTexSubImage1DEXT;
+  #define glTexSubImage1DEXT GLeeFuncPtr_glTexSubImage1DEXT
+#endif
+#ifndef GLEE_H_DEFINED_glTexSubImage2DEXT
+#define GLEE_H_DEFINED_glTexSubImage2DEXT
+  typedef void (APIENTRYP GLEEPFNGLTEXSUBIMAGE2DEXTPROC) (GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLsizei  width, GLsizei  height, GLenum  format, GLenum  type, const GLvoid * pixels);
+  GLEE_EXTERN GLEEPFNGLTEXSUBIMAGE2DEXTPROC GLeeFuncPtr_glTexSubImage2DEXT;
+  #define glTexSubImage2DEXT GLeeFuncPtr_glTexSubImage2DEXT
+#endif
+#endif 
+
+/* GL_EXT_copy_texture */
+
+#ifndef GL_EXT_copy_texture
+#define GL_EXT_copy_texture 1
+#define __GLEE_GL_EXT_copy_texture 1
+/* Constants */
+#ifndef GLEE_H_DEFINED_glCopyTexImage1DEXT
+#define GLEE_H_DEFINED_glCopyTexImage1DEXT
+  typedef void (APIENTRYP GLEEPFNGLCOPYTEXIMAGE1DEXTPROC) (GLenum  target, GLint  level, GLenum  internalformat, GLint  x, GLint  y, GLsizei  width, GLint  border);
+  GLEE_EXTERN GLEEPFNGLCOPYTEXIMAGE1DEXTPROC GLeeFuncPtr_glCopyTexImage1DEXT;
+  #define glCopyTexImage1DEXT GLeeFuncPtr_glCopyTexImage1DEXT
+#endif
+#ifndef GLEE_H_DEFINED_glCopyTexImage2DEXT
+#define GLEE_H_DEFINED_glCopyTexImage2DEXT
+  typedef void (APIENTRYP GLEEPFNGLCOPYTEXIMAGE2DEXTPROC) (GLenum  target, GLint  level, GLenum  internalformat, GLint  x, GLint  y, GLsizei  width, GLsizei  height, GLint  border);
+  GLEE_EXTERN GLEEPFNGLCOPYTEXIMAGE2DEXTPROC GLeeFuncPtr_glCopyTexImage2DEXT;
+  #define glCopyTexImage2DEXT GLeeFuncPtr_glCopyTexImage2DEXT
+#endif
+#ifndef GLEE_H_DEFINED_glCopyTexSubImage1DEXT
+#define GLEE_H_DEFINED_glCopyTexSubImage1DEXT
+  typedef void (APIENTRYP GLEEPFNGLCOPYTEXSUBIMAGE1DEXTPROC) (GLenum  target, GLint  level, GLint  xoffset, GLint  x, GLint  y, GLsizei  width);
+  GLEE_EXTERN GLEEPFNGLCOPYTEXSUBIMAGE1DEXTPROC GLeeFuncPtr_glCopyTexSubImage1DEXT;
+  #define glCopyTexSubImage1DEXT GLeeFuncPtr_glCopyTexSubImage1DEXT
+#endif
+#ifndef GLEE_H_DEFINED_glCopyTexSubImage2DEXT
+#define GLEE_H_DEFINED_glCopyTexSubImage2DEXT
+  typedef void (APIENTRYP GLEEPFNGLCOPYTEXSUBIMAGE2DEXTPROC) (GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLint  x, GLint  y, GLsizei  width, GLsizei  height);
+  GLEE_EXTERN GLEEPFNGLCOPYTEXSUBIMAGE2DEXTPROC GLeeFuncPtr_glCopyTexSubImage2DEXT;
+  #define glCopyTexSubImage2DEXT GLeeFuncPtr_glCopyTexSubImage2DEXT
+#endif
+#ifndef GLEE_H_DEFINED_glCopyTexSubImage3DEXT
+#define GLEE_H_DEFINED_glCopyTexSubImage3DEXT
+  typedef void (APIENTRYP GLEEPFNGLCOPYTEXSUBIMAGE3DEXTPROC) (GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLint  zoffset, GLint  x, GLint  y, GLsizei  width, GLsizei  height);
+  GLEE_EXTERN GLEEPFNGLCOPYTEXSUBIMAGE3DEXTPROC GLeeFuncPtr_glCopyTexSubImage3DEXT;
+  #define glCopyTexSubImage3DEXT GLeeFuncPtr_glCopyTexSubImage3DEXT
+#endif
+#endif 
+
+/* GL_EXT_histogram */
+
+#ifndef GL_EXT_histogram
+#define GL_EXT_histogram 1
+#define __GLEE_GL_EXT_histogram 1
+/* Constants */
+#define GL_HISTOGRAM_EXT                                   0x8024
+#define GL_PROXY_HISTOGRAM_EXT                             0x8025
+#define GL_HISTOGRAM_WIDTH_EXT                             0x8026
+#define GL_HISTOGRAM_FORMAT_EXT                            0x8027
+#define GL_HISTOGRAM_RED_SIZE_EXT                          0x8028
+#define GL_HISTOGRAM_GREEN_SIZE_EXT                        0x8029
+#define GL_HISTOGRAM_BLUE_SIZE_EXT                         0x802A
+#define GL_HISTOGRAM_ALPHA_SIZE_EXT                        0x802B
+#define GL_HISTOGRAM_LUMINANCE_SIZE_EXT                    0x802C
+#define GL_HISTOGRAM_SINK_EXT                              0x802D
+#define GL_MINMAX_EXT                                      0x802E
+#define GL_MINMAX_FORMAT_EXT                               0x802F
+#define GL_MINMAX_SINK_EXT                                 0x8030
+#define GL_TABLE_TOO_LARGE_EXT                             0x8031
+#ifndef GLEE_H_DEFINED_glGetHistogramEXT
+#define GLEE_H_DEFINED_glGetHistogramEXT
+  typedef void (APIENTRYP GLEEPFNGLGETHISTOGRAMEXTPROC) (GLenum  target, GLboolean  reset, GLenum  format, GLenum  type, GLvoid * values);
+  GLEE_EXTERN GLEEPFNGLGETHISTOGRAMEXTPROC GLeeFuncPtr_glGetHistogramEXT;
+  #define glGetHistogramEXT GLeeFuncPtr_glGetHistogramEXT
+#endif
+#ifndef GLEE_H_DEFINED_glGetHistogramParameterfvEXT
+#define GLEE_H_DEFINED_glGetHistogramParameterfvEXT
+  typedef void (APIENTRYP GLEEPFNGLGETHISTOGRAMPARAMETERFVEXTPROC) (GLenum  target, GLenum  pname, GLfloat * params);
+  GLEE_EXTERN GLEEPFNGLGETHISTOGRAMPARAMETERFVEXTPROC GLeeFuncPtr_glGetHistogramParameterfvEXT;
+  #define glGetHistogramParameterfvEXT GLeeFuncPtr_glGetHistogramParameterfvEXT
+#endif
+#ifndef GLEE_H_DEFINED_glGetHistogramParameterivEXT
+#define GLEE_H_DEFINED_glGetHistogramParameterivEXT
+  typedef void (APIENTRYP GLEEPFNGLGETHISTOGRAMPARAMETERIVEXTPROC) (GLenum  target, GLenum  pname, GLint * params);
+  GLEE_EXTERN GLEEPFNGLGETHISTOGRAMPARAMETERIVEXTPROC GLeeFuncPtr_glGetHistogramParameterivEXT;
+  #define glGetHistogramParameterivEXT GLeeFuncPtr_glGetHistogramParameterivEXT
+#endif
+#ifndef GLEE_H_DEFINED_glGetMinmaxEXT
+#define GLEE_H_DEFINED_glGetMinmaxEXT
+  typedef void (APIENTRYP GLEEPFNGLGETMINMAXEXTPROC) (GLenum  target, GLboolean  reset, GLenum  format, GLenum  type, GLvoid * values);
+  GLEE_EXTERN GLEEPFNGLGETMINMAXEXTPROC GLeeFuncPtr_glGetMinmaxEXT;
+  #define glGetMinmaxEXT GLeeFuncPtr_glGetMinmaxEXT
+#endif
+#ifndef GLEE_H_DEFINED_glGetMinmaxParameterfvEXT
+#define GLEE_H_DEFINED_glGetMinmaxParameterfvEXT
+  typedef void (APIENTRYP GLEEPFNGLGETMINMAXPARAMETERFVEXTPROC) (GLenum  target, GLenum  pname, GLfloat * params);
+  GLEE_EXTERN GLEEPFNGLGETMINMAXPARAMETERFVEXTPROC GLeeFuncPtr_glGetMinmaxParameterfvEXT;
+  #define glGetMinmaxParameterfvEXT GLeeFuncPtr_glGetMinmaxParameterfvEXT
+#endif
+#ifndef GLEE_H_DEFINED_glGetMinmaxParameterivEXT
+#define GLEE_H_DEFINED_glGetMinmaxParameterivEXT
+  typedef void (APIENTRYP GLEEPFNGLGETMINMAXPARAMETERIVEXTPROC) (GLenum  target, GLenum  pname, GLint * params);
+  GLEE_EXTERN GLEEPFNGLGETMINMAXPARAMETERIVEXTPROC GLeeFuncPtr_glGetMinmaxParameterivEXT;
+  #define glGetMinmaxParameterivEXT GLeeFuncPtr_glGetMinmaxParameterivEXT
+#endif
+#ifndef GLEE_H_DEFINED_glHistogramEXT
+#define GLEE_H_DEFINED_glHistogramEXT
+  typedef void (APIENTRYP GLEEPFNGLHISTOGRAMEXTPROC) (GLenum  target, GLsizei  width, GLenum  internalformat, GLboolean  sink);
+  GLEE_EXTERN GLEEPFNGLHISTOGRAMEXTPROC GLeeFuncPtr_glHistogramEXT;
+  #define glHistogramEXT GLeeFuncPtr_glHistogramEXT
+#endif
+#ifndef GLEE_H_DEFINED_glMinmaxEXT
+#define GLEE_H_DEFINED_glMinmaxEXT
+  typedef void (APIENTRYP GLEEPFNGLMINMAXEXTPROC) (GLenum  target, GLenum  internalformat, GLboolean  sink);
+  GLEE_EXTERN GLEEPFNGLMINMAXEXTPROC GLeeFuncPtr_glMinmaxEXT;
+  #define glMinmaxEXT GLeeFuncPtr_glMinmaxEXT
+#endif
+#ifndef GLEE_H_DEFINED_glResetHistogramEXT
+#define GLEE_H_DEFINED_glResetHistogramEXT
+  typedef void (APIENTRYP GLEEPFNGLRESETHISTOGRAMEXTPROC) (GLenum  target);
+  GLEE_EXTERN GLEEPFNGLRESETHISTOGRAMEXTPROC GLeeFuncPtr_glResetHistogramEXT;
+  #define glResetHistogramEXT GLeeFuncPtr_glResetHistogramEXT
+#endif
+#ifndef GLEE_H_DEFINED_glResetMinmaxEXT
+#define GLEE_H_DEFINED_glResetMinmaxEXT
+  typedef void (APIENTRYP GLEEPFNGLRESETMINMAXEXTPROC) (GLenum  target);
+  GLEE_EXTERN GLEEPFNGLRESETMINMAXEXTPROC GLeeFuncPtr_glResetMinmaxEXT;
+  #define glResetMinmaxEXT GLeeFuncPtr_glResetMinmaxEXT
+#endif
+#endif 
+
+/* GL_EXT_convolution */
+
+#ifndef GL_EXT_convolution
+#define GL_EXT_convolution 1
+#define __GLEE_GL_EXT_convolution 1
+/* Constants */
+#define GL_CONVOLUTION_1D_EXT                              0x8010
+#define GL_CONVOLUTION_2D_EXT                              0x8011
+#define GL_SEPARABLE_2D_EXT                                0x8012
+#define GL_CONVOLUTION_BORDER_MODE_EXT                     0x8013
+#define GL_CONVOLUTION_FILTER_SCALE_EXT                    0x8014
+#define GL_CONVOLUTION_FILTER_BIAS_EXT                     0x8015
+#define GL_REDUCE_EXT                                      0x8016
+#define GL_CONVOLUTION_FORMAT_EXT                          0x8017
+#define GL_CONVOLUTION_WIDTH_EXT                           0x8018
+#define GL_CONVOLUTION_HEIGHT_EXT                          0x8019
+#define GL_MAX_CONVOLUTION_WIDTH_EXT                       0x801A
+#define GL_MAX_CONVOLUTION_HEIGHT_EXT                      0x801B
+#define GL_POST_CONVOLUTION_RED_SCALE_EXT                  0x801C
+#define GL_POST_CONVOLUTION_GREEN_SCALE_EXT                0x801D
+#define GL_POST_CONVOLUTION_BLUE_SCALE_EXT                 0x801E
+#define GL_POST_CONVOLUTION_ALPHA_SCALE_EXT                0x801F
+#define GL_POST_CONVOLUTION_RED_BIAS_EXT                   0x8020
+#define GL_POST_CONVOLUTION_GREEN_BIAS_EXT                 0x8021
+#define GL_POST_CONVOLUTION_BLUE_BIAS_EXT                  0x8022
+#define GL_POST_CONVOLUTION_ALPHA_BIAS_EXT                 0x8023
+#ifndef GLEE_H_DEFINED_glConvolutionFilter1DEXT
+#define GLEE_H_DEFINED_glConvolutionFilter1DEXT
+  typedef void (APIENTRYP GLEEPFNGLCONVOLUTIONFILTER1DEXTPROC) (GLenum  target, GLenum  internalformat, GLsizei  width, GLenum  format, GLenum  type, const GLvoid * image);
+  GLEE_EXTERN GLEEPFNGLCONVOLUTIONFILTER1DEXTPROC GLeeFuncPtr_glConvolutionFilter1DEXT;
+  #define glConvolutionFilter1DEXT GLeeFuncPtr_glConvolutionFilter1DEXT
+#endif
+#ifndef GLEE_H_DEFINED_glConvolutionFilter2DEXT
+#define GLEE_H_DEFINED_glConvolutionFilter2DEXT
+  typedef void (APIENTRYP GLEEPFNGLCONVOLUTIONFILTER2DEXTPROC) (GLenum  target, GLenum  internalformat, GLsizei  width, GLsizei  height, GLenum  format, GLenum  type, const GLvoid * image);
+  GLEE_EXTERN GLEEPFNGLCONVOLUTIONFILTER2DEXTPROC GLeeFuncPtr_glConvolutionFilter2DEXT;
+  #define glConvolutionFilter2DEXT GLeeFuncPtr_glConvolutionFilter2DEXT
+#endif
+#ifndef GLEE_H_DEFINED_glConvolutionParameterfEXT
+#define GLEE_H_DEFINED_glConvolutionParameterfEXT
+  typedef void (APIENTRYP GLEEPFNGLCONVOLUTIONPARAMETERFEXTPROC) (GLenum  target, GLenum  pname, GLfloat  params);
+  GLEE_EXTERN GLEEPFNGLCONVOLUTIONPARAMETERFEXTPROC GLeeFuncPtr_glConvolutionParameterfEXT;
+  #define glConvolutionParameterfEXT GLeeFuncPtr_glConvolutionParameterfEXT
+#endif
+#ifndef GLEE_H_DEFINED_glConvolutionParameterfvEXT
+#define GLEE_H_DEFINED_glConvolutionParameterfvEXT
+  typedef void (APIENTRYP GLEEPFNGLCONVOLUTIONPARAMETERFVEXTPROC) (GLenum  target, GLenum  pname, const GLfloat * params);
+  GLEE_EXTERN GLEEPFNGLCONVOLUTIONPARAMETERFVEXTPROC GLeeFuncPtr_glConvolutionParameterfvEXT;
+  #define glConvolutionParameterfvEXT GLeeFuncPtr_glConvolutionParameterfvEXT
+#endif
+#ifndef GLEE_H_DEFINED_glConvolutionParameteriEXT
+#define GLEE_H_DEFINED_glConvolutionParameteriEXT
+  typedef void (APIENTRYP GLEEPFNGLCONVOLUTIONPARAMETERIEXTPROC) (GLenum  target, GLenum  pname, GLint  params);
+  GLEE_EXTERN GLEEPFNGLCONVOLUTIONPARAMETERIEXTPROC GLeeFuncPtr_glConvolutionParameteriEXT;
+  #define glConvolutionParameteriEXT GLeeFuncPtr_glConvolutionParameteriEXT
+#endif
+#ifndef GLEE_H_DEFINED_glConvolutionParameterivEXT
+#define GLEE_H_DEFINED_glConvolutionParameterivEXT
+  typedef void (APIENTRYP GLEEPFNGLCONVOLUTIONPARAMETERIVEXTPROC) (GLenum  target, GLenum  pname, const GLint * params);
+  GLEE_EXTERN GLEEPFNGLCONVOLUTIONPARAMETERIVEXTPROC GLeeFuncPtr_glConvolutionParameterivEXT;
+  #define glConvolutionParameterivEXT GLeeFuncPtr_glConvolutionParameterivEXT
+#endif
+#ifndef GLEE_H_DEFINED_glCopyConvolutionFilter1DEXT
+#define GLEE_H_DEFINED_glCopyConvolutionFilter1DEXT
+  typedef void (APIENTRYP GLEEPFNGLCOPYCONVOLUTIONFILTER1DEXTPROC) (GLenum  target, GLenum  internalformat, GLint  x, GLint  y, GLsizei  width);
+  GLEE_EXTERN GLEEPFNGLCOPYCONVOLUTIONFILTER1DEXTPROC GLeeFuncPtr_glCopyConvolutionFilter1DEXT;
+  #define glCopyConvolutionFilter1DEXT GLeeFuncPtr_glCopyConvolutionFilter1DEXT
+#endif
+#ifndef GLEE_H_DEFINED_glCopyConvolutionFilter2DEXT
+#define GLEE_H_DEFINED_glCopyConvolutionFilter2DEXT
+  typedef void (APIENTRYP GLEEPFNGLCOPYCONVOLUTIONFILTER2DEXTPROC) (GLenum  target, GLenum  internalformat, GLint  x, GLint  y, GLsizei  width, GLsizei  height);
+  GLEE_EXTERN GLEEPFNGLCOPYCONVOLUTIONFILTER2DEXTPROC GLeeFuncPtr_glCopyConvolutionFilter2DEXT;
+  #define glCopyConvolutionFilter2DEXT GLeeFuncPtr_glCopyConvolutionFilter2DEXT
+#endif
+#ifndef GLEE_H_DEFINED_glGetConvolutionFilterEXT
+#define GLEE_H_DEFINED_glGetConvolutionFilterEXT
+  typedef void (APIENTRYP GLEEPFNGLGETCONVOLUTIONFILTEREXTPROC) (GLenum  target, GLenum  format, GLenum  type, GLvoid * image);
+  GLEE_EXTERN GLEEPFNGLGETCONVOLUTIONFILTEREXTPROC GLeeFuncPtr_glGetConvolutionFilterEXT;
+  #define glGetConvolutionFilterEXT GLeeFuncPtr_glGetConvolutionFilterEXT
+#endif
+#ifndef GLEE_H_DEFINED_glGetConvolutionParameterfvEXT
+#define GLEE_H_DEFINED_glGetConvolutionParameterfvEXT
+  typedef void (APIENTRYP GLEEPFNGLGETCONVOLUTIONPARAMETERFVEXTPROC) (GLenum  target, GLenum  pname, GLfloat * params);
+  GLEE_EXTERN GLEEPFNGLGETCONVOLUTIONPARAMETERFVEXTPROC GLeeFuncPtr_glGetConvolutionParameterfvEXT;
+  #define glGetConvolutionParameterfvEXT GLeeFuncPtr_glGetConvolutionParameterfvEXT
+#endif
+#ifndef GLEE_H_DEFINED_glGetConvolutionParameterivEXT
+#define GLEE_H_DEFINED_glGetConvolutionParameterivEXT
+  typedef void (APIENTRYP GLEEPFNGLGETCONVOLUTIONPARAMETERIVEXTPROC) (GLenum  target, GLenum  pname, GLint * params);
+  GLEE_EXTERN GLEEPFNGLGETCONVOLUTIONPARAMETERIVEXTPROC GLeeFuncPtr_glGetConvolutionParameterivEXT;
+  #define glGetConvolutionParameterivEXT GLeeFuncPtr_glGetConvolutionParameterivEXT
+#endif
+#ifndef GLEE_H_DEFINED_glGetSeparableFilterEXT
+#define GLEE_H_DEFINED_glGetSeparableFilterEXT
+  typedef void (APIENTRYP GLEEPFNGLGETSEPARABLEFILTEREXTPROC) (GLenum  target, GLenum  format, GLenum  type, GLvoid * row, GLvoid * column, GLvoid * span);
+  GLEE_EXTERN GLEEPFNGLGETSEPARABLEFILTEREXTPROC GLeeFuncPtr_glGetSeparableFilterEXT;
+  #define glGetSeparableFilterEXT GLeeFuncPtr_glGetSeparableFilterEXT
+#endif
+#ifndef GLEE_H_DEFINED_glSeparableFilter2DEXT
+#define GLEE_H_DEFINED_glSeparableFilter2DEXT
+  typedef void (APIENTRYP GLEEPFNGLSEPARABLEFILTER2DEXTPROC) (GLenum  target, GLenum  internalformat, GLsizei  width, GLsizei  height, GLenum  format, GLenum  type, const GLvoid * row, const GLvoid * column);
+  GLEE_EXTERN GLEEPFNGLSEPARABLEFILTER2DEXTPROC GLeeFuncPtr_glSeparableFilter2DEXT;
+  #define glSeparableFilter2DEXT GLeeFuncPtr_glSeparableFilter2DEXT
+#endif
+#endif 
+
+/* GL_SGI_color_matrix */
+
+#ifndef GL_SGI_color_matrix
+#define GL_SGI_color_matrix 1
+#define __GLEE_GL_SGI_color_matrix 1
+/* Constants */
+#define GL_COLOR_MATRIX_SGI                                0x80B1
+#define GL_COLOR_MATRIX_STACK_DEPTH_SGI                    0x80B2
+#define GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI                0x80B3
+#define GL_POST_COLOR_MATRIX_RED_SCALE_SGI                 0x80B4
+#define GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI               0x80B5
+#define GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI                0x80B6
+#define GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI               0x80B7
+#define GL_POST_COLOR_MATRIX_RED_BIAS_SGI                  0x80B8
+#define GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI                0x80B9
+#define GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI                 0x80BA
+#define GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI                0x80BB
+#endif 
+
+/* GL_SGI_color_table */
+
+#ifndef GL_SGI_color_table
+#define GL_SGI_color_table 1
+#define __GLEE_GL_SGI_color_table 1
+/* Constants */
+#define GL_COLOR_TABLE_SGI                                 0x80D0
+#define GL_POST_CONVOLUTION_COLOR_TABLE_SGI                0x80D1
+#define GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI               0x80D2
+#define GL_PROXY_COLOR_TABLE_SGI                           0x80D3
+#define GL_PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI          0x80D4
+#define GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI         0x80D5
+#define GL_COLOR_TABLE_SCALE_SGI                           0x80D6
+#define GL_COLOR_TABLE_BIAS_SGI                            0x80D7
+#define GL_COLOR_TABLE_FORMAT_SGI                          0x80D8
+#define GL_COLOR_TABLE_WIDTH_SGI                           0x80D9
+#define GL_COLOR_TABLE_RED_SIZE_SGI                        0x80DA
+#define GL_COLOR_TABLE_GREEN_SIZE_SGI                      0x80DB
+#define GL_COLOR_TABLE_BLUE_SIZE_SGI                       0x80DC
+#define GL_COLOR_TABLE_ALPHA_SIZE_SGI                      0x80DD
+#define GL_COLOR_TABLE_LUMINANCE_SIZE_SGI                  0x80DE
+#define GL_COLOR_TABLE_INTENSITY_SIZE_SGI                  0x80DF
+#ifndef GLEE_H_DEFINED_glColorTableSGI
+#define GLEE_H_DEFINED_glColorTableSGI
+  typedef void (APIENTRYP GLEEPFNGLCOLORTABLESGIPROC) (GLenum  target, GLenum  internalformat, GLsizei  width, GLenum  format, GLenum  type, const GLvoid * table);
+  GLEE_EXTERN GLEEPFNGLCOLORTABLESGIPROC GLeeFuncPtr_glColorTableSGI;
+  #define glColorTableSGI GLeeFuncPtr_glColorTableSGI
+#endif
+#ifndef GLEE_H_DEFINED_glColorTableParameterfvSGI
+#define GLEE_H_DEFINED_glColorTableParameterfvSGI
+  typedef void (APIENTRYP GLEEPFNGLCOLORTABLEPARAMETERFVSGIPROC) (GLenum  target, GLenum  pname, const GLfloat * params);
+  GLEE_EXTERN GLEEPFNGLCOLORTABLEPARAMETERFVSGIPROC GLeeFuncPtr_glColorTableParameterfvSGI;
+  #define glColorTableParameterfvSGI GLeeFuncPtr_glColorTableParameterfvSGI
+#endif
+#ifndef GLEE_H_DEFINED_glColorTableParameterivSGI
+#define GLEE_H_DEFINED_glColorTableParameterivSGI
+  typedef void (APIENTRYP GLEEPFNGLCOLORTABLEPARAMETERIVSGIPROC) (GLenum  target, GLenum  pname, const GLint * params);
+  GLEE_EXTERN GLEEPFNGLCOLORTABLEPARAMETERIVSGIPROC GLeeFuncPtr_glColorTableParameterivSGI;
+  #define glColorTableParameterivSGI GLeeFuncPtr_glColorTableParameterivSGI
+#endif
+#ifndef GLEE_H_DEFINED_glCopyColorTableSGI
+#define GLEE_H_DEFINED_glCopyColorTableSGI
+  typedef void (APIENTRYP GLEEPFNGLCOPYCOLORTABLESGIPROC) (GLenum  target, GLenum  internalformat, GLint  x, GLint  y, GLsizei  width);
+  GLEE_EXTERN GLEEPFNGLCOPYCOLORTABLESGIPROC GLeeFuncPtr_glCopyColorTableSGI;
+  #define glCopyColorTableSGI GLeeFuncPtr_glCopyColorTableSGI
+#endif
+#ifndef GLEE_H_DEFINED_glGetColorTableSGI
+#define GLEE_H_DEFINED_glGetColorTableSGI
+  typedef void (APIENTRYP GLEEPFNGLGETCOLORTABLESGIPROC) (GLenum  target, GLenum  format, GLenum  type, GLvoid * table);
+  GLEE_EXTERN GLEEPFNGLGETCOLORTABLESGIPROC GLeeFuncPtr_glGetColorTableSGI;
+  #define glGetColorTableSGI GLeeFuncPtr_glGetColorTableSGI
+#endif
+#ifndef GLEE_H_DEFINED_glGetColorTableParameterfvSGI
+#define GLEE_H_DEFINED_glGetColorTableParameterfvSGI
+  typedef void (APIENTRYP GLEEPFNGLGETCOLORTABLEPARAMETERFVSGIPROC) (GLenum  target, GLenum  pname, GLfloat * params);
+  GLEE_EXTERN GLEEPFNGLGETCOLORTABLEPARAMETERFVSGIPROC GLeeFuncPtr_glGetColorTableParameterfvSGI;
+  #define glGetColorTableParameterfvSGI GLeeFuncPtr_glGetColorTableParameterfvSGI
+#endif
+#ifndef GLEE_H_DEFINED_glGetColorTableParameterivSGI
+#define GLEE_H_DEFINED_glGetColorTableParameterivSGI
+  typedef void (APIENTRYP GLEEPFNGLGETCOLORTABLEPARAMETERIVSGIPROC) (GLenum  target, GLenum  pname, GLint * params);
+  GLEE_EXTERN GLEEPFNGLGETCOLORTABLEPARAMETERIVSGIPROC GLeeFuncPtr_glGetColorTableParameterivSGI;
+  #define glGetColorTableParameterivSGI GLeeFuncPtr_glGetColorTableParameterivSGI
+#endif
+#endif 
+
+/* GL_SGIS_pixel_texture */
+
+#ifndef GL_SGIS_pixel_texture
+#define GL_SGIS_pixel_texture 1
+#define __GLEE_GL_SGIS_pixel_texture 1
+/* Constants */
+#define GL_PIXEL_TEXTURE_SGIS                              0x8353
+#define GL_PIXEL_FRAGMENT_RGB_SOURCE_SGIS                  0x8354
+#define GL_PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS                0x8355
+#define GL_PIXEL_GROUP_COLOR_SGIS                          0x8356
+#ifndef GLEE_H_DEFINED_glPixelTexGenParameteriSGIS
+#define GLEE_H_DEFINED_glPixelTexGenParameteriSGIS
+  typedef void (APIENTRYP GLEEPFNGLPIXELTEXGENPARAMETERISGISPROC) (GLenum  pname, GLint  param);
+  GLEE_EXTERN GLEEPFNGLPIXELTEXGENPARAMETERISGISPROC GLeeFuncPtr_glPixelTexGenParameteriSGIS;
+  #define glPixelTexGenParameteriSGIS GLeeFuncPtr_glPixelTexGenParameteriSGIS
+#endif
+#ifndef GLEE_H_DEFINED_glPixelTexGenParameterivSGIS
+#define GLEE_H_DEFINED_glPixelTexGenParameterivSGIS
+  typedef void (APIENTRYP GLEEPFNGLPIXELTEXGENPARAMETERIVSGISPROC) (GLenum  pname, const GLint * params);
+  GLEE_EXTERN GLEEPFNGLPIXELTEXGENPARAMETERIVSGISPROC GLeeFuncPtr_glPixelTexGenParameterivSGIS;
+  #define glPixelTexGenParameterivSGIS GLeeFuncPtr_glPixelTexGenParameterivSGIS
+#endif
+#ifndef GLEE_H_DEFINED_glPixelTexGenParameterfSGIS
+#define GLEE_H_DEFINED_glPixelTexGenParameterfSGIS
+  typedef void (APIENTRYP GLEEPFNGLPIXELTEXGENPARAMETERFSGISPROC) (GLenum  pname, GLfloat  param);
+  GLEE_EXTERN GLEEPFNGLPIXELTEXGENPARAMETERFSGISPROC GLeeFuncPtr_glPixelTexGenParameterfSGIS;
+  #define glPixelTexGenParameterfSGIS GLeeFuncPtr_glPixelTexGenParameterfSGIS
+#endif
+#ifndef GLEE_H_DEFINED_glPixelTexGenParameterfvSGIS
+#define GLEE_H_DEFINED_glPixelTexGenParameterfvSGIS
+  typedef void (APIENTRYP GLEEPFNGLPIXELTEXGENPARAMETERFVSGISPROC) (GLenum  pname, const GLfloat * params);
+  GLEE_EXTERN GLEEPFNGLPIXELTEXGENPARAMETERFVSGISPROC GLeeFuncPtr_glPixelTexGenParameterfvSGIS;
+  #define glPixelTexGenParameterfvSGIS GLeeFuncPtr_glPixelTexGenParameterfvSGIS
+#endif
+#ifndef GLEE_H_DEFINED_glGetPixelTexGenParameterivSGIS
+#define GLEE_H_DEFINED_glGetPixelTexGenParameterivSGIS
+  typedef void (APIENTRYP GLEEPFNGLGETPIXELTEXGENPARAMETERIVSGISPROC) (GLenum  pname, GLint * params);
+  GLEE_EXTERN GLEEPFNGLGETPIXELTEXGENPARAMETERIVSGISPROC GLeeFuncPtr_glGetPixelTexGenParameterivSGIS;
+  #define glGetPixelTexGenParameterivSGIS GLeeFuncPtr_glGetPixelTexGenParameterivSGIS
+#endif
+#ifndef GLEE_H_DEFINED_glGetPixelTexGenParameterfvSGIS
+#define GLEE_H_DEFINED_glGetPixelTexGenParameterfvSGIS
+  typedef void (APIENTRYP GLEEPFNGLGETPIXELTEXGENPARAMETERFVSGISPROC) (GLenum  pname, GLfloat * params);
+  GLEE_EXTERN GLEEPFNGLGETPIXELTEXGENPARAMETERFVSGISPROC GLeeFuncPtr_glGetPixelTexGenParameterfvSGIS;
+  #define glGetPixelTexGenParameterfvSGIS GLeeFuncPtr_glGetPixelTexGenParameterfvSGIS
+#endif
+#endif 
+
+/* GL_SGIX_pixel_texture */
+
+#ifndef GL_SGIX_pixel_texture
+#define GL_SGIX_pixel_texture 1
+#define __GLEE_GL_SGIX_pixel_texture 1
+/* Constants */
+#define GL_PIXEL_TEX_GEN_SGIX                              0x8139
+#define GL_PIXEL_TEX_GEN_MODE_SGIX                         0x832B
+#ifndef GLEE_H_DEFINED_glPixelTexGenSGIX
+#define GLEE_H_DEFINED_glPixelTexGenSGIX
+  typedef void (APIENTRYP GLEEPFNGLPIXELTEXGENSGIXPROC) (GLenum  mode);
+  GLEE_EXTERN GLEEPFNGLPIXELTEXGENSGIXPROC GLeeFuncPtr_glPixelTexGenSGIX;
+  #define glPixelTexGenSGIX GLeeFuncPtr_glPixelTexGenSGIX
+#endif
+#endif 
+
+/* GL_SGIS_texture4D */
+
+#ifndef GL_SGIS_texture4D
+#define GL_SGIS_texture4D 1
+#define __GLEE_GL_SGIS_texture4D 1
+/* Constants */
+#define GL_PACK_SKIP_VOLUMES_SGIS                          0x8130
+#define GL_PACK_IMAGE_DEPTH_SGIS                           0x8131
+#define GL_UNPACK_SKIP_VOLUMES_SGIS                        0x8132
+#define GL_UNPACK_IMAGE_DEPTH_SGIS                         0x8133
+#define GL_TEXTURE_4D_SGIS                                 0x8134
+#define GL_PROXY_TEXTURE_4D_SGIS                           0x8135
+#define GL_TEXTURE_4DSIZE_SGIS                             0x8136
+#define GL_TEXTURE_WRAP_Q_SGIS                             0x8137
+#define GL_MAX_4D_TEXTURE_SIZE_SGIS                        0x8138
+#define GL_TEXTURE_4D_BINDING_SGIS                         0x814F
+#ifndef GLEE_H_DEFINED_glTexImage4DSGIS
+#define GLEE_H_DEFINED_glTexImage4DSGIS
+  typedef void (APIENTRYP GLEEPFNGLTEXIMAGE4DSGISPROC) (GLenum  target, GLint  level, GLenum  internalformat, GLsizei  width, GLsizei  height, GLsizei  depth, GLsizei  size4d, GLint  border, GLenum  format, GLenum  type, const GLvoid * pixels);
+  GLEE_EXTERN GLEEPFNGLTEXIMAGE4DSGISPROC GLeeFuncPtr_glTexImage4DSGIS;
+  #define glTexImage4DSGIS GLeeFuncPtr_glTexImage4DSGIS
+#endif
+#ifndef GLEE_H_DEFINED_glTexSubImage4DSGIS
+#define GLEE_H_DEFINED_glTexSubImage4DSGIS
+  typedef void (APIENTRYP GLEEPFNGLTEXSUBIMAGE4DSGISPROC) (GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLint  zoffset, GLint  woffset, GLsizei  width, GLsizei  height, GLsizei  depth, GLsizei  size4d, GLenum  format, GLenum  type, const GLvoid * pixels);
+  GLEE_EXTERN GLEEPFNGLTEXSUBIMAGE4DSGISPROC GLeeFuncPtr_glTexSubImage4DSGIS;
+  #define glTexSubImage4DSGIS GLeeFuncPtr_glTexSubImage4DSGIS
+#endif
+#endif 
+
+/* GL_SGI_texture_color_table */
+
+#ifndef GL_SGI_texture_color_table
+#define GL_SGI_texture_color_table 1
+#define __GLEE_GL_SGI_texture_color_table 1
+/* Constants */
+#define GL_TEXTURE_COLOR_TABLE_SGI                         0x80BC
+#define GL_PROXY_TEXTURE_COLOR_TABLE_SGI                   0x80BD
+#endif 
+
+/* GL_EXT_cmyka */
+
+#ifndef GL_EXT_cmyka
+#define GL_EXT_cmyka 1
+#define __GLEE_GL_EXT_cmyka 1
+/* Constants */
+#define GL_CMYK_EXT                                        0x800C
+#define GL_CMYKA_EXT                                       0x800D
+#define GL_PACK_CMYK_HINT_EXT                              0x800E
+#define GL_UNPACK_CMYK_HINT_EXT                            0x800F
+#endif 
+
+/* GL_EXT_texture_object */
+
+#ifndef GL_EXT_texture_object
+#define GL_EXT_texture_object 1
+#define __GLEE_GL_EXT_texture_object 1
+/* Constants */
+#define GL_TEXTURE_PRIORITY_EXT                            0x8066
+#define GL_TEXTURE_RESIDENT_EXT                            0x8067
+#define GL_TEXTURE_1D_BINDING_EXT                          0x8068
+#define GL_TEXTURE_2D_BINDING_EXT                          0x8069
+#define GL_TEXTURE_3D_BINDING_EXT                          0x806A
+#ifndef GLEE_H_DEFINED_glAreTexturesResidentEXT
+#define GLEE_H_DEFINED_glAreTexturesResidentEXT
+  typedef GLboolean (APIENTRYP GLEEPFNGLARETEXTURESRESIDENTEXTPROC) (GLsizei  n, const GLuint * textures, GLboolean * residences);
+  GLEE_EXTERN GLEEPFNGLARETEXTURESRESIDENTEXTPROC GLeeFuncPtr_glAreTexturesResidentEXT;
+  #define glAreTexturesResidentEXT GLeeFuncPtr_glAreTexturesResidentEXT
+#endif
+#ifndef GLEE_H_DEFINED_glBindTextureEXT
+#define GLEE_H_DEFINED_glBindTextureEXT
+  typedef void (APIENTRYP GLEEPFNGLBINDTEXTUREEXTPROC) (GLenum  target, GLuint  texture);
+  GLEE_EXTERN GLEEPFNGLBINDTEXTUREEXTPROC GLeeFuncPtr_glBindTextureEXT;
+  #define glBindTextureEXT GLeeFuncPtr_glBindTextureEXT
+#endif
+#ifndef GLEE_H_DEFINED_glDeleteTexturesEXT
+#define GLEE_H_DEFINED_glDeleteTexturesEXT
+  typedef void (APIENTRYP GLEEPFNGLDELETETEXTURESEXTPROC) (GLsizei  n, const GLuint * textures);
+  GLEE_EXTERN GLEEPFNGLDELETETEXTURESEXTPROC GLeeFuncPtr_glDeleteTexturesEXT;
+  #define glDeleteTexturesEXT GLeeFuncPtr_glDeleteTexturesEXT
+#endif
+#ifndef GLEE_H_DEFINED_glGenTexturesEXT
+#define GLEE_H_DEFINED_glGenTexturesEXT
+  typedef void (APIENTRYP GLEEPFNGLGENTEXTURESEXTPROC) (GLsizei  n, GLuint * textures);
+  GLEE_EXTERN GLEEPFNGLGENTEXTURESEXTPROC GLeeFuncPtr_glGenTexturesEXT;
+  #define glGenTexturesEXT GLeeFuncPtr_glGenTexturesEXT
+#endif
+#ifndef GLEE_H_DEFINED_glIsTextureEXT
+#define GLEE_H_DEFINED_glIsTextureEXT
+  typedef GLboolean (APIENTRYP GLEEPFNGLISTEXTUREEXTPROC) (GLuint  texture);
+  GLEE_EXTERN GLEEPFNGLISTEXTUREEXTPROC GLeeFuncPtr_glIsTextureEXT;
+  #define glIsTextureEXT GLeeFuncPtr_glIsTextureEXT
+#endif
+#ifndef GLEE_H_DEFINED_glPrioritizeTexturesEXT
+#define GLEE_H_DEFINED_glPrioritizeTexturesEXT
+  typedef void (APIENTRYP GLEEPFNGLPRIORITIZETEXTURESEXTPROC) (GLsizei  n, const GLuint * textures, const GLclampf * priorities);
+  GLEE_EXTERN GLEEPFNGLPRIORITIZETEXTURESEXTPROC GLeeFuncPtr_glPrioritizeTexturesEXT;
+  #define glPrioritizeTexturesEXT GLeeFuncPtr_glPrioritizeTexturesEXT
+#endif
+#endif 
+
+/* GL_SGIS_detail_texture */
+
+#ifndef GL_SGIS_detail_texture
+#define GL_SGIS_detail_texture 1
+#define __GLEE_GL_SGIS_detail_texture 1
+/* Constants */
+#define GL_DETAIL_TEXTURE_2D_SGIS                          0x8095
+#define GL_DETAIL_TEXTURE_2D_BINDING_SGIS                  0x8096
+#define GL_LINEAR_DETAIL_SGIS                              0x8097
+#define GL_LINEAR_DETAIL_ALPHA_SGIS                        0x8098
+#define GL_LINEAR_DETAIL_COLOR_SGIS                        0x8099
+#define GL_DETAIL_TEXTURE_LEVEL_SGIS                       0x809A
+#define GL_DETAIL_TEXTURE_MODE_SGIS                        0x809B
+#define GL_DETAIL_TEXTURE_FUNC_POINTS_SGIS                 0x809C
+#ifndef GLEE_H_DEFINED_glDetailTexFuncSGIS
+#define GLEE_H_DEFINED_glDetailTexFuncSGIS
+  typedef void (APIENTRYP GLEEPFNGLDETAILTEXFUNCSGISPROC) (GLenum  target, GLsizei  n, const GLfloat * points);
+  GLEE_EXTERN GLEEPFNGLDETAILTEXFUNCSGISPROC GLeeFuncPtr_glDetailTexFuncSGIS;
+  #define glDetailTexFuncSGIS GLeeFuncPtr_glDetailTexFuncSGIS
+#endif
+#ifndef GLEE_H_DEFINED_glGetDetailTexFuncSGIS
+#define GLEE_H_DEFINED_glGetDetailTexFuncSGIS
+  typedef void (APIENTRYP GLEEPFNGLGETDETAILTEXFUNCSGISPROC) (GLenum  target, GLfloat * points);
+  GLEE_EXTERN GLEEPFNGLGETDETAILTEXFUNCSGISPROC GLeeFuncPtr_glGetDetailTexFuncSGIS;
+  #define glGetDetailTexFuncSGIS GLeeFuncPtr_glGetDetailTexFuncSGIS
+#endif
+#endif 
+
+/* GL_SGIS_sharpen_texture */
+
+#ifndef GL_SGIS_sharpen_texture
+#define GL_SGIS_sharpen_texture 1
+#define __GLEE_GL_SGIS_sharpen_texture 1
+/* Constants */
+#define GL_LINEAR_SHARPEN_SGIS                             0x80AD
+#define GL_LINEAR_SHARPEN_ALPHA_SGIS                       0x80AE
+#define GL_LINEAR_SHARPEN_COLOR_SGIS                       0x80AF
+#define GL_SHARPEN_TEXTURE_FUNC_POINTS_SGIS                0x80B0
+#ifndef GLEE_H_DEFINED_glSharpenTexFuncSGIS
+#define GLEE_H_DEFINED_glSharpenTexFuncSGIS
+  typedef void (APIENTRYP GLEEPFNGLSHARPENTEXFUNCSGISPROC) (GLenum  target, GLsizei  n, const GLfloat * points);
+  GLEE_EXTERN GLEEPFNGLSHARPENTEXFUNCSGISPROC GLeeFuncPtr_glSharpenTexFuncSGIS;
+  #define glSharpenTexFuncSGIS GLeeFuncPtr_glSharpenTexFuncSGIS
+#endif
+#ifndef GLEE_H_DEFINED_glGetSharpenTexFuncSGIS
+#define GLEE_H_DEFINED_glGetSharpenTexFuncSGIS
+  typedef void (APIENTRYP GLEEPFNGLGETSHARPENTEXFUNCSGISPROC) (GLenum  target, GLfloat * points);
+  GLEE_EXTERN GLEEPFNGLGETSHARPENTEXFUNCSGISPROC GLeeFuncPtr_glGetSharpenTexFuncSGIS;
+  #define glGetSharpenTexFuncSGIS GLeeFuncPtr_glGetSharpenTexFuncSGIS
+#endif
+#endif 
+
+/* GL_EXT_packed_pixels */
+
+#ifndef GL_EXT_packed_pixels
+#define GL_EXT_packed_pixels 1
+#define __GLEE_GL_EXT_packed_pixels 1
+/* Constants */
+#define GL_UNSIGNED_BYTE_3_3_2_EXT                         0x8032
+#define GL_UNSIGNED_SHORT_4_4_4_4_EXT                      0x8033
+#define GL_UNSIGNED_SHORT_5_5_5_1_EXT                      0x8034
+#define GL_UNSIGNED_INT_8_8_8_8_EXT                        0x8035
+#define GL_UNSIGNED_INT_10_10_10_2_EXT                     0x8036
+#endif 
+
+/* GL_SGIS_texture_lod */
+
+#ifndef GL_SGIS_texture_lod
+#define GL_SGIS_texture_lod 1
+#define __GLEE_GL_SGIS_texture_lod 1
+/* Constants */
+#define GL_TEXTURE_MIN_LOD_SGIS                            0x813A
+#define GL_TEXTURE_MAX_LOD_SGIS                            0x813B
+#define GL_TEXTURE_BASE_LEVEL_SGIS                         0x813C
+#define GL_TEXTURE_MAX_LEVEL_SGIS                          0x813D
+#endif 
+
+/* GL_SGIS_multisample */
+
+#ifndef GL_SGIS_multisample
+#define GL_SGIS_multisample 1
+#define __GLEE_GL_SGIS_multisample 1
+/* Constants */
+#define GL_MULTISAMPLE_SGIS                                0x809D
+#define GL_SAMPLE_ALPHA_TO_MASK_SGIS                       0x809E
+#define GL_SAMPLE_ALPHA_TO_ONE_SGIS                        0x809F
+#define GL_SAMPLE_MASK_SGIS                                0x80A0
+#define GL_1PASS_SGIS                                      0x80A1
+#define GL_2PASS_0_SGIS                                    0x80A2
+#define GL_2PASS_1_SGIS                                    0x80A3
+#define GL_4PASS_0_SGIS                                    0x80A4
+#define GL_4PASS_1_SGIS                                    0x80A5
+#define GL_4PASS_2_SGIS                                    0x80A6
+#define GL_4PASS_3_SGIS                                    0x80A7
+#define GL_SAMPLE_BUFFERS_SGIS                             0x80A8
+#define GL_SAMPLES_SGIS                                    0x80A9
+#define GL_SAMPLE_MASK_VALUE_SGIS                          0x80AA
+#define GL_SAMPLE_MASK_INVERT_SGIS                         0x80AB
+#define GL_SAMPLE_PATTERN_SGIS                             0x80AC
+#ifndef GLEE_H_DEFINED_glSampleMaskSGIS
+#define GLEE_H_DEFINED_glSampleMaskSGIS
+  typedef void (APIENTRYP GLEEPFNGLSAMPLEMASKSGISPROC) (GLclampf  value, GLboolean  invert);
+  GLEE_EXTERN GLEEPFNGLSAMPLEMASKSGISPROC GLeeFuncPtr_glSampleMaskSGIS;
+  #define glSampleMaskSGIS GLeeFuncPtr_glSampleMaskSGIS
+#endif
+#ifndef GLEE_H_DEFINED_glSamplePatternSGIS
+#define GLEE_H_DEFINED_glSamplePatternSGIS
+  typedef void (APIENTRYP GLEEPFNGLSAMPLEPATTERNSGISPROC) (GLenum  pattern);
+  GLEE_EXTERN GLEEPFNGLSAMPLEPATTERNSGISPROC GLeeFuncPtr_glSamplePatternSGIS;
+  #define glSamplePatternSGIS GLeeFuncPtr_glSamplePatternSGIS
+#endif
+#endif 
+
+/* GL_EXT_rescale_normal */
+
+#ifndef GL_EXT_rescale_normal
+#define GL_EXT_rescale_normal 1
+#define __GLEE_GL_EXT_rescale_normal 1
+/* Constants */
+#define GL_RESCALE_NORMAL_EXT                              0x803A
+#endif 
+
+/* GL_EXT_vertex_array */
+
+#ifndef GL_EXT_vertex_array
+#define GL_EXT_vertex_array 1
+#define __GLEE_GL_EXT_vertex_array 1
+/* Constants */
+#define GL_VERTEX_ARRAY_EXT                                0x8074
+#define GL_NORMAL_ARRAY_EXT                                0x8075
+#define GL_COLOR_ARRAY_EXT                                 0x8076
+#define GL_INDEX_ARRAY_EXT                                 0x8077
+#define GL_TEXTURE_COORD_ARRAY_EXT                         0x8078
+#define GL_EDGE_FLAG_ARRAY_EXT                             0x8079
+#define GL_VERTEX_ARRAY_SIZE_EXT                           0x807A
+#define GL_VERTEX_ARRAY_TYPE_EXT                           0x807B
+#define GL_VERTEX_ARRAY_STRIDE_EXT                         0x807C
+#define GL_VERTEX_ARRAY_COUNT_EXT                          0x807D
+#define GL_NORMAL_ARRAY_TYPE_EXT                           0x807E
+#define GL_NORMAL_ARRAY_STRIDE_EXT                         0x807F
+#define GL_NORMAL_ARRAY_COUNT_EXT                          0x8080
+#define GL_COLOR_ARRAY_SIZE_EXT                            0x8081
+#define GL_COLOR_ARRAY_TYPE_EXT                            0x8082
+#define GL_COLOR_ARRAY_STRIDE_EXT                          0x8083
+#define GL_COLOR_ARRAY_COUNT_EXT                           0x8084
+#define GL_INDEX_ARRAY_TYPE_EXT                            0x8085
+#define GL_INDEX_ARRAY_STRIDE_EXT                          0x8086
+#define GL_INDEX_ARRAY_COUNT_EXT                           0x8087
+#define GL_TEXTURE_COORD_ARRAY_SIZE_EXT                    0x8088
+#define GL_TEXTURE_COORD_ARRAY_TYPE_EXT                    0x8089
+#define GL_TEXTURE_COORD_ARRAY_STRIDE_EXT                  0x808A
+#define GL_TEXTURE_COORD_ARRAY_COUNT_EXT                   0x808B
+#define GL_EDGE_FLAG_ARRAY_STRIDE_EXT                      0x808C
+#define GL_EDGE_FLAG_ARRAY_COUNT_EXT                       0x808D
+#define GL_VERTEX_ARRAY_POINTER_EXT                        0x808E
+#define GL_NORMAL_ARRAY_POINTER_EXT                        0x808F
+#define GL_COLOR_ARRAY_POINTER_EXT                         0x8090
+#define GL_INDEX_ARRAY_POINTER_EXT                         0x8091
+#define GL_TEXTURE_COORD_ARRAY_POINTER_EXT                 0x8092
+#define GL_EDGE_FLAG_ARRAY_POINTER_EXT                     0x8093
+#ifndef GLEE_H_DEFINED_glArrayElementEXT
+#define GLEE_H_DEFINED_glArrayElementEXT
+  typedef void (APIENTRYP GLEEPFNGLARRAYELEMENTEXTPROC) (GLint  i);
+  GLEE_EXTERN GLEEPFNGLARRAYELEMENTEXTPROC GLeeFuncPtr_glArrayElementEXT;
+  #define glArrayElementEXT GLeeFuncPtr_glArrayElementEXT
+#endif
+#ifndef GLEE_H_DEFINED_glColorPointerEXT
+#define GLEE_H_DEFINED_glColorPointerEXT
+  typedef void (APIENTRYP GLEEPFNGLCOLORPOINTEREXTPROC) (GLint  size, GLenum  type, GLsizei  stride, GLsizei  count, const GLvoid * pointer);
+  GLEE_EXTERN GLEEPFNGLCOLORPOINTEREXTPROC GLeeFuncPtr_glColorPointerEXT;
+  #define glColorPointerEXT GLeeFuncPtr_glColorPointerEXT
+#endif
+#ifndef GLEE_H_DEFINED_glDrawArraysEXT
+#define GLEE_H_DEFINED_glDrawArraysEXT
+  typedef void (APIENTRYP GLEEPFNGLDRAWARRAYSEXTPROC) (GLenum  mode, GLint  first, GLsizei  count);
+  GLEE_EXTERN GLEEPFNGLDRAWARRAYSEXTPROC GLeeFuncPtr_glDrawArraysEXT;
+  #define glDrawArraysEXT GLeeFuncPtr_glDrawArraysEXT
+#endif
+#ifndef GLEE_H_DEFINED_glEdgeFlagPointerEXT
+#define GLEE_H_DEFINED_glEdgeFlagPointerEXT
+  typedef void (APIENTRYP GLEEPFNGLEDGEFLAGPOINTEREXTPROC) (GLsizei  stride, GLsizei  count, const GLboolean * pointer);
+  GLEE_EXTERN GLEEPFNGLEDGEFLAGPOINTEREXTPROC GLeeFuncPtr_glEdgeFlagPointerEXT;
+  #define glEdgeFlagPointerEXT GLeeFuncPtr_glEdgeFlagPointerEXT
+#endif
+#ifndef GLEE_H_DEFINED_glGetPointervEXT
+#define GLEE_H_DEFINED_glGetPointervEXT
+  typedef void (APIENTRYP GLEEPFNGLGETPOINTERVEXTPROC) (GLenum  pname, GLvoid* * params);
+  GLEE_EXTERN GLEEPFNGLGETPOINTERVEXTPROC GLeeFuncPtr_glGetPointervEXT;
+  #define glGetPointervEXT GLeeFuncPtr_glGetPointervEXT
+#endif
+#ifndef GLEE_H_DEFINED_glIndexPointerEXT
+#define GLEE_H_DEFINED_glIndexPointerEXT
+  typedef void (APIENTRYP GLEEPFNGLINDEXPOINTEREXTPROC) (GLenum  type, GLsizei  stride, GLsizei  count, const GLvoid * pointer);
+  GLEE_EXTERN GLEEPFNGLINDEXPOINTEREXTPROC GLeeFuncPtr_glIndexPointerEXT;
+  #define glIndexPointerEXT GLeeFuncPtr_glIndexPointerEXT
+#endif
+#ifndef GLEE_H_DEFINED_glNormalPointerEXT
+#define GLEE_H_DEFINED_glNormalPointerEXT
+  typedef void (APIENTRYP GLEEPFNGLNORMALPOINTEREXTPROC) (GLenum  type, GLsizei  stride, GLsizei  count, const GLvoid * pointer);
+  GLEE_EXTERN GLEEPFNGLNORMALPOINTEREXTPROC GLeeFuncPtr_glNormalPointerEXT;
+  #define glNormalPointerEXT GLeeFuncPtr_glNormalPointerEXT
+#endif
+#ifndef GLEE_H_DEFINED_glTexCoordPointerEXT
+#define GLEE_H_DEFINED_glTexCoordPointerEXT
+  typedef void (APIENTRYP GLEEPFNGLTEXCOORDPOINTEREXTPROC) (GLint  size, GLenum  type, GLsizei  stride, GLsizei  count, const GLvoid * pointer);
+  GLEE_EXTERN GLEEPFNGLTEXCOORDPOINTEREXTPROC GLeeFuncPtr_glTexCoordPointerEXT;
+  #define glTexCoordPointerEXT GLeeFuncPtr_glTexCoordPointerEXT
+#endif
+#ifndef GLEE_H_DEFINED_glVertexPointerEXT
+#define GLEE_H_DEFINED_glVertexPointerEXT
+  typedef void (APIENTRYP GLEEPFNGLVERTEXPOINTEREXTPROC) (GLint  size, GLenum  type, GLsizei  stride, GLsizei  count, const GLvoid * pointer);
+  GLEE_EXTERN GLEEPFNGLVERTEXPOINTEREXTPROC GLeeFuncPtr_glVertexPointerEXT;
+  #define glVertexPointerEXT GLeeFuncPtr_glVertexPointerEXT
+#endif
+#endif 
+
+/* GL_EXT_misc_attribute */
+
+#ifndef GL_EXT_misc_attribute
+#define GL_EXT_misc_attribute 1
+#define __GLEE_GL_EXT_misc_attribute 1
+/* Constants */
+#endif 
+
+/* GL_SGIS_generate_mipmap */
+
+#ifndef GL_SGIS_generate_mipmap
+#define GL_SGIS_generate_mipmap 1
+#define __GLEE_GL_SGIS_generate_mipmap 1
+/* Constants */
+#define GL_GENERATE_MIPMAP_SGIS                            0x8191
+#define GL_GENERATE_MIPMAP_HINT_SGIS                       0x8192
+#endif 
+
+/* GL_SGIX_clipmap */
+
+#ifndef GL_SGIX_clipmap
+#define GL_SGIX_clipmap 1
+#define __GLEE_GL_SGIX_clipmap 1
+/* Constants */
+#define GL_LINEAR_CLIPMAP_LINEAR_SGIX                      0x8170
+#define GL_TEXTURE_CLIPMAP_CENTER_SGIX                     0x8171
+#define GL_TEXTURE_CLIPMAP_FRAME_SGIX                      0x8172
+#define GL_TEXTURE_CLIPMAP_OFFSET_SGIX                     0x8173
+#define GL_TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX              0x8174
+#define GL_TEXTURE_CLIPMAP_LOD_OFFSET_SGIX                 0x8175
+#define GL_TEXTURE_CLIPMAP_DEPTH_SGIX                      0x8176
+#define GL_MAX_CLIPMAP_DEPTH_SGIX                          0x8177
+#define GL_MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX                  0x8178
+#define GL_NEAREST_CLIPMAP_NEAREST_SGIX                    0x844D
+#define GL_NEAREST_CLIPMAP_LINEAR_SGIX                     0x844E
+#define GL_LINEAR_CLIPMAP_NEAREST_SGIX                     0x844F
+#endif 
+
+/* GL_SGIX_shadow */
+
+#ifndef GL_SGIX_shadow
+#define GL_SGIX_shadow 1
+#define __GLEE_GL_SGIX_shadow 1
+/* Constants */
+#define GL_TEXTURE_COMPARE_SGIX                            0x819A
+#define GL_TEXTURE_COMPARE_OPERATOR_SGIX                   0x819B
+#define GL_TEXTURE_LEQUAL_R_SGIX                           0x819C
+#define GL_TEXTURE_GEQUAL_R_SGIX                           0x819D
+#endif 
+
+/* GL_SGIS_texture_edge_clamp */
+
+#ifndef GL_SGIS_texture_edge_clamp
+#define GL_SGIS_texture_edge_clamp 1
+#define __GLEE_GL_SGIS_texture_edge_clamp 1
+/* Constants */
+#define GL_CLAMP_TO_EDGE_SGIS                              0x812F
+#endif 
+
+/* GL_SGIS_texture_border_clamp */
+
+#ifndef GL_SGIS_texture_border_clamp
+#define GL_SGIS_texture_border_clamp 1
+#define __GLEE_GL_SGIS_texture_border_clamp 1
+/* Constants */
+#define GL_CLAMP_TO_BORDER_SGIS                            0x812D
+#endif 
+
+/* GL_EXT_blend_minmax */
+
+#ifndef GL_EXT_blend_minmax
+#define GL_EXT_blend_minmax 1
+#define __GLEE_GL_EXT_blend_minmax 1
+/* Constants */
+#define GL_FUNC_ADD_EXT                                    0x8006
+#define GL_MIN_EXT                                         0x8007
+#define GL_MAX_EXT                                         0x8008
+#define GL_BLEND_EQUATION_EXT                              0x8009
+#ifndef GLEE_H_DEFINED_glBlendEquationEXT
+#define GLEE_H_DEFINED_glBlendEquationEXT
+  typedef void (APIENTRYP GLEEPFNGLBLENDEQUATIONEXTPROC) (GLenum  mode);
+  GLEE_EXTERN GLEEPFNGLBLENDEQUATIONEXTPROC GLeeFuncPtr_glBlendEquationEXT;
+  #define glBlendEquationEXT GLeeFuncPtr_glBlendEquationEXT
+#endif
+#endif 
+
+/* GL_EXT_blend_subtract */
+
+#ifndef GL_EXT_blend_subtract
+#define GL_EXT_blend_subtract 1
+#define __GLEE_GL_EXT_blend_subtract 1
+/* Constants */
+#define GL_FUNC_SUBTRACT_EXT                               0x800A
+#define GL_FUNC_REVERSE_SUBTRACT_EXT                       0x800B
+#endif 
+
+/* GL_EXT_blend_logic_op */
+
+#ifndef GL_EXT_blend_logic_op
+#define GL_EXT_blend_logic_op 1
+#define __GLEE_GL_EXT_blend_logic_op 1
+/* Constants */
+#endif 
+
+/* GL_SGIX_interlace */
+
+#ifndef GL_SGIX_interlace
+#define GL_SGIX_interlace 1
+#define __GLEE_GL_SGIX_interlace 1
+/* Constants */
+#define GL_INTERLACE_SGIX                                  0x8094
+#endif 
+
+/* GL_SGIX_pixel_tiles */
+
+#ifndef GL_SGIX_pixel_tiles
+#define GL_SGIX_pixel_tiles 1
+#define __GLEE_GL_SGIX_pixel_tiles 1
+/* Constants */
+#define GL_PIXEL_TILE_BEST_ALIGNMENT_SGIX                  0x813E
+#define GL_PIXEL_TILE_CACHE_INCREMENT_SGIX                 0x813F
+#define GL_PIXEL_TILE_WIDTH_SGIX                           0x8140
+#define GL_PIXEL_TILE_HEIGHT_SGIX                          0x8141
+#define GL_PIXEL_TILE_GRID_WIDTH_SGIX                      0x8142
+#define GL_PIXEL_TILE_GRID_HEIGHT_SGIX                     0x8143
+#define GL_PIXEL_TILE_GRID_DEPTH_SGIX                      0x8144
+#define GL_PIXEL_TILE_CACHE_SIZE_SGIX                      0x8145
+#endif 
+
+/* GL_SGIS_texture_select */
+
+#ifndef GL_SGIS_texture_select
+#define GL_SGIS_texture_select 1
+#define __GLEE_GL_SGIS_texture_select 1
+/* Constants */
+#define GL_DUAL_ALPHA4_SGIS                                0x8110
+#define GL_DUAL_ALPHA8_SGIS                                0x8111
+#define GL_DUAL_ALPHA12_SGIS                               0x8112
+#define GL_DUAL_ALPHA16_SGIS                               0x8113
+#define GL_DUAL_LUMINANCE4_SGIS                            0x8114
+#define GL_DUAL_LUMINANCE8_SGIS                            0x8115
+#define GL_DUAL_LUMINANCE12_SGIS                           0x8116
+#define GL_DUAL_LUMINANCE16_SGIS                           0x8117
+#define GL_DUAL_INTENSITY4_SGIS                            0x8118
+#define GL_DUAL_INTENSITY8_SGIS                            0x8119
+#define GL_DUAL_INTENSITY12_SGIS                           0x811A
+#define GL_DUAL_INTENSITY16_SGIS                           0x811B
+#define GL_DUAL_LUMINANCE_ALPHA4_SGIS                      0x811C
+#define GL_DUAL_LUMINANCE_ALPHA8_SGIS                      0x811D
+#define GL_QUAD_ALPHA4_SGIS                                0x811E
+#define GL_QUAD_ALPHA8_SGIS                                0x811F
+#define GL_QUAD_LUMINANCE4_SGIS                            0x8120
+#define GL_QUAD_LUMINANCE8_SGIS                            0x8121
+#define GL_QUAD_INTENSITY4_SGIS                            0x8122
+#define GL_QUAD_INTENSITY8_SGIS                            0x8123
+#define GL_DUAL_TEXTURE_SELECT_SGIS                        0x8124
+#define GL_QUAD_TEXTURE_SELECT_SGIS                        0x8125
+#endif 
+
+/* GL_SGIX_sprite */
+
+#ifndef GL_SGIX_sprite
+#define GL_SGIX_sprite 1
+#define __GLEE_GL_SGIX_sprite 1
+/* Constants */
+#define GL_SPRITE_SGIX                                     0x8148
+#define GL_SPRITE_MODE_SGIX                                0x8149
+#define GL_SPRITE_AXIS_SGIX                                0x814A
+#define GL_SPRITE_TRANSLATION_SGIX                         0x814B
+#define GL_SPRITE_AXIAL_SGIX                               0x814C
+#define GL_SPRITE_OBJECT_ALIGNED_SGIX                      0x814D
+#define GL_SPRITE_EYE_ALIGNED_SGIX                         0x814E
+#ifndef GLEE_H_DEFINED_glSpriteParameterfSGIX
+#define GLEE_H_DEFINED_glSpriteParameterfSGIX
+  typedef void (APIENTRYP GLEEPFNGLSPRITEPARAMETERFSGIXPROC) (GLenum  pname, GLfloat  param);
+  GLEE_EXTERN GLEEPFNGLSPRITEPARAMETERFSGIXPROC GLeeFuncPtr_glSpriteParameterfSGIX;
+  #define glSpriteParameterfSGIX GLeeFuncPtr_glSpriteParameterfSGIX
+#endif
+#ifndef GLEE_H_DEFINED_glSpriteParameterfvSGIX
+#define GLEE_H_DEFINED_glSpriteParameterfvSGIX
+  typedef void (APIENTRYP GLEEPFNGLSPRITEPARAMETERFVSGIXPROC) (GLenum  pname, const GLfloat * params);
+  GLEE_EXTERN GLEEPFNGLSPRITEPARAMETERFVSGIXPROC GLeeFuncPtr_glSpriteParameterfvSGIX;
+  #define glSpriteParameterfvSGIX GLeeFuncPtr_glSpriteParameterfvSGIX
+#endif
+#ifndef GLEE_H_DEFINED_glSpriteParameteriSGIX
+#define GLEE_H_DEFINED_glSpriteParameteriSGIX
+  typedef void (APIENTRYP GLEEPFNGLSPRITEPARAMETERISGIXPROC) (GLenum  pname, GLint  param);
+  GLEE_EXTERN GLEEPFNGLSPRITEPARAMETERISGIXPROC GLeeFuncPtr_glSpriteParameteriSGIX;
+  #define glSpriteParameteriSGIX GLeeFuncPtr_glSpriteParameteriSGIX
+#endif
+#ifndef GLEE_H_DEFINED_glSpriteParameterivSGIX
+#define GLEE_H_DEFINED_glSpriteParameterivSGIX
+  typedef void (APIENTRYP GLEEPFNGLSPRITEPARAMETERIVSGIXPROC) (GLenum  pname, const GLint * params);
+  GLEE_EXTERN GLEEPFNGLSPRITEPARAMETERIVSGIXPROC GLeeFuncPtr_glSpriteParameterivSGIX;
+  #define glSpriteParameterivSGIX GLeeFuncPtr_glSpriteParameterivSGIX
+#endif
+#endif 
+
+/* GL_SGIX_texture_multi_buffer */
+
+#ifndef GL_SGIX_texture_multi_buffer
+#define GL_SGIX_texture_multi_buffer 1
+#define __GLEE_GL_SGIX_texture_multi_buffer 1
+/* Constants */
+#define GL_TEXTURE_MULTI_BUFFER_HINT_SGIX                  0x812E
+#endif 
+
+/* GL_EXT_point_parameters */
+
+#ifndef GL_EXT_point_parameters
+#define GL_EXT_point_parameters 1
+#define __GLEE_GL_EXT_point_parameters 1
+/* Constants */
+#define GL_POINT_SIZE_MIN_EXT                              0x8126
+#define GL_POINT_SIZE_MAX_EXT                              0x8127
+#define GL_POINT_FADE_THRESHOLD_SIZE_EXT                   0x8128
+#define GL_DISTANCE_ATTENUATION_EXT                        0x8129
+#ifndef GLEE_H_DEFINED_glPointParameterfEXT
+#define GLEE_H_DEFINED_glPointParameterfEXT
+  typedef void (APIENTRYP GLEEPFNGLPOINTPARAMETERFEXTPROC) (GLenum  pname, GLfloat  param);
+  GLEE_EXTERN GLEEPFNGLPOINTPARAMETERFEXTPROC GLeeFuncPtr_glPointParameterfEXT;
+  #define glPointParameterfEXT GLeeFuncPtr_glPointParameterfEXT
+#endif
+#ifndef GLEE_H_DEFINED_glPointParameterfvEXT
+#define GLEE_H_DEFINED_glPointParameterfvEXT
+  typedef void (APIENTRYP GLEEPFNGLPOINTPARAMETERFVEXTPROC) (GLenum  pname, const GLfloat * params);
+  GLEE_EXTERN GLEEPFNGLPOINTPARAMETERFVEXTPROC GLeeFuncPtr_glPointParameterfvEXT;
+  #define glPointParameterfvEXT GLeeFuncPtr_glPointParameterfvEXT
+#endif
+#endif 
+
+/* GL_SGIS_point_parameters */
+
+#ifndef GL_SGIS_point_parameters
+#define GL_SGIS_point_parameters 1
+#define __GLEE_GL_SGIS_point_parameters 1
+/* Constants */
+#define GL_POINT_SIZE_MIN_SGIS                             0x8126
+#define GL_POINT_SIZE_MAX_SGIS                             0x8127
+#define GL_POINT_FADE_THRESHOLD_SIZE_SGIS                  0x8128
+#define GL_DISTANCE_ATTENUATION_SGIS                       0x8129
+#ifndef GLEE_H_DEFINED_glPointParameterfSGIS
+#define GLEE_H_DEFINED_glPointParameterfSGIS
+  typedef void (APIENTRYP GLEEPFNGLPOINTPARAMETERFSGISPROC) (GLenum  pname, GLfloat  param);
+  GLEE_EXTERN GLEEPFNGLPOINTPARAMETERFSGISPROC GLeeFuncPtr_glPointParameterfSGIS;
+  #define glPointParameterfSGIS GLeeFuncPtr_glPointParameterfSGIS
+#endif
+#ifndef GLEE_H_DEFINED_glPointParameterfvSGIS
+#define GLEE_H_DEFINED_glPointParameterfvSGIS
+  typedef void (APIENTRYP GLEEPFNGLPOINTPARAMETERFVSGISPROC) (GLenum  pname, const GLfloat * params);
+  GLEE_EXTERN GLEEPFNGLPOINTPARAMETERFVSGISPROC GLeeFuncPtr_glPointParameterfvSGIS;
+  #define glPointParameterfvSGIS GLeeFuncPtr_glPointParameterfvSGIS
+#endif
+#endif 
+
+/* GL_SGIX_instruments */
+
+#ifndef GL_SGIX_instruments
+#define GL_SGIX_instruments 1
+#define __GLEE_GL_SGIX_instruments 1
+/* Constants */
+#define GL_INSTRUMENT_BUFFER_POINTER_SGIX                  0x8180
+#define GL_INSTRUMENT_MEASUREMENTS_SGIX                    0x8181
+#ifndef GLEE_H_DEFINED_glGetInstrumentsSGIX
+#define GLEE_H_DEFINED_glGetInstrumentsSGIX
+  typedef GLint (APIENTRYP GLEEPFNGLGETINSTRUMENTSSGIXPROC) ();
+  GLEE_EXTERN GLEEPFNGLGETINSTRUMENTSSGIXPROC GLeeFuncPtr_glGetInstrumentsSGIX;
+  #define glGetInstrumentsSGIX GLeeFuncPtr_glGetInstrumentsSGIX
+#endif
+#ifndef GLEE_H_DEFINED_glInstrumentsBufferSGIX
+#define GLEE_H_DEFINED_glInstrumentsBufferSGIX
+  typedef void (APIENTRYP GLEEPFNGLINSTRUMENTSBUFFERSGIXPROC) (GLsizei  size, GLint * buffer);
+  GLEE_EXTERN GLEEPFNGLINSTRUMENTSBUFFERSGIXPROC GLeeFuncPtr_glInstrumentsBufferSGIX;
+  #define glInstrumentsBufferSGIX GLeeFuncPtr_glInstrumentsBufferSGIX
+#endif
+#ifndef GLEE_H_DEFINED_glPollInstrumentsSGIX
+#define GLEE_H_DEFINED_glPollInstrumentsSGIX
+  typedef GLint (APIENTRYP GLEEPFNGLPOLLINSTRUMENTSSGIXPROC) (GLint * marker_p);
+  GLEE_EXTERN GLEEPFNGLPOLLINSTRUMENTSSGIXPROC GLeeFuncPtr_glPollInstrumentsSGIX;
+  #define glPollInstrumentsSGIX GLeeFuncPtr_glPollInstrumentsSGIX
+#endif
+#ifndef GLEE_H_DEFINED_glReadInstrumentsSGIX
+#define GLEE_H_DEFINED_glReadInstrumentsSGIX
+  typedef void (APIENTRYP GLEEPFNGLREADINSTRUMENTSSGIXPROC) (GLint  marker);
+  GLEE_EXTERN GLEEPFNGLREADINSTRUMENTSSGIXPROC GLeeFuncPtr_glReadInstrumentsSGIX;
+  #define glReadInstrumentsSGIX GLeeFuncPtr_glReadInstrumentsSGIX
+#endif
+#ifndef GLEE_H_DEFINED_glStartInstrumentsSGIX
+#define GLEE_H_DEFINED_glStartInstrumentsSGIX
+  typedef void (APIENTRYP GLEEPFNGLSTARTINSTRUMENTSSGIXPROC) ();
+  GLEE_EXTERN GLEEPFNGLSTARTINSTRUMENTSSGIXPROC GLeeFuncPtr_glStartInstrumentsSGIX;
+  #define glStartInstrumentsSGIX GLeeFuncPtr_glStartInstrumentsSGIX
+#endif
+#ifndef GLEE_H_DEFINED_glStopInstrumentsSGIX
+#define GLEE_H_DEFINED_glStopInstrumentsSGIX
+  typedef void (APIENTRYP GLEEPFNGLSTOPINSTRUMENTSSGIXPROC) (GLint  marker);
+  GLEE_EXTERN GLEEPFNGLSTOPINSTRUMENTSSGIXPROC GLeeFuncPtr_glStopInstrumentsSGIX;
+  #define glStopInstrumentsSGIX GLeeFuncPtr_glStopInstrumentsSGIX
+#endif
+#endif 
+
+/* GL_SGIX_texture_scale_bias */
+
+#ifndef GL_SGIX_texture_scale_bias
+#define GL_SGIX_texture_scale_bias 1
+#define __GLEE_GL_SGIX_texture_scale_bias 1
+/* Constants */
+#define GL_POST_TEXTURE_FILTER_BIAS_SGIX                   0x8179
+#define GL_POST_TEXTURE_FILTER_SCALE_SGIX                  0x817A
+#define GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX             0x817B
+#define GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX            0x817C
+#endif 
+
+/* GL_SGIX_framezoom */
+
+#ifndef GL_SGIX_framezoom
+#define GL_SGIX_framezoom 1
+#define __GLEE_GL_SGIX_framezoom 1
+/* Constants */
+#define GL_FRAMEZOOM_SGIX                                  0x818B
+#define GL_FRAMEZOOM_FACTOR_SGIX                           0x818C
+#define GL_MAX_FRAMEZOOM_FACTOR_SGIX                       0x818D
+#ifndef GLEE_H_DEFINED_glFrameZoomSGIX
+#define GLEE_H_DEFINED_glFrameZoomSGIX
+  typedef void (APIENTRYP GLEEPFNGLFRAMEZOOMSGIXPROC) (GLint  factor);
+  GLEE_EXTERN GLEEPFNGLFRAMEZOOMSGIXPROC GLeeFuncPtr_glFrameZoomSGIX;
+  #define glFrameZoomSGIX GLeeFuncPtr_glFrameZoomSGIX
+#endif
+#endif 
+
+/* GL_SGIX_tag_sample_buffer */
+
+#ifndef GL_SGIX_tag_sample_buffer
+#define GL_SGIX_tag_sample_buffer 1
+#define __GLEE_GL_SGIX_tag_sample_buffer 1
+/* Constants */
+#ifndef GLEE_H_DEFINED_glTagSampleBufferSGIX
+#define GLEE_H_DEFINED_glTagSampleBufferSGIX
+  typedef void (APIENTRYP GLEEPFNGLTAGSAMPLEBUFFERSGIXPROC) ();
+  GLEE_EXTERN GLEEPFNGLTAGSAMPLEBUFFERSGIXPROC GLeeFuncPtr_glTagSampleBufferSGIX;
+  #define glTagSampleBufferSGIX GLeeFuncPtr_glTagSampleBufferSGIX
+#endif
+#endif 
+
+/* GL_FfdMaskSGIX */
+
+#ifndef GL_FfdMaskSGIX
+#define GL_FfdMaskSGIX 1
+#define __GLEE_GL_FfdMaskSGIX 1
+/* Constants */
+#define GL_TEXTURE_DEFORMATION_BIT_SGIX                    0x00000001
+#define GL_GEOMETRY_DEFORMATION_BIT_SGIX                   0x00000002
+#endif 
+
+/* GL_SGIX_polynomial_ffd */
+
+#ifndef GL_SGIX_polynomial_ffd
+#define GL_SGIX_polynomial_ffd 1
+#define __GLEE_GL_SGIX_polynomial_ffd 1
+/* Constants */
+#define GL_GEOMETRY_DEFORMATION_SGIX                       0x8194
+#define GL_TEXTURE_DEFORMATION_SGIX                        0x8195
+#define GL_DEFORMATIONS_MASK_SGIX                          0x8196
+#define GL_MAX_DEFORMATION_ORDER_SGIX                      0x8197
+#ifndef GLEE_H_DEFINED_glDeformationMap3dSGIX
+#define GLEE_H_DEFINED_glDeformationMap3dSGIX
+  typedef void (APIENTRYP GLEEPFNGLDEFORMATIONMAP3DSGIXPROC) (GLenum  target, GLdouble  u1, GLdouble  u2, GLint  ustride, GLint  uorder, GLdouble  v1, GLdouble  v2, GLint  vstride, GLint  vorder, GLdouble  w1, GLdouble  w2, GLint  wstride, GLint  worder, const GLdouble * points);
+  GLEE_EXTERN GLEEPFNGLDEFORMATIONMAP3DSGIXPROC GLeeFuncPtr_glDeformationMap3dSGIX;
+  #define glDeformationMap3dSGIX GLeeFuncPtr_glDeformationMap3dSGIX
+#endif
+#ifndef GLEE_H_DEFINED_glDeformationMap3fSGIX
+#define GLEE_H_DEFINED_glDeformationMap3fSGIX
+  typedef void (APIENTRYP GLEEPFNGLDEFORMATIONMAP3FSGIXPROC) (GLenum  target, GLfloat  u1, GLfloat  u2, GLint  ustride, GLint  uorder, GLfloat  v1, GLfloat  v2, GLint  vstride, GLint  vorder, GLfloat  w1, GLfloat  w2, GLint  wstride, GLint  worder, const GLfloat * points);
+  GLEE_EXTERN GLEEPFNGLDEFORMATIONMAP3FSGIXPROC GLeeFuncPtr_glDeformationMap3fSGIX;
+  #define glDeformationMap3fSGIX GLeeFuncPtr_glDeformationMap3fSGIX
+#endif
+#ifndef GLEE_H_DEFINED_glDeformSGIX
+#define GLEE_H_DEFINED_glDeformSGIX
+  typedef void (APIENTRYP GLEEPFNGLDEFORMSGIXPROC) (GLbitfield  mask);
+  GLEE_EXTERN GLEEPFNGLDEFORMSGIXPROC GLeeFuncPtr_glDeformSGIX;
+  #define glDeformSGIX GLeeFuncPtr_glDeformSGIX
+#endif
+#ifndef GLEE_H_DEFINED_glLoadIdentityDeformationMapSGIX
+#define GLEE_H_DEFINED_glLoadIdentityDeformationMapSGIX
+  typedef void (APIENTRYP GLEEPFNGLLOADIDENTITYDEFORMATIONMAPSGIXPROC) (GLbitfield  mask);
+  GLEE_EXTERN GLEEPFNGLLOADIDENTITYDEFORMATIONMAPSGIXPROC GLeeFuncPtr_glLoadIdentityDeformationMapSGIX;
+  #define glLoadIdentityDeformationMapSGIX GLeeFuncPtr_glLoadIdentityDeformationMapSGIX
+#endif
+#endif 
+
+/* GL_SGIX_reference_plane */
+
+#ifndef GL_SGIX_reference_plane
+#define GL_SGIX_reference_plane 1
+#define __GLEE_GL_SGIX_reference_plane 1
+/* Constants */
+#define GL_REFERENCE_PLANE_SGIX                            0x817D
+#define GL_REFERENCE_PLANE_EQUATION_SGIX                   0x817E
+#ifndef GLEE_H_DEFINED_glReferencePlaneSGIX
+#define GLEE_H_DEFINED_glReferencePlaneSGIX
+  typedef void (APIENTRYP GLEEPFNGLREFERENCEPLANESGIXPROC) (const GLdouble * equation);
+  GLEE_EXTERN GLEEPFNGLREFERENCEPLANESGIXPROC GLeeFuncPtr_glReferencePlaneSGIX;
+  #define glReferencePlaneSGIX GLeeFuncPtr_glReferencePlaneSGIX
+#endif
+#endif 
+
+/* GL_SGIX_flush_raster */
+
+#ifndef GL_SGIX_flush_raster
+#define GL_SGIX_flush_raster 1
+#define __GLEE_GL_SGIX_flush_raster 1
+/* Constants */
+#ifndef GLEE_H_DEFINED_glFlushRasterSGIX
+#define GLEE_H_DEFINED_glFlushRasterSGIX
+  typedef void (APIENTRYP GLEEPFNGLFLUSHRASTERSGIXPROC) ();
+  GLEE_EXTERN GLEEPFNGLFLUSHRASTERSGIXPROC GLeeFuncPtr_glFlushRasterSGIX;
+  #define glFlushRasterSGIX GLeeFuncPtr_glFlushRasterSGIX
+#endif
+#endif 
+
+/* GL_SGIX_depth_texture */
+
+#ifndef GL_SGIX_depth_texture
+#define GL_SGIX_depth_texture 1
+#define __GLEE_GL_SGIX_depth_texture 1
+/* Constants */
+#define GL_DEPTH_COMPONENT16_SGIX                          0x81A5
+#define GL_DEPTH_COMPONENT24_SGIX                          0x81A6
+#define GL_DEPTH_COMPONENT32_SGIX                          0x81A7
+#endif 
+
+/* GL_SGIS_fog_function */
+
+#ifndef GL_SGIS_fog_function
+#define GL_SGIS_fog_function 1
+#define __GLEE_GL_SGIS_fog_function 1
+/* Constants */
+#define GL_FOG_FUNC_SGIS                                   0x812A
+#define GL_FOG_FUNC_POINTS_SGIS                            0x812B
+#define GL_MAX_FOG_FUNC_POINTS_SGIS                        0x812C
+#ifndef GLEE_H_DEFINED_glFogFuncSGIS
+#define GLEE_H_DEFINED_glFogFuncSGIS
+  typedef void (APIENTRYP GLEEPFNGLFOGFUNCSGISPROC) (GLsizei  n, const GLfloat * points);
+  GLEE_EXTERN GLEEPFNGLFOGFUNCSGISPROC GLeeFuncPtr_glFogFuncSGIS;
+  #define glFogFuncSGIS GLeeFuncPtr_glFogFuncSGIS
+#endif
+#ifndef GLEE_H_DEFINED_glGetFogFuncSGIS
+#define GLEE_H_DEFINED_glGetFogFuncSGIS
+  typedef void (APIENTRYP GLEEPFNGLGETFOGFUNCSGISPROC) (GLfloat * points);
+  GLEE_EXTERN GLEEPFNGLGETFOGFUNCSGISPROC GLeeFuncPtr_glGetFogFuncSGIS;
+  #define glGetFogFuncSGIS GLeeFuncPtr_glGetFogFuncSGIS
+#endif
+#endif 
+
+/* GL_SGIX_fog_offset */
+
+#ifndef GL_SGIX_fog_offset
+#define GL_SGIX_fog_offset 1
+#define __GLEE_GL_SGIX_fog_offset 1
+/* Constants */
+#define GL_FOG_OFFSET_SGIX                                 0x8198
+#define GL_FOG_OFFSET_VALUE_SGIX                           0x8199
+#endif 
+
+/* GL_HP_image_transform */
+
+#ifndef GL_HP_image_transform
+#define GL_HP_image_transform 1
+#define __GLEE_GL_HP_image_transform 1
+/* Constants */
+#define GL_IMAGE_SCALE_X_HP                                0x8155
+#define GL_IMAGE_SCALE_Y_HP                                0x8156
+#define GL_IMAGE_TRANSLATE_X_HP                            0x8157
+#define GL_IMAGE_TRANSLATE_Y_HP                            0x8158
+#define GL_IMAGE_ROTATE_ANGLE_HP                           0x8159
+#define GL_IMAGE_ROTATE_ORIGIN_X_HP                        0x815A
+#define GL_IMAGE_ROTATE_ORIGIN_Y_HP                        0x815B
+#define GL_IMAGE_MAG_FILTER_HP                             0x815C
+#define GL_IMAGE_MIN_FILTER_HP                             0x815D
+#define GL_IMAGE_CUBIC_WEIGHT_HP                           0x815E
+#define GL_CUBIC_HP                                        0x815F
+#define GL_AVERAGE_HP                                      0x8160
+#define GL_IMAGE_TRANSFORM_2D_HP                           0x8161
+#define GL_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP             0x8162
+#define GL_PROXY_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP       0x8163
+#ifndef GLEE_H_DEFINED_glImageTransformParameteriHP
+#define GLEE_H_DEFINED_glImageTransformParameteriHP
+  typedef void (APIENTRYP GLEEPFNGLIMAGETRANSFORMPARAMETERIHPPROC) (GLenum  target, GLenum  pname, GLint  param);
+  GLEE_EXTERN GLEEPFNGLIMAGETRANSFORMPARAMETERIHPPROC GLeeFuncPtr_glImageTransformParameteriHP;
+  #define glImageTransformParameteriHP GLeeFuncPtr_glImageTransformParameteriHP
+#endif
+#ifndef GLEE_H_DEFINED_glImageTransformParameterfHP
+#define GLEE_H_DEFINED_glImageTransformParameterfHP
+  typedef void (APIENTRYP GLEEPFNGLIMAGETRANSFORMPARAMETERFHPPROC) (GLenum  target, GLenum  pname, GLfloat  param);
+  GLEE_EXTERN GLEEPFNGLIMAGETRANSFORMPARAMETERFHPPROC GLeeFuncPtr_glImageTransformParameterfHP;
+  #define glImageTransformParameterfHP GLeeFuncPtr_glImageTransformParameterfHP
+#endif
+#ifndef GLEE_H_DEFINED_glImageTransformParameterivHP
+#define GLEE_H_DEFINED_glImageTransformParameterivHP
+  typedef void (APIENTRYP GLEEPFNGLIMAGETRANSFORMPARAMETERIVHPPROC) (GLenum  target, GLenum  pname, const GLint * params);
+  GLEE_EXTERN GLEEPFNGLIMAGETRANSFORMPARAMETERIVHPPROC GLeeFuncPtr_glImageTransformParameterivHP;
+  #define glImageTransformParameterivHP GLeeFuncPtr_glImageTransformParameterivHP
+#endif
+#ifndef GLEE_H_DEFINED_glImageTransformParameterfvHP
+#define GLEE_H_DEFINED_glImageTransformParameterfvHP
+  typedef void (APIENTRYP GLEEPFNGLIMAGETRANSFORMPARAMETERFVHPPROC) (GLenum  target, GLenum  pname, const GLfloat * params);
+  GLEE_EXTERN GLEEPFNGLIMAGETRANSFORMPARAMETERFVHPPROC GLeeFuncPtr_glImageTransformParameterfvHP;
+  #define glImageTransformParameterfvHP GLeeFuncPtr_glImageTransformParameterfvHP
+#endif
+#ifndef GLEE_H_DEFINED_glGetImageTransformParameterivHP
+#define GLEE_H_DEFINED_glGetImageTransformParameterivHP
+  typedef void (APIENTRYP GLEEPFNGLGETIMAGETRANSFORMPARAMETERIVHPPROC) (GLenum  target, GLenum  pname, GLint * params);
+  GLEE_EXTERN GLEEPFNGLGETIMAGETRANSFORMPARAMETERIVHPPROC GLeeFuncPtr_glGetImageTransformParameterivHP;
+  #define glGetImageTransformParameterivHP GLeeFuncPtr_glGetImageTransformParameterivHP
+#endif
+#ifndef GLEE_H_DEFINED_glGetImageTransformParameterfvHP
+#define GLEE_H_DEFINED_glGetImageTransformParameterfvHP
+  typedef void (APIENTRYP GLEEPFNGLGETIMAGETRANSFORMPARAMETERFVHPPROC) (GLenum  target, GLenum  pname, GLfloat * params);
+  GLEE_EXTERN GLEEPFNGLGETIMAGETRANSFORMPARAMETERFVHPPROC GLeeFuncPtr_glGetImageTransformParameterfvHP;
+  #define glGetImageTransformParameterfvHP GLeeFuncPtr_glGetImageTransformParameterfvHP
+#endif
+#endif 
+
+/* GL_HP_convolution_border_modes */
+
+#ifndef GL_HP_convolution_border_modes
+#define GL_HP_convolution_border_modes 1
+#define __GLEE_GL_HP_convolution_border_modes 1
+/* Constants */
+#define GL_IGNORE_BORDER_HP                                0x8150
+#define GL_CONSTANT_BORDER_HP                              0x8151
+#define GL_REPLICATE_BORDER_HP                             0x8153
+#define GL_CONVOLUTION_BORDER_COLOR_HP                     0x8154
+#endif 
+
+/* GL_INGR_palette_buffer */
+
+#ifndef GL_INGR_palette_buffer
+#define GL_INGR_palette_buffer 1
+#define __GLEE_GL_INGR_palette_buffer 1
+/* Constants */
+#endif 
+
+/* GL_SGIX_texture_add_env */
+
+#ifndef GL_SGIX_texture_add_env
+#define GL_SGIX_texture_add_env 1
+#define __GLEE_GL_SGIX_texture_add_env 1
+/* Constants */
+#define GL_TEXTURE_ENV_BIAS_SGIX                           0x80BE
+#endif 
+
+/* GL_EXT_color_subtable */
+
+#ifndef GL_EXT_color_subtable
+#define GL_EXT_color_subtable 1
+#define __GLEE_GL_EXT_color_subtable 1
+/* Constants */
+#ifndef GLEE_H_DEFINED_glColorSubTableEXT
+#define GLEE_H_DEFINED_glColorSubTableEXT
+  typedef void (APIENTRYP GLEEPFNGLCOLORSUBTABLEEXTPROC) (GLenum  target, GLsizei  start, GLsizei  count, GLenum  format, GLenum  type, const GLvoid * data);
+  GLEE_EXTERN GLEEPFNGLCOLORSUBTABLEEXTPROC GLeeFuncPtr_glColorSubTableEXT;
+  #define glColorSubTableEXT GLeeFuncPtr_glColorSubTableEXT
+#endif
+#ifndef GLEE_H_DEFINED_glCopyColorSubTableEXT
+#define GLEE_H_DEFINED_glCopyColorSubTableEXT
+  typedef void (APIENTRYP GLEEPFNGLCOPYCOLORSUBTABLEEXTPROC) (GLenum  target, GLsizei  start, GLint  x, GLint  y, GLsizei  width);
+  GLEE_EXTERN GLEEPFNGLCOPYCOLORSUBTABLEEXTPROC GLeeFuncPtr_glCopyColorSubTableEXT;
+  #define glCopyColorSubTableEXT GLeeFuncPtr_glCopyColorSubTableEXT
+#endif
+#endif 
+
+/* GL_PGI_vertex_hints */
+
+#ifndef GL_PGI_vertex_hints
+#define GL_PGI_vertex_hints 1
+#define __GLEE_GL_PGI_vertex_hints 1
+/* Constants */
+#define GL_VERTEX_DATA_HINT_PGI                            0x1A22A
+#define GL_VERTEX_CONSISTENT_HINT_PGI                      0x1A22B
+#define GL_MATERIAL_SIDE_HINT_PGI                          0x1A22C
+#define GL_MAX_VERTEX_HINT_PGI                             0x1A22D
+#define GL_COLOR3_BIT_PGI                                  0x00010000
+#define GL_COLOR4_BIT_PGI                                  0x00020000
+#define GL_EDGEFLAG_BIT_PGI                                0x00040000
+#define GL_INDEX_BIT_PGI                                   0x00080000
+#define GL_MAT_AMBIENT_BIT_PGI                             0x00100000
+#define GL_MAT_AMBIENT_AND_DIFFUSE_BIT_PGI                 0x00200000
+#define GL_MAT_DIFFUSE_BIT_PGI                             0x00400000
+#define GL_MAT_EMISSION_BIT_PGI                            0x00800000
+#define GL_MAT_COLOR_INDEXES_BIT_PGI                       0x01000000
+#define GL_MAT_SHININESS_BIT_PGI                           0x02000000
+#define GL_MAT_SPECULAR_BIT_PGI                            0x04000000
+#define GL_NORMAL_BIT_PGI                                  0x08000000
+#define GL_TEXCOORD1_BIT_PGI                               0x10000000
+#define GL_TEXCOORD2_BIT_PGI                               0x20000000
+#define GL_TEXCOORD3_BIT_PGI                               0x40000000
+#define GL_TEXCOORD4_BIT_PGI                               0x80000000
+#define GL_VERTEX23_BIT_PGI                                0x00000004
+#define GL_VERTEX4_BIT_PGI                                 0x00000008
+#endif 
+
+/* GL_PGI_misc_hints */
+
+#ifndef GL_PGI_misc_hints
+#define GL_PGI_misc_hints 1
+#define __GLEE_GL_PGI_misc_hints 1
+/* Constants */
+#define GL_PREFER_DOUBLEBUFFER_HINT_PGI                    0x1A1F8
+#define GL_CONSERVE_MEMORY_HINT_PGI                        0x1A1FD
+#define GL_RECLAIM_MEMORY_HINT_PGI                         0x1A1FE
+#define GL_NATIVE_GRAPHICS_HANDLE_PGI                      0x1A202
+#define GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI                  0x1A203
+#define GL_NATIVE_GRAPHICS_END_HINT_PGI                    0x1A204
+#define GL_ALWAYS_FAST_HINT_PGI                            0x1A20C
+#define GL_ALWAYS_SOFT_HINT_PGI                            0x1A20D
+#define GL_ALLOW_DRAW_OBJ_HINT_PGI                         0x1A20E
+#define GL_ALLOW_DRAW_WIN_HINT_PGI                         0x1A20F
+#define GL_ALLOW_DRAW_FRG_HINT_PGI                         0x1A210
+#define GL_ALLOW_DRAW_MEM_HINT_PGI                         0x1A211
+#define GL_STRICT_DEPTHFUNC_HINT_PGI                       0x1A216
+#define GL_STRICT_LIGHTING_HINT_PGI                        0x1A217
+#define GL_STRICT_SCISSOR_HINT_PGI                         0x1A218
+#define GL_FULL_STIPPLE_HINT_PGI                           0x1A219
+#define GL_CLIP_NEAR_HINT_PGI                              0x1A220
+#define GL_CLIP_FAR_HINT_PGI                               0x1A221
+#define GL_WIDE_LINE_HINT_PGI                              0x1A222
+#define GL_BACK_NORMALS_HINT_PGI                           0x1A223
+#ifndef GLEE_H_DEFINED_glHintPGI
+#define GLEE_H_DEFINED_glHintPGI
+  typedef void (APIENTRYP GLEEPFNGLHINTPGIPROC) (GLenum  target, GLint  mode);
+  GLEE_EXTERN GLEEPFNGLHINTPGIPROC GLeeFuncPtr_glHintPGI;
+  #define glHintPGI GLeeFuncPtr_glHintPGI
+#endif
+#endif 
+
+/* GL_EXT_paletted_texture */
+
+#ifndef GL_EXT_paletted_texture
+#define GL_EXT_paletted_texture 1
+#define __GLEE_GL_EXT_paletted_texture 1
+/* Constants */
+#define GL_COLOR_INDEX1_EXT                                0x80E2
+#define GL_COLOR_INDEX2_EXT                                0x80E3
+#define GL_COLOR_INDEX4_EXT                                0x80E4
+#define GL_COLOR_INDEX8_EXT                                0x80E5
+#define GL_COLOR_INDEX12_EXT                               0x80E6
+#define GL_COLOR_INDEX16_EXT                               0x80E7
+#define GL_TEXTURE_INDEX_SIZE_EXT                          0x80ED
+#ifndef GLEE_H_DEFINED_glColorTableEXT
+#define GLEE_H_DEFINED_glColorTableEXT
+  typedef void (APIENTRYP GLEEPFNGLCOLORTABLEEXTPROC) (GLenum  target, GLenum  internalFormat, GLsizei  width, GLenum  format, GLenum  type, const GLvoid * table);
+  GLEE_EXTERN GLEEPFNGLCOLORTABLEEXTPROC GLeeFuncPtr_glColorTableEXT;
+  #define glColorTableEXT GLeeFuncPtr_glColorTableEXT
+#endif
+#ifndef GLEE_H_DEFINED_glGetColorTableEXT
+#define GLEE_H_DEFINED_glGetColorTableEXT
+  typedef void (APIENTRYP GLEEPFNGLGETCOLORTABLEEXTPROC) (GLenum  target, GLenum  format, GLenum  type, GLvoid * data);
+  GLEE_EXTERN GLEEPFNGLGETCOLORTABLEEXTPROC GLeeFuncPtr_glGetColorTableEXT;
+  #define glGetColorTableEXT GLeeFuncPtr_glGetColorTableEXT
+#endif
+#ifndef GLEE_H_DEFINED_glGetColorTableParameterivEXT
+#define GLEE_H_DEFINED_glGetColorTableParameterivEXT
+  typedef void (APIENTRYP GLEEPFNGLGETCOLORTABLEPARAMETERIVEXTPROC) (GLenum  target, GLenum  pname, GLint * params);
+  GLEE_EXTERN GLEEPFNGLGETCOLORTABLEPARAMETERIVEXTPROC GLeeFuncPtr_glGetColorTableParameterivEXT;
+  #define glGetColorTableParameterivEXT GLeeFuncPtr_glGetColorTableParameterivEXT
+#endif
+#ifndef GLEE_H_DEFINED_glGetColorTableParameterfvEXT
+#define GLEE_H_DEFINED_glGetColorTableParameterfvEXT
+  typedef void (APIENTRYP GLEEPFNGLGETCOLORTABLEPARAMETERFVEXTPROC) (GLenum  target, GLenum  pname, GLfloat * params);
+  GLEE_EXTERN GLEEPFNGLGETCOLORTABLEPARAMETERFVEXTPROC GLeeFuncPtr_glGetColorTableParameterfvEXT;
+  #define glGetColorTableParameterfvEXT GLeeFuncPtr_glGetColorTableParameterfvEXT
+#endif
+#endif 
+
+/* GL_EXT_clip_volume_hint */
+
+#ifndef GL_EXT_clip_volume_hint
+#define GL_EXT_clip_volume_hint 1
+#define __GLEE_GL_EXT_clip_volume_hint 1
+/* Constants */
+#define GL_CLIP_VOLUME_CLIPPING_HINT_EXT                   0x80F0
+#endif 
+
+/* GL_SGIX_list_priority */
+
+#ifndef GL_SGIX_list_priority
+#define GL_SGIX_list_priority 1
+#define __GLEE_GL_SGIX_list_priority 1
+/* Constants */
+#define GL_LIST_PRIORITY_SGIX                              0x8182
+#ifndef GLEE_H_DEFINED_glGetListParameterfvSGIX
+#define GLEE_H_DEFINED_glGetListParameterfvSGIX
+  typedef void (APIENTRYP GLEEPFNGLGETLISTPARAMETERFVSGIXPROC) (GLuint  list, GLenum  pname, GLfloat * params);
+  GLEE_EXTERN GLEEPFNGLGETLISTPARAMETERFVSGIXPROC GLeeFuncPtr_glGetListParameterfvSGIX;
+  #define glGetListParameterfvSGIX GLeeFuncPtr_glGetListParameterfvSGIX
+#endif
+#ifndef GLEE_H_DEFINED_glGetListParameterivSGIX
+#define GLEE_H_DEFINED_glGetListParameterivSGIX
+  typedef void (APIENTRYP GLEEPFNGLGETLISTPARAMETERIVSGIXPROC) (GLuint  list, GLenum  pname, GLint * params);
+  GLEE_EXTERN GLEEPFNGLGETLISTPARAMETERIVSGIXPROC GLeeFuncPtr_glGetListParameterivSGIX;
+  #define glGetListParameterivSGIX GLeeFuncPtr_glGetListParameterivSGIX
+#endif
+#ifndef GLEE_H_DEFINED_glListParameterfSGIX
+#define GLEE_H_DEFINED_glListParameterfSGIX
+  typedef void (APIENTRYP GLEEPFNGLLISTPARAMETERFSGIXPROC) (GLuint  list, GLenum  pname, GLfloat  param);
+  GLEE_EXTERN GLEEPFNGLLISTPARAMETERFSGIXPROC GLeeFuncPtr_glListParameterfSGIX;
+  #define glListParameterfSGIX GLeeFuncPtr_glListParameterfSGIX
+#endif
+#ifndef GLEE_H_DEFINED_glListParameterfvSGIX
+#define GLEE_H_DEFINED_glListParameterfvSGIX
+  typedef void (APIENTRYP GLEEPFNGLLISTPARAMETERFVSGIXPROC) (GLuint  list, GLenum  pname, const GLfloat * params);
+  GLEE_EXTERN GLEEPFNGLLISTPARAMETERFVSGIXPROC GLeeFuncPtr_glListParameterfvSGIX;
+  #define glListParameterfvSGIX GLeeFuncPtr_glListParameterfvSGIX
+#endif
+#ifndef GLEE_H_DEFINED_glListParameteriSGIX
+#define GLEE_H_DEFINED_glListParameteriSGIX
+  typedef void (APIENTRYP GLEEPFNGLLISTPARAMETERISGIXPROC) (GLuint  list, GLenum  pname, GLint  param);
+  GLEE_EXTERN GLEEPFNGLLISTPARAMETERISGIXPROC GLeeFuncPtr_glListParameteriSGIX;
+  #define glListParameteriSGIX GLeeFuncPtr_glListParameteriSGIX
+#endif
+#ifndef GLEE_H_DEFINED_glListParameterivSGIX
+#define GLEE_H_DEFINED_glListParameterivSGIX
+  typedef void (APIENTRYP GLEEPFNGLLISTPARAMETERIVSGIXPROC) (GLuint  list, GLenum  pname, const GLint * params);
+  GLEE_EXTERN GLEEPFNGLLISTPARAMETERIVSGIXPROC GLeeFuncPtr_glListParameterivSGIX;
+  #define glListParameterivSGIX GLeeFuncPtr_glListParameterivSGIX
+#endif
+#endif 
+
+/* GL_SGIX_ir_instrument1 */
+
+#ifndef GL_SGIX_ir_instrument1
+#define GL_SGIX_ir_instrument1 1
+#define __GLEE_GL_SGIX_ir_instrument1 1
+/* Constants */
+#define GL_IR_INSTRUMENT1_SGIX                             0x817F
+#endif 
+
+/* GL_SGIX_calligraphic_fragment */
+
+#ifndef GL_SGIX_calligraphic_fragment
+#define GL_SGIX_calligraphic_fragment 1
+#define __GLEE_GL_SGIX_calligraphic_fragment 1
+/* Constants */
+#define GL_CALLIGRAPHIC_FRAGMENT_SGIX                      0x8183
+#endif 
+
+/* GL_SGIX_texture_lod_bias */
+
+#ifndef GL_SGIX_texture_lod_bias
+#define GL_SGIX_texture_lod_bias 1
+#define __GLEE_GL_SGIX_texture_lod_bias 1
+/* Constants */
+#define GL_TEXTURE_LOD_BIAS_S_SGIX                         0x818E
+#define GL_TEXTURE_LOD_BIAS_T_SGIX                         0x818F
+#define GL_TEXTURE_LOD_BIAS_R_SGIX                         0x8190
+#endif 
+
+/* GL_SGIX_shadow_ambient */
+
+#ifndef GL_SGIX_shadow_ambient
+#define GL_SGIX_shadow_ambient 1
+#define __GLEE_GL_SGIX_shadow_ambient 1
+/* Constants */
+#define GL_SHADOW_AMBIENT_SGIX                             0x80BF
+#endif 
+
+/* GL_EXT_index_texture */
+
+#ifndef GL_EXT_index_texture
+#define GL_EXT_index_texture 1
+#define __GLEE_GL_EXT_index_texture 1
+/* Constants */
+#endif 
+
+/* GL_EXT_index_material */
+
+#ifndef GL_EXT_index_material
+#define GL_EXT_index_material 1
+#define __GLEE_GL_EXT_index_material 1
+/* Constants */
+#define GL_INDEX_MATERIAL_EXT                              0x81B8
+#define GL_INDEX_MATERIAL_PARAMETER_EXT                    0x81B9
+#define GL_INDEX_MATERIAL_FACE_EXT                         0x81BA
+#ifndef GLEE_H_DEFINED_glIndexMaterialEXT
+#define GLEE_H_DEFINED_glIndexMaterialEXT
+  typedef void (APIENTRYP GLEEPFNGLINDEXMATERIALEXTPROC) (GLenum  face, GLenum  mode);
+  GLEE_EXTERN GLEEPFNGLINDEXMATERIALEXTPROC GLeeFuncPtr_glIndexMaterialEXT;
+  #define glIndexMaterialEXT GLeeFuncPtr_glIndexMaterialEXT
+#endif
+#endif 
+
+/* GL_EXT_index_func */
+
+#ifndef GL_EXT_index_func
+#define GL_EXT_index_func 1
+#define __GLEE_GL_EXT_index_func 1
+/* Constants */
+#define GL_INDEX_TEST_EXT                                  0x81B5
+#define GL_INDEX_TEST_FUNC_EXT                             0x81B6
+#define GL_INDEX_TEST_REF_EXT                              0x81B7
+#ifndef GLEE_H_DEFINED_glIndexFuncEXT
+#define GLEE_H_DEFINED_glIndexFuncEXT
+  typedef void (APIENTRYP GLEEPFNGLINDEXFUNCEXTPROC) (GLenum  func, GLclampf  ref);
+  GLEE_EXTERN GLEEPFNGLINDEXFUNCEXTPROC GLeeFuncPtr_glIndexFuncEXT;
+  #define glIndexFuncEXT GLeeFuncPtr_glIndexFuncEXT
+#endif
+#endif 
+
+/* GL_EXT_index_array_formats */
+
+#ifndef GL_EXT_index_array_formats
+#define GL_EXT_index_array_formats 1
+#define __GLEE_GL_EXT_index_array_formats 1
+/* Constants */
+#define GL_IUI_V2F_EXT                                     0x81AD
+#define GL_IUI_V3F_EXT                                     0x81AE
+#define GL_IUI_N3F_V2F_EXT                                 0x81AF
+#define GL_IUI_N3F_V3F_EXT                                 0x81B0
+#define GL_T2F_IUI_V2F_EXT                                 0x81B1
+#define GL_T2F_IUI_V3F_EXT                                 0x81B2
+#define GL_T2F_IUI_N3F_V2F_EXT                             0x81B3
+#define GL_T2F_IUI_N3F_V3F_EXT                             0x81B4
+#endif 
+
+/* GL_EXT_compiled_vertex_array */
+
+#ifndef GL_EXT_compiled_vertex_array
+#define GL_EXT_compiled_vertex_array 1
+#define __GLEE_GL_EXT_compiled_vertex_array 1
+/* Constants */
+#define GL_ARRAY_ELEMENT_LOCK_FIRST_EXT                    0x81A8
+#define GL_ARRAY_ELEMENT_LOCK_COUNT_EXT                    0x81A9
+#ifndef GLEE_H_DEFINED_glLockArraysEXT
+#define GLEE_H_DEFINED_glLockArraysEXT
+  typedef void (APIENTRYP GLEEPFNGLLOCKARRAYSEXTPROC) (GLint  first, GLsizei  count);
+  GLEE_EXTERN GLEEPFNGLLOCKARRAYSEXTPROC GLeeFuncPtr_glLockArraysEXT;
+  #define glLockArraysEXT GLeeFuncPtr_glLockArraysEXT
+#endif
+#ifndef GLEE_H_DEFINED_glUnlockArraysEXT
+#define GLEE_H_DEFINED_glUnlockArraysEXT
+  typedef void (APIENTRYP GLEEPFNGLUNLOCKARRAYSEXTPROC) ();
+  GLEE_EXTERN GLEEPFNGLUNLOCKARRAYSEXTPROC GLeeFuncPtr_glUnlockArraysEXT;
+  #define glUnlockArraysEXT GLeeFuncPtr_glUnlockArraysEXT
+#endif
+#endif 
+
+/* GL_EXT_cull_vertex */
+
+#ifndef GL_EXT_cull_vertex
+#define GL_EXT_cull_vertex 1
+#define __GLEE_GL_EXT_cull_vertex 1
+/* Constants */
+#define GL_CULL_VERTEX_EXT                                 0x81AA
+#define GL_CULL_VERTEX_EYE_POSITION_EXT                    0x81AB
+#define GL_CULL_VERTEX_OBJECT_POSITION_EXT                 0x81AC
+#ifndef GLEE_H_DEFINED_glCullParameterdvEXT
+#define GLEE_H_DEFINED_glCullParameterdvEXT
+  typedef void (APIENTRYP GLEEPFNGLCULLPARAMETERDVEXTPROC) (GLenum  pname, GLdouble * params);
+  GLEE_EXTERN GLEEPFNGLCULLPARAMETERDVEXTPROC GLeeFuncPtr_glCullParameterdvEXT;
+  #define glCullParameterdvEXT GLeeFuncPtr_glCullParameterdvEXT
+#endif
+#ifndef GLEE_H_DEFINED_glCullParameterfvEXT
+#define GLEE_H_DEFINED_glCullParameterfvEXT
+  typedef void (APIENTRYP GLEEPFNGLCULLPARAMETERFVEXTPROC) (GLenum  pname, GLfloat * params);
+  GLEE_EXTERN GLEEPFNGLCULLPARAMETERFVEXTPROC GLeeFuncPtr_glCullParameterfvEXT;
+  #define glCullParameterfvEXT GLeeFuncPtr_glCullParameterfvEXT
+#endif
+#endif 
+
+/* GL_SGIX_ycrcb */
+
+#ifndef GL_SGIX_ycrcb
+#define GL_SGIX_ycrcb 1
+#define __GLEE_GL_SGIX_ycrcb 1
+/* Constants */
+#define GL_YCRCB_422_SGIX                                  0x81BB
+#define GL_YCRCB_444_SGIX                                  0x81BC
+#endif 
+
+/* GL_SGIX_fragment_lighting */
+
+#ifndef GL_SGIX_fragment_lighting
+#define GL_SGIX_fragment_lighting 1
+#define __GLEE_GL_SGIX_fragment_lighting 1
+/* Constants */
+#define GL_FRAGMENT_LIGHTING_SGIX                          0x8400
+#define GL_FRAGMENT_COLOR_MATERIAL_SGIX                    0x8401
+#define GL_FRAGMENT_COLOR_MATERIAL_FACE_SGIX               0x8402
+#define GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX          0x8403
+#define GL_MAX_FRAGMENT_LIGHTS_SGIX                        0x8404
+#define GL_MAX_ACTIVE_LIGHTS_SGIX                          0x8405
+#define GL_CURRENT_RASTER_NORMAL_SGIX                      0x8406
+#define GL_LIGHT_ENV_MODE_SGIX                             0x8407
+#define GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX          0x8408
+#define GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX              0x8409
+#define GL_FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX               0x840A
+#define GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX  0x840B
+#define GL_FRAGMENT_LIGHT0_SGIX                            0x840C
+#define GL_FRAGMENT_LIGHT1_SGIX                            0x840D
+#define GL_FRAGMENT_LIGHT2_SGIX                            0x840E
+#define GL_FRAGMENT_LIGHT3_SGIX                            0x840F
+#define GL_FRAGMENT_LIGHT4_SGIX                            0x8410
+#define GL_FRAGMENT_LIGHT5_SGIX                            0x8411
+#define GL_FRAGMENT_LIGHT6_SGIX                            0x8412
+#define GL_FRAGMENT_LIGHT7_SGIX                            0x8413
+#ifndef GLEE_H_DEFINED_glFragmentColorMaterialSGIX
+#define GLEE_H_DEFINED_glFragmentColorMaterialSGIX
+  typedef void (APIENTRYP GLEEPFNGLFRAGMENTCOLORMATERIALSGIXPROC) (GLenum  face, GLenum  mode);
+  GLEE_EXTERN GLEEPFNGLFRAGMENTCOLORMATERIALSGIXPROC GLeeFuncPtr_glFragmentColorMaterialSGIX;
+  #define glFragmentColorMaterialSGIX GLeeFuncPtr_glFragmentColorMaterialSGIX
+#endif
+#ifndef GLEE_H_DEFINED_glFragmentLightfSGIX
+#define GLEE_H_DEFINED_glFragmentLightfSGIX
+  typedef void (APIENTRYP GLEEPFNGLFRAGMENTLIGHTFSGIXPROC) (GLenum  light, GLenum  pname, GLfloat  param);
+  GLEE_EXTERN GLEEPFNGLFRAGMENTLIGHTFSGIXPROC GLeeFuncPtr_glFragmentLightfSGIX;
+  #define glFragmentLightfSGIX GLeeFuncPtr_glFragmentLightfSGIX
+#endif
+#ifndef GLEE_H_DEFINED_glFragmentLightfvSGIX
+#define GLEE_H_DEFINED_glFragmentLightfvSGIX
+  typedef void (APIENTRYP GLEEPFNGLFRAGMENTLIGHTFVSGIXPROC) (GLenum  light, GLenum  pname, const GLfloat * params);
+  GLEE_EXTERN GLEEPFNGLFRAGMENTLIGHTFVSGIXPROC GLeeFuncPtr_glFragmentLightfvSGIX;
+  #define glFragmentLightfvSGIX GLeeFuncPtr_glFragmentLightfvSGIX
+#endif
+#ifndef GLEE_H_DEFINED_glFragmentLightiSGIX
+#define GLEE_H_DEFINED_glFragmentLightiSGIX
+  typedef void (APIENTRYP GLEEPFNGLFRAGMENTLIGHTISGIXPROC) (GLenum  light, GLenum  pname, GLint  param);
+  GLEE_EXTERN GLEEPFNGLFRAGMENTLIGHTISGIXPROC GLeeFuncPtr_glFragmentLightiSGIX;
+  #define glFragmentLightiSGIX GLeeFuncPtr_glFragmentLightiSGIX
+#endif
+#ifndef GLEE_H_DEFINED_glFragmentLightivSGIX
+#define GLEE_H_DEFINED_glFragmentLightivSGIX
+  typedef void (APIENTRYP GLEEPFNGLFRAGMENTLIGHTIVSGIXPROC) (GLenum  light, GLenum  pname, const GLint * params);
+  GLEE_EXTERN GLEEPFNGLFRAGMENTLIGHTIVSGIXPROC GLeeFuncPtr_glFragmentLightivSGIX;
+  #define glFragmentLightivSGIX GLeeFuncPtr_glFragmentLightivSGIX
+#endif
+#ifndef GLEE_H_DEFINED_glFragmentLightModelfSGIX
+#define GLEE_H_DEFINED_glFragmentLightModelfSGIX
+  typedef void (APIENTRYP GLEEPFNGLFRAGMENTLIGHTMODELFSGIXPROC) (GLenum  pname, GLfloat  param);
+  GLEE_EXTERN GLEEPFNGLFRAGMENTLIGHTMODELFSGIXPROC GLeeFuncPtr_glFragmentLightModelfSGIX;
+  #define glFragmentLightModelfSGIX GLeeFuncPtr_glFragmentLightModelfSGIX
+#endif
+#ifndef GLEE_H_DEFINED_glFragmentLightModelfvSGIX
+#define GLEE_H_DEFINED_glFragmentLightModelfvSGIX
+  typedef void (APIENTRYP GLEEPFNGLFRAGMENTLIGHTMODELFVSGIXPROC) (GLenum  pname, const GLfloat * params);
+  GLEE_EXTERN GLEEPFNGLFRAGMENTLIGHTMODELFVSGIXPROC GLeeFuncPtr_glFragmentLightModelfvSGIX;
+  #define glFragmentLightModelfvSGIX GLeeFuncPtr_glFragmentLightModelfvSGIX
+#endif
+#ifndef GLEE_H_DEFINED_glFragmentLightModeliSGIX
+#define GLEE_H_DEFINED_glFragmentLightModeliSGIX
+  typedef void (APIENTRYP GLEEPFNGLFRAGMENTLIGHTMODELISGIXPROC) (GLenum  pname, GLint  param);
+  GLEE_EXTERN GLEEPFNGLFRAGMENTLIGHTMODELISGIXPROC GLeeFuncPtr_glFragmentLightModeliSGIX;
+  #define glFragmentLightModeliSGIX GLeeFuncPtr_glFragmentLightModeliSGIX
+#endif
+#ifndef GLEE_H_DEFINED_glFragmentLightModelivSGIX
+#define GLEE_H_DEFINED_glFragmentLightModelivSGIX
+  typedef void (APIENTRYP GLEEPFNGLFRAGMENTLIGHTMODELIVSGIXPROC) (GLenum  pname, const GLint * params);
+  GLEE_EXTERN GLEEPFNGLFRAGMENTLIGHTMODELIVSGIXPROC GLeeFuncPtr_glFragmentLightModelivSGIX;
+  #define glFragmentLightModelivSGIX GLeeFuncPtr_glFragmentLightModelivSGIX
+#endif
+#ifndef GLEE_H_DEFINED_glFragmentMaterialfSGIX
+#define GLEE_H_DEFINED_glFragmentMaterialfSGIX
+  typedef void (APIENTRYP GLEEPFNGLFRAGMENTMATERIALFSGIXPROC) (GLenum  face, GLenum  pname, GLfloat  param);
+  GLEE_EXTERN GLEEPFNGLFRAGMENTMATERIALFSGIXPROC GLeeFuncPtr_glFragmentMaterialfSGIX;
+  #define glFragmentMaterialfSGIX GLeeFuncPtr_glFragmentMaterialfSGIX
+#endif
+#ifndef GLEE_H_DEFINED_glFragmentMaterialfvSGIX
+#define GLEE_H_DEFINED_glFragmentMaterialfvSGIX
+  typedef void (APIENTRYP GLEEPFNGLFRAGMENTMATERIALFVSGIXPROC) (GLenum  face, GLenum  pname, const GLfloat * params);
+  GLEE_EXTERN GLEEPFNGLFRAGMENTMATERIALFVSGIXPROC GLeeFuncPtr_glFragmentMaterialfvSGIX;
+  #define glFragmentMaterialfvSGIX GLeeFuncPtr_glFragmentMaterialfvSGIX
+#endif
+#ifndef GLEE_H_DEFINED_glFragmentMaterialiSGIX
+#define GLEE_H_DEFINED_glFragmentMaterialiSGIX
+  typedef void (APIENTRYP GLEEPFNGLFRAGMENTMATERIALISGIXPROC) (GLenum  face, GLenum  pname, GLint  param);
+  GLEE_EXTERN GLEEPFNGLFRAGMENTMATERIALISGIXPROC GLeeFuncPtr_glFragmentMaterialiSGIX;
+  #define glFragmentMaterialiSGIX GLeeFuncPtr_glFragmentMaterialiSGIX
+#endif
+#ifndef GLEE_H_DEFINED_glFragmentMaterialivSGIX
+#define GLEE_H_DEFINED_glFragmentMaterialivSGIX
+  typedef void (APIENTRYP GLEEPFNGLFRAGMENTMATERIALIVSGIXPROC) (GLenum  face, GLenum  pname, const GLint * params);
+  GLEE_EXTERN GLEEPFNGLFRAGMENTMATERIALIVSGIXPROC GLeeFuncPtr_glFragmentMaterialivSGIX;
+  #define glFragmentMaterialivSGIX GLeeFuncPtr_glFragmentMaterialivSGIX
+#endif
+#ifndef GLEE_H_DEFINED_glGetFragmentLightfvSGIX
+#define GLEE_H_DEFINED_glGetFragmentLightfvSGIX
+  typedef void (APIENTRYP GLEEPFNGLGETFRAGMENTLIGHTFVSGIXPROC) (GLenum  light, GLenum  pname, GLfloat * params);
+  GLEE_EXTERN GLEEPFNGLGETFRAGMENTLIGHTFVSGIXPROC GLeeFuncPtr_glGetFragmentLightfvSGIX;
+  #define glGetFragmentLightfvSGIX GLeeFuncPtr_glGetFragmentLightfvSGIX
+#endif
+#ifndef GLEE_H_DEFINED_glGetFragmentLightivSGIX
+#define GLEE_H_DEFINED_glGetFragmentLightivSGIX
+  typedef void (APIENTRYP GLEEPFNGLGETFRAGMENTLIGHTIVSGIXPROC) (GLenum  light, GLenum  pname, GLint * params);
+  GLEE_EXTERN GLEEPFNGLGETFRAGMENTLIGHTIVSGIXPROC GLeeFuncPtr_glGetFragmentLightivSGIX;
+  #define glGetFragmentLightivSGIX GLeeFuncPtr_glGetFragmentLightivSGIX
+#endif
+#ifndef GLEE_H_DEFINED_glGetFragmentMaterialfvSGIX
+#define GLEE_H_DEFINED_glGetFragmentMaterialfvSGIX
+  typedef void (APIENTRYP GLEEPFNGLGETFRAGMENTMATERIALFVSGIXPROC) (GLenum  face, GLenum  pname, GLfloat * params);
+  GLEE_EXTERN GLEEPFNGLGETFRAGMENTMATERIALFVSGIXPROC GLeeFuncPtr_glGetFragmentMaterialfvSGIX;
+  #define glGetFragmentMaterialfvSGIX GLeeFuncPtr_glGetFragmentMaterialfvSGIX
+#endif
+#ifndef GLEE_H_DEFINED_glGetFragmentMaterialivSGIX
+#define GLEE_H_DEFINED_glGetFragmentMaterialivSGIX
+  typedef void (APIENTRYP GLEEPFNGLGETFRAGMENTMATERIALIVSGIXPROC) (GLenum  face, GLenum  pname, GLint * params);
+  GLEE_EXTERN GLEEPFNGLGETFRAGMENTMATERIALIVSGIXPROC GLeeFuncPtr_glGetFragmentMaterialivSGIX;
+  #define glGetFragmentMaterialivSGIX GLeeFuncPtr_glGetFragmentMaterialivSGIX
+#endif
+#ifndef GLEE_H_DEFINED_glLightEnviSGIX
+#define GLEE_H_DEFINED_glLightEnviSGIX
+  typedef void (APIENTRYP GLEEPFNGLLIGHTENVISGIXPROC) (GLenum  pname, GLint  param);
+  GLEE_EXTERN GLEEPFNGLLIGHTENVISGIXPROC GLeeFuncPtr_glLightEnviSGIX;
+  #define glLightEnviSGIX GLeeFuncPtr_glLightEnviSGIX
+#endif
+#endif 
+
+/* GL_IBM_rasterpos_clip */
+
+#ifndef GL_IBM_rasterpos_clip
+#define GL_IBM_rasterpos_clip 1
+#define __GLEE_GL_IBM_rasterpos_clip 1
+/* Constants */
+#define GL_RASTER_POSITION_UNCLIPPED_IBM                   0x19262
+#endif 
+
+/* GL_HP_texture_lighting */
+
+#ifndef GL_HP_texture_lighting
+#define GL_HP_texture_lighting 1
+#define __GLEE_GL_HP_texture_lighting 1
+/* Constants */
+#define GL_TEXTURE_LIGHTING_MODE_HP                        0x8167
+#define GL_TEXTURE_POST_SPECULAR_HP                        0x8168
+#define GL_TEXTURE_PRE_SPECULAR_HP                         0x8169
+#endif 
+
+/* GL_EXT_draw_range_elements */
+
+#ifndef GL_EXT_draw_range_elements
+#define GL_EXT_draw_range_elements 1
+#define __GLEE_GL_EXT_draw_range_elements 1
+/* Constants */
+#define GL_MAX_ELEMENTS_VERTICES_EXT                       0x80E8
+#define GL_MAX_ELEMENTS_INDICES_EXT                        0x80E9
+#ifndef GLEE_H_DEFINED_glDrawRangeElementsEXT
+#define GLEE_H_DEFINED_glDrawRangeElementsEXT
+  typedef void (APIENTRYP GLEEPFNGLDRAWRANGEELEMENTSEXTPROC) (GLenum  mode, GLuint  start, GLuint  end, GLsizei  count, GLenum  type, const GLvoid * indices);
+  GLEE_EXTERN GLEEPFNGLDRAWRANGEELEMENTSEXTPROC GLeeFuncPtr_glDrawRangeElementsEXT;
+  #define glDrawRangeElementsEXT GLeeFuncPtr_glDrawRangeElementsEXT
+#endif
+#endif 
+
+/* GL_WIN_phong_shading */
+
+#ifndef GL_WIN_phong_shading
+#define GL_WIN_phong_shading 1
+#define __GLEE_GL_WIN_phong_shading 1
+/* Constants */
+#define GL_PHONG_WIN                                       0x80EA
+#define GL_PHONG_HINT_WIN                                  0x80EB
+#endif 
+
+/* GL_WIN_specular_fog */
+
+#ifndef GL_WIN_specular_fog
+#define GL_WIN_specular_fog 1
+#define __GLEE_GL_WIN_specular_fog 1
+/* Constants */
+#define GL_FOG_SPECULAR_TEXTURE_WIN                        0x80EC
+#endif 
+
+/* GL_EXT_light_texture */
+
+#ifndef GL_EXT_light_texture
+#define GL_EXT_light_texture 1
+#define __GLEE_GL_EXT_light_texture 1
+/* Constants */
+#define GL_FRAGMENT_MATERIAL_EXT                           0x8349
+#define GL_FRAGMENT_NORMAL_EXT                             0x834A
+#define GL_FRAGMENT_COLOR_EXT                              0x834C
+#define GL_ATTENUATION_EXT                                 0x834D
+#define GL_SHADOW_ATTENUATION_EXT                          0x834E
+#define GL_TEXTURE_APPLICATION_MODE_EXT                    0x834F
+#define GL_TEXTURE_LIGHT_EXT                               0x8350
+#define GL_TEXTURE_MATERIAL_FACE_EXT                       0x8351
+#define GL_TEXTURE_MATERIAL_PARAMETER_EXT                  0x8352
+#ifndef GLEE_H_DEFINED_glApplyTextureEXT
+#define GLEE_H_DEFINED_glApplyTextureEXT
+  typedef void (APIENTRYP GLEEPFNGLAPPLYTEXTUREEXTPROC) (GLenum  mode);
+  GLEE_EXTERN GLEEPFNGLAPPLYTEXTUREEXTPROC GLeeFuncPtr_glApplyTextureEXT;
+  #define glApplyTextureEXT GLeeFuncPtr_glApplyTextureEXT
+#endif
+#ifndef GLEE_H_DEFINED_glTextureLightEXT
+#define GLEE_H_DEFINED_glTextureLightEXT
+  typedef void (APIENTRYP GLEEPFNGLTEXTURELIGHTEXTPROC) (GLenum  pname);
+  GLEE_EXTERN GLEEPFNGLTEXTURELIGHTEXTPROC GLeeFuncPtr_glTextureLightEXT;
+  #define glTextureLightEXT GLeeFuncPtr_glTextureLightEXT
+#endif
+#ifndef GLEE_H_DEFINED_glTextureMaterialEXT
+#define GLEE_H_DEFINED_glTextureMaterialEXT
+  typedef void (APIENTRYP GLEEPFNGLTEXTUREMATERIALEXTPROC) (GLenum  face, GLenum  mode);
+  GLEE_EXTERN GLEEPFNGLTEXTUREMATERIALEXTPROC GLeeFuncPtr_glTextureMaterialEXT;
+  #define glTextureMaterialEXT GLeeFuncPtr_glTextureMaterialEXT
+#endif
+#endif 
+
+/* GL_SGIX_blend_alpha_minmax */
+
+#ifndef GL_SGIX_blend_alpha_minmax
+#define GL_SGIX_blend_alpha_minmax 1
+#define __GLEE_GL_SGIX_blend_alpha_minmax 1
+/* Constants */
+#define GL_ALPHA_MIN_SGIX                                  0x8320
+#define GL_ALPHA_MAX_SGIX                                  0x8321
+#endif 
+
+/* GL_SGIX_impact_pixel_texture */
+
+#ifndef GL_SGIX_impact_pixel_texture
+#define GL_SGIX_impact_pixel_texture 1
+#define __GLEE_GL_SGIX_impact_pixel_texture 1
+/* Constants */
+#define GL_PIXEL_TEX_GEN_Q_CEILING_SGIX                    0x8184
+#define GL_PIXEL_TEX_GEN_Q_ROUND_SGIX                      0x8185
+#define GL_PIXEL_TEX_GEN_Q_FLOOR_SGIX                      0x8186
+#define GL_PIXEL_TEX_GEN_ALPHA_REPLACE_SGIX                0x8187
+#define GL_PIXEL_TEX_GEN_ALPHA_NO_REPLACE_SGIX             0x8188
+#define GL_PIXEL_TEX_GEN_ALPHA_LS_SGIX                     0x8189
+#define GL_PIXEL_TEX_GEN_ALPHA_MS_SGIX                     0x818A
+#endif 
+
+/* GL_EXT_bgra */
+
+#ifndef GL_EXT_bgra
+#define GL_EXT_bgra 1
+#define __GLEE_GL_EXT_bgra 1
+/* Constants */
+#define GL_BGR_EXT                                         0x80E0
+#define GL_BGRA_EXT                                        0x80E1
+#endif 
+
+/* GL_SGIX_async */
+
+#ifndef GL_SGIX_async
+#define GL_SGIX_async 1
+#define __GLEE_GL_SGIX_async 1
+/* Constants */
+#define GL_ASYNC_MARKER_SGIX                               0x8329
+#ifndef GLEE_H_DEFINED_glAsyncMarkerSGIX
+#define GLEE_H_DEFINED_glAsyncMarkerSGIX
+  typedef void (APIENTRYP GLEEPFNGLASYNCMARKERSGIXPROC) (GLuint  marker);
+  GLEE_EXTERN GLEEPFNGLASYNCMARKERSGIXPROC GLeeFuncPtr_glAsyncMarkerSGIX;
+  #define glAsyncMarkerSGIX GLeeFuncPtr_glAsyncMarkerSGIX
+#endif
+#ifndef GLEE_H_DEFINED_glFinishAsyncSGIX
+#define GLEE_H_DEFINED_glFinishAsyncSGIX
+  typedef GLint (APIENTRYP GLEEPFNGLFINISHASYNCSGIXPROC) (GLuint * markerp);
+  GLEE_EXTERN GLEEPFNGLFINISHASYNCSGIXPROC GLeeFuncPtr_glFinishAsyncSGIX;
+  #define glFinishAsyncSGIX GLeeFuncPtr_glFinishAsyncSGIX
+#endif
+#ifndef GLEE_H_DEFINED_glPollAsyncSGIX
+#define GLEE_H_DEFINED_glPollAsyncSGIX
+  typedef GLint (APIENTRYP GLEEPFNGLPOLLASYNCSGIXPROC) (GLuint * markerp);
+  GLEE_EXTERN GLEEPFNGLPOLLASYNCSGIXPROC GLeeFuncPtr_glPollAsyncSGIX;
+  #define glPollAsyncSGIX GLeeFuncPtr_glPollAsyncSGIX
+#endif
+#ifndef GLEE_H_DEFINED_glGenAsyncMarkersSGIX
+#define GLEE_H_DEFINED_glGenAsyncMarkersSGIX
+  typedef GLuint (APIENTRYP GLEEPFNGLGENASYNCMARKERSSGIXPROC) (GLsizei  range);
+  GLEE_EXTERN GLEEPFNGLGENASYNCMARKERSSGIXPROC GLeeFuncPtr_glGenAsyncMarkersSGIX;
+  #define glGenAsyncMarkersSGIX GLeeFuncPtr_glGenAsyncMarkersSGIX
+#endif
+#ifndef GLEE_H_DEFINED_glDeleteAsyncMarkersSGIX
+#define GLEE_H_DEFINED_glDeleteAsyncMarkersSGIX
+  typedef void (APIENTRYP GLEEPFNGLDELETEASYNCMARKERSSGIXPROC) (GLuint  marker, GLsizei  range);
+  GLEE_EXTERN GLEEPFNGLDELETEASYNCMARKERSSGIXPROC GLeeFuncPtr_glDeleteAsyncMarkersSGIX;
+  #define glDeleteAsyncMarkersSGIX GLeeFuncPtr_glDeleteAsyncMarkersSGIX
+#endif
+#ifndef GLEE_H_DEFINED_glIsAsyncMarkerSGIX
+#define GLEE_H_DEFINED_glIsAsyncMarkerSGIX
+  typedef GLboolean (APIENTRYP GLEEPFNGLISASYNCMARKERSGIXPROC) (GLuint  marker);
+  GLEE_EXTERN GLEEPFNGLISASYNCMARKERSGIXPROC GLeeFuncPtr_glIsAsyncMarkerSGIX;
+  #define glIsAsyncMarkerSGIX GLeeFuncPtr_glIsAsyncMarkerSGIX
+#endif
+#endif 
+
+/* GL_SGIX_async_pixel */
+
+#ifndef GL_SGIX_async_pixel
+#define GL_SGIX_async_pixel 1
+#define __GLEE_GL_SGIX_async_pixel 1
+/* Constants */
+#define GL_ASYNC_TEX_IMAGE_SGIX                            0x835C
+#define GL_ASYNC_DRAW_PIXELS_SGIX                          0x835D
+#define GL_ASYNC_READ_PIXELS_SGIX                          0x835E
+#define GL_MAX_ASYNC_TEX_IMAGE_SGIX                        0x835F
+#define GL_MAX_ASYNC_DRAW_PIXELS_SGIX                      0x8360
+#define GL_MAX_ASYNC_READ_PIXELS_SGIX                      0x8361
+#endif 
+
+/* GL_SGIX_async_histogram */
+
+#ifndef GL_SGIX_async_histogram
+#define GL_SGIX_async_histogram 1
+#define __GLEE_GL_SGIX_async_histogram 1
+/* Constants */
+#define GL_ASYNC_HISTOGRAM_SGIX                            0x832C
+#define GL_MAX_ASYNC_HISTOGRAM_SGIX                        0x832D
+#endif 
+
+/* GL_INTEL_texture_scissor */
+
+#ifndef GL_INTEL_texture_scissor
+#define GL_INTEL_texture_scissor 1
+#define __GLEE_GL_INTEL_texture_scissor 1
+/* Constants */
+#endif 
+
+/* GL_INTEL_parallel_arrays */
+
+#ifndef GL_INTEL_parallel_arrays
+#define GL_INTEL_parallel_arrays 1
+#define __GLEE_GL_INTEL_parallel_arrays 1
+/* Constants */
+#define GL_PARALLEL_ARRAYS_INTEL                           0x83F4
+#define GL_VERTEX_ARRAY_PARALLEL_POINTERS_INTEL            0x83F5
+#define GL_NORMAL_ARRAY_PARALLEL_POINTERS_INTEL            0x83F6
+#define GL_COLOR_ARRAY_PARALLEL_POINTERS_INTEL             0x83F7
+#define GL_TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL     0x83F8
+#ifndef GLEE_H_DEFINED_glVertexPointervINTEL
+#define GLEE_H_DEFINED_glVertexPointervINTEL
+  typedef void (APIENTRYP GLEEPFNGLVERTEXPOINTERVINTELPROC) (GLint  size, GLenum  type, const GLvoid* * pointer);
+  GLEE_EXTERN GLEEPFNGLVERTEXPOINTERVINTELPROC GLeeFuncPtr_glVertexPointervINTEL;
+  #define glVertexPointervINTEL GLeeFuncPtr_glVertexPointervINTEL
+#endif
+#ifndef GLEE_H_DEFINED_glNormalPointervINTEL
+#define GLEE_H_DEFINED_glNormalPointervINTEL
+  typedef void (APIENTRYP GLEEPFNGLNORMALPOINTERVINTELPROC) (GLenum  type, const GLvoid* * pointer);
+  GLEE_EXTERN GLEEPFNGLNORMALPOINTERVINTELPROC GLeeFuncPtr_glNormalPointervINTEL;
+  #define glNormalPointervINTEL GLeeFuncPtr_glNormalPointervINTEL
+#endif
+#ifndef GLEE_H_DEFINED_glColorPointervINTEL
+#define GLEE_H_DEFINED_glColorPointervINTEL
+  typedef void (APIENTRYP GLEEPFNGLCOLORPOINTERVINTELPROC) (GLint  size, GLenum  type, const GLvoid* * pointer);
+  GLEE_EXTERN GLEEPFNGLCOLORPOINTERVINTELPROC GLeeFuncPtr_glColorPointervINTEL;
+  #define glColorPointervINTEL GLeeFuncPtr_glColorPointervINTEL
+#endif
+#ifndef GLEE_H_DEFINED_glTexCoordPointervINTEL
+#define GLEE_H_DEFINED_glTexCoordPointervINTEL
+  typedef void (APIENTRYP GLEEPFNGLTEXCOORDPOINTERVINTELPROC) (GLint  size, GLenum  type, const GLvoid* * pointer);
+  GLEE_EXTERN GLEEPFNGLTEXCOORDPOINTERVINTELPROC GLeeFuncPtr_glTexCoordPointervINTEL;
+  #define glTexCoordPointervINTEL GLeeFuncPtr_glTexCoordPointervINTEL
+#endif
+#endif 
+
+/* GL_HP_occlusion_test */
+
+#ifndef GL_HP_occlusion_test
+#define GL_HP_occlusion_test 1
+#define __GLEE_GL_HP_occlusion_test 1
+/* Constants */
+#define GL_OCCLUSION_TEST_HP                               0x8165
+#define GL_OCCLUSION_TEST_RESULT_HP                        0x8166
+#endif 
+
+/* GL_EXT_pixel_transform */
+
+#ifndef GL_EXT_pixel_transform
+#define GL_EXT_pixel_transform 1
+#define __GLEE_GL_EXT_pixel_transform 1
+/* Constants */
+#define GL_PIXEL_TRANSFORM_2D_EXT                          0x8330
+#define GL_PIXEL_MAG_FILTER_EXT                            0x8331
+#define GL_PIXEL_MIN_FILTER_EXT                            0x8332
+#define GL_PIXEL_CUBIC_WEIGHT_EXT                          0x8333
+#define GL_CUBIC_EXT                                       0x8334
+#define GL_AVERAGE_EXT                                     0x8335
+#define GL_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT              0x8336
+#define GL_MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT          0x8337
+#define GL_PIXEL_TRANSFORM_2D_MATRIX_EXT                   0x8338
+#ifndef GLEE_H_DEFINED_glPixelTransformParameteriEXT
+#define GLEE_H_DEFINED_glPixelTransformParameteriEXT
+  typedef void (APIENTRYP GLEEPFNGLPIXELTRANSFORMPARAMETERIEXTPROC) (GLenum  target, GLenum  pname, GLint  param);
+  GLEE_EXTERN GLEEPFNGLPIXELTRANSFORMPARAMETERIEXTPROC GLeeFuncPtr_glPixelTransformParameteriEXT;
+  #define glPixelTransformParameteriEXT GLeeFuncPtr_glPixelTransformParameteriEXT
+#endif
+#ifndef GLEE_H_DEFINED_glPixelTransformParameterfEXT
+#define GLEE_H_DEFINED_glPixelTransformParameterfEXT
+  typedef void (APIENTRYP GLEEPFNGLPIXELTRANSFORMPARAMETERFEXTPROC) (GLenum  target, GLenum  pname, GLfloat  param);
+  GLEE_EXTERN GLEEPFNGLPIXELTRANSFORMPARAMETERFEXTPROC GLeeFuncPtr_glPixelTransformParameterfEXT;
+  #define glPixelTransformParameterfEXT GLeeFuncPtr_glPixelTransformParameterfEXT
+#endif
+#ifndef GLEE_H_DEFINED_glPixelTransformParameterivEXT
+#define GLEE_H_DEFINED_glPixelTransformParameterivEXT
+  typedef void (APIENTRYP GLEEPFNGLPIXELTRANSFORMPARAMETERIVEXTPROC) (GLenum  target, GLenum  pname, const GLint * params);
+  GLEE_EXTERN GLEEPFNGLPIXELTRANSFORMPARAMETERIVEXTPROC GLeeFuncPtr_glPixelTransformParameterivEXT;
+  #define glPixelTransformParameterivEXT GLeeFuncPtr_glPixelTransformParameterivEXT
+#endif
+#ifndef GLEE_H_DEFINED_glPixelTransformParameterfvEXT
+#define GLEE_H_DEFINED_glPixelTransformParameterfvEXT
+  typedef void (APIENTRYP GLEEPFNGLPIXELTRANSFORMPARAMETERFVEXTPROC) (GLenum  target, GLenum  pname, const GLfloat * params);
+  GLEE_EXTERN GLEEPFNGLPIXELTRANSFORMPARAMETERFVEXTPROC GLeeFuncPtr_glPixelTransformParameterfvEXT;
+  #define glPixelTransformParameterfvEXT GLeeFuncPtr_glPixelTransformParameterfvEXT
+#endif
+#endif 
+
+/* GL_EXT_pixel_transform_color_table */
+
+#ifndef GL_EXT_pixel_transform_color_table
+#define GL_EXT_pixel_transform_color_table 1
+#define __GLEE_GL_EXT_pixel_transform_color_table 1
+/* Constants */
+#endif 
+
+/* GL_EXT_shared_texture_palette */
+
+#ifndef GL_EXT_shared_texture_palette
+#define GL_EXT_shared_texture_palette 1
+#define __GLEE_GL_EXT_shared_texture_palette 1
+/* Constants */
+#define GL_SHARED_TEXTURE_PALETTE_EXT                      0x81FB
+#endif 
+
+/* GL_EXT_separate_specular_color */
+
+#ifndef GL_EXT_separate_specular_color
+#define GL_EXT_separate_specular_color 1
+#define __GLEE_GL_EXT_separate_specular_color 1
+/* Constants */
+#define GL_LIGHT_MODEL_COLOR_CONTROL_EXT                   0x81F8
+#define GL_SINGLE_COLOR_EXT                                0x81F9
+#define GL_SEPARATE_SPECULAR_COLOR_EXT                     0x81FA
+#endif 
+
+/* GL_EXT_secondary_color */
+
+#ifndef GL_EXT_secondary_color
+#define GL_EXT_secondary_color 1
+#define __GLEE_GL_EXT_secondary_color 1
+/* Constants */
+#define GL_COLOR_SUM_EXT                                   0x8458
+#define GL_CURRENT_SECONDARY_COLOR_EXT                     0x8459
+#define GL_SECONDARY_COLOR_ARRAY_SIZE_EXT                  0x845A
+#define GL_SECONDARY_COLOR_ARRAY_TYPE_EXT                  0x845B
+#define GL_SECONDARY_COLOR_ARRAY_STRIDE_EXT                0x845C
+#define GL_SECONDARY_COLOR_ARRAY_POINTER_EXT               0x845D
+#define GL_SECONDARY_COLOR_ARRAY_EXT                       0x845E
+#ifndef GLEE_H_DEFINED_glSecondaryColor3bEXT
+#define GLEE_H_DEFINED_glSecondaryColor3bEXT
+  typedef void (APIENTRYP GLEEPFNGLSECONDARYCOLOR3BEXTPROC) (GLbyte  red, GLbyte  green, GLbyte  blue);
+  GLEE_EXTERN GLEEPFNGLSECONDARYCOLOR3BEXTPROC GLeeFuncPtr_glSecondaryColor3bEXT;
+  #define glSecondaryColor3bEXT GLeeFuncPtr_glSecondaryColor3bEXT
+#endif
+#ifndef GLEE_H_DEFINED_glSecondaryColor3bvEXT
+#define GLEE_H_DEFINED_glSecondaryColor3bvEXT
+  typedef void (APIENTRYP GLEEPFNGLSECONDARYCOLOR3BVEXTPROC) (const GLbyte * v);
+  GLEE_EXTERN GLEEPFNGLSECONDARYCOLOR3BVEXTPROC GLeeFuncPtr_glSecondaryColor3bvEXT;
+  #define glSecondaryColor3bvEXT GLeeFuncPtr_glSecondaryColor3bvEXT
+#endif
+#ifndef GLEE_H_DEFINED_glSecondaryColor3dEXT
+#define GLEE_H_DEFINED_glSecondaryColor3dEXT
+  typedef void (APIENTRYP GLEEPFNGLSECONDARYCOLOR3DEXTPROC) (GLdouble  red, GLdouble  green, GLdouble  blue);
+  GLEE_EXTERN GLEEPFNGLSECONDARYCOLOR3DEXTPROC GLeeFuncPtr_glSecondaryColor3dEXT;
+  #define glSecondaryColor3dEXT GLeeFuncPtr_glSecondaryColor3dEXT
+#endif
+#ifndef GLEE_H_DEFINED_glSecondaryColor3dvEXT
+#define GLEE_H_DEFINED_glSecondaryColor3dvEXT
+  typedef void (APIENTRYP GLEEPFNGLSECONDARYCOLOR3DVEXTPROC) (const GLdouble * v);
+  GLEE_EXTERN GLEEPFNGLSECONDARYCOLOR3DVEXTPROC GLeeFuncPtr_glSecondaryColor3dvEXT;
+  #define glSecondaryColor3dvEXT GLeeFuncPtr_glSecondaryColor3dvEXT
+#endif
+#ifndef GLEE_H_DEFINED_glSecondaryColor3fEXT
+#define GLEE_H_DEFINED_glSecondaryColor3fEXT
+  typedef void (APIENTRYP GLEEPFNGLSECONDARYCOLOR3FEXTPROC) (GLfloat  red, GLfloat  green, GLfloat  blue);
+  GLEE_EXTERN GLEEPFNGLSECONDARYCOLOR3FEXTPROC GLeeFuncPtr_glSecondaryColor3fEXT;
+  #define glSecondaryColor3fEXT GLeeFuncPtr_glSecondaryColor3fEXT
+#endif
+#ifndef GLEE_H_DEFINED_glSecondaryColor3fvEXT
+#define GLEE_H_DEFINED_glSecondaryColor3fvEXT
+  typedef void (APIENTRYP GLEEPFNGLSECONDARYCOLOR3FVEXTPROC) (const GLfloat * v);
+  GLEE_EXTERN GLEEPFNGLSECONDARYCOLOR3FVEXTPROC GLeeFuncPtr_glSecondaryColor3fvEXT;
+  #define glSecondaryColor3fvEXT GLeeFuncPtr_glSecondaryColor3fvEXT
+#endif
+#ifndef GLEE_H_DEFINED_glSecondaryColor3iEXT
+#define GLEE_H_DEFINED_glSecondaryColor3iEXT
+  typedef void (APIENTRYP GLEEPFNGLSECONDARYCOLOR3IEXTPROC) (GLint  red, GLint  green, GLint  blue);
+  GLEE_EXTERN GLEEPFNGLSECONDARYCOLOR3IEXTPROC GLeeFuncPtr_glSecondaryColor3iEXT;
+  #define glSecondaryColor3iEXT GLeeFuncPtr_glSecondaryColor3iEXT
+#endif
+#ifndef GLEE_H_DEFINED_glSecondaryColor3ivEXT
+#define GLEE_H_DEFINED_glSecondaryColor3ivEXT
+  typedef void (APIENTRYP GLEEPFNGLSECONDARYCOLOR3IVEXTPROC) (const GLint * v);
+  GLEE_EXTERN GLEEPFNGLSECONDARYCOLOR3IVEXTPROC GLeeFuncPtr_glSecondaryColor3ivEXT;
+  #define glSecondaryColor3ivEXT GLeeFuncPtr_glSecondaryColor3ivEXT
+#endif
+#ifndef GLEE_H_DEFINED_glSecondaryColor3sEXT
+#define GLEE_H_DEFINED_glSecondaryColor3sEXT
+  typedef void (APIENTRYP GLEEPFNGLSECONDARYCOLOR3SEXTPROC) (GLshort  red, GLshort  green, GLshort  blue);
+  GLEE_EXTERN GLEEPFNGLSECONDARYCOLOR3SEXTPROC GLeeFuncPtr_glSecondaryColor3sEXT;
+  #define glSecondaryColor3sEXT GLeeFuncPtr_glSecondaryColor3sEXT
+#endif
+#ifndef GLEE_H_DEFINED_glSecondaryColor3svEXT
+#define GLEE_H_DEFINED_glSecondaryColor3svEXT
+  typedef void (APIENTRYP GLEEPFNGLSECONDARYCOLOR3SVEXTPROC) (const GLshort * v);
+  GLEE_EXTERN GLEEPFNGLSECONDARYCOLOR3SVEXTPROC GLeeFuncPtr_glSecondaryColor3svEXT;
+  #define glSecondaryColor3svEXT GLeeFuncPtr_glSecondaryColor3svEXT
+#endif
+#ifndef GLEE_H_DEFINED_glSecondaryColor3ubEXT
+#define GLEE_H_DEFINED_glSecondaryColor3ubEXT
+  typedef void (APIENTRYP GLEEPFNGLSECONDARYCOLOR3UBEXTPROC) (GLubyte  red, GLubyte  green, GLubyte  blue);
+  GLEE_EXTERN GLEEPFNGLSECONDARYCOLOR3UBEXTPROC GLeeFuncPtr_glSecondaryColor3ubEXT;
+  #define glSecondaryColor3ubEXT GLeeFuncPtr_glSecondaryColor3ubEXT
+#endif
+#ifndef GLEE_H_DEFINED_glSecondaryColor3ubvEXT
+#define GLEE_H_DEFINED_glSecondaryColor3ubvEXT
+  typedef void (APIENTRYP GLEEPFNGLSECONDARYCOLOR3UBVEXTPROC) (const GLubyte * v);
+  GLEE_EXTERN GLEEPFNGLSECONDARYCOLOR3UBVEXTPROC GLeeFuncPtr_glSecondaryColor3ubvEXT;
+  #define glSecondaryColor3ubvEXT GLeeFuncPtr_glSecondaryColor3ubvEXT
+#endif
+#ifndef GLEE_H_DEFINED_glSecondaryColor3uiEXT
+#define GLEE_H_DEFINED_glSecondaryColor3uiEXT
+  typedef void (APIENTRYP GLEEPFNGLSECONDARYCOLOR3UIEXTPROC) (GLuint  red, GLuint  green, GLuint  blue);
+  GLEE_EXTERN GLEEPFNGLSECONDARYCOLOR3UIEXTPROC GLeeFuncPtr_glSecondaryColor3uiEXT;
+  #define glSecondaryColor3uiEXT GLeeFuncPtr_glSecondaryColor3uiEXT
+#endif
+#ifndef GLEE_H_DEFINED_glSecondaryColor3uivEXT
+#define GLEE_H_DEFINED_glSecondaryColor3uivEXT
+  typedef void (APIENTRYP GLEEPFNGLSECONDARYCOLOR3UIVEXTPROC) (const GLuint * v);
+  GLEE_EXTERN GLEEPFNGLSECONDARYCOLOR3UIVEXTPROC GLeeFuncPtr_glSecondaryColor3uivEXT;
+  #define glSecondaryColor3uivEXT GLeeFuncPtr_glSecondaryColor3uivEXT
+#endif
+#ifndef GLEE_H_DEFINED_glSecondaryColor3usEXT
+#define GLEE_H_DEFINED_glSecondaryColor3usEXT
+  typedef void (APIENTRYP GLEEPFNGLSECONDARYCOLOR3USEXTPROC) (GLushort  red, GLushort  green, GLushort  blue);
+  GLEE_EXTERN GLEEPFNGLSECONDARYCOLOR3USEXTPROC GLeeFuncPtr_glSecondaryColor3usEXT;
+  #define glSecondaryColor3usEXT GLeeFuncPtr_glSecondaryColor3usEXT
+#endif
+#ifndef GLEE_H_DEFINED_glSecondaryColor3usvEXT
+#define GLEE_H_DEFINED_glSecondaryColor3usvEXT
+  typedef void (APIENTRYP GLEEPFNGLSECONDARYCOLOR3USVEXTPROC) (const GLushort * v);
+  GLEE_EXTERN GLEEPFNGLSECONDARYCOLOR3USVEXTPROC GLeeFuncPtr_glSecondaryColor3usvEXT;
+  #define glSecondaryColor3usvEXT GLeeFuncPtr_glSecondaryColor3usvEXT
+#endif
+#ifndef GLEE_H_DEFINED_glSecondaryColorPointerEXT
+#define GLEE_H_DEFINED_glSecondaryColorPointerEXT
+  typedef void (APIENTRYP GLEEPFNGLSECONDARYCOLORPOINTEREXTPROC) (GLint  size, GLenum  type, GLsizei  stride, const GLvoid * pointer);
+  GLEE_EXTERN GLEEPFNGLSECONDARYCOLORPOINTEREXTPROC GLeeFuncPtr_glSecondaryColorPointerEXT;
+  #define glSecondaryColorPointerEXT GLeeFuncPtr_glSecondaryColorPointerEXT
+#endif
+#endif 
+
+/* GL_EXT_texture_perturb_normal */
+
+#ifndef GL_EXT_texture_perturb_normal
+#define GL_EXT_texture_perturb_normal 1
+#define __GLEE_GL_EXT_texture_perturb_normal 1
+/* Constants */
+#define GL_PERTURB_EXT                                     0x85AE
+#define GL_TEXTURE_NORMAL_EXT                              0x85AF
+#ifndef GLEE_H_DEFINED_glTextureNormalEXT
+#define GLEE_H_DEFINED_glTextureNormalEXT
+  typedef void (APIENTRYP GLEEPFNGLTEXTURENORMALEXTPROC) (GLenum  mode);
+  GLEE_EXTERN GLEEPFNGLTEXTURENORMALEXTPROC GLeeFuncPtr_glTextureNormalEXT;
+  #define glTextureNormalEXT GLeeFuncPtr_glTextureNormalEXT
+#endif
+#endif 
+
+/* GL_EXT_multi_draw_arrays */
+
+#ifndef GL_EXT_multi_draw_arrays
+#define GL_EXT_multi_draw_arrays 1
+#define __GLEE_GL_EXT_multi_draw_arrays 1
+/* Constants */
+#ifndef GLEE_H_DEFINED_glMultiDrawArraysEXT
+#define GLEE_H_DEFINED_glMultiDrawArraysEXT
+  typedef void (APIENTRYP GLEEPFNGLMULTIDRAWARRAYSEXTPROC) (GLenum  mode, const GLint * first, const GLsizei * count, GLsizei  primcount);
+  GLEE_EXTERN GLEEPFNGLMULTIDRAWARRAYSEXTPROC GLeeFuncPtr_glMultiDrawArraysEXT;
+  #define glMultiDrawArraysEXT GLeeFuncPtr_glMultiDrawArraysEXT
+#endif
+#ifndef GLEE_H_DEFINED_glMultiDrawElementsEXT
+#define GLEE_H_DEFINED_glMultiDrawElementsEXT
+  typedef void (APIENTRYP GLEEPFNGLMULTIDRAWELEMENTSEXTPROC) (GLenum  mode, const GLsizei * count, GLenum  type, const GLvoid* * indices, GLsizei  primcount);
+  GLEE_EXTERN GLEEPFNGLMULTIDRAWELEMENTSEXTPROC GLeeFuncPtr_glMultiDrawElementsEXT;
+  #define glMultiDrawElementsEXT GLeeFuncPtr_glMultiDrawElementsEXT
+#endif
+#endif 
+
+/* GL_EXT_fog_coord */
+
+#ifndef GL_EXT_fog_coord
+#define GL_EXT_fog_coord 1
+#define __GLEE_GL_EXT_fog_coord 1
+/* Constants */
+#define GL_FOG_COORDINATE_SOURCE_EXT                       0x8450
+#define GL_FOG_COORDINATE_EXT                              0x8451
+#define GL_FRAGMENT_DEPTH_EXT                              0x8452
+#define GL_CURRENT_FOG_COORDINATE_EXT                      0x8453
+#define GL_FOG_COORDINATE_ARRAY_TYPE_EXT                   0x8454
+#define GL_FOG_COORDINATE_ARRAY_STRIDE_EXT                 0x8455
+#define GL_FOG_COORDINATE_ARRAY_POINTER_EXT                0x8456
+#define GL_FOG_COORDINATE_ARRAY_EXT                        0x8457
+#ifndef GLEE_H_DEFINED_glFogCoordfEXT
+#define GLEE_H_DEFINED_glFogCoordfEXT
+  typedef void (APIENTRYP GLEEPFNGLFOGCOORDFEXTPROC) (GLfloat  coord);
+  GLEE_EXTERN GLEEPFNGLFOGCOORDFEXTPROC GLeeFuncPtr_glFogCoordfEXT;
+  #define glFogCoordfEXT GLeeFuncPtr_glFogCoordfEXT
+#endif
+#ifndef GLEE_H_DEFINED_glFogCoordfvEXT
+#define GLEE_H_DEFINED_glFogCoordfvEXT
+  typedef void (APIENTRYP GLEEPFNGLFOGCOORDFVEXTPROC) (const GLfloat * coord);
+  GLEE_EXTERN GLEEPFNGLFOGCOORDFVEXTPROC GLeeFuncPtr_glFogCoordfvEXT;
+  #define glFogCoordfvEXT GLeeFuncPtr_glFogCoordfvEXT
+#endif
+#ifndef GLEE_H_DEFINED_glFogCoorddEXT
+#define GLEE_H_DEFINED_glFogCoorddEXT
+  typedef void (APIENTRYP GLEEPFNGLFOGCOORDDEXTPROC) (GLdouble  coord);
+  GLEE_EXTERN GLEEPFNGLFOGCOORDDEXTPROC GLeeFuncPtr_glFogCoorddEXT;
+  #define glFogCoorddEXT GLeeFuncPtr_glFogCoorddEXT
+#endif
+#ifndef GLEE_H_DEFINED_glFogCoorddvEXT
+#define GLEE_H_DEFINED_glFogCoorddvEXT
+  typedef void (APIENTRYP GLEEPFNGLFOGCOORDDVEXTPROC) (const GLdouble * coord);
+  GLEE_EXTERN GLEEPFNGLFOGCOORDDVEXTPROC GLeeFuncPtr_glFogCoorddvEXT;
+  #define glFogCoorddvEXT GLeeFuncPtr_glFogCoorddvEXT
+#endif
+#ifndef GLEE_H_DEFINED_glFogCoordPointerEXT
+#define GLEE_H_DEFINED_glFogCoordPointerEXT
+  typedef void (APIENTRYP GLEEPFNGLFOGCOORDPOINTEREXTPROC) (GLenum  type, GLsizei  stride, const GLvoid * pointer);
+  GLEE_EXTERN GLEEPFNGLFOGCOORDPOINTEREXTPROC GLeeFuncPtr_glFogCoordPointerEXT;
+  #define glFogCoordPointerEXT GLeeFuncPtr_glFogCoordPointerEXT
+#endif
+#endif 
+
+/* GL_REND_screen_coordinates */
+
+#ifndef GL_REND_screen_coordinates
+#define GL_REND_screen_coordinates 1
+#define __GLEE_GL_REND_screen_coordinates 1
+/* Constants */
+#define GL_SCREEN_COORDINATES_REND                         0x8490
+#define GL_INVERTED_SCREEN_W_REND                          0x8491
+#endif 
+
+/* GL_EXT_coordinate_frame */
+
+#ifndef GL_EXT_coordinate_frame
+#define GL_EXT_coordinate_frame 1
+#define __GLEE_GL_EXT_coordinate_frame 1
+/* Constants */
+#define GL_TANGENT_ARRAY_EXT                               0x8439
+#define GL_BINORMAL_ARRAY_EXT                              0x843A
+#define GL_CURRENT_TANGENT_EXT                             0x843B
+#define GL_CURRENT_BINORMAL_EXT                            0x843C
+#define GL_TANGENT_ARRAY_TYPE_EXT                          0x843E
+#define GL_TANGENT_ARRAY_STRIDE_EXT                        0x843F
+#define GL_BINORMAL_ARRAY_TYPE_EXT                         0x8440
+#define GL_BINORMAL_ARRAY_STRIDE_EXT                       0x8441
+#define GL_TANGENT_ARRAY_POINTER_EXT                       0x8442
+#define GL_BINORMAL_ARRAY_POINTER_EXT                      0x8443
+#define GL_MAP1_TANGENT_EXT                                0x8444
+#define GL_MAP2_TANGENT_EXT                                0x8445
+#define GL_MAP1_BINORMAL_EXT                               0x8446
+#define GL_MAP2_BINORMAL_EXT                               0x8447
+#ifndef GLEE_H_DEFINED_glTangent3bEXT
+#define GLEE_H_DEFINED_glTangent3bEXT
+  typedef void (APIENTRYP GLEEPFNGLTANGENT3BEXTPROC) (GLbyte  tx, GLbyte  ty, GLbyte  tz);
+  GLEE_EXTERN GLEEPFNGLTANGENT3BEXTPROC GLeeFuncPtr_glTangent3bEXT;
+  #define glTangent3bEXT GLeeFuncPtr_glTangent3bEXT
+#endif
+#ifndef GLEE_H_DEFINED_glTangent3bvEXT
+#define GLEE_H_DEFINED_glTangent3bvEXT
+  typedef void (APIENTRYP GLEEPFNGLTANGENT3BVEXTPROC) (const GLbyte * v);
+  GLEE_EXTERN GLEEPFNGLTANGENT3BVEXTPROC GLeeFuncPtr_glTangent3bvEXT;
+  #define glTangent3bvEXT GLeeFuncPtr_glTangent3bvEXT
+#endif
+#ifndef GLEE_H_DEFINED_glTangent3dEXT
+#define GLEE_H_DEFINED_glTangent3dEXT
+  typedef void (APIENTRYP GLEEPFNGLTANGENT3DEXTPROC) (GLdouble  tx, GLdouble  ty, GLdouble  tz);
+  GLEE_EXTERN GLEEPFNGLTANGENT3DEXTPROC GLeeFuncPtr_glTangent3dEXT;
+  #define glTangent3dEXT GLeeFuncPtr_glTangent3dEXT
+#endif
+#ifndef GLEE_H_DEFINED_glTangent3dvEXT
+#define GLEE_H_DEFINED_glTangent3dvEXT
+  typedef void (APIENTRYP GLEEPFNGLTANGENT3DVEXTPROC) (const GLdouble * v);
+  GLEE_EXTERN GLEEPFNGLTANGENT3DVEXTPROC GLeeFuncPtr_glTangent3dvEXT;
+  #define glTangent3dvEXT GLeeFuncPtr_glTangent3dvEXT
+#endif
+#ifndef GLEE_H_DEFINED_glTangent3fEXT
+#define GLEE_H_DEFINED_glTangent3fEXT
+  typedef void (APIENTRYP GLEEPFNGLTANGENT3FEXTPROC) (GLfloat  tx, GLfloat  ty, GLfloat  tz);
+  GLEE_EXTERN GLEEPFNGLTANGENT3FEXTPROC GLeeFuncPtr_glTangent3fEXT;
+  #define glTangent3fEXT GLeeFuncPtr_glTangent3fEXT
+#endif
+#ifndef GLEE_H_DEFINED_glTangent3fvEXT
+#define GLEE_H_DEFINED_glTangent3fvEXT
+  typedef void (APIENTRYP GLEEPFNGLTANGENT3FVEXTPROC) (const GLfloat * v);
+  GLEE_EXTERN GLEEPFNGLTANGENT3FVEXTPROC GLeeFuncPtr_glTangent3fvEXT;
+  #define glTangent3fvEXT GLeeFuncPtr_glTangent3fvEXT
+#endif
+#ifndef GLEE_H_DEFINED_glTangent3iEXT
+#define GLEE_H_DEFINED_glTangent3iEXT
+  typedef void (APIENTRYP GLEEPFNGLTANGENT3IEXTPROC) (GLint  tx, GLint  ty, GLint  tz);
+  GLEE_EXTERN GLEEPFNGLTANGENT3IEXTPROC GLeeFuncPtr_glTangent3iEXT;
+  #define glTangent3iEXT GLeeFuncPtr_glTangent3iEXT
+#endif
+#ifndef GLEE_H_DEFINED_glTangent3ivEXT
+#define GLEE_H_DEFINED_glTangent3ivEXT
+  typedef void (APIENTRYP GLEEPFNGLTANGENT3IVEXTPROC) (const GLint * v);
+  GLEE_EXTERN GLEEPFNGLTANGENT3IVEXTPROC GLeeFuncPtr_glTangent3ivEXT;
+  #define glTangent3ivEXT GLeeFuncPtr_glTangent3ivEXT
+#endif
+#ifndef GLEE_H_DEFINED_glTangent3sEXT
+#define GLEE_H_DEFINED_glTangent3sEXT
+  typedef void (APIENTRYP GLEEPFNGLTANGENT3SEXTPROC) (GLshort  tx, GLshort  ty, GLshort  tz);
+  GLEE_EXTERN GLEEPFNGLTANGENT3SEXTPROC GLeeFuncPtr_glTangent3sEXT;
+  #define glTangent3sEXT GLeeFuncPtr_glTangent3sEXT
+#endif
+#ifndef GLEE_H_DEFINED_glTangent3svEXT
+#define GLEE_H_DEFINED_glTangent3svEXT
+  typedef void (APIENTRYP GLEEPFNGLTANGENT3SVEXTPROC) (const GLshort * v);
+  GLEE_EXTERN GLEEPFNGLTANGENT3SVEXTPROC GLeeFuncPtr_glTangent3svEXT;
+  #define glTangent3svEXT GLeeFuncPtr_glTangent3svEXT
+#endif
+#ifndef GLEE_H_DEFINED_glBinormal3bEXT
+#define GLEE_H_DEFINED_glBinormal3bEXT
+  typedef void (APIENTRYP GLEEPFNGLBINORMAL3BEXTPROC) (GLbyte  bx, GLbyte  by, GLbyte  bz);
+  GLEE_EXTERN GLEEPFNGLBINORMAL3BEXTPROC GLeeFuncPtr_glBinormal3bEXT;
+  #define glBinormal3bEXT GLeeFuncPtr_glBinormal3bEXT
+#endif
+#ifndef GLEE_H_DEFINED_glBinormal3bvEXT
+#define GLEE_H_DEFINED_glBinormal3bvEXT
+  typedef void (APIENTRYP GLEEPFNGLBINORMAL3BVEXTPROC) (const GLbyte * v);
+  GLEE_EXTERN GLEEPFNGLBINORMAL3BVEXTPROC GLeeFuncPtr_glBinormal3bvEXT;
+  #define glBinormal3bvEXT GLeeFuncPtr_glBinormal3bvEXT
+#endif
+#ifndef GLEE_H_DEFINED_glBinormal3dEXT
+#define GLEE_H_DEFINED_glBinormal3dEXT
+  typedef void (APIENTRYP GLEEPFNGLBINORMAL3DEXTPROC) (GLdouble  bx, GLdouble  by, GLdouble  bz);
+  GLEE_EXTERN GLEEPFNGLBINORMAL3DEXTPROC GLeeFuncPtr_glBinormal3dEXT;
+  #define glBinormal3dEXT GLeeFuncPtr_glBinormal3dEXT
+#endif
+#ifndef GLEE_H_DEFINED_glBinormal3dvEXT
+#define GLEE_H_DEFINED_glBinormal3dvEXT
+  typedef void (APIENTRYP GLEEPFNGLBINORMAL3DVEXTPROC) (const GLdouble * v);
+  GLEE_EXTERN GLEEPFNGLBINORMAL3DVEXTPROC GLeeFuncPtr_glBinormal3dvEXT;
+  #define glBinormal3dvEXT GLeeFuncPtr_glBinormal3dvEXT
+#endif
+#ifndef GLEE_H_DEFINED_glBinormal3fEXT
+#define GLEE_H_DEFINED_glBinormal3fEXT
+  typedef void (APIENTRYP GLEEPFNGLBINORMAL3FEXTPROC) (GLfloat  bx, GLfloat  by, GLfloat  bz);
+  GLEE_EXTERN GLEEPFNGLBINORMAL3FEXTPROC GLeeFuncPtr_glBinormal3fEXT;
+  #define glBinormal3fEXT GLeeFuncPtr_glBinormal3fEXT
+#endif
+#ifndef GLEE_H_DEFINED_glBinormal3fvEXT
+#define GLEE_H_DEFINED_glBinormal3fvEXT
+  typedef void (APIENTRYP GLEEPFNGLBINORMAL3FVEXTPROC) (const GLfloat * v);
+  GLEE_EXTERN GLEEPFNGLBINORMAL3FVEXTPROC GLeeFuncPtr_glBinormal3fvEXT;
+  #define glBinormal3fvEXT GLeeFuncPtr_glBinormal3fvEXT
+#endif
+#ifndef GLEE_H_DEFINED_glBinormal3iEXT
+#define GLEE_H_DEFINED_glBinormal3iEXT
+  typedef void (APIENTRYP GLEEPFNGLBINORMAL3IEXTPROC) (GLint  bx, GLint  by, GLint  bz);
+  GLEE_EXTERN GLEEPFNGLBINORMAL3IEXTPROC GLeeFuncPtr_glBinormal3iEXT;
+  #define glBinormal3iEXT GLeeFuncPtr_glBinormal3iEXT
+#endif
+#ifndef GLEE_H_DEFINED_glBinormal3ivEXT
+#define GLEE_H_DEFINED_glBinormal3ivEXT
+  typedef void (APIENTRYP GLEEPFNGLBINORMAL3IVEXTPROC) (const GLint * v);
+  GLEE_EXTERN GLEEPFNGLBINORMAL3IVEXTPROC GLeeFuncPtr_glBinormal3ivEXT;
+  #define glBinormal3ivEXT GLeeFuncPtr_glBinormal3ivEXT
+#endif
+#ifndef GLEE_H_DEFINED_glBinormal3sEXT
+#define GLEE_H_DEFINED_glBinormal3sEXT
+  typedef void (APIENTRYP GLEEPFNGLBINORMAL3SEXTPROC) (GLshort  bx, GLshort  by, GLshort  bz);
+  GLEE_EXTERN GLEEPFNGLBINORMAL3SEXTPROC GLeeFuncPtr_glBinormal3sEXT;
+  #define glBinormal3sEXT GLeeFuncPtr_glBinormal3sEXT
+#endif
+#ifndef GLEE_H_DEFINED_glBinormal3svEXT
+#define GLEE_H_DEFINED_glBinormal3svEXT
+  typedef void (APIENTRYP GLEEPFNGLBINORMAL3SVEXTPROC) (const GLshort * v);
+  GLEE_EXTERN GLEEPFNGLBINORMAL3SVEXTPROC GLeeFuncPtr_glBinormal3svEXT;
+  #define glBinormal3svEXT GLeeFuncPtr_glBinormal3svEXT
+#endif
+#ifndef GLEE_H_DEFINED_glTangentPointerEXT
+#define GLEE_H_DEFINED_glTangentPointerEXT
+  typedef void (APIENTRYP GLEEPFNGLTANGENTPOINTEREXTPROC) (GLenum  type, GLsizei  stride, const GLvoid * pointer);
+  GLEE_EXTERN GLEEPFNGLTANGENTPOINTEREXTPROC GLeeFuncPtr_glTangentPointerEXT;
+  #define glTangentPointerEXT GLeeFuncPtr_glTangentPointerEXT
+#endif
+#ifndef GLEE_H_DEFINED_glBinormalPointerEXT
+#define GLEE_H_DEFINED_glBinormalPointerEXT
+  typedef void (APIENTRYP GLEEPFNGLBINORMALPOINTEREXTPROC) (GLenum  type, GLsizei  stride, const GLvoid * pointer);
+  GLEE_EXTERN GLEEPFNGLBINORMALPOINTEREXTPROC GLeeFuncPtr_glBinormalPointerEXT;
+  #define glBinormalPointerEXT GLeeFuncPtr_glBinormalPointerEXT
+#endif
+#endif 
+
+/* GL_EXT_texture_env_combine */
+
+#ifndef GL_EXT_texture_env_combine
+#define GL_EXT_texture_env_combine 1
+#define __GLEE_GL_EXT_texture_env_combine 1
+/* Constants */
+#define GL_COMBINE_EXT                                     0x8570
+#define GL_COMBINE_RGB_EXT                                 0x8571
+#define GL_COMBINE_ALPHA_EXT                               0x8572
+#define GL_RGB_SCALE_EXT                                   0x8573
+#define GL_ADD_SIGNED_EXT                                  0x8574
+#define GL_INTERPOLATE_EXT                                 0x8575
+#define GL_CONSTANT_EXT                                    0x8576
+#define GL_PRIMARY_COLOR_EXT                               0x8577
+#define GL_PREVIOUS_EXT                                    0x8578
+#define GL_SOURCE0_RGB_EXT                                 0x8580
+#define GL_SOURCE1_RGB_EXT                                 0x8581
+#define GL_SOURCE2_RGB_EXT                                 0x8582
+#define GL_SOURCE0_ALPHA_EXT                               0x8588
+#define GL_SOURCE1_ALPHA_EXT                               0x8589
+#define GL_SOURCE2_ALPHA_EXT                               0x858A
+#define GL_OPERAND0_RGB_EXT                                0x8590
+#define GL_OPERAND1_RGB_EXT                                0x8591
+#define GL_OPERAND2_RGB_EXT                                0x8592
+#define GL_OPERAND0_ALPHA_EXT                              0x8598
+#define GL_OPERAND1_ALPHA_EXT                              0x8599
+#define GL_OPERAND2_ALPHA_EXT                              0x859A
+#endif 
+
+/* GL_APPLE_specular_vector */
+
+#ifndef GL_APPLE_specular_vector
+#define GL_APPLE_specular_vector 1
+#define __GLEE_GL_APPLE_specular_vector 1
+/* Constants */
+#define GL_LIGHT_MODEL_SPECULAR_VECTOR_APPLE               0x85B0
+#endif 
+
+/* GL_APPLE_transform_hint */
+
+#ifndef GL_APPLE_transform_hint
+#define GL_APPLE_transform_hint 1
+#define __GLEE_GL_APPLE_transform_hint 1
+/* Constants */
+#define GL_TRANSFORM_HINT_APPLE                            0x85B1
+#endif 
+
+/* GL_SGIX_fog_scale */
+
+#ifndef GL_SGIX_fog_scale
+#define GL_SGIX_fog_scale 1
+#define __GLEE_GL_SGIX_fog_scale 1
+/* Constants */
+#define GL_FOG_SCALE_SGIX                                  0x81FC
+#define GL_FOG_SCALE_VALUE_SGIX                            0x81FD
+#endif 
+
+/* GL_SUNX_constant_data */
+
+#ifndef GL_SUNX_constant_data
+#define GL_SUNX_constant_data 1
+#define __GLEE_GL_SUNX_constant_data 1
+/* Constants */
+#define GL_UNPACK_CONSTANT_DATA_SUNX                       0x81D5
+#define GL_TEXTURE_CONSTANT_DATA_SUNX                      0x81D6
+#ifndef GLEE_H_DEFINED_glFinishTextureSUNX
+#define GLEE_H_DEFINED_glFinishTextureSUNX
+  typedef void (APIENTRYP GLEEPFNGLFINISHTEXTURESUNXPROC) ();
+  GLEE_EXTERN GLEEPFNGLFINISHTEXTURESUNXPROC GLeeFuncPtr_glFinishTextureSUNX;
+  #define glFinishTextureSUNX GLeeFuncPtr_glFinishTextureSUNX
+#endif
+#endif 
+
+/* GL_SUN_global_alpha */
+
+#ifndef GL_SUN_global_alpha
+#define GL_SUN_global_alpha 1
+#define __GLEE_GL_SUN_global_alpha 1
+/* Constants */
+#define GL_GLOBAL_ALPHA_SUN                                0x81D9
+#define GL_GLOBAL_ALPHA_FACTOR_SUN                         0x81DA
+#ifndef GLEE_H_DEFINED_glGlobalAlphaFactorbSUN
+#define GLEE_H_DEFINED_glGlobalAlphaFactorbSUN
+  typedef void (APIENTRYP GLEEPFNGLGLOBALALPHAFACTORBSUNPROC) (GLbyte  factor);
+  GLEE_EXTERN GLEEPFNGLGLOBALALPHAFACTORBSUNPROC GLeeFuncPtr_glGlobalAlphaFactorbSUN;
+  #define glGlobalAlphaFactorbSUN GLeeFuncPtr_glGlobalAlphaFactorbSUN
+#endif
+#ifndef GLEE_H_DEFINED_glGlobalAlphaFactorsSUN
+#define GLEE_H_DEFINED_glGlobalAlphaFactorsSUN
+  typedef void (APIENTRYP GLEEPFNGLGLOBALALPHAFACTORSSUNPROC) (GLshort  factor);
+  GLEE_EXTERN GLEEPFNGLGLOBALALPHAFACTORSSUNPROC GLeeFuncPtr_glGlobalAlphaFactorsSUN;
+  #define glGlobalAlphaFactorsSUN GLeeFuncPtr_glGlobalAlphaFactorsSUN
+#endif
+#ifndef GLEE_H_DEFINED_glGlobalAlphaFactoriSUN
+#define GLEE_H_DEFINED_glGlobalAlphaFactoriSUN
+  typedef void (APIENTRYP GLEEPFNGLGLOBALALPHAFACTORISUNPROC) (GLint  factor);
+  GLEE_EXTERN GLEEPFNGLGLOBALALPHAFACTORISUNPROC GLeeFuncPtr_glGlobalAlphaFactoriSUN;
+  #define glGlobalAlphaFactoriSUN GLeeFuncPtr_glGlobalAlphaFactoriSUN
+#endif
+#ifndef GLEE_H_DEFINED_glGlobalAlphaFactorfSUN
+#define GLEE_H_DEFINED_glGlobalAlphaFactorfSUN
+  typedef void (APIENTRYP GLEEPFNGLGLOBALALPHAFACTORFSUNPROC) (GLfloat  factor);
+  GLEE_EXTERN GLEEPFNGLGLOBALALPHAFACTORFSUNPROC GLeeFuncPtr_glGlobalAlphaFactorfSUN;
+  #define glGlobalAlphaFactorfSUN GLeeFuncPtr_glGlobalAlphaFactorfSUN
+#endif
+#ifndef GLEE_H_DEFINED_glGlobalAlphaFactordSUN
+#define GLEE_H_DEFINED_glGlobalAlphaFactordSUN
+  typedef void (APIENTRYP GLEEPFNGLGLOBALALPHAFACTORDSUNPROC) (GLdouble  factor);
+  GLEE_EXTERN GLEEPFNGLGLOBALALPHAFACTORDSUNPROC GLeeFuncPtr_glGlobalAlphaFactordSUN;
+  #define glGlobalAlphaFactordSUN GLeeFuncPtr_glGlobalAlphaFactordSUN
+#endif
+#ifndef GLEE_H_DEFINED_glGlobalAlphaFactorubSUN
+#define GLEE_H_DEFINED_glGlobalAlphaFactorubSUN
+  typedef void (APIENTRYP GLEEPFNGLGLOBALALPHAFACTORUBSUNPROC) (GLubyte  factor);
+  GLEE_EXTERN GLEEPFNGLGLOBALALPHAFACTORUBSUNPROC GLeeFuncPtr_glGlobalAlphaFactorubSUN;
+  #define glGlobalAlphaFactorubSUN GLeeFuncPtr_glGlobalAlphaFactorubSUN
+#endif
+#ifndef GLEE_H_DEFINED_glGlobalAlphaFactorusSUN
+#define GLEE_H_DEFINED_glGlobalAlphaFactorusSUN
+  typedef void (APIENTRYP GLEEPFNGLGLOBALALPHAFACTORUSSUNPROC) (GLushort  factor);
+  GLEE_EXTERN GLEEPFNGLGLOBALALPHAFACTORUSSUNPROC GLeeFuncPtr_glGlobalAlphaFactorusSUN;
+  #define glGlobalAlphaFactorusSUN GLeeFuncPtr_glGlobalAlphaFactorusSUN
+#endif
+#ifndef GLEE_H_DEFINED_glGlobalAlphaFactoruiSUN
+#define GLEE_H_DEFINED_glGlobalAlphaFactoruiSUN
+  typedef void (APIENTRYP GLEEPFNGLGLOBALALPHAFACTORUISUNPROC) (GLuint  factor);
+  GLEE_EXTERN GLEEPFNGLGLOBALALPHAFACTORUISUNPROC GLeeFuncPtr_glGlobalAlphaFactoruiSUN;
+  #define glGlobalAlphaFactoruiSUN GLeeFuncPtr_glGlobalAlphaFactoruiSUN
+#endif
+#endif 
+
+/* GL_SUN_triangle_list */
+
+#ifndef GL_SUN_triangle_list
+#define GL_SUN_triangle_list 1
+#define __GLEE_GL_SUN_triangle_list 1
+/* Constants */
+#define GL_RESTART_SUN                                     0x0001
+#define GL_REPLACE_MIDDLE_SUN                              0x0002
+#define GL_REPLACE_OLDEST_SUN                              0x0003
+#define GL_TRIANGLE_LIST_SUN                               0x81D7
+#define GL_REPLACEMENT_CODE_SUN                            0x81D8
+#define GL_REPLACEMENT_CODE_ARRAY_SUN                      0x85C0
+#define GL_REPLACEMENT_CODE_ARRAY_TYPE_SUN                 0x85C1
+#define GL_REPLACEMENT_CODE_ARRAY_STRIDE_SUN               0x85C2
+#define GL_REPLACEMENT_CODE_ARRAY_POINTER_SUN              0x85C3
+#define GL_R1UI_V3F_SUN                                    0x85C4
+#define GL_R1UI_C4UB_V3F_SUN                               0x85C5
+#define GL_R1UI_C3F_V3F_SUN                                0x85C6
+#define GL_R1UI_N3F_V3F_SUN                                0x85C7
+#define GL_R1UI_C4F_N3F_V3F_SUN                            0x85C8
+#define GL_R1UI_T2F_V3F_SUN                                0x85C9
+#define GL_R1UI_T2F_N3F_V3F_SUN                            0x85CA
+#define GL_R1UI_T2F_C4F_N3F_V3F_SUN                        0x85CB
+#ifndef GLEE_H_DEFINED_glReplacementCodeuiSUN
+#define GLEE_H_DEFINED_glReplacementCodeuiSUN
+  typedef void (APIENTRYP GLEEPFNGLREPLACEMENTCODEUISUNPROC) (GLuint  code);
+  GLEE_EXTERN GLEEPFNGLREPLACEMENTCODEUISUNPROC GLeeFuncPtr_glReplacementCodeuiSUN;
+  #define glReplacementCodeuiSUN GLeeFuncPtr_glReplacementCodeuiSUN
+#endif
+#ifndef GLEE_H_DEFINED_glReplacementCodeusSUN
+#define GLEE_H_DEFINED_glReplacementCodeusSUN
+  typedef void (APIENTRYP GLEEPFNGLREPLACEMENTCODEUSSUNPROC) (GLushort  code);
+  GLEE_EXTERN GLEEPFNGLREPLACEMENTCODEUSSUNPROC GLeeFuncPtr_glReplacementCodeusSUN;
+  #define glReplacementCodeusSUN GLeeFuncPtr_glReplacementCodeusSUN
+#endif
+#ifndef GLEE_H_DEFINED_glReplacementCodeubSUN
+#define GLEE_H_DEFINED_glReplacementCodeubSUN
+  typedef void (APIENTRYP GLEEPFNGLREPLACEMENTCODEUBSUNPROC) (GLubyte  code);
+  GLEE_EXTERN GLEEPFNGLREPLACEMENTCODEUBSUNPROC GLeeFuncPtr_glReplacementCodeubSUN;
+  #define glReplacementCodeubSUN GLeeFuncPtr_glReplacementCodeubSUN
+#endif
+#ifndef GLEE_H_DEFINED_glReplacementCodeuivSUN
+#define GLEE_H_DEFINED_glReplacementCodeuivSUN
+  typedef void (APIENTRYP GLEEPFNGLREPLACEMENTCODEUIVSUNPROC) (const GLuint * code);
+  GLEE_EXTERN GLEEPFNGLREPLACEMENTCODEUIVSUNPROC GLeeFuncPtr_glReplacementCodeuivSUN;
+  #define glReplacementCodeuivSUN GLeeFuncPtr_glReplacementCodeuivSUN
+#endif
+#ifndef GLEE_H_DEFINED_glReplacementCodeusvSUN
+#define GLEE_H_DEFINED_glReplacementCodeusvSUN
+  typedef void (APIENTRYP GLEEPFNGLREPLACEMENTCODEUSVSUNPROC) (const GLushort * code);
+  GLEE_EXTERN GLEEPFNGLREPLACEMENTCODEUSVSUNPROC GLeeFuncPtr_glReplacementCodeusvSUN;
+  #define glReplacementCodeusvSUN GLeeFuncPtr_glReplacementCodeusvSUN
+#endif
+#ifndef GLEE_H_DEFINED_glReplacementCodeubvSUN
+#define GLEE_H_DEFINED_glReplacementCodeubvSUN
+  typedef void (APIENTRYP GLEEPFNGLREPLACEMENTCODEUBVSUNPROC) (const GLubyte * code);
+  GLEE_EXTERN GLEEPFNGLREPLACEMENTCODEUBVSUNPROC GLeeFuncPtr_glReplacementCodeubvSUN;
+  #define glReplacementCodeubvSUN GLeeFuncPtr_glReplacementCodeubvSUN
+#endif
+#ifndef GLEE_H_DEFINED_glReplacementCodePointerSUN
+#define GLEE_H_DEFINED_glReplacementCodePointerSUN
+  typedef void (APIENTRYP GLEEPFNGLREPLACEMENTCODEPOINTERSUNPROC) (GLenum  type, GLsizei  stride, const GLvoid* * pointer);
+  GLEE_EXTERN GLEEPFNGLREPLACEMENTCODEPOINTERSUNPROC GLeeFuncPtr_glReplacementCodePointerSUN;
+  #define glReplacementCodePointerSUN GLeeFuncPtr_glReplacementCodePointerSUN
+#endif
+#endif 
+
+/* GL_SUN_vertex */
+
+#ifndef GL_SUN_vertex
+#define GL_SUN_vertex 1
+#define __GLEE_GL_SUN_vertex 1
+/* Constants */
+#ifndef GLEE_H_DEFINED_glColor4ubVertex2fSUN
+#define GLEE_H_DEFINED_glColor4ubVertex2fSUN
+  typedef void (APIENTRYP GLEEPFNGLCOLOR4UBVERTEX2FSUNPROC) (GLubyte  r, GLubyte  g, GLubyte  b, GLubyte  a, GLfloat  x, GLfloat  y);
+  GLEE_EXTERN GLEEPFNGLCOLOR4UBVERTEX2FSUNPROC GLeeFuncPtr_glColor4ubVertex2fSUN;
+  #define glColor4ubVertex2fSUN GLeeFuncPtr_glColor4ubVertex2fSUN
+#endif
+#ifndef GLEE_H_DEFINED_glColor4ubVertex2fvSUN
+#define GLEE_H_DEFINED_glColor4ubVertex2fvSUN
+  typedef void (APIENTRYP GLEEPFNGLCOLOR4UBVERTEX2FVSUNPROC) (const GLubyte * c, const GLfloat * v);
+  GLEE_EXTERN GLEEPFNGLCOLOR4UBVERTEX2FVSUNPROC GLeeFuncPtr_glColor4ubVertex2fvSUN;
+  #define glColor4ubVertex2fvSUN GLeeFuncPtr_glColor4ubVertex2fvSUN
+#endif
+#ifndef GLEE_H_DEFINED_glColor4ubVertex3fSUN
+#define GLEE_H_DEFINED_glColor4ubVertex3fSUN
+  typedef void (APIENTRYP GLEEPFNGLCOLOR4UBVERTEX3FSUNPROC) (GLubyte  r, GLubyte  g, GLubyte  b, GLubyte  a, GLfloat  x, GLfloat  y, GLfloat  z);
+  GLEE_EXTERN GLEEPFNGLCOLOR4UBVERTEX3FSUNPROC GLeeFuncPtr_glColor4ubVertex3fSUN;
+  #define glColor4ubVertex3fSUN GLeeFuncPtr_glColor4ubVertex3fSUN
+#endif
+#ifndef GLEE_H_DEFINED_glColor4ubVertex3fvSUN
+#define GLEE_H_DEFINED_glColor4ubVertex3fvSUN
+  typedef void (APIENTRYP GLEEPFNGLCOLOR4UBVERTEX3FVSUNPROC) (const GLubyte * c, const GLfloat * v);
+  GLEE_EXTERN GLEEPFNGLCOLOR4UBVERTEX3FVSUNPROC GLeeFuncPtr_glColor4ubVertex3fvSUN;
+  #define glColor4ubVertex3fvSUN GLeeFuncPtr_glColor4ubVertex3fvSUN
+#endif
+#ifndef GLEE_H_DEFINED_glColor3fVertex3fSUN
+#define GLEE_H_DEFINED_glColor3fVertex3fSUN
+  typedef void (APIENTRYP GLEEPFNGLCOLOR3FVERTEX3FSUNPROC) (GLfloat  r, GLfloat  g, GLfloat  b, GLfloat  x, GLfloat  y, GLfloat  z);
+  GLEE_EXTERN GLEEPFNGLCOLOR3FVERTEX3FSUNPROC GLeeFuncPtr_glColor3fVertex3fSUN;
+  #define glColor3fVertex3fSUN GLeeFuncPtr_glColor3fVertex3fSUN
+#endif
+#ifndef GLEE_H_DEFINED_glColor3fVertex3fvSUN
+#define GLEE_H_DEFINED_glColor3fVertex3fvSUN
+  typedef void (APIENTRYP GLEEPFNGLCOLOR3FVERTEX3FVSUNPROC) (const GLfloat * c, const GLfloat * v);
+  GLEE_EXTERN GLEEPFNGLCOLOR3FVERTEX3FVSUNPROC GLeeFuncPtr_glColor3fVertex3fvSUN;
+  #define glColor3fVertex3fvSUN GLeeFuncPtr_glColor3fVertex3fvSUN
+#endif
+#ifndef GLEE_H_DEFINED_glNormal3fVertex3fSUN
+#define GLEE_H_DEFINED_glNormal3fVertex3fSUN
+  typedef void (APIENTRYP GLEEPFNGLNORMAL3FVERTEX3FSUNPROC) (GLfloat  nx, GLfloat  ny, GLfloat  nz, GLfloat  x, GLfloat  y, GLfloat  z);
+  GLEE_EXTERN GLEEPFNGLNORMAL3FVERTEX3FSUNPROC GLeeFuncPtr_glNormal3fVertex3fSUN;
+  #define glNormal3fVertex3fSUN GLeeFuncPtr_glNormal3fVertex3fSUN
+#endif
+#ifndef GLEE_H_DEFINED_glNormal3fVertex3fvSUN
+#define GLEE_H_DEFINED_glNormal3fVertex3fvSUN
+  typedef void (APIENTRYP GLEEPFNGLNORMAL3FVERTEX3FVSUNPROC) (const GLfloat * n, const GLfloat * v);
+  GLEE_EXTERN GLEEPFNGLNORMAL3FVERTEX3FVSUNPROC GLeeFuncPtr_glNormal3fVertex3fvSUN;
+  #define glNormal3fVertex3fvSUN GLeeFuncPtr_glNormal3fVertex3fvSUN
+#endif
+#ifndef GLEE_H_DEFINED_glColor4fNormal3fVertex3fSUN
+#define GLEE_H_DEFINED_glColor4fNormal3fVertex3fSUN
+  typedef void (APIENTRYP GLEEPFNGLCOLOR4FNORMAL3FVERTEX3FSUNPROC) (GLfloat  r, GLfloat  g, GLfloat  b, GLfloat  a, GLfloat  nx, GLfloat  ny, GLfloat  nz, GLfloat  x, GLfloat  y, GLfloat  z);
+  GLEE_EXTERN GLEEPFNGLCOLOR4FNORMAL3FVERTEX3FSUNPROC GLeeFuncPtr_glColor4fNormal3fVertex3fSUN;
+  #define glColor4fNormal3fVertex3fSUN GLeeFuncPtr_glColor4fNormal3fVertex3fSUN
+#endif
+#ifndef GLEE_H_DEFINED_glColor4fNormal3fVertex3fvSUN
+#define GLEE_H_DEFINED_glColor4fNormal3fVertex3fvSUN
+  typedef void (APIENTRYP GLEEPFNGLCOLOR4FNORMAL3FVERTEX3FVSUNPROC) (const GLfloat * c, const GLfloat * n, const GLfloat * v);
+  GLEE_EXTERN GLEEPFNGLCOLOR4FNORMAL3FVERTEX3FVSUNPROC GLeeFuncPtr_glColor4fNormal3fVertex3fvSUN;
+  #define glColor4fNormal3fVertex3fvSUN GLeeFuncPtr_glColor4fNormal3fVertex3fvSUN
+#endif
+#ifndef GLEE_H_DEFINED_glTexCoord2fVertex3fSUN
+#define GLEE_H_DEFINED_glTexCoord2fVertex3fSUN
+  typedef void (APIENTRYP GLEEPFNGLTEXCOORD2FVERTEX3FSUNPROC) (GLfloat  s, GLfloat  t, GLfloat  x, GLfloat  y, GLfloat  z);
+  GLEE_EXTERN GLEEPFNGLTEXCOORD2FVERTEX3FSUNPROC GLeeFuncPtr_glTexCoord2fVertex3fSUN;
+  #define glTexCoord2fVertex3fSUN GLeeFuncPtr_glTexCoord2fVertex3fSUN
+#endif
+#ifndef GLEE_H_DEFINED_glTexCoord2fVertex3fvSUN
+#define GLEE_H_DEFINED_glTexCoord2fVertex3fvSUN
+  typedef void (APIENTRYP GLEEPFNGLTEXCOORD2FVERTEX3FVSUNPROC) (const GLfloat * tc, const GLfloat * v);
+  GLEE_EXTERN GLEEPFNGLTEXCOORD2FVERTEX3FVSUNPROC GLeeFuncPtr_glTexCoord2fVertex3fvSUN;
+  #define glTexCoord2fVertex3fvSUN GLeeFuncPtr_glTexCoord2fVertex3fvSUN
+#endif
+#ifndef GLEE_H_DEFINED_glTexCoord4fVertex4fSUN
+#define GLEE_H_DEFINED_glTexCoord4fVertex4fSUN
+  typedef void (APIENTRYP GLEEPFNGLTEXCOORD4FVERTEX4FSUNPROC) (GLfloat  s, GLfloat  t, GLfloat  p, GLfloat  q, GLfloat  x, GLfloat  y, GLfloat  z, GLfloat  w);
+  GLEE_EXTERN GLEEPFNGLTEXCOORD4FVERTEX4FSUNPROC GLeeFuncPtr_glTexCoord4fVertex4fSUN;
+  #define glTexCoord4fVertex4fSUN GLeeFuncPtr_glTexCoord4fVertex4fSUN
+#endif
+#ifndef GLEE_H_DEFINED_glTexCoord4fVertex4fvSUN
+#define GLEE_H_DEFINED_glTexCoord4fVertex4fvSUN
+  typedef void (APIENTRYP GLEEPFNGLTEXCOORD4FVERTEX4FVSUNPROC) (const GLfloat * tc, const GLfloat * v);
+  GLEE_EXTERN GLEEPFNGLTEXCOORD4FVERTEX4FVSUNPROC GLeeFuncPtr_glTexCoord4fVertex4fvSUN;
+  #define glTexCoord4fVertex4fvSUN GLeeFuncPtr_glTexCoord4fVertex4fvSUN
+#endif
+#ifndef GLEE_H_DEFINED_glTexCoord2fColor4ubVertex3fSUN
+#define GLEE_H_DEFINED_glTexCoord2fColor4ubVertex3fSUN
+  typedef void (APIENTRYP GLEEPFNGLTEXCOORD2FCOLOR4UBVERTEX3FSUNPROC) (GLfloat  s, GLfloat  t, GLubyte  r, GLubyte  g, GLubyte  b, GLubyte  a, GLfloat  x, GLfloat  y, GLfloat  z);
+  GLEE_EXTERN GLEEPFNGLTEXCOORD2FCOLOR4UBVERTEX3FSUNPROC GLeeFuncPtr_glTexCoord2fColor4ubVertex3fSUN;
+  #define glTexCoord2fColor4ubVertex3fSUN GLeeFuncPtr_glTexCoord2fColor4ubVertex3fSUN
+#endif
+#ifndef GLEE_H_DEFINED_glTexCoord2fColor4ubVertex3fvSUN
+#define GLEE_H_DEFINED_glTexCoord2fColor4ubVertex3fvSUN
+  typedef void (APIENTRYP GLEEPFNGLTEXCOORD2FCOLOR4UBVERTEX3FVSUNPROC) (const GLfloat * tc, const GLubyte * c, const GLfloat * v);
+  GLEE_EXTERN GLEEPFNGLTEXCOORD2FCOLOR4UBVERTEX3FVSUNPROC GLeeFuncPtr_glTexCoord2fColor4ubVertex3fvSUN;
+  #define glTexCoord2fColor4ubVertex3fvSUN GLeeFuncPtr_glTexCoord2fColor4ubVertex3fvSUN
+#endif
+#ifndef GLEE_H_DEFINED_glTexCoord2fColor3fVertex3fSUN
+#define GLEE_H_DEFINED_glTexCoord2fColor3fVertex3fSUN
+  typedef void (APIENTRYP GLEEPFNGLTEXCOORD2FCOLOR3FVERTEX3FSUNPROC) (GLfloat  s, GLfloat  t, GLfloat  r, GLfloat  g, GLfloat  b, GLfloat  x, GLfloat  y, GLfloat  z);
+  GLEE_EXTERN GLEEPFNGLTEXCOORD2FCOLOR3FVERTEX3FSUNPROC GLeeFuncPtr_glTexCoord2fColor3fVertex3fSUN;
+  #define glTexCoord2fColor3fVertex3fSUN GLeeFuncPtr_glTexCoord2fColor3fVertex3fSUN
+#endif
+#ifndef GLEE_H_DEFINED_glTexCoord2fColor3fVertex3fvSUN
+#define GLEE_H_DEFINED_glTexCoord2fColor3fVertex3fvSUN
+  typedef void (APIENTRYP GLEEPFNGLTEXCOORD2FCOLOR3FVERTEX3FVSUNPROC) (const GLfloat * tc, const GLfloat * c, const GLfloat * v);
+  GLEE_EXTERN GLEEPFNGLTEXCOORD2FCOLOR3FVERTEX3FVSUNPROC GLeeFuncPtr_glTexCoord2fColor3fVertex3fvSUN;
+  #define glTexCoord2fColor3fVertex3fvSUN GLeeFuncPtr_glTexCoord2fColor3fVertex3fvSUN
+#endif
+#ifndef GLEE_H_DEFINED_glTexCoord2fNormal3fVertex3fSUN
+#define GLEE_H_DEFINED_glTexCoord2fNormal3fVertex3fSUN
+  typedef void (APIENTRYP GLEEPFNGLTEXCOORD2FNORMAL3FVERTEX3FSUNPROC) (GLfloat  s, GLfloat  t, GLfloat  nx, GLfloat  ny, GLfloat  nz, GLfloat  x, GLfloat  y, GLfloat  z);
+  GLEE_EXTERN GLEEPFNGLTEXCOORD2FNORMAL3FVERTEX3FSUNPROC GLeeFuncPtr_glTexCoord2fNormal3fVertex3fSUN;
+  #define glTexCoord2fNormal3fVertex3fSUN GLeeFuncPtr_glTexCoord2fNormal3fVertex3fSUN
+#endif
+#ifndef GLEE_H_DEFINED_glTexCoord2fNormal3fVertex3fvSUN
+#define GLEE_H_DEFINED_glTexCoord2fNormal3fVertex3fvSUN
+  typedef void (APIENTRYP GLEEPFNGLTEXCOORD2FNORMAL3FVERTEX3FVSUNPROC) (const GLfloat * tc, const GLfloat * n, const GLfloat * v);
+  GLEE_EXTERN GLEEPFNGLTEXCOORD2FNORMAL3FVERTEX3FVSUNPROC GLeeFuncPtr_glTexCoord2fNormal3fVertex3fvSUN;
+  #define glTexCoord2fNormal3fVertex3fvSUN GLeeFuncPtr_glTexCoord2fNormal3fVertex3fvSUN
+#endif
+#ifndef GLEE_H_DEFINED_glTexCoord2fColor4fNormal3fVertex3fSUN
+#define GLEE_H_DEFINED_glTexCoord2fColor4fNormal3fVertex3fSUN
+  typedef void (APIENTRYP GLEEPFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC) (GLfloat  s, GLfloat  t, GLfloat  r, GLfloat  g, GLfloat  b, GLfloat  a, GLfloat  nx, GLfloat  ny, GLfloat  nz, GLfloat  x, GLfloat  y, GLfloat  z);
+  GLEE_EXTERN GLEEPFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC GLeeFuncPtr_glTexCoord2fColor4fNormal3fVertex3fSUN;
+  #define glTexCoord2fColor4fNormal3fVertex3fSUN GLeeFuncPtr_glTexCoord2fColor4fNormal3fVertex3fSUN
+#endif
+#ifndef GLEE_H_DEFINED_glTexCoord2fColor4fNormal3fVertex3fvSUN
+#define GLEE_H_DEFINED_glTexCoord2fColor4fNormal3fVertex3fvSUN
+  typedef void (APIENTRYP GLEEPFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC) (const GLfloat * tc, const GLfloat * c, const GLfloat * n, const GLfloat * v);
+  GLEE_EXTERN GLEEPFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC GLeeFuncPtr_glTexCoord2fColor4fNormal3fVertex3fvSUN;
+  #define glTexCoord2fColor4fNormal3fVertex3fvSUN GLeeFuncPtr_glTexCoord2fColor4fNormal3fVertex3fvSUN
+#endif
+#ifndef GLEE_H_DEFINED_glTexCoord4fColor4fNormal3fVertex4fSUN
+#define GLEE_H_DEFINED_glTexCoord4fColor4fNormal3fVertex4fSUN
+  typedef void (APIENTRYP GLEEPFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FSUNPROC) (GLfloat  s, GLfloat  t, GLfloat  p, GLfloat  q, GLfloat  r, GLfloat  g, GLfloat  b, GLfloat  a, GLfloat  nx, GLfloat  ny, GLfloat  nz, GLfloat  x, GLfloat  y, GLfloat  z, GLfloat  w);
+  GLEE_EXTERN GLEEPFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FSUNPROC GLeeFuncPtr_glTexCoord4fColor4fNormal3fVertex4fSUN;
+  #define glTexCoord4fColor4fNormal3fVertex4fSUN GLeeFuncPtr_glTexCoord4fColor4fNormal3fVertex4fSUN
+#endif
+#ifndef GLEE_H_DEFINED_glTexCoord4fColor4fNormal3fVertex4fvSUN
+#define GLEE_H_DEFINED_glTexCoord4fColor4fNormal3fVertex4fvSUN
+  typedef void (APIENTRYP GLEEPFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FVSUNPROC) (const GLfloat * tc, const GLfloat * c, const GLfloat * n, const GLfloat * v);
+  GLEE_EXTERN GLEEPFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FVSUNPROC GLeeFuncPtr_glTexCoord4fColor4fNormal3fVertex4fvSUN;
+  #define glTexCoord4fColor4fNormal3fVertex4fvSUN GLeeFuncPtr_glTexCoord4fColor4fNormal3fVertex4fvSUN
+#endif
+#ifndef GLEE_H_DEFINED_glReplacementCodeuiVertex3fSUN
+#define GLEE_H_DEFINED_glReplacementCodeuiVertex3fSUN
+  typedef void (APIENTRYP GLEEPFNGLREPLACEMENTCODEUIVERTEX3FSUNPROC) (GLuint  rc, GLfloat  x, GLfloat  y, GLfloat  z);
+  GLEE_EXTERN GLEEPFNGLREPLACEMENTCODEUIVERTEX3FSUNPROC GLeeFuncPtr_glReplacementCodeuiVertex3fSUN;
+  #define glReplacementCodeuiVertex3fSUN GLeeFuncPtr_glReplacementCodeuiVertex3fSUN
+#endif
+#ifndef GLEE_H_DEFINED_glReplacementCodeuiVertex3fvSUN
+#define GLEE_H_DEFINED_glReplacementCodeuiVertex3fvSUN
+  typedef void (APIENTRYP GLEEPFNGLREPLACEMENTCODEUIVERTEX3FVSUNPROC) (const GLuint * rc, const GLfloat * v);
+  GLEE_EXTERN GLEEPFNGLREPLACEMENTCODEUIVERTEX3FVSUNPROC GLeeFuncPtr_glReplacementCodeuiVertex3fvSUN;
+  #define glReplacementCodeuiVertex3fvSUN GLeeFuncPtr_glReplacementCodeuiVertex3fvSUN
+#endif
+#ifndef GLEE_H_DEFINED_glReplacementCodeuiColor4ubVertex3fSUN
+#define GLEE_H_DEFINED_glReplacementCodeuiColor4ubVertex3fSUN
+  typedef void (APIENTRYP GLEEPFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FSUNPROC) (GLuint  rc, GLubyte  r, GLubyte  g, GLubyte  b, GLubyte  a, GLfloat  x, GLfloat  y, GLfloat  z);
+  GLEE_EXTERN GLEEPFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FSUNPROC GLeeFuncPtr_glReplacementCodeuiColor4ubVertex3fSUN;
+  #define glReplacementCodeuiColor4ubVertex3fSUN GLeeFuncPtr_glReplacementCodeuiColor4ubVertex3fSUN
+#endif
+#ifndef GLEE_H_DEFINED_glReplacementCodeuiColor4ubVertex3fvSUN
+#define GLEE_H_DEFINED_glReplacementCodeuiColor4ubVertex3fvSUN
+  typedef void (APIENTRYP GLEEPFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FVSUNPROC) (const GLuint * rc, const GLubyte * c, const GLfloat * v);
+  GLEE_EXTERN GLEEPFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FVSUNPROC GLeeFuncPtr_glReplacementCodeuiColor4ubVertex3fvSUN;
+  #define glReplacementCodeuiColor4ubVertex3fvSUN GLeeFuncPtr_glReplacementCodeuiColor4ubVertex3fvSUN
+#endif
+#ifndef GLEE_H_DEFINED_glReplacementCodeuiColor3fVertex3fSUN
+#define GLEE_H_DEFINED_glReplacementCodeuiColor3fVertex3fSUN
+  typedef void (APIENTRYP GLEEPFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FSUNPROC) (GLuint  rc, GLfloat  r, GLfloat  g, GLfloat  b, GLfloat  x, GLfloat  y, GLfloat  z);
+  GLEE_EXTERN GLEEPFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FSUNPROC GLeeFuncPtr_glReplacementCodeuiColor3fVertex3fSUN;
+  #define glReplacementCodeuiColor3fVertex3fSUN GLeeFuncPtr_glReplacementCodeuiColor3fVertex3fSUN
+#endif
+#ifndef GLEE_H_DEFINED_glReplacementCodeuiColor3fVertex3fvSUN
+#define GLEE_H_DEFINED_glReplacementCodeuiColor3fVertex3fvSUN
+  typedef void (APIENTRYP GLEEPFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FVSUNPROC) (const GLuint * rc, const GLfloat * c, const GLfloat * v);
+  GLEE_EXTERN GLEEPFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FVSUNPROC GLeeFuncPtr_glReplacementCodeuiColor3fVertex3fvSUN;
+  #define glReplacementCodeuiColor3fVertex3fvSUN GLeeFuncPtr_glReplacementCodeuiColor3fVertex3fvSUN
+#endif
+#ifndef GLEE_H_DEFINED_glReplacementCodeuiNormal3fVertex3fSUN
+#define GLEE_H_DEFINED_glReplacementCodeuiNormal3fVertex3fSUN
+  typedef void (APIENTRYP GLEEPFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FSUNPROC) (GLuint  rc, GLfloat  nx, GLfloat  ny, GLfloat  nz, GLfloat  x, GLfloat  y, GLfloat  z);
+  GLEE_EXTERN GLEEPFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FSUNPROC GLeeFuncPtr_glReplacementCodeuiNormal3fVertex3fSUN;
+  #define glReplacementCodeuiNormal3fVertex3fSUN GLeeFuncPtr_glReplacementCodeuiNormal3fVertex3fSUN
+#endif
+#ifndef GLEE_H_DEFINED_glReplacementCodeuiNormal3fVertex3fvSUN
+#define GLEE_H_DEFINED_glReplacementCodeuiNormal3fVertex3fvSUN
+  typedef void (APIENTRYP GLEEPFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FVSUNPROC) (const GLuint * rc, const GLfloat * n, const GLfloat * v);
+  GLEE_EXTERN GLEEPFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FVSUNPROC GLeeFuncPtr_glReplacementCodeuiNormal3fVertex3fvSUN;
+  #define glReplacementCodeuiNormal3fVertex3fvSUN GLeeFuncPtr_glReplacementCodeuiNormal3fVertex3fvSUN
+#endif
+#ifndef GLEE_H_DEFINED_glReplacementCodeuiColor4fNormal3fVertex3fSUN
+#define GLEE_H_DEFINED_glReplacementCodeuiColor4fNormal3fVertex3fSUN
+  typedef void (APIENTRYP GLEEPFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FSUNPROC) (GLuint  rc, GLfloat  r, GLfloat  g, GLfloat  b, GLfloat  a, GLfloat  nx, GLfloat  ny, GLfloat  nz, GLfloat  x, GLfloat  y, GLfloat  z);
+  GLEE_EXTERN GLEEPFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FSUNPROC GLeeFuncPtr_glReplacementCodeuiColor4fNormal3fVertex3fSUN;
+  #define glReplacementCodeuiColor4fNormal3fVertex3fSUN GLeeFuncPtr_glReplacementCodeuiColor4fNormal3fVertex3fSUN
+#endif
+#ifndef GLEE_H_DEFINED_glReplacementCodeuiColor4fNormal3fVertex3fvSUN
+#define GLEE_H_DEFINED_glReplacementCodeuiColor4fNormal3fVertex3fvSUN
+  typedef void (APIENTRYP GLEEPFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FVSUNPROC) (const GLuint * rc, const GLfloat * c, const GLfloat * n, const GLfloat * v);
+  GLEE_EXTERN GLEEPFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FVSUNPROC GLeeFuncPtr_glReplacementCodeuiColor4fNormal3fVertex3fvSUN;
+  #define glReplacementCodeuiColor4fNormal3fVertex3fvSUN GLeeFuncPtr_glReplacementCodeuiColor4fNormal3fVertex3fvSUN
+#endif
+#ifndef GLEE_H_DEFINED_glReplacementCodeuiTexCoord2fVertex3fSUN
+#define GLEE_H_DEFINED_glReplacementCodeuiTexCoord2fVertex3fSUN
+  typedef void (APIENTRYP GLEEPFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FSUNPROC) (GLuint  rc, GLfloat  s, GLfloat  t, GLfloat  x, GLfloat  y, GLfloat  z);
+  GLEE_EXTERN GLEEPFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FSUNPROC GLeeFuncPtr_glReplacementCodeuiTexCoord2fVertex3fSUN;
+  #define glReplacementCodeuiTexCoord2fVertex3fSUN GLeeFuncPtr_glReplacementCodeuiTexCoord2fVertex3fSUN
+#endif
+#ifndef GLEE_H_DEFINED_glReplacementCodeuiTexCoord2fVertex3fvSUN
+#define GLEE_H_DEFINED_glReplacementCodeuiTexCoord2fVertex3fvSUN
+  typedef void (APIENTRYP GLEEPFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FVSUNPROC) (const GLuint * rc, const GLfloat * tc, const GLfloat * v);
+  GLEE_EXTERN GLEEPFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FVSUNPROC GLeeFuncPtr_glReplacementCodeuiTexCoord2fVertex3fvSUN;
+  #define glReplacementCodeuiTexCoord2fVertex3fvSUN GLeeFuncPtr_glReplacementCodeuiTexCoord2fVertex3fvSUN
+#endif
+#ifndef GLEE_H_DEFINED_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN
+#define GLEE_H_DEFINED_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN
+  typedef void (APIENTRYP GLEEPFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FSUNPROC) (GLuint  rc, GLfloat  s, GLfloat  t, GLfloat  nx, GLfloat  ny, GLfloat  nz, GLfloat  x, GLfloat  y, GLfloat  z);
+  GLEE_EXTERN GLEEPFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FSUNPROC GLeeFuncPtr_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN;
+  #define glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN GLeeFuncPtr_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN
+#endif
+#ifndef GLEE_H_DEFINED_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN
+#define GLEE_H_DEFINED_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN
+  typedef void (APIENTRYP GLEEPFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FVSUNPROC) (const GLuint * rc, const GLfloat * tc, const GLfloat * n, const GLfloat * v);
+  GLEE_EXTERN GLEEPFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FVSUNPROC GLeeFuncPtr_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN;
+  #define glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN GLeeFuncPtr_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN
+#endif
+#ifndef GLEE_H_DEFINED_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN
+#define GLEE_H_DEFINED_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN
+  typedef void (APIENTRYP GLEEPFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC) (GLuint  rc, GLfloat  s, GLfloat  t, GLfloat  r, GLfloat  g, GLfloat  b, GLfloat  a, GLfloat  nx, GLfloat  ny, GLfloat  nz, GLfloat  x, GLfloat  y, GLfloat  z);
+  GLEE_EXTERN GLEEPFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC GLeeFuncPtr_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN;
+  #define glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN GLeeFuncPtr_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN
+#endif
+#ifndef GLEE_H_DEFINED_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN
+#define GLEE_H_DEFINED_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN
+  typedef void (APIENTRYP GLEEPFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC) (const GLuint * rc, const GLfloat * tc, const GLfloat * c, const GLfloat * n, const GLfloat * v);
+  GLEE_EXTERN GLEEPFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC GLeeFuncPtr_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN;
+  #define glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN GLeeFuncPtr_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN
+#endif
+#endif 
+
+/* GL_EXT_blend_func_separate */
+
+#ifndef GL_EXT_blend_func_separate
+#define GL_EXT_blend_func_separate 1
+#define __GLEE_GL_EXT_blend_func_separate 1
+/* Constants */
+#define GL_BLEND_DST_RGB_EXT                               0x80C8
+#define GL_BLEND_SRC_RGB_EXT                               0x80C9
+#define GL_BLEND_DST_ALPHA_EXT                             0x80CA
+#define GL_BLEND_SRC_ALPHA_EXT                             0x80CB
+#ifndef GLEE_H_DEFINED_glBlendFuncSeparateEXT
+#define GLEE_H_DEFINED_glBlendFuncSeparateEXT
+  typedef void (APIENTRYP GLEEPFNGLBLENDFUNCSEPARATEEXTPROC) (GLenum  sfactorRGB, GLenum  dfactorRGB, GLenum  sfactorAlpha, GLenum  dfactorAlpha);
+  GLEE_EXTERN GLEEPFNGLBLENDFUNCSEPARATEEXTPROC GLeeFuncPtr_glBlendFuncSeparateEXT;
+  #define glBlendFuncSeparateEXT GLeeFuncPtr_glBlendFuncSeparateEXT
+#endif
+#endif 
+
+/* GL_INGR_color_clamp */
+
+#ifndef GL_INGR_color_clamp
+#define GL_INGR_color_clamp 1
+#define __GLEE_GL_INGR_color_clamp 1
+/* Constants */
+#define GL_RED_MIN_CLAMP_INGR                              0x8560
+#define GL_GREEN_MIN_CLAMP_INGR                            0x8561
+#define GL_BLUE_MIN_CLAMP_INGR                             0x8562
+#define GL_ALPHA_MIN_CLAMP_INGR                            0x8563
+#define GL_RED_MAX_CLAMP_INGR                              0x8564
+#define GL_GREEN_MAX_CLAMP_INGR                            0x8565
+#define GL_BLUE_MAX_CLAMP_INGR                             0x8566
+#define GL_ALPHA_MAX_CLAMP_INGR                            0x8567
+#endif 
+
+/* GL_INGR_interlace_read */
+
+#ifndef GL_INGR_interlace_read
+#define GL_INGR_interlace_read 1
+#define __GLEE_GL_INGR_interlace_read 1
+/* Constants */
+#define GL_INTERLACE_READ_INGR                             0x8568
+#endif 
+
+/* GL_EXT_stencil_wrap */
+
+#ifndef GL_EXT_stencil_wrap
+#define GL_EXT_stencil_wrap 1
+#define __GLEE_GL_EXT_stencil_wrap 1
+/* Constants */
+#define GL_INCR_WRAP_EXT                                   0x8507
+#define GL_DECR_WRAP_EXT                                   0x8508
+#endif 
+
+/* GL_EXT_422_pixels */
+
+#ifndef GL_EXT_422_pixels
+#define GL_EXT_422_pixels 1
+#define __GLEE_GL_EXT_422_pixels 1
+/* Constants */
+#define GL_422_EXT                                         0x80CC
+#define GL_422_REV_EXT                                     0x80CD
+#define GL_422_AVERAGE_EXT                                 0x80CE
+#define GL_422_REV_AVERAGE_EXT                             0x80CF
+#endif 
+
+/* GL_NV_texgen_reflection */
+
+#ifndef GL_NV_texgen_reflection
+#define GL_NV_texgen_reflection 1
+#define __GLEE_GL_NV_texgen_reflection 1
+/* Constants */
+#define GL_NORMAL_MAP_NV                                   0x8511
+#define GL_REFLECTION_MAP_NV                               0x8512
+#endif 
+
+/* GL_EXT_texture_cube_map */
+
+#ifndef GL_EXT_texture_cube_map
+#define GL_EXT_texture_cube_map 1
+#define __GLEE_GL_EXT_texture_cube_map 1
+/* Constants */
+#define GL_NORMAL_MAP_EXT                                  0x8511
+#define GL_REFLECTION_MAP_EXT                              0x8512
+#define GL_TEXTURE_CUBE_MAP_EXT                            0x8513
+#define GL_TEXTURE_BINDING_CUBE_MAP_EXT                    0x8514
+#define GL_TEXTURE_CUBE_MAP_POSITIVE_X_EXT                 0x8515
+#define GL_TEXTURE_CUBE_MAP_NEGATIVE_X_EXT                 0x8516
+#define GL_TEXTURE_CUBE_MAP_POSITIVE_Y_EXT                 0x8517
+#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_EXT                 0x8518
+#define GL_TEXTURE_CUBE_MAP_POSITIVE_Z_EXT                 0x8519
+#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_EXT                 0x851A
+#define GL_PROXY_TEXTURE_CUBE_MAP_EXT                      0x851B
+#define GL_MAX_CUBE_MAP_TEXTURE_SIZE_EXT                   0x851C
+#endif 
+
+/* GL_SUN_convolution_border_modes */
+
+#ifndef GL_SUN_convolution_border_modes
+#define GL_SUN_convolution_border_modes 1
+#define __GLEE_GL_SUN_convolution_border_modes 1
+/* Constants */
+#define GL_WRAP_BORDER_SUN                                 0x81D4
+#endif 
+
+/* GL_EXT_texture_env_add */
+
+#ifndef GL_EXT_texture_env_add
+#define GL_EXT_texture_env_add 1
+#define __GLEE_GL_EXT_texture_env_add 1
+/* Constants */
+#endif 
+
+/* GL_EXT_texture_lod_bias */
+
+#ifndef GL_EXT_texture_lod_bias
+#define GL_EXT_texture_lod_bias 1
+#define __GLEE_GL_EXT_texture_lod_bias 1
+/* Constants */
+#define GL_MAX_TEXTURE_LOD_BIAS_EXT                        0x84FD
+#define GL_TEXTURE_FILTER_CONTROL_EXT                      0x8500
+#define GL_TEXTURE_LOD_BIAS_EXT                            0x8501
+#endif 
+
+/* GL_EXT_texture_filter_anisotropic */
+
+#ifndef GL_EXT_texture_filter_anisotropic
+#define GL_EXT_texture_filter_anisotropic 1
+#define __GLEE_GL_EXT_texture_filter_anisotropic 1
+/* Constants */
+#define GL_TEXTURE_MAX_ANISOTROPY_EXT                      0x84FE
+#define GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT                  0x84FF
+#endif 
+
+/* GL_EXT_vertex_weighting */
+
+#ifndef GL_EXT_vertex_weighting
+#define GL_EXT_vertex_weighting 1
+#define __GLEE_GL_EXT_vertex_weighting 1
+/* Constants */
+#define GL_MODELVIEW0_STACK_DEPTH_EXT                      GL_MODELVIEW_STACK_DEPTH
+#define GL_MODELVIEW1_STACK_DEPTH_EXT                      0x8502
+#define GL_MODELVIEW0_MATRIX_EXT                           GL_MODELVIEW_MATRIX
+#define GL_MODELVIEW1_MATRIX_EXT                           0x8506
+#define GL_VERTEX_WEIGHTING_EXT                            0x8509
+#define GL_MODELVIEW0_EXT                                  GL_MODELVIEW
+#define GL_MODELVIEW1_EXT                                  0x850A
+#define GL_CURRENT_VERTEX_WEIGHT_EXT                       0x850B
+#define GL_VERTEX_WEIGHT_ARRAY_EXT                         0x850C
+#define GL_VERTEX_WEIGHT_ARRAY_SIZE_EXT                    0x850D
+#define GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT                    0x850E
+#define GL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT                  0x850F
+#define GL_VERTEX_WEIGHT_ARRAY_POINTER_EXT                 0x8510
+#ifndef GLEE_H_DEFINED_glVertexWeightfEXT
+#define GLEE_H_DEFINED_glVertexWeightfEXT
+  typedef void (APIENTRYP GLEEPFNGLVERTEXWEIGHTFEXTPROC) (GLfloat  weight);
+  GLEE_EXTERN GLEEPFNGLVERTEXWEIGHTFEXTPROC GLeeFuncPtr_glVertexWeightfEXT;
+  #define glVertexWeightfEXT GLeeFuncPtr_glVertexWeightfEXT
+#endif
+#ifndef GLEE_H_DEFINED_glVertexWeightfvEXT
+#define GLEE_H_DEFINED_glVertexWeightfvEXT
+  typedef void (APIENTRYP GLEEPFNGLVERTEXWEIGHTFVEXTPROC) (const GLfloat * weight);
+  GLEE_EXTERN GLEEPFNGLVERTEXWEIGHTFVEXTPROC GLeeFuncPtr_glVertexWeightfvEXT;
+  #define glVertexWeightfvEXT GLeeFuncPtr_glVertexWeightfvEXT
+#endif
+#ifndef GLEE_H_DEFINED_glVertexWeightPointerEXT
+#define GLEE_H_DEFINED_glVertexWeightPointerEXT
+  typedef void (APIENTRYP GLEEPFNGLVERTEXWEIGHTPOINTEREXTPROC) (GLsizei  size, GLenum  type, GLsizei  stride, const GLvoid * pointer);
+  GLEE_EXTERN GLEEPFNGLVERTEXWEIGHTPOINTEREXTPROC GLeeFuncPtr_glVertexWeightPointerEXT;
+  #define glVertexWeightPointerEXT GLeeFuncPtr_glVertexWeightPointerEXT
+#endif
+#endif 
+
+/* GL_NV_light_max_exponent */
+
+#ifndef GL_NV_light_max_exponent
+#define GL_NV_light_max_exponent 1
+#define __GLEE_GL_NV_light_max_exponent 1
+/* Constants */
+#define GL_MAX_SHININESS_NV                                0x8504
+#define GL_MAX_SPOT_EXPONENT_NV                            0x8505
+#endif 
+
+/* GL_NV_vertex_array_range */
+
+#ifndef GL_NV_vertex_array_range
+#define GL_NV_vertex_array_range 1
+#define __GLEE_GL_NV_vertex_array_range 1
+/* Constants */
+#define GL_VERTEX_ARRAY_RANGE_NV                           0x851D
+#define GL_VERTEX_ARRAY_RANGE_LENGTH_NV                    0x851E
+#define GL_VERTEX_ARRAY_RANGE_VALID_NV                     0x851F
+#define GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV               0x8520
+#define GL_VERTEX_ARRAY_RANGE_POINTER_NV                   0x8521
+#ifndef GLEE_H_DEFINED_glFlushVertexArrayRangeNV
+#define GLEE_H_DEFINED_glFlushVertexArrayRangeNV
+  typedef void (APIENTRYP GLEEPFNGLFLUSHVERTEXARRAYRANGENVPROC) ();
+  GLEE_EXTERN GLEEPFNGLFLUSHVERTEXARRAYRANGENVPROC GLeeFuncPtr_glFlushVertexArrayRangeNV;
+  #define glFlushVertexArrayRangeNV GLeeFuncPtr_glFlushVertexArrayRangeNV
+#endif
+#ifndef GLEE_H_DEFINED_glVertexArrayRangeNV
+#define GLEE_H_DEFINED_glVertexArrayRangeNV
+  typedef void (APIENTRYP GLEEPFNGLVERTEXARRAYRANGENVPROC) (GLsizei  length, const GLvoid * pointer);
+  GLEE_EXTERN GLEEPFNGLVERTEXARRAYRANGENVPROC GLeeFuncPtr_glVertexArrayRangeNV;
+  #define glVertexArrayRangeNV GLeeFuncPtr_glVertexArrayRangeNV
+#endif
+#endif 
+
+/* GL_NV_register_combiners */
+
+#ifndef GL_NV_register_combiners
+#define GL_NV_register_combiners 1
+#define __GLEE_GL_NV_register_combiners 1
+/* Constants */
+#define GL_REGISTER_COMBINERS_NV                           0x8522
+#define GL_VARIABLE_A_NV                                   0x8523
+#define GL_VARIABLE_B_NV                                   0x8524
+#define GL_VARIABLE_C_NV                                   0x8525
+#define GL_VARIABLE_D_NV                                   0x8526
+#define GL_VARIABLE_E_NV                                   0x8527
+#define GL_VARIABLE_F_NV                                   0x8528
+#define GL_VARIABLE_G_NV                                   0x8529
+#define GL_CONSTANT_COLOR0_NV                              0x852A
+#define GL_CONSTANT_COLOR1_NV                              0x852B
+#define GL_PRIMARY_COLOR_NV                                0x852C
+#define GL_SECONDARY_COLOR_NV                              0x852D
+#define GL_SPARE0_NV                                       0x852E
+#define GL_SPARE1_NV                                       0x852F
+#define GL_DISCARD_NV                                      0x8530
+#define GL_E_TIMES_F_NV                                    0x8531
+#define GL_SPARE0_PLUS_SECONDARY_COLOR_NV                  0x8532
+#define GL_UNSIGNED_IDENTITY_NV                            0x8536
+#define GL_UNSIGNED_INVERT_NV                              0x8537
+#define GL_EXPAND_NORMAL_NV                                0x8538
+#define GL_EXPAND_NEGATE_NV                                0x8539
+#define GL_HALF_BIAS_NORMAL_NV                             0x853A
+#define GL_HALF_BIAS_NEGATE_NV                             0x853B
+#define GL_SIGNED_IDENTITY_NV                              0x853C
+#define GL_SIGNED_NEGATE_NV                                0x853D
+#define GL_SCALE_BY_TWO_NV                                 0x853E
+#define GL_SCALE_BY_FOUR_NV                                0x853F
+#define GL_SCALE_BY_ONE_HALF_NV                            0x8540
+#define GL_BIAS_BY_NEGATIVE_ONE_HALF_NV                    0x8541
+#define GL_COMBINER_INPUT_NV                               0x8542
+#define GL_COMBINER_MAPPING_NV                             0x8543
+#define GL_COMBINER_COMPONENT_USAGE_NV                     0x8544
+#define GL_COMBINER_AB_DOT_PRODUCT_NV                      0x8545
+#define GL_COMBINER_CD_DOT_PRODUCT_NV                      0x8546
+#define GL_COMBINER_MUX_SUM_NV                             0x8547
+#define GL_COMBINER_SCALE_NV                               0x8548
+#define GL_COMBINER_BIAS_NV                                0x8549
+#define GL_COMBINER_AB_OUTPUT_NV                           0x854A
+#define GL_COMBINER_CD_OUTPUT_NV                           0x854B
+#define GL_COMBINER_SUM_OUTPUT_NV                          0x854C
+#define GL_MAX_GENERAL_COMBINERS_NV                        0x854D
+#define GL_NUM_GENERAL_COMBINERS_NV                        0x854E
+#define GL_COLOR_SUM_CLAMP_NV                              0x854F
+#define GL_COMBINER0_NV                                    0x8550
+#define GL_COMBINER1_NV                                    0x8551
+#define GL_COMBINER2_NV                                    0x8552
+#define GL_COMBINER3_NV                                    0x8553
+#define GL_COMBINER4_NV                                    0x8554
+#define GL_COMBINER5_NV                                    0x8555
+#define GL_COMBINER6_NV                                    0x8556
+#define GL_COMBINER7_NV                                    0x8557
+#ifndef GLEE_H_DEFINED_glCombinerParameterfvNV
+#define GLEE_H_DEFINED_glCombinerParameterfvNV
+  typedef void (APIENTRYP GLEEPFNGLCOMBINERPARAMETERFVNVPROC) (GLenum  pname, const GLfloat * params);
+  GLEE_EXTERN GLEEPFNGLCOMBINERPARAMETERFVNVPROC GLeeFuncPtr_glCombinerParameterfvNV;
+  #define glCombinerParameterfvNV GLeeFuncPtr_glCombinerParameterfvNV
+#endif
+#ifndef GLEE_H_DEFINED_glCombinerParameterfNV
+#define GLEE_H_DEFINED_glCombinerParameterfNV
+  typedef void (APIENTRYP GLEEPFNGLCOMBINERPARAMETERFNVPROC) (GLenum  pname, GLfloat  param);
+  GLEE_EXTERN GLEEPFNGLCOMBINERPARAMETERFNVPROC GLeeFuncPtr_glCombinerParameterfNV;
+  #define glCombinerParameterfNV GLeeFuncPtr_glCombinerParameterfNV
+#endif
+#ifndef GLEE_H_DEFINED_glCombinerParameterivNV
+#define GLEE_H_DEFINED_glCombinerParameterivNV
+  typedef void (APIENTRYP GLEEPFNGLCOMBINERPARAMETERIVNVPROC) (GLenum  pname, const GLint * params);
+  GLEE_EXTERN GLEEPFNGLCOMBINERPARAMETERIVNVPROC GLeeFuncPtr_glCombinerParameterivNV;
+  #define glCombinerParameterivNV GLeeFuncPtr_glCombinerParameterivNV
+#endif
+#ifndef GLEE_H_DEFINED_glCombinerParameteriNV
+#define GLEE_H_DEFINED_glCombinerParameteriNV
+  typedef void (APIENTRYP GLEEPFNGLCOMBINERPARAMETERINVPROC) (GLenum  pname, GLint  param);
+  GLEE_EXTERN GLEEPFNGLCOMBINERPARAMETERINVPROC GLeeFuncPtr_glCombinerParameteriNV;
+  #define glCombinerParameteriNV GLeeFuncPtr_glCombinerParameteriNV
+#endif
+#ifndef GLEE_H_DEFINED_glCombinerInputNV
+#define GLEE_H_DEFINED_glCombinerInputNV
+  typedef void (APIENTRYP GLEEPFNGLCOMBINERINPUTNVPROC) (GLenum  stage, GLenum  portion, GLenum  variable, GLenum  input, GLenum  mapping, GLenum  componentUsage);
+  GLEE_EXTERN GLEEPFNGLCOMBINERINPUTNVPROC GLeeFuncPtr_glCombinerInputNV;
+  #define glCombinerInputNV GLeeFuncPtr_glCombinerInputNV
+#endif
+#ifndef GLEE_H_DEFINED_glCombinerOutputNV
+#define GLEE_H_DEFINED_glCombinerOutputNV
+  typedef void (APIENTRYP GLEEPFNGLCOMBINEROUTPUTNVPROC) (GLenum  stage, GLenum  portion, GLenum  abOutput, GLenum  cdOutput, GLenum  sumOutput, GLenum  scale, GLenum  bias, GLboolean  abDotProduct, GLboolean  cdDotProduct, GLboolean  muxSum);
+  GLEE_EXTERN GLEEPFNGLCOMBINEROUTPUTNVPROC GLeeFuncPtr_glCombinerOutputNV;
+  #define glCombinerOutputNV GLeeFuncPtr_glCombinerOutputNV
+#endif
+#ifndef GLEE_H_DEFINED_glFinalCombinerInputNV
+#define GLEE_H_DEFINED_glFinalCombinerInputNV
+  typedef void (APIENTRYP GLEEPFNGLFINALCOMBINERINPUTNVPROC) (GLenum  variable, GLenum  input, GLenum  mapping, GLenum  componentUsage);
+  GLEE_EXTERN GLEEPFNGLFINALCOMBINERINPUTNVPROC GLeeFuncPtr_glFinalCombinerInputNV;
+  #define glFinalCombinerInputNV GLeeFuncPtr_glFinalCombinerInputNV
+#endif
+#ifndef GLEE_H_DEFINED_glGetCombinerInputParameterfvNV
+#define GLEE_H_DEFINED_glGetCombinerInputParameterfvNV
+  typedef void (APIENTRYP GLEEPFNGLGETCOMBINERINPUTPARAMETERFVNVPROC) (GLenum  stage, GLenum  portion, GLenum  variable, GLenum  pname, GLfloat * params);
+  GLEE_EXTERN GLEEPFNGLGETCOMBINERINPUTPARAMETERFVNVPROC GLeeFuncPtr_glGetCombinerInputParameterfvNV;
+  #define glGetCombinerInputParameterfvNV GLeeFuncPtr_glGetCombinerInputParameterfvNV
+#endif
+#ifndef GLEE_H_DEFINED_glGetCombinerInputParameterivNV
+#define GLEE_H_DEFINED_glGetCombinerInputParameterivNV
+  typedef void (APIENTRYP GLEEPFNGLGETCOMBINERINPUTPARAMETERIVNVPROC) (GLenum  stage, GLenum  portion, GLenum  variable, GLenum  pname, GLint * params);
+  GLEE_EXTERN GLEEPFNGLGETCOMBINERINPUTPARAMETERIVNVPROC GLeeFuncPtr_glGetCombinerInputParameterivNV;
+  #define glGetCombinerInputParameterivNV GLeeFuncPtr_glGetCombinerInputParameterivNV
+#endif
+#ifndef GLEE_H_DEFINED_glGetCombinerOutputParameterfvNV
+#define GLEE_H_DEFINED_glGetCombinerOutputParameterfvNV
+  typedef void (APIENTRYP GLEEPFNGLGETCOMBINEROUTPUTPARAMETERFVNVPROC) (GLenum  stage, GLenum  portion, GLenum  pname, GLfloat * params);
+  GLEE_EXTERN GLEEPFNGLGETCOMBINEROUTPUTPARAMETERFVNVPROC GLeeFuncPtr_glGetCombinerOutputParameterfvNV;
+  #define glGetCombinerOutputParameterfvNV GLeeFuncPtr_glGetCombinerOutputParameterfvNV
+#endif
+#ifndef GLEE_H_DEFINED_glGetCombinerOutputParameterivNV
+#define GLEE_H_DEFINED_glGetCombinerOutputParameterivNV
+  typedef void (APIENTRYP GLEEPFNGLGETCOMBINEROUTPUTPARAMETERIVNVPROC) (GLenum  stage, GLenum  portion, GLenum  pname, GLint * params);
+  GLEE_EXTERN GLEEPFNGLGETCOMBINEROUTPUTPARAMETERIVNVPROC GLeeFuncPtr_glGetCombinerOutputParameterivNV;
+  #define glGetCombinerOutputParameterivNV GLeeFuncPtr_glGetCombinerOutputParameterivNV
+#endif
+#ifndef GLEE_H_DEFINED_glGetFinalCombinerInputParameterfvNV
+#define GLEE_H_DEFINED_glGetFinalCombinerInputParameterfvNV
+  typedef void (APIENTRYP GLEEPFNGLGETFINALCOMBINERINPUTPARAMETERFVNVPROC) (GLenum  variable, GLenum  pname, GLfloat * params);
+  GLEE_EXTERN GLEEPFNGLGETFINALCOMBINERINPUTPARAMETERFVNVPROC GLeeFuncPtr_glGetFinalCombinerInputParameterfvNV;
+  #define glGetFinalCombinerInputParameterfvNV GLeeFuncPtr_glGetFinalCombinerInputParameterfvNV
+#endif
+#ifndef GLEE_H_DEFINED_glGetFinalCombinerInputParameterivNV
+#define GLEE_H_DEFINED_glGetFinalCombinerInputParameterivNV
+  typedef void (APIENTRYP GLEEPFNGLGETFINALCOMBINERINPUTPARAMETERIVNVPROC) (GLenum  variable, GLenum  pname, GLint * params);
+  GLEE_EXTERN GLEEPFNGLGETFINALCOMBINERINPUTPARAMETERIVNVPROC GLeeFuncPtr_glGetFinalCombinerInputParameterivNV;
+  #define glGetFinalCombinerInputParameterivNV GLeeFuncPtr_glGetFinalCombinerInputParameterivNV
+#endif
+#endif 
+
+/* GL_NV_fog_distance */
+
+#ifndef GL_NV_fog_distance
+#define GL_NV_fog_distance 1
+#define __GLEE_GL_NV_fog_distance 1
+/* Constants */
+#define GL_FOG_DISTANCE_MODE_NV                            0x855A
+#define GL_EYE_RADIAL_NV                                   0x855B
+#define GL_EYE_PLANE_ABSOLUTE_NV                           0x855C
+#endif 
+
+/* GL_NV_texgen_emboss */
+
+#ifndef GL_NV_texgen_emboss
+#define GL_NV_texgen_emboss 1
+#define __GLEE_GL_NV_texgen_emboss 1
+/* Constants */
+#define GL_EMBOSS_LIGHT_NV                                 0x855D
+#define GL_EMBOSS_CONSTANT_NV                              0x855E
+#define GL_EMBOSS_MAP_NV                                   0x855F
+#endif 
+
+/* GL_NV_blend_square */
+
+#ifndef GL_NV_blend_square
+#define GL_NV_blend_square 1
+#define __GLEE_GL_NV_blend_square 1
+/* Constants */
+#endif 
+
+/* GL_NV_texture_env_combine4 */
+
+#ifndef GL_NV_texture_env_combine4
+#define GL_NV_texture_env_combine4 1
+#define __GLEE_GL_NV_texture_env_combine4 1
+/* Constants */
+#define GL_COMBINE4_NV                                     0x8503
+#define GL_SOURCE3_RGB_NV                                  0x8583
+#define GL_SOURCE3_ALPHA_NV                                0x858B
+#define GL_OPERAND3_RGB_NV                                 0x8593
+#define GL_OPERAND3_ALPHA_NV                               0x859B
+#endif 
+
+/* GL_MESA_resize_buffers */
+
+#ifndef GL_MESA_resize_buffers
+#define GL_MESA_resize_buffers 1
+#define __GLEE_GL_MESA_resize_buffers 1
+/* Constants */
+#ifndef GLEE_H_DEFINED_glResizeBuffersMESA
+#define GLEE_H_DEFINED_glResizeBuffersMESA
+  typedef void (APIENTRYP GLEEPFNGLRESIZEBUFFERSMESAPROC) ();
+  GLEE_EXTERN GLEEPFNGLRESIZEBUFFERSMESAPROC GLeeFuncPtr_glResizeBuffersMESA;
+  #define glResizeBuffersMESA GLeeFuncPtr_glResizeBuffersMESA
+#endif
+#endif 
+
+/* GL_MESA_window_pos */
+
+#ifndef GL_MESA_window_pos
+#define GL_MESA_window_pos 1
+#define __GLEE_GL_MESA_window_pos 1
+/* Constants */
+#ifndef GLEE_H_DEFINED_glWindowPos2dMESA
+#define GLEE_H_DEFINED_glWindowPos2dMESA
+  typedef void (APIENTRYP GLEEPFNGLWINDOWPOS2DMESAPROC) (GLdouble  x, GLdouble  y);
+  GLEE_EXTERN GLEEPFNGLWINDOWPOS2DMESAPROC GLeeFuncPtr_glWindowPos2dMESA;
+  #define glWindowPos2dMESA GLeeFuncPtr_glWindowPos2dMESA
+#endif
+#ifndef GLEE_H_DEFINED_glWindowPos2dvMESA
+#define GLEE_H_DEFINED_glWindowPos2dvMESA
+  typedef void (APIENTRYP GLEEPFNGLWINDOWPOS2DVMESAPROC) (const GLdouble * v);
+  GLEE_EXTERN GLEEPFNGLWINDOWPOS2DVMESAPROC GLeeFuncPtr_glWindowPos2dvMESA;
+  #define glWindowPos2dvMESA GLeeFuncPtr_glWindowPos2dvMESA
+#endif
+#ifndef GLEE_H_DEFINED_glWindowPos2fMESA
+#define GLEE_H_DEFINED_glWindowPos2fMESA
+  typedef void (APIENTRYP GLEEPFNGLWINDOWPOS2FMESAPROC) (GLfloat  x, GLfloat  y);
+  GLEE_EXTERN GLEEPFNGLWINDOWPOS2FMESAPROC GLeeFuncPtr_glWindowPos2fMESA;
+  #define glWindowPos2fMESA GLeeFuncPtr_glWindowPos2fMESA
+#endif
+#ifndef GLEE_H_DEFINED_glWindowPos2fvMESA
+#define GLEE_H_DEFINED_glWindowPos2fvMESA
+  typedef void (APIENTRYP GLEEPFNGLWINDOWPOS2FVMESAPROC) (const GLfloat * v);
+  GLEE_EXTERN GLEEPFNGLWINDOWPOS2FVMESAPROC GLeeFuncPtr_glWindowPos2fvMESA;
+  #define glWindowPos2fvMESA GLeeFuncPtr_glWindowPos2fvMESA
+#endif
+#ifndef GLEE_H_DEFINED_glWindowPos2iMESA
+#define GLEE_H_DEFINED_glWindowPos2iMESA
+  typedef void (APIENTRYP GLEEPFNGLWINDOWPOS2IMESAPROC) (GLint  x, GLint  y);
+  GLEE_EXTERN GLEEPFNGLWINDOWPOS2IMESAPROC GLeeFuncPtr_glWindowPos2iMESA;
+  #define glWindowPos2iMESA GLeeFuncPtr_glWindowPos2iMESA
+#endif
+#ifndef GLEE_H_DEFINED_glWindowPos2ivMESA
+#define GLEE_H_DEFINED_glWindowPos2ivMESA
+  typedef void (APIENTRYP GLEEPFNGLWINDOWPOS2IVMESAPROC) (const GLint * v);
+  GLEE_EXTERN GLEEPFNGLWINDOWPOS2IVMESAPROC GLeeFuncPtr_glWindowPos2ivMESA;
+  #define glWindowPos2ivMESA GLeeFuncPtr_glWindowPos2ivMESA
+#endif
+#ifndef GLEE_H_DEFINED_glWindowPos2sMESA
+#define GLEE_H_DEFINED_glWindowPos2sMESA
+  typedef void (APIENTRYP GLEEPFNGLWINDOWPOS2SMESAPROC) (GLshort  x, GLshort  y);
+  GLEE_EXTERN GLEEPFNGLWINDOWPOS2SMESAPROC GLeeFuncPtr_glWindowPos2sMESA;
+  #define glWindowPos2sMESA GLeeFuncPtr_glWindowPos2sMESA
+#endif
+#ifndef GLEE_H_DEFINED_glWindowPos2svMESA
+#define GLEE_H_DEFINED_glWindowPos2svMESA
+  typedef void (APIENTRYP GLEEPFNGLWINDOWPOS2SVMESAPROC) (const GLshort * v);
+  GLEE_EXTERN GLEEPFNGLWINDOWPOS2SVMESAPROC GLeeFuncPtr_glWindowPos2svMESA;
+  #define glWindowPos2svMESA GLeeFuncPtr_glWindowPos2svMESA
+#endif
+#ifndef GLEE_H_DEFINED_glWindowPos3dMESA
+#define GLEE_H_DEFINED_glWindowPos3dMESA
+  typedef void (APIENTRYP GLEEPFNGLWINDOWPOS3DMESAPROC) (GLdouble  x, GLdouble  y, GLdouble  z);
+  GLEE_EXTERN GLEEPFNGLWINDOWPOS3DMESAPROC GLeeFuncPtr_glWindowPos3dMESA;
+  #define glWindowPos3dMESA GLeeFuncPtr_glWindowPos3dMESA
+#endif
+#ifndef GLEE_H_DEFINED_glWindowPos3dvMESA
+#define GLEE_H_DEFINED_glWindowPos3dvMESA
+  typedef void (APIENTRYP GLEEPFNGLWINDOWPOS3DVMESAPROC) (const GLdouble * v);
+  GLEE_EXTERN GLEEPFNGLWINDOWPOS3DVMESAPROC GLeeFuncPtr_glWindowPos3dvMESA;
+  #define glWindowPos3dvMESA GLeeFuncPtr_glWindowPos3dvMESA
+#endif
+#ifndef GLEE_H_DEFINED_glWindowPos3fMESA
+#define GLEE_H_DEFINED_glWindowPos3fMESA
+  typedef void (APIENTRYP GLEEPFNGLWINDOWPOS3FMESAPROC) (GLfloat  x, GLfloat  y, GLfloat  z);
+  GLEE_EXTERN GLEEPFNGLWINDOWPOS3FMESAPROC GLeeFuncPtr_glWindowPos3fMESA;
+  #define glWindowPos3fMESA GLeeFuncPtr_glWindowPos3fMESA
+#endif
+#ifndef GLEE_H_DEFINED_glWindowPos3fvMESA
+#define GLEE_H_DEFINED_glWindowPos3fvMESA
+  typedef void (APIENTRYP GLEEPFNGLWINDOWPOS3FVMESAPROC) (const GLfloat * v);
+  GLEE_EXTERN GLEEPFNGLWINDOWPOS3FVMESAPROC GLeeFuncPtr_glWindowPos3fvMESA;
+  #define glWindowPos3fvMESA GLeeFuncPtr_glWindowPos3fvMESA
+#endif
+#ifndef GLEE_H_DEFINED_glWindowPos3iMESA
+#define GLEE_H_DEFINED_glWindowPos3iMESA
+  typedef void (APIENTRYP GLEEPFNGLWINDOWPOS3IMESAPROC) (GLint  x, GLint  y, GLint  z);
+  GLEE_EXTERN GLEEPFNGLWINDOWPOS3IMESAPROC GLeeFuncPtr_glWindowPos3iMESA;
+  #define glWindowPos3iMESA GLeeFuncPtr_glWindowPos3iMESA
+#endif
+#ifndef GLEE_H_DEFINED_glWindowPos3ivMESA
+#define GLEE_H_DEFINED_glWindowPos3ivMESA
+  typedef void (APIENTRYP GLEEPFNGLWINDOWPOS3IVMESAPROC) (const GLint * v);
+  GLEE_EXTERN GLEEPFNGLWINDOWPOS3IVMESAPROC GLeeFuncPtr_glWindowPos3ivMESA;
+  #define glWindowPos3ivMESA GLeeFuncPtr_glWindowPos3ivMESA
+#endif
+#ifndef GLEE_H_DEFINED_glWindowPos3sMESA
+#define GLEE_H_DEFINED_glWindowPos3sMESA
+  typedef void (APIENTRYP GLEEPFNGLWINDOWPOS3SMESAPROC) (GLshort  x, GLshort  y, GLshort  z);
+  GLEE_EXTERN GLEEPFNGLWINDOWPOS3SMESAPROC GLeeFuncPtr_glWindowPos3sMESA;
+  #define glWindowPos3sMESA GLeeFuncPtr_glWindowPos3sMESA
+#endif
+#ifndef GLEE_H_DEFINED_glWindowPos3svMESA
+#define GLEE_H_DEFINED_glWindowPos3svMESA
+  typedef void (APIENTRYP GLEEPFNGLWINDOWPOS3SVMESAPROC) (const GLshort * v);
+  GLEE_EXTERN GLEEPFNGLWINDOWPOS3SVMESAPROC GLeeFuncPtr_glWindowPos3svMESA;
+  #define glWindowPos3svMESA GLeeFuncPtr_glWindowPos3svMESA
+#endif
+#ifndef GLEE_H_DEFINED_glWindowPos4dMESA
+#define GLEE_H_DEFINED_glWindowPos4dMESA
+  typedef void (APIENTRYP GLEEPFNGLWINDOWPOS4DMESAPROC) (GLdouble  x, GLdouble  y, GLdouble  z, GLdouble  w);
+  GLEE_EXTERN GLEEPFNGLWINDOWPOS4DMESAPROC GLeeFuncPtr_glWindowPos4dMESA;
+  #define glWindowPos4dMESA GLeeFuncPtr_glWindowPos4dMESA
+#endif
+#ifndef GLEE_H_DEFINED_glWindowPos4dvMESA
+#define GLEE_H_DEFINED_glWindowPos4dvMESA
+  typedef void (APIENTRYP GLEEPFNGLWINDOWPOS4DVMESAPROC) (const GLdouble * v);
+  GLEE_EXTERN GLEEPFNGLWINDOWPOS4DVMESAPROC GLeeFuncPtr_glWindowPos4dvMESA;
+  #define glWindowPos4dvMESA GLeeFuncPtr_glWindowPos4dvMESA
+#endif
+#ifndef GLEE_H_DEFINED_glWindowPos4fMESA
+#define GLEE_H_DEFINED_glWindowPos4fMESA
+  typedef void (APIENTRYP GLEEPFNGLWINDOWPOS4FMESAPROC) (GLfloat  x, GLfloat  y, GLfloat  z, GLfloat  w);
+  GLEE_EXTERN GLEEPFNGLWINDOWPOS4FMESAPROC GLeeFuncPtr_glWindowPos4fMESA;
+  #define glWindowPos4fMESA GLeeFuncPtr_glWindowPos4fMESA
+#endif
+#ifndef GLEE_H_DEFINED_glWindowPos4fvMESA
+#define GLEE_H_DEFINED_glWindowPos4fvMESA
+  typedef void (APIENTRYP GLEEPFNGLWINDOWPOS4FVMESAPROC) (const GLfloat * v);
+  GLEE_EXTERN GLEEPFNGLWINDOWPOS4FVMESAPROC GLeeFuncPtr_glWindowPos4fvMESA;
+  #define glWindowPos4fvMESA GLeeFuncPtr_glWindowPos4fvMESA
+#endif
+#ifndef GLEE_H_DEFINED_glWindowPos4iMESA
+#define GLEE_H_DEFINED_glWindowPos4iMESA
+  typedef void (APIENTRYP GLEEPFNGLWINDOWPOS4IMESAPROC) (GLint  x, GLint  y, GLint  z, GLint  w);
+  GLEE_EXTERN GLEEPFNGLWINDOWPOS4IMESAPROC GLeeFuncPtr_glWindowPos4iMESA;
+  #define glWindowPos4iMESA GLeeFuncPtr_glWindowPos4iMESA
+#endif
+#ifndef GLEE_H_DEFINED_glWindowPos4ivMESA
+#define GLEE_H_DEFINED_glWindowPos4ivMESA
+  typedef void (APIENTRYP GLEEPFNGLWINDOWPOS4IVMESAPROC) (const GLint * v);
+  GLEE_EXTERN GLEEPFNGLWINDOWPOS4IVMESAPROC GLeeFuncPtr_glWindowPos4ivMESA;
+  #define glWindowPos4ivMESA GLeeFuncPtr_glWindowPos4ivMESA
+#endif
+#ifndef GLEE_H_DEFINED_glWindowPos4sMESA
+#define GLEE_H_DEFINED_glWindowPos4sMESA
+  typedef void (APIENTRYP GLEEPFNGLWINDOWPOS4SMESAPROC) (GLshort  x, GLshort  y, GLshort  z, GLshort  w);
+  GLEE_EXTERN GLEEPFNGLWINDOWPOS4SMESAPROC GLeeFuncPtr_glWindowPos4sMESA;
+  #define glWindowPos4sMESA GLeeFuncPtr_glWindowPos4sMESA
+#endif
+#ifndef GLEE_H_DEFINED_glWindowPos4svMESA
+#define GLEE_H_DEFINED_glWindowPos4svMESA
+  typedef void (APIENTRYP GLEEPFNGLWINDOWPOS4SVMESAPROC) (const GLshort * v);
+  GLEE_EXTERN GLEEPFNGLWINDOWPOS4SVMESAPROC GLeeFuncPtr_glWindowPos4svMESA;
+  #define glWindowPos4svMESA GLeeFuncPtr_glWindowPos4svMESA
+#endif
+#endif 
+
+/* GL_EXT_texture_compression_s3tc */
+
+#ifndef GL_EXT_texture_compression_s3tc
+#define GL_EXT_texture_compression_s3tc 1
+#define __GLEE_GL_EXT_texture_compression_s3tc 1
+/* Constants */
+#define GL_COMPRESSED_RGB_S3TC_DXT1_EXT                    0x83F0
+#define GL_COMPRESSED_RGBA_S3TC_DXT1_EXT                   0x83F1
+#define GL_COMPRESSED_RGBA_S3TC_DXT3_EXT                   0x83F2
+#define GL_COMPRESSED_RGBA_S3TC_DXT5_EXT                   0x83F3
+#endif 
+
+/* GL_IBM_cull_vertex */
+
+#ifndef GL_IBM_cull_vertex
+#define GL_IBM_cull_vertex 1
+#define __GLEE_GL_IBM_cull_vertex 1
+/* Constants */
+#define GL_CULL_VERTEX_IBM                                 103050
+#endif 
+
+/* GL_IBM_multimode_draw_arrays */
+
+#ifndef GL_IBM_multimode_draw_arrays
+#define GL_IBM_multimode_draw_arrays 1
+#define __GLEE_GL_IBM_multimode_draw_arrays 1
+/* Constants */
+#ifndef GLEE_H_DEFINED_glMultiModeDrawArraysIBM
+#define GLEE_H_DEFINED_glMultiModeDrawArraysIBM
+  typedef void (APIENTRYP GLEEPFNGLMULTIMODEDRAWARRAYSIBMPROC) (const GLenum * mode, const GLint * first, const GLsizei * count, GLsizei  primcount, GLint  modestride);
+  GLEE_EXTERN GLEEPFNGLMULTIMODEDRAWARRAYSIBMPROC GLeeFuncPtr_glMultiModeDrawArraysIBM;
+  #define glMultiModeDrawArraysIBM GLeeFuncPtr_glMultiModeDrawArraysIBM
+#endif
+#ifndef GLEE_H_DEFINED_glMultiModeDrawElementsIBM
+#define GLEE_H_DEFINED_glMultiModeDrawElementsIBM
+  typedef void (APIENTRYP GLEEPFNGLMULTIMODEDRAWELEMENTSIBMPROC) (const GLenum * mode, const GLsizei * count, GLenum  type, const GLvoid* const * indices, GLsizei  primcount, GLint  modestride);
+  GLEE_EXTERN GLEEPFNGLMULTIMODEDRAWELEMENTSIBMPROC GLeeFuncPtr_glMultiModeDrawElementsIBM;
+  #define glMultiModeDrawElementsIBM GLeeFuncPtr_glMultiModeDrawElementsIBM
+#endif
+#endif 
+
+/* GL_IBM_vertex_array_lists */
+
+#ifndef GL_IBM_vertex_array_lists
+#define GL_IBM_vertex_array_lists 1
+#define __GLEE_GL_IBM_vertex_array_lists 1
+/* Constants */
+#define GL_VERTEX_ARRAY_LIST_IBM                           103070
+#define GL_NORMAL_ARRAY_LIST_IBM                           103071
+#define GL_COLOR_ARRAY_LIST_IBM                            103072
+#define GL_INDEX_ARRAY_LIST_IBM                            103073
+#define GL_TEXTURE_COORD_ARRAY_LIST_IBM                    103074
+#define GL_EDGE_FLAG_ARRAY_LIST_IBM                        103075
+#define GL_FOG_COORDINATE_ARRAY_LIST_IBM                   103076
+#define GL_SECONDARY_COLOR_ARRAY_LIST_IBM                  103077
+#define GL_VERTEX_ARRAY_LIST_STRIDE_IBM                    103080
+#define GL_NORMAL_ARRAY_LIST_STRIDE_IBM                    103081
+#define GL_COLOR_ARRAY_LIST_STRIDE_IBM                     103082
+#define GL_INDEX_ARRAY_LIST_STRIDE_IBM                     103083
+#define GL_TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM             103084
+#define GL_EDGE_FLAG_ARRAY_LIST_STRIDE_IBM                 103085
+#define GL_FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM            103086
+#define GL_SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM           103087
+#ifndef GLEE_H_DEFINED_glColorPointerListIBM
+#define GLEE_H_DEFINED_glColorPointerListIBM
+  typedef void (APIENTRYP GLEEPFNGLCOLORPOINTERLISTIBMPROC) (GLint  size, GLenum  type, GLint  stride, const GLvoid* * pointer, GLint  ptrstride);
+  GLEE_EXTERN GLEEPFNGLCOLORPOINTERLISTIBMPROC GLeeFuncPtr_glColorPointerListIBM;
+  #define glColorPointerListIBM GLeeFuncPtr_glColorPointerListIBM
+#endif
+#ifndef GLEE_H_DEFINED_glSecondaryColorPointerListIBM
+#define GLEE_H_DEFINED_glSecondaryColorPointerListIBM
+  typedef void (APIENTRYP GLEEPFNGLSECONDARYCOLORPOINTERLISTIBMPROC) (GLint  size, GLenum  type, GLint  stride, const GLvoid* * pointer, GLint  ptrstride);
+  GLEE_EXTERN GLEEPFNGLSECONDARYCOLORPOINTERLISTIBMPROC GLeeFuncPtr_glSecondaryColorPointerListIBM;
+  #define glSecondaryColorPointerListIBM GLeeFuncPtr_glSecondaryColorPointerListIBM
+#endif
+#ifndef GLEE_H_DEFINED_glEdgeFlagPointerListIBM
+#define GLEE_H_DEFINED_glEdgeFlagPointerListIBM
+  typedef void (APIENTRYP GLEEPFNGLEDGEFLAGPOINTERLISTIBMPROC) (GLint  stride, const GLboolean* * pointer, GLint  ptrstride);
+  GLEE_EXTERN GLEEPFNGLEDGEFLAGPOINTERLISTIBMPROC GLeeFuncPtr_glEdgeFlagPointerListIBM;
+  #define glEdgeFlagPointerListIBM GLeeFuncPtr_glEdgeFlagPointerListIBM
+#endif
+#ifndef GLEE_H_DEFINED_glFogCoordPointerListIBM
+#define GLEE_H_DEFINED_glFogCoordPointerListIBM
+  typedef void (APIENTRYP GLEEPFNGLFOGCOORDPOINTERLISTIBMPROC) (GLenum  type, GLint  stride, const GLvoid* * pointer, GLint  ptrstride);
+  GLEE_EXTERN GLEEPFNGLFOGCOORDPOINTERLISTIBMPROC GLeeFuncPtr_glFogCoordPointerListIBM;
+  #define glFogCoordPointerListIBM GLeeFuncPtr_glFogCoordPointerListIBM
+#endif
+#ifndef GLEE_H_DEFINED_glIndexPointerListIBM
+#define GLEE_H_DEFINED_glIndexPointerListIBM
+  typedef void (APIENTRYP GLEEPFNGLINDEXPOINTERLISTIBMPROC) (GLenum  type, GLint  stride, const GLvoid* * pointer, GLint  ptrstride);
+  GLEE_EXTERN GLEEPFNGLINDEXPOINTERLISTIBMPROC GLeeFuncPtr_glIndexPointerListIBM;
+  #define glIndexPointerListIBM GLeeFuncPtr_glIndexPointerListIBM
+#endif
+#ifndef GLEE_H_DEFINED_glNormalPointerListIBM
+#define GLEE_H_DEFINED_glNormalPointerListIBM
+  typedef void (APIENTRYP GLEEPFNGLNORMALPOINTERLISTIBMPROC) (GLenum  type, GLint  stride, const GLvoid* * pointer, GLint  ptrstride);
+  GLEE_EXTERN GLEEPFNGLNORMALPOINTERLISTIBMPROC GLeeFuncPtr_glNormalPointerListIBM;
+  #define glNormalPointerListIBM GLeeFuncPtr_glNormalPointerListIBM
+#endif
+#ifndef GLEE_H_DEFINED_glTexCoordPointerListIBM
+#define GLEE_H_DEFINED_glTexCoordPointerListIBM
+  typedef void (APIENTRYP GLEEPFNGLTEXCOORDPOINTERLISTIBMPROC) (GLint  size, GLenum  type, GLint  stride, const GLvoid* * pointer, GLint  ptrstride);
+  GLEE_EXTERN GLEEPFNGLTEXCOORDPOINTERLISTIBMPROC GLeeFuncPtr_glTexCoordPointerListIBM;
+  #define glTexCoordPointerListIBM GLeeFuncPtr_glTexCoordPointerListIBM
+#endif
+#ifndef GLEE_H_DEFINED_glVertexPointerListIBM
+#define GLEE_H_DEFINED_glVertexPointerListIBM
+  typedef void (APIENTRYP GLEEPFNGLVERTEXPOINTERLISTIBMPROC) (GLint  size, GLenum  type, GLint  stride, const GLvoid* * pointer, GLint  ptrstride);
+  GLEE_EXTERN GLEEPFNGLVERTEXPOINTERLISTIBMPROC GLeeFuncPtr_glVertexPointerListIBM;
+  #define glVertexPointerListIBM GLeeFuncPtr_glVertexPointerListIBM
+#endif
+#endif 
+
+/* GL_SGIX_subsample */
+
+#ifndef GL_SGIX_subsample
+#define GL_SGIX_subsample 1
+#define __GLEE_GL_SGIX_subsample 1
+/* Constants */
+#define GL_PACK_SUBSAMPLE_RATE_SGIX                        0x85A0
+#define GL_UNPACK_SUBSAMPLE_RATE_SGIX                      0x85A1
+#define GL_PIXEL_SUBSAMPLE_4444_SGIX                       0x85A2
+#define GL_PIXEL_SUBSAMPLE_2424_SGIX                       0x85A3
+#define GL_PIXEL_SUBSAMPLE_4242_SGIX                       0x85A4
+#endif 
+
+/* GL_SGIX_ycrcb_subsample */
+
+#ifndef GL_SGIX_ycrcb_subsample
+#define GL_SGIX_ycrcb_subsample 1
+#define __GLEE_GL_SGIX_ycrcb_subsample 1
+/* Constants */
+#endif 
+
+/* GL_SGIX_ycrcba */
+
+#ifndef GL_SGIX_ycrcba
+#define GL_SGIX_ycrcba 1
+#define __GLEE_GL_SGIX_ycrcba 1
+/* Constants */
+#define GL_YCRCB_SGIX                                      0x8318
+#define GL_YCRCBA_SGIX                                     0x8319
+#endif 
+
+/* GL_SGI_depth_pass_instrument */
+
+#ifndef GL_SGI_depth_pass_instrument
+#define GL_SGI_depth_pass_instrument 1
+#define __GLEE_GL_SGI_depth_pass_instrument 1
+/* Constants */
+#define GL_DEPTH_PASS_INSTRUMENT_SGIX                      0x8310
+#define GL_DEPTH_PASS_INSTRUMENT_COUNTERS_SGIX             0x8311
+#define GL_DEPTH_PASS_INSTRUMENT_MAX_SGIX                  0x8312
+#endif 
+
+/* GL_3DFX_texture_compression_FXT1 */
+
+#ifndef GL_3DFX_texture_compression_FXT1
+#define GL_3DFX_texture_compression_FXT1 1
+#define __GLEE_GL_3DFX_texture_compression_FXT1 1
+/* Constants */
+#define GL_COMPRESSED_RGB_FXT1_3DFX                        0x86B0
+#define GL_COMPRESSED_RGBA_FXT1_3DFX                       0x86B1
+#endif 
+
+/* GL_3DFX_multisample */
+
+#ifndef GL_3DFX_multisample
+#define GL_3DFX_multisample 1
+#define __GLEE_GL_3DFX_multisample 1
+/* Constants */
+#define GL_MULTISAMPLE_3DFX                                0x86B2
+#define GL_SAMPLE_BUFFERS_3DFX                             0x86B3
+#define GL_SAMPLES_3DFX                                    0x86B4
+#define GL_MULTISAMPLE_BIT_3DFX                            0x20000000
+#endif 
+
+/* GL_3DFX_tbuffer */
+
+#ifndef GL_3DFX_tbuffer
+#define GL_3DFX_tbuffer 1
+#define __GLEE_GL_3DFX_tbuffer 1
+/* Constants */
+#ifndef GLEE_H_DEFINED_glTbufferMask3DFX
+#define GLEE_H_DEFINED_glTbufferMask3DFX
+  typedef void (APIENTRYP GLEEPFNGLTBUFFERMASK3DFXPROC) (GLuint  mask);
+  GLEE_EXTERN GLEEPFNGLTBUFFERMASK3DFXPROC GLeeFuncPtr_glTbufferMask3DFX;
+  #define glTbufferMask3DFX GLeeFuncPtr_glTbufferMask3DFX
+#endif
+#endif 
+
+/* GL_EXT_multisample */
+
+#ifndef GL_EXT_multisample
+#define GL_EXT_multisample 1
+#define __GLEE_GL_EXT_multisample 1
+/* Constants */
+#define GL_MULTISAMPLE_EXT                                 0x809D
+#define GL_SAMPLE_ALPHA_TO_MASK_EXT                        0x809E
+#define GL_SAMPLE_ALPHA_TO_ONE_EXT                         0x809F
+#define GL_SAMPLE_MASK_EXT                                 0x80A0
+#define GL_1PASS_EXT                                       0x80A1
+#define GL_2PASS_0_EXT                                     0x80A2
+#define GL_2PASS_1_EXT                                     0x80A3
+#define GL_4PASS_0_EXT                                     0x80A4
+#define GL_4PASS_1_EXT                                     0x80A5
+#define GL_4PASS_2_EXT                                     0x80A6
+#define GL_4PASS_3_EXT                                     0x80A7
+#define GL_SAMPLE_BUFFERS_EXT                              0x80A8
+#define GL_SAMPLES_EXT                                     0x80A9
+#define GL_SAMPLE_MASK_VALUE_EXT                           0x80AA
+#define GL_SAMPLE_MASK_INVERT_EXT                          0x80AB
+#define GL_SAMPLE_PATTERN_EXT                              0x80AC
+#define GL_MULTISAMPLE_BIT_EXT                             0x20000000
+#ifndef GLEE_H_DEFINED_glSampleMaskEXT
+#define GLEE_H_DEFINED_glSampleMaskEXT
+  typedef void (APIENTRYP GLEEPFNGLSAMPLEMASKEXTPROC) (GLclampf  value, GLboolean  invert);
+  GLEE_EXTERN GLEEPFNGLSAMPLEMASKEXTPROC GLeeFuncPtr_glSampleMaskEXT;
+  #define glSampleMaskEXT GLeeFuncPtr_glSampleMaskEXT
+#endif
+#ifndef GLEE_H_DEFINED_glSamplePatternEXT
+#define GLEE_H_DEFINED_glSamplePatternEXT
+  typedef void (APIENTRYP GLEEPFNGLSAMPLEPATTERNEXTPROC) (GLenum  pattern);
+  GLEE_EXTERN GLEEPFNGLSAMPLEPATTERNEXTPROC GLeeFuncPtr_glSamplePatternEXT;
+  #define glSamplePatternEXT GLeeFuncPtr_glSamplePatternEXT
+#endif
+#endif 
+
+/* GL_SGIX_vertex_preclip */
+
+#ifndef GL_SGIX_vertex_preclip
+#define GL_SGIX_vertex_preclip 1
+#define __GLEE_GL_SGIX_vertex_preclip 1
+/* Constants */
+#define GL_VERTEX_PRECLIP_SGIX                             0x83EE
+#define GL_VERTEX_PRECLIP_HINT_SGIX                        0x83EF
+#endif 
+
+/* GL_SGIX_convolution_accuracy */
+
+#ifndef GL_SGIX_convolution_accuracy
+#define GL_SGIX_convolution_accuracy 1
+#define __GLEE_GL_SGIX_convolution_accuracy 1
+/* Constants */
+#define GL_CONVOLUTION_HINT_SGIX                           0x8316
+#endif 
+
+/* GL_SGIX_resample */
+
+#ifndef GL_SGIX_resample
+#define GL_SGIX_resample 1
+#define __GLEE_GL_SGIX_resample 1
+/* Constants */
+#define GL_PACK_RESAMPLE_SGIX                              0x842C
+#define GL_UNPACK_RESAMPLE_SGIX                            0x842D
+#define GL_RESAMPLE_REPLICATE_SGIX                         0x842E
+#define GL_RESAMPLE_ZERO_FILL_SGIX                         0x842F
+#define GL_RESAMPLE_DECIMATE_SGIX                          0x8430
+#endif 
+
+/* GL_SGIS_point_line_texgen */
+
+#ifndef GL_SGIS_point_line_texgen
+#define GL_SGIS_point_line_texgen 1
+#define __GLEE_GL_SGIS_point_line_texgen 1
+/* Constants */
+#define GL_EYE_DISTANCE_TO_POINT_SGIS                      0x81F0
+#define GL_OBJECT_DISTANCE_TO_POINT_SGIS                   0x81F1
+#define GL_EYE_DISTANCE_TO_LINE_SGIS                       0x81F2
+#define GL_OBJECT_DISTANCE_TO_LINE_SGIS                    0x81F3
+#define GL_EYE_POINT_SGIS                                  0x81F4
+#define GL_OBJECT_POINT_SGIS                               0x81F5
+#define GL_EYE_LINE_SGIS                                   0x81F6
+#define GL_OBJECT_LINE_SGIS                                0x81F7
+#endif 
+
+/* GL_SGIS_texture_color_mask */
+
+#ifndef GL_SGIS_texture_color_mask
+#define GL_SGIS_texture_color_mask 1
+#define __GLEE_GL_SGIS_texture_color_mask 1
+/* Constants */
+#define GL_TEXTURE_COLOR_WRITEMASK_SGIS                    0x81EF
+#ifndef GLEE_H_DEFINED_glTextureColorMaskSGIS
+#define GLEE_H_DEFINED_glTextureColorMaskSGIS
+  typedef void (APIENTRYP GLEEPFNGLTEXTURECOLORMASKSGISPROC) (GLboolean  red, GLboolean  green, GLboolean  blue, GLboolean  alpha);
+  GLEE_EXTERN GLEEPFNGLTEXTURECOLORMASKSGISPROC GLeeFuncPtr_glTextureColorMaskSGIS;
+  #define glTextureColorMaskSGIS GLeeFuncPtr_glTextureColorMaskSGIS
+#endif
+#endif 
+
+/* GL_EXT_texture_env_dot3 */
+
+#ifndef GL_EXT_texture_env_dot3
+#define GL_EXT_texture_env_dot3 1
+#define __GLEE_GL_EXT_texture_env_dot3 1
+/* Constants */
+#define GL_DOT3_RGB_EXT                                    0x8740
+#define GL_DOT3_RGBA_EXT                                   0x8741
+#endif 
+
+/* GL_ATI_texture_mirror_once */
+
+#ifndef GL_ATI_texture_mirror_once
+#define GL_ATI_texture_mirror_once 1
+#define __GLEE_GL_ATI_texture_mirror_once 1
+/* Constants */
+#define GL_MIRROR_CLAMP_ATI                                0x8742
+#define GL_MIRROR_CLAMP_TO_EDGE_ATI                        0x8743
+#endif 
+
+/* GL_NV_fence */
+
+#ifndef GL_NV_fence
+#define GL_NV_fence 1
+#define __GLEE_GL_NV_fence 1
+/* Constants */
+#define GL_ALL_COMPLETED_NV                                0x84F2
+#define GL_FENCE_STATUS_NV                                 0x84F3
+#define GL_FENCE_CONDITION_NV                              0x84F4
+#ifndef GLEE_H_DEFINED_glDeleteFencesNV
+#define GLEE_H_DEFINED_glDeleteFencesNV
+  typedef void (APIENTRYP GLEEPFNGLDELETEFENCESNVPROC) (GLsizei  n, const GLuint * fences);
+  GLEE_EXTERN GLEEPFNGLDELETEFENCESNVPROC GLeeFuncPtr_glDeleteFencesNV;
+  #define glDeleteFencesNV GLeeFuncPtr_glDeleteFencesNV
+#endif
+#ifndef GLEE_H_DEFINED_glGenFencesNV
+#define GLEE_H_DEFINED_glGenFencesNV
+  typedef void (APIENTRYP GLEEPFNGLGENFENCESNVPROC) (GLsizei  n, GLuint * fences);
+  GLEE_EXTERN GLEEPFNGLGENFENCESNVPROC GLeeFuncPtr_glGenFencesNV;
+  #define glGenFencesNV GLeeFuncPtr_glGenFencesNV
+#endif
+#ifndef GLEE_H_DEFINED_glIsFenceNV
+#define GLEE_H_DEFINED_glIsFenceNV
+  typedef GLboolean (APIENTRYP GLEEPFNGLISFENCENVPROC) (GLuint  fence);
+  GLEE_EXTERN GLEEPFNGLISFENCENVPROC GLeeFuncPtr_glIsFenceNV;
+  #define glIsFenceNV GLeeFuncPtr_glIsFenceNV
+#endif
+#ifndef GLEE_H_DEFINED_glTestFenceNV
+#define GLEE_H_DEFINED_glTestFenceNV
+  typedef GLboolean (APIENTRYP GLEEPFNGLTESTFENCENVPROC) (GLuint  fence);
+  GLEE_EXTERN GLEEPFNGLTESTFENCENVPROC GLeeFuncPtr_glTestFenceNV;
+  #define glTestFenceNV GLeeFuncPtr_glTestFenceNV
+#endif
+#ifndef GLEE_H_DEFINED_glGetFenceivNV
+#define GLEE_H_DEFINED_glGetFenceivNV
+  typedef void (APIENTRYP GLEEPFNGLGETFENCEIVNVPROC) (GLuint  fence, GLenum  pname, GLint * params);
+  GLEE_EXTERN GLEEPFNGLGETFENCEIVNVPROC GLeeFuncPtr_glGetFenceivNV;
+  #define glGetFenceivNV GLeeFuncPtr_glGetFenceivNV
+#endif
+#ifndef GLEE_H_DEFINED_glFinishFenceNV
+#define GLEE_H_DEFINED_glFinishFenceNV
+  typedef void (APIENTRYP GLEEPFNGLFINISHFENCENVPROC) (GLuint  fence);
+  GLEE_EXTERN GLEEPFNGLFINISHFENCENVPROC GLeeFuncPtr_glFinishFenceNV;
+  #define glFinishFenceNV GLeeFuncPtr_glFinishFenceNV
+#endif
+#ifndef GLEE_H_DEFINED_glSetFenceNV
+#define GLEE_H_DEFINED_glSetFenceNV
+  typedef void (APIENTRYP GLEEPFNGLSETFENCENVPROC) (GLuint  fence, GLenum  condition);
+  GLEE_EXTERN GLEEPFNGLSETFENCENVPROC GLeeFuncPtr_glSetFenceNV;
+  #define glSetFenceNV GLeeFuncPtr_glSetFenceNV
+#endif
+#endif 
+
+/* GL_IBM_texture_mirrored_repeat */
+
+#ifndef GL_IBM_texture_mirrored_repeat
+#define GL_IBM_texture_mirrored_repeat 1
+#define __GLEE_GL_IBM_texture_mirrored_repeat 1
+/* Constants */
+#define GL_MIRRORED_REPEAT_IBM                             0x8370
+#endif 
+
+/* GL_NV_evaluators */
+
+#ifndef GL_NV_evaluators
+#define GL_NV_evaluators 1
+#define __GLEE_GL_NV_evaluators 1
+/* Constants */
+#define GL_EVAL_2D_NV                                      0x86C0
+#define GL_EVAL_TRIANGULAR_2D_NV                           0x86C1
+#define GL_MAP_TESSELLATION_NV                             0x86C2
+#define GL_MAP_ATTRIB_U_ORDER_NV                           0x86C3
+#define GL_MAP_ATTRIB_V_ORDER_NV                           0x86C4
+#define GL_EVAL_FRACTIONAL_TESSELLATION_NV                 0x86C5
+#define GL_EVAL_VERTEX_ATTRIB0_NV                          0x86C6
+#define GL_EVAL_VERTEX_ATTRIB1_NV                          0x86C7
+#define GL_EVAL_VERTEX_ATTRIB2_NV                          0x86C8
+#define GL_EVAL_VERTEX_ATTRIB3_NV                          0x86C9
+#define GL_EVAL_VERTEX_ATTRIB4_NV                          0x86CA
+#define GL_EVAL_VERTEX_ATTRIB5_NV                          0x86CB
+#define GL_EVAL_VERTEX_ATTRIB6_NV                          0x86CC
+#define GL_EVAL_VERTEX_ATTRIB7_NV                          0x86CD
+#define GL_EVAL_VERTEX_ATTRIB8_NV                          0x86CE
+#define GL_EVAL_VERTEX_ATTRIB9_NV                          0x86CF
+#define GL_EVAL_VERTEX_ATTRIB10_NV                         0x86D0
+#define GL_EVAL_VERTEX_ATTRIB11_NV                         0x86D1
+#define GL_EVAL_VERTEX_ATTRIB12_NV                         0x86D2
+#define GL_EVAL_VERTEX_ATTRIB13_NV                         0x86D3
+#define GL_EVAL_VERTEX_ATTRIB14_NV                         0x86D4
+#define GL_EVAL_VERTEX_ATTRIB15_NV                         0x86D5
+#define GL_MAX_MAP_TESSELLATION_NV                         0x86D6
+#define GL_MAX_RATIONAL_EVAL_ORDER_NV                      0x86D7
+#ifndef GLEE_H_DEFINED_glMapControlPointsNV
+#define GLEE_H_DEFINED_glMapControlPointsNV
+  typedef void (APIENTRYP GLEEPFNGLMAPCONTROLPOINTSNVPROC) (GLenum  target, GLuint  index, GLenum  type, GLsizei  ustride, GLsizei  vstride, GLint  uorder, GLint  vorder, GLboolean  packed, const GLvoid * points);
+  GLEE_EXTERN GLEEPFNGLMAPCONTROLPOINTSNVPROC GLeeFuncPtr_glMapControlPointsNV;
+  #define glMapControlPointsNV GLeeFuncPtr_glMapControlPointsNV
+#endif
+#ifndef GLEE_H_DEFINED_glMapParameterivNV
+#define GLEE_H_DEFINED_glMapParameterivNV
+  typedef void (APIENTRYP GLEEPFNGLMAPPARAMETERIVNVPROC) (GLenum  target, GLenum  pname, const GLint * params);
+  GLEE_EXTERN GLEEPFNGLMAPPARAMETERIVNVPROC GLeeFuncPtr_glMapParameterivNV;
+  #define glMapParameterivNV GLeeFuncPtr_glMapParameterivNV
+#endif
+#ifndef GLEE_H_DEFINED_glMapParameterfvNV
+#define GLEE_H_DEFINED_glMapParameterfvNV
+  typedef void (APIENTRYP GLEEPFNGLMAPPARAMETERFVNVPROC) (GLenum  target, GLenum  pname, const GLfloat * params);
+  GLEE_EXTERN GLEEPFNGLMAPPARAMETERFVNVPROC GLeeFuncPtr_glMapParameterfvNV;
+  #define glMapParameterfvNV GLeeFuncPtr_glMapParameterfvNV
+#endif
+#ifndef GLEE_H_DEFINED_glGetMapControlPointsNV
+#define GLEE_H_DEFINED_glGetMapControlPointsNV
+  typedef void (APIENTRYP GLEEPFNGLGETMAPCONTROLPOINTSNVPROC) (GLenum  target, GLuint  index, GLenum  type, GLsizei  ustride, GLsizei  vstride, GLboolean  packed, GLvoid * points);
+  GLEE_EXTERN GLEEPFNGLGETMAPCONTROLPOINTSNVPROC GLeeFuncPtr_glGetMapControlPointsNV;
+  #define glGetMapControlPointsNV GLeeFuncPtr_glGetMapControlPointsNV
+#endif
+#ifndef GLEE_H_DEFINED_glGetMapParameterivNV
+#define GLEE_H_DEFINED_glGetMapParameterivNV
+  typedef void (APIENTRYP GLEEPFNGLGETMAPPARAMETERIVNVPROC) (GLenum  target, GLenum  pname, GLint * params);
+  GLEE_EXTERN GLEEPFNGLGETMAPPARAMETERIVNVPROC GLeeFuncPtr_glGetMapParameterivNV;
+  #define glGetMapParameterivNV GLeeFuncPtr_glGetMapParameterivNV
+#endif
+#ifndef GLEE_H_DEFINED_glGetMapParameterfvNV
+#define GLEE_H_DEFINED_glGetMapParameterfvNV
+  typedef void (APIENTRYP GLEEPFNGLGETMAPPARAMETERFVNVPROC) (GLenum  target, GLenum  pname, GLfloat * params);
+  GLEE_EXTERN GLEEPFNGLGETMAPPARAMETERFVNVPROC GLeeFuncPtr_glGetMapParameterfvNV;
+  #define glGetMapParameterfvNV GLeeFuncPtr_glGetMapParameterfvNV
+#endif
+#ifndef GLEE_H_DEFINED_glGetMapAttribParameterivNV
+#define GLEE_H_DEFINED_glGetMapAttribParameterivNV
+  typedef void (APIENTRYP GLEEPFNGLGETMAPATTRIBPARAMETERIVNVPROC) (GLenum  target, GLuint  index, GLenum  pname, GLint * params);
+  GLEE_EXTERN GLEEPFNGLGETMAPATTRIBPARAMETERIVNVPROC GLeeFuncPtr_glGetMapAttribParameterivNV;
+  #define glGetMapAttribParameterivNV GLeeFuncPtr_glGetMapAttribParameterivNV
+#endif
+#ifndef GLEE_H_DEFINED_glGetMapAttribParameterfvNV
+#define GLEE_H_DEFINED_glGetMapAttribParameterfvNV
+  typedef void (APIENTRYP GLEEPFNGLGETMAPATTRIBPARAMETERFVNVPROC) (GLenum  target, GLuint  index, GLenum  pname, GLfloat * params);
+  GLEE_EXTERN GLEEPFNGLGETMAPATTRIBPARAMETERFVNVPROC GLeeFuncPtr_glGetMapAttribParameterfvNV;
+  #define glGetMapAttribParameterfvNV GLeeFuncPtr_glGetMapAttribParameterfvNV
+#endif
+#ifndef GLEE_H_DEFINED_glEvalMapsNV
+#define GLEE_H_DEFINED_glEvalMapsNV
+  typedef void (APIENTRYP GLEEPFNGLEVALMAPSNVPROC) (GLenum  target, GLenum  mode);
+  GLEE_EXTERN GLEEPFNGLEVALMAPSNVPROC GLeeFuncPtr_glEvalMapsNV;
+  #define glEvalMapsNV GLeeFuncPtr_glEvalMapsNV
+#endif
+#endif 
+
+/* GL_NV_packed_depth_stencil */
+
+#ifndef GL_NV_packed_depth_stencil
+#define GL_NV_packed_depth_stencil 1
+#define __GLEE_GL_NV_packed_depth_stencil 1
+/* Constants */
+#define GL_DEPTH_STENCIL_NV                                0x84F9
+#define GL_UNSIGNED_INT_24_8_NV                            0x84FA
+#endif 
+
+/* GL_NV_register_combiners2 */
+
+#ifndef GL_NV_register_combiners2
+#define GL_NV_register_combiners2 1
+#define __GLEE_GL_NV_register_combiners2 1
+/* Constants */
+#define GL_PER_STAGE_CONSTANTS_NV                          0x8535
+#ifndef GLEE_H_DEFINED_glCombinerStageParameterfvNV
+#define GLEE_H_DEFINED_glCombinerStageParameterfvNV
+  typedef void (APIENTRYP GLEEPFNGLCOMBINERSTAGEPARAMETERFVNVPROC) (GLenum  stage, GLenum  pname, const GLfloat * params);
+  GLEE_EXTERN GLEEPFNGLCOMBINERSTAGEPARAMETERFVNVPROC GLeeFuncPtr_glCombinerStageParameterfvNV;
+  #define glCombinerStageParameterfvNV GLeeFuncPtr_glCombinerStageParameterfvNV
+#endif
+#ifndef GLEE_H_DEFINED_glGetCombinerStageParameterfvNV
+#define GLEE_H_DEFINED_glGetCombinerStageParameterfvNV
+  typedef void (APIENTRYP GLEEPFNGLGETCOMBINERSTAGEPARAMETERFVNVPROC) (GLenum  stage, GLenum  pname, GLfloat * params);
+  GLEE_EXTERN GLEEPFNGLGETCOMBINERSTAGEPARAMETERFVNVPROC GLeeFuncPtr_glGetCombinerStageParameterfvNV;
+  #define glGetCombinerStageParameterfvNV GLeeFuncPtr_glGetCombinerStageParameterfvNV
+#endif
+#endif 
+
+/* GL_NV_texture_compression_vtc */
+
+#ifndef GL_NV_texture_compression_vtc
+#define GL_NV_texture_compression_vtc 1
+#define __GLEE_GL_NV_texture_compression_vtc 1
+/* Constants */
+#endif 
+
+/* GL_NV_texture_rectangle */
+
+#ifndef GL_NV_texture_rectangle
+#define GL_NV_texture_rectangle 1
+#define __GLEE_GL_NV_texture_rectangle 1
+/* Constants */
+#define GL_TEXTURE_RECTANGLE_NV                            0x84F5
+#define GL_TEXTURE_BINDING_RECTANGLE_NV                    0x84F6
+#define GL_PROXY_TEXTURE_RECTANGLE_NV                      0x84F7
+#define GL_MAX_RECTANGLE_TEXTURE_SIZE_NV                   0x84F8
+#endif 
+
+/* GL_NV_texture_shader */
+
+#ifndef GL_NV_texture_shader
+#define GL_NV_texture_shader 1
+#define __GLEE_GL_NV_texture_shader 1
+/* Constants */
+#define GL_OFFSET_TEXTURE_RECTANGLE_NV                     0x864C
+#define GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV               0x864D
+#define GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV                0x864E
+#define GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV            0x86D9
+#define GL_UNSIGNED_INT_S8_S8_8_8_NV                       0x86DA
+#define GL_UNSIGNED_INT_8_8_S8_S8_REV_NV                   0x86DB
+#define GL_DSDT_MAG_INTENSITY_NV                           0x86DC
+#define GL_SHADER_CONSISTENT_NV                            0x86DD
+#define GL_TEXTURE_SHADER_NV                               0x86DE
+#define GL_SHADER_OPERATION_NV                             0x86DF
+#define GL_CULL_MODES_NV                                   0x86E0
+#define GL_OFFSET_TEXTURE_MATRIX_NV                        0x86E1
+#define GL_OFFSET_TEXTURE_SCALE_NV                         0x86E2
+#define GL_OFFSET_TEXTURE_BIAS_NV                          0x86E3
+#define GL_OFFSET_TEXTURE_2D_MATRIX_NV                     GL_OFFSET_TEXTURE_MATRIX_NV
+#define GL_OFFSET_TEXTURE_2D_SCALE_NV                      GL_OFFSET_TEXTURE_SCALE_NV
+#define GL_OFFSET_TEXTURE_2D_BIAS_NV                       GL_OFFSET_TEXTURE_BIAS_NV
+#define GL_PREVIOUS_TEXTURE_INPUT_NV                       0x86E4
+#define GL_CONST_EYE_NV                                    0x86E5
+#define GL_PASS_THROUGH_NV                                 0x86E6
+#define GL_CULL_FRAGMENT_NV                                0x86E7
+#define GL_OFFSET_TEXTURE_2D_NV                            0x86E8
+#define GL_DEPENDENT_AR_TEXTURE_2D_NV                      0x86E9
+#define GL_DEPENDENT_GB_TEXTURE_2D_NV                      0x86EA
+#define GL_DOT_PRODUCT_NV                                  0x86EC
+#define GL_DOT_PRODUCT_DEPTH_REPLACE_NV                    0x86ED
+#define GL_DOT_PRODUCT_TEXTURE_2D_NV                       0x86EE
+#define GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV                 0x86F0
+#define GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV                 0x86F1
+#define GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV                 0x86F2
+#define GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV       0x86F3
+#define GL_HILO_NV                                         0x86F4
+#define GL_DSDT_NV                                         0x86F5
+#define GL_DSDT_MAG_NV                                     0x86F6
+#define GL_DSDT_MAG_VIB_NV                                 0x86F7
+#define GL_HILO16_NV                                       0x86F8
+#define GL_SIGNED_HILO_NV                                  0x86F9
+#define GL_SIGNED_HILO16_NV                                0x86FA
+#define GL_SIGNED_RGBA_NV                                  0x86FB
+#define GL_SIGNED_RGBA8_NV                                 0x86FC
+#define GL_SIGNED_RGB_NV                                   0x86FE
+#define GL_SIGNED_RGB8_NV                                  0x86FF
+#define GL_SIGNED_LUMINANCE_NV                             0x8701
+#define GL_SIGNED_LUMINANCE8_NV                            0x8702
+#define GL_SIGNED_LUMINANCE_ALPHA_NV                       0x8703
+#define GL_SIGNED_LUMINANCE8_ALPHA8_NV                     0x8704
+#define GL_SIGNED_ALPHA_NV                                 0x8705
+#define GL_SIGNED_ALPHA8_NV                                0x8706
+#define GL_SIGNED_INTENSITY_NV                             0x8707
+#define GL_SIGNED_INTENSITY8_NV                            0x8708
+#define GL_DSDT8_NV                                        0x8709
+#define GL_DSDT8_MAG8_NV                                   0x870A
+#define GL_DSDT8_MAG8_INTENSITY8_NV                        0x870B
+#define GL_SIGNED_RGB_UNSIGNED_ALPHA_NV                    0x870C
+#define GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV                  0x870D
+#define GL_HI_SCALE_NV                                     0x870E
+#define GL_LO_SCALE_NV                                     0x870F
+#define GL_DS_SCALE_NV                                     0x8710
+#define GL_DT_SCALE_NV                                     0x8711
+#define GL_MAGNITUDE_SCALE_NV                              0x8712
+#define GL_VIBRANCE_SCALE_NV                               0x8713
+#define GL_HI_BIAS_NV                                      0x8714
+#define GL_LO_BIAS_NV                                      0x8715
+#define GL_DS_BIAS_NV                                      0x8716
+#define GL_DT_BIAS_NV                                      0x8717
+#define GL_MAGNITUDE_BIAS_NV                               0x8718
+#define GL_VIBRANCE_BIAS_NV                                0x8719
+#define GL_TEXTURE_BORDER_VALUES_NV                        0x871A
+#define GL_TEXTURE_HI_SIZE_NV                              0x871B
+#define GL_TEXTURE_LO_SIZE_NV                              0x871C
+#define GL_TEXTURE_DS_SIZE_NV                              0x871D
+#define GL_TEXTURE_DT_SIZE_NV                              0x871E
+#define GL_TEXTURE_MAG_SIZE_NV                             0x871F
+#endif 
+
+/* GL_NV_texture_shader2 */
+
+#ifndef GL_NV_texture_shader2
+#define GL_NV_texture_shader2 1
+#define __GLEE_GL_NV_texture_shader2 1
+/* Constants */
+#define GL_DOT_PRODUCT_TEXTURE_3D_NV                       0x86EF
+#endif 
+
+/* GL_NV_vertex_array_range2 */
+
+#ifndef GL_NV_vertex_array_range2
+#define GL_NV_vertex_array_range2 1
+#define __GLEE_GL_NV_vertex_array_range2 1
+/* Constants */
+#define GL_VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV             0x8533
+#endif 
+
+/* GL_NV_vertex_program */
+
+#ifndef GL_NV_vertex_program
+#define GL_NV_vertex_program 1
+#define __GLEE_GL_NV_vertex_program 1
+/* Constants */
+#define GL_VERTEX_PROGRAM_NV                               0x8620
+#define GL_VERTEX_STATE_PROGRAM_NV                         0x8621
+#define GL_ATTRIB_ARRAY_SIZE_NV                            0x8623
+#define GL_ATTRIB_ARRAY_STRIDE_NV                          0x8624
+#define GL_ATTRIB_ARRAY_TYPE_NV                            0x8625
+#define GL_CURRENT_ATTRIB_NV                               0x8626
+#define GL_PROGRAM_LENGTH_NV                               0x8627
+#define GL_PROGRAM_STRING_NV                               0x8628
+#define GL_MODELVIEW_PROJECTION_NV                         0x8629
+#define GL_IDENTITY_NV                                     0x862A
+#define GL_INVERSE_NV                                      0x862B
+#define GL_TRANSPOSE_NV                                    0x862C
+#define GL_INVERSE_TRANSPOSE_NV                            0x862D
+#define GL_MAX_TRACK_MATRIX_STACK_DEPTH_NV                 0x862E
+#define GL_MAX_TRACK_MATRICES_NV                           0x862F
+#define GL_MATRIX0_NV                                      0x8630
+#define GL_MATRIX1_NV                                      0x8631
+#define GL_MATRIX2_NV                                      0x8632
+#define GL_MATRIX3_NV                                      0x8633
+#define GL_MATRIX4_NV                                      0x8634
+#define GL_MATRIX5_NV                                      0x8635
+#define GL_MATRIX6_NV                                      0x8636
+#define GL_MATRIX7_NV                                      0x8637
+#define GL_CURRENT_MATRIX_STACK_DEPTH_NV                   0x8640
+#define GL_CURRENT_MATRIX_NV                               0x8641
+#define GL_VERTEX_PROGRAM_POINT_SIZE_NV                    0x8642
+#define GL_VERTEX_PROGRAM_TWO_SIDE_NV                      0x8643
+#define GL_PROGRAM_PARAMETER_NV                            0x8644
+#define GL_ATTRIB_ARRAY_POINTER_NV                         0x8645
+#define GL_PROGRAM_TARGET_NV                               0x8646
+#define GL_PROGRAM_RESIDENT_NV                             0x8647
+#define GL_TRACK_MATRIX_NV                                 0x8648
+#define GL_TRACK_MATRIX_TRANSFORM_NV                       0x8649
+#define GL_VERTEX_PROGRAM_BINDING_NV                       0x864A
+#define GL_PROGRAM_ERROR_POSITION_NV                       0x864B
+#define GL_VERTEX_ATTRIB_ARRAY0_NV                         0x8650
+#define GL_VERTEX_ATTRIB_ARRAY1_NV                         0x8651
+#define GL_VERTEX_ATTRIB_ARRAY2_NV                         0x8652
+#define GL_VERTEX_ATTRIB_ARRAY3_NV                         0x8653
+#define GL_VERTEX_ATTRIB_ARRAY4_NV                         0x8654
+#define GL_VERTEX_ATTRIB_ARRAY5_NV                         0x8655
+#define GL_VERTEX_ATTRIB_ARRAY6_NV                         0x8656
+#define GL_VERTEX_ATTRIB_ARRAY7_NV                         0x8657
+#define GL_VERTEX_ATTRIB_ARRAY8_NV                         0x8658
+#define GL_VERTEX_ATTRIB_ARRAY9_NV                         0x8659
+#define GL_VERTEX_ATTRIB_ARRAY10_NV                        0x865A
+#define GL_VERTEX_ATTRIB_ARRAY11_NV                        0x865B
+#define GL_VERTEX_ATTRIB_ARRAY12_NV                        0x865C
+#define GL_VERTEX_ATTRIB_ARRAY13_NV                        0x865D
+#define GL_VERTEX_ATTRIB_ARRAY14_NV                        0x865E
+#define GL_VERTEX_ATTRIB_ARRAY15_NV                        0x865F
+#define GL_MAP1_VERTEX_ATTRIB0_4_NV                        0x8660
+#define GL_MAP1_VERTEX_ATTRIB1_4_NV                        0x8661
+#define GL_MAP1_VERTEX_ATTRIB2_4_NV                        0x8662
+#define GL_MAP1_VERTEX_ATTRIB3_4_NV                        0x8663
+#define GL_MAP1_VERTEX_ATTRIB4_4_NV                        0x8664
+#define GL_MAP1_VERTEX_ATTRIB5_4_NV                        0x8665
+#define GL_MAP1_VERTEX_ATTRIB6_4_NV                        0x8666
+#define GL_MAP1_VERTEX_ATTRIB7_4_NV                        0x8667
+#define GL_MAP1_VERTEX_ATTRIB8_4_NV                        0x8668
+#define GL_MAP1_VERTEX_ATTRIB9_4_NV                        0x8669
+#define GL_MAP1_VERTEX_ATTRIB10_4_NV                       0x866A
+#define GL_MAP1_VERTEX_ATTRIB11_4_NV                       0x866B
+#define GL_MAP1_VERTEX_ATTRIB12_4_NV                       0x866C
+#define GL_MAP1_VERTEX_ATTRIB13_4_NV                       0x866D
+#define GL_MAP1_VERTEX_ATTRIB14_4_NV                       0x866E
+#define GL_MAP1_VERTEX_ATTRIB15_4_NV                       0x866F
+#define GL_MAP2_VERTEX_ATTRIB0_4_NV                        0x8670
+#define GL_MAP2_VERTEX_ATTRIB1_4_NV                        0x8671
+#define GL_MAP2_VERTEX_ATTRIB2_4_NV                        0x8672
+#define GL_MAP2_VERTEX_ATTRIB3_4_NV                        0x8673
+#define GL_MAP2_VERTEX_ATTRIB4_4_NV                        0x8674
+#define GL_MAP2_VERTEX_ATTRIB5_4_NV                        0x8675
+#define GL_MAP2_VERTEX_ATTRIB6_4_NV                        0x8676
+#define GL_MAP2_VERTEX_ATTRIB7_4_NV                        0x8677
+#define GL_MAP2_VERTEX_ATTRIB8_4_NV                        0x8678
+#define GL_MAP2_VERTEX_ATTRIB9_4_NV                        0x8679
+#define GL_MAP2_VERTEX_ATTRIB10_4_NV                       0x867A
+#define GL_MAP2_VERTEX_ATTRIB11_4_NV                       0x867B
+#define GL_MAP2_VERTEX_ATTRIB12_4_NV                       0x867C
+#define GL_MAP2_VERTEX_ATTRIB13_4_NV                       0x867D
+#define GL_MAP2_VERTEX_ATTRIB14_4_NV                       0x867E
+#define GL_MAP2_VERTEX_ATTRIB15_4_NV                       0x867F
+#ifndef GLEE_H_DEFINED_glAreProgramsResidentNV
+#define GLEE_H_DEFINED_glAreProgramsResidentNV
+  typedef GLboolean (APIENTRYP GLEEPFNGLAREPROGRAMSRESIDENTNVPROC) (GLsizei  n, const GLuint * programs, GLboolean * residences);
+  GLEE_EXTERN GLEEPFNGLAREPROGRAMSRESIDENTNVPROC GLeeFuncPtr_glAreProgramsResidentNV;
+  #define glAreProgramsResidentNV GLeeFuncPtr_glAreProgramsResidentNV
+#endif
+#ifndef GLEE_H_DEFINED_glBindProgramNV
+#define GLEE_H_DEFINED_glBindProgramNV
+  typedef void (APIENTRYP GLEEPFNGLBINDPROGRAMNVPROC) (GLenum  target, GLuint  id);
+  GLEE_EXTERN GLEEPFNGLBINDPROGRAMNVPROC GLeeFuncPtr_glBindProgramNV;
+  #define glBindProgramNV GLeeFuncPtr_glBindProgramNV
+#endif
+#ifndef GLEE_H_DEFINED_glDeleteProgramsNV
+#define GLEE_H_DEFINED_glDeleteProgramsNV
+  typedef void (APIENTRYP GLEEPFNGLDELETEPROGRAMSNVPROC) (GLsizei  n, const GLuint * programs);
+  GLEE_EXTERN GLEEPFNGLDELETEPROGRAMSNVPROC GLeeFuncPtr_glDeleteProgramsNV;
+  #define glDeleteProgramsNV GLeeFuncPtr_glDeleteProgramsNV
+#endif
+#ifndef GLEE_H_DEFINED_glExecuteProgramNV
+#define GLEE_H_DEFINED_glExecuteProgramNV
+  typedef void (APIENTRYP GLEEPFNGLEXECUTEPROGRAMNVPROC) (GLenum  target, GLuint  id, const GLfloat * params);
+  GLEE_EXTERN GLEEPFNGLEXECUTEPROGRAMNVPROC GLeeFuncPtr_glExecuteProgramNV;
+  #define glExecuteProgramNV GLeeFuncPtr_glExecuteProgramNV
+#endif
+#ifndef GLEE_H_DEFINED_glGenProgramsNV
+#define GLEE_H_DEFINED_glGenProgramsNV
+  typedef void (APIENTRYP GLEEPFNGLGENPROGRAMSNVPROC) (GLsizei  n, GLuint * programs);
+  GLEE_EXTERN GLEEPFNGLGENPROGRAMSNVPROC GLeeFuncPtr_glGenProgramsNV;
+  #define glGenProgramsNV GLeeFuncPtr_glGenProgramsNV
+#endif
+#ifndef GLEE_H_DEFINED_glGetProgramParameterdvNV
+#define GLEE_H_DEFINED_glGetProgramParameterdvNV
+  typedef void (APIENTRYP GLEEPFNGLGETPROGRAMPARAMETERDVNVPROC) (GLenum  target, GLuint  index, GLenum  pname, GLdouble * params);
+  GLEE_EXTERN GLEEPFNGLGETPROGRAMPARAMETERDVNVPROC GLeeFuncPtr_glGetProgramParameterdvNV;
+  #define glGetProgramParameterdvNV GLeeFuncPtr_glGetProgramParameterdvNV
+#endif
+#ifndef GLEE_H_DEFINED_glGetProgramParameterfvNV
+#define GLEE_H_DEFINED_glGetProgramParameterfvNV
+  typedef void (APIENTRYP GLEEPFNGLGETPROGRAMPARAMETERFVNVPROC) (GLenum  target, GLuint  index, GLenum  pname, GLfloat * params);
+  GLEE_EXTERN GLEEPFNGLGETPROGRAMPARAMETERFVNVPROC GLeeFuncPtr_glGetProgramParameterfvNV;
+  #define glGetProgramParameterfvNV GLeeFuncPtr_glGetProgramParameterfvNV
+#endif
+#ifndef GLEE_H_DEFINED_glGetProgramivNV
+#define GLEE_H_DEFINED_glGetProgramivNV
+  typedef void (APIENTRYP GLEEPFNGLGETPROGRAMIVNVPROC) (GLuint  id, GLenum  pname, GLint * params);
+  GLEE_EXTERN GLEEPFNGLGETPROGRAMIVNVPROC GLeeFuncPtr_glGetProgramivNV;
+  #define glGetProgramivNV GLeeFuncPtr_glGetProgramivNV
+#endif
+#ifndef GLEE_H_DEFINED_glGetProgramStringNV
+#define GLEE_H_DEFINED_glGetProgramStringNV
+  typedef void (APIENTRYP GLEEPFNGLGETPROGRAMSTRINGNVPROC) (GLuint  id, GLenum  pname, GLubyte * program);
+  GLEE_EXTERN GLEEPFNGLGETPROGRAMSTRINGNVPROC GLeeFuncPtr_glGetProgramStringNV;
+  #define glGetProgramStringNV GLeeFuncPtr_glGetProgramStringNV
+#endif
+#ifndef GLEE_H_DEFINED_glGetTrackMatrixivNV
+#define GLEE_H_DEFINED_glGetTrackMatrixivNV
+  typedef void (APIENTRYP GLEEPFNGLGETTRACKMATRIXIVNVPROC) (GLenum  target, GLuint  address, GLenum  pname, GLint * params);
+  GLEE_EXTERN GLEEPFNGLGETTRACKMATRIXIVNVPROC GLeeFuncPtr_glGetTrackMatrixivNV;
+  #define glGetTrackMatrixivNV GLeeFuncPtr_glGetTrackMatrixivNV
+#endif
+#ifndef GLEE_H_DEFINED_glGetVertexAttribdvNV
+#define GLEE_H_DEFINED_glGetVertexAttribdvNV
+  typedef void (APIENTRYP GLEEPFNGLGETVERTEXATTRIBDVNVPROC) (GLuint  index, GLenum  pname, GLdouble * params);
+  GLEE_EXTERN GLEEPFNGLGETVERTEXATTRIBDVNVPROC GLeeFuncPtr_glGetVertexAttribdvNV;
+  #define glGetVertexAttribdvNV GLeeFuncPtr_glGetVertexAttribdvNV
+#endif
+#ifndef GLEE_H_DEFINED_glGetVertexAttribfvNV
+#define GLEE_H_DEFINED_glGetVertexAttribfvNV
+  typedef void (APIENTRYP GLEEPFNGLGETVERTEXATTRIBFVNVPROC) (GLuint  index, GLenum  pname, GLfloat * params);
+  GLEE_EXTERN GLEEPFNGLGETVERTEXATTRIBFVNVPROC GLeeFuncPtr_glGetVertexAttribfvNV;
+  #define glGetVertexAttribfvNV GLeeFuncPtr_glGetVertexAttribfvNV
+#endif
+#ifndef GLEE_H_DEFINED_glGetVertexAttribivNV
+#define GLEE_H_DEFINED_glGetVertexAttribivNV
+  typedef void (APIENTRYP GLEEPFNGLGETVERTEXATTRIBIVNVPROC) (GLuint  index, GLenum  pname, GLint * params);
+  GLEE_EXTERN GLEEPFNGLGETVERTEXATTRIBIVNVPROC GLeeFuncPtr_glGetVertexAttribivNV;
+  #define glGetVertexAttribivNV GLeeFuncPtr_glGetVertexAttribivNV
+#endif
+#ifndef GLEE_H_DEFINED_glGetVertexAttribPointervNV
+#define GLEE_H_DEFINED_glGetVertexAttribPointervNV
+  typedef void (APIENTRYP GLEEPFNGLGETVERTEXATTRIBPOINTERVNVPROC) (GLuint  index, GLenum  pname, GLvoid* * pointer);
+  GLEE_EXTERN GLEEPFNGLGETVERTEXATTRIBPOINTERVNVPROC GLeeFuncPtr_glGetVertexAttribPointervNV;
+  #define glGetVertexAttribPointervNV GLeeFuncPtr_glGetVertexAttribPointervNV
+#endif
+#ifndef GLEE_H_DEFINED_glIsProgramNV
+#define GLEE_H_DEFINED_glIsProgramNV
+  typedef GLboolean (APIENTRYP GLEEPFNGLISPROGRAMNVPROC) (GLuint  id);
+  GLEE_EXTERN GLEEPFNGLISPROGRAMNVPROC GLeeFuncPtr_glIsProgramNV;
+  #define glIsProgramNV GLeeFuncPtr_glIsProgramNV
+#endif
+#ifndef GLEE_H_DEFINED_glLoadProgramNV
+#define GLEE_H_DEFINED_glLoadProgramNV
+  typedef void (APIENTRYP GLEEPFNGLLOADPROGRAMNVPROC) (GLenum  target, GLuint  id, GLsizei  len, const GLubyte * program);
+  GLEE_EXTERN GLEEPFNGLLOADPROGRAMNVPROC GLeeFuncPtr_glLoadProgramNV;
+  #define glLoadProgramNV GLeeFuncPtr_glLoadProgramNV
+#endif
+#ifndef GLEE_H_DEFINED_glProgramParameter4dNV
+#define GLEE_H_DEFINED_glProgramParameter4dNV
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMPARAMETER4DNVPROC) (GLenum  target, GLuint  index, GLdouble  x, GLdouble  y, GLdouble  z, GLdouble  w);
+  GLEE_EXTERN GLEEPFNGLPROGRAMPARAMETER4DNVPROC GLeeFuncPtr_glProgramParameter4dNV;
+  #define glProgramParameter4dNV GLeeFuncPtr_glProgramParameter4dNV
+#endif
+#ifndef GLEE_H_DEFINED_glProgramParameter4dvNV
+#define GLEE_H_DEFINED_glProgramParameter4dvNV
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMPARAMETER4DVNVPROC) (GLenum  target, GLuint  index, const GLdouble * v);
+  GLEE_EXTERN GLEEPFNGLPROGRAMPARAMETER4DVNVPROC GLeeFuncPtr_glProgramParameter4dvNV;
+  #define glProgramParameter4dvNV GLeeFuncPtr_glProgramParameter4dvNV
+#endif
+#ifndef GLEE_H_DEFINED_glProgramParameter4fNV
+#define GLEE_H_DEFINED_glProgramParameter4fNV
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMPARAMETER4FNVPROC) (GLenum  target, GLuint  index, GLfloat  x, GLfloat  y, GLfloat  z, GLfloat  w);
+  GLEE_EXTERN GLEEPFNGLPROGRAMPARAMETER4FNVPROC GLeeFuncPtr_glProgramParameter4fNV;
+  #define glProgramParameter4fNV GLeeFuncPtr_glProgramParameter4fNV
+#endif
+#ifndef GLEE_H_DEFINED_glProgramParameter4fvNV
+#define GLEE_H_DEFINED_glProgramParameter4fvNV
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMPARAMETER4FVNVPROC) (GLenum  target, GLuint  index, const GLfloat * v);
+  GLEE_EXTERN GLEEPFNGLPROGRAMPARAMETER4FVNVPROC GLeeFuncPtr_glProgramParameter4fvNV;
+  #define glProgramParameter4fvNV GLeeFuncPtr_glProgramParameter4fvNV
+#endif
+#ifndef GLEE_H_DEFINED_glProgramParameters4dvNV
+#define GLEE_H_DEFINED_glProgramParameters4dvNV
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMPARAMETERS4DVNVPROC) (GLenum  target, GLuint  index, GLsizei  count, const GLdouble * v);
+  GLEE_EXTERN GLEEPFNGLPROGRAMPARAMETERS4DVNVPROC GLeeFuncPtr_glProgramParameters4dvNV;
+  #define glProgramParameters4dvNV GLeeFuncPtr_glProgramParameters4dvNV
+#endif
+#ifndef GLEE_H_DEFINED_glProgramParameters4fvNV
+#define GLEE_H_DEFINED_glProgramParameters4fvNV
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMPARAMETERS4FVNVPROC) (GLenum  target, GLuint  index, GLsizei  count, const GLfloat * v);
+  GLEE_EXTERN GLEEPFNGLPROGRAMPARAMETERS4FVNVPROC GLeeFuncPtr_glProgramParameters4fvNV;
+  #define glProgramParameters4fvNV GLeeFuncPtr_glProgramParameters4fvNV
+#endif
+#ifndef GLEE_H_DEFINED_glRequestResidentProgramsNV
+#define GLEE_H_DEFINED_glRequestResidentProgramsNV
+  typedef void (APIENTRYP GLEEPFNGLREQUESTRESIDENTPROGRAMSNVPROC) (GLsizei  n, const GLuint * programs);
+  GLEE_EXTERN GLEEPFNGLREQUESTRESIDENTPROGRAMSNVPROC GLeeFuncPtr_glRequestResidentProgramsNV;
+  #define glRequestResidentProgramsNV GLeeFuncPtr_glRequestResidentProgramsNV
+#endif
+#ifndef GLEE_H_DEFINED_glTrackMatrixNV
+#define GLEE_H_DEFINED_glTrackMatrixNV
+  typedef void (APIENTRYP GLEEPFNGLTRACKMATRIXNVPROC) (GLenum  target, GLuint  address, GLenum  matrix, GLenum  transform);
+  GLEE_EXTERN GLEEPFNGLTRACKMATRIXNVPROC GLeeFuncPtr_glTrackMatrixNV;
+  #define glTrackMatrixNV GLeeFuncPtr_glTrackMatrixNV
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttribPointerNV
+#define GLEE_H_DEFINED_glVertexAttribPointerNV
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIBPOINTERNVPROC) (GLuint  index, GLint  fsize, GLenum  type, GLsizei  stride, const GLvoid * pointer);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIBPOINTERNVPROC GLeeFuncPtr_glVertexAttribPointerNV;
+  #define glVertexAttribPointerNV GLeeFuncPtr_glVertexAttribPointerNV
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttrib1dNV
+#define GLEE_H_DEFINED_glVertexAttrib1dNV
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIB1DNVPROC) (GLuint  index, GLdouble  x);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIB1DNVPROC GLeeFuncPtr_glVertexAttrib1dNV;
+  #define glVertexAttrib1dNV GLeeFuncPtr_glVertexAttrib1dNV
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttrib1dvNV
+#define GLEE_H_DEFINED_glVertexAttrib1dvNV
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIB1DVNVPROC) (GLuint  index, const GLdouble * v);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIB1DVNVPROC GLeeFuncPtr_glVertexAttrib1dvNV;
+  #define glVertexAttrib1dvNV GLeeFuncPtr_glVertexAttrib1dvNV
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttrib1fNV
+#define GLEE_H_DEFINED_glVertexAttrib1fNV
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIB1FNVPROC) (GLuint  index, GLfloat  x);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIB1FNVPROC GLeeFuncPtr_glVertexAttrib1fNV;
+  #define glVertexAttrib1fNV GLeeFuncPtr_glVertexAttrib1fNV
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttrib1fvNV
+#define GLEE_H_DEFINED_glVertexAttrib1fvNV
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIB1FVNVPROC) (GLuint  index, const GLfloat * v);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIB1FVNVPROC GLeeFuncPtr_glVertexAttrib1fvNV;
+  #define glVertexAttrib1fvNV GLeeFuncPtr_glVertexAttrib1fvNV
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttrib1sNV
+#define GLEE_H_DEFINED_glVertexAttrib1sNV
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIB1SNVPROC) (GLuint  index, GLshort  x);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIB1SNVPROC GLeeFuncPtr_glVertexAttrib1sNV;
+  #define glVertexAttrib1sNV GLeeFuncPtr_glVertexAttrib1sNV
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttrib1svNV
+#define GLEE_H_DEFINED_glVertexAttrib1svNV
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIB1SVNVPROC) (GLuint  index, const GLshort * v);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIB1SVNVPROC GLeeFuncPtr_glVertexAttrib1svNV;
+  #define glVertexAttrib1svNV GLeeFuncPtr_glVertexAttrib1svNV
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttrib2dNV
+#define GLEE_H_DEFINED_glVertexAttrib2dNV
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIB2DNVPROC) (GLuint  index, GLdouble  x, GLdouble  y);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIB2DNVPROC GLeeFuncPtr_glVertexAttrib2dNV;
+  #define glVertexAttrib2dNV GLeeFuncPtr_glVertexAttrib2dNV
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttrib2dvNV
+#define GLEE_H_DEFINED_glVertexAttrib2dvNV
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIB2DVNVPROC) (GLuint  index, const GLdouble * v);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIB2DVNVPROC GLeeFuncPtr_glVertexAttrib2dvNV;
+  #define glVertexAttrib2dvNV GLeeFuncPtr_glVertexAttrib2dvNV
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttrib2fNV
+#define GLEE_H_DEFINED_glVertexAttrib2fNV
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIB2FNVPROC) (GLuint  index, GLfloat  x, GLfloat  y);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIB2FNVPROC GLeeFuncPtr_glVertexAttrib2fNV;
+  #define glVertexAttrib2fNV GLeeFuncPtr_glVertexAttrib2fNV
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttrib2fvNV
+#define GLEE_H_DEFINED_glVertexAttrib2fvNV
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIB2FVNVPROC) (GLuint  index, const GLfloat * v);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIB2FVNVPROC GLeeFuncPtr_glVertexAttrib2fvNV;
+  #define glVertexAttrib2fvNV GLeeFuncPtr_glVertexAttrib2fvNV
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttrib2sNV
+#define GLEE_H_DEFINED_glVertexAttrib2sNV
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIB2SNVPROC) (GLuint  index, GLshort  x, GLshort  y);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIB2SNVPROC GLeeFuncPtr_glVertexAttrib2sNV;
+  #define glVertexAttrib2sNV GLeeFuncPtr_glVertexAttrib2sNV
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttrib2svNV
+#define GLEE_H_DEFINED_glVertexAttrib2svNV
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIB2SVNVPROC) (GLuint  index, const GLshort * v);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIB2SVNVPROC GLeeFuncPtr_glVertexAttrib2svNV;
+  #define glVertexAttrib2svNV GLeeFuncPtr_glVertexAttrib2svNV
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttrib3dNV
+#define GLEE_H_DEFINED_glVertexAttrib3dNV
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIB3DNVPROC) (GLuint  index, GLdouble  x, GLdouble  y, GLdouble  z);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIB3DNVPROC GLeeFuncPtr_glVertexAttrib3dNV;
+  #define glVertexAttrib3dNV GLeeFuncPtr_glVertexAttrib3dNV
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttrib3dvNV
+#define GLEE_H_DEFINED_glVertexAttrib3dvNV
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIB3DVNVPROC) (GLuint  index, const GLdouble * v);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIB3DVNVPROC GLeeFuncPtr_glVertexAttrib3dvNV;
+  #define glVertexAttrib3dvNV GLeeFuncPtr_glVertexAttrib3dvNV
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttrib3fNV
+#define GLEE_H_DEFINED_glVertexAttrib3fNV
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIB3FNVPROC) (GLuint  index, GLfloat  x, GLfloat  y, GLfloat  z);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIB3FNVPROC GLeeFuncPtr_glVertexAttrib3fNV;
+  #define glVertexAttrib3fNV GLeeFuncPtr_glVertexAttrib3fNV
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttrib3fvNV
+#define GLEE_H_DEFINED_glVertexAttrib3fvNV
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIB3FVNVPROC) (GLuint  index, const GLfloat * v);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIB3FVNVPROC GLeeFuncPtr_glVertexAttrib3fvNV;
+  #define glVertexAttrib3fvNV GLeeFuncPtr_glVertexAttrib3fvNV
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttrib3sNV
+#define GLEE_H_DEFINED_glVertexAttrib3sNV
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIB3SNVPROC) (GLuint  index, GLshort  x, GLshort  y, GLshort  z);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIB3SNVPROC GLeeFuncPtr_glVertexAttrib3sNV;
+  #define glVertexAttrib3sNV GLeeFuncPtr_glVertexAttrib3sNV
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttrib3svNV
+#define GLEE_H_DEFINED_glVertexAttrib3svNV
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIB3SVNVPROC) (GLuint  index, const GLshort * v);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIB3SVNVPROC GLeeFuncPtr_glVertexAttrib3svNV;
+  #define glVertexAttrib3svNV GLeeFuncPtr_glVertexAttrib3svNV
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttrib4dNV
+#define GLEE_H_DEFINED_glVertexAttrib4dNV
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIB4DNVPROC) (GLuint  index, GLdouble  x, GLdouble  y, GLdouble  z, GLdouble  w);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIB4DNVPROC GLeeFuncPtr_glVertexAttrib4dNV;
+  #define glVertexAttrib4dNV GLeeFuncPtr_glVertexAttrib4dNV
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttrib4dvNV
+#define GLEE_H_DEFINED_glVertexAttrib4dvNV
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIB4DVNVPROC) (GLuint  index, const GLdouble * v);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIB4DVNVPROC GLeeFuncPtr_glVertexAttrib4dvNV;
+  #define glVertexAttrib4dvNV GLeeFuncPtr_glVertexAttrib4dvNV
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttrib4fNV
+#define GLEE_H_DEFINED_glVertexAttrib4fNV
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIB4FNVPROC) (GLuint  index, GLfloat  x, GLfloat  y, GLfloat  z, GLfloat  w);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIB4FNVPROC GLeeFuncPtr_glVertexAttrib4fNV;
+  #define glVertexAttrib4fNV GLeeFuncPtr_glVertexAttrib4fNV
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttrib4fvNV
+#define GLEE_H_DEFINED_glVertexAttrib4fvNV
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIB4FVNVPROC) (GLuint  index, const GLfloat * v);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIB4FVNVPROC GLeeFuncPtr_glVertexAttrib4fvNV;
+  #define glVertexAttrib4fvNV GLeeFuncPtr_glVertexAttrib4fvNV
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttrib4sNV
+#define GLEE_H_DEFINED_glVertexAttrib4sNV
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIB4SNVPROC) (GLuint  index, GLshort  x, GLshort  y, GLshort  z, GLshort  w);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIB4SNVPROC GLeeFuncPtr_glVertexAttrib4sNV;
+  #define glVertexAttrib4sNV GLeeFuncPtr_glVertexAttrib4sNV
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttrib4svNV
+#define GLEE_H_DEFINED_glVertexAttrib4svNV
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIB4SVNVPROC) (GLuint  index, const GLshort * v);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIB4SVNVPROC GLeeFuncPtr_glVertexAttrib4svNV;
+  #define glVertexAttrib4svNV GLeeFuncPtr_glVertexAttrib4svNV
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttrib4ubNV
+#define GLEE_H_DEFINED_glVertexAttrib4ubNV
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIB4UBNVPROC) (GLuint  index, GLubyte  x, GLubyte  y, GLubyte  z, GLubyte  w);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIB4UBNVPROC GLeeFuncPtr_glVertexAttrib4ubNV;
+  #define glVertexAttrib4ubNV GLeeFuncPtr_glVertexAttrib4ubNV
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttrib4ubvNV
+#define GLEE_H_DEFINED_glVertexAttrib4ubvNV
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIB4UBVNVPROC) (GLuint  index, const GLubyte * v);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIB4UBVNVPROC GLeeFuncPtr_glVertexAttrib4ubvNV;
+  #define glVertexAttrib4ubvNV GLeeFuncPtr_glVertexAttrib4ubvNV
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttribs1dvNV
+#define GLEE_H_DEFINED_glVertexAttribs1dvNV
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIBS1DVNVPROC) (GLuint  index, GLsizei  count, const GLdouble * v);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIBS1DVNVPROC GLeeFuncPtr_glVertexAttribs1dvNV;
+  #define glVertexAttribs1dvNV GLeeFuncPtr_glVertexAttribs1dvNV
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttribs1fvNV
+#define GLEE_H_DEFINED_glVertexAttribs1fvNV
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIBS1FVNVPROC) (GLuint  index, GLsizei  count, const GLfloat * v);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIBS1FVNVPROC GLeeFuncPtr_glVertexAttribs1fvNV;
+  #define glVertexAttribs1fvNV GLeeFuncPtr_glVertexAttribs1fvNV
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttribs1svNV
+#define GLEE_H_DEFINED_glVertexAttribs1svNV
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIBS1SVNVPROC) (GLuint  index, GLsizei  count, const GLshort * v);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIBS1SVNVPROC GLeeFuncPtr_glVertexAttribs1svNV;
+  #define glVertexAttribs1svNV GLeeFuncPtr_glVertexAttribs1svNV
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttribs2dvNV
+#define GLEE_H_DEFINED_glVertexAttribs2dvNV
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIBS2DVNVPROC) (GLuint  index, GLsizei  count, const GLdouble * v);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIBS2DVNVPROC GLeeFuncPtr_glVertexAttribs2dvNV;
+  #define glVertexAttribs2dvNV GLeeFuncPtr_glVertexAttribs2dvNV
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttribs2fvNV
+#define GLEE_H_DEFINED_glVertexAttribs2fvNV
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIBS2FVNVPROC) (GLuint  index, GLsizei  count, const GLfloat * v);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIBS2FVNVPROC GLeeFuncPtr_glVertexAttribs2fvNV;
+  #define glVertexAttribs2fvNV GLeeFuncPtr_glVertexAttribs2fvNV
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttribs2svNV
+#define GLEE_H_DEFINED_glVertexAttribs2svNV
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIBS2SVNVPROC) (GLuint  index, GLsizei  count, const GLshort * v);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIBS2SVNVPROC GLeeFuncPtr_glVertexAttribs2svNV;
+  #define glVertexAttribs2svNV GLeeFuncPtr_glVertexAttribs2svNV
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttribs3dvNV
+#define GLEE_H_DEFINED_glVertexAttribs3dvNV
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIBS3DVNVPROC) (GLuint  index, GLsizei  count, const GLdouble * v);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIBS3DVNVPROC GLeeFuncPtr_glVertexAttribs3dvNV;
+  #define glVertexAttribs3dvNV GLeeFuncPtr_glVertexAttribs3dvNV
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttribs3fvNV
+#define GLEE_H_DEFINED_glVertexAttribs3fvNV
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIBS3FVNVPROC) (GLuint  index, GLsizei  count, const GLfloat * v);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIBS3FVNVPROC GLeeFuncPtr_glVertexAttribs3fvNV;
+  #define glVertexAttribs3fvNV GLeeFuncPtr_glVertexAttribs3fvNV
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttribs3svNV
+#define GLEE_H_DEFINED_glVertexAttribs3svNV
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIBS3SVNVPROC) (GLuint  index, GLsizei  count, const GLshort * v);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIBS3SVNVPROC GLeeFuncPtr_glVertexAttribs3svNV;
+  #define glVertexAttribs3svNV GLeeFuncPtr_glVertexAttribs3svNV
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttribs4dvNV
+#define GLEE_H_DEFINED_glVertexAttribs4dvNV
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIBS4DVNVPROC) (GLuint  index, GLsizei  count, const GLdouble * v);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIBS4DVNVPROC GLeeFuncPtr_glVertexAttribs4dvNV;
+  #define glVertexAttribs4dvNV GLeeFuncPtr_glVertexAttribs4dvNV
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttribs4fvNV
+#define GLEE_H_DEFINED_glVertexAttribs4fvNV
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIBS4FVNVPROC) (GLuint  index, GLsizei  count, const GLfloat * v);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIBS4FVNVPROC GLeeFuncPtr_glVertexAttribs4fvNV;
+  #define glVertexAttribs4fvNV GLeeFuncPtr_glVertexAttribs4fvNV
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttribs4svNV
+#define GLEE_H_DEFINED_glVertexAttribs4svNV
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIBS4SVNVPROC) (GLuint  index, GLsizei  count, const GLshort * v);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIBS4SVNVPROC GLeeFuncPtr_glVertexAttribs4svNV;
+  #define glVertexAttribs4svNV GLeeFuncPtr_glVertexAttribs4svNV
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttribs4ubvNV
+#define GLEE_H_DEFINED_glVertexAttribs4ubvNV
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIBS4UBVNVPROC) (GLuint  index, GLsizei  count, const GLubyte * v);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIBS4UBVNVPROC GLeeFuncPtr_glVertexAttribs4ubvNV;
+  #define glVertexAttribs4ubvNV GLeeFuncPtr_glVertexAttribs4ubvNV
+#endif
+#endif 
+
+/* GL_SGIX_texture_coordinate_clamp */
+
+#ifndef GL_SGIX_texture_coordinate_clamp
+#define GL_SGIX_texture_coordinate_clamp 1
+#define __GLEE_GL_SGIX_texture_coordinate_clamp 1
+/* Constants */
+#define GL_TEXTURE_MAX_CLAMP_S_SGIX                        0x8369
+#define GL_TEXTURE_MAX_CLAMP_T_SGIX                        0x836A
+#define GL_TEXTURE_MAX_CLAMP_R_SGIX                        0x836B
+#endif 
+
+/* GL_SGIX_scalebias_hint */
+
+#ifndef GL_SGIX_scalebias_hint
+#define GL_SGIX_scalebias_hint 1
+#define __GLEE_GL_SGIX_scalebias_hint 1
+/* Constants */
+#define GL_SCALEBIAS_HINT_SGIX                             0x8322
+#endif 
+
+/* GL_OML_interlace */
+
+#ifndef GL_OML_interlace
+#define GL_OML_interlace 1
+#define __GLEE_GL_OML_interlace 1
+/* Constants */
+#define GL_INTERLACE_OML                                   0x8980
+#define GL_INTERLACE_READ_OML                              0x8981
+#endif 
+
+/* GL_OML_subsample */
+
+#ifndef GL_OML_subsample
+#define GL_OML_subsample 1
+#define __GLEE_GL_OML_subsample 1
+/* Constants */
+#define GL_FORMAT_SUBSAMPLE_24_24_OML                      0x8982
+#define GL_FORMAT_SUBSAMPLE_244_244_OML                    0x8983
+#endif 
+
+/* GL_OML_resample */
+
+#ifndef GL_OML_resample
+#define GL_OML_resample 1
+#define __GLEE_GL_OML_resample 1
+/* Constants */
+#define GL_PACK_RESAMPLE_OML                               0x8984
+#define GL_UNPACK_RESAMPLE_OML                             0x8985
+#define GL_RESAMPLE_REPLICATE_OML                          0x8986
+#define GL_RESAMPLE_ZERO_FILL_OML                          0x8987
+#define GL_RESAMPLE_AVERAGE_OML                            0x8988
+#define GL_RESAMPLE_DECIMATE_OML                           0x8989
+#endif 
+
+/* GL_NV_copy_depth_to_color */
+
+#ifndef GL_NV_copy_depth_to_color
+#define GL_NV_copy_depth_to_color 1
+#define __GLEE_GL_NV_copy_depth_to_color 1
+/* Constants */
+#define GL_DEPTH_STENCIL_TO_RGBA_NV                        0x886E
+#define GL_DEPTH_STENCIL_TO_BGRA_NV                        0x886F
+#endif 
+
+/* GL_ATI_envmap_bumpmap */
+
+#ifndef GL_ATI_envmap_bumpmap
+#define GL_ATI_envmap_bumpmap 1
+#define __GLEE_GL_ATI_envmap_bumpmap 1
+/* Constants */
+#define GL_BUMP_ROT_MATRIX_ATI                             0x8775
+#define GL_BUMP_ROT_MATRIX_SIZE_ATI                        0x8776
+#define GL_BUMP_NUM_TEX_UNITS_ATI                          0x8777
+#define GL_BUMP_TEX_UNITS_ATI                              0x8778
+#define GL_DUDV_ATI                                        0x8779
+#define GL_DU8DV8_ATI                                      0x877A
+#define GL_BUMP_ENVMAP_ATI                                 0x877B
+#define GL_BUMP_TARGET_ATI                                 0x877C
+#ifndef GLEE_H_DEFINED_glTexBumpParameterivATI
+#define GLEE_H_DEFINED_glTexBumpParameterivATI
+  typedef void (APIENTRYP GLEEPFNGLTEXBUMPPARAMETERIVATIPROC) (GLenum  pname, const GLint * param);
+  GLEE_EXTERN GLEEPFNGLTEXBUMPPARAMETERIVATIPROC GLeeFuncPtr_glTexBumpParameterivATI;
+  #define glTexBumpParameterivATI GLeeFuncPtr_glTexBumpParameterivATI
+#endif
+#ifndef GLEE_H_DEFINED_glTexBumpParameterfvATI
+#define GLEE_H_DEFINED_glTexBumpParameterfvATI
+  typedef void (APIENTRYP GLEEPFNGLTEXBUMPPARAMETERFVATIPROC) (GLenum  pname, const GLfloat * param);
+  GLEE_EXTERN GLEEPFNGLTEXBUMPPARAMETERFVATIPROC GLeeFuncPtr_glTexBumpParameterfvATI;
+  #define glTexBumpParameterfvATI GLeeFuncPtr_glTexBumpParameterfvATI
+#endif
+#ifndef GLEE_H_DEFINED_glGetTexBumpParameterivATI
+#define GLEE_H_DEFINED_glGetTexBumpParameterivATI
+  typedef void (APIENTRYP GLEEPFNGLGETTEXBUMPPARAMETERIVATIPROC) (GLenum  pname, GLint * param);
+  GLEE_EXTERN GLEEPFNGLGETTEXBUMPPARAMETERIVATIPROC GLeeFuncPtr_glGetTexBumpParameterivATI;
+  #define glGetTexBumpParameterivATI GLeeFuncPtr_glGetTexBumpParameterivATI
+#endif
+#ifndef GLEE_H_DEFINED_glGetTexBumpParameterfvATI
+#define GLEE_H_DEFINED_glGetTexBumpParameterfvATI
+  typedef void (APIENTRYP GLEEPFNGLGETTEXBUMPPARAMETERFVATIPROC) (GLenum  pname, GLfloat * param);
+  GLEE_EXTERN GLEEPFNGLGETTEXBUMPPARAMETERFVATIPROC GLeeFuncPtr_glGetTexBumpParameterfvATI;
+  #define glGetTexBumpParameterfvATI GLeeFuncPtr_glGetTexBumpParameterfvATI
+#endif
+#endif 
+
+/* GL_ATI_fragment_shader */
+
+#ifndef GL_ATI_fragment_shader
+#define GL_ATI_fragment_shader 1
+#define __GLEE_GL_ATI_fragment_shader 1
+/* Constants */
+#define GL_FRAGMENT_SHADER_ATI                             0x8920
+#define GL_REG_0_ATI                                       0x8921
+#define GL_REG_1_ATI                                       0x8922
+#define GL_REG_2_ATI                                       0x8923
+#define GL_REG_3_ATI                                       0x8924
+#define GL_REG_4_ATI                                       0x8925
+#define GL_REG_5_ATI                                       0x8926
+#define GL_REG_6_ATI                                       0x8927
+#define GL_REG_7_ATI                                       0x8928
+#define GL_REG_8_ATI                                       0x8929
+#define GL_REG_9_ATI                                       0x892A
+#define GL_REG_10_ATI                                      0x892B
+#define GL_REG_11_ATI                                      0x892C
+#define GL_REG_12_ATI                                      0x892D
+#define GL_REG_13_ATI                                      0x892E
+#define GL_REG_14_ATI                                      0x892F
+#define GL_REG_15_ATI                                      0x8930
+#define GL_REG_16_ATI                                      0x8931
+#define GL_REG_17_ATI                                      0x8932
+#define GL_REG_18_ATI                                      0x8933
+#define GL_REG_19_ATI                                      0x8934
+#define GL_REG_20_ATI                                      0x8935
+#define GL_REG_21_ATI                                      0x8936
+#define GL_REG_22_ATI                                      0x8937
+#define GL_REG_23_ATI                                      0x8938
+#define GL_REG_24_ATI                                      0x8939
+#define GL_REG_25_ATI                                      0x893A
+#define GL_REG_26_ATI                                      0x893B
+#define GL_REG_27_ATI                                      0x893C
+#define GL_REG_28_ATI                                      0x893D
+#define GL_REG_29_ATI                                      0x893E
+#define GL_REG_30_ATI                                      0x893F
+#define GL_REG_31_ATI                                      0x8940
+#define GL_CON_0_ATI                                       0x8941
+#define GL_CON_1_ATI                                       0x8942
+#define GL_CON_2_ATI                                       0x8943
+#define GL_CON_3_ATI                                       0x8944
+#define GL_CON_4_ATI                                       0x8945
+#define GL_CON_5_ATI                                       0x8946
+#define GL_CON_6_ATI                                       0x8947
+#define GL_CON_7_ATI                                       0x8948
+#define GL_CON_8_ATI                                       0x8949
+#define GL_CON_9_ATI                                       0x894A
+#define GL_CON_10_ATI                                      0x894B
+#define GL_CON_11_ATI                                      0x894C
+#define GL_CON_12_ATI                                      0x894D
+#define GL_CON_13_ATI                                      0x894E
+#define GL_CON_14_ATI                                      0x894F
+#define GL_CON_15_ATI                                      0x8950
+#define GL_CON_16_ATI                                      0x8951
+#define GL_CON_17_ATI                                      0x8952
+#define GL_CON_18_ATI                                      0x8953
+#define GL_CON_19_ATI                                      0x8954
+#define GL_CON_20_ATI                                      0x8955
+#define GL_CON_21_ATI                                      0x8956
+#define GL_CON_22_ATI                                      0x8957
+#define GL_CON_23_ATI                                      0x8958
+#define GL_CON_24_ATI                                      0x8959
+#define GL_CON_25_ATI                                      0x895A
+#define GL_CON_26_ATI                                      0x895B
+#define GL_CON_27_ATI                                      0x895C
+#define GL_CON_28_ATI                                      0x895D
+#define GL_CON_29_ATI                                      0x895E
+#define GL_CON_30_ATI                                      0x895F
+#define GL_CON_31_ATI                                      0x8960
+#define GL_MOV_ATI                                         0x8961
+#define GL_ADD_ATI                                         0x8963
+#define GL_MUL_ATI                                         0x8964
+#define GL_SUB_ATI                                         0x8965
+#define GL_DOT3_ATI                                        0x8966
+#define GL_DOT4_ATI                                        0x8967
+#define GL_MAD_ATI                                         0x8968
+#define GL_LERP_ATI                                        0x8969
+#define GL_CND_ATI                                         0x896A
+#define GL_CND0_ATI                                        0x896B
+#define GL_DOT2_ADD_ATI                                    0x896C
+#define GL_SECONDARY_INTERPOLATOR_ATI                      0x896D
+#define GL_NUM_FRAGMENT_REGISTERS_ATI                      0x896E
+#define GL_NUM_FRAGMENT_CONSTANTS_ATI                      0x896F
+#define GL_NUM_PASSES_ATI                                  0x8970
+#define GL_NUM_INSTRUCTIONS_PER_PASS_ATI                   0x8971
+#define GL_NUM_INSTRUCTIONS_TOTAL_ATI                      0x8972
+#define GL_NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI           0x8973
+#define GL_NUM_LOOPBACK_COMPONENTS_ATI                     0x8974
+#define GL_COLOR_ALPHA_PAIRING_ATI                         0x8975
+#define GL_SWIZZLE_STR_ATI                                 0x8976
+#define GL_SWIZZLE_STQ_ATI                                 0x8977
+#define GL_SWIZZLE_STR_DR_ATI                              0x8978
+#define GL_SWIZZLE_STQ_DQ_ATI                              0x8979
+#define GL_SWIZZLE_STRQ_ATI                                0x897A
+#define GL_SWIZZLE_STRQ_DQ_ATI                             0x897B
+#define GL_RED_BIT_ATI                                     0x00000001
+#define GL_GREEN_BIT_ATI                                   0x00000002
+#define GL_BLUE_BIT_ATI                                    0x00000004
+#define GL_2X_BIT_ATI                                      0x00000001
+#define GL_4X_BIT_ATI                                      0x00000002
+#define GL_8X_BIT_ATI                                      0x00000004
+#define GL_HALF_BIT_ATI                                    0x00000008
+#define GL_QUARTER_BIT_ATI                                 0x00000010
+#define GL_EIGHTH_BIT_ATI                                  0x00000020
+#define GL_SATURATE_BIT_ATI                                0x00000040
+#define GL_COMP_BIT_ATI                                    0x00000002
+#define GL_NEGATE_BIT_ATI                                  0x00000004
+#define GL_BIAS_BIT_ATI                                    0x00000008
+#ifndef GLEE_H_DEFINED_glGenFragmentShadersATI
+#define GLEE_H_DEFINED_glGenFragmentShadersATI
+  typedef GLuint (APIENTRYP GLEEPFNGLGENFRAGMENTSHADERSATIPROC) (GLuint  range);
+  GLEE_EXTERN GLEEPFNGLGENFRAGMENTSHADERSATIPROC GLeeFuncPtr_glGenFragmentShadersATI;
+  #define glGenFragmentShadersATI GLeeFuncPtr_glGenFragmentShadersATI
+#endif
+#ifndef GLEE_H_DEFINED_glBindFragmentShaderATI
+#define GLEE_H_DEFINED_glBindFragmentShaderATI
+  typedef void (APIENTRYP GLEEPFNGLBINDFRAGMENTSHADERATIPROC) (GLuint  id);
+  GLEE_EXTERN GLEEPFNGLBINDFRAGMENTSHADERATIPROC GLeeFuncPtr_glBindFragmentShaderATI;
+  #define glBindFragmentShaderATI GLeeFuncPtr_glBindFragmentShaderATI
+#endif
+#ifndef GLEE_H_DEFINED_glDeleteFragmentShaderATI
+#define GLEE_H_DEFINED_glDeleteFragmentShaderATI
+  typedef void (APIENTRYP GLEEPFNGLDELETEFRAGMENTSHADERATIPROC) (GLuint  id);
+  GLEE_EXTERN GLEEPFNGLDELETEFRAGMENTSHADERATIPROC GLeeFuncPtr_glDeleteFragmentShaderATI;
+  #define glDeleteFragmentShaderATI GLeeFuncPtr_glDeleteFragmentShaderATI
+#endif
+#ifndef GLEE_H_DEFINED_glBeginFragmentShaderATI
+#define GLEE_H_DEFINED_glBeginFragmentShaderATI
+  typedef void (APIENTRYP GLEEPFNGLBEGINFRAGMENTSHADERATIPROC) ();
+  GLEE_EXTERN GLEEPFNGLBEGINFRAGMENTSHADERATIPROC GLeeFuncPtr_glBeginFragmentShaderATI;
+  #define glBeginFragmentShaderATI GLeeFuncPtr_glBeginFragmentShaderATI
+#endif
+#ifndef GLEE_H_DEFINED_glEndFragmentShaderATI
+#define GLEE_H_DEFINED_glEndFragmentShaderATI
+  typedef void (APIENTRYP GLEEPFNGLENDFRAGMENTSHADERATIPROC) ();
+  GLEE_EXTERN GLEEPFNGLENDFRAGMENTSHADERATIPROC GLeeFuncPtr_glEndFragmentShaderATI;
+  #define glEndFragmentShaderATI GLeeFuncPtr_glEndFragmentShaderATI
+#endif
+#ifndef GLEE_H_DEFINED_glPassTexCoordATI
+#define GLEE_H_DEFINED_glPassTexCoordATI
+  typedef void (APIENTRYP GLEEPFNGLPASSTEXCOORDATIPROC) (GLuint  dst, GLuint  coord, GLenum  swizzle);
+  GLEE_EXTERN GLEEPFNGLPASSTEXCOORDATIPROC GLeeFuncPtr_glPassTexCoordATI;
+  #define glPassTexCoordATI GLeeFuncPtr_glPassTexCoordATI
+#endif
+#ifndef GLEE_H_DEFINED_glSampleMapATI
+#define GLEE_H_DEFINED_glSampleMapATI
+  typedef void (APIENTRYP GLEEPFNGLSAMPLEMAPATIPROC) (GLuint  dst, GLuint  interp, GLenum  swizzle);
+  GLEE_EXTERN GLEEPFNGLSAMPLEMAPATIPROC GLeeFuncPtr_glSampleMapATI;
+  #define glSampleMapATI GLeeFuncPtr_glSampleMapATI
+#endif
+#ifndef GLEE_H_DEFINED_glColorFragmentOp1ATI
+#define GLEE_H_DEFINED_glColorFragmentOp1ATI
+  typedef void (APIENTRYP GLEEPFNGLCOLORFRAGMENTOP1ATIPROC) (GLenum  op, GLuint  dst, GLuint  dstMask, GLuint  dstMod, GLuint  arg1, GLuint  arg1Rep, GLuint  arg1Mod);
+  GLEE_EXTERN GLEEPFNGLCOLORFRAGMENTOP1ATIPROC GLeeFuncPtr_glColorFragmentOp1ATI;
+  #define glColorFragmentOp1ATI GLeeFuncPtr_glColorFragmentOp1ATI
+#endif
+#ifndef GLEE_H_DEFINED_glColorFragmentOp2ATI
+#define GLEE_H_DEFINED_glColorFragmentOp2ATI
+  typedef void (APIENTRYP GLEEPFNGLCOLORFRAGMENTOP2ATIPROC) (GLenum  op, GLuint  dst, GLuint  dstMask, GLuint  dstMod, GLuint  arg1, GLuint  arg1Rep, GLuint  arg1Mod, GLuint  arg2, GLuint  arg2Rep, GLuint  arg2Mod);
+  GLEE_EXTERN GLEEPFNGLCOLORFRAGMENTOP2ATIPROC GLeeFuncPtr_glColorFragmentOp2ATI;
+  #define glColorFragmentOp2ATI GLeeFuncPtr_glColorFragmentOp2ATI
+#endif
+#ifndef GLEE_H_DEFINED_glColorFragmentOp3ATI
+#define GLEE_H_DEFINED_glColorFragmentOp3ATI
+  typedef void (APIENTRYP GLEEPFNGLCOLORFRAGMENTOP3ATIPROC) (GLenum  op, GLuint  dst, GLuint  dstMask, GLuint  dstMod, GLuint  arg1, GLuint  arg1Rep, GLuint  arg1Mod, GLuint  arg2, GLuint  arg2Rep, GLuint  arg2Mod, GLuint  arg3, GLuint  arg3Rep, GLuint  arg3Mod);
+  GLEE_EXTERN GLEEPFNGLCOLORFRAGMENTOP3ATIPROC GLeeFuncPtr_glColorFragmentOp3ATI;
+  #define glColorFragmentOp3ATI GLeeFuncPtr_glColorFragmentOp3ATI
+#endif
+#ifndef GLEE_H_DEFINED_glAlphaFragmentOp1ATI
+#define GLEE_H_DEFINED_glAlphaFragmentOp1ATI
+  typedef void (APIENTRYP GLEEPFNGLALPHAFRAGMENTOP1ATIPROC) (GLenum  op, GLuint  dst, GLuint  dstMod, GLuint  arg1, GLuint  arg1Rep, GLuint  arg1Mod);
+  GLEE_EXTERN GLEEPFNGLALPHAFRAGMENTOP1ATIPROC GLeeFuncPtr_glAlphaFragmentOp1ATI;
+  #define glAlphaFragmentOp1ATI GLeeFuncPtr_glAlphaFragmentOp1ATI
+#endif
+#ifndef GLEE_H_DEFINED_glAlphaFragmentOp2ATI
+#define GLEE_H_DEFINED_glAlphaFragmentOp2ATI
+  typedef void (APIENTRYP GLEEPFNGLALPHAFRAGMENTOP2ATIPROC) (GLenum  op, GLuint  dst, GLuint  dstMod, GLuint  arg1, GLuint  arg1Rep, GLuint  arg1Mod, GLuint  arg2, GLuint  arg2Rep, GLuint  arg2Mod);
+  GLEE_EXTERN GLEEPFNGLALPHAFRAGMENTOP2ATIPROC GLeeFuncPtr_glAlphaFragmentOp2ATI;
+  #define glAlphaFragmentOp2ATI GLeeFuncPtr_glAlphaFragmentOp2ATI
+#endif
+#ifndef GLEE_H_DEFINED_glAlphaFragmentOp3ATI
+#define GLEE_H_DEFINED_glAlphaFragmentOp3ATI
+  typedef void (APIENTRYP GLEEPFNGLALPHAFRAGMENTOP3ATIPROC) (GLenum  op, GLuint  dst, GLuint  dstMod, GLuint  arg1, GLuint  arg1Rep, GLuint  arg1Mod, GLuint  arg2, GLuint  arg2Rep, GLuint  arg2Mod, GLuint  arg3, GLuint  arg3Rep, GLuint  arg3Mod);
+  GLEE_EXTERN GLEEPFNGLALPHAFRAGMENTOP3ATIPROC GLeeFuncPtr_glAlphaFragmentOp3ATI;
+  #define glAlphaFragmentOp3ATI GLeeFuncPtr_glAlphaFragmentOp3ATI
+#endif
+#ifndef GLEE_H_DEFINED_glSetFragmentShaderConstantATI
+#define GLEE_H_DEFINED_glSetFragmentShaderConstantATI
+  typedef void (APIENTRYP GLEEPFNGLSETFRAGMENTSHADERCONSTANTATIPROC) (GLuint  dst, const GLfloat * value);
+  GLEE_EXTERN GLEEPFNGLSETFRAGMENTSHADERCONSTANTATIPROC GLeeFuncPtr_glSetFragmentShaderConstantATI;
+  #define glSetFragmentShaderConstantATI GLeeFuncPtr_glSetFragmentShaderConstantATI
+#endif
+#endif 
+
+/* GL_ATI_pn_triangles */
+
+#ifndef GL_ATI_pn_triangles
+#define GL_ATI_pn_triangles 1
+#define __GLEE_GL_ATI_pn_triangles 1
+/* Constants */
+#define GL_PN_TRIANGLES_ATI                                0x87F0
+#define GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI          0x87F1
+#define GL_PN_TRIANGLES_POINT_MODE_ATI                     0x87F2
+#define GL_PN_TRIANGLES_NORMAL_MODE_ATI                    0x87F3
+#define GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI              0x87F4
+#define GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI              0x87F5
+#define GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI               0x87F6
+#define GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI             0x87F7
+#define GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI          0x87F8
+#ifndef GLEE_H_DEFINED_glPNTrianglesiATI
+#define GLEE_H_DEFINED_glPNTrianglesiATI
+  typedef void (APIENTRYP GLEEPFNGLPNTRIANGLESIATIPROC) (GLenum  pname, GLint  param);
+  GLEE_EXTERN GLEEPFNGLPNTRIANGLESIATIPROC GLeeFuncPtr_glPNTrianglesiATI;
+  #define glPNTrianglesiATI GLeeFuncPtr_glPNTrianglesiATI
+#endif
+#ifndef GLEE_H_DEFINED_glPNTrianglesfATI
+#define GLEE_H_DEFINED_glPNTrianglesfATI
+  typedef void (APIENTRYP GLEEPFNGLPNTRIANGLESFATIPROC) (GLenum  pname, GLfloat  param);
+  GLEE_EXTERN GLEEPFNGLPNTRIANGLESFATIPROC GLeeFuncPtr_glPNTrianglesfATI;
+  #define glPNTrianglesfATI GLeeFuncPtr_glPNTrianglesfATI
+#endif
+#endif 
+
+/* GL_ATI_vertex_array_object */
+
+#ifndef GL_ATI_vertex_array_object
+#define GL_ATI_vertex_array_object 1
+#define __GLEE_GL_ATI_vertex_array_object 1
+/* Constants */
+#define GL_STATIC_ATI                                      0x8760
+#define GL_DYNAMIC_ATI                                     0x8761
+#define GL_PRESERVE_ATI                                    0x8762
+#define GL_DISCARD_ATI                                     0x8763
+#define GL_OBJECT_BUFFER_SIZE_ATI                          0x8764
+#define GL_OBJECT_BUFFER_USAGE_ATI                         0x8765
+#define GL_ARRAY_OBJECT_BUFFER_ATI                         0x8766
+#define GL_ARRAY_OBJECT_OFFSET_ATI                         0x8767
+#ifndef GLEE_H_DEFINED_glNewObjectBufferATI
+#define GLEE_H_DEFINED_glNewObjectBufferATI
+  typedef GLuint (APIENTRYP GLEEPFNGLNEWOBJECTBUFFERATIPROC) (GLsizei  size, const GLvoid * pointer, GLenum  usage);
+  GLEE_EXTERN GLEEPFNGLNEWOBJECTBUFFERATIPROC GLeeFuncPtr_glNewObjectBufferATI;
+  #define glNewObjectBufferATI GLeeFuncPtr_glNewObjectBufferATI
+#endif
+#ifndef GLEE_H_DEFINED_glIsObjectBufferATI
+#define GLEE_H_DEFINED_glIsObjectBufferATI
+  typedef GLboolean (APIENTRYP GLEEPFNGLISOBJECTBUFFERATIPROC) (GLuint  buffer);
+  GLEE_EXTERN GLEEPFNGLISOBJECTBUFFERATIPROC GLeeFuncPtr_glIsObjectBufferATI;
+  #define glIsObjectBufferATI GLeeFuncPtr_glIsObjectBufferATI
+#endif
+#ifndef GLEE_H_DEFINED_glUpdateObjectBufferATI
+#define GLEE_H_DEFINED_glUpdateObjectBufferATI
+  typedef void (APIENTRYP GLEEPFNGLUPDATEOBJECTBUFFERATIPROC) (GLuint  buffer, GLuint  offset, GLsizei  size, const GLvoid * pointer, GLenum  preserve);
+  GLEE_EXTERN GLEEPFNGLUPDATEOBJECTBUFFERATIPROC GLeeFuncPtr_glUpdateObjectBufferATI;
+  #define glUpdateObjectBufferATI GLeeFuncPtr_glUpdateObjectBufferATI
+#endif
+#ifndef GLEE_H_DEFINED_glGetObjectBufferfvATI
+#define GLEE_H_DEFINED_glGetObjectBufferfvATI
+  typedef void (APIENTRYP GLEEPFNGLGETOBJECTBUFFERFVATIPROC) (GLuint  buffer, GLenum  pname, GLfloat * params);
+  GLEE_EXTERN GLEEPFNGLGETOBJECTBUFFERFVATIPROC GLeeFuncPtr_glGetObjectBufferfvATI;
+  #define glGetObjectBufferfvATI GLeeFuncPtr_glGetObjectBufferfvATI
+#endif
+#ifndef GLEE_H_DEFINED_glGetObjectBufferivATI
+#define GLEE_H_DEFINED_glGetObjectBufferivATI
+  typedef void (APIENTRYP GLEEPFNGLGETOBJECTBUFFERIVATIPROC) (GLuint  buffer, GLenum  pname, GLint * params);
+  GLEE_EXTERN GLEEPFNGLGETOBJECTBUFFERIVATIPROC GLeeFuncPtr_glGetObjectBufferivATI;
+  #define glGetObjectBufferivATI GLeeFuncPtr_glGetObjectBufferivATI
+#endif
+#ifndef GLEE_H_DEFINED_glFreeObjectBufferATI
+#define GLEE_H_DEFINED_glFreeObjectBufferATI
+  typedef void (APIENTRYP GLEEPFNGLFREEOBJECTBUFFERATIPROC) (GLuint  buffer);
+  GLEE_EXTERN GLEEPFNGLFREEOBJECTBUFFERATIPROC GLeeFuncPtr_glFreeObjectBufferATI;
+  #define glFreeObjectBufferATI GLeeFuncPtr_glFreeObjectBufferATI
+#endif
+#ifndef GLEE_H_DEFINED_glArrayObjectATI
+#define GLEE_H_DEFINED_glArrayObjectATI
+  typedef void (APIENTRYP GLEEPFNGLARRAYOBJECTATIPROC) (GLenum  array, GLint  size, GLenum  type, GLsizei  stride, GLuint  buffer, GLuint  offset);
+  GLEE_EXTERN GLEEPFNGLARRAYOBJECTATIPROC GLeeFuncPtr_glArrayObjectATI;
+  #define glArrayObjectATI GLeeFuncPtr_glArrayObjectATI
+#endif
+#ifndef GLEE_H_DEFINED_glGetArrayObjectfvATI
+#define GLEE_H_DEFINED_glGetArrayObjectfvATI
+  typedef void (APIENTRYP GLEEPFNGLGETARRAYOBJECTFVATIPROC) (GLenum  array, GLenum  pname, GLfloat * params);
+  GLEE_EXTERN GLEEPFNGLGETARRAYOBJECTFVATIPROC GLeeFuncPtr_glGetArrayObjectfvATI;
+  #define glGetArrayObjectfvATI GLeeFuncPtr_glGetArrayObjectfvATI
+#endif
+#ifndef GLEE_H_DEFINED_glGetArrayObjectivATI
+#define GLEE_H_DEFINED_glGetArrayObjectivATI
+  typedef void (APIENTRYP GLEEPFNGLGETARRAYOBJECTIVATIPROC) (GLenum  array, GLenum  pname, GLint * params);
+  GLEE_EXTERN GLEEPFNGLGETARRAYOBJECTIVATIPROC GLeeFuncPtr_glGetArrayObjectivATI;
+  #define glGetArrayObjectivATI GLeeFuncPtr_glGetArrayObjectivATI
+#endif
+#ifndef GLEE_H_DEFINED_glVariantArrayObjectATI
+#define GLEE_H_DEFINED_glVariantArrayObjectATI
+  typedef void (APIENTRYP GLEEPFNGLVARIANTARRAYOBJECTATIPROC) (GLuint  id, GLenum  type, GLsizei  stride, GLuint  buffer, GLuint  offset);
+  GLEE_EXTERN GLEEPFNGLVARIANTARRAYOBJECTATIPROC GLeeFuncPtr_glVariantArrayObjectATI;
+  #define glVariantArrayObjectATI GLeeFuncPtr_glVariantArrayObjectATI
+#endif
+#ifndef GLEE_H_DEFINED_glGetVariantArrayObjectfvATI
+#define GLEE_H_DEFINED_glGetVariantArrayObjectfvATI
+  typedef void (APIENTRYP GLEEPFNGLGETVARIANTARRAYOBJECTFVATIPROC) (GLuint  id, GLenum  pname, GLfloat * params);
+  GLEE_EXTERN GLEEPFNGLGETVARIANTARRAYOBJECTFVATIPROC GLeeFuncPtr_glGetVariantArrayObjectfvATI;
+  #define glGetVariantArrayObjectfvATI GLeeFuncPtr_glGetVariantArrayObjectfvATI
+#endif
+#ifndef GLEE_H_DEFINED_glGetVariantArrayObjectivATI
+#define GLEE_H_DEFINED_glGetVariantArrayObjectivATI
+  typedef void (APIENTRYP GLEEPFNGLGETVARIANTARRAYOBJECTIVATIPROC) (GLuint  id, GLenum  pname, GLint * params);
+  GLEE_EXTERN GLEEPFNGLGETVARIANTARRAYOBJECTIVATIPROC GLeeFuncPtr_glGetVariantArrayObjectivATI;
+  #define glGetVariantArrayObjectivATI GLeeFuncPtr_glGetVariantArrayObjectivATI
+#endif
+#endif 
+
+/* GL_EXT_vertex_shader */
+
+#ifndef GL_EXT_vertex_shader
+#define GL_EXT_vertex_shader 1
+#define __GLEE_GL_EXT_vertex_shader 1
+/* Constants */
+#define GL_VERTEX_SHADER_EXT                               0x8780
+#define GL_VERTEX_SHADER_BINDING_EXT                       0x8781
+#define GL_OP_INDEX_EXT                                    0x8782
+#define GL_OP_NEGATE_EXT                                   0x8783
+#define GL_OP_DOT3_EXT                                     0x8784
+#define GL_OP_DOT4_EXT                                     0x8785
+#define GL_OP_MUL_EXT                                      0x8786
+#define GL_OP_ADD_EXT                                      0x8787
+#define GL_OP_MADD_EXT                                     0x8788
+#define GL_OP_FRAC_EXT                                     0x8789
+#define GL_OP_MAX_EXT                                      0x878A
+#define GL_OP_MIN_EXT                                      0x878B
+#define GL_OP_SET_GE_EXT                                   0x878C
+#define GL_OP_SET_LT_EXT                                   0x878D
+#define GL_OP_CLAMP_EXT                                    0x878E
+#define GL_OP_FLOOR_EXT                                    0x878F
+#define GL_OP_ROUND_EXT                                    0x8790
+#define GL_OP_EXP_BASE_2_EXT                               0x8791
+#define GL_OP_LOG_BASE_2_EXT                               0x8792
+#define GL_OP_POWER_EXT                                    0x8793
+#define GL_OP_RECIP_EXT                                    0x8794
+#define GL_OP_RECIP_SQRT_EXT                               0x8795
+#define GL_OP_SUB_EXT                                      0x8796
+#define GL_OP_CROSS_PRODUCT_EXT                            0x8797
+#define GL_OP_MULTIPLY_MATRIX_EXT                          0x8798
+#define GL_OP_MOV_EXT                                      0x8799
+#define GL_OUTPUT_VERTEX_EXT                               0x879A
+#define GL_OUTPUT_COLOR0_EXT                               0x879B
+#define GL_OUTPUT_COLOR1_EXT                               0x879C
+#define GL_OUTPUT_TEXTURE_COORD0_EXT                       0x879D
+#define GL_OUTPUT_TEXTURE_COORD1_EXT                       0x879E
+#define GL_OUTPUT_TEXTURE_COORD2_EXT                       0x879F
+#define GL_OUTPUT_TEXTURE_COORD3_EXT                       0x87A0
+#define GL_OUTPUT_TEXTURE_COORD4_EXT                       0x87A1
+#define GL_OUTPUT_TEXTURE_COORD5_EXT                       0x87A2
+#define GL_OUTPUT_TEXTURE_COORD6_EXT                       0x87A3
+#define GL_OUTPUT_TEXTURE_COORD7_EXT                       0x87A4
+#define GL_OUTPUT_TEXTURE_COORD8_EXT                       0x87A5
+#define GL_OUTPUT_TEXTURE_COORD9_EXT                       0x87A6
+#define GL_OUTPUT_TEXTURE_COORD10_EXT                      0x87A7
+#define GL_OUTPUT_TEXTURE_COORD11_EXT                      0x87A8
+#define GL_OUTPUT_TEXTURE_COORD12_EXT                      0x87A9
+#define GL_OUTPUT_TEXTURE_COORD13_EXT                      0x87AA
+#define GL_OUTPUT_TEXTURE_COORD14_EXT                      0x87AB
+#define GL_OUTPUT_TEXTURE_COORD15_EXT                      0x87AC
+#define GL_OUTPUT_TEXTURE_COORD16_EXT                      0x87AD
+#define GL_OUTPUT_TEXTURE_COORD17_EXT                      0x87AE
+#define GL_OUTPUT_TEXTURE_COORD18_EXT                      0x87AF
+#define GL_OUTPUT_TEXTURE_COORD19_EXT                      0x87B0
+#define GL_OUTPUT_TEXTURE_COORD20_EXT                      0x87B1
+#define GL_OUTPUT_TEXTURE_COORD21_EXT                      0x87B2
+#define GL_OUTPUT_TEXTURE_COORD22_EXT                      0x87B3
+#define GL_OUTPUT_TEXTURE_COORD23_EXT                      0x87B4
+#define GL_OUTPUT_TEXTURE_COORD24_EXT                      0x87B5
+#define GL_OUTPUT_TEXTURE_COORD25_EXT                      0x87B6
+#define GL_OUTPUT_TEXTURE_COORD26_EXT                      0x87B7
+#define GL_OUTPUT_TEXTURE_COORD27_EXT                      0x87B8
+#define GL_OUTPUT_TEXTURE_COORD28_EXT                      0x87B9
+#define GL_OUTPUT_TEXTURE_COORD29_EXT                      0x87BA
+#define GL_OUTPUT_TEXTURE_COORD30_EXT                      0x87BB
+#define GL_OUTPUT_TEXTURE_COORD31_EXT                      0x87BC
+#define GL_OUTPUT_FOG_EXT                                  0x87BD
+#define GL_SCALAR_EXT                                      0x87BE
+#define GL_VECTOR_EXT                                      0x87BF
+#define GL_MATRIX_EXT                                      0x87C0
+#define GL_VARIANT_EXT                                     0x87C1
+#define GL_INVARIANT_EXT                                   0x87C2
+#define GL_LOCAL_CONSTANT_EXT                              0x87C3
+#define GL_LOCAL_EXT                                       0x87C4
+#define GL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT              0x87C5
+#define GL_MAX_VERTEX_SHADER_VARIANTS_EXT                  0x87C6
+#define GL_MAX_VERTEX_SHADER_INVARIANTS_EXT                0x87C7
+#define GL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT           0x87C8
+#define GL_MAX_VERTEX_SHADER_LOCALS_EXT                    0x87C9
+#define GL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT    0x87CA
+#define GL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT        0x87CB
+#define GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT 0x87CC
+#define GL_MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT      0x87CD
+#define GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT          0x87CE
+#define GL_VERTEX_SHADER_INSTRUCTIONS_EXT                  0x87CF
+#define GL_VERTEX_SHADER_VARIANTS_EXT                      0x87D0
+#define GL_VERTEX_SHADER_INVARIANTS_EXT                    0x87D1
+#define GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT               0x87D2
+#define GL_VERTEX_SHADER_LOCALS_EXT                        0x87D3
+#define GL_VERTEX_SHADER_OPTIMIZED_EXT                     0x87D4
+#define GL_X_EXT                                           0x87D5
+#define GL_Y_EXT                                           0x87D6
+#define GL_Z_EXT                                           0x87D7
+#define GL_W_EXT                                           0x87D8
+#define GL_NEGATIVE_X_EXT                                  0x87D9
+#define GL_NEGATIVE_Y_EXT                                  0x87DA
+#define GL_NEGATIVE_Z_EXT                                  0x87DB
+#define GL_NEGATIVE_W_EXT                                  0x87DC
+#define GL_ZERO_EXT                                        0x87DD
+#define GL_ONE_EXT                                         0x87DE
+#define GL_NEGATIVE_ONE_EXT                                0x87DF
+#define GL_NORMALIZED_RANGE_EXT                            0x87E0
+#define GL_FULL_RANGE_EXT                                  0x87E1
+#define GL_CURRENT_VERTEX_EXT                              0x87E2
+#define GL_MVP_MATRIX_EXT                                  0x87E3
+#define GL_VARIANT_VALUE_EXT                               0x87E4
+#define GL_VARIANT_DATATYPE_EXT                            0x87E5
+#define GL_VARIANT_ARRAY_STRIDE_EXT                        0x87E6
+#define GL_VARIANT_ARRAY_TYPE_EXT                          0x87E7
+#define GL_VARIANT_ARRAY_EXT                               0x87E8
+#define GL_VARIANT_ARRAY_POINTER_EXT                       0x87E9
+#define GL_INVARIANT_VALUE_EXT                             0x87EA
+#define GL_INVARIANT_DATATYPE_EXT                          0x87EB
+#define GL_LOCAL_CONSTANT_VALUE_EXT                        0x87EC
+#define GL_LOCAL_CONSTANT_DATATYPE_EXT                     0x87ED
+#ifndef GLEE_H_DEFINED_glBeginVertexShaderEXT
+#define GLEE_H_DEFINED_glBeginVertexShaderEXT
+  typedef void (APIENTRYP GLEEPFNGLBEGINVERTEXSHADEREXTPROC) ();
+  GLEE_EXTERN GLEEPFNGLBEGINVERTEXSHADEREXTPROC GLeeFuncPtr_glBeginVertexShaderEXT;
+  #define glBeginVertexShaderEXT GLeeFuncPtr_glBeginVertexShaderEXT
+#endif
+#ifndef GLEE_H_DEFINED_glEndVertexShaderEXT
+#define GLEE_H_DEFINED_glEndVertexShaderEXT
+  typedef void (APIENTRYP GLEEPFNGLENDVERTEXSHADEREXTPROC) ();
+  GLEE_EXTERN GLEEPFNGLENDVERTEXSHADEREXTPROC GLeeFuncPtr_glEndVertexShaderEXT;
+  #define glEndVertexShaderEXT GLeeFuncPtr_glEndVertexShaderEXT
+#endif
+#ifndef GLEE_H_DEFINED_glBindVertexShaderEXT
+#define GLEE_H_DEFINED_glBindVertexShaderEXT
+  typedef void (APIENTRYP GLEEPFNGLBINDVERTEXSHADEREXTPROC) (GLuint  id);
+  GLEE_EXTERN GLEEPFNGLBINDVERTEXSHADEREXTPROC GLeeFuncPtr_glBindVertexShaderEXT;
+  #define glBindVertexShaderEXT GLeeFuncPtr_glBindVertexShaderEXT
+#endif
+#ifndef GLEE_H_DEFINED_glGenVertexShadersEXT
+#define GLEE_H_DEFINED_glGenVertexShadersEXT
+  typedef GLuint (APIENTRYP GLEEPFNGLGENVERTEXSHADERSEXTPROC) (GLuint  range);
+  GLEE_EXTERN GLEEPFNGLGENVERTEXSHADERSEXTPROC GLeeFuncPtr_glGenVertexShadersEXT;
+  #define glGenVertexShadersEXT GLeeFuncPtr_glGenVertexShadersEXT
+#endif
+#ifndef GLEE_H_DEFINED_glDeleteVertexShaderEXT
+#define GLEE_H_DEFINED_glDeleteVertexShaderEXT
+  typedef void (APIENTRYP GLEEPFNGLDELETEVERTEXSHADEREXTPROC) (GLuint  id);
+  GLEE_EXTERN GLEEPFNGLDELETEVERTEXSHADEREXTPROC GLeeFuncPtr_glDeleteVertexShaderEXT;
+  #define glDeleteVertexShaderEXT GLeeFuncPtr_glDeleteVertexShaderEXT
+#endif
+#ifndef GLEE_H_DEFINED_glShaderOp1EXT
+#define GLEE_H_DEFINED_glShaderOp1EXT
+  typedef void (APIENTRYP GLEEPFNGLSHADEROP1EXTPROC) (GLenum  op, GLuint  res, GLuint  arg1);
+  GLEE_EXTERN GLEEPFNGLSHADEROP1EXTPROC GLeeFuncPtr_glShaderOp1EXT;
+  #define glShaderOp1EXT GLeeFuncPtr_glShaderOp1EXT
+#endif
+#ifndef GLEE_H_DEFINED_glShaderOp2EXT
+#define GLEE_H_DEFINED_glShaderOp2EXT
+  typedef void (APIENTRYP GLEEPFNGLSHADEROP2EXTPROC) (GLenum  op, GLuint  res, GLuint  arg1, GLuint  arg2);
+  GLEE_EXTERN GLEEPFNGLSHADEROP2EXTPROC GLeeFuncPtr_glShaderOp2EXT;
+  #define glShaderOp2EXT GLeeFuncPtr_glShaderOp2EXT
+#endif
+#ifndef GLEE_H_DEFINED_glShaderOp3EXT
+#define GLEE_H_DEFINED_glShaderOp3EXT
+  typedef void (APIENTRYP GLEEPFNGLSHADEROP3EXTPROC) (GLenum  op, GLuint  res, GLuint  arg1, GLuint  arg2, GLuint  arg3);
+  GLEE_EXTERN GLEEPFNGLSHADEROP3EXTPROC GLeeFuncPtr_glShaderOp3EXT;
+  #define glShaderOp3EXT GLeeFuncPtr_glShaderOp3EXT
+#endif
+#ifndef GLEE_H_DEFINED_glSwizzleEXT
+#define GLEE_H_DEFINED_glSwizzleEXT
+  typedef void (APIENTRYP GLEEPFNGLSWIZZLEEXTPROC) (GLuint  res, GLuint  in, GLenum  outX, GLenum  outY, GLenum  outZ, GLenum  outW);
+  GLEE_EXTERN GLEEPFNGLSWIZZLEEXTPROC GLeeFuncPtr_glSwizzleEXT;
+  #define glSwizzleEXT GLeeFuncPtr_glSwizzleEXT
+#endif
+#ifndef GLEE_H_DEFINED_glWriteMaskEXT
+#define GLEE_H_DEFINED_glWriteMaskEXT
+  typedef void (APIENTRYP GLEEPFNGLWRITEMASKEXTPROC) (GLuint  res, GLuint  in, GLenum  outX, GLenum  outY, GLenum  outZ, GLenum  outW);
+  GLEE_EXTERN GLEEPFNGLWRITEMASKEXTPROC GLeeFuncPtr_glWriteMaskEXT;
+  #define glWriteMaskEXT GLeeFuncPtr_glWriteMaskEXT
+#endif
+#ifndef GLEE_H_DEFINED_glInsertComponentEXT
+#define GLEE_H_DEFINED_glInsertComponentEXT
+  typedef void (APIENTRYP GLEEPFNGLINSERTCOMPONENTEXTPROC) (GLuint  res, GLuint  src, GLuint  num);
+  GLEE_EXTERN GLEEPFNGLINSERTCOMPONENTEXTPROC GLeeFuncPtr_glInsertComponentEXT;
+  #define glInsertComponentEXT GLeeFuncPtr_glInsertComponentEXT
+#endif
+#ifndef GLEE_H_DEFINED_glExtractComponentEXT
+#define GLEE_H_DEFINED_glExtractComponentEXT
+  typedef void (APIENTRYP GLEEPFNGLEXTRACTCOMPONENTEXTPROC) (GLuint  res, GLuint  src, GLuint  num);
+  GLEE_EXTERN GLEEPFNGLEXTRACTCOMPONENTEXTPROC GLeeFuncPtr_glExtractComponentEXT;
+  #define glExtractComponentEXT GLeeFuncPtr_glExtractComponentEXT
+#endif
+#ifndef GLEE_H_DEFINED_glGenSymbolsEXT
+#define GLEE_H_DEFINED_glGenSymbolsEXT
+  typedef GLuint (APIENTRYP GLEEPFNGLGENSYMBOLSEXTPROC) (GLenum  datatype, GLenum  storagetype, GLenum  range, GLuint  components);
+  GLEE_EXTERN GLEEPFNGLGENSYMBOLSEXTPROC GLeeFuncPtr_glGenSymbolsEXT;
+  #define glGenSymbolsEXT GLeeFuncPtr_glGenSymbolsEXT
+#endif
+#ifndef GLEE_H_DEFINED_glSetInvariantEXT
+#define GLEE_H_DEFINED_glSetInvariantEXT
+  typedef void (APIENTRYP GLEEPFNGLSETINVARIANTEXTPROC) (GLuint  id, GLenum  type, const GLvoid * addr);
+  GLEE_EXTERN GLEEPFNGLSETINVARIANTEXTPROC GLeeFuncPtr_glSetInvariantEXT;
+  #define glSetInvariantEXT GLeeFuncPtr_glSetInvariantEXT
+#endif
+#ifndef GLEE_H_DEFINED_glSetLocalConstantEXT
+#define GLEE_H_DEFINED_glSetLocalConstantEXT
+  typedef void (APIENTRYP GLEEPFNGLSETLOCALCONSTANTEXTPROC) (GLuint  id, GLenum  type, const GLvoid * addr);
+  GLEE_EXTERN GLEEPFNGLSETLOCALCONSTANTEXTPROC GLeeFuncPtr_glSetLocalConstantEXT;
+  #define glSetLocalConstantEXT GLeeFuncPtr_glSetLocalConstantEXT
+#endif
+#ifndef GLEE_H_DEFINED_glVariantbvEXT
+#define GLEE_H_DEFINED_glVariantbvEXT
+  typedef void (APIENTRYP GLEEPFNGLVARIANTBVEXTPROC) (GLuint  id, const GLbyte * addr);
+  GLEE_EXTERN GLEEPFNGLVARIANTBVEXTPROC GLeeFuncPtr_glVariantbvEXT;
+  #define glVariantbvEXT GLeeFuncPtr_glVariantbvEXT
+#endif
+#ifndef GLEE_H_DEFINED_glVariantsvEXT
+#define GLEE_H_DEFINED_glVariantsvEXT
+  typedef void (APIENTRYP GLEEPFNGLVARIANTSVEXTPROC) (GLuint  id, const GLshort * addr);
+  GLEE_EXTERN GLEEPFNGLVARIANTSVEXTPROC GLeeFuncPtr_glVariantsvEXT;
+  #define glVariantsvEXT GLeeFuncPtr_glVariantsvEXT
+#endif
+#ifndef GLEE_H_DEFINED_glVariantivEXT
+#define GLEE_H_DEFINED_glVariantivEXT
+  typedef void (APIENTRYP GLEEPFNGLVARIANTIVEXTPROC) (GLuint  id, const GLint * addr);
+  GLEE_EXTERN GLEEPFNGLVARIANTIVEXTPROC GLeeFuncPtr_glVariantivEXT;
+  #define glVariantivEXT GLeeFuncPtr_glVariantivEXT
+#endif
+#ifndef GLEE_H_DEFINED_glVariantfvEXT
+#define GLEE_H_DEFINED_glVariantfvEXT
+  typedef void (APIENTRYP GLEEPFNGLVARIANTFVEXTPROC) (GLuint  id, const GLfloat * addr);
+  GLEE_EXTERN GLEEPFNGLVARIANTFVEXTPROC GLeeFuncPtr_glVariantfvEXT;
+  #define glVariantfvEXT GLeeFuncPtr_glVariantfvEXT
+#endif
+#ifndef GLEE_H_DEFINED_glVariantdvEXT
+#define GLEE_H_DEFINED_glVariantdvEXT
+  typedef void (APIENTRYP GLEEPFNGLVARIANTDVEXTPROC) (GLuint  id, const GLdouble * addr);
+  GLEE_EXTERN GLEEPFNGLVARIANTDVEXTPROC GLeeFuncPtr_glVariantdvEXT;
+  #define glVariantdvEXT GLeeFuncPtr_glVariantdvEXT
+#endif
+#ifndef GLEE_H_DEFINED_glVariantubvEXT
+#define GLEE_H_DEFINED_glVariantubvEXT
+  typedef void (APIENTRYP GLEEPFNGLVARIANTUBVEXTPROC) (GLuint  id, const GLubyte * addr);
+  GLEE_EXTERN GLEEPFNGLVARIANTUBVEXTPROC GLeeFuncPtr_glVariantubvEXT;
+  #define glVariantubvEXT GLeeFuncPtr_glVariantubvEXT
+#endif
+#ifndef GLEE_H_DEFINED_glVariantusvEXT
+#define GLEE_H_DEFINED_glVariantusvEXT
+  typedef void (APIENTRYP GLEEPFNGLVARIANTUSVEXTPROC) (GLuint  id, const GLushort * addr);
+  GLEE_EXTERN GLEEPFNGLVARIANTUSVEXTPROC GLeeFuncPtr_glVariantusvEXT;
+  #define glVariantusvEXT GLeeFuncPtr_glVariantusvEXT
+#endif
+#ifndef GLEE_H_DEFINED_glVariantuivEXT
+#define GLEE_H_DEFINED_glVariantuivEXT
+  typedef void (APIENTRYP GLEEPFNGLVARIANTUIVEXTPROC) (GLuint  id, const GLuint * addr);
+  GLEE_EXTERN GLEEPFNGLVARIANTUIVEXTPROC GLeeFuncPtr_glVariantuivEXT;
+  #define glVariantuivEXT GLeeFuncPtr_glVariantuivEXT
+#endif
+#ifndef GLEE_H_DEFINED_glVariantPointerEXT
+#define GLEE_H_DEFINED_glVariantPointerEXT
+  typedef void (APIENTRYP GLEEPFNGLVARIANTPOINTEREXTPROC) (GLuint  id, GLenum  type, GLuint  stride, const GLvoid * addr);
+  GLEE_EXTERN GLEEPFNGLVARIANTPOINTEREXTPROC GLeeFuncPtr_glVariantPointerEXT;
+  #define glVariantPointerEXT GLeeFuncPtr_glVariantPointerEXT
+#endif
+#ifndef GLEE_H_DEFINED_glEnableVariantClientStateEXT
+#define GLEE_H_DEFINED_glEnableVariantClientStateEXT
+  typedef void (APIENTRYP GLEEPFNGLENABLEVARIANTCLIENTSTATEEXTPROC) (GLuint  id);
+  GLEE_EXTERN GLEEPFNGLENABLEVARIANTCLIENTSTATEEXTPROC GLeeFuncPtr_glEnableVariantClientStateEXT;
+  #define glEnableVariantClientStateEXT GLeeFuncPtr_glEnableVariantClientStateEXT
+#endif
+#ifndef GLEE_H_DEFINED_glDisableVariantClientStateEXT
+#define GLEE_H_DEFINED_glDisableVariantClientStateEXT
+  typedef void (APIENTRYP GLEEPFNGLDISABLEVARIANTCLIENTSTATEEXTPROC) (GLuint  id);
+  GLEE_EXTERN GLEEPFNGLDISABLEVARIANTCLIENTSTATEEXTPROC GLeeFuncPtr_glDisableVariantClientStateEXT;
+  #define glDisableVariantClientStateEXT GLeeFuncPtr_glDisableVariantClientStateEXT
+#endif
+#ifndef GLEE_H_DEFINED_glBindLightParameterEXT
+#define GLEE_H_DEFINED_glBindLightParameterEXT
+  typedef GLuint (APIENTRYP GLEEPFNGLBINDLIGHTPARAMETEREXTPROC) (GLenum  light, GLenum  value);
+  GLEE_EXTERN GLEEPFNGLBINDLIGHTPARAMETEREXTPROC GLeeFuncPtr_glBindLightParameterEXT;
+  #define glBindLightParameterEXT GLeeFuncPtr_glBindLightParameterEXT
+#endif
+#ifndef GLEE_H_DEFINED_glBindMaterialParameterEXT
+#define GLEE_H_DEFINED_glBindMaterialParameterEXT
+  typedef GLuint (APIENTRYP GLEEPFNGLBINDMATERIALPARAMETEREXTPROC) (GLenum  face, GLenum  value);
+  GLEE_EXTERN GLEEPFNGLBINDMATERIALPARAMETEREXTPROC GLeeFuncPtr_glBindMaterialParameterEXT;
+  #define glBindMaterialParameterEXT GLeeFuncPtr_glBindMaterialParameterEXT
+#endif
+#ifndef GLEE_H_DEFINED_glBindTexGenParameterEXT
+#define GLEE_H_DEFINED_glBindTexGenParameterEXT
+  typedef GLuint (APIENTRYP GLEEPFNGLBINDTEXGENPARAMETEREXTPROC) (GLenum  unit, GLenum  coord, GLenum  value);
+  GLEE_EXTERN GLEEPFNGLBINDTEXGENPARAMETEREXTPROC GLeeFuncPtr_glBindTexGenParameterEXT;
+  #define glBindTexGenParameterEXT GLeeFuncPtr_glBindTexGenParameterEXT
+#endif
+#ifndef GLEE_H_DEFINED_glBindTextureUnitParameterEXT
+#define GLEE_H_DEFINED_glBindTextureUnitParameterEXT
+  typedef GLuint (APIENTRYP GLEEPFNGLBINDTEXTUREUNITPARAMETEREXTPROC) (GLenum  unit, GLenum  value);
+  GLEE_EXTERN GLEEPFNGLBINDTEXTUREUNITPARAMETEREXTPROC GLeeFuncPtr_glBindTextureUnitParameterEXT;
+  #define glBindTextureUnitParameterEXT GLeeFuncPtr_glBindTextureUnitParameterEXT
+#endif
+#ifndef GLEE_H_DEFINED_glBindParameterEXT
+#define GLEE_H_DEFINED_glBindParameterEXT
+  typedef GLuint (APIENTRYP GLEEPFNGLBINDPARAMETEREXTPROC) (GLenum  value);
+  GLEE_EXTERN GLEEPFNGLBINDPARAMETEREXTPROC GLeeFuncPtr_glBindParameterEXT;
+  #define glBindParameterEXT GLeeFuncPtr_glBindParameterEXT
+#endif
+#ifndef GLEE_H_DEFINED_glIsVariantEnabledEXT
+#define GLEE_H_DEFINED_glIsVariantEnabledEXT
+  typedef GLboolean (APIENTRYP GLEEPFNGLISVARIANTENABLEDEXTPROC) (GLuint  id, GLenum  cap);
+  GLEE_EXTERN GLEEPFNGLISVARIANTENABLEDEXTPROC GLeeFuncPtr_glIsVariantEnabledEXT;
+  #define glIsVariantEnabledEXT GLeeFuncPtr_glIsVariantEnabledEXT
+#endif
+#ifndef GLEE_H_DEFINED_glGetVariantBooleanvEXT
+#define GLEE_H_DEFINED_glGetVariantBooleanvEXT
+  typedef void (APIENTRYP GLEEPFNGLGETVARIANTBOOLEANVEXTPROC) (GLuint  id, GLenum  value, GLboolean * data);
+  GLEE_EXTERN GLEEPFNGLGETVARIANTBOOLEANVEXTPROC GLeeFuncPtr_glGetVariantBooleanvEXT;
+  #define glGetVariantBooleanvEXT GLeeFuncPtr_glGetVariantBooleanvEXT
+#endif
+#ifndef GLEE_H_DEFINED_glGetVariantIntegervEXT
+#define GLEE_H_DEFINED_glGetVariantIntegervEXT
+  typedef void (APIENTRYP GLEEPFNGLGETVARIANTINTEGERVEXTPROC) (GLuint  id, GLenum  value, GLint * data);
+  GLEE_EXTERN GLEEPFNGLGETVARIANTINTEGERVEXTPROC GLeeFuncPtr_glGetVariantIntegervEXT;
+  #define glGetVariantIntegervEXT GLeeFuncPtr_glGetVariantIntegervEXT
+#endif
+#ifndef GLEE_H_DEFINED_glGetVariantFloatvEXT
+#define GLEE_H_DEFINED_glGetVariantFloatvEXT
+  typedef void (APIENTRYP GLEEPFNGLGETVARIANTFLOATVEXTPROC) (GLuint  id, GLenum  value, GLfloat * data);
+  GLEE_EXTERN GLEEPFNGLGETVARIANTFLOATVEXTPROC GLeeFuncPtr_glGetVariantFloatvEXT;
+  #define glGetVariantFloatvEXT GLeeFuncPtr_glGetVariantFloatvEXT
+#endif
+#ifndef GLEE_H_DEFINED_glGetVariantPointervEXT
+#define GLEE_H_DEFINED_glGetVariantPointervEXT
+  typedef void (APIENTRYP GLEEPFNGLGETVARIANTPOINTERVEXTPROC) (GLuint  id, GLenum  value, GLvoid* * data);
+  GLEE_EXTERN GLEEPFNGLGETVARIANTPOINTERVEXTPROC GLeeFuncPtr_glGetVariantPointervEXT;
+  #define glGetVariantPointervEXT GLeeFuncPtr_glGetVariantPointervEXT
+#endif
+#ifndef GLEE_H_DEFINED_glGetInvariantBooleanvEXT
+#define GLEE_H_DEFINED_glGetInvariantBooleanvEXT
+  typedef void (APIENTRYP GLEEPFNGLGETINVARIANTBOOLEANVEXTPROC) (GLuint  id, GLenum  value, GLboolean * data);
+  GLEE_EXTERN GLEEPFNGLGETINVARIANTBOOLEANVEXTPROC GLeeFuncPtr_glGetInvariantBooleanvEXT;
+  #define glGetInvariantBooleanvEXT GLeeFuncPtr_glGetInvariantBooleanvEXT
+#endif
+#ifndef GLEE_H_DEFINED_glGetInvariantIntegervEXT
+#define GLEE_H_DEFINED_glGetInvariantIntegervEXT
+  typedef void (APIENTRYP GLEEPFNGLGETINVARIANTINTEGERVEXTPROC) (GLuint  id, GLenum  value, GLint * data);
+  GLEE_EXTERN GLEEPFNGLGETINVARIANTINTEGERVEXTPROC GLeeFuncPtr_glGetInvariantIntegervEXT;
+  #define glGetInvariantIntegervEXT GLeeFuncPtr_glGetInvariantIntegervEXT
+#endif
+#ifndef GLEE_H_DEFINED_glGetInvariantFloatvEXT
+#define GLEE_H_DEFINED_glGetInvariantFloatvEXT
+  typedef void (APIENTRYP GLEEPFNGLGETINVARIANTFLOATVEXTPROC) (GLuint  id, GLenum  value, GLfloat * data);
+  GLEE_EXTERN GLEEPFNGLGETINVARIANTFLOATVEXTPROC GLeeFuncPtr_glGetInvariantFloatvEXT;
+  #define glGetInvariantFloatvEXT GLeeFuncPtr_glGetInvariantFloatvEXT
+#endif
+#ifndef GLEE_H_DEFINED_glGetLocalConstantBooleanvEXT
+#define GLEE_H_DEFINED_glGetLocalConstantBooleanvEXT
+  typedef void (APIENTRYP GLEEPFNGLGETLOCALCONSTANTBOOLEANVEXTPROC) (GLuint  id, GLenum  value, GLboolean * data);
+  GLEE_EXTERN GLEEPFNGLGETLOCALCONSTANTBOOLEANVEXTPROC GLeeFuncPtr_glGetLocalConstantBooleanvEXT;
+  #define glGetLocalConstantBooleanvEXT GLeeFuncPtr_glGetLocalConstantBooleanvEXT
+#endif
+#ifndef GLEE_H_DEFINED_glGetLocalConstantIntegervEXT
+#define GLEE_H_DEFINED_glGetLocalConstantIntegervEXT
+  typedef void (APIENTRYP GLEEPFNGLGETLOCALCONSTANTINTEGERVEXTPROC) (GLuint  id, GLenum  value, GLint * data);
+  GLEE_EXTERN GLEEPFNGLGETLOCALCONSTANTINTEGERVEXTPROC GLeeFuncPtr_glGetLocalConstantIntegervEXT;
+  #define glGetLocalConstantIntegervEXT GLeeFuncPtr_glGetLocalConstantIntegervEXT
+#endif
+#ifndef GLEE_H_DEFINED_glGetLocalConstantFloatvEXT
+#define GLEE_H_DEFINED_glGetLocalConstantFloatvEXT
+  typedef void (APIENTRYP GLEEPFNGLGETLOCALCONSTANTFLOATVEXTPROC) (GLuint  id, GLenum  value, GLfloat * data);
+  GLEE_EXTERN GLEEPFNGLGETLOCALCONSTANTFLOATVEXTPROC GLeeFuncPtr_glGetLocalConstantFloatvEXT;
+  #define glGetLocalConstantFloatvEXT GLeeFuncPtr_glGetLocalConstantFloatvEXT
+#endif
+#endif 
+
+/* GL_ATI_vertex_streams */
+
+#ifndef GL_ATI_vertex_streams
+#define GL_ATI_vertex_streams 1
+#define __GLEE_GL_ATI_vertex_streams 1
+/* Constants */
+#define GL_MAX_VERTEX_STREAMS_ATI                          0x876B
+#define GL_VERTEX_STREAM0_ATI                              0x876C
+#define GL_VERTEX_STREAM1_ATI                              0x876D
+#define GL_VERTEX_STREAM2_ATI                              0x876E
+#define GL_VERTEX_STREAM3_ATI                              0x876F
+#define GL_VERTEX_STREAM4_ATI                              0x8770
+#define GL_VERTEX_STREAM5_ATI                              0x8771
+#define GL_VERTEX_STREAM6_ATI                              0x8772
+#define GL_VERTEX_STREAM7_ATI                              0x8773
+#define GL_VERTEX_SOURCE_ATI                               0x8774
+#ifndef GLEE_H_DEFINED_glVertexStream1sATI
+#define GLEE_H_DEFINED_glVertexStream1sATI
+  typedef void (APIENTRYP GLEEPFNGLVERTEXSTREAM1SATIPROC) (GLenum  stream, GLshort  x);
+  GLEE_EXTERN GLEEPFNGLVERTEXSTREAM1SATIPROC GLeeFuncPtr_glVertexStream1sATI;
+  #define glVertexStream1sATI GLeeFuncPtr_glVertexStream1sATI
+#endif
+#ifndef GLEE_H_DEFINED_glVertexStream1svATI
+#define GLEE_H_DEFINED_glVertexStream1svATI
+  typedef void (APIENTRYP GLEEPFNGLVERTEXSTREAM1SVATIPROC) (GLenum  stream, const GLshort * coords);
+  GLEE_EXTERN GLEEPFNGLVERTEXSTREAM1SVATIPROC GLeeFuncPtr_glVertexStream1svATI;
+  #define glVertexStream1svATI GLeeFuncPtr_glVertexStream1svATI
+#endif
+#ifndef GLEE_H_DEFINED_glVertexStream1iATI
+#define GLEE_H_DEFINED_glVertexStream1iATI
+  typedef void (APIENTRYP GLEEPFNGLVERTEXSTREAM1IATIPROC) (GLenum  stream, GLint  x);
+  GLEE_EXTERN GLEEPFNGLVERTEXSTREAM1IATIPROC GLeeFuncPtr_glVertexStream1iATI;
+  #define glVertexStream1iATI GLeeFuncPtr_glVertexStream1iATI
+#endif
+#ifndef GLEE_H_DEFINED_glVertexStream1ivATI
+#define GLEE_H_DEFINED_glVertexStream1ivATI
+  typedef void (APIENTRYP GLEEPFNGLVERTEXSTREAM1IVATIPROC) (GLenum  stream, const GLint * coords);
+  GLEE_EXTERN GLEEPFNGLVERTEXSTREAM1IVATIPROC GLeeFuncPtr_glVertexStream1ivATI;
+  #define glVertexStream1ivATI GLeeFuncPtr_glVertexStream1ivATI
+#endif
+#ifndef GLEE_H_DEFINED_glVertexStream1fATI
+#define GLEE_H_DEFINED_glVertexStream1fATI
+  typedef void (APIENTRYP GLEEPFNGLVERTEXSTREAM1FATIPROC) (GLenum  stream, GLfloat  x);
+  GLEE_EXTERN GLEEPFNGLVERTEXSTREAM1FATIPROC GLeeFuncPtr_glVertexStream1fATI;
+  #define glVertexStream1fATI GLeeFuncPtr_glVertexStream1fATI
+#endif
+#ifndef GLEE_H_DEFINED_glVertexStream1fvATI
+#define GLEE_H_DEFINED_glVertexStream1fvATI
+  typedef void (APIENTRYP GLEEPFNGLVERTEXSTREAM1FVATIPROC) (GLenum  stream, const GLfloat * coords);
+  GLEE_EXTERN GLEEPFNGLVERTEXSTREAM1FVATIPROC GLeeFuncPtr_glVertexStream1fvATI;
+  #define glVertexStream1fvATI GLeeFuncPtr_glVertexStream1fvATI
+#endif
+#ifndef GLEE_H_DEFINED_glVertexStream1dATI
+#define GLEE_H_DEFINED_glVertexStream1dATI
+  typedef void (APIENTRYP GLEEPFNGLVERTEXSTREAM1DATIPROC) (GLenum  stream, GLdouble  x);
+  GLEE_EXTERN GLEEPFNGLVERTEXSTREAM1DATIPROC GLeeFuncPtr_glVertexStream1dATI;
+  #define glVertexStream1dATI GLeeFuncPtr_glVertexStream1dATI
+#endif
+#ifndef GLEE_H_DEFINED_glVertexStream1dvATI
+#define GLEE_H_DEFINED_glVertexStream1dvATI
+  typedef void (APIENTRYP GLEEPFNGLVERTEXSTREAM1DVATIPROC) (GLenum  stream, const GLdouble * coords);
+  GLEE_EXTERN GLEEPFNGLVERTEXSTREAM1DVATIPROC GLeeFuncPtr_glVertexStream1dvATI;
+  #define glVertexStream1dvATI GLeeFuncPtr_glVertexStream1dvATI
+#endif
+#ifndef GLEE_H_DEFINED_glVertexStream2sATI
+#define GLEE_H_DEFINED_glVertexStream2sATI
+  typedef void (APIENTRYP GLEEPFNGLVERTEXSTREAM2SATIPROC) (GLenum  stream, GLshort  x, GLshort  y);
+  GLEE_EXTERN GLEEPFNGLVERTEXSTREAM2SATIPROC GLeeFuncPtr_glVertexStream2sATI;
+  #define glVertexStream2sATI GLeeFuncPtr_glVertexStream2sATI
+#endif
+#ifndef GLEE_H_DEFINED_glVertexStream2svATI
+#define GLEE_H_DEFINED_glVertexStream2svATI
+  typedef void (APIENTRYP GLEEPFNGLVERTEXSTREAM2SVATIPROC) (GLenum  stream, const GLshort * coords);
+  GLEE_EXTERN GLEEPFNGLVERTEXSTREAM2SVATIPROC GLeeFuncPtr_glVertexStream2svATI;
+  #define glVertexStream2svATI GLeeFuncPtr_glVertexStream2svATI
+#endif
+#ifndef GLEE_H_DEFINED_glVertexStream2iATI
+#define GLEE_H_DEFINED_glVertexStream2iATI
+  typedef void (APIENTRYP GLEEPFNGLVERTEXSTREAM2IATIPROC) (GLenum  stream, GLint  x, GLint  y);
+  GLEE_EXTERN GLEEPFNGLVERTEXSTREAM2IATIPROC GLeeFuncPtr_glVertexStream2iATI;
+  #define glVertexStream2iATI GLeeFuncPtr_glVertexStream2iATI
+#endif
+#ifndef GLEE_H_DEFINED_glVertexStream2ivATI
+#define GLEE_H_DEFINED_glVertexStream2ivATI
+  typedef void (APIENTRYP GLEEPFNGLVERTEXSTREAM2IVATIPROC) (GLenum  stream, const GLint * coords);
+  GLEE_EXTERN GLEEPFNGLVERTEXSTREAM2IVATIPROC GLeeFuncPtr_glVertexStream2ivATI;
+  #define glVertexStream2ivATI GLeeFuncPtr_glVertexStream2ivATI
+#endif
+#ifndef GLEE_H_DEFINED_glVertexStream2fATI
+#define GLEE_H_DEFINED_glVertexStream2fATI
+  typedef void (APIENTRYP GLEEPFNGLVERTEXSTREAM2FATIPROC) (GLenum  stream, GLfloat  x, GLfloat  y);
+  GLEE_EXTERN GLEEPFNGLVERTEXSTREAM2FATIPROC GLeeFuncPtr_glVertexStream2fATI;
+  #define glVertexStream2fATI GLeeFuncPtr_glVertexStream2fATI
+#endif
+#ifndef GLEE_H_DEFINED_glVertexStream2fvATI
+#define GLEE_H_DEFINED_glVertexStream2fvATI
+  typedef void (APIENTRYP GLEEPFNGLVERTEXSTREAM2FVATIPROC) (GLenum  stream, const GLfloat * coords);
+  GLEE_EXTERN GLEEPFNGLVERTEXSTREAM2FVATIPROC GLeeFuncPtr_glVertexStream2fvATI;
+  #define glVertexStream2fvATI GLeeFuncPtr_glVertexStream2fvATI
+#endif
+#ifndef GLEE_H_DEFINED_glVertexStream2dATI
+#define GLEE_H_DEFINED_glVertexStream2dATI
+  typedef void (APIENTRYP GLEEPFNGLVERTEXSTREAM2DATIPROC) (GLenum  stream, GLdouble  x, GLdouble  y);
+  GLEE_EXTERN GLEEPFNGLVERTEXSTREAM2DATIPROC GLeeFuncPtr_glVertexStream2dATI;
+  #define glVertexStream2dATI GLeeFuncPtr_glVertexStream2dATI
+#endif
+#ifndef GLEE_H_DEFINED_glVertexStream2dvATI
+#define GLEE_H_DEFINED_glVertexStream2dvATI
+  typedef void (APIENTRYP GLEEPFNGLVERTEXSTREAM2DVATIPROC) (GLenum  stream, const GLdouble * coords);
+  GLEE_EXTERN GLEEPFNGLVERTEXSTREAM2DVATIPROC GLeeFuncPtr_glVertexStream2dvATI;
+  #define glVertexStream2dvATI GLeeFuncPtr_glVertexStream2dvATI
+#endif
+#ifndef GLEE_H_DEFINED_glVertexStream3sATI
+#define GLEE_H_DEFINED_glVertexStream3sATI
+  typedef void (APIENTRYP GLEEPFNGLVERTEXSTREAM3SATIPROC) (GLenum  stream, GLshort  x, GLshort  y, GLshort  z);
+  GLEE_EXTERN GLEEPFNGLVERTEXSTREAM3SATIPROC GLeeFuncPtr_glVertexStream3sATI;
+  #define glVertexStream3sATI GLeeFuncPtr_glVertexStream3sATI
+#endif
+#ifndef GLEE_H_DEFINED_glVertexStream3svATI
+#define GLEE_H_DEFINED_glVertexStream3svATI
+  typedef void (APIENTRYP GLEEPFNGLVERTEXSTREAM3SVATIPROC) (GLenum  stream, const GLshort * coords);
+  GLEE_EXTERN GLEEPFNGLVERTEXSTREAM3SVATIPROC GLeeFuncPtr_glVertexStream3svATI;
+  #define glVertexStream3svATI GLeeFuncPtr_glVertexStream3svATI
+#endif
+#ifndef GLEE_H_DEFINED_glVertexStream3iATI
+#define GLEE_H_DEFINED_glVertexStream3iATI
+  typedef void (APIENTRYP GLEEPFNGLVERTEXSTREAM3IATIPROC) (GLenum  stream, GLint  x, GLint  y, GLint  z);
+  GLEE_EXTERN GLEEPFNGLVERTEXSTREAM3IATIPROC GLeeFuncPtr_glVertexStream3iATI;
+  #define glVertexStream3iATI GLeeFuncPtr_glVertexStream3iATI
+#endif
+#ifndef GLEE_H_DEFINED_glVertexStream3ivATI
+#define GLEE_H_DEFINED_glVertexStream3ivATI
+  typedef void (APIENTRYP GLEEPFNGLVERTEXSTREAM3IVATIPROC) (GLenum  stream, const GLint * coords);
+  GLEE_EXTERN GLEEPFNGLVERTEXSTREAM3IVATIPROC GLeeFuncPtr_glVertexStream3ivATI;
+  #define glVertexStream3ivATI GLeeFuncPtr_glVertexStream3ivATI
+#endif
+#ifndef GLEE_H_DEFINED_glVertexStream3fATI
+#define GLEE_H_DEFINED_glVertexStream3fATI
+  typedef void (APIENTRYP GLEEPFNGLVERTEXSTREAM3FATIPROC) (GLenum  stream, GLfloat  x, GLfloat  y, GLfloat  z);
+  GLEE_EXTERN GLEEPFNGLVERTEXSTREAM3FATIPROC GLeeFuncPtr_glVertexStream3fATI;
+  #define glVertexStream3fATI GLeeFuncPtr_glVertexStream3fATI
+#endif
+#ifndef GLEE_H_DEFINED_glVertexStream3fvATI
+#define GLEE_H_DEFINED_glVertexStream3fvATI
+  typedef void (APIENTRYP GLEEPFNGLVERTEXSTREAM3FVATIPROC) (GLenum  stream, const GLfloat * coords);
+  GLEE_EXTERN GLEEPFNGLVERTEXSTREAM3FVATIPROC GLeeFuncPtr_glVertexStream3fvATI;
+  #define glVertexStream3fvATI GLeeFuncPtr_glVertexStream3fvATI
+#endif
+#ifndef GLEE_H_DEFINED_glVertexStream3dATI
+#define GLEE_H_DEFINED_glVertexStream3dATI
+  typedef void (APIENTRYP GLEEPFNGLVERTEXSTREAM3DATIPROC) (GLenum  stream, GLdouble  x, GLdouble  y, GLdouble  z);
+  GLEE_EXTERN GLEEPFNGLVERTEXSTREAM3DATIPROC GLeeFuncPtr_glVertexStream3dATI;
+  #define glVertexStream3dATI GLeeFuncPtr_glVertexStream3dATI
+#endif
+#ifndef GLEE_H_DEFINED_glVertexStream3dvATI
+#define GLEE_H_DEFINED_glVertexStream3dvATI
+  typedef void (APIENTRYP GLEEPFNGLVERTEXSTREAM3DVATIPROC) (GLenum  stream, const GLdouble * coords);
+  GLEE_EXTERN GLEEPFNGLVERTEXSTREAM3DVATIPROC GLeeFuncPtr_glVertexStream3dvATI;
+  #define glVertexStream3dvATI GLeeFuncPtr_glVertexStream3dvATI
+#endif
+#ifndef GLEE_H_DEFINED_glVertexStream4sATI
+#define GLEE_H_DEFINED_glVertexStream4sATI
+  typedef void (APIENTRYP GLEEPFNGLVERTEXSTREAM4SATIPROC) (GLenum  stream, GLshort  x, GLshort  y, GLshort  z, GLshort  w);
+  GLEE_EXTERN GLEEPFNGLVERTEXSTREAM4SATIPROC GLeeFuncPtr_glVertexStream4sATI;
+  #define glVertexStream4sATI GLeeFuncPtr_glVertexStream4sATI
+#endif
+#ifndef GLEE_H_DEFINED_glVertexStream4svATI
+#define GLEE_H_DEFINED_glVertexStream4svATI
+  typedef void (APIENTRYP GLEEPFNGLVERTEXSTREAM4SVATIPROC) (GLenum  stream, const GLshort * coords);
+  GLEE_EXTERN GLEEPFNGLVERTEXSTREAM4SVATIPROC GLeeFuncPtr_glVertexStream4svATI;
+  #define glVertexStream4svATI GLeeFuncPtr_glVertexStream4svATI
+#endif
+#ifndef GLEE_H_DEFINED_glVertexStream4iATI
+#define GLEE_H_DEFINED_glVertexStream4iATI
+  typedef void (APIENTRYP GLEEPFNGLVERTEXSTREAM4IATIPROC) (GLenum  stream, GLint  x, GLint  y, GLint  z, GLint  w);
+  GLEE_EXTERN GLEEPFNGLVERTEXSTREAM4IATIPROC GLeeFuncPtr_glVertexStream4iATI;
+  #define glVertexStream4iATI GLeeFuncPtr_glVertexStream4iATI
+#endif
+#ifndef GLEE_H_DEFINED_glVertexStream4ivATI
+#define GLEE_H_DEFINED_glVertexStream4ivATI
+  typedef void (APIENTRYP GLEEPFNGLVERTEXSTREAM4IVATIPROC) (GLenum  stream, const GLint * coords);
+  GLEE_EXTERN GLEEPFNGLVERTEXSTREAM4IVATIPROC GLeeFuncPtr_glVertexStream4ivATI;
+  #define glVertexStream4ivATI GLeeFuncPtr_glVertexStream4ivATI
+#endif
+#ifndef GLEE_H_DEFINED_glVertexStream4fATI
+#define GLEE_H_DEFINED_glVertexStream4fATI
+  typedef void (APIENTRYP GLEEPFNGLVERTEXSTREAM4FATIPROC) (GLenum  stream, GLfloat  x, GLfloat  y, GLfloat  z, GLfloat  w);
+  GLEE_EXTERN GLEEPFNGLVERTEXSTREAM4FATIPROC GLeeFuncPtr_glVertexStream4fATI;
+  #define glVertexStream4fATI GLeeFuncPtr_glVertexStream4fATI
+#endif
+#ifndef GLEE_H_DEFINED_glVertexStream4fvATI
+#define GLEE_H_DEFINED_glVertexStream4fvATI
+  typedef void (APIENTRYP GLEEPFNGLVERTEXSTREAM4FVATIPROC) (GLenum  stream, const GLfloat * coords);
+  GLEE_EXTERN GLEEPFNGLVERTEXSTREAM4FVATIPROC GLeeFuncPtr_glVertexStream4fvATI;
+  #define glVertexStream4fvATI GLeeFuncPtr_glVertexStream4fvATI
+#endif
+#ifndef GLEE_H_DEFINED_glVertexStream4dATI
+#define GLEE_H_DEFINED_glVertexStream4dATI
+  typedef void (APIENTRYP GLEEPFNGLVERTEXSTREAM4DATIPROC) (GLenum  stream, GLdouble  x, GLdouble  y, GLdouble  z, GLdouble  w);
+  GLEE_EXTERN GLEEPFNGLVERTEXSTREAM4DATIPROC GLeeFuncPtr_glVertexStream4dATI;
+  #define glVertexStream4dATI GLeeFuncPtr_glVertexStream4dATI
+#endif
+#ifndef GLEE_H_DEFINED_glVertexStream4dvATI
+#define GLEE_H_DEFINED_glVertexStream4dvATI
+  typedef void (APIENTRYP GLEEPFNGLVERTEXSTREAM4DVATIPROC) (GLenum  stream, const GLdouble * coords);
+  GLEE_EXTERN GLEEPFNGLVERTEXSTREAM4DVATIPROC GLeeFuncPtr_glVertexStream4dvATI;
+  #define glVertexStream4dvATI GLeeFuncPtr_glVertexStream4dvATI
+#endif
+#ifndef GLEE_H_DEFINED_glNormalStream3bATI
+#define GLEE_H_DEFINED_glNormalStream3bATI
+  typedef void (APIENTRYP GLEEPFNGLNORMALSTREAM3BATIPROC) (GLenum  stream, GLbyte  nx, GLbyte  ny, GLbyte  nz);
+  GLEE_EXTERN GLEEPFNGLNORMALSTREAM3BATIPROC GLeeFuncPtr_glNormalStream3bATI;
+  #define glNormalStream3bATI GLeeFuncPtr_glNormalStream3bATI
+#endif
+#ifndef GLEE_H_DEFINED_glNormalStream3bvATI
+#define GLEE_H_DEFINED_glNormalStream3bvATI
+  typedef void (APIENTRYP GLEEPFNGLNORMALSTREAM3BVATIPROC) (GLenum  stream, const GLbyte * coords);
+  GLEE_EXTERN GLEEPFNGLNORMALSTREAM3BVATIPROC GLeeFuncPtr_glNormalStream3bvATI;
+  #define glNormalStream3bvATI GLeeFuncPtr_glNormalStream3bvATI
+#endif
+#ifndef GLEE_H_DEFINED_glNormalStream3sATI
+#define GLEE_H_DEFINED_glNormalStream3sATI
+  typedef void (APIENTRYP GLEEPFNGLNORMALSTREAM3SATIPROC) (GLenum  stream, GLshort  nx, GLshort  ny, GLshort  nz);
+  GLEE_EXTERN GLEEPFNGLNORMALSTREAM3SATIPROC GLeeFuncPtr_glNormalStream3sATI;
+  #define glNormalStream3sATI GLeeFuncPtr_glNormalStream3sATI
+#endif
+#ifndef GLEE_H_DEFINED_glNormalStream3svATI
+#define GLEE_H_DEFINED_glNormalStream3svATI
+  typedef void (APIENTRYP GLEEPFNGLNORMALSTREAM3SVATIPROC) (GLenum  stream, const GLshort * coords);
+  GLEE_EXTERN GLEEPFNGLNORMALSTREAM3SVATIPROC GLeeFuncPtr_glNormalStream3svATI;
+  #define glNormalStream3svATI GLeeFuncPtr_glNormalStream3svATI
+#endif
+#ifndef GLEE_H_DEFINED_glNormalStream3iATI
+#define GLEE_H_DEFINED_glNormalStream3iATI
+  typedef void (APIENTRYP GLEEPFNGLNORMALSTREAM3IATIPROC) (GLenum  stream, GLint  nx, GLint  ny, GLint  nz);
+  GLEE_EXTERN GLEEPFNGLNORMALSTREAM3IATIPROC GLeeFuncPtr_glNormalStream3iATI;
+  #define glNormalStream3iATI GLeeFuncPtr_glNormalStream3iATI
+#endif
+#ifndef GLEE_H_DEFINED_glNormalStream3ivATI
+#define GLEE_H_DEFINED_glNormalStream3ivATI
+  typedef void (APIENTRYP GLEEPFNGLNORMALSTREAM3IVATIPROC) (GLenum  stream, const GLint * coords);
+  GLEE_EXTERN GLEEPFNGLNORMALSTREAM3IVATIPROC GLeeFuncPtr_glNormalStream3ivATI;
+  #define glNormalStream3ivATI GLeeFuncPtr_glNormalStream3ivATI
+#endif
+#ifndef GLEE_H_DEFINED_glNormalStream3fATI
+#define GLEE_H_DEFINED_glNormalStream3fATI
+  typedef void (APIENTRYP GLEEPFNGLNORMALSTREAM3FATIPROC) (GLenum  stream, GLfloat  nx, GLfloat  ny, GLfloat  nz);
+  GLEE_EXTERN GLEEPFNGLNORMALSTREAM3FATIPROC GLeeFuncPtr_glNormalStream3fATI;
+  #define glNormalStream3fATI GLeeFuncPtr_glNormalStream3fATI
+#endif
+#ifndef GLEE_H_DEFINED_glNormalStream3fvATI
+#define GLEE_H_DEFINED_glNormalStream3fvATI
+  typedef void (APIENTRYP GLEEPFNGLNORMALSTREAM3FVATIPROC) (GLenum  stream, const GLfloat * coords);
+  GLEE_EXTERN GLEEPFNGLNORMALSTREAM3FVATIPROC GLeeFuncPtr_glNormalStream3fvATI;
+  #define glNormalStream3fvATI GLeeFuncPtr_glNormalStream3fvATI
+#endif
+#ifndef GLEE_H_DEFINED_glNormalStream3dATI
+#define GLEE_H_DEFINED_glNormalStream3dATI
+  typedef void (APIENTRYP GLEEPFNGLNORMALSTREAM3DATIPROC) (GLenum  stream, GLdouble  nx, GLdouble  ny, GLdouble  nz);
+  GLEE_EXTERN GLEEPFNGLNORMALSTREAM3DATIPROC GLeeFuncPtr_glNormalStream3dATI;
+  #define glNormalStream3dATI GLeeFuncPtr_glNormalStream3dATI
+#endif
+#ifndef GLEE_H_DEFINED_glNormalStream3dvATI
+#define GLEE_H_DEFINED_glNormalStream3dvATI
+  typedef void (APIENTRYP GLEEPFNGLNORMALSTREAM3DVATIPROC) (GLenum  stream, const GLdouble * coords);
+  GLEE_EXTERN GLEEPFNGLNORMALSTREAM3DVATIPROC GLeeFuncPtr_glNormalStream3dvATI;
+  #define glNormalStream3dvATI GLeeFuncPtr_glNormalStream3dvATI
+#endif
+#ifndef GLEE_H_DEFINED_glClientActiveVertexStreamATI
+#define GLEE_H_DEFINED_glClientActiveVertexStreamATI
+  typedef void (APIENTRYP GLEEPFNGLCLIENTACTIVEVERTEXSTREAMATIPROC) (GLenum  stream);
+  GLEE_EXTERN GLEEPFNGLCLIENTACTIVEVERTEXSTREAMATIPROC GLeeFuncPtr_glClientActiveVertexStreamATI;
+  #define glClientActiveVertexStreamATI GLeeFuncPtr_glClientActiveVertexStreamATI
+#endif
+#ifndef GLEE_H_DEFINED_glVertexBlendEnviATI
+#define GLEE_H_DEFINED_glVertexBlendEnviATI
+  typedef void (APIENTRYP GLEEPFNGLVERTEXBLENDENVIATIPROC) (GLenum  pname, GLint  param);
+  GLEE_EXTERN GLEEPFNGLVERTEXBLENDENVIATIPROC GLeeFuncPtr_glVertexBlendEnviATI;
+  #define glVertexBlendEnviATI GLeeFuncPtr_glVertexBlendEnviATI
+#endif
+#ifndef GLEE_H_DEFINED_glVertexBlendEnvfATI
+#define GLEE_H_DEFINED_glVertexBlendEnvfATI
+  typedef void (APIENTRYP GLEEPFNGLVERTEXBLENDENVFATIPROC) (GLenum  pname, GLfloat  param);
+  GLEE_EXTERN GLEEPFNGLVERTEXBLENDENVFATIPROC GLeeFuncPtr_glVertexBlendEnvfATI;
+  #define glVertexBlendEnvfATI GLeeFuncPtr_glVertexBlendEnvfATI
+#endif
+#endif 
+
+/* GL_ATI_element_array */
+
+#ifndef GL_ATI_element_array
+#define GL_ATI_element_array 1
+#define __GLEE_GL_ATI_element_array 1
+/* Constants */
+#define GL_ELEMENT_ARRAY_ATI                               0x8768
+#define GL_ELEMENT_ARRAY_TYPE_ATI                          0x8769
+#define GL_ELEMENT_ARRAY_POINTER_ATI                       0x876A
+#ifndef GLEE_H_DEFINED_glElementPointerATI
+#define GLEE_H_DEFINED_glElementPointerATI
+  typedef void (APIENTRYP GLEEPFNGLELEMENTPOINTERATIPROC) (GLenum  type, const GLvoid * pointer);
+  GLEE_EXTERN GLEEPFNGLELEMENTPOINTERATIPROC GLeeFuncPtr_glElementPointerATI;
+  #define glElementPointerATI GLeeFuncPtr_glElementPointerATI
+#endif
+#ifndef GLEE_H_DEFINED_glDrawElementArrayATI
+#define GLEE_H_DEFINED_glDrawElementArrayATI
+  typedef void (APIENTRYP GLEEPFNGLDRAWELEMENTARRAYATIPROC) (GLenum  mode, GLsizei  count);
+  GLEE_EXTERN GLEEPFNGLDRAWELEMENTARRAYATIPROC GLeeFuncPtr_glDrawElementArrayATI;
+  #define glDrawElementArrayATI GLeeFuncPtr_glDrawElementArrayATI
+#endif
+#ifndef GLEE_H_DEFINED_glDrawRangeElementArrayATI
+#define GLEE_H_DEFINED_glDrawRangeElementArrayATI
+  typedef void (APIENTRYP GLEEPFNGLDRAWRANGEELEMENTARRAYATIPROC) (GLenum  mode, GLuint  start, GLuint  end, GLsizei  count);
+  GLEE_EXTERN GLEEPFNGLDRAWRANGEELEMENTARRAYATIPROC GLeeFuncPtr_glDrawRangeElementArrayATI;
+  #define glDrawRangeElementArrayATI GLeeFuncPtr_glDrawRangeElementArrayATI
+#endif
+#endif 
+
+/* GL_SUN_mesh_array */
+
+#ifndef GL_SUN_mesh_array
+#define GL_SUN_mesh_array 1
+#define __GLEE_GL_SUN_mesh_array 1
+/* Constants */
+#define GL_QUAD_MESH_SUN                                   0x8614
+#define GL_TRIANGLE_MESH_SUN                               0x8615
+#ifndef GLEE_H_DEFINED_glDrawMeshArraysSUN
+#define GLEE_H_DEFINED_glDrawMeshArraysSUN
+  typedef void (APIENTRYP GLEEPFNGLDRAWMESHARRAYSSUNPROC) (GLenum  mode, GLint  first, GLsizei  count, GLsizei  width);
+  GLEE_EXTERN GLEEPFNGLDRAWMESHARRAYSSUNPROC GLeeFuncPtr_glDrawMeshArraysSUN;
+  #define glDrawMeshArraysSUN GLeeFuncPtr_glDrawMeshArraysSUN
+#endif
+#endif 
+
+/* GL_SUN_slice_accum */
+
+#ifndef GL_SUN_slice_accum
+#define GL_SUN_slice_accum 1
+#define __GLEE_GL_SUN_slice_accum 1
+/* Constants */
+#define GL_SLICE_ACCUM_SUN                                 0x85CC
+#endif 
+
+/* GL_NV_multisample_filter_hint */
+
+#ifndef GL_NV_multisample_filter_hint
+#define GL_NV_multisample_filter_hint 1
+#define __GLEE_GL_NV_multisample_filter_hint 1
+/* Constants */
+#define GL_MULTISAMPLE_FILTER_HINT_NV                      0x8534
+#endif 
+
+/* GL_NV_depth_clamp */
+
+#ifndef GL_NV_depth_clamp
+#define GL_NV_depth_clamp 1
+#define __GLEE_GL_NV_depth_clamp 1
+/* Constants */
+#define GL_DEPTH_CLAMP_NV                                  0x864F
+#endif 
+
+/* GL_NV_occlusion_query */
+
+#ifndef GL_NV_occlusion_query
+#define GL_NV_occlusion_query 1
+#define __GLEE_GL_NV_occlusion_query 1
+/* Constants */
+#define GL_PIXEL_COUNTER_BITS_NV                           0x8864
+#define GL_CURRENT_OCCLUSION_QUERY_ID_NV                   0x8865
+#define GL_PIXEL_COUNT_NV                                  0x8866
+#define GL_PIXEL_COUNT_AVAILABLE_NV                        0x8867
+#ifndef GLEE_H_DEFINED_glGenOcclusionQueriesNV
+#define GLEE_H_DEFINED_glGenOcclusionQueriesNV
+  typedef void (APIENTRYP GLEEPFNGLGENOCCLUSIONQUERIESNVPROC) (GLsizei  n, GLuint * ids);
+  GLEE_EXTERN GLEEPFNGLGENOCCLUSIONQUERIESNVPROC GLeeFuncPtr_glGenOcclusionQueriesNV;
+  #define glGenOcclusionQueriesNV GLeeFuncPtr_glGenOcclusionQueriesNV
+#endif
+#ifndef GLEE_H_DEFINED_glDeleteOcclusionQueriesNV
+#define GLEE_H_DEFINED_glDeleteOcclusionQueriesNV
+  typedef void (APIENTRYP GLEEPFNGLDELETEOCCLUSIONQUERIESNVPROC) (GLsizei  n, const GLuint * ids);
+  GLEE_EXTERN GLEEPFNGLDELETEOCCLUSIONQUERIESNVPROC GLeeFuncPtr_glDeleteOcclusionQueriesNV;
+  #define glDeleteOcclusionQueriesNV GLeeFuncPtr_glDeleteOcclusionQueriesNV
+#endif
+#ifndef GLEE_H_DEFINED_glIsOcclusionQueryNV
+#define GLEE_H_DEFINED_glIsOcclusionQueryNV
+  typedef GLboolean (APIENTRYP GLEEPFNGLISOCCLUSIONQUERYNVPROC) (GLuint  id);
+  GLEE_EXTERN GLEEPFNGLISOCCLUSIONQUERYNVPROC GLeeFuncPtr_glIsOcclusionQueryNV;
+  #define glIsOcclusionQueryNV GLeeFuncPtr_glIsOcclusionQueryNV
+#endif
+#ifndef GLEE_H_DEFINED_glBeginOcclusionQueryNV
+#define GLEE_H_DEFINED_glBeginOcclusionQueryNV
+  typedef void (APIENTRYP GLEEPFNGLBEGINOCCLUSIONQUERYNVPROC) (GLuint  id);
+  GLEE_EXTERN GLEEPFNGLBEGINOCCLUSIONQUERYNVPROC GLeeFuncPtr_glBeginOcclusionQueryNV;
+  #define glBeginOcclusionQueryNV GLeeFuncPtr_glBeginOcclusionQueryNV
+#endif
+#ifndef GLEE_H_DEFINED_glEndOcclusionQueryNV
+#define GLEE_H_DEFINED_glEndOcclusionQueryNV
+  typedef void (APIENTRYP GLEEPFNGLENDOCCLUSIONQUERYNVPROC) ();
+  GLEE_EXTERN GLEEPFNGLENDOCCLUSIONQUERYNVPROC GLeeFuncPtr_glEndOcclusionQueryNV;
+  #define glEndOcclusionQueryNV GLeeFuncPtr_glEndOcclusionQueryNV
+#endif
+#ifndef GLEE_H_DEFINED_glGetOcclusionQueryivNV
+#define GLEE_H_DEFINED_glGetOcclusionQueryivNV
+  typedef void (APIENTRYP GLEEPFNGLGETOCCLUSIONQUERYIVNVPROC) (GLuint  id, GLenum  pname, GLint * params);
+  GLEE_EXTERN GLEEPFNGLGETOCCLUSIONQUERYIVNVPROC GLeeFuncPtr_glGetOcclusionQueryivNV;
+  #define glGetOcclusionQueryivNV GLeeFuncPtr_glGetOcclusionQueryivNV
+#endif
+#ifndef GLEE_H_DEFINED_glGetOcclusionQueryuivNV
+#define GLEE_H_DEFINED_glGetOcclusionQueryuivNV
+  typedef void (APIENTRYP GLEEPFNGLGETOCCLUSIONQUERYUIVNVPROC) (GLuint  id, GLenum  pname, GLuint * params);
+  GLEE_EXTERN GLEEPFNGLGETOCCLUSIONQUERYUIVNVPROC GLeeFuncPtr_glGetOcclusionQueryuivNV;
+  #define glGetOcclusionQueryuivNV GLeeFuncPtr_glGetOcclusionQueryuivNV
+#endif
+#endif 
+
+/* GL_NV_point_sprite */
+
+#ifndef GL_NV_point_sprite
+#define GL_NV_point_sprite 1
+#define __GLEE_GL_NV_point_sprite 1
+/* Constants */
+#define GL_POINT_SPRITE_NV                                 0x8861
+#define GL_COORD_REPLACE_NV                                0x8862
+#define GL_POINT_SPRITE_R_MODE_NV                          0x8863
+#ifndef GLEE_H_DEFINED_glPointParameteriNV
+#define GLEE_H_DEFINED_glPointParameteriNV
+  typedef void (APIENTRYP GLEEPFNGLPOINTPARAMETERINVPROC) (GLenum  pname, GLint  param);
+  GLEE_EXTERN GLEEPFNGLPOINTPARAMETERINVPROC GLeeFuncPtr_glPointParameteriNV;
+  #define glPointParameteriNV GLeeFuncPtr_glPointParameteriNV
+#endif
+#ifndef GLEE_H_DEFINED_glPointParameterivNV
+#define GLEE_H_DEFINED_glPointParameterivNV
+  typedef void (APIENTRYP GLEEPFNGLPOINTPARAMETERIVNVPROC) (GLenum  pname, const GLint * params);
+  GLEE_EXTERN GLEEPFNGLPOINTPARAMETERIVNVPROC GLeeFuncPtr_glPointParameterivNV;
+  #define glPointParameterivNV GLeeFuncPtr_glPointParameterivNV
+#endif
+#endif 
+
+/* GL_NV_texture_shader3 */
+
+#ifndef GL_NV_texture_shader3
+#define GL_NV_texture_shader3 1
+#define __GLEE_GL_NV_texture_shader3 1
+/* Constants */
+#define GL_OFFSET_PROJECTIVE_TEXTURE_2D_NV                 0x8850
+#define GL_OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV           0x8851
+#define GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV          0x8852
+#define GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV    0x8853
+#define GL_OFFSET_HILO_TEXTURE_2D_NV                       0x8854
+#define GL_OFFSET_HILO_TEXTURE_RECTANGLE_NV                0x8855
+#define GL_OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV            0x8856
+#define GL_OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV     0x8857
+#define GL_DEPENDENT_HILO_TEXTURE_2D_NV                    0x8858
+#define GL_DEPENDENT_RGB_TEXTURE_3D_NV                     0x8859
+#define GL_DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV               0x885A
+#define GL_DOT_PRODUCT_PASS_THROUGH_NV                     0x885B
+#define GL_DOT_PRODUCT_TEXTURE_1D_NV                       0x885C
+#define GL_DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV             0x885D
+#define GL_HILO8_NV                                        0x885E
+#define GL_SIGNED_HILO8_NV                                 0x885F
+#define GL_FORCE_BLUE_TO_ONE_NV                            0x8860
+#endif 
+
+/* GL_NV_vertex_program1_1 */
+
+#ifndef GL_NV_vertex_program1_1
+#define GL_NV_vertex_program1_1 1
+#define __GLEE_GL_NV_vertex_program1_1 1
+/* Constants */
+#endif 
+
+/* GL_EXT_shadow_funcs */
+
+#ifndef GL_EXT_shadow_funcs
+#define GL_EXT_shadow_funcs 1
+#define __GLEE_GL_EXT_shadow_funcs 1
+/* Constants */
+#endif 
+
+/* GL_EXT_stencil_two_side */
+
+#ifndef GL_EXT_stencil_two_side
+#define GL_EXT_stencil_two_side 1
+#define __GLEE_GL_EXT_stencil_two_side 1
+/* Constants */
+#define GL_STENCIL_TEST_TWO_SIDE_EXT                       0x8910
+#define GL_ACTIVE_STENCIL_FACE_EXT                         0x8911
+#ifndef GLEE_H_DEFINED_glActiveStencilFaceEXT
+#define GLEE_H_DEFINED_glActiveStencilFaceEXT
+  typedef void (APIENTRYP GLEEPFNGLACTIVESTENCILFACEEXTPROC) (GLenum  face);
+  GLEE_EXTERN GLEEPFNGLACTIVESTENCILFACEEXTPROC GLeeFuncPtr_glActiveStencilFaceEXT;
+  #define glActiveStencilFaceEXT GLeeFuncPtr_glActiveStencilFaceEXT
+#endif
+#endif 
+
+/* GL_ATI_text_fragment_shader */
+
+#ifndef GL_ATI_text_fragment_shader
+#define GL_ATI_text_fragment_shader 1
+#define __GLEE_GL_ATI_text_fragment_shader 1
+/* Constants */
+#define GL_TEXT_FRAGMENT_SHADER_ATI                        0x8200
+#endif 
+
+/* GL_APPLE_client_storage */
+
+#ifndef GL_APPLE_client_storage
+#define GL_APPLE_client_storage 1
+#define __GLEE_GL_APPLE_client_storage 1
+/* Constants */
+#define GL_UNPACK_CLIENT_STORAGE_APPLE                     0x85B2
+#endif 
+
+/* GL_APPLE_element_array */
+
+#ifndef GL_APPLE_element_array
+#define GL_APPLE_element_array 1
+#define __GLEE_GL_APPLE_element_array 1
+/* Constants */
+#define GL_ELEMENT_ARRAY_APPLE                             0x8A0C
+#define GL_ELEMENT_ARRAY_TYPE_APPLE                        0x8A0D
+#define GL_ELEMENT_ARRAY_POINTER_APPLE                     0x8A0E
+#ifndef GLEE_H_DEFINED_glElementPointerAPPLE
+#define GLEE_H_DEFINED_glElementPointerAPPLE
+  typedef void (APIENTRYP GLEEPFNGLELEMENTPOINTERAPPLEPROC) (GLenum  type, const GLvoid * pointer);
+  GLEE_EXTERN GLEEPFNGLELEMENTPOINTERAPPLEPROC GLeeFuncPtr_glElementPointerAPPLE;
+  #define glElementPointerAPPLE GLeeFuncPtr_glElementPointerAPPLE
+#endif
+#ifndef GLEE_H_DEFINED_glDrawElementArrayAPPLE
+#define GLEE_H_DEFINED_glDrawElementArrayAPPLE
+  typedef void (APIENTRYP GLEEPFNGLDRAWELEMENTARRAYAPPLEPROC) (GLenum  mode, GLint  first, GLsizei  count);
+  GLEE_EXTERN GLEEPFNGLDRAWELEMENTARRAYAPPLEPROC GLeeFuncPtr_glDrawElementArrayAPPLE;
+  #define glDrawElementArrayAPPLE GLeeFuncPtr_glDrawElementArrayAPPLE
+#endif
+#ifndef GLEE_H_DEFINED_glDrawRangeElementArrayAPPLE
+#define GLEE_H_DEFINED_glDrawRangeElementArrayAPPLE
+  typedef void (APIENTRYP GLEEPFNGLDRAWRANGEELEMENTARRAYAPPLEPROC) (GLenum  mode, GLuint  start, GLuint  end, GLint  first, GLsizei  count);
+  GLEE_EXTERN GLEEPFNGLDRAWRANGEELEMENTARRAYAPPLEPROC GLeeFuncPtr_glDrawRangeElementArrayAPPLE;
+  #define glDrawRangeElementArrayAPPLE GLeeFuncPtr_glDrawRangeElementArrayAPPLE
+#endif
+#ifndef GLEE_H_DEFINED_glMultiDrawElementArrayAPPLE
+#define GLEE_H_DEFINED_glMultiDrawElementArrayAPPLE
+  typedef void (APIENTRYP GLEEPFNGLMULTIDRAWELEMENTARRAYAPPLEPROC) (GLenum  mode, const GLint * first, const GLsizei * count, GLsizei  primcount);
+  GLEE_EXTERN GLEEPFNGLMULTIDRAWELEMENTARRAYAPPLEPROC GLeeFuncPtr_glMultiDrawElementArrayAPPLE;
+  #define glMultiDrawElementArrayAPPLE GLeeFuncPtr_glMultiDrawElementArrayAPPLE
+#endif
+#ifndef GLEE_H_DEFINED_glMultiDrawRangeElementArrayAPPLE
+#define GLEE_H_DEFINED_glMultiDrawRangeElementArrayAPPLE
+  typedef void (APIENTRYP GLEEPFNGLMULTIDRAWRANGEELEMENTARRAYAPPLEPROC) (GLenum  mode, GLuint  start, GLuint  end, const GLint * first, const GLsizei * count, GLsizei  primcount);
+  GLEE_EXTERN GLEEPFNGLMULTIDRAWRANGEELEMENTARRAYAPPLEPROC GLeeFuncPtr_glMultiDrawRangeElementArrayAPPLE;
+  #define glMultiDrawRangeElementArrayAPPLE GLeeFuncPtr_glMultiDrawRangeElementArrayAPPLE
+#endif
+#endif 
+
+/* GL_APPLE_fence */
+
+#ifndef GL_APPLE_fence
+#define GL_APPLE_fence 1
+#define __GLEE_GL_APPLE_fence 1
+/* Constants */
+#define GL_DRAW_PIXELS_APPLE                               0x8A0A
+#define GL_FENCE_APPLE                                     0x8A0B
+#ifndef GLEE_H_DEFINED_glGenFencesAPPLE
+#define GLEE_H_DEFINED_glGenFencesAPPLE
+  typedef void (APIENTRYP GLEEPFNGLGENFENCESAPPLEPROC) (GLsizei  n, GLuint * fences);
+  GLEE_EXTERN GLEEPFNGLGENFENCESAPPLEPROC GLeeFuncPtr_glGenFencesAPPLE;
+  #define glGenFencesAPPLE GLeeFuncPtr_glGenFencesAPPLE
+#endif
+#ifndef GLEE_H_DEFINED_glDeleteFencesAPPLE
+#define GLEE_H_DEFINED_glDeleteFencesAPPLE
+  typedef void (APIENTRYP GLEEPFNGLDELETEFENCESAPPLEPROC) (GLsizei  n, const GLuint * fences);
+  GLEE_EXTERN GLEEPFNGLDELETEFENCESAPPLEPROC GLeeFuncPtr_glDeleteFencesAPPLE;
+  #define glDeleteFencesAPPLE GLeeFuncPtr_glDeleteFencesAPPLE
+#endif
+#ifndef GLEE_H_DEFINED_glSetFenceAPPLE
+#define GLEE_H_DEFINED_glSetFenceAPPLE
+  typedef void (APIENTRYP GLEEPFNGLSETFENCEAPPLEPROC) (GLuint  fence);
+  GLEE_EXTERN GLEEPFNGLSETFENCEAPPLEPROC GLeeFuncPtr_glSetFenceAPPLE;
+  #define glSetFenceAPPLE GLeeFuncPtr_glSetFenceAPPLE
+#endif
+#ifndef GLEE_H_DEFINED_glIsFenceAPPLE
+#define GLEE_H_DEFINED_glIsFenceAPPLE
+  typedef GLboolean (APIENTRYP GLEEPFNGLISFENCEAPPLEPROC) (GLuint  fence);
+  GLEE_EXTERN GLEEPFNGLISFENCEAPPLEPROC GLeeFuncPtr_glIsFenceAPPLE;
+  #define glIsFenceAPPLE GLeeFuncPtr_glIsFenceAPPLE
+#endif
+#ifndef GLEE_H_DEFINED_glTestFenceAPPLE
+#define GLEE_H_DEFINED_glTestFenceAPPLE
+  typedef GLboolean (APIENTRYP GLEEPFNGLTESTFENCEAPPLEPROC) (GLuint  fence);
+  GLEE_EXTERN GLEEPFNGLTESTFENCEAPPLEPROC GLeeFuncPtr_glTestFenceAPPLE;
+  #define glTestFenceAPPLE GLeeFuncPtr_glTestFenceAPPLE
+#endif
+#ifndef GLEE_H_DEFINED_glFinishFenceAPPLE
+#define GLEE_H_DEFINED_glFinishFenceAPPLE
+  typedef void (APIENTRYP GLEEPFNGLFINISHFENCEAPPLEPROC) (GLuint  fence);
+  GLEE_EXTERN GLEEPFNGLFINISHFENCEAPPLEPROC GLeeFuncPtr_glFinishFenceAPPLE;
+  #define glFinishFenceAPPLE GLeeFuncPtr_glFinishFenceAPPLE
+#endif
+#ifndef GLEE_H_DEFINED_glTestObjectAPPLE
+#define GLEE_H_DEFINED_glTestObjectAPPLE
+  typedef GLboolean (APIENTRYP GLEEPFNGLTESTOBJECTAPPLEPROC) (GLenum  object, GLuint  name);
+  GLEE_EXTERN GLEEPFNGLTESTOBJECTAPPLEPROC GLeeFuncPtr_glTestObjectAPPLE;
+  #define glTestObjectAPPLE GLeeFuncPtr_glTestObjectAPPLE
+#endif
+#ifndef GLEE_H_DEFINED_glFinishObjectAPPLE
+#define GLEE_H_DEFINED_glFinishObjectAPPLE
+  typedef void (APIENTRYP GLEEPFNGLFINISHOBJECTAPPLEPROC) (GLenum  object, GLint  name);
+  GLEE_EXTERN GLEEPFNGLFINISHOBJECTAPPLEPROC GLeeFuncPtr_glFinishObjectAPPLE;
+  #define glFinishObjectAPPLE GLeeFuncPtr_glFinishObjectAPPLE
+#endif
+#endif 
+
+/* GL_APPLE_vertex_array_object */
+
+#ifndef GL_APPLE_vertex_array_object
+#define GL_APPLE_vertex_array_object 1
+#define __GLEE_GL_APPLE_vertex_array_object 1
+/* Constants */
+#define GL_VERTEX_ARRAY_BINDING_APPLE                      0x85B5
+#ifndef GLEE_H_DEFINED_glBindVertexArrayAPPLE
+#define GLEE_H_DEFINED_glBindVertexArrayAPPLE
+  typedef void (APIENTRYP GLEEPFNGLBINDVERTEXARRAYAPPLEPROC) (GLuint  array);
+  GLEE_EXTERN GLEEPFNGLBINDVERTEXARRAYAPPLEPROC GLeeFuncPtr_glBindVertexArrayAPPLE;
+  #define glBindVertexArrayAPPLE GLeeFuncPtr_glBindVertexArrayAPPLE
+#endif
+#ifndef GLEE_H_DEFINED_glDeleteVertexArraysAPPLE
+#define GLEE_H_DEFINED_glDeleteVertexArraysAPPLE
+  typedef void (APIENTRYP GLEEPFNGLDELETEVERTEXARRAYSAPPLEPROC) (GLsizei  n, const GLuint * arrays);
+  GLEE_EXTERN GLEEPFNGLDELETEVERTEXARRAYSAPPLEPROC GLeeFuncPtr_glDeleteVertexArraysAPPLE;
+  #define glDeleteVertexArraysAPPLE GLeeFuncPtr_glDeleteVertexArraysAPPLE
+#endif
+#ifndef GLEE_H_DEFINED_glGenVertexArraysAPPLE
+#define GLEE_H_DEFINED_glGenVertexArraysAPPLE
+  typedef void (APIENTRYP GLEEPFNGLGENVERTEXARRAYSAPPLEPROC) (GLsizei  n, GLuint * arrays);
+  GLEE_EXTERN GLEEPFNGLGENVERTEXARRAYSAPPLEPROC GLeeFuncPtr_glGenVertexArraysAPPLE;
+  #define glGenVertexArraysAPPLE GLeeFuncPtr_glGenVertexArraysAPPLE
+#endif
+#ifndef GLEE_H_DEFINED_glIsVertexArrayAPPLE
+#define GLEE_H_DEFINED_glIsVertexArrayAPPLE
+  typedef GLboolean (APIENTRYP GLEEPFNGLISVERTEXARRAYAPPLEPROC) (GLuint  array);
+  GLEE_EXTERN GLEEPFNGLISVERTEXARRAYAPPLEPROC GLeeFuncPtr_glIsVertexArrayAPPLE;
+  #define glIsVertexArrayAPPLE GLeeFuncPtr_glIsVertexArrayAPPLE
+#endif
+#endif 
+
+/* GL_APPLE_vertex_array_range */
+
+#ifndef GL_APPLE_vertex_array_range
+#define GL_APPLE_vertex_array_range 1
+#define __GLEE_GL_APPLE_vertex_array_range 1
+/* Constants */
+#define GL_VERTEX_ARRAY_RANGE_APPLE                        0x851D
+#define GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE                 0x851E
+#define GL_VERTEX_ARRAY_STORAGE_HINT_APPLE                 0x851F
+#define GL_VERTEX_ARRAY_RANGE_POINTER_APPLE                0x8521
+#define GL_STORAGE_CLIENT_APPLE                            0x85B4
+#define GL_STORAGE_CACHED_APPLE                            0x85BE
+#define GL_STORAGE_SHARED_APPLE                            0x85BF
+#ifndef GLEE_H_DEFINED_glVertexArrayRangeAPPLE
+#define GLEE_H_DEFINED_glVertexArrayRangeAPPLE
+  typedef void (APIENTRYP GLEEPFNGLVERTEXARRAYRANGEAPPLEPROC) (GLsizei  length, GLvoid * pointer);
+  GLEE_EXTERN GLEEPFNGLVERTEXARRAYRANGEAPPLEPROC GLeeFuncPtr_glVertexArrayRangeAPPLE;
+  #define glVertexArrayRangeAPPLE GLeeFuncPtr_glVertexArrayRangeAPPLE
+#endif
+#ifndef GLEE_H_DEFINED_glFlushVertexArrayRangeAPPLE
+#define GLEE_H_DEFINED_glFlushVertexArrayRangeAPPLE
+  typedef void (APIENTRYP GLEEPFNGLFLUSHVERTEXARRAYRANGEAPPLEPROC) (GLsizei  length, GLvoid * pointer);
+  GLEE_EXTERN GLEEPFNGLFLUSHVERTEXARRAYRANGEAPPLEPROC GLeeFuncPtr_glFlushVertexArrayRangeAPPLE;
+  #define glFlushVertexArrayRangeAPPLE GLeeFuncPtr_glFlushVertexArrayRangeAPPLE
+#endif
+#ifndef GLEE_H_DEFINED_glVertexArrayParameteriAPPLE
+#define GLEE_H_DEFINED_glVertexArrayParameteriAPPLE
+  typedef void (APIENTRYP GLEEPFNGLVERTEXARRAYPARAMETERIAPPLEPROC) (GLenum  pname, GLint  param);
+  GLEE_EXTERN GLEEPFNGLVERTEXARRAYPARAMETERIAPPLEPROC GLeeFuncPtr_glVertexArrayParameteriAPPLE;
+  #define glVertexArrayParameteriAPPLE GLeeFuncPtr_glVertexArrayParameteriAPPLE
+#endif
+#endif 
+
+/* GL_APPLE_ycbcr_422 */
+
+#ifndef GL_APPLE_ycbcr_422
+#define GL_APPLE_ycbcr_422 1
+#define __GLEE_GL_APPLE_ycbcr_422 1
+/* Constants */
+#define GL_YCBCR_422_APPLE                                 0x85B9
+#define GL_UNSIGNED_SHORT_8_8_APPLE                        0x85BA
+#define GL_UNSIGNED_SHORT_8_8_REV_APPLE                    0x85BB
+#endif 
+
+/* GL_S3_s3tc */
+
+#ifndef GL_S3_s3tc
+#define GL_S3_s3tc 1
+#define __GLEE_GL_S3_s3tc 1
+/* Constants */
+#define GL_RGB_S3TC                                        0x83A0
+#define GL_RGB4_S3TC                                       0x83A1
+#define GL_RGBA_S3TC                                       0x83A2
+#define GL_RGBA4_S3TC                                      0x83A3
+#endif 
+
+/* GL_ATI_draw_buffers */
+
+#ifndef GL_ATI_draw_buffers
+#define GL_ATI_draw_buffers 1
+#define __GLEE_GL_ATI_draw_buffers 1
+/* Constants */
+#define GL_MAX_DRAW_BUFFERS_ATI                            0x8824
+#define GL_DRAW_BUFFER0_ATI                                0x8825
+#define GL_DRAW_BUFFER1_ATI                                0x8826
+#define GL_DRAW_BUFFER2_ATI                                0x8827
+#define GL_DRAW_BUFFER3_ATI                                0x8828
+#define GL_DRAW_BUFFER4_ATI                                0x8829
+#define GL_DRAW_BUFFER5_ATI                                0x882A
+#define GL_DRAW_BUFFER6_ATI                                0x882B
+#define GL_DRAW_BUFFER7_ATI                                0x882C
+#define GL_DRAW_BUFFER8_ATI                                0x882D
+#define GL_DRAW_BUFFER9_ATI                                0x882E
+#define GL_DRAW_BUFFER10_ATI                               0x882F
+#define GL_DRAW_BUFFER11_ATI                               0x8830
+#define GL_DRAW_BUFFER12_ATI                               0x8831
+#define GL_DRAW_BUFFER13_ATI                               0x8832
+#define GL_DRAW_BUFFER14_ATI                               0x8833
+#define GL_DRAW_BUFFER15_ATI                               0x8834
+#ifndef GLEE_H_DEFINED_glDrawBuffersATI
+#define GLEE_H_DEFINED_glDrawBuffersATI
+  typedef void (APIENTRYP GLEEPFNGLDRAWBUFFERSATIPROC) (GLsizei  n, const GLenum * bufs);
+  GLEE_EXTERN GLEEPFNGLDRAWBUFFERSATIPROC GLeeFuncPtr_glDrawBuffersATI;
+  #define glDrawBuffersATI GLeeFuncPtr_glDrawBuffersATI
+#endif
+#endif 
+
+/* GL_ATI_pixel_format_float */
+
+#ifndef GL_ATI_pixel_format_float
+#define GL_ATI_pixel_format_float 1
+#define __GLEE_GL_ATI_pixel_format_float 1
+/* Constants */
+#define GL_TYPE_RGBA_FLOAT_ATI                             0x8820
+#define GL_COLOR_CLEAR_UNCLAMPED_VALUE_ATI                 0x8835
+#endif 
+
+/* GL_ATI_texture_env_combine3 */
+
+#ifndef GL_ATI_texture_env_combine3
+#define GL_ATI_texture_env_combine3 1
+#define __GLEE_GL_ATI_texture_env_combine3 1
+/* Constants */
+#define GL_MODULATE_ADD_ATI                                0x8744
+#define GL_MODULATE_SIGNED_ADD_ATI                         0x8745
+#define GL_MODULATE_SUBTRACT_ATI                           0x8746
+#endif 
+
+/* GL_ATI_texture_float */
+
+#ifndef GL_ATI_texture_float
+#define GL_ATI_texture_float 1
+#define __GLEE_GL_ATI_texture_float 1
+/* Constants */
+#define GL_RGBA_FLOAT32_ATI                                0x8814
+#define GL_RGB_FLOAT32_ATI                                 0x8815
+#define GL_ALPHA_FLOAT32_ATI                               0x8816
+#define GL_INTENSITY_FLOAT32_ATI                           0x8817
+#define GL_LUMINANCE_FLOAT32_ATI                           0x8818
+#define GL_LUMINANCE_ALPHA_FLOAT32_ATI                     0x8819
+#define GL_RGBA_FLOAT16_ATI                                0x881A
+#define GL_RGB_FLOAT16_ATI                                 0x881B
+#define GL_ALPHA_FLOAT16_ATI                               0x881C
+#define GL_INTENSITY_FLOAT16_ATI                           0x881D
+#define GL_LUMINANCE_FLOAT16_ATI                           0x881E
+#define GL_LUMINANCE_ALPHA_FLOAT16_ATI                     0x881F
+#endif 
+
+/* GL_NV_float_buffer */
+
+#ifndef GL_NV_float_buffer
+#define GL_NV_float_buffer 1
+#define __GLEE_GL_NV_float_buffer 1
+/* Constants */
+#define GL_FLOAT_R_NV                                      0x8880
+#define GL_FLOAT_RG_NV                                     0x8881
+#define GL_FLOAT_RGB_NV                                    0x8882
+#define GL_FLOAT_RGBA_NV                                   0x8883
+#define GL_FLOAT_R16_NV                                    0x8884
+#define GL_FLOAT_R32_NV                                    0x8885
+#define GL_FLOAT_RG16_NV                                   0x8886
+#define GL_FLOAT_RG32_NV                                   0x8887
+#define GL_FLOAT_RGB16_NV                                  0x8888
+#define GL_FLOAT_RGB32_NV                                  0x8889
+#define GL_FLOAT_RGBA16_NV                                 0x888A
+#define GL_FLOAT_RGBA32_NV                                 0x888B
+#define GL_TEXTURE_FLOAT_COMPONENTS_NV                     0x888C
+#define GL_FLOAT_CLEAR_COLOR_VALUE_NV                      0x888D
+#define GL_FLOAT_RGBA_MODE_NV                              0x888E
+#endif 
+
+/* GL_NV_fragment_program */
+
+#ifndef GL_NV_fragment_program
+#define GL_NV_fragment_program 1
+#define __GLEE_GL_NV_fragment_program 1
+/* Constants */
+#define GL_MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV        0x8868
+#define GL_FRAGMENT_PROGRAM_NV                             0x8870
+#define GL_MAX_TEXTURE_COORDS_NV                           0x8871
+#define GL_MAX_TEXTURE_IMAGE_UNITS_NV                      0x8872
+#define GL_FRAGMENT_PROGRAM_BINDING_NV                     0x8873
+#define GL_PROGRAM_ERROR_STRING_NV                         0x8874
+#ifndef GLEE_H_DEFINED_glProgramNamedParameter4fNV
+#define GLEE_H_DEFINED_glProgramNamedParameter4fNV
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMNAMEDPARAMETER4FNVPROC) (GLuint  id, GLsizei  len, const GLubyte * name, GLfloat  x, GLfloat  y, GLfloat  z, GLfloat  w);
+  GLEE_EXTERN GLEEPFNGLPROGRAMNAMEDPARAMETER4FNVPROC GLeeFuncPtr_glProgramNamedParameter4fNV;
+  #define glProgramNamedParameter4fNV GLeeFuncPtr_glProgramNamedParameter4fNV
+#endif
+#ifndef GLEE_H_DEFINED_glProgramNamedParameter4dNV
+#define GLEE_H_DEFINED_glProgramNamedParameter4dNV
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMNAMEDPARAMETER4DNVPROC) (GLuint  id, GLsizei  len, const GLubyte * name, GLdouble  x, GLdouble  y, GLdouble  z, GLdouble  w);
+  GLEE_EXTERN GLEEPFNGLPROGRAMNAMEDPARAMETER4DNVPROC GLeeFuncPtr_glProgramNamedParameter4dNV;
+  #define glProgramNamedParameter4dNV GLeeFuncPtr_glProgramNamedParameter4dNV
+#endif
+#ifndef GLEE_H_DEFINED_glProgramNamedParameter4fvNV
+#define GLEE_H_DEFINED_glProgramNamedParameter4fvNV
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMNAMEDPARAMETER4FVNVPROC) (GLuint  id, GLsizei  len, const GLubyte * name, const GLfloat * v);
+  GLEE_EXTERN GLEEPFNGLPROGRAMNAMEDPARAMETER4FVNVPROC GLeeFuncPtr_glProgramNamedParameter4fvNV;
+  #define glProgramNamedParameter4fvNV GLeeFuncPtr_glProgramNamedParameter4fvNV
+#endif
+#ifndef GLEE_H_DEFINED_glProgramNamedParameter4dvNV
+#define GLEE_H_DEFINED_glProgramNamedParameter4dvNV
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMNAMEDPARAMETER4DVNVPROC) (GLuint  id, GLsizei  len, const GLubyte * name, const GLdouble * v);
+  GLEE_EXTERN GLEEPFNGLPROGRAMNAMEDPARAMETER4DVNVPROC GLeeFuncPtr_glProgramNamedParameter4dvNV;
+  #define glProgramNamedParameter4dvNV GLeeFuncPtr_glProgramNamedParameter4dvNV
+#endif
+#ifndef GLEE_H_DEFINED_glGetProgramNamedParameterfvNV
+#define GLEE_H_DEFINED_glGetProgramNamedParameterfvNV
+  typedef void (APIENTRYP GLEEPFNGLGETPROGRAMNAMEDPARAMETERFVNVPROC) (GLuint  id, GLsizei  len, const GLubyte * name, GLfloat * params);
+  GLEE_EXTERN GLEEPFNGLGETPROGRAMNAMEDPARAMETERFVNVPROC GLeeFuncPtr_glGetProgramNamedParameterfvNV;
+  #define glGetProgramNamedParameterfvNV GLeeFuncPtr_glGetProgramNamedParameterfvNV
+#endif
+#ifndef GLEE_H_DEFINED_glGetProgramNamedParameterdvNV
+#define GLEE_H_DEFINED_glGetProgramNamedParameterdvNV
+  typedef void (APIENTRYP GLEEPFNGLGETPROGRAMNAMEDPARAMETERDVNVPROC) (GLuint  id, GLsizei  len, const GLubyte * name, GLdouble * params);
+  GLEE_EXTERN GLEEPFNGLGETPROGRAMNAMEDPARAMETERDVNVPROC GLeeFuncPtr_glGetProgramNamedParameterdvNV;
+  #define glGetProgramNamedParameterdvNV GLeeFuncPtr_glGetProgramNamedParameterdvNV
+#endif
+#endif 
+
+/* GL_NV_half_float */
+
+#ifndef GL_NV_half_float
+#define GL_NV_half_float 1
+#define __GLEE_GL_NV_half_float 1
+/* Constants */
+#define GL_HALF_FLOAT_NV                                   0x140B
+#ifndef GLEE_H_DEFINED_glVertex2hNV
+#define GLEE_H_DEFINED_glVertex2hNV
+  typedef void (APIENTRYP GLEEPFNGLVERTEX2HNVPROC) (GLhalfNV  x, GLhalfNV  y);
+  GLEE_EXTERN GLEEPFNGLVERTEX2HNVPROC GLeeFuncPtr_glVertex2hNV;
+  #define glVertex2hNV GLeeFuncPtr_glVertex2hNV
+#endif
+#ifndef GLEE_H_DEFINED_glVertex2hvNV
+#define GLEE_H_DEFINED_glVertex2hvNV
+  typedef void (APIENTRYP GLEEPFNGLVERTEX2HVNVPROC) (const GLhalfNV * v);
+  GLEE_EXTERN GLEEPFNGLVERTEX2HVNVPROC GLeeFuncPtr_glVertex2hvNV;
+  #define glVertex2hvNV GLeeFuncPtr_glVertex2hvNV
+#endif
+#ifndef GLEE_H_DEFINED_glVertex3hNV
+#define GLEE_H_DEFINED_glVertex3hNV
+  typedef void (APIENTRYP GLEEPFNGLVERTEX3HNVPROC) (GLhalfNV  x, GLhalfNV  y, GLhalfNV  z);
+  GLEE_EXTERN GLEEPFNGLVERTEX3HNVPROC GLeeFuncPtr_glVertex3hNV;
+  #define glVertex3hNV GLeeFuncPtr_glVertex3hNV
+#endif
+#ifndef GLEE_H_DEFINED_glVertex3hvNV
+#define GLEE_H_DEFINED_glVertex3hvNV
+  typedef void (APIENTRYP GLEEPFNGLVERTEX3HVNVPROC) (const GLhalfNV * v);
+  GLEE_EXTERN GLEEPFNGLVERTEX3HVNVPROC GLeeFuncPtr_glVertex3hvNV;
+  #define glVertex3hvNV GLeeFuncPtr_glVertex3hvNV
+#endif
+#ifndef GLEE_H_DEFINED_glVertex4hNV
+#define GLEE_H_DEFINED_glVertex4hNV
+  typedef void (APIENTRYP GLEEPFNGLVERTEX4HNVPROC) (GLhalfNV  x, GLhalfNV  y, GLhalfNV  z, GLhalfNV  w);
+  GLEE_EXTERN GLEEPFNGLVERTEX4HNVPROC GLeeFuncPtr_glVertex4hNV;
+  #define glVertex4hNV GLeeFuncPtr_glVertex4hNV
+#endif
+#ifndef GLEE_H_DEFINED_glVertex4hvNV
+#define GLEE_H_DEFINED_glVertex4hvNV
+  typedef void (APIENTRYP GLEEPFNGLVERTEX4HVNVPROC) (const GLhalfNV * v);
+  GLEE_EXTERN GLEEPFNGLVERTEX4HVNVPROC GLeeFuncPtr_glVertex4hvNV;
+  #define glVertex4hvNV GLeeFuncPtr_glVertex4hvNV
+#endif
+#ifndef GLEE_H_DEFINED_glNormal3hNV
+#define GLEE_H_DEFINED_glNormal3hNV
+  typedef void (APIENTRYP GLEEPFNGLNORMAL3HNVPROC) (GLhalfNV  nx, GLhalfNV  ny, GLhalfNV  nz);
+  GLEE_EXTERN GLEEPFNGLNORMAL3HNVPROC GLeeFuncPtr_glNormal3hNV;
+  #define glNormal3hNV GLeeFuncPtr_glNormal3hNV
+#endif
+#ifndef GLEE_H_DEFINED_glNormal3hvNV
+#define GLEE_H_DEFINED_glNormal3hvNV
+  typedef void (APIENTRYP GLEEPFNGLNORMAL3HVNVPROC) (const GLhalfNV * v);
+  GLEE_EXTERN GLEEPFNGLNORMAL3HVNVPROC GLeeFuncPtr_glNormal3hvNV;
+  #define glNormal3hvNV GLeeFuncPtr_glNormal3hvNV
+#endif
+#ifndef GLEE_H_DEFINED_glColor3hNV
+#define GLEE_H_DEFINED_glColor3hNV
+  typedef void (APIENTRYP GLEEPFNGLCOLOR3HNVPROC) (GLhalfNV  red, GLhalfNV  green, GLhalfNV  blue);
+  GLEE_EXTERN GLEEPFNGLCOLOR3HNVPROC GLeeFuncPtr_glColor3hNV;
+  #define glColor3hNV GLeeFuncPtr_glColor3hNV
+#endif
+#ifndef GLEE_H_DEFINED_glColor3hvNV
+#define GLEE_H_DEFINED_glColor3hvNV
+  typedef void (APIENTRYP GLEEPFNGLCOLOR3HVNVPROC) (const GLhalfNV * v);
+  GLEE_EXTERN GLEEPFNGLCOLOR3HVNVPROC GLeeFuncPtr_glColor3hvNV;
+  #define glColor3hvNV GLeeFuncPtr_glColor3hvNV
+#endif
+#ifndef GLEE_H_DEFINED_glColor4hNV
+#define GLEE_H_DEFINED_glColor4hNV
+  typedef void (APIENTRYP GLEEPFNGLCOLOR4HNVPROC) (GLhalfNV  red, GLhalfNV  green, GLhalfNV  blue, GLhalfNV  alpha);
+  GLEE_EXTERN GLEEPFNGLCOLOR4HNVPROC GLeeFuncPtr_glColor4hNV;
+  #define glColor4hNV GLeeFuncPtr_glColor4hNV
+#endif
+#ifndef GLEE_H_DEFINED_glColor4hvNV
+#define GLEE_H_DEFINED_glColor4hvNV
+  typedef void (APIENTRYP GLEEPFNGLCOLOR4HVNVPROC) (const GLhalfNV * v);
+  GLEE_EXTERN GLEEPFNGLCOLOR4HVNVPROC GLeeFuncPtr_glColor4hvNV;
+  #define glColor4hvNV GLeeFuncPtr_glColor4hvNV
+#endif
+#ifndef GLEE_H_DEFINED_glTexCoord1hNV
+#define GLEE_H_DEFINED_glTexCoord1hNV
+  typedef void (APIENTRYP GLEEPFNGLTEXCOORD1HNVPROC) (GLhalfNV  s);
+  GLEE_EXTERN GLEEPFNGLTEXCOORD1HNVPROC GLeeFuncPtr_glTexCoord1hNV;
+  #define glTexCoord1hNV GLeeFuncPtr_glTexCoord1hNV
+#endif
+#ifndef GLEE_H_DEFINED_glTexCoord1hvNV
+#define GLEE_H_DEFINED_glTexCoord1hvNV
+  typedef void (APIENTRYP GLEEPFNGLTEXCOORD1HVNVPROC) (const GLhalfNV * v);
+  GLEE_EXTERN GLEEPFNGLTEXCOORD1HVNVPROC GLeeFuncPtr_glTexCoord1hvNV;
+  #define glTexCoord1hvNV GLeeFuncPtr_glTexCoord1hvNV
+#endif
+#ifndef GLEE_H_DEFINED_glTexCoord2hNV
+#define GLEE_H_DEFINED_glTexCoord2hNV
+  typedef void (APIENTRYP GLEEPFNGLTEXCOORD2HNVPROC) (GLhalfNV  s, GLhalfNV  t);
+  GLEE_EXTERN GLEEPFNGLTEXCOORD2HNVPROC GLeeFuncPtr_glTexCoord2hNV;
+  #define glTexCoord2hNV GLeeFuncPtr_glTexCoord2hNV
+#endif
+#ifndef GLEE_H_DEFINED_glTexCoord2hvNV
+#define GLEE_H_DEFINED_glTexCoord2hvNV
+  typedef void (APIENTRYP GLEEPFNGLTEXCOORD2HVNVPROC) (const GLhalfNV * v);
+  GLEE_EXTERN GLEEPFNGLTEXCOORD2HVNVPROC GLeeFuncPtr_glTexCoord2hvNV;
+  #define glTexCoord2hvNV GLeeFuncPtr_glTexCoord2hvNV
+#endif
+#ifndef GLEE_H_DEFINED_glTexCoord3hNV
+#define GLEE_H_DEFINED_glTexCoord3hNV
+  typedef void (APIENTRYP GLEEPFNGLTEXCOORD3HNVPROC) (GLhalfNV  s, GLhalfNV  t, GLhalfNV  r);
+  GLEE_EXTERN GLEEPFNGLTEXCOORD3HNVPROC GLeeFuncPtr_glTexCoord3hNV;
+  #define glTexCoord3hNV GLeeFuncPtr_glTexCoord3hNV
+#endif
+#ifndef GLEE_H_DEFINED_glTexCoord3hvNV
+#define GLEE_H_DEFINED_glTexCoord3hvNV
+  typedef void (APIENTRYP GLEEPFNGLTEXCOORD3HVNVPROC) (const GLhalfNV * v);
+  GLEE_EXTERN GLEEPFNGLTEXCOORD3HVNVPROC GLeeFuncPtr_glTexCoord3hvNV;
+  #define glTexCoord3hvNV GLeeFuncPtr_glTexCoord3hvNV
+#endif
+#ifndef GLEE_H_DEFINED_glTexCoord4hNV
+#define GLEE_H_DEFINED_glTexCoord4hNV
+  typedef void (APIENTRYP GLEEPFNGLTEXCOORD4HNVPROC) (GLhalfNV  s, GLhalfNV  t, GLhalfNV  r, GLhalfNV  q);
+  GLEE_EXTERN GLEEPFNGLTEXCOORD4HNVPROC GLeeFuncPtr_glTexCoord4hNV;
+  #define glTexCoord4hNV GLeeFuncPtr_glTexCoord4hNV
+#endif
+#ifndef GLEE_H_DEFINED_glTexCoord4hvNV
+#define GLEE_H_DEFINED_glTexCoord4hvNV
+  typedef void (APIENTRYP GLEEPFNGLTEXCOORD4HVNVPROC) (const GLhalfNV * v);
+  GLEE_EXTERN GLEEPFNGLTEXCOORD4HVNVPROC GLeeFuncPtr_glTexCoord4hvNV;
+  #define glTexCoord4hvNV GLeeFuncPtr_glTexCoord4hvNV
+#endif
+#ifndef GLEE_H_DEFINED_glMultiTexCoord1hNV
+#define GLEE_H_DEFINED_glMultiTexCoord1hNV
+  typedef void (APIENTRYP GLEEPFNGLMULTITEXCOORD1HNVPROC) (GLenum  target, GLhalfNV  s);
+  GLEE_EXTERN GLEEPFNGLMULTITEXCOORD1HNVPROC GLeeFuncPtr_glMultiTexCoord1hNV;
+  #define glMultiTexCoord1hNV GLeeFuncPtr_glMultiTexCoord1hNV
+#endif
+#ifndef GLEE_H_DEFINED_glMultiTexCoord1hvNV
+#define GLEE_H_DEFINED_glMultiTexCoord1hvNV
+  typedef void (APIENTRYP GLEEPFNGLMULTITEXCOORD1HVNVPROC) (GLenum  target, const GLhalfNV * v);
+  GLEE_EXTERN GLEEPFNGLMULTITEXCOORD1HVNVPROC GLeeFuncPtr_glMultiTexCoord1hvNV;
+  #define glMultiTexCoord1hvNV GLeeFuncPtr_glMultiTexCoord1hvNV
+#endif
+#ifndef GLEE_H_DEFINED_glMultiTexCoord2hNV
+#define GLEE_H_DEFINED_glMultiTexCoord2hNV
+  typedef void (APIENTRYP GLEEPFNGLMULTITEXCOORD2HNVPROC) (GLenum  target, GLhalfNV  s, GLhalfNV  t);
+  GLEE_EXTERN GLEEPFNGLMULTITEXCOORD2HNVPROC GLeeFuncPtr_glMultiTexCoord2hNV;
+  #define glMultiTexCoord2hNV GLeeFuncPtr_glMultiTexCoord2hNV
+#endif
+#ifndef GLEE_H_DEFINED_glMultiTexCoord2hvNV
+#define GLEE_H_DEFINED_glMultiTexCoord2hvNV
+  typedef void (APIENTRYP GLEEPFNGLMULTITEXCOORD2HVNVPROC) (GLenum  target, const GLhalfNV * v);
+  GLEE_EXTERN GLEEPFNGLMULTITEXCOORD2HVNVPROC GLeeFuncPtr_glMultiTexCoord2hvNV;
+  #define glMultiTexCoord2hvNV GLeeFuncPtr_glMultiTexCoord2hvNV
+#endif
+#ifndef GLEE_H_DEFINED_glMultiTexCoord3hNV
+#define GLEE_H_DEFINED_glMultiTexCoord3hNV
+  typedef void (APIENTRYP GLEEPFNGLMULTITEXCOORD3HNVPROC) (GLenum  target, GLhalfNV  s, GLhalfNV  t, GLhalfNV  r);
+  GLEE_EXTERN GLEEPFNGLMULTITEXCOORD3HNVPROC GLeeFuncPtr_glMultiTexCoord3hNV;
+  #define glMultiTexCoord3hNV GLeeFuncPtr_glMultiTexCoord3hNV
+#endif
+#ifndef GLEE_H_DEFINED_glMultiTexCoord3hvNV
+#define GLEE_H_DEFINED_glMultiTexCoord3hvNV
+  typedef void (APIENTRYP GLEEPFNGLMULTITEXCOORD3HVNVPROC) (GLenum  target, const GLhalfNV * v);
+  GLEE_EXTERN GLEEPFNGLMULTITEXCOORD3HVNVPROC GLeeFuncPtr_glMultiTexCoord3hvNV;
+  #define glMultiTexCoord3hvNV GLeeFuncPtr_glMultiTexCoord3hvNV
+#endif
+#ifndef GLEE_H_DEFINED_glMultiTexCoord4hNV
+#define GLEE_H_DEFINED_glMultiTexCoord4hNV
+  typedef void (APIENTRYP GLEEPFNGLMULTITEXCOORD4HNVPROC) (GLenum  target, GLhalfNV  s, GLhalfNV  t, GLhalfNV  r, GLhalfNV  q);
+  GLEE_EXTERN GLEEPFNGLMULTITEXCOORD4HNVPROC GLeeFuncPtr_glMultiTexCoord4hNV;
+  #define glMultiTexCoord4hNV GLeeFuncPtr_glMultiTexCoord4hNV
+#endif
+#ifndef GLEE_H_DEFINED_glMultiTexCoord4hvNV
+#define GLEE_H_DEFINED_glMultiTexCoord4hvNV
+  typedef void (APIENTRYP GLEEPFNGLMULTITEXCOORD4HVNVPROC) (GLenum  target, const GLhalfNV * v);
+  GLEE_EXTERN GLEEPFNGLMULTITEXCOORD4HVNVPROC GLeeFuncPtr_glMultiTexCoord4hvNV;
+  #define glMultiTexCoord4hvNV GLeeFuncPtr_glMultiTexCoord4hvNV
+#endif
+#ifndef GLEE_H_DEFINED_glFogCoordhNV
+#define GLEE_H_DEFINED_glFogCoordhNV
+  typedef void (APIENTRYP GLEEPFNGLFOGCOORDHNVPROC) (GLhalfNV  fog);
+  GLEE_EXTERN GLEEPFNGLFOGCOORDHNVPROC GLeeFuncPtr_glFogCoordhNV;
+  #define glFogCoordhNV GLeeFuncPtr_glFogCoordhNV
+#endif
+#ifndef GLEE_H_DEFINED_glFogCoordhvNV
+#define GLEE_H_DEFINED_glFogCoordhvNV
+  typedef void (APIENTRYP GLEEPFNGLFOGCOORDHVNVPROC) (const GLhalfNV * fog);
+  GLEE_EXTERN GLEEPFNGLFOGCOORDHVNVPROC GLeeFuncPtr_glFogCoordhvNV;
+  #define glFogCoordhvNV GLeeFuncPtr_glFogCoordhvNV
+#endif
+#ifndef GLEE_H_DEFINED_glSecondaryColor3hNV
+#define GLEE_H_DEFINED_glSecondaryColor3hNV
+  typedef void (APIENTRYP GLEEPFNGLSECONDARYCOLOR3HNVPROC) (GLhalfNV  red, GLhalfNV  green, GLhalfNV  blue);
+  GLEE_EXTERN GLEEPFNGLSECONDARYCOLOR3HNVPROC GLeeFuncPtr_glSecondaryColor3hNV;
+  #define glSecondaryColor3hNV GLeeFuncPtr_glSecondaryColor3hNV
+#endif
+#ifndef GLEE_H_DEFINED_glSecondaryColor3hvNV
+#define GLEE_H_DEFINED_glSecondaryColor3hvNV
+  typedef void (APIENTRYP GLEEPFNGLSECONDARYCOLOR3HVNVPROC) (const GLhalfNV * v);
+  GLEE_EXTERN GLEEPFNGLSECONDARYCOLOR3HVNVPROC GLeeFuncPtr_glSecondaryColor3hvNV;
+  #define glSecondaryColor3hvNV GLeeFuncPtr_glSecondaryColor3hvNV
+#endif
+#ifndef GLEE_H_DEFINED_glVertexWeighthNV
+#define GLEE_H_DEFINED_glVertexWeighthNV
+  typedef void (APIENTRYP GLEEPFNGLVERTEXWEIGHTHNVPROC) (GLhalfNV  weight);
+  GLEE_EXTERN GLEEPFNGLVERTEXWEIGHTHNVPROC GLeeFuncPtr_glVertexWeighthNV;
+  #define glVertexWeighthNV GLeeFuncPtr_glVertexWeighthNV
+#endif
+#ifndef GLEE_H_DEFINED_glVertexWeighthvNV
+#define GLEE_H_DEFINED_glVertexWeighthvNV
+  typedef void (APIENTRYP GLEEPFNGLVERTEXWEIGHTHVNVPROC) (const GLhalfNV * weight);
+  GLEE_EXTERN GLEEPFNGLVERTEXWEIGHTHVNVPROC GLeeFuncPtr_glVertexWeighthvNV;
+  #define glVertexWeighthvNV GLeeFuncPtr_glVertexWeighthvNV
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttrib1hNV
+#define GLEE_H_DEFINED_glVertexAttrib1hNV
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIB1HNVPROC) (GLuint  index, GLhalfNV  x);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIB1HNVPROC GLeeFuncPtr_glVertexAttrib1hNV;
+  #define glVertexAttrib1hNV GLeeFuncPtr_glVertexAttrib1hNV
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttrib1hvNV
+#define GLEE_H_DEFINED_glVertexAttrib1hvNV
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIB1HVNVPROC) (GLuint  index, const GLhalfNV * v);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIB1HVNVPROC GLeeFuncPtr_glVertexAttrib1hvNV;
+  #define glVertexAttrib1hvNV GLeeFuncPtr_glVertexAttrib1hvNV
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttrib2hNV
+#define GLEE_H_DEFINED_glVertexAttrib2hNV
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIB2HNVPROC) (GLuint  index, GLhalfNV  x, GLhalfNV  y);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIB2HNVPROC GLeeFuncPtr_glVertexAttrib2hNV;
+  #define glVertexAttrib2hNV GLeeFuncPtr_glVertexAttrib2hNV
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttrib2hvNV
+#define GLEE_H_DEFINED_glVertexAttrib2hvNV
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIB2HVNVPROC) (GLuint  index, const GLhalfNV * v);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIB2HVNVPROC GLeeFuncPtr_glVertexAttrib2hvNV;
+  #define glVertexAttrib2hvNV GLeeFuncPtr_glVertexAttrib2hvNV
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttrib3hNV
+#define GLEE_H_DEFINED_glVertexAttrib3hNV
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIB3HNVPROC) (GLuint  index, GLhalfNV  x, GLhalfNV  y, GLhalfNV  z);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIB3HNVPROC GLeeFuncPtr_glVertexAttrib3hNV;
+  #define glVertexAttrib3hNV GLeeFuncPtr_glVertexAttrib3hNV
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttrib3hvNV
+#define GLEE_H_DEFINED_glVertexAttrib3hvNV
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIB3HVNVPROC) (GLuint  index, const GLhalfNV * v);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIB3HVNVPROC GLeeFuncPtr_glVertexAttrib3hvNV;
+  #define glVertexAttrib3hvNV GLeeFuncPtr_glVertexAttrib3hvNV
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttrib4hNV
+#define GLEE_H_DEFINED_glVertexAttrib4hNV
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIB4HNVPROC) (GLuint  index, GLhalfNV  x, GLhalfNV  y, GLhalfNV  z, GLhalfNV  w);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIB4HNVPROC GLeeFuncPtr_glVertexAttrib4hNV;
+  #define glVertexAttrib4hNV GLeeFuncPtr_glVertexAttrib4hNV
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttrib4hvNV
+#define GLEE_H_DEFINED_glVertexAttrib4hvNV
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIB4HVNVPROC) (GLuint  index, const GLhalfNV * v);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIB4HVNVPROC GLeeFuncPtr_glVertexAttrib4hvNV;
+  #define glVertexAttrib4hvNV GLeeFuncPtr_glVertexAttrib4hvNV
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttribs1hvNV
+#define GLEE_H_DEFINED_glVertexAttribs1hvNV
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIBS1HVNVPROC) (GLuint  index, GLsizei  n, const GLhalfNV * v);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIBS1HVNVPROC GLeeFuncPtr_glVertexAttribs1hvNV;
+  #define glVertexAttribs1hvNV GLeeFuncPtr_glVertexAttribs1hvNV
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttribs2hvNV
+#define GLEE_H_DEFINED_glVertexAttribs2hvNV
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIBS2HVNVPROC) (GLuint  index, GLsizei  n, const GLhalfNV * v);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIBS2HVNVPROC GLeeFuncPtr_glVertexAttribs2hvNV;
+  #define glVertexAttribs2hvNV GLeeFuncPtr_glVertexAttribs2hvNV
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttribs3hvNV
+#define GLEE_H_DEFINED_glVertexAttribs3hvNV
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIBS3HVNVPROC) (GLuint  index, GLsizei  n, const GLhalfNV * v);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIBS3HVNVPROC GLeeFuncPtr_glVertexAttribs3hvNV;
+  #define glVertexAttribs3hvNV GLeeFuncPtr_glVertexAttribs3hvNV
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttribs4hvNV
+#define GLEE_H_DEFINED_glVertexAttribs4hvNV
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIBS4HVNVPROC) (GLuint  index, GLsizei  n, const GLhalfNV * v);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIBS4HVNVPROC GLeeFuncPtr_glVertexAttribs4hvNV;
+  #define glVertexAttribs4hvNV GLeeFuncPtr_glVertexAttribs4hvNV
+#endif
+#endif 
+
+/* GL_NV_pixel_data_range */
+
+#ifndef GL_NV_pixel_data_range
+#define GL_NV_pixel_data_range 1
+#define __GLEE_GL_NV_pixel_data_range 1
+/* Constants */
+#define GL_WRITE_PIXEL_DATA_RANGE_NV                       0x8878
+#define GL_READ_PIXEL_DATA_RANGE_NV                        0x8879
+#define GL_WRITE_PIXEL_DATA_RANGE_LENGTH_NV                0x887A
+#define GL_READ_PIXEL_DATA_RANGE_LENGTH_NV                 0x887B
+#define GL_WRITE_PIXEL_DATA_RANGE_POINTER_NV               0x887C
+#define GL_READ_PIXEL_DATA_RANGE_POINTER_NV                0x887D
+#ifndef GLEE_H_DEFINED_glPixelDataRangeNV
+#define GLEE_H_DEFINED_glPixelDataRangeNV
+  typedef void (APIENTRYP GLEEPFNGLPIXELDATARANGENVPROC) (GLenum  target, GLsizei  length, GLvoid * pointer);
+  GLEE_EXTERN GLEEPFNGLPIXELDATARANGENVPROC GLeeFuncPtr_glPixelDataRangeNV;
+  #define glPixelDataRangeNV GLeeFuncPtr_glPixelDataRangeNV
+#endif
+#ifndef GLEE_H_DEFINED_glFlushPixelDataRangeNV
+#define GLEE_H_DEFINED_glFlushPixelDataRangeNV
+  typedef void (APIENTRYP GLEEPFNGLFLUSHPIXELDATARANGENVPROC) (GLenum  target);
+  GLEE_EXTERN GLEEPFNGLFLUSHPIXELDATARANGENVPROC GLeeFuncPtr_glFlushPixelDataRangeNV;
+  #define glFlushPixelDataRangeNV GLeeFuncPtr_glFlushPixelDataRangeNV
+#endif
+#endif 
+
+/* GL_NV_primitive_restart */
+
+#ifndef GL_NV_primitive_restart
+#define GL_NV_primitive_restart 1
+#define __GLEE_GL_NV_primitive_restart 1
+/* Constants */
+#define GL_PRIMITIVE_RESTART_NV                            0x8558
+#define GL_PRIMITIVE_RESTART_INDEX_NV                      0x8559
+#ifndef GLEE_H_DEFINED_glPrimitiveRestartNV
+#define GLEE_H_DEFINED_glPrimitiveRestartNV
+  typedef void (APIENTRYP GLEEPFNGLPRIMITIVERESTARTNVPROC) ();
+  GLEE_EXTERN GLEEPFNGLPRIMITIVERESTARTNVPROC GLeeFuncPtr_glPrimitiveRestartNV;
+  #define glPrimitiveRestartNV GLeeFuncPtr_glPrimitiveRestartNV
+#endif
+#ifndef GLEE_H_DEFINED_glPrimitiveRestartIndexNV
+#define GLEE_H_DEFINED_glPrimitiveRestartIndexNV
+  typedef void (APIENTRYP GLEEPFNGLPRIMITIVERESTARTINDEXNVPROC) (GLuint  index);
+  GLEE_EXTERN GLEEPFNGLPRIMITIVERESTARTINDEXNVPROC GLeeFuncPtr_glPrimitiveRestartIndexNV;
+  #define glPrimitiveRestartIndexNV GLeeFuncPtr_glPrimitiveRestartIndexNV
+#endif
+#endif 
+
+/* GL_NV_texture_expand_normal */
+
+#ifndef GL_NV_texture_expand_normal
+#define GL_NV_texture_expand_normal 1
+#define __GLEE_GL_NV_texture_expand_normal 1
+/* Constants */
+#define GL_TEXTURE_UNSIGNED_REMAP_MODE_NV                  0x888F
+#endif 
+
+/* GL_NV_vertex_program2 */
+
+#ifndef GL_NV_vertex_program2
+#define GL_NV_vertex_program2 1
+#define __GLEE_GL_NV_vertex_program2 1
+/* Constants */
+#endif 
+
+/* GL_ATI_map_object_buffer */
+
+#ifndef GL_ATI_map_object_buffer
+#define GL_ATI_map_object_buffer 1
+#define __GLEE_GL_ATI_map_object_buffer 1
+/* Constants */
+#ifndef GLEE_H_DEFINED_glMapObjectBufferATI
+#define GLEE_H_DEFINED_glMapObjectBufferATI
+  typedef GLvoid* (APIENTRYP GLEEPFNGLMAPOBJECTBUFFERATIPROC) (GLuint  buffer);
+  GLEE_EXTERN GLEEPFNGLMAPOBJECTBUFFERATIPROC GLeeFuncPtr_glMapObjectBufferATI;
+  #define glMapObjectBufferATI GLeeFuncPtr_glMapObjectBufferATI
+#endif
+#ifndef GLEE_H_DEFINED_glUnmapObjectBufferATI
+#define GLEE_H_DEFINED_glUnmapObjectBufferATI
+  typedef void (APIENTRYP GLEEPFNGLUNMAPOBJECTBUFFERATIPROC) (GLuint  buffer);
+  GLEE_EXTERN GLEEPFNGLUNMAPOBJECTBUFFERATIPROC GLeeFuncPtr_glUnmapObjectBufferATI;
+  #define glUnmapObjectBufferATI GLeeFuncPtr_glUnmapObjectBufferATI
+#endif
+#endif 
+
+/* GL_ATI_separate_stencil */
+
+#ifndef GL_ATI_separate_stencil
+#define GL_ATI_separate_stencil 1
+#define __GLEE_GL_ATI_separate_stencil 1
+/* Constants */
+#define GL_STENCIL_BACK_FUNC_ATI                           0x8800
+#define GL_STENCIL_BACK_FAIL_ATI                           0x8801
+#define GL_STENCIL_BACK_PASS_DEPTH_FAIL_ATI                0x8802
+#define GL_STENCIL_BACK_PASS_DEPTH_PASS_ATI                0x8803
+#ifndef GLEE_H_DEFINED_glStencilOpSeparateATI
+#define GLEE_H_DEFINED_glStencilOpSeparateATI
+  typedef void (APIENTRYP GLEEPFNGLSTENCILOPSEPARATEATIPROC) (GLenum  face, GLenum  sfail, GLenum  dpfail, GLenum  dppass);
+  GLEE_EXTERN GLEEPFNGLSTENCILOPSEPARATEATIPROC GLeeFuncPtr_glStencilOpSeparateATI;
+  #define glStencilOpSeparateATI GLeeFuncPtr_glStencilOpSeparateATI
+#endif
+#ifndef GLEE_H_DEFINED_glStencilFuncSeparateATI
+#define GLEE_H_DEFINED_glStencilFuncSeparateATI
+  typedef void (APIENTRYP GLEEPFNGLSTENCILFUNCSEPARATEATIPROC) (GLenum  frontfunc, GLenum  backfunc, GLint  ref, GLuint  mask);
+  GLEE_EXTERN GLEEPFNGLSTENCILFUNCSEPARATEATIPROC GLeeFuncPtr_glStencilFuncSeparateATI;
+  #define glStencilFuncSeparateATI GLeeFuncPtr_glStencilFuncSeparateATI
+#endif
+#endif 
+
+/* GL_ATI_vertex_attrib_array_object */
+
+#ifndef GL_ATI_vertex_attrib_array_object
+#define GL_ATI_vertex_attrib_array_object 1
+#define __GLEE_GL_ATI_vertex_attrib_array_object 1
+/* Constants */
+#ifndef GLEE_H_DEFINED_glVertexAttribArrayObjectATI
+#define GLEE_H_DEFINED_glVertexAttribArrayObjectATI
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIBARRAYOBJECTATIPROC) (GLuint  index, GLint  size, GLenum  type, GLboolean  normalized, GLsizei  stride, GLuint  buffer, GLuint  offset);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIBARRAYOBJECTATIPROC GLeeFuncPtr_glVertexAttribArrayObjectATI;
+  #define glVertexAttribArrayObjectATI GLeeFuncPtr_glVertexAttribArrayObjectATI
+#endif
+#ifndef GLEE_H_DEFINED_glGetVertexAttribArrayObjectfvATI
+#define GLEE_H_DEFINED_glGetVertexAttribArrayObjectfvATI
+  typedef void (APIENTRYP GLEEPFNGLGETVERTEXATTRIBARRAYOBJECTFVATIPROC) (GLuint  index, GLenum  pname, GLfloat * params);
+  GLEE_EXTERN GLEEPFNGLGETVERTEXATTRIBARRAYOBJECTFVATIPROC GLeeFuncPtr_glGetVertexAttribArrayObjectfvATI;
+  #define glGetVertexAttribArrayObjectfvATI GLeeFuncPtr_glGetVertexAttribArrayObjectfvATI
+#endif
+#ifndef GLEE_H_DEFINED_glGetVertexAttribArrayObjectivATI
+#define GLEE_H_DEFINED_glGetVertexAttribArrayObjectivATI
+  typedef void (APIENTRYP GLEEPFNGLGETVERTEXATTRIBARRAYOBJECTIVATIPROC) (GLuint  index, GLenum  pname, GLint * params);
+  GLEE_EXTERN GLEEPFNGLGETVERTEXATTRIBARRAYOBJECTIVATIPROC GLeeFuncPtr_glGetVertexAttribArrayObjectivATI;
+  #define glGetVertexAttribArrayObjectivATI GLeeFuncPtr_glGetVertexAttribArrayObjectivATI
+#endif
+#endif 
+
+/* GL_OES_read_format */
+
+#ifndef GL_OES_read_format
+#define GL_OES_read_format 1
+#define __GLEE_GL_OES_read_format 1
+/* Constants */
+#define GL_IMPLEMENTATION_COLOR_READ_TYPE_OES              0x8B9A
+#define GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES            0x8B9B
+#endif 
+
+/* GL_EXT_depth_bounds_test */
+
+#ifndef GL_EXT_depth_bounds_test
+#define GL_EXT_depth_bounds_test 1
+#define __GLEE_GL_EXT_depth_bounds_test 1
+/* Constants */
+#define GL_DEPTH_BOUNDS_TEST_EXT                           0x8890
+#define GL_DEPTH_BOUNDS_EXT                                0x8891
+#ifndef GLEE_H_DEFINED_glDepthBoundsEXT
+#define GLEE_H_DEFINED_glDepthBoundsEXT
+  typedef void (APIENTRYP GLEEPFNGLDEPTHBOUNDSEXTPROC) (GLclampd  zmin, GLclampd  zmax);
+  GLEE_EXTERN GLEEPFNGLDEPTHBOUNDSEXTPROC GLeeFuncPtr_glDepthBoundsEXT;
+  #define glDepthBoundsEXT GLeeFuncPtr_glDepthBoundsEXT
+#endif
+#endif 
+
+/* GL_EXT_texture_mirror_clamp */
+
+#ifndef GL_EXT_texture_mirror_clamp
+#define GL_EXT_texture_mirror_clamp 1
+#define __GLEE_GL_EXT_texture_mirror_clamp 1
+/* Constants */
+#define GL_MIRROR_CLAMP_EXT                                0x8742
+#define GL_MIRROR_CLAMP_TO_EDGE_EXT                        0x8743
+#define GL_MIRROR_CLAMP_TO_BORDER_EXT                      0x8912
+#endif 
+
+/* GL_EXT_blend_equation_separate */
+
+#ifndef GL_EXT_blend_equation_separate
+#define GL_EXT_blend_equation_separate 1
+#define __GLEE_GL_EXT_blend_equation_separate 1
+/* Constants */
+#define GL_BLEND_EQUATION_RGB_EXT                          0x8009
+#define GL_BLEND_EQUATION_ALPHA_EXT                        0x883D
+#ifndef GLEE_H_DEFINED_glBlendEquationSeparateEXT
+#define GLEE_H_DEFINED_glBlendEquationSeparateEXT
+  typedef void (APIENTRYP GLEEPFNGLBLENDEQUATIONSEPARATEEXTPROC) (GLenum  modeRGB, GLenum  modeAlpha);
+  GLEE_EXTERN GLEEPFNGLBLENDEQUATIONSEPARATEEXTPROC GLeeFuncPtr_glBlendEquationSeparateEXT;
+  #define glBlendEquationSeparateEXT GLeeFuncPtr_glBlendEquationSeparateEXT
+#endif
+#endif 
+
+/* GL_MESA_pack_invert */
+
+#ifndef GL_MESA_pack_invert
+#define GL_MESA_pack_invert 1
+#define __GLEE_GL_MESA_pack_invert 1
+/* Constants */
+#define GL_PACK_INVERT_MESA                                0x8758
+#endif 
+
+/* GL_MESA_ycbcr_texture */
+
+#ifndef GL_MESA_ycbcr_texture
+#define GL_MESA_ycbcr_texture 1
+#define __GLEE_GL_MESA_ycbcr_texture 1
+/* Constants */
+#define GL_UNSIGNED_SHORT_8_8_MESA                         0x85BA
+#define GL_UNSIGNED_SHORT_8_8_REV_MESA                     0x85BB
+#define GL_YCBCR_MESA                                      0x8757
+#endif 
+
+/* GL_EXT_pixel_buffer_object */
+
+#ifndef GL_EXT_pixel_buffer_object
+#define GL_EXT_pixel_buffer_object 1
+#define __GLEE_GL_EXT_pixel_buffer_object 1
+/* Constants */
+#define GL_PIXEL_PACK_BUFFER_EXT                           0x88EB
+#define GL_PIXEL_UNPACK_BUFFER_EXT                         0x88EC
+#define GL_PIXEL_PACK_BUFFER_BINDING_EXT                   0x88ED
+#define GL_PIXEL_UNPACK_BUFFER_BINDING_EXT                 0x88EF
+#endif 
+
+/* GL_NV_fragment_program_option */
+
+#ifndef GL_NV_fragment_program_option
+#define GL_NV_fragment_program_option 1
+#define __GLEE_GL_NV_fragment_program_option 1
+/* Constants */
+#endif 
+
+/* GL_NV_fragment_program2 */
+
+#ifndef GL_NV_fragment_program2
+#define GL_NV_fragment_program2 1
+#define __GLEE_GL_NV_fragment_program2 1
+/* Constants */
+#define GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV                0x88F4
+#define GL_MAX_PROGRAM_CALL_DEPTH_NV                       0x88F5
+#define GL_MAX_PROGRAM_IF_DEPTH_NV                         0x88F6
+#define GL_MAX_PROGRAM_LOOP_DEPTH_NV                       0x88F7
+#define GL_MAX_PROGRAM_LOOP_COUNT_NV                       0x88F8
+#endif 
+
+/* GL_NV_vertex_program2_option */
+
+#ifndef GL_NV_vertex_program2_option
+#define GL_NV_vertex_program2_option 1
+#define __GLEE_GL_NV_vertex_program2_option 1
+/* Constants */
+#endif 
+
+/* GL_NV_vertex_program3 */
+
+#ifndef GL_NV_vertex_program3
+#define GL_NV_vertex_program3 1
+#define __GLEE_GL_NV_vertex_program3 1
+/* Constants */
+#endif 
+
+/* GL_EXT_framebuffer_object */
+
+#ifndef GL_EXT_framebuffer_object
+#define GL_EXT_framebuffer_object 1
+#define __GLEE_GL_EXT_framebuffer_object 1
+/* Constants */
+#define GL_INVALID_FRAMEBUFFER_OPERATION_EXT               0x0506
+#define GL_MAX_RENDERBUFFER_SIZE_EXT                       0x84E8
+#define GL_FRAMEBUFFER_BINDING_EXT                         0x8CA6
+#define GL_RENDERBUFFER_BINDING_EXT                        0x8CA7
+#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT          0x8CD0
+#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT          0x8CD1
+#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT        0x8CD2
+#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT 0x8CD3
+#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT   0x8CD4
+#define GL_FRAMEBUFFER_COMPLETE_EXT                        0x8CD5
+#define GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT           0x8CD6
+#define GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT   0x8CD7
+#define GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT           0x8CD9
+#define GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT              0x8CDA
+#define GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT          0x8CDB
+#define GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT          0x8CDC
+#define GL_FRAMEBUFFER_UNSUPPORTED_EXT                     0x8CDD
+#define GL_MAX_COLOR_ATTACHMENTS_EXT                       0x8CDF
+#define GL_COLOR_ATTACHMENT0_EXT                           0x8CE0
+#define GL_COLOR_ATTACHMENT1_EXT                           0x8CE1
+#define GL_COLOR_ATTACHMENT2_EXT                           0x8CE2
+#define GL_COLOR_ATTACHMENT3_EXT                           0x8CE3
+#define GL_COLOR_ATTACHMENT4_EXT                           0x8CE4
+#define GL_COLOR_ATTACHMENT5_EXT                           0x8CE5
+#define GL_COLOR_ATTACHMENT6_EXT                           0x8CE6
+#define GL_COLOR_ATTACHMENT7_EXT                           0x8CE7
+#define GL_COLOR_ATTACHMENT8_EXT                           0x8CE8
+#define GL_COLOR_ATTACHMENT9_EXT                           0x8CE9
+#define GL_COLOR_ATTACHMENT10_EXT                          0x8CEA
+#define GL_COLOR_ATTACHMENT11_EXT                          0x8CEB
+#define GL_COLOR_ATTACHMENT12_EXT                          0x8CEC
+#define GL_COLOR_ATTACHMENT13_EXT                          0x8CED
+#define GL_COLOR_ATTACHMENT14_EXT                          0x8CEE
+#define GL_COLOR_ATTACHMENT15_EXT                          0x8CEF
+#define GL_DEPTH_ATTACHMENT_EXT                            0x8D00
+#define GL_STENCIL_ATTACHMENT_EXT                          0x8D20
+#define GL_FRAMEBUFFER_EXT                                 0x8D40
+#define GL_RENDERBUFFER_EXT                                0x8D41
+#define GL_RENDERBUFFER_WIDTH_EXT                          0x8D42
+#define GL_RENDERBUFFER_HEIGHT_EXT                         0x8D43
+#define GL_RENDERBUFFER_INTERNAL_FORMAT_EXT                0x8D44
+#define GL_STENCIL_INDEX1_EXT                              0x8D46
+#define GL_STENCIL_INDEX4_EXT                              0x8D47
+#define GL_STENCIL_INDEX8_EXT                              0x8D48
+#define GL_STENCIL_INDEX16_EXT                             0x8D49
+#define GL_RENDERBUFFER_RED_SIZE_EXT                       0x8D50
+#define GL_RENDERBUFFER_GREEN_SIZE_EXT                     0x8D51
+#define GL_RENDERBUFFER_BLUE_SIZE_EXT                      0x8D52
+#define GL_RENDERBUFFER_ALPHA_SIZE_EXT                     0x8D53
+#define GL_RENDERBUFFER_DEPTH_SIZE_EXT                     0x8D54
+#define GL_RENDERBUFFER_STENCIL_SIZE_EXT                   0x8D55
+#ifndef GLEE_H_DEFINED_glIsRenderbufferEXT
+#define GLEE_H_DEFINED_glIsRenderbufferEXT
+  typedef GLboolean (APIENTRYP GLEEPFNGLISRENDERBUFFEREXTPROC) (GLuint  renderbuffer);
+  GLEE_EXTERN GLEEPFNGLISRENDERBUFFEREXTPROC GLeeFuncPtr_glIsRenderbufferEXT;
+  #define glIsRenderbufferEXT GLeeFuncPtr_glIsRenderbufferEXT
+#endif
+#ifndef GLEE_H_DEFINED_glBindRenderbufferEXT
+#define GLEE_H_DEFINED_glBindRenderbufferEXT
+  typedef void (APIENTRYP GLEEPFNGLBINDRENDERBUFFEREXTPROC) (GLenum  target, GLuint  renderbuffer);
+  GLEE_EXTERN GLEEPFNGLBINDRENDERBUFFEREXTPROC GLeeFuncPtr_glBindRenderbufferEXT;
+  #define glBindRenderbufferEXT GLeeFuncPtr_glBindRenderbufferEXT
+#endif
+#ifndef GLEE_H_DEFINED_glDeleteRenderbuffersEXT
+#define GLEE_H_DEFINED_glDeleteRenderbuffersEXT
+  typedef void (APIENTRYP GLEEPFNGLDELETERENDERBUFFERSEXTPROC) (GLsizei  n, const GLuint * renderbuffers);
+  GLEE_EXTERN GLEEPFNGLDELETERENDERBUFFERSEXTPROC GLeeFuncPtr_glDeleteRenderbuffersEXT;
+  #define glDeleteRenderbuffersEXT GLeeFuncPtr_glDeleteRenderbuffersEXT
+#endif
+#ifndef GLEE_H_DEFINED_glGenRenderbuffersEXT
+#define GLEE_H_DEFINED_glGenRenderbuffersEXT
+  typedef void (APIENTRYP GLEEPFNGLGENRENDERBUFFERSEXTPROC) (GLsizei  n, GLuint * renderbuffers);
+  GLEE_EXTERN GLEEPFNGLGENRENDERBUFFERSEXTPROC GLeeFuncPtr_glGenRenderbuffersEXT;
+  #define glGenRenderbuffersEXT GLeeFuncPtr_glGenRenderbuffersEXT
+#endif
+#ifndef GLEE_H_DEFINED_glRenderbufferStorageEXT
+#define GLEE_H_DEFINED_glRenderbufferStorageEXT
+  typedef void (APIENTRYP GLEEPFNGLRENDERBUFFERSTORAGEEXTPROC) (GLenum  target, GLenum  internalformat, GLsizei  width, GLsizei  height);
+  GLEE_EXTERN GLEEPFNGLRENDERBUFFERSTORAGEEXTPROC GLeeFuncPtr_glRenderbufferStorageEXT;
+  #define glRenderbufferStorageEXT GLeeFuncPtr_glRenderbufferStorageEXT
+#endif
+#ifndef GLEE_H_DEFINED_glGetRenderbufferParameterivEXT
+#define GLEE_H_DEFINED_glGetRenderbufferParameterivEXT
+  typedef void (APIENTRYP GLEEPFNGLGETRENDERBUFFERPARAMETERIVEXTPROC) (GLenum  target, GLenum  pname, GLint * params);
+  GLEE_EXTERN GLEEPFNGLGETRENDERBUFFERPARAMETERIVEXTPROC GLeeFuncPtr_glGetRenderbufferParameterivEXT;
+  #define glGetRenderbufferParameterivEXT GLeeFuncPtr_glGetRenderbufferParameterivEXT
+#endif
+#ifndef GLEE_H_DEFINED_glIsFramebufferEXT
+#define GLEE_H_DEFINED_glIsFramebufferEXT
+  typedef GLboolean (APIENTRYP GLEEPFNGLISFRAMEBUFFEREXTPROC) (GLuint  framebuffer);
+  GLEE_EXTERN GLEEPFNGLISFRAMEBUFFEREXTPROC GLeeFuncPtr_glIsFramebufferEXT;
+  #define glIsFramebufferEXT GLeeFuncPtr_glIsFramebufferEXT
+#endif
+#ifndef GLEE_H_DEFINED_glBindFramebufferEXT
+#define GLEE_H_DEFINED_glBindFramebufferEXT
+  typedef void (APIENTRYP GLEEPFNGLBINDFRAMEBUFFEREXTPROC) (GLenum  target, GLuint  framebuffer);
+  GLEE_EXTERN GLEEPFNGLBINDFRAMEBUFFEREXTPROC GLeeFuncPtr_glBindFramebufferEXT;
+  #define glBindFramebufferEXT GLeeFuncPtr_glBindFramebufferEXT
+#endif
+#ifndef GLEE_H_DEFINED_glDeleteFramebuffersEXT
+#define GLEE_H_DEFINED_glDeleteFramebuffersEXT
+  typedef void (APIENTRYP GLEEPFNGLDELETEFRAMEBUFFERSEXTPROC) (GLsizei  n, const GLuint * framebuffers);
+  GLEE_EXTERN GLEEPFNGLDELETEFRAMEBUFFERSEXTPROC GLeeFuncPtr_glDeleteFramebuffersEXT;
+  #define glDeleteFramebuffersEXT GLeeFuncPtr_glDeleteFramebuffersEXT
+#endif
+#ifndef GLEE_H_DEFINED_glGenFramebuffersEXT
+#define GLEE_H_DEFINED_glGenFramebuffersEXT
+  typedef void (APIENTRYP GLEEPFNGLGENFRAMEBUFFERSEXTPROC) (GLsizei  n, GLuint * framebuffers);
+  GLEE_EXTERN GLEEPFNGLGENFRAMEBUFFERSEXTPROC GLeeFuncPtr_glGenFramebuffersEXT;
+  #define glGenFramebuffersEXT GLeeFuncPtr_glGenFramebuffersEXT
+#endif
+#ifndef GLEE_H_DEFINED_glCheckFramebufferStatusEXT
+#define GLEE_H_DEFINED_glCheckFramebufferStatusEXT
+  typedef GLenum (APIENTRYP GLEEPFNGLCHECKFRAMEBUFFERSTATUSEXTPROC) (GLenum  target);
+  GLEE_EXTERN GLEEPFNGLCHECKFRAMEBUFFERSTATUSEXTPROC GLeeFuncPtr_glCheckFramebufferStatusEXT;
+  #define glCheckFramebufferStatusEXT GLeeFuncPtr_glCheckFramebufferStatusEXT
+#endif
+#ifndef GLEE_H_DEFINED_glFramebufferTexture1DEXT
+#define GLEE_H_DEFINED_glFramebufferTexture1DEXT
+  typedef void (APIENTRYP GLEEPFNGLFRAMEBUFFERTEXTURE1DEXTPROC) (GLenum  target, GLenum  attachment, GLenum  textarget, GLuint  texture, GLint  level);
+  GLEE_EXTERN GLEEPFNGLFRAMEBUFFERTEXTURE1DEXTPROC GLeeFuncPtr_glFramebufferTexture1DEXT;
+  #define glFramebufferTexture1DEXT GLeeFuncPtr_glFramebufferTexture1DEXT
+#endif
+#ifndef GLEE_H_DEFINED_glFramebufferTexture2DEXT
+#define GLEE_H_DEFINED_glFramebufferTexture2DEXT
+  typedef void (APIENTRYP GLEEPFNGLFRAMEBUFFERTEXTURE2DEXTPROC) (GLenum  target, GLenum  attachment, GLenum  textarget, GLuint  texture, GLint  level);
+  GLEE_EXTERN GLEEPFNGLFRAMEBUFFERTEXTURE2DEXTPROC GLeeFuncPtr_glFramebufferTexture2DEXT;
+  #define glFramebufferTexture2DEXT GLeeFuncPtr_glFramebufferTexture2DEXT
+#endif
+#ifndef GLEE_H_DEFINED_glFramebufferTexture3DEXT
+#define GLEE_H_DEFINED_glFramebufferTexture3DEXT
+  typedef void (APIENTRYP GLEEPFNGLFRAMEBUFFERTEXTURE3DEXTPROC) (GLenum  target, GLenum  attachment, GLenum  textarget, GLuint  texture, GLint  level, GLint  zoffset);
+  GLEE_EXTERN GLEEPFNGLFRAMEBUFFERTEXTURE3DEXTPROC GLeeFuncPtr_glFramebufferTexture3DEXT;
+  #define glFramebufferTexture3DEXT GLeeFuncPtr_glFramebufferTexture3DEXT
+#endif
+#ifndef GLEE_H_DEFINED_glFramebufferRenderbufferEXT
+#define GLEE_H_DEFINED_glFramebufferRenderbufferEXT
+  typedef void (APIENTRYP GLEEPFNGLFRAMEBUFFERRENDERBUFFEREXTPROC) (GLenum  target, GLenum  attachment, GLenum  renderbuffertarget, GLuint  renderbuffer);
+  GLEE_EXTERN GLEEPFNGLFRAMEBUFFERRENDERBUFFEREXTPROC GLeeFuncPtr_glFramebufferRenderbufferEXT;
+  #define glFramebufferRenderbufferEXT GLeeFuncPtr_glFramebufferRenderbufferEXT
+#endif
+#ifndef GLEE_H_DEFINED_glGetFramebufferAttachmentParameterivEXT
+#define GLEE_H_DEFINED_glGetFramebufferAttachmentParameterivEXT
+  typedef void (APIENTRYP GLEEPFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC) (GLenum  target, GLenum  attachment, GLenum  pname, GLint * params);
+  GLEE_EXTERN GLEEPFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC GLeeFuncPtr_glGetFramebufferAttachmentParameterivEXT;
+  #define glGetFramebufferAttachmentParameterivEXT GLeeFuncPtr_glGetFramebufferAttachmentParameterivEXT
+#endif
+#ifndef GLEE_H_DEFINED_glGenerateMipmapEXT
+#define GLEE_H_DEFINED_glGenerateMipmapEXT
+  typedef void (APIENTRYP GLEEPFNGLGENERATEMIPMAPEXTPROC) (GLenum  target);
+  GLEE_EXTERN GLEEPFNGLGENERATEMIPMAPEXTPROC GLeeFuncPtr_glGenerateMipmapEXT;
+  #define glGenerateMipmapEXT GLeeFuncPtr_glGenerateMipmapEXT
+#endif
+#endif 
+
+/* GL_GREMEDY_string_marker */
+
+#ifndef GL_GREMEDY_string_marker
+#define GL_GREMEDY_string_marker 1
+#define __GLEE_GL_GREMEDY_string_marker 1
+/* Constants */
+#ifndef GLEE_H_DEFINED_glStringMarkerGREMEDY
+#define GLEE_H_DEFINED_glStringMarkerGREMEDY
+  typedef void (APIENTRYP GLEEPFNGLSTRINGMARKERGREMEDYPROC) (GLsizei  len, const GLvoid * string);
+  GLEE_EXTERN GLEEPFNGLSTRINGMARKERGREMEDYPROC GLeeFuncPtr_glStringMarkerGREMEDY;
+  #define glStringMarkerGREMEDY GLeeFuncPtr_glStringMarkerGREMEDY
+#endif
+#endif 
+
+/* GL_EXT_packed_depth_stencil */
+
+#ifndef GL_EXT_packed_depth_stencil
+#define GL_EXT_packed_depth_stencil 1
+#define __GLEE_GL_EXT_packed_depth_stencil 1
+/* Constants */
+#define GL_DEPTH_STENCIL_EXT                               0x84F9
+#define GL_UNSIGNED_INT_24_8_EXT                           0x84FA
+#define GL_DEPTH24_STENCIL8_EXT                            0x88F0
+#define GL_TEXTURE_STENCIL_SIZE_EXT                        0x88F1
+#endif 
+
+/* GL_EXT_stencil_clear_tag */
+
+#ifndef GL_EXT_stencil_clear_tag
+#define GL_EXT_stencil_clear_tag 1
+#define __GLEE_GL_EXT_stencil_clear_tag 1
+/* Constants */
+#define GL_STENCIL_TAG_BITS_EXT                            0x88F2
+#define GL_STENCIL_CLEAR_TAG_VALUE_EXT                     0x88F3
+#ifndef GLEE_H_DEFINED_glStencilClearTagEXT
+#define GLEE_H_DEFINED_glStencilClearTagEXT
+  typedef void (APIENTRYP GLEEPFNGLSTENCILCLEARTAGEXTPROC) (GLsizei  stencilTagBits, GLuint  stencilClearTag);
+  GLEE_EXTERN GLEEPFNGLSTENCILCLEARTAGEXTPROC GLeeFuncPtr_glStencilClearTagEXT;
+  #define glStencilClearTagEXT GLeeFuncPtr_glStencilClearTagEXT
+#endif
+#endif 
+
+/* GL_EXT_texture_sRGB */
+
+#ifndef GL_EXT_texture_sRGB
+#define GL_EXT_texture_sRGB 1
+#define __GLEE_GL_EXT_texture_sRGB 1
+/* Constants */
+#define GL_SRGB_EXT                                        0x8C40
+#define GL_SRGB8_EXT                                       0x8C41
+#define GL_SRGB_ALPHA_EXT                                  0x8C42
+#define GL_SRGB8_ALPHA8_EXT                                0x8C43
+#define GL_SLUMINANCE_ALPHA_EXT                            0x8C44
+#define GL_SLUMINANCE8_ALPHA8_EXT                          0x8C45
+#define GL_SLUMINANCE_EXT                                  0x8C46
+#define GL_SLUMINANCE8_EXT                                 0x8C47
+#define GL_COMPRESSED_SRGB_EXT                             0x8C48
+#define GL_COMPRESSED_SRGB_ALPHA_EXT                       0x8C49
+#define GL_COMPRESSED_SLUMINANCE_EXT                       0x8C4A
+#define GL_COMPRESSED_SLUMINANCE_ALPHA_EXT                 0x8C4B
+#define GL_COMPRESSED_SRGB_S3TC_DXT1_EXT                   0x8C4C
+#define GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT             0x8C4D
+#define GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT             0x8C4E
+#define GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT             0x8C4F
+#endif 
+
+/* GL_EXT_framebuffer_blit */
+
+#ifndef GL_EXT_framebuffer_blit
+#define GL_EXT_framebuffer_blit 1
+#define __GLEE_GL_EXT_framebuffer_blit 1
+/* Constants */
+#define GL_READ_FRAMEBUFFER_EXT                            0x8CA8
+#define GL_DRAW_FRAMEBUFFER_EXT                            0x8CA9
+#define GL_DRAW_FRAMEBUFFER_BINDING_EXT                    GL_FRAMEBUFFER_BINDING_EXT
+#define GL_READ_FRAMEBUFFER_BINDING_EXT                    0x8CAA
+#ifndef GLEE_H_DEFINED_glBlitFramebufferEXT
+#define GLEE_H_DEFINED_glBlitFramebufferEXT
+  typedef void (APIENTRYP GLEEPFNGLBLITFRAMEBUFFEREXTPROC) (GLint  srcX0, GLint  srcY0, GLint  srcX1, GLint  srcY1, GLint  dstX0, GLint  dstY0, GLint  dstX1, GLint  dstY1, GLbitfield  mask, GLenum  filter);
+  GLEE_EXTERN GLEEPFNGLBLITFRAMEBUFFEREXTPROC GLeeFuncPtr_glBlitFramebufferEXT;
+  #define glBlitFramebufferEXT GLeeFuncPtr_glBlitFramebufferEXT
+#endif
+#endif 
+
+/* GL_EXT_framebuffer_multisample */
+
+#ifndef GL_EXT_framebuffer_multisample
+#define GL_EXT_framebuffer_multisample 1
+#define __GLEE_GL_EXT_framebuffer_multisample 1
+/* Constants */
+#define GL_RENDERBUFFER_SAMPLES_EXT                        0x8CAB
+#define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT          0x8D56
+#define GL_MAX_SAMPLES_EXT                                 0x8D57
+#ifndef GLEE_H_DEFINED_glRenderbufferStorageMultisampleEXT
+#define GLEE_H_DEFINED_glRenderbufferStorageMultisampleEXT
+  typedef void (APIENTRYP GLEEPFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC) (GLenum  target, GLsizei  samples, GLenum  internalformat, GLsizei  width, GLsizei  height);
+  GLEE_EXTERN GLEEPFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC GLeeFuncPtr_glRenderbufferStorageMultisampleEXT;
+  #define glRenderbufferStorageMultisampleEXT GLeeFuncPtr_glRenderbufferStorageMultisampleEXT
+#endif
+#endif 
+
+/* GL_MESAX_texture_stack */
+
+#ifndef GL_MESAX_texture_stack
+#define GL_MESAX_texture_stack 1
+#define __GLEE_GL_MESAX_texture_stack 1
+/* Constants */
+#define GL_TEXTURE_1D_STACK_MESAX                          0x8759
+#define GL_TEXTURE_2D_STACK_MESAX                          0x875A
+#define GL_PROXY_TEXTURE_1D_STACK_MESAX                    0x875B
+#define GL_PROXY_TEXTURE_2D_STACK_MESAX                    0x875C
+#define GL_TEXTURE_1D_STACK_BINDING_MESAX                  0x875D
+#define GL_TEXTURE_2D_STACK_BINDING_MESAX                  0x875E
+#endif 
+
+/* GL_EXT_timer_query */
+
+#ifndef GL_EXT_timer_query
+#define GL_EXT_timer_query 1
+#define __GLEE_GL_EXT_timer_query 1
+/* Constants */
+#define GL_TIME_ELAPSED_EXT                                0x88BF
+#ifndef GLEE_H_DEFINED_glGetQueryObjecti64vEXT
+#define GLEE_H_DEFINED_glGetQueryObjecti64vEXT
+  typedef void (APIENTRYP GLEEPFNGLGETQUERYOBJECTI64VEXTPROC) (GLuint  id, GLenum  pname, GLint64EXT * params);
+  GLEE_EXTERN GLEEPFNGLGETQUERYOBJECTI64VEXTPROC GLeeFuncPtr_glGetQueryObjecti64vEXT;
+  #define glGetQueryObjecti64vEXT GLeeFuncPtr_glGetQueryObjecti64vEXT
+#endif
+#ifndef GLEE_H_DEFINED_glGetQueryObjectui64vEXT
+#define GLEE_H_DEFINED_glGetQueryObjectui64vEXT
+  typedef void (APIENTRYP GLEEPFNGLGETQUERYOBJECTUI64VEXTPROC) (GLuint  id, GLenum  pname, GLuint64EXT * params);
+  GLEE_EXTERN GLEEPFNGLGETQUERYOBJECTUI64VEXTPROC GLeeFuncPtr_glGetQueryObjectui64vEXT;
+  #define glGetQueryObjectui64vEXT GLeeFuncPtr_glGetQueryObjectui64vEXT
+#endif
+#endif 
+
+/* GL_EXT_gpu_program_parameters */
+
+#ifndef GL_EXT_gpu_program_parameters
+#define GL_EXT_gpu_program_parameters 1
+#define __GLEE_GL_EXT_gpu_program_parameters 1
+/* Constants */
+#ifndef GLEE_H_DEFINED_glProgramEnvParameters4fvEXT
+#define GLEE_H_DEFINED_glProgramEnvParameters4fvEXT
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMENVPARAMETERS4FVEXTPROC) (GLenum  target, GLuint  index, GLsizei  count, const GLfloat * params);
+  GLEE_EXTERN GLEEPFNGLPROGRAMENVPARAMETERS4FVEXTPROC GLeeFuncPtr_glProgramEnvParameters4fvEXT;
+  #define glProgramEnvParameters4fvEXT GLeeFuncPtr_glProgramEnvParameters4fvEXT
+#endif
+#ifndef GLEE_H_DEFINED_glProgramLocalParameters4fvEXT
+#define GLEE_H_DEFINED_glProgramLocalParameters4fvEXT
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMLOCALPARAMETERS4FVEXTPROC) (GLenum  target, GLuint  index, GLsizei  count, const GLfloat * params);
+  GLEE_EXTERN GLEEPFNGLPROGRAMLOCALPARAMETERS4FVEXTPROC GLeeFuncPtr_glProgramLocalParameters4fvEXT;
+  #define glProgramLocalParameters4fvEXT GLeeFuncPtr_glProgramLocalParameters4fvEXT
+#endif
+#endif 
+
+/* GL_APPLE_flush_buffer_range */
+
+#ifndef GL_APPLE_flush_buffer_range
+#define GL_APPLE_flush_buffer_range 1
+#define __GLEE_GL_APPLE_flush_buffer_range 1
+/* Constants */
+#define GL_BUFFER_SERIALIZED_MODIFY_APPLE                  0x8A12
+#define GL_BUFFER_FLUSHING_UNMAP_APPLE                     0x8A13
+#ifndef GLEE_H_DEFINED_glBufferParameteriAPPLE
+#define GLEE_H_DEFINED_glBufferParameteriAPPLE
+  typedef void (APIENTRYP GLEEPFNGLBUFFERPARAMETERIAPPLEPROC) (GLenum  target, GLenum  pname, GLint  param);
+  GLEE_EXTERN GLEEPFNGLBUFFERPARAMETERIAPPLEPROC GLeeFuncPtr_glBufferParameteriAPPLE;
+  #define glBufferParameteriAPPLE GLeeFuncPtr_glBufferParameteriAPPLE
+#endif
+#ifndef GLEE_H_DEFINED_glFlushMappedBufferRangeAPPLE
+#define GLEE_H_DEFINED_glFlushMappedBufferRangeAPPLE
+  typedef void (APIENTRYP GLEEPFNGLFLUSHMAPPEDBUFFERRANGEAPPLEPROC) (GLenum  target, GLintptr  offset, GLsizeiptr  size);
+  GLEE_EXTERN GLEEPFNGLFLUSHMAPPEDBUFFERRANGEAPPLEPROC GLeeFuncPtr_glFlushMappedBufferRangeAPPLE;
+  #define glFlushMappedBufferRangeAPPLE GLeeFuncPtr_glFlushMappedBufferRangeAPPLE
+#endif
+#endif 
+
+/* GL_EXT_gpu_shader4 */
+
+#ifndef GL_EXT_gpu_shader4
+#define GL_EXT_gpu_shader4 1
+#define __GLEE_GL_EXT_gpu_shader4 1
+/* Constants */
+#define GL_SAMPLER_1D_ARRAY_EXT                            0x8DC0
+#define GL_SAMPLER_2D_ARRAY_EXT                            0x8DC1
+#define GL_SAMPLER_BUFFER_EXT                              0x8DC2
+#define GL_SAMPLER_1D_ARRAY_SHADOW_EXT                     0x8DC3
+#define GL_SAMPLER_2D_ARRAY_SHADOW_EXT                     0x8DC4
+#define GL_SAMPLER_CUBE_SHADOW_EXT                         0x8DC5
+#define GL_UNSIGNED_INT_VEC2_EXT                           0x8DC6
+#define GL_UNSIGNED_INT_VEC3_EXT                           0x8DC7
+#define GL_UNSIGNED_INT_VEC4_EXT                           0x8DC8
+#define GL_INT_SAMPLER_1D_EXT                              0x8DC9
+#define GL_INT_SAMPLER_2D_EXT                              0x8DCA
+#define GL_INT_SAMPLER_3D_EXT                              0x8DCB
+#define GL_INT_SAMPLER_CUBE_EXT                            0x8DCC
+#define GL_INT_SAMPLER_2D_RECT_EXT                         0x8DCD
+#define GL_INT_SAMPLER_1D_ARRAY_EXT                        0x8DCE
+#define GL_INT_SAMPLER_2D_ARRAY_EXT                        0x8DCF
+#define GL_INT_SAMPLER_BUFFER_EXT                          0x8DD0
+#define GL_UNSIGNED_INT_SAMPLER_1D_EXT                     0x8DD1
+#define GL_UNSIGNED_INT_SAMPLER_2D_EXT                     0x8DD2
+#define GL_UNSIGNED_INT_SAMPLER_3D_EXT                     0x8DD3
+#define GL_UNSIGNED_INT_SAMPLER_CUBE_EXT                   0x8DD4
+#define GL_UNSIGNED_INT_SAMPLER_2D_RECT_EXT                0x8DD5
+#define GL_UNSIGNED_INT_SAMPLER_1D_ARRAY_EXT               0x8DD6
+#define GL_UNSIGNED_INT_SAMPLER_2D_ARRAY_EXT               0x8DD7
+#define GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT                 0x8DD8
+#ifndef GLEE_H_DEFINED_glGetUniformuivEXT
+#define GLEE_H_DEFINED_glGetUniformuivEXT
+  typedef void (APIENTRYP GLEEPFNGLGETUNIFORMUIVEXTPROC) (GLuint  program, GLint  location, GLuint * params);
+  GLEE_EXTERN GLEEPFNGLGETUNIFORMUIVEXTPROC GLeeFuncPtr_glGetUniformuivEXT;
+  #define glGetUniformuivEXT GLeeFuncPtr_glGetUniformuivEXT
+#endif
+#ifndef GLEE_H_DEFINED_glBindFragDataLocationEXT
+#define GLEE_H_DEFINED_glBindFragDataLocationEXT
+  typedef void (APIENTRYP GLEEPFNGLBINDFRAGDATALOCATIONEXTPROC) (GLuint  program, GLuint  color, const GLchar * name);
+  GLEE_EXTERN GLEEPFNGLBINDFRAGDATALOCATIONEXTPROC GLeeFuncPtr_glBindFragDataLocationEXT;
+  #define glBindFragDataLocationEXT GLeeFuncPtr_glBindFragDataLocationEXT
+#endif
+#ifndef GLEE_H_DEFINED_glGetFragDataLocationEXT
+#define GLEE_H_DEFINED_glGetFragDataLocationEXT
+  typedef GLint (APIENTRYP GLEEPFNGLGETFRAGDATALOCATIONEXTPROC) (GLuint  program, const GLchar * name);
+  GLEE_EXTERN GLEEPFNGLGETFRAGDATALOCATIONEXTPROC GLeeFuncPtr_glGetFragDataLocationEXT;
+  #define glGetFragDataLocationEXT GLeeFuncPtr_glGetFragDataLocationEXT
+#endif
+#ifndef GLEE_H_DEFINED_glUniform1uiEXT
+#define GLEE_H_DEFINED_glUniform1uiEXT
+  typedef void (APIENTRYP GLEEPFNGLUNIFORM1UIEXTPROC) (GLint  location, GLuint  v0);
+  GLEE_EXTERN GLEEPFNGLUNIFORM1UIEXTPROC GLeeFuncPtr_glUniform1uiEXT;
+  #define glUniform1uiEXT GLeeFuncPtr_glUniform1uiEXT
+#endif
+#ifndef GLEE_H_DEFINED_glUniform2uiEXT
+#define GLEE_H_DEFINED_glUniform2uiEXT
+  typedef void (APIENTRYP GLEEPFNGLUNIFORM2UIEXTPROC) (GLint  location, GLuint  v0, GLuint  v1);
+  GLEE_EXTERN GLEEPFNGLUNIFORM2UIEXTPROC GLeeFuncPtr_glUniform2uiEXT;
+  #define glUniform2uiEXT GLeeFuncPtr_glUniform2uiEXT
+#endif
+#ifndef GLEE_H_DEFINED_glUniform3uiEXT
+#define GLEE_H_DEFINED_glUniform3uiEXT
+  typedef void (APIENTRYP GLEEPFNGLUNIFORM3UIEXTPROC) (GLint  location, GLuint  v0, GLuint  v1, GLuint  v2);
+  GLEE_EXTERN GLEEPFNGLUNIFORM3UIEXTPROC GLeeFuncPtr_glUniform3uiEXT;
+  #define glUniform3uiEXT GLeeFuncPtr_glUniform3uiEXT
+#endif
+#ifndef GLEE_H_DEFINED_glUniform4uiEXT
+#define GLEE_H_DEFINED_glUniform4uiEXT
+  typedef void (APIENTRYP GLEEPFNGLUNIFORM4UIEXTPROC) (GLint  location, GLuint  v0, GLuint  v1, GLuint  v2, GLuint  v3);
+  GLEE_EXTERN GLEEPFNGLUNIFORM4UIEXTPROC GLeeFuncPtr_glUniform4uiEXT;
+  #define glUniform4uiEXT GLeeFuncPtr_glUniform4uiEXT
+#endif
+#ifndef GLEE_H_DEFINED_glUniform1uivEXT
+#define GLEE_H_DEFINED_glUniform1uivEXT
+  typedef void (APIENTRYP GLEEPFNGLUNIFORM1UIVEXTPROC) (GLint  location, GLsizei  count, const GLuint * value);
+  GLEE_EXTERN GLEEPFNGLUNIFORM1UIVEXTPROC GLeeFuncPtr_glUniform1uivEXT;
+  #define glUniform1uivEXT GLeeFuncPtr_glUniform1uivEXT
+#endif
+#ifndef GLEE_H_DEFINED_glUniform2uivEXT
+#define GLEE_H_DEFINED_glUniform2uivEXT
+  typedef void (APIENTRYP GLEEPFNGLUNIFORM2UIVEXTPROC) (GLint  location, GLsizei  count, const GLuint * value);
+  GLEE_EXTERN GLEEPFNGLUNIFORM2UIVEXTPROC GLeeFuncPtr_glUniform2uivEXT;
+  #define glUniform2uivEXT GLeeFuncPtr_glUniform2uivEXT
+#endif
+#ifndef GLEE_H_DEFINED_glUniform3uivEXT
+#define GLEE_H_DEFINED_glUniform3uivEXT
+  typedef void (APIENTRYP GLEEPFNGLUNIFORM3UIVEXTPROC) (GLint  location, GLsizei  count, const GLuint * value);
+  GLEE_EXTERN GLEEPFNGLUNIFORM3UIVEXTPROC GLeeFuncPtr_glUniform3uivEXT;
+  #define glUniform3uivEXT GLeeFuncPtr_glUniform3uivEXT
+#endif
+#ifndef GLEE_H_DEFINED_glUniform4uivEXT
+#define GLEE_H_DEFINED_glUniform4uivEXT
+  typedef void (APIENTRYP GLEEPFNGLUNIFORM4UIVEXTPROC) (GLint  location, GLsizei  count, const GLuint * value);
+  GLEE_EXTERN GLEEPFNGLUNIFORM4UIVEXTPROC GLeeFuncPtr_glUniform4uivEXT;
+  #define glUniform4uivEXT GLeeFuncPtr_glUniform4uivEXT
+#endif
+#endif 
+
+/* GL_EXT_draw_instanced */
+
+#ifndef GL_EXT_draw_instanced
+#define GL_EXT_draw_instanced 1
+#define __GLEE_GL_EXT_draw_instanced 1
+/* Constants */
+#ifndef GLEE_H_DEFINED_glDrawArraysInstancedEXT
+#define GLEE_H_DEFINED_glDrawArraysInstancedEXT
+  typedef void (APIENTRYP GLEEPFNGLDRAWARRAYSINSTANCEDEXTPROC) (GLenum  mode, GLint  start, GLsizei  count, GLsizei  primcount);
+  GLEE_EXTERN GLEEPFNGLDRAWARRAYSINSTANCEDEXTPROC GLeeFuncPtr_glDrawArraysInstancedEXT;
+  #define glDrawArraysInstancedEXT GLeeFuncPtr_glDrawArraysInstancedEXT
+#endif
+#ifndef GLEE_H_DEFINED_glDrawElementsInstancedEXT
+#define GLEE_H_DEFINED_glDrawElementsInstancedEXT
+  typedef void (APIENTRYP GLEEPFNGLDRAWELEMENTSINSTANCEDEXTPROC) (GLenum  mode, GLsizei  count, GLenum  type, const GLvoid * indices, GLsizei  primcount);
+  GLEE_EXTERN GLEEPFNGLDRAWELEMENTSINSTANCEDEXTPROC GLeeFuncPtr_glDrawElementsInstancedEXT;
+  #define glDrawElementsInstancedEXT GLeeFuncPtr_glDrawElementsInstancedEXT
+#endif
+#endif 
+
+/* GL_EXT_packed_float */
+
+#ifndef GL_EXT_packed_float
+#define GL_EXT_packed_float 1
+#define __GLEE_GL_EXT_packed_float 1
+/* Constants */
+#define GL_R11F_G11F_B10F_EXT                              0x8C3A
+#define GL_UNSIGNED_INT_10F_11F_11F_REV_EXT                0x8C3B
+#define GL_RGBA_SIGNED_COMPONENTS_EXT                      0x8C3C
+#endif 
+
+/* GL_EXT_texture_array */
+
+#ifndef GL_EXT_texture_array
+#define GL_EXT_texture_array 1
+#define __GLEE_GL_EXT_texture_array 1
+/* Constants */
+#define GL_TEXTURE_1D_ARRAY_EXT                            0x8C18
+#define GL_PROXY_TEXTURE_1D_ARRAY_EXT                      0x8C19
+#define GL_TEXTURE_2D_ARRAY_EXT                            0x8C1A
+#define GL_PROXY_TEXTURE_2D_ARRAY_EXT                      0x8C1B
+#define GL_TEXTURE_BINDING_1D_ARRAY_EXT                    0x8C1C
+#define GL_TEXTURE_BINDING_2D_ARRAY_EXT                    0x8C1D
+#define GL_MAX_ARRAY_TEXTURE_LAYERS_EXT                    0x88FF
+#define GL_COMPARE_REF_DEPTH_TO_TEXTURE_EXT                0x884E
+#endif 
+
+/* GL_EXT_texture_buffer_object */
+
+#ifndef GL_EXT_texture_buffer_object
+#define GL_EXT_texture_buffer_object 1
+#define __GLEE_GL_EXT_texture_buffer_object 1
+/* Constants */
+#define GL_TEXTURE_BUFFER_EXT                              0x8C2A
+#define GL_MAX_TEXTURE_BUFFER_SIZE_EXT                     0x8C2B
+#define GL_TEXTURE_BINDING_BUFFER_EXT                      0x8C2C
+#define GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT           0x8C2D
+#define GL_TEXTURE_BUFFER_FORMAT_EXT                       0x8C2E
+#ifndef GLEE_H_DEFINED_glTexBufferEXT
+#define GLEE_H_DEFINED_glTexBufferEXT
+  typedef void (APIENTRYP GLEEPFNGLTEXBUFFEREXTPROC) (GLenum  target, GLenum  internalformat, GLuint  buffer);
+  GLEE_EXTERN GLEEPFNGLTEXBUFFEREXTPROC GLeeFuncPtr_glTexBufferEXT;
+  #define glTexBufferEXT GLeeFuncPtr_glTexBufferEXT
+#endif
+#endif 
+
+/* GL_EXT_texture_compression_latc */
+
+#ifndef GL_EXT_texture_compression_latc
+#define GL_EXT_texture_compression_latc 1
+#define __GLEE_GL_EXT_texture_compression_latc 1
+/* Constants */
+#define GL_COMPRESSED_LUMINANCE_LATC1_EXT                  0x8C70
+#define GL_COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT           0x8C71
+#define GL_COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT            0x8C72
+#define GL_COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT     0x8C73
+#endif 
+
+/* GL_EXT_texture_compression_rgtc */
+
+#ifndef GL_EXT_texture_compression_rgtc
+#define GL_EXT_texture_compression_rgtc 1
+#define __GLEE_GL_EXT_texture_compression_rgtc 1
+/* Constants */
+#define GL_COMPRESSED_RED_RGTC1_EXT                        0x8DBB
+#define GL_COMPRESSED_SIGNED_RED_RGTC1_EXT                 0x8DBC
+#define GL_COMPRESSED_RED_GREEN_RGTC2_EXT                  0x8DBD
+#define GL_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT           0x8DBE
+#endif 
+
+/* GL_EXT_texture_shared_exponent */
+
+#ifndef GL_EXT_texture_shared_exponent
+#define GL_EXT_texture_shared_exponent 1
+#define __GLEE_GL_EXT_texture_shared_exponent 1
+/* Constants */
+#define GL_RGB9_E5_EXT                                     0x8C3D
+#define GL_UNSIGNED_INT_5_9_9_9_REV_EXT                    0x8C3E
+#define GL_TEXTURE_SHARED_SIZE_EXT                         0x8C3F
+#endif 
+
+/* GL_NV_depth_buffer_float */
+
+#ifndef GL_NV_depth_buffer_float
+#define GL_NV_depth_buffer_float 1
+#define __GLEE_GL_NV_depth_buffer_float 1
+/* Constants */
+#define GL_DEPTH_COMPONENT32F_NV                           0x8DAB
+#define GL_DEPTH32F_STENCIL8_NV                            0x8DAC
+#define GL_FLOAT_32_UNSIGNED_INT_24_8_REV_NV               0x8DAD
+#define GL_DEPTH_BUFFER_FLOAT_MODE_NV                      0x8DAF
+#ifndef GLEE_H_DEFINED_glDepthRangedNV
+#define GLEE_H_DEFINED_glDepthRangedNV
+  typedef void (APIENTRYP GLEEPFNGLDEPTHRANGEDNVPROC) (GLdouble  zNear, GLdouble  zFar);
+  GLEE_EXTERN GLEEPFNGLDEPTHRANGEDNVPROC GLeeFuncPtr_glDepthRangedNV;
+  #define glDepthRangedNV GLeeFuncPtr_glDepthRangedNV
+#endif
+#ifndef GLEE_H_DEFINED_glClearDepthdNV
+#define GLEE_H_DEFINED_glClearDepthdNV
+  typedef void (APIENTRYP GLEEPFNGLCLEARDEPTHDNVPROC) (GLdouble  depth);
+  GLEE_EXTERN GLEEPFNGLCLEARDEPTHDNVPROC GLeeFuncPtr_glClearDepthdNV;
+  #define glClearDepthdNV GLeeFuncPtr_glClearDepthdNV
+#endif
+#ifndef GLEE_H_DEFINED_glDepthBoundsdNV
+#define GLEE_H_DEFINED_glDepthBoundsdNV
+  typedef void (APIENTRYP GLEEPFNGLDEPTHBOUNDSDNVPROC) (GLdouble  zmin, GLdouble  zmax);
+  GLEE_EXTERN GLEEPFNGLDEPTHBOUNDSDNVPROC GLeeFuncPtr_glDepthBoundsdNV;
+  #define glDepthBoundsdNV GLeeFuncPtr_glDepthBoundsdNV
+#endif
+#endif 
+
+/* GL_NV_framebuffer_multisample_coverage */
+
+#ifndef GL_NV_framebuffer_multisample_coverage
+#define GL_NV_framebuffer_multisample_coverage 1
+#define __GLEE_GL_NV_framebuffer_multisample_coverage 1
+/* Constants */
+#define GL_RENDERBUFFER_COVERAGE_SAMPLES_NV                0x8CAB
+#define GL_RENDERBUFFER_COLOR_SAMPLES_NV                   0x8E10
+#define GL_MAX_MULTISAMPLE_COVERAGE_MODES_NV               0x8E11
+#define GL_MULTISAMPLE_COVERAGE_MODES_NV                   0x8E12
+#ifndef GLEE_H_DEFINED_glRenderbufferStorageMultisampleCoverageNV
+#define GLEE_H_DEFINED_glRenderbufferStorageMultisampleCoverageNV
+  typedef void (APIENTRYP GLEEPFNGLRENDERBUFFERSTORAGEMULTISAMPLECOVERAGENVPROC) (GLenum  target, GLsizei  coverageSamples, GLsizei  colorSamples, GLenum  internalformat, GLsizei  width, GLsizei  height);
+  GLEE_EXTERN GLEEPFNGLRENDERBUFFERSTORAGEMULTISAMPLECOVERAGENVPROC GLeeFuncPtr_glRenderbufferStorageMultisampleCoverageNV;
+  #define glRenderbufferStorageMultisampleCoverageNV GLeeFuncPtr_glRenderbufferStorageMultisampleCoverageNV
+#endif
+#endif 
+
+/* GL_EXT_framebuffer_sRGB */
+
+#ifndef GL_EXT_framebuffer_sRGB
+#define GL_EXT_framebuffer_sRGB 1
+#define __GLEE_GL_EXT_framebuffer_sRGB 1
+/* Constants */
+#define GL_FRAMEBUFFER_SRGB_EXT                            0x8DB9
+#define GL_FRAMEBUFFER_SRGB_CAPABLE_EXT                    0x8DBA
+#endif 
+
+/* GL_NV_geometry_shader4 */
+
+#ifndef GL_NV_geometry_shader4
+#define GL_NV_geometry_shader4 1
+#define __GLEE_GL_NV_geometry_shader4 1
+/* Constants */
+#endif 
+
+/* GL_NV_parameter_buffer_object */
+
+#ifndef GL_NV_parameter_buffer_object
+#define GL_NV_parameter_buffer_object 1
+#define __GLEE_GL_NV_parameter_buffer_object 1
+/* Constants */
+#define GL_MAX_PROGRAM_PARAMETER_BUFFER_BINDINGS_NV        0x8DA0
+#define GL_MAX_PROGRAM_PARAMETER_BUFFER_SIZE_NV            0x8DA1
+#define GL_VERTEX_PROGRAM_PARAMETER_BUFFER_NV              0x8DA2
+#define GL_GEOMETRY_PROGRAM_PARAMETER_BUFFER_NV            0x8DA3
+#define GL_FRAGMENT_PROGRAM_PARAMETER_BUFFER_NV            0x8DA4
+#ifndef GLEE_H_DEFINED_glProgramBufferParametersfvNV
+#define GLEE_H_DEFINED_glProgramBufferParametersfvNV
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMBUFFERPARAMETERSFVNVPROC) (GLenum  target, GLuint  buffer, GLuint  index, GLsizei  count, const GLfloat * params);
+  GLEE_EXTERN GLEEPFNGLPROGRAMBUFFERPARAMETERSFVNVPROC GLeeFuncPtr_glProgramBufferParametersfvNV;
+  #define glProgramBufferParametersfvNV GLeeFuncPtr_glProgramBufferParametersfvNV
+#endif
+#ifndef GLEE_H_DEFINED_glProgramBufferParametersIivNV
+#define GLEE_H_DEFINED_glProgramBufferParametersIivNV
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMBUFFERPARAMETERSIIVNVPROC) (GLenum  target, GLuint  buffer, GLuint  index, GLsizei  count, const GLint * params);
+  GLEE_EXTERN GLEEPFNGLPROGRAMBUFFERPARAMETERSIIVNVPROC GLeeFuncPtr_glProgramBufferParametersIivNV;
+  #define glProgramBufferParametersIivNV GLeeFuncPtr_glProgramBufferParametersIivNV
+#endif
+#ifndef GLEE_H_DEFINED_glProgramBufferParametersIuivNV
+#define GLEE_H_DEFINED_glProgramBufferParametersIuivNV
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMBUFFERPARAMETERSIUIVNVPROC) (GLenum  target, GLuint  buffer, GLuint  index, GLsizei  count, const GLuint * params);
+  GLEE_EXTERN GLEEPFNGLPROGRAMBUFFERPARAMETERSIUIVNVPROC GLeeFuncPtr_glProgramBufferParametersIuivNV;
+  #define glProgramBufferParametersIuivNV GLeeFuncPtr_glProgramBufferParametersIuivNV
+#endif
+#endif 
+
+/* GL_EXT_draw_buffers2 */
+
+#ifndef GL_EXT_draw_buffers2
+#define GL_EXT_draw_buffers2 1
+#define __GLEE_GL_EXT_draw_buffers2 1
+/* Constants */
+#ifndef GLEE_H_DEFINED_glColorMaskIndexedEXT
+#define GLEE_H_DEFINED_glColorMaskIndexedEXT
+  typedef void (APIENTRYP GLEEPFNGLCOLORMASKINDEXEDEXTPROC) (GLuint  index, GLboolean  r, GLboolean  g, GLboolean  b, GLboolean  a);
+  GLEE_EXTERN GLEEPFNGLCOLORMASKINDEXEDEXTPROC GLeeFuncPtr_glColorMaskIndexedEXT;
+  #define glColorMaskIndexedEXT GLeeFuncPtr_glColorMaskIndexedEXT
+#endif
+#ifndef GLEE_H_DEFINED_glGetBooleanIndexedvEXT
+#define GLEE_H_DEFINED_glGetBooleanIndexedvEXT
+  typedef void (APIENTRYP GLEEPFNGLGETBOOLEANINDEXEDVEXTPROC) (GLenum  target, GLuint  index, GLboolean * data);
+  GLEE_EXTERN GLEEPFNGLGETBOOLEANINDEXEDVEXTPROC GLeeFuncPtr_glGetBooleanIndexedvEXT;
+  #define glGetBooleanIndexedvEXT GLeeFuncPtr_glGetBooleanIndexedvEXT
+#endif
+#ifndef GLEE_H_DEFINED_glGetIntegerIndexedvEXT
+#define GLEE_H_DEFINED_glGetIntegerIndexedvEXT
+  typedef void (APIENTRYP GLEEPFNGLGETINTEGERINDEXEDVEXTPROC) (GLenum  target, GLuint  index, GLint * data);
+  GLEE_EXTERN GLEEPFNGLGETINTEGERINDEXEDVEXTPROC GLeeFuncPtr_glGetIntegerIndexedvEXT;
+  #define glGetIntegerIndexedvEXT GLeeFuncPtr_glGetIntegerIndexedvEXT
+#endif
+#ifndef GLEE_H_DEFINED_glEnableIndexedEXT
+#define GLEE_H_DEFINED_glEnableIndexedEXT
+  typedef void (APIENTRYP GLEEPFNGLENABLEINDEXEDEXTPROC) (GLenum  target, GLuint  index);
+  GLEE_EXTERN GLEEPFNGLENABLEINDEXEDEXTPROC GLeeFuncPtr_glEnableIndexedEXT;
+  #define glEnableIndexedEXT GLeeFuncPtr_glEnableIndexedEXT
+#endif
+#ifndef GLEE_H_DEFINED_glDisableIndexedEXT
+#define GLEE_H_DEFINED_glDisableIndexedEXT
+  typedef void (APIENTRYP GLEEPFNGLDISABLEINDEXEDEXTPROC) (GLenum  target, GLuint  index);
+  GLEE_EXTERN GLEEPFNGLDISABLEINDEXEDEXTPROC GLeeFuncPtr_glDisableIndexedEXT;
+  #define glDisableIndexedEXT GLeeFuncPtr_glDisableIndexedEXT
+#endif
+#ifndef GLEE_H_DEFINED_glIsEnabledIndexedEXT
+#define GLEE_H_DEFINED_glIsEnabledIndexedEXT
+  typedef GLboolean (APIENTRYP GLEEPFNGLISENABLEDINDEXEDEXTPROC) (GLenum  target, GLuint  index);
+  GLEE_EXTERN GLEEPFNGLISENABLEDINDEXEDEXTPROC GLeeFuncPtr_glIsEnabledIndexedEXT;
+  #define glIsEnabledIndexedEXT GLeeFuncPtr_glIsEnabledIndexedEXT
+#endif
+#endif 
+
+/* GL_NV_transform_feedback */
+
+#ifndef GL_NV_transform_feedback
+#define GL_NV_transform_feedback 1
+#define __GLEE_GL_NV_transform_feedback 1
+/* Constants */
+#define GL_BACK_PRIMARY_COLOR_NV                           0x8C77
+#define GL_BACK_SECONDARY_COLOR_NV                         0x8C78
+#define GL_TEXTURE_COORD_NV                                0x8C79
+#define GL_CLIP_DISTANCE_NV                                0x8C7A
+#define GL_VERTEX_ID_NV                                    0x8C7B
+#define GL_PRIMITIVE_ID_NV                                 0x8C7C
+#define GL_GENERIC_ATTRIB_NV                               0x8C7D
+#define GL_TRANSFORM_FEEDBACK_ATTRIBS_NV                   0x8C7E
+#define GL_TRANSFORM_FEEDBACK_BUFFER_MODE_NV               0x8C7F
+#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_NV   0x8C80
+#define GL_ACTIVE_VARYINGS_NV                              0x8C81
+#define GL_ACTIVE_VARYING_MAX_LENGTH_NV                    0x8C82
+#define GL_TRANSFORM_FEEDBACK_VARYINGS_NV                  0x8C83
+#define GL_TRANSFORM_FEEDBACK_BUFFER_START_NV              0x8C84
+#define GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_NV               0x8C85
+#define GL_TRANSFORM_FEEDBACK_RECORD_NV                    0x8C86
+#define GL_PRIMITIVES_GENERATED_NV                         0x8C87
+#define GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_NV        0x8C88
+#define GL_RASTERIZER_DISCARD_NV                           0x8C89
+#define GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_ATTRIBS_NV   0x8C8A
+#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_NV      0x8C8B
+#define GL_INTERLEAVED_ATTRIBS_NV                          0x8C8C
+#define GL_SEPARATE_ATTRIBS_NV                             0x8C8D
+#define GL_TRANSFORM_FEEDBACK_BUFFER_NV                    0x8C8E
+#define GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_NV            0x8C8F
+#define GL_LAYER_NV                                        0x8DAA
+#define GL_NEXT_BUFFER_NV                                  -2
+#define GL_SKIP_COMPONENTS4_NV                             -3
+#define GL_SKIP_COMPONENTS3_NV                             -4
+#define GL_SKIP_COMPONENTS2_NV                             -5
+#define GL_SKIP_COMPONENTS1_NV                             -6
+#ifndef GLEE_H_DEFINED_glBeginTransformFeedbackNV
+#define GLEE_H_DEFINED_glBeginTransformFeedbackNV
+  typedef void (APIENTRYP GLEEPFNGLBEGINTRANSFORMFEEDBACKNVPROC) (GLenum  primitiveMode);
+  GLEE_EXTERN GLEEPFNGLBEGINTRANSFORMFEEDBACKNVPROC GLeeFuncPtr_glBeginTransformFeedbackNV;
+  #define glBeginTransformFeedbackNV GLeeFuncPtr_glBeginTransformFeedbackNV
+#endif
+#ifndef GLEE_H_DEFINED_glEndTransformFeedbackNV
+#define GLEE_H_DEFINED_glEndTransformFeedbackNV
+  typedef void (APIENTRYP GLEEPFNGLENDTRANSFORMFEEDBACKNVPROC) ();
+  GLEE_EXTERN GLEEPFNGLENDTRANSFORMFEEDBACKNVPROC GLeeFuncPtr_glEndTransformFeedbackNV;
+  #define glEndTransformFeedbackNV GLeeFuncPtr_glEndTransformFeedbackNV
+#endif
+#ifndef GLEE_H_DEFINED_glTransformFeedbackAttribsNV
+#define GLEE_H_DEFINED_glTransformFeedbackAttribsNV
+  typedef void (APIENTRYP GLEEPFNGLTRANSFORMFEEDBACKATTRIBSNVPROC) (GLuint  count, const GLint * attribs, GLenum  bufferMode);
+  GLEE_EXTERN GLEEPFNGLTRANSFORMFEEDBACKATTRIBSNVPROC GLeeFuncPtr_glTransformFeedbackAttribsNV;
+  #define glTransformFeedbackAttribsNV GLeeFuncPtr_glTransformFeedbackAttribsNV
+#endif
+#ifndef GLEE_H_DEFINED_glBindBufferRangeNV
+#define GLEE_H_DEFINED_glBindBufferRangeNV
+  typedef void (APIENTRYP GLEEPFNGLBINDBUFFERRANGENVPROC) (GLenum  target, GLuint  index, GLuint  buffer, GLintptr  offset, GLsizeiptr  size);
+  GLEE_EXTERN GLEEPFNGLBINDBUFFERRANGENVPROC GLeeFuncPtr_glBindBufferRangeNV;
+  #define glBindBufferRangeNV GLeeFuncPtr_glBindBufferRangeNV
+#endif
+#ifndef GLEE_H_DEFINED_glBindBufferOffsetNV
+#define GLEE_H_DEFINED_glBindBufferOffsetNV
+  typedef void (APIENTRYP GLEEPFNGLBINDBUFFEROFFSETNVPROC) (GLenum  target, GLuint  index, GLuint  buffer, GLintptr  offset);
+  GLEE_EXTERN GLEEPFNGLBINDBUFFEROFFSETNVPROC GLeeFuncPtr_glBindBufferOffsetNV;
+  #define glBindBufferOffsetNV GLeeFuncPtr_glBindBufferOffsetNV
+#endif
+#ifndef GLEE_H_DEFINED_glBindBufferBaseNV
+#define GLEE_H_DEFINED_glBindBufferBaseNV
+  typedef void (APIENTRYP GLEEPFNGLBINDBUFFERBASENVPROC) (GLenum  target, GLuint  index, GLuint  buffer);
+  GLEE_EXTERN GLEEPFNGLBINDBUFFERBASENVPROC GLeeFuncPtr_glBindBufferBaseNV;
+  #define glBindBufferBaseNV GLeeFuncPtr_glBindBufferBaseNV
+#endif
+#ifndef GLEE_H_DEFINED_glTransformFeedbackVaryingsNV
+#define GLEE_H_DEFINED_glTransformFeedbackVaryingsNV
+  typedef void (APIENTRYP GLEEPFNGLTRANSFORMFEEDBACKVARYINGSNVPROC) (GLuint  program, GLsizei  count, const GLint * locations, GLenum  bufferMode);
+  GLEE_EXTERN GLEEPFNGLTRANSFORMFEEDBACKVARYINGSNVPROC GLeeFuncPtr_glTransformFeedbackVaryingsNV;
+  #define glTransformFeedbackVaryingsNV GLeeFuncPtr_glTransformFeedbackVaryingsNV
+#endif
+#ifndef GLEE_H_DEFINED_glActiveVaryingNV
+#define GLEE_H_DEFINED_glActiveVaryingNV
+  typedef void (APIENTRYP GLEEPFNGLACTIVEVARYINGNVPROC) (GLuint  program, const GLchar * name);
+  GLEE_EXTERN GLEEPFNGLACTIVEVARYINGNVPROC GLeeFuncPtr_glActiveVaryingNV;
+  #define glActiveVaryingNV GLeeFuncPtr_glActiveVaryingNV
+#endif
+#ifndef GLEE_H_DEFINED_glGetVaryingLocationNV
+#define GLEE_H_DEFINED_glGetVaryingLocationNV
+  typedef GLint (APIENTRYP GLEEPFNGLGETVARYINGLOCATIONNVPROC) (GLuint  program, const GLchar * name);
+  GLEE_EXTERN GLEEPFNGLGETVARYINGLOCATIONNVPROC GLeeFuncPtr_glGetVaryingLocationNV;
+  #define glGetVaryingLocationNV GLeeFuncPtr_glGetVaryingLocationNV
+#endif
+#ifndef GLEE_H_DEFINED_glGetActiveVaryingNV
+#define GLEE_H_DEFINED_glGetActiveVaryingNV
+  typedef void (APIENTRYP GLEEPFNGLGETACTIVEVARYINGNVPROC) (GLuint  program, GLuint  index, GLsizei  bufSize, GLsizei * length, GLsizei * size, GLenum * type, GLchar * name);
+  GLEE_EXTERN GLEEPFNGLGETACTIVEVARYINGNVPROC GLeeFuncPtr_glGetActiveVaryingNV;
+  #define glGetActiveVaryingNV GLeeFuncPtr_glGetActiveVaryingNV
+#endif
+#ifndef GLEE_H_DEFINED_glGetTransformFeedbackVaryingNV
+#define GLEE_H_DEFINED_glGetTransformFeedbackVaryingNV
+  typedef void (APIENTRYP GLEEPFNGLGETTRANSFORMFEEDBACKVARYINGNVPROC) (GLuint  program, GLuint  index, GLint * location);
+  GLEE_EXTERN GLEEPFNGLGETTRANSFORMFEEDBACKVARYINGNVPROC GLeeFuncPtr_glGetTransformFeedbackVaryingNV;
+  #define glGetTransformFeedbackVaryingNV GLeeFuncPtr_glGetTransformFeedbackVaryingNV
+#endif
+#ifndef GLEE_H_DEFINED_glTransformFeedbackStreamAttribsNV
+#define GLEE_H_DEFINED_glTransformFeedbackStreamAttribsNV
+  typedef void (APIENTRYP GLEEPFNGLTRANSFORMFEEDBACKSTREAMATTRIBSNVPROC) (GLsizei  count, const GLint * attribs, GLsizei  nbuffers, const GLint * bufstreams, GLenum  bufferMode);
+  GLEE_EXTERN GLEEPFNGLTRANSFORMFEEDBACKSTREAMATTRIBSNVPROC GLeeFuncPtr_glTransformFeedbackStreamAttribsNV;
+  #define glTransformFeedbackStreamAttribsNV GLeeFuncPtr_glTransformFeedbackStreamAttribsNV
+#endif
+#endif 
+
+/* GL_EXT_bindable_uniform */
+
+#ifndef GL_EXT_bindable_uniform
+#define GL_EXT_bindable_uniform 1
+#define __GLEE_GL_EXT_bindable_uniform 1
+/* Constants */
+#define GL_MAX_VERTEX_BINDABLE_UNIFORMS_EXT                0x8DE2
+#define GL_MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT              0x8DE3
+#define GL_MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT              0x8DE4
+#define GL_MAX_BINDABLE_UNIFORM_SIZE_EXT                   0x8DED
+#define GL_UNIFORM_BUFFER_EXT                              0x8DEE
+#define GL_UNIFORM_BUFFER_BINDING_EXT                      0x8DEF
+#ifndef GLEE_H_DEFINED_glUniformBufferEXT
+#define GLEE_H_DEFINED_glUniformBufferEXT
+  typedef void (APIENTRYP GLEEPFNGLUNIFORMBUFFEREXTPROC) (GLuint  program, GLint  location, GLuint  buffer);
+  GLEE_EXTERN GLEEPFNGLUNIFORMBUFFEREXTPROC GLeeFuncPtr_glUniformBufferEXT;
+  #define glUniformBufferEXT GLeeFuncPtr_glUniformBufferEXT
+#endif
+#ifndef GLEE_H_DEFINED_glGetUniformBufferSizeEXT
+#define GLEE_H_DEFINED_glGetUniformBufferSizeEXT
+  typedef GLint (APIENTRYP GLEEPFNGLGETUNIFORMBUFFERSIZEEXTPROC) (GLuint  program, GLint  location);
+  GLEE_EXTERN GLEEPFNGLGETUNIFORMBUFFERSIZEEXTPROC GLeeFuncPtr_glGetUniformBufferSizeEXT;
+  #define glGetUniformBufferSizeEXT GLeeFuncPtr_glGetUniformBufferSizeEXT
+#endif
+#ifndef GLEE_H_DEFINED_glGetUniformOffsetEXT
+#define GLEE_H_DEFINED_glGetUniformOffsetEXT
+  typedef GLintptr (APIENTRYP GLEEPFNGLGETUNIFORMOFFSETEXTPROC) (GLuint  program, GLint  location);
+  GLEE_EXTERN GLEEPFNGLGETUNIFORMOFFSETEXTPROC GLeeFuncPtr_glGetUniformOffsetEXT;
+  #define glGetUniformOffsetEXT GLeeFuncPtr_glGetUniformOffsetEXT
+#endif
+#endif 
+
+/* GL_EXT_texture_integer */
+
+#ifndef GL_EXT_texture_integer
+#define GL_EXT_texture_integer 1
+#define __GLEE_GL_EXT_texture_integer 1
+/* Constants */
+#define GL_RGBA32UI_EXT                                    0x8D70
+#define GL_RGB32UI_EXT                                     0x8D71
+#define GL_ALPHA32UI_EXT                                   0x8D72
+#define GL_INTENSITY32UI_EXT                               0x8D73
+#define GL_LUMINANCE32UI_EXT                               0x8D74
+#define GL_LUMINANCE_ALPHA32UI_EXT                         0x8D75
+#define GL_RGBA16UI_EXT                                    0x8D76
+#define GL_RGB16UI_EXT                                     0x8D77
+#define GL_ALPHA16UI_EXT                                   0x8D78
+#define GL_INTENSITY16UI_EXT                               0x8D79
+#define GL_LUMINANCE16UI_EXT                               0x8D7A
+#define GL_LUMINANCE_ALPHA16UI_EXT                         0x8D7B
+#define GL_RGBA8UI_EXT                                     0x8D7C
+#define GL_RGB8UI_EXT                                      0x8D7D
+#define GL_ALPHA8UI_EXT                                    0x8D7E
+#define GL_INTENSITY8UI_EXT                                0x8D7F
+#define GL_LUMINANCE8UI_EXT                                0x8D80
+#define GL_LUMINANCE_ALPHA8UI_EXT                          0x8D81
+#define GL_RGBA32I_EXT                                     0x8D82
+#define GL_RGB32I_EXT                                      0x8D83
+#define GL_ALPHA32I_EXT                                    0x8D84
+#define GL_INTENSITY32I_EXT                                0x8D85
+#define GL_LUMINANCE32I_EXT                                0x8D86
+#define GL_LUMINANCE_ALPHA32I_EXT                          0x8D87
+#define GL_RGBA16I_EXT                                     0x8D88
+#define GL_RGB16I_EXT                                      0x8D89
+#define GL_ALPHA16I_EXT                                    0x8D8A
+#define GL_INTENSITY16I_EXT                                0x8D8B
+#define GL_LUMINANCE16I_EXT                                0x8D8C
+#define GL_LUMINANCE_ALPHA16I_EXT                          0x8D8D
+#define GL_RGBA8I_EXT                                      0x8D8E
+#define GL_RGB8I_EXT                                       0x8D8F
+#define GL_ALPHA8I_EXT                                     0x8D90
+#define GL_INTENSITY8I_EXT                                 0x8D91
+#define GL_LUMINANCE8I_EXT                                 0x8D92
+#define GL_LUMINANCE_ALPHA8I_EXT                           0x8D93
+#define GL_RED_INTEGER_EXT                                 0x8D94
+#define GL_GREEN_INTEGER_EXT                               0x8D95
+#define GL_BLUE_INTEGER_EXT                                0x8D96
+#define GL_ALPHA_INTEGER_EXT                               0x8D97
+#define GL_RGB_INTEGER_EXT                                 0x8D98
+#define GL_RGBA_INTEGER_EXT                                0x8D99
+#define GL_BGR_INTEGER_EXT                                 0x8D9A
+#define GL_BGRA_INTEGER_EXT                                0x8D9B
+#define GL_LUMINANCE_INTEGER_EXT                           0x8D9C
+#define GL_LUMINANCE_ALPHA_INTEGER_EXT                     0x8D9D
+#define GL_RGBA_INTEGER_MODE_EXT                           0x8D9E
+#ifndef GLEE_H_DEFINED_glTexParameterIivEXT
+#define GLEE_H_DEFINED_glTexParameterIivEXT
+  typedef void (APIENTRYP GLEEPFNGLTEXPARAMETERIIVEXTPROC) (GLenum  target, GLenum  pname, const GLint * params);
+  GLEE_EXTERN GLEEPFNGLTEXPARAMETERIIVEXTPROC GLeeFuncPtr_glTexParameterIivEXT;
+  #define glTexParameterIivEXT GLeeFuncPtr_glTexParameterIivEXT
+#endif
+#ifndef GLEE_H_DEFINED_glTexParameterIuivEXT
+#define GLEE_H_DEFINED_glTexParameterIuivEXT
+  typedef void (APIENTRYP GLEEPFNGLTEXPARAMETERIUIVEXTPROC) (GLenum  target, GLenum  pname, const GLuint * params);
+  GLEE_EXTERN GLEEPFNGLTEXPARAMETERIUIVEXTPROC GLeeFuncPtr_glTexParameterIuivEXT;
+  #define glTexParameterIuivEXT GLeeFuncPtr_glTexParameterIuivEXT
+#endif
+#ifndef GLEE_H_DEFINED_glGetTexParameterIivEXT
+#define GLEE_H_DEFINED_glGetTexParameterIivEXT
+  typedef void (APIENTRYP GLEEPFNGLGETTEXPARAMETERIIVEXTPROC) (GLenum  target, GLenum  pname, GLint * params);
+  GLEE_EXTERN GLEEPFNGLGETTEXPARAMETERIIVEXTPROC GLeeFuncPtr_glGetTexParameterIivEXT;
+  #define glGetTexParameterIivEXT GLeeFuncPtr_glGetTexParameterIivEXT
+#endif
+#ifndef GLEE_H_DEFINED_glGetTexParameterIuivEXT
+#define GLEE_H_DEFINED_glGetTexParameterIuivEXT
+  typedef void (APIENTRYP GLEEPFNGLGETTEXPARAMETERIUIVEXTPROC) (GLenum  target, GLenum  pname, GLuint * params);
+  GLEE_EXTERN GLEEPFNGLGETTEXPARAMETERIUIVEXTPROC GLeeFuncPtr_glGetTexParameterIuivEXT;
+  #define glGetTexParameterIuivEXT GLeeFuncPtr_glGetTexParameterIuivEXT
+#endif
+#ifndef GLEE_H_DEFINED_glClearColorIiEXT
+#define GLEE_H_DEFINED_glClearColorIiEXT
+  typedef void (APIENTRYP GLEEPFNGLCLEARCOLORIIEXTPROC) (GLint  red, GLint  green, GLint  blue, GLint  alpha);
+  GLEE_EXTERN GLEEPFNGLCLEARCOLORIIEXTPROC GLeeFuncPtr_glClearColorIiEXT;
+  #define glClearColorIiEXT GLeeFuncPtr_glClearColorIiEXT
+#endif
+#ifndef GLEE_H_DEFINED_glClearColorIuiEXT
+#define GLEE_H_DEFINED_glClearColorIuiEXT
+  typedef void (APIENTRYP GLEEPFNGLCLEARCOLORIUIEXTPROC) (GLuint  red, GLuint  green, GLuint  blue, GLuint  alpha);
+  GLEE_EXTERN GLEEPFNGLCLEARCOLORIUIEXTPROC GLeeFuncPtr_glClearColorIuiEXT;
+  #define glClearColorIuiEXT GLeeFuncPtr_glClearColorIuiEXT
+#endif
+#endif 
+
+/* GL_GREMEDY_frame_terminator */
+
+#ifndef GL_GREMEDY_frame_terminator
+#define GL_GREMEDY_frame_terminator 1
+#define __GLEE_GL_GREMEDY_frame_terminator 1
+/* Constants */
+#ifndef GLEE_H_DEFINED_glFrameTerminatorGREMEDY
+#define GLEE_H_DEFINED_glFrameTerminatorGREMEDY
+  typedef void (APIENTRYP GLEEPFNGLFRAMETERMINATORGREMEDYPROC) ();
+  GLEE_EXTERN GLEEPFNGLFRAMETERMINATORGREMEDYPROC GLeeFuncPtr_glFrameTerminatorGREMEDY;
+  #define glFrameTerminatorGREMEDY GLeeFuncPtr_glFrameTerminatorGREMEDY
+#endif
+#endif 
+
+/* GL_NV_conditional_render */
+
+#ifndef GL_NV_conditional_render
+#define GL_NV_conditional_render 1
+#define __GLEE_GL_NV_conditional_render 1
+/* Constants */
+#define GL_QUERY_WAIT_NV                                   0x8E13
+#define GL_QUERY_NO_WAIT_NV                                0x8E14
+#define GL_QUERY_BY_REGION_WAIT_NV                         0x8E15
+#define GL_QUERY_BY_REGION_NO_WAIT_NV                      0x8E16
+#ifndef GLEE_H_DEFINED_glBeginConditionalRenderNV
+#define GLEE_H_DEFINED_glBeginConditionalRenderNV
+  typedef void (APIENTRYP GLEEPFNGLBEGINCONDITIONALRENDERNVPROC) (GLuint  id, GLenum  mode);
+  GLEE_EXTERN GLEEPFNGLBEGINCONDITIONALRENDERNVPROC GLeeFuncPtr_glBeginConditionalRenderNV;
+  #define glBeginConditionalRenderNV GLeeFuncPtr_glBeginConditionalRenderNV
+#endif
+#ifndef GLEE_H_DEFINED_glEndConditionalRenderNV
+#define GLEE_H_DEFINED_glEndConditionalRenderNV
+  typedef void (APIENTRYP GLEEPFNGLENDCONDITIONALRENDERNVPROC) ();
+  GLEE_EXTERN GLEEPFNGLENDCONDITIONALRENDERNVPROC GLeeFuncPtr_glEndConditionalRenderNV;
+  #define glEndConditionalRenderNV GLeeFuncPtr_glEndConditionalRenderNV
+#endif
+#endif 
+
+/* GL_NV_present_video */
+
+#ifndef GL_NV_present_video
+#define GL_NV_present_video 1
+#define __GLEE_GL_NV_present_video 1
+/* Constants */
+#define GL_FRAME_NV                                        0x8E26
+#define GL_FIELDS_NV                                       0x8E27
+#define GL_CURRENT_TIME_NV                                 0x8E28
+#define GL_NUM_FILL_STREAMS_NV                             0x8E29
+#define GL_PRESENT_TIME_NV                                 0x8E2A
+#define GL_PRESENT_DURATION_NV                             0x8E2B
+#ifndef GLEE_H_DEFINED_glPresentFrameKeyedNV
+#define GLEE_H_DEFINED_glPresentFrameKeyedNV
+  typedef void (APIENTRYP GLEEPFNGLPRESENTFRAMEKEYEDNVPROC) (GLuint  video_slot, GLuint64EXT  minPresentTime, GLuint  beginPresentTimeId, GLuint  presentDurationId, GLenum  type, GLenum  target0, GLuint  fill0, GLuint  key0, GLenum  target1, GLuint  fill1, GLuint  key1);
+  GLEE_EXTERN GLEEPFNGLPRESENTFRAMEKEYEDNVPROC GLeeFuncPtr_glPresentFrameKeyedNV;
+  #define glPresentFrameKeyedNV GLeeFuncPtr_glPresentFrameKeyedNV
+#endif
+#ifndef GLEE_H_DEFINED_glPresentFrameDualFillNV
+#define GLEE_H_DEFINED_glPresentFrameDualFillNV
+  typedef void (APIENTRYP GLEEPFNGLPRESENTFRAMEDUALFILLNVPROC) (GLuint  video_slot, GLuint64EXT  minPresentTime, GLuint  beginPresentTimeId, GLuint  presentDurationId, GLenum  type, GLenum  target0, GLuint  fill0, GLenum  target1, GLuint  fill1, GLenum  target2, GLuint  fill2, GLenum  target3, GLuint  fill3);
+  GLEE_EXTERN GLEEPFNGLPRESENTFRAMEDUALFILLNVPROC GLeeFuncPtr_glPresentFrameDualFillNV;
+  #define glPresentFrameDualFillNV GLeeFuncPtr_glPresentFrameDualFillNV
+#endif
+#ifndef GLEE_H_DEFINED_glGetVideoivNV
+#define GLEE_H_DEFINED_glGetVideoivNV
+  typedef void (APIENTRYP GLEEPFNGLGETVIDEOIVNVPROC) (GLuint  video_slot, GLenum  pname, GLint * params);
+  GLEE_EXTERN GLEEPFNGLGETVIDEOIVNVPROC GLeeFuncPtr_glGetVideoivNV;
+  #define glGetVideoivNV GLeeFuncPtr_glGetVideoivNV
+#endif
+#ifndef GLEE_H_DEFINED_glGetVideouivNV
+#define GLEE_H_DEFINED_glGetVideouivNV
+  typedef void (APIENTRYP GLEEPFNGLGETVIDEOUIVNVPROC) (GLuint  video_slot, GLenum  pname, GLuint * params);
+  GLEE_EXTERN GLEEPFNGLGETVIDEOUIVNVPROC GLeeFuncPtr_glGetVideouivNV;
+  #define glGetVideouivNV GLeeFuncPtr_glGetVideouivNV
+#endif
+#ifndef GLEE_H_DEFINED_glGetVideoi64vNV
+#define GLEE_H_DEFINED_glGetVideoi64vNV
+  typedef void (APIENTRYP GLEEPFNGLGETVIDEOI64VNVPROC) (GLuint  video_slot, GLenum  pname, GLint64EXT * params);
+  GLEE_EXTERN GLEEPFNGLGETVIDEOI64VNVPROC GLeeFuncPtr_glGetVideoi64vNV;
+  #define glGetVideoi64vNV GLeeFuncPtr_glGetVideoi64vNV
+#endif
+#ifndef GLEE_H_DEFINED_glGetVideoui64vNV
+#define GLEE_H_DEFINED_glGetVideoui64vNV
+  typedef void (APIENTRYP GLEEPFNGLGETVIDEOUI64VNVPROC) (GLuint  video_slot, GLenum  pname, GLuint64EXT * params);
+  GLEE_EXTERN GLEEPFNGLGETVIDEOUI64VNVPROC GLeeFuncPtr_glGetVideoui64vNV;
+  #define glGetVideoui64vNV GLeeFuncPtr_glGetVideoui64vNV
+#endif
+#endif 
+
+/* GL_EXT_transform_feedback */
+
+#ifndef GL_EXT_transform_feedback
+#define GL_EXT_transform_feedback 1
+#define __GLEE_GL_EXT_transform_feedback 1
+/* Constants */
+#define GL_TRANSFORM_FEEDBACK_BUFFER_EXT                   0x8C8E
+#define GL_TRANSFORM_FEEDBACK_BUFFER_START_EXT             0x8C84
+#define GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_EXT              0x8C85
+#define GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_EXT           0x8C8F
+#define GL_INTERLEAVED_ATTRIBS_EXT                         0x8C8C
+#define GL_SEPARATE_ATTRIBS_EXT                            0x8C8D
+#define GL_PRIMITIVES_GENERATED_EXT                        0x8C87
+#define GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_EXT       0x8C88
+#define GL_RASTERIZER_DISCARD_EXT                          0x8C89
+#define GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_EXT 0x8C8A
+#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_EXT     0x8C8B
+#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_EXT  0x8C80
+#define GL_TRANSFORM_FEEDBACK_VARYINGS_EXT                 0x8C83
+#define GL_TRANSFORM_FEEDBACK_BUFFER_MODE_EXT              0x8C7F
+#define GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH_EXT       0x8C76
+#ifndef GLEE_H_DEFINED_glBeginTransformFeedbackEXT
+#define GLEE_H_DEFINED_glBeginTransformFeedbackEXT
+  typedef void (APIENTRYP GLEEPFNGLBEGINTRANSFORMFEEDBACKEXTPROC) (GLenum  primitiveMode);
+  GLEE_EXTERN GLEEPFNGLBEGINTRANSFORMFEEDBACKEXTPROC GLeeFuncPtr_glBeginTransformFeedbackEXT;
+  #define glBeginTransformFeedbackEXT GLeeFuncPtr_glBeginTransformFeedbackEXT
+#endif
+#ifndef GLEE_H_DEFINED_glEndTransformFeedbackEXT
+#define GLEE_H_DEFINED_glEndTransformFeedbackEXT
+  typedef void (APIENTRYP GLEEPFNGLENDTRANSFORMFEEDBACKEXTPROC) ();
+  GLEE_EXTERN GLEEPFNGLENDTRANSFORMFEEDBACKEXTPROC GLeeFuncPtr_glEndTransformFeedbackEXT;
+  #define glEndTransformFeedbackEXT GLeeFuncPtr_glEndTransformFeedbackEXT
+#endif
+#ifndef GLEE_H_DEFINED_glBindBufferRangeEXT
+#define GLEE_H_DEFINED_glBindBufferRangeEXT
+  typedef void (APIENTRYP GLEEPFNGLBINDBUFFERRANGEEXTPROC) (GLenum  target, GLuint  index, GLuint  buffer, GLintptr  offset, GLsizeiptr  size);
+  GLEE_EXTERN GLEEPFNGLBINDBUFFERRANGEEXTPROC GLeeFuncPtr_glBindBufferRangeEXT;
+  #define glBindBufferRangeEXT GLeeFuncPtr_glBindBufferRangeEXT
+#endif
+#ifndef GLEE_H_DEFINED_glBindBufferOffsetEXT
+#define GLEE_H_DEFINED_glBindBufferOffsetEXT
+  typedef void (APIENTRYP GLEEPFNGLBINDBUFFEROFFSETEXTPROC) (GLenum  target, GLuint  index, GLuint  buffer, GLintptr  offset);
+  GLEE_EXTERN GLEEPFNGLBINDBUFFEROFFSETEXTPROC GLeeFuncPtr_glBindBufferOffsetEXT;
+  #define glBindBufferOffsetEXT GLeeFuncPtr_glBindBufferOffsetEXT
+#endif
+#ifndef GLEE_H_DEFINED_glBindBufferBaseEXT
+#define GLEE_H_DEFINED_glBindBufferBaseEXT
+  typedef void (APIENTRYP GLEEPFNGLBINDBUFFERBASEEXTPROC) (GLenum  target, GLuint  index, GLuint  buffer);
+  GLEE_EXTERN GLEEPFNGLBINDBUFFERBASEEXTPROC GLeeFuncPtr_glBindBufferBaseEXT;
+  #define glBindBufferBaseEXT GLeeFuncPtr_glBindBufferBaseEXT
+#endif
+#ifndef GLEE_H_DEFINED_glTransformFeedbackVaryingsEXT
+#define GLEE_H_DEFINED_glTransformFeedbackVaryingsEXT
+  typedef void (APIENTRYP GLEEPFNGLTRANSFORMFEEDBACKVARYINGSEXTPROC) (GLuint  program, GLsizei  count, const GLchar* * varyings, GLenum  bufferMode);
+  GLEE_EXTERN GLEEPFNGLTRANSFORMFEEDBACKVARYINGSEXTPROC GLeeFuncPtr_glTransformFeedbackVaryingsEXT;
+  #define glTransformFeedbackVaryingsEXT GLeeFuncPtr_glTransformFeedbackVaryingsEXT
+#endif
+#ifndef GLEE_H_DEFINED_glGetTransformFeedbackVaryingEXT
+#define GLEE_H_DEFINED_glGetTransformFeedbackVaryingEXT
+  typedef void (APIENTRYP GLEEPFNGLGETTRANSFORMFEEDBACKVARYINGEXTPROC) (GLuint  program, GLuint  index, GLsizei  bufSize, GLsizei * length, GLsizei * size, GLenum * type, GLchar * name);
+  GLEE_EXTERN GLEEPFNGLGETTRANSFORMFEEDBACKVARYINGEXTPROC GLeeFuncPtr_glGetTransformFeedbackVaryingEXT;
+  #define glGetTransformFeedbackVaryingEXT GLeeFuncPtr_glGetTransformFeedbackVaryingEXT
+#endif
+#endif 
+
+/* GL_EXT_direct_state_access */
+
+#ifndef GL_EXT_direct_state_access
+#define GL_EXT_direct_state_access 1
+#define __GLEE_GL_EXT_direct_state_access 1
+/* Constants */
+#define GL_PROGRAM_MATRIX_EXT                              0x8E2D
+#define GL_TRANSPOSE_PROGRAM_MATRIX_EXT                    0x8E2E
+#define GL_PROGRAM_MATRIX_STACK_DEPTH_EXT                  0x8E2F
+#ifndef GLEE_H_DEFINED_glClientAttribDefaultEXT
+#define GLEE_H_DEFINED_glClientAttribDefaultEXT
+  typedef void (APIENTRYP GLEEPFNGLCLIENTATTRIBDEFAULTEXTPROC) (GLbitfield  mask);
+  GLEE_EXTERN GLEEPFNGLCLIENTATTRIBDEFAULTEXTPROC GLeeFuncPtr_glClientAttribDefaultEXT;
+  #define glClientAttribDefaultEXT GLeeFuncPtr_glClientAttribDefaultEXT
+#endif
+#ifndef GLEE_H_DEFINED_glPushClientAttribDefaultEXT
+#define GLEE_H_DEFINED_glPushClientAttribDefaultEXT
+  typedef void (APIENTRYP GLEEPFNGLPUSHCLIENTATTRIBDEFAULTEXTPROC) (GLbitfield  mask);
+  GLEE_EXTERN GLEEPFNGLPUSHCLIENTATTRIBDEFAULTEXTPROC GLeeFuncPtr_glPushClientAttribDefaultEXT;
+  #define glPushClientAttribDefaultEXT GLeeFuncPtr_glPushClientAttribDefaultEXT
+#endif
+#ifndef GLEE_H_DEFINED_glMatrixLoadfEXT
+#define GLEE_H_DEFINED_glMatrixLoadfEXT
+  typedef void (APIENTRYP GLEEPFNGLMATRIXLOADFEXTPROC) (GLenum  mode, const GLfloat * m);
+  GLEE_EXTERN GLEEPFNGLMATRIXLOADFEXTPROC GLeeFuncPtr_glMatrixLoadfEXT;
+  #define glMatrixLoadfEXT GLeeFuncPtr_glMatrixLoadfEXT
+#endif
+#ifndef GLEE_H_DEFINED_glMatrixLoaddEXT
+#define GLEE_H_DEFINED_glMatrixLoaddEXT
+  typedef void (APIENTRYP GLEEPFNGLMATRIXLOADDEXTPROC) (GLenum  mode, const GLdouble * m);
+  GLEE_EXTERN GLEEPFNGLMATRIXLOADDEXTPROC GLeeFuncPtr_glMatrixLoaddEXT;
+  #define glMatrixLoaddEXT GLeeFuncPtr_glMatrixLoaddEXT
+#endif
+#ifndef GLEE_H_DEFINED_glMatrixMultfEXT
+#define GLEE_H_DEFINED_glMatrixMultfEXT
+  typedef void (APIENTRYP GLEEPFNGLMATRIXMULTFEXTPROC) (GLenum  mode, const GLfloat * m);
+  GLEE_EXTERN GLEEPFNGLMATRIXMULTFEXTPROC GLeeFuncPtr_glMatrixMultfEXT;
+  #define glMatrixMultfEXT GLeeFuncPtr_glMatrixMultfEXT
+#endif
+#ifndef GLEE_H_DEFINED_glMatrixMultdEXT
+#define GLEE_H_DEFINED_glMatrixMultdEXT
+  typedef void (APIENTRYP GLEEPFNGLMATRIXMULTDEXTPROC) (GLenum  mode, const GLdouble * m);
+  GLEE_EXTERN GLEEPFNGLMATRIXMULTDEXTPROC GLeeFuncPtr_glMatrixMultdEXT;
+  #define glMatrixMultdEXT GLeeFuncPtr_glMatrixMultdEXT
+#endif
+#ifndef GLEE_H_DEFINED_glMatrixLoadIdentityEXT
+#define GLEE_H_DEFINED_glMatrixLoadIdentityEXT
+  typedef void (APIENTRYP GLEEPFNGLMATRIXLOADIDENTITYEXTPROC) (GLenum  mode);
+  GLEE_EXTERN GLEEPFNGLMATRIXLOADIDENTITYEXTPROC GLeeFuncPtr_glMatrixLoadIdentityEXT;
+  #define glMatrixLoadIdentityEXT GLeeFuncPtr_glMatrixLoadIdentityEXT
+#endif
+#ifndef GLEE_H_DEFINED_glMatrixRotatefEXT
+#define GLEE_H_DEFINED_glMatrixRotatefEXT
+  typedef void (APIENTRYP GLEEPFNGLMATRIXROTATEFEXTPROC) (GLenum  mode, GLfloat  angle, GLfloat  x, GLfloat  y, GLfloat  z);
+  GLEE_EXTERN GLEEPFNGLMATRIXROTATEFEXTPROC GLeeFuncPtr_glMatrixRotatefEXT;
+  #define glMatrixRotatefEXT GLeeFuncPtr_glMatrixRotatefEXT
+#endif
+#ifndef GLEE_H_DEFINED_glMatrixRotatedEXT
+#define GLEE_H_DEFINED_glMatrixRotatedEXT
+  typedef void (APIENTRYP GLEEPFNGLMATRIXROTATEDEXTPROC) (GLenum  mode, GLdouble  angle, GLdouble  x, GLdouble  y, GLdouble  z);
+  GLEE_EXTERN GLEEPFNGLMATRIXROTATEDEXTPROC GLeeFuncPtr_glMatrixRotatedEXT;
+  #define glMatrixRotatedEXT GLeeFuncPtr_glMatrixRotatedEXT
+#endif
+#ifndef GLEE_H_DEFINED_glMatrixScalefEXT
+#define GLEE_H_DEFINED_glMatrixScalefEXT
+  typedef void (APIENTRYP GLEEPFNGLMATRIXSCALEFEXTPROC) (GLenum  mode, GLfloat  x, GLfloat  y, GLfloat  z);
+  GLEE_EXTERN GLEEPFNGLMATRIXSCALEFEXTPROC GLeeFuncPtr_glMatrixScalefEXT;
+  #define glMatrixScalefEXT GLeeFuncPtr_glMatrixScalefEXT
+#endif
+#ifndef GLEE_H_DEFINED_glMatrixScaledEXT
+#define GLEE_H_DEFINED_glMatrixScaledEXT
+  typedef void (APIENTRYP GLEEPFNGLMATRIXSCALEDEXTPROC) (GLenum  mode, GLdouble  x, GLdouble  y, GLdouble  z);
+  GLEE_EXTERN GLEEPFNGLMATRIXSCALEDEXTPROC GLeeFuncPtr_glMatrixScaledEXT;
+  #define glMatrixScaledEXT GLeeFuncPtr_glMatrixScaledEXT
+#endif
+#ifndef GLEE_H_DEFINED_glMatrixTranslatefEXT
+#define GLEE_H_DEFINED_glMatrixTranslatefEXT
+  typedef void (APIENTRYP GLEEPFNGLMATRIXTRANSLATEFEXTPROC) (GLenum  mode, GLfloat  x, GLfloat  y, GLfloat  z);
+  GLEE_EXTERN GLEEPFNGLMATRIXTRANSLATEFEXTPROC GLeeFuncPtr_glMatrixTranslatefEXT;
+  #define glMatrixTranslatefEXT GLeeFuncPtr_glMatrixTranslatefEXT
+#endif
+#ifndef GLEE_H_DEFINED_glMatrixTranslatedEXT
+#define GLEE_H_DEFINED_glMatrixTranslatedEXT
+  typedef void (APIENTRYP GLEEPFNGLMATRIXTRANSLATEDEXTPROC) (GLenum  mode, GLdouble  x, GLdouble  y, GLdouble  z);
+  GLEE_EXTERN GLEEPFNGLMATRIXTRANSLATEDEXTPROC GLeeFuncPtr_glMatrixTranslatedEXT;
+  #define glMatrixTranslatedEXT GLeeFuncPtr_glMatrixTranslatedEXT
+#endif
+#ifndef GLEE_H_DEFINED_glMatrixFrustumEXT
+#define GLEE_H_DEFINED_glMatrixFrustumEXT
+  typedef void (APIENTRYP GLEEPFNGLMATRIXFRUSTUMEXTPROC) (GLenum  mode, GLdouble  left, GLdouble  right, GLdouble  bottom, GLdouble  top, GLdouble  zNear, GLdouble  zFar);
+  GLEE_EXTERN GLEEPFNGLMATRIXFRUSTUMEXTPROC GLeeFuncPtr_glMatrixFrustumEXT;
+  #define glMatrixFrustumEXT GLeeFuncPtr_glMatrixFrustumEXT
+#endif
+#ifndef GLEE_H_DEFINED_glMatrixOrthoEXT
+#define GLEE_H_DEFINED_glMatrixOrthoEXT
+  typedef void (APIENTRYP GLEEPFNGLMATRIXORTHOEXTPROC) (GLenum  mode, GLdouble  left, GLdouble  right, GLdouble  bottom, GLdouble  top, GLdouble  zNear, GLdouble  zFar);
+  GLEE_EXTERN GLEEPFNGLMATRIXORTHOEXTPROC GLeeFuncPtr_glMatrixOrthoEXT;
+  #define glMatrixOrthoEXT GLeeFuncPtr_glMatrixOrthoEXT
+#endif
+#ifndef GLEE_H_DEFINED_glMatrixPopEXT
+#define GLEE_H_DEFINED_glMatrixPopEXT
+  typedef void (APIENTRYP GLEEPFNGLMATRIXPOPEXTPROC) (GLenum  mode);
+  GLEE_EXTERN GLEEPFNGLMATRIXPOPEXTPROC GLeeFuncPtr_glMatrixPopEXT;
+  #define glMatrixPopEXT GLeeFuncPtr_glMatrixPopEXT
+#endif
+#ifndef GLEE_H_DEFINED_glMatrixPushEXT
+#define GLEE_H_DEFINED_glMatrixPushEXT
+  typedef void (APIENTRYP GLEEPFNGLMATRIXPUSHEXTPROC) (GLenum  mode);
+  GLEE_EXTERN GLEEPFNGLMATRIXPUSHEXTPROC GLeeFuncPtr_glMatrixPushEXT;
+  #define glMatrixPushEXT GLeeFuncPtr_glMatrixPushEXT
+#endif
+#ifndef GLEE_H_DEFINED_glMatrixLoadTransposefEXT
+#define GLEE_H_DEFINED_glMatrixLoadTransposefEXT
+  typedef void (APIENTRYP GLEEPFNGLMATRIXLOADTRANSPOSEFEXTPROC) (GLenum  mode, const GLfloat * m);
+  GLEE_EXTERN GLEEPFNGLMATRIXLOADTRANSPOSEFEXTPROC GLeeFuncPtr_glMatrixLoadTransposefEXT;
+  #define glMatrixLoadTransposefEXT GLeeFuncPtr_glMatrixLoadTransposefEXT
+#endif
+#ifndef GLEE_H_DEFINED_glMatrixLoadTransposedEXT
+#define GLEE_H_DEFINED_glMatrixLoadTransposedEXT
+  typedef void (APIENTRYP GLEEPFNGLMATRIXLOADTRANSPOSEDEXTPROC) (GLenum  mode, const GLdouble * m);
+  GLEE_EXTERN GLEEPFNGLMATRIXLOADTRANSPOSEDEXTPROC GLeeFuncPtr_glMatrixLoadTransposedEXT;
+  #define glMatrixLoadTransposedEXT GLeeFuncPtr_glMatrixLoadTransposedEXT
+#endif
+#ifndef GLEE_H_DEFINED_glMatrixMultTransposefEXT
+#define GLEE_H_DEFINED_glMatrixMultTransposefEXT
+  typedef void (APIENTRYP GLEEPFNGLMATRIXMULTTRANSPOSEFEXTPROC) (GLenum  mode, const GLfloat * m);
+  GLEE_EXTERN GLEEPFNGLMATRIXMULTTRANSPOSEFEXTPROC GLeeFuncPtr_glMatrixMultTransposefEXT;
+  #define glMatrixMultTransposefEXT GLeeFuncPtr_glMatrixMultTransposefEXT
+#endif
+#ifndef GLEE_H_DEFINED_glMatrixMultTransposedEXT
+#define GLEE_H_DEFINED_glMatrixMultTransposedEXT
+  typedef void (APIENTRYP GLEEPFNGLMATRIXMULTTRANSPOSEDEXTPROC) (GLenum  mode, const GLdouble * m);
+  GLEE_EXTERN GLEEPFNGLMATRIXMULTTRANSPOSEDEXTPROC GLeeFuncPtr_glMatrixMultTransposedEXT;
+  #define glMatrixMultTransposedEXT GLeeFuncPtr_glMatrixMultTransposedEXT
+#endif
+#ifndef GLEE_H_DEFINED_glTextureParameterfEXT
+#define GLEE_H_DEFINED_glTextureParameterfEXT
+  typedef void (APIENTRYP GLEEPFNGLTEXTUREPARAMETERFEXTPROC) (GLuint  texture, GLenum  target, GLenum  pname, GLfloat  param);
+  GLEE_EXTERN GLEEPFNGLTEXTUREPARAMETERFEXTPROC GLeeFuncPtr_glTextureParameterfEXT;
+  #define glTextureParameterfEXT GLeeFuncPtr_glTextureParameterfEXT
+#endif
+#ifndef GLEE_H_DEFINED_glTextureParameterfvEXT
+#define GLEE_H_DEFINED_glTextureParameterfvEXT
+  typedef void (APIENTRYP GLEEPFNGLTEXTUREPARAMETERFVEXTPROC) (GLuint  texture, GLenum  target, GLenum  pname, const GLfloat * params);
+  GLEE_EXTERN GLEEPFNGLTEXTUREPARAMETERFVEXTPROC GLeeFuncPtr_glTextureParameterfvEXT;
+  #define glTextureParameterfvEXT GLeeFuncPtr_glTextureParameterfvEXT
+#endif
+#ifndef GLEE_H_DEFINED_glTextureParameteriEXT
+#define GLEE_H_DEFINED_glTextureParameteriEXT
+  typedef void (APIENTRYP GLEEPFNGLTEXTUREPARAMETERIEXTPROC) (GLuint  texture, GLenum  target, GLenum  pname, GLint  param);
+  GLEE_EXTERN GLEEPFNGLTEXTUREPARAMETERIEXTPROC GLeeFuncPtr_glTextureParameteriEXT;
+  #define glTextureParameteriEXT GLeeFuncPtr_glTextureParameteriEXT
+#endif
+#ifndef GLEE_H_DEFINED_glTextureParameterivEXT
+#define GLEE_H_DEFINED_glTextureParameterivEXT
+  typedef void (APIENTRYP GLEEPFNGLTEXTUREPARAMETERIVEXTPROC) (GLuint  texture, GLenum  target, GLenum  pname, const GLint * params);
+  GLEE_EXTERN GLEEPFNGLTEXTUREPARAMETERIVEXTPROC GLeeFuncPtr_glTextureParameterivEXT;
+  #define glTextureParameterivEXT GLeeFuncPtr_glTextureParameterivEXT
+#endif
+#ifndef GLEE_H_DEFINED_glTextureImage1DEXT
+#define GLEE_H_DEFINED_glTextureImage1DEXT
+  typedef void (APIENTRYP GLEEPFNGLTEXTUREIMAGE1DEXTPROC) (GLuint  texture, GLenum  target, GLint  level, GLenum  internalformat, GLsizei  width, GLint  border, GLenum  format, GLenum  type, const GLvoid * pixels);
+  GLEE_EXTERN GLEEPFNGLTEXTUREIMAGE1DEXTPROC GLeeFuncPtr_glTextureImage1DEXT;
+  #define glTextureImage1DEXT GLeeFuncPtr_glTextureImage1DEXT
+#endif
+#ifndef GLEE_H_DEFINED_glTextureImage2DEXT
+#define GLEE_H_DEFINED_glTextureImage2DEXT
+  typedef void (APIENTRYP GLEEPFNGLTEXTUREIMAGE2DEXTPROC) (GLuint  texture, GLenum  target, GLint  level, GLenum  internalformat, GLsizei  width, GLsizei  height, GLint  border, GLenum  format, GLenum  type, const GLvoid * pixels);
+  GLEE_EXTERN GLEEPFNGLTEXTUREIMAGE2DEXTPROC GLeeFuncPtr_glTextureImage2DEXT;
+  #define glTextureImage2DEXT GLeeFuncPtr_glTextureImage2DEXT
+#endif
+#ifndef GLEE_H_DEFINED_glTextureSubImage1DEXT
+#define GLEE_H_DEFINED_glTextureSubImage1DEXT
+  typedef void (APIENTRYP GLEEPFNGLTEXTURESUBIMAGE1DEXTPROC) (GLuint  texture, GLenum  target, GLint  level, GLint  xoffset, GLsizei  width, GLenum  format, GLenum  type, const GLvoid * pixels);
+  GLEE_EXTERN GLEEPFNGLTEXTURESUBIMAGE1DEXTPROC GLeeFuncPtr_glTextureSubImage1DEXT;
+  #define glTextureSubImage1DEXT GLeeFuncPtr_glTextureSubImage1DEXT
+#endif
+#ifndef GLEE_H_DEFINED_glTextureSubImage2DEXT
+#define GLEE_H_DEFINED_glTextureSubImage2DEXT
+  typedef void (APIENTRYP GLEEPFNGLTEXTURESUBIMAGE2DEXTPROC) (GLuint  texture, GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLsizei  width, GLsizei  height, GLenum  format, GLenum  type, const GLvoid * pixels);
+  GLEE_EXTERN GLEEPFNGLTEXTURESUBIMAGE2DEXTPROC GLeeFuncPtr_glTextureSubImage2DEXT;
+  #define glTextureSubImage2DEXT GLeeFuncPtr_glTextureSubImage2DEXT
+#endif
+#ifndef GLEE_H_DEFINED_glCopyTextureImage1DEXT
+#define GLEE_H_DEFINED_glCopyTextureImage1DEXT
+  typedef void (APIENTRYP GLEEPFNGLCOPYTEXTUREIMAGE1DEXTPROC) (GLuint  texture, GLenum  target, GLint  level, GLenum  internalformat, GLint  x, GLint  y, GLsizei  width, GLint  border);
+  GLEE_EXTERN GLEEPFNGLCOPYTEXTUREIMAGE1DEXTPROC GLeeFuncPtr_glCopyTextureImage1DEXT;
+  #define glCopyTextureImage1DEXT GLeeFuncPtr_glCopyTextureImage1DEXT
+#endif
+#ifndef GLEE_H_DEFINED_glCopyTextureImage2DEXT
+#define GLEE_H_DEFINED_glCopyTextureImage2DEXT
+  typedef void (APIENTRYP GLEEPFNGLCOPYTEXTUREIMAGE2DEXTPROC) (GLuint  texture, GLenum  target, GLint  level, GLenum  internalformat, GLint  x, GLint  y, GLsizei  width, GLsizei  height, GLint  border);
+  GLEE_EXTERN GLEEPFNGLCOPYTEXTUREIMAGE2DEXTPROC GLeeFuncPtr_glCopyTextureImage2DEXT;
+  #define glCopyTextureImage2DEXT GLeeFuncPtr_glCopyTextureImage2DEXT
+#endif
+#ifndef GLEE_H_DEFINED_glCopyTextureSubImage1DEXT
+#define GLEE_H_DEFINED_glCopyTextureSubImage1DEXT
+  typedef void (APIENTRYP GLEEPFNGLCOPYTEXTURESUBIMAGE1DEXTPROC) (GLuint  texture, GLenum  target, GLint  level, GLint  xoffset, GLint  x, GLint  y, GLsizei  width);
+  GLEE_EXTERN GLEEPFNGLCOPYTEXTURESUBIMAGE1DEXTPROC GLeeFuncPtr_glCopyTextureSubImage1DEXT;
+  #define glCopyTextureSubImage1DEXT GLeeFuncPtr_glCopyTextureSubImage1DEXT
+#endif
+#ifndef GLEE_H_DEFINED_glCopyTextureSubImage2DEXT
+#define GLEE_H_DEFINED_glCopyTextureSubImage2DEXT
+  typedef void (APIENTRYP GLEEPFNGLCOPYTEXTURESUBIMAGE2DEXTPROC) (GLuint  texture, GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLint  x, GLint  y, GLsizei  width, GLsizei  height);
+  GLEE_EXTERN GLEEPFNGLCOPYTEXTURESUBIMAGE2DEXTPROC GLeeFuncPtr_glCopyTextureSubImage2DEXT;
+  #define glCopyTextureSubImage2DEXT GLeeFuncPtr_glCopyTextureSubImage2DEXT
+#endif
+#ifndef GLEE_H_DEFINED_glGetTextureImageEXT
+#define GLEE_H_DEFINED_glGetTextureImageEXT
+  typedef void (APIENTRYP GLEEPFNGLGETTEXTUREIMAGEEXTPROC) (GLuint  texture, GLenum  target, GLint  level, GLenum  format, GLenum  type, GLvoid * pixels);
+  GLEE_EXTERN GLEEPFNGLGETTEXTUREIMAGEEXTPROC GLeeFuncPtr_glGetTextureImageEXT;
+  #define glGetTextureImageEXT GLeeFuncPtr_glGetTextureImageEXT
+#endif
+#ifndef GLEE_H_DEFINED_glGetTextureParameterfvEXT
+#define GLEE_H_DEFINED_glGetTextureParameterfvEXT
+  typedef void (APIENTRYP GLEEPFNGLGETTEXTUREPARAMETERFVEXTPROC) (GLuint  texture, GLenum  target, GLenum  pname, GLfloat * params);
+  GLEE_EXTERN GLEEPFNGLGETTEXTUREPARAMETERFVEXTPROC GLeeFuncPtr_glGetTextureParameterfvEXT;
+  #define glGetTextureParameterfvEXT GLeeFuncPtr_glGetTextureParameterfvEXT
+#endif
+#ifndef GLEE_H_DEFINED_glGetTextureParameterivEXT
+#define GLEE_H_DEFINED_glGetTextureParameterivEXT
+  typedef void (APIENTRYP GLEEPFNGLGETTEXTUREPARAMETERIVEXTPROC) (GLuint  texture, GLenum  target, GLenum  pname, GLint * params);
+  GLEE_EXTERN GLEEPFNGLGETTEXTUREPARAMETERIVEXTPROC GLeeFuncPtr_glGetTextureParameterivEXT;
+  #define glGetTextureParameterivEXT GLeeFuncPtr_glGetTextureParameterivEXT
+#endif
+#ifndef GLEE_H_DEFINED_glGetTextureLevelParameterfvEXT
+#define GLEE_H_DEFINED_glGetTextureLevelParameterfvEXT
+  typedef void (APIENTRYP GLEEPFNGLGETTEXTURELEVELPARAMETERFVEXTPROC) (GLuint  texture, GLenum  target, GLint  level, GLenum  pname, GLfloat * params);
+  GLEE_EXTERN GLEEPFNGLGETTEXTURELEVELPARAMETERFVEXTPROC GLeeFuncPtr_glGetTextureLevelParameterfvEXT;
+  #define glGetTextureLevelParameterfvEXT GLeeFuncPtr_glGetTextureLevelParameterfvEXT
+#endif
+#ifndef GLEE_H_DEFINED_glGetTextureLevelParameterivEXT
+#define GLEE_H_DEFINED_glGetTextureLevelParameterivEXT
+  typedef void (APIENTRYP GLEEPFNGLGETTEXTURELEVELPARAMETERIVEXTPROC) (GLuint  texture, GLenum  target, GLint  level, GLenum  pname, GLint * params);
+  GLEE_EXTERN GLEEPFNGLGETTEXTURELEVELPARAMETERIVEXTPROC GLeeFuncPtr_glGetTextureLevelParameterivEXT;
+  #define glGetTextureLevelParameterivEXT GLeeFuncPtr_glGetTextureLevelParameterivEXT
+#endif
+#ifndef GLEE_H_DEFINED_glTextureImage3DEXT
+#define GLEE_H_DEFINED_glTextureImage3DEXT
+  typedef void (APIENTRYP GLEEPFNGLTEXTUREIMAGE3DEXTPROC) (GLuint  texture, GLenum  target, GLint  level, GLenum  internalformat, GLsizei  width, GLsizei  height, GLsizei  depth, GLint  border, GLenum  format, GLenum  type, const GLvoid * pixels);
+  GLEE_EXTERN GLEEPFNGLTEXTUREIMAGE3DEXTPROC GLeeFuncPtr_glTextureImage3DEXT;
+  #define glTextureImage3DEXT GLeeFuncPtr_glTextureImage3DEXT
+#endif
+#ifndef GLEE_H_DEFINED_glTextureSubImage3DEXT
+#define GLEE_H_DEFINED_glTextureSubImage3DEXT
+  typedef void (APIENTRYP GLEEPFNGLTEXTURESUBIMAGE3DEXTPROC) (GLuint  texture, GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLint  zoffset, GLsizei  width, GLsizei  height, GLsizei  depth, GLenum  format, GLenum  type, const GLvoid * pixels);
+  GLEE_EXTERN GLEEPFNGLTEXTURESUBIMAGE3DEXTPROC GLeeFuncPtr_glTextureSubImage3DEXT;
+  #define glTextureSubImage3DEXT GLeeFuncPtr_glTextureSubImage3DEXT
+#endif
+#ifndef GLEE_H_DEFINED_glCopyTextureSubImage3DEXT
+#define GLEE_H_DEFINED_glCopyTextureSubImage3DEXT
+  typedef void (APIENTRYP GLEEPFNGLCOPYTEXTURESUBIMAGE3DEXTPROC) (GLuint  texture, GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLint  zoffset, GLint  x, GLint  y, GLsizei  width, GLsizei  height);
+  GLEE_EXTERN GLEEPFNGLCOPYTEXTURESUBIMAGE3DEXTPROC GLeeFuncPtr_glCopyTextureSubImage3DEXT;
+  #define glCopyTextureSubImage3DEXT GLeeFuncPtr_glCopyTextureSubImage3DEXT
+#endif
+#ifndef GLEE_H_DEFINED_glMultiTexParameterfEXT
+#define GLEE_H_DEFINED_glMultiTexParameterfEXT
+  typedef void (APIENTRYP GLEEPFNGLMULTITEXPARAMETERFEXTPROC) (GLenum  texunit, GLenum  target, GLenum  pname, GLfloat  param);
+  GLEE_EXTERN GLEEPFNGLMULTITEXPARAMETERFEXTPROC GLeeFuncPtr_glMultiTexParameterfEXT;
+  #define glMultiTexParameterfEXT GLeeFuncPtr_glMultiTexParameterfEXT
+#endif
+#ifndef GLEE_H_DEFINED_glMultiTexParameterfvEXT
+#define GLEE_H_DEFINED_glMultiTexParameterfvEXT
+  typedef void (APIENTRYP GLEEPFNGLMULTITEXPARAMETERFVEXTPROC) (GLenum  texunit, GLenum  target, GLenum  pname, const GLfloat * params);
+  GLEE_EXTERN GLEEPFNGLMULTITEXPARAMETERFVEXTPROC GLeeFuncPtr_glMultiTexParameterfvEXT;
+  #define glMultiTexParameterfvEXT GLeeFuncPtr_glMultiTexParameterfvEXT
+#endif
+#ifndef GLEE_H_DEFINED_glMultiTexParameteriEXT
+#define GLEE_H_DEFINED_glMultiTexParameteriEXT
+  typedef void (APIENTRYP GLEEPFNGLMULTITEXPARAMETERIEXTPROC) (GLenum  texunit, GLenum  target, GLenum  pname, GLint  param);
+  GLEE_EXTERN GLEEPFNGLMULTITEXPARAMETERIEXTPROC GLeeFuncPtr_glMultiTexParameteriEXT;
+  #define glMultiTexParameteriEXT GLeeFuncPtr_glMultiTexParameteriEXT
+#endif
+#ifndef GLEE_H_DEFINED_glMultiTexParameterivEXT
+#define GLEE_H_DEFINED_glMultiTexParameterivEXT
+  typedef void (APIENTRYP GLEEPFNGLMULTITEXPARAMETERIVEXTPROC) (GLenum  texunit, GLenum  target, GLenum  pname, const GLint * params);
+  GLEE_EXTERN GLEEPFNGLMULTITEXPARAMETERIVEXTPROC GLeeFuncPtr_glMultiTexParameterivEXT;
+  #define glMultiTexParameterivEXT GLeeFuncPtr_glMultiTexParameterivEXT
+#endif
+#ifndef GLEE_H_DEFINED_glMultiTexImage1DEXT
+#define GLEE_H_DEFINED_glMultiTexImage1DEXT
+  typedef void (APIENTRYP GLEEPFNGLMULTITEXIMAGE1DEXTPROC) (GLenum  texunit, GLenum  target, GLint  level, GLenum  internalformat, GLsizei  width, GLint  border, GLenum  format, GLenum  type, const GLvoid * pixels);
+  GLEE_EXTERN GLEEPFNGLMULTITEXIMAGE1DEXTPROC GLeeFuncPtr_glMultiTexImage1DEXT;
+  #define glMultiTexImage1DEXT GLeeFuncPtr_glMultiTexImage1DEXT
+#endif
+#ifndef GLEE_H_DEFINED_glMultiTexImage2DEXT
+#define GLEE_H_DEFINED_glMultiTexImage2DEXT
+  typedef void (APIENTRYP GLEEPFNGLMULTITEXIMAGE2DEXTPROC) (GLenum  texunit, GLenum  target, GLint  level, GLenum  internalformat, GLsizei  width, GLsizei  height, GLint  border, GLenum  format, GLenum  type, const GLvoid * pixels);
+  GLEE_EXTERN GLEEPFNGLMULTITEXIMAGE2DEXTPROC GLeeFuncPtr_glMultiTexImage2DEXT;
+  #define glMultiTexImage2DEXT GLeeFuncPtr_glMultiTexImage2DEXT
+#endif
+#ifndef GLEE_H_DEFINED_glMultiTexSubImage1DEXT
+#define GLEE_H_DEFINED_glMultiTexSubImage1DEXT
+  typedef void (APIENTRYP GLEEPFNGLMULTITEXSUBIMAGE1DEXTPROC) (GLenum  texunit, GLenum  target, GLint  level, GLint  xoffset, GLsizei  width, GLenum  format, GLenum  type, const GLvoid * pixels);
+  GLEE_EXTERN GLEEPFNGLMULTITEXSUBIMAGE1DEXTPROC GLeeFuncPtr_glMultiTexSubImage1DEXT;
+  #define glMultiTexSubImage1DEXT GLeeFuncPtr_glMultiTexSubImage1DEXT
+#endif
+#ifndef GLEE_H_DEFINED_glMultiTexSubImage2DEXT
+#define GLEE_H_DEFINED_glMultiTexSubImage2DEXT
+  typedef void (APIENTRYP GLEEPFNGLMULTITEXSUBIMAGE2DEXTPROC) (GLenum  texunit, GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLsizei  width, GLsizei  height, GLenum  format, GLenum  type, const GLvoid * pixels);
+  GLEE_EXTERN GLEEPFNGLMULTITEXSUBIMAGE2DEXTPROC GLeeFuncPtr_glMultiTexSubImage2DEXT;
+  #define glMultiTexSubImage2DEXT GLeeFuncPtr_glMultiTexSubImage2DEXT
+#endif
+#ifndef GLEE_H_DEFINED_glCopyMultiTexImage1DEXT
+#define GLEE_H_DEFINED_glCopyMultiTexImage1DEXT
+  typedef void (APIENTRYP GLEEPFNGLCOPYMULTITEXIMAGE1DEXTPROC) (GLenum  texunit, GLenum  target, GLint  level, GLenum  internalformat, GLint  x, GLint  y, GLsizei  width, GLint  border);
+  GLEE_EXTERN GLEEPFNGLCOPYMULTITEXIMAGE1DEXTPROC GLeeFuncPtr_glCopyMultiTexImage1DEXT;
+  #define glCopyMultiTexImage1DEXT GLeeFuncPtr_glCopyMultiTexImage1DEXT
+#endif
+#ifndef GLEE_H_DEFINED_glCopyMultiTexImage2DEXT
+#define GLEE_H_DEFINED_glCopyMultiTexImage2DEXT
+  typedef void (APIENTRYP GLEEPFNGLCOPYMULTITEXIMAGE2DEXTPROC) (GLenum  texunit, GLenum  target, GLint  level, GLenum  internalformat, GLint  x, GLint  y, GLsizei  width, GLsizei  height, GLint  border);
+  GLEE_EXTERN GLEEPFNGLCOPYMULTITEXIMAGE2DEXTPROC GLeeFuncPtr_glCopyMultiTexImage2DEXT;
+  #define glCopyMultiTexImage2DEXT GLeeFuncPtr_glCopyMultiTexImage2DEXT
+#endif
+#ifndef GLEE_H_DEFINED_glCopyMultiTexSubImage1DEXT
+#define GLEE_H_DEFINED_glCopyMultiTexSubImage1DEXT
+  typedef void (APIENTRYP GLEEPFNGLCOPYMULTITEXSUBIMAGE1DEXTPROC) (GLenum  texunit, GLenum  target, GLint  level, GLint  xoffset, GLint  x, GLint  y, GLsizei  width);
+  GLEE_EXTERN GLEEPFNGLCOPYMULTITEXSUBIMAGE1DEXTPROC GLeeFuncPtr_glCopyMultiTexSubImage1DEXT;
+  #define glCopyMultiTexSubImage1DEXT GLeeFuncPtr_glCopyMultiTexSubImage1DEXT
+#endif
+#ifndef GLEE_H_DEFINED_glCopyMultiTexSubImage2DEXT
+#define GLEE_H_DEFINED_glCopyMultiTexSubImage2DEXT
+  typedef void (APIENTRYP GLEEPFNGLCOPYMULTITEXSUBIMAGE2DEXTPROC) (GLenum  texunit, GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLint  x, GLint  y, GLsizei  width, GLsizei  height);
+  GLEE_EXTERN GLEEPFNGLCOPYMULTITEXSUBIMAGE2DEXTPROC GLeeFuncPtr_glCopyMultiTexSubImage2DEXT;
+  #define glCopyMultiTexSubImage2DEXT GLeeFuncPtr_glCopyMultiTexSubImage2DEXT
+#endif
+#ifndef GLEE_H_DEFINED_glGetMultiTexImageEXT
+#define GLEE_H_DEFINED_glGetMultiTexImageEXT
+  typedef void (APIENTRYP GLEEPFNGLGETMULTITEXIMAGEEXTPROC) (GLenum  texunit, GLenum  target, GLint  level, GLenum  format, GLenum  type, GLvoid * pixels);
+  GLEE_EXTERN GLEEPFNGLGETMULTITEXIMAGEEXTPROC GLeeFuncPtr_glGetMultiTexImageEXT;
+  #define glGetMultiTexImageEXT GLeeFuncPtr_glGetMultiTexImageEXT
+#endif
+#ifndef GLEE_H_DEFINED_glGetMultiTexParameterfvEXT
+#define GLEE_H_DEFINED_glGetMultiTexParameterfvEXT
+  typedef void (APIENTRYP GLEEPFNGLGETMULTITEXPARAMETERFVEXTPROC) (GLenum  texunit, GLenum  target, GLenum  pname, GLfloat * params);
+  GLEE_EXTERN GLEEPFNGLGETMULTITEXPARAMETERFVEXTPROC GLeeFuncPtr_glGetMultiTexParameterfvEXT;
+  #define glGetMultiTexParameterfvEXT GLeeFuncPtr_glGetMultiTexParameterfvEXT
+#endif
+#ifndef GLEE_H_DEFINED_glGetMultiTexParameterivEXT
+#define GLEE_H_DEFINED_glGetMultiTexParameterivEXT
+  typedef void (APIENTRYP GLEEPFNGLGETMULTITEXPARAMETERIVEXTPROC) (GLenum  texunit, GLenum  target, GLenum  pname, GLint * params);
+  GLEE_EXTERN GLEEPFNGLGETMULTITEXPARAMETERIVEXTPROC GLeeFuncPtr_glGetMultiTexParameterivEXT;
+  #define glGetMultiTexParameterivEXT GLeeFuncPtr_glGetMultiTexParameterivEXT
+#endif
+#ifndef GLEE_H_DEFINED_glGetMultiTexLevelParameterfvEXT
+#define GLEE_H_DEFINED_glGetMultiTexLevelParameterfvEXT
+  typedef void (APIENTRYP GLEEPFNGLGETMULTITEXLEVELPARAMETERFVEXTPROC) (GLenum  texunit, GLenum  target, GLint  level, GLenum  pname, GLfloat * params);
+  GLEE_EXTERN GLEEPFNGLGETMULTITEXLEVELPARAMETERFVEXTPROC GLeeFuncPtr_glGetMultiTexLevelParameterfvEXT;
+  #define glGetMultiTexLevelParameterfvEXT GLeeFuncPtr_glGetMultiTexLevelParameterfvEXT
+#endif
+#ifndef GLEE_H_DEFINED_glGetMultiTexLevelParameterivEXT
+#define GLEE_H_DEFINED_glGetMultiTexLevelParameterivEXT
+  typedef void (APIENTRYP GLEEPFNGLGETMULTITEXLEVELPARAMETERIVEXTPROC) (GLenum  texunit, GLenum  target, GLint  level, GLenum  pname, GLint * params);
+  GLEE_EXTERN GLEEPFNGLGETMULTITEXLEVELPARAMETERIVEXTPROC GLeeFuncPtr_glGetMultiTexLevelParameterivEXT;
+  #define glGetMultiTexLevelParameterivEXT GLeeFuncPtr_glGetMultiTexLevelParameterivEXT
+#endif
+#ifndef GLEE_H_DEFINED_glMultiTexImage3DEXT
+#define GLEE_H_DEFINED_glMultiTexImage3DEXT
+  typedef void (APIENTRYP GLEEPFNGLMULTITEXIMAGE3DEXTPROC) (GLenum  texunit, GLenum  target, GLint  level, GLenum  internalformat, GLsizei  width, GLsizei  height, GLsizei  depth, GLint  border, GLenum  format, GLenum  type, const GLvoid * pixels);
+  GLEE_EXTERN GLEEPFNGLMULTITEXIMAGE3DEXTPROC GLeeFuncPtr_glMultiTexImage3DEXT;
+  #define glMultiTexImage3DEXT GLeeFuncPtr_glMultiTexImage3DEXT
+#endif
+#ifndef GLEE_H_DEFINED_glMultiTexSubImage3DEXT
+#define GLEE_H_DEFINED_glMultiTexSubImage3DEXT
+  typedef void (APIENTRYP GLEEPFNGLMULTITEXSUBIMAGE3DEXTPROC) (GLenum  texunit, GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLint  zoffset, GLsizei  width, GLsizei  height, GLsizei  depth, GLenum  format, GLenum  type, const GLvoid * pixels);
+  GLEE_EXTERN GLEEPFNGLMULTITEXSUBIMAGE3DEXTPROC GLeeFuncPtr_glMultiTexSubImage3DEXT;
+  #define glMultiTexSubImage3DEXT GLeeFuncPtr_glMultiTexSubImage3DEXT
+#endif
+#ifndef GLEE_H_DEFINED_glCopyMultiTexSubImage3DEXT
+#define GLEE_H_DEFINED_glCopyMultiTexSubImage3DEXT
+  typedef void (APIENTRYP GLEEPFNGLCOPYMULTITEXSUBIMAGE3DEXTPROC) (GLenum  texunit, GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLint  zoffset, GLint  x, GLint  y, GLsizei  width, GLsizei  height);
+  GLEE_EXTERN GLEEPFNGLCOPYMULTITEXSUBIMAGE3DEXTPROC GLeeFuncPtr_glCopyMultiTexSubImage3DEXT;
+  #define glCopyMultiTexSubImage3DEXT GLeeFuncPtr_glCopyMultiTexSubImage3DEXT
+#endif
+#ifndef GLEE_H_DEFINED_glBindMultiTextureEXT
+#define GLEE_H_DEFINED_glBindMultiTextureEXT
+  typedef void (APIENTRYP GLEEPFNGLBINDMULTITEXTUREEXTPROC) (GLenum  texunit, GLenum  target, GLuint  texture);
+  GLEE_EXTERN GLEEPFNGLBINDMULTITEXTUREEXTPROC GLeeFuncPtr_glBindMultiTextureEXT;
+  #define glBindMultiTextureEXT GLeeFuncPtr_glBindMultiTextureEXT
+#endif
+#ifndef GLEE_H_DEFINED_glEnableClientStateIndexedEXT
+#define GLEE_H_DEFINED_glEnableClientStateIndexedEXT
+  typedef void (APIENTRYP GLEEPFNGLENABLECLIENTSTATEINDEXEDEXTPROC) (GLenum  array, GLuint  index);
+  GLEE_EXTERN GLEEPFNGLENABLECLIENTSTATEINDEXEDEXTPROC GLeeFuncPtr_glEnableClientStateIndexedEXT;
+  #define glEnableClientStateIndexedEXT GLeeFuncPtr_glEnableClientStateIndexedEXT
+#endif
+#ifndef GLEE_H_DEFINED_glDisableClientStateIndexedEXT
+#define GLEE_H_DEFINED_glDisableClientStateIndexedEXT
+  typedef void (APIENTRYP GLEEPFNGLDISABLECLIENTSTATEINDEXEDEXTPROC) (GLenum  array, GLuint  index);
+  GLEE_EXTERN GLEEPFNGLDISABLECLIENTSTATEINDEXEDEXTPROC GLeeFuncPtr_glDisableClientStateIndexedEXT;
+  #define glDisableClientStateIndexedEXT GLeeFuncPtr_glDisableClientStateIndexedEXT
+#endif
+#ifndef GLEE_H_DEFINED_glMultiTexCoordPointerEXT
+#define GLEE_H_DEFINED_glMultiTexCoordPointerEXT
+  typedef void (APIENTRYP GLEEPFNGLMULTITEXCOORDPOINTEREXTPROC) (GLenum  texunit, GLint  size, GLenum  type, GLsizei  stride, const GLvoid * pointer);
+  GLEE_EXTERN GLEEPFNGLMULTITEXCOORDPOINTEREXTPROC GLeeFuncPtr_glMultiTexCoordPointerEXT;
+  #define glMultiTexCoordPointerEXT GLeeFuncPtr_glMultiTexCoordPointerEXT
+#endif
+#ifndef GLEE_H_DEFINED_glMultiTexEnvfEXT
+#define GLEE_H_DEFINED_glMultiTexEnvfEXT
+  typedef void (APIENTRYP GLEEPFNGLMULTITEXENVFEXTPROC) (GLenum  texunit, GLenum  target, GLenum  pname, GLfloat  param);
+  GLEE_EXTERN GLEEPFNGLMULTITEXENVFEXTPROC GLeeFuncPtr_glMultiTexEnvfEXT;
+  #define glMultiTexEnvfEXT GLeeFuncPtr_glMultiTexEnvfEXT
+#endif
+#ifndef GLEE_H_DEFINED_glMultiTexEnvfvEXT
+#define GLEE_H_DEFINED_glMultiTexEnvfvEXT
+  typedef void (APIENTRYP GLEEPFNGLMULTITEXENVFVEXTPROC) (GLenum  texunit, GLenum  target, GLenum  pname, const GLfloat * params);
+  GLEE_EXTERN GLEEPFNGLMULTITEXENVFVEXTPROC GLeeFuncPtr_glMultiTexEnvfvEXT;
+  #define glMultiTexEnvfvEXT GLeeFuncPtr_glMultiTexEnvfvEXT
+#endif
+#ifndef GLEE_H_DEFINED_glMultiTexEnviEXT
+#define GLEE_H_DEFINED_glMultiTexEnviEXT
+  typedef void (APIENTRYP GLEEPFNGLMULTITEXENVIEXTPROC) (GLenum  texunit, GLenum  target, GLenum  pname, GLint  param);
+  GLEE_EXTERN GLEEPFNGLMULTITEXENVIEXTPROC GLeeFuncPtr_glMultiTexEnviEXT;
+  #define glMultiTexEnviEXT GLeeFuncPtr_glMultiTexEnviEXT
+#endif
+#ifndef GLEE_H_DEFINED_glMultiTexEnvivEXT
+#define GLEE_H_DEFINED_glMultiTexEnvivEXT
+  typedef void (APIENTRYP GLEEPFNGLMULTITEXENVIVEXTPROC) (GLenum  texunit, GLenum  target, GLenum  pname, const GLint * params);
+  GLEE_EXTERN GLEEPFNGLMULTITEXENVIVEXTPROC GLeeFuncPtr_glMultiTexEnvivEXT;
+  #define glMultiTexEnvivEXT GLeeFuncPtr_glMultiTexEnvivEXT
+#endif
+#ifndef GLEE_H_DEFINED_glMultiTexGendEXT
+#define GLEE_H_DEFINED_glMultiTexGendEXT
+  typedef void (APIENTRYP GLEEPFNGLMULTITEXGENDEXTPROC) (GLenum  texunit, GLenum  coord, GLenum  pname, GLdouble  param);
+  GLEE_EXTERN GLEEPFNGLMULTITEXGENDEXTPROC GLeeFuncPtr_glMultiTexGendEXT;
+  #define glMultiTexGendEXT GLeeFuncPtr_glMultiTexGendEXT
+#endif
+#ifndef GLEE_H_DEFINED_glMultiTexGendvEXT
+#define GLEE_H_DEFINED_glMultiTexGendvEXT
+  typedef void (APIENTRYP GLEEPFNGLMULTITEXGENDVEXTPROC) (GLenum  texunit, GLenum  coord, GLenum  pname, const GLdouble * params);
+  GLEE_EXTERN GLEEPFNGLMULTITEXGENDVEXTPROC GLeeFuncPtr_glMultiTexGendvEXT;
+  #define glMultiTexGendvEXT GLeeFuncPtr_glMultiTexGendvEXT
+#endif
+#ifndef GLEE_H_DEFINED_glMultiTexGenfEXT
+#define GLEE_H_DEFINED_glMultiTexGenfEXT
+  typedef void (APIENTRYP GLEEPFNGLMULTITEXGENFEXTPROC) (GLenum  texunit, GLenum  coord, GLenum  pname, GLfloat  param);
+  GLEE_EXTERN GLEEPFNGLMULTITEXGENFEXTPROC GLeeFuncPtr_glMultiTexGenfEXT;
+  #define glMultiTexGenfEXT GLeeFuncPtr_glMultiTexGenfEXT
+#endif
+#ifndef GLEE_H_DEFINED_glMultiTexGenfvEXT
+#define GLEE_H_DEFINED_glMultiTexGenfvEXT
+  typedef void (APIENTRYP GLEEPFNGLMULTITEXGENFVEXTPROC) (GLenum  texunit, GLenum  coord, GLenum  pname, const GLfloat * params);
+  GLEE_EXTERN GLEEPFNGLMULTITEXGENFVEXTPROC GLeeFuncPtr_glMultiTexGenfvEXT;
+  #define glMultiTexGenfvEXT GLeeFuncPtr_glMultiTexGenfvEXT
+#endif
+#ifndef GLEE_H_DEFINED_glMultiTexGeniEXT
+#define GLEE_H_DEFINED_glMultiTexGeniEXT
+  typedef void (APIENTRYP GLEEPFNGLMULTITEXGENIEXTPROC) (GLenum  texunit, GLenum  coord, GLenum  pname, GLint  param);
+  GLEE_EXTERN GLEEPFNGLMULTITEXGENIEXTPROC GLeeFuncPtr_glMultiTexGeniEXT;
+  #define glMultiTexGeniEXT GLeeFuncPtr_glMultiTexGeniEXT
+#endif
+#ifndef GLEE_H_DEFINED_glMultiTexGenivEXT
+#define GLEE_H_DEFINED_glMultiTexGenivEXT
+  typedef void (APIENTRYP GLEEPFNGLMULTITEXGENIVEXTPROC) (GLenum  texunit, GLenum  coord, GLenum  pname, const GLint * params);
+  GLEE_EXTERN GLEEPFNGLMULTITEXGENIVEXTPROC GLeeFuncPtr_glMultiTexGenivEXT;
+  #define glMultiTexGenivEXT GLeeFuncPtr_glMultiTexGenivEXT
+#endif
+#ifndef GLEE_H_DEFINED_glGetMultiTexEnvfvEXT
+#define GLEE_H_DEFINED_glGetMultiTexEnvfvEXT
+  typedef void (APIENTRYP GLEEPFNGLGETMULTITEXENVFVEXTPROC) (GLenum  texunit, GLenum  target, GLenum  pname, GLfloat * params);
+  GLEE_EXTERN GLEEPFNGLGETMULTITEXENVFVEXTPROC GLeeFuncPtr_glGetMultiTexEnvfvEXT;
+  #define glGetMultiTexEnvfvEXT GLeeFuncPtr_glGetMultiTexEnvfvEXT
+#endif
+#ifndef GLEE_H_DEFINED_glGetMultiTexEnvivEXT
+#define GLEE_H_DEFINED_glGetMultiTexEnvivEXT
+  typedef void (APIENTRYP GLEEPFNGLGETMULTITEXENVIVEXTPROC) (GLenum  texunit, GLenum  target, GLenum  pname, GLint * params);
+  GLEE_EXTERN GLEEPFNGLGETMULTITEXENVIVEXTPROC GLeeFuncPtr_glGetMultiTexEnvivEXT;
+  #define glGetMultiTexEnvivEXT GLeeFuncPtr_glGetMultiTexEnvivEXT
+#endif
+#ifndef GLEE_H_DEFINED_glGetMultiTexGendvEXT
+#define GLEE_H_DEFINED_glGetMultiTexGendvEXT
+  typedef void (APIENTRYP GLEEPFNGLGETMULTITEXGENDVEXTPROC) (GLenum  texunit, GLenum  coord, GLenum  pname, GLdouble * params);
+  GLEE_EXTERN GLEEPFNGLGETMULTITEXGENDVEXTPROC GLeeFuncPtr_glGetMultiTexGendvEXT;
+  #define glGetMultiTexGendvEXT GLeeFuncPtr_glGetMultiTexGendvEXT
+#endif
+#ifndef GLEE_H_DEFINED_glGetMultiTexGenfvEXT
+#define GLEE_H_DEFINED_glGetMultiTexGenfvEXT
+  typedef void (APIENTRYP GLEEPFNGLGETMULTITEXGENFVEXTPROC) (GLenum  texunit, GLenum  coord, GLenum  pname, GLfloat * params);
+  GLEE_EXTERN GLEEPFNGLGETMULTITEXGENFVEXTPROC GLeeFuncPtr_glGetMultiTexGenfvEXT;
+  #define glGetMultiTexGenfvEXT GLeeFuncPtr_glGetMultiTexGenfvEXT
+#endif
+#ifndef GLEE_H_DEFINED_glGetMultiTexGenivEXT
+#define GLEE_H_DEFINED_glGetMultiTexGenivEXT
+  typedef void (APIENTRYP GLEEPFNGLGETMULTITEXGENIVEXTPROC) (GLenum  texunit, GLenum  coord, GLenum  pname, GLint * params);
+  GLEE_EXTERN GLEEPFNGLGETMULTITEXGENIVEXTPROC GLeeFuncPtr_glGetMultiTexGenivEXT;
+  #define glGetMultiTexGenivEXT GLeeFuncPtr_glGetMultiTexGenivEXT
+#endif
+#ifndef GLEE_H_DEFINED_glGetFloatIndexedvEXT
+#define GLEE_H_DEFINED_glGetFloatIndexedvEXT
+  typedef void (APIENTRYP GLEEPFNGLGETFLOATINDEXEDVEXTPROC) (GLenum  target, GLuint  index, GLfloat * data);
+  GLEE_EXTERN GLEEPFNGLGETFLOATINDEXEDVEXTPROC GLeeFuncPtr_glGetFloatIndexedvEXT;
+  #define glGetFloatIndexedvEXT GLeeFuncPtr_glGetFloatIndexedvEXT
+#endif
+#ifndef GLEE_H_DEFINED_glGetDoubleIndexedvEXT
+#define GLEE_H_DEFINED_glGetDoubleIndexedvEXT
+  typedef void (APIENTRYP GLEEPFNGLGETDOUBLEINDEXEDVEXTPROC) (GLenum  target, GLuint  index, GLdouble * data);
+  GLEE_EXTERN GLEEPFNGLGETDOUBLEINDEXEDVEXTPROC GLeeFuncPtr_glGetDoubleIndexedvEXT;
+  #define glGetDoubleIndexedvEXT GLeeFuncPtr_glGetDoubleIndexedvEXT
+#endif
+#ifndef GLEE_H_DEFINED_glGetPointerIndexedvEXT
+#define GLEE_H_DEFINED_glGetPointerIndexedvEXT
+  typedef void (APIENTRYP GLEEPFNGLGETPOINTERINDEXEDVEXTPROC) (GLenum  target, GLuint  index, GLvoid* * data);
+  GLEE_EXTERN GLEEPFNGLGETPOINTERINDEXEDVEXTPROC GLeeFuncPtr_glGetPointerIndexedvEXT;
+  #define glGetPointerIndexedvEXT GLeeFuncPtr_glGetPointerIndexedvEXT
+#endif
+#ifndef GLEE_H_DEFINED_glCompressedTextureImage3DEXT
+#define GLEE_H_DEFINED_glCompressedTextureImage3DEXT
+  typedef void (APIENTRYP GLEEPFNGLCOMPRESSEDTEXTUREIMAGE3DEXTPROC) (GLuint  texture, GLenum  target, GLint  level, GLenum  internalformat, GLsizei  width, GLsizei  height, GLsizei  depth, GLint  border, GLsizei  imageSize, const GLvoid * bits);
+  GLEE_EXTERN GLEEPFNGLCOMPRESSEDTEXTUREIMAGE3DEXTPROC GLeeFuncPtr_glCompressedTextureImage3DEXT;
+  #define glCompressedTextureImage3DEXT GLeeFuncPtr_glCompressedTextureImage3DEXT
+#endif
+#ifndef GLEE_H_DEFINED_glCompressedTextureImage2DEXT
+#define GLEE_H_DEFINED_glCompressedTextureImage2DEXT
+  typedef void (APIENTRYP GLEEPFNGLCOMPRESSEDTEXTUREIMAGE2DEXTPROC) (GLuint  texture, GLenum  target, GLint  level, GLenum  internalformat, GLsizei  width, GLsizei  height, GLint  border, GLsizei  imageSize, const GLvoid * bits);
+  GLEE_EXTERN GLEEPFNGLCOMPRESSEDTEXTUREIMAGE2DEXTPROC GLeeFuncPtr_glCompressedTextureImage2DEXT;
+  #define glCompressedTextureImage2DEXT GLeeFuncPtr_glCompressedTextureImage2DEXT
+#endif
+#ifndef GLEE_H_DEFINED_glCompressedTextureImage1DEXT
+#define GLEE_H_DEFINED_glCompressedTextureImage1DEXT
+  typedef void (APIENTRYP GLEEPFNGLCOMPRESSEDTEXTUREIMAGE1DEXTPROC) (GLuint  texture, GLenum  target, GLint  level, GLenum  internalformat, GLsizei  width, GLint  border, GLsizei  imageSize, const GLvoid * bits);
+  GLEE_EXTERN GLEEPFNGLCOMPRESSEDTEXTUREIMAGE1DEXTPROC GLeeFuncPtr_glCompressedTextureImage1DEXT;
+  #define glCompressedTextureImage1DEXT GLeeFuncPtr_glCompressedTextureImage1DEXT
+#endif
+#ifndef GLEE_H_DEFINED_glCompressedTextureSubImage3DEXT
+#define GLEE_H_DEFINED_glCompressedTextureSubImage3DEXT
+  typedef void (APIENTRYP GLEEPFNGLCOMPRESSEDTEXTURESUBIMAGE3DEXTPROC) (GLuint  texture, GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLint  zoffset, GLsizei  width, GLsizei  height, GLsizei  depth, GLenum  format, GLsizei  imageSize, const GLvoid * bits);
+  GLEE_EXTERN GLEEPFNGLCOMPRESSEDTEXTURESUBIMAGE3DEXTPROC GLeeFuncPtr_glCompressedTextureSubImage3DEXT;
+  #define glCompressedTextureSubImage3DEXT GLeeFuncPtr_glCompressedTextureSubImage3DEXT
+#endif
+#ifndef GLEE_H_DEFINED_glCompressedTextureSubImage2DEXT
+#define GLEE_H_DEFINED_glCompressedTextureSubImage2DEXT
+  typedef void (APIENTRYP GLEEPFNGLCOMPRESSEDTEXTURESUBIMAGE2DEXTPROC) (GLuint  texture, GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLsizei  width, GLsizei  height, GLenum  format, GLsizei  imageSize, const GLvoid * bits);
+  GLEE_EXTERN GLEEPFNGLCOMPRESSEDTEXTURESUBIMAGE2DEXTPROC GLeeFuncPtr_glCompressedTextureSubImage2DEXT;
+  #define glCompressedTextureSubImage2DEXT GLeeFuncPtr_glCompressedTextureSubImage2DEXT
+#endif
+#ifndef GLEE_H_DEFINED_glCompressedTextureSubImage1DEXT
+#define GLEE_H_DEFINED_glCompressedTextureSubImage1DEXT
+  typedef void (APIENTRYP GLEEPFNGLCOMPRESSEDTEXTURESUBIMAGE1DEXTPROC) (GLuint  texture, GLenum  target, GLint  level, GLint  xoffset, GLsizei  width, GLenum  format, GLsizei  imageSize, const GLvoid * bits);
+  GLEE_EXTERN GLEEPFNGLCOMPRESSEDTEXTURESUBIMAGE1DEXTPROC GLeeFuncPtr_glCompressedTextureSubImage1DEXT;
+  #define glCompressedTextureSubImage1DEXT GLeeFuncPtr_glCompressedTextureSubImage1DEXT
+#endif
+#ifndef GLEE_H_DEFINED_glGetCompressedTextureImageEXT
+#define GLEE_H_DEFINED_glGetCompressedTextureImageEXT
+  typedef void (APIENTRYP GLEEPFNGLGETCOMPRESSEDTEXTUREIMAGEEXTPROC) (GLuint  texture, GLenum  target, GLint  lod, GLvoid * img);
+  GLEE_EXTERN GLEEPFNGLGETCOMPRESSEDTEXTUREIMAGEEXTPROC GLeeFuncPtr_glGetCompressedTextureImageEXT;
+  #define glGetCompressedTextureImageEXT GLeeFuncPtr_glGetCompressedTextureImageEXT
+#endif
+#ifndef GLEE_H_DEFINED_glCompressedMultiTexImage3DEXT
+#define GLEE_H_DEFINED_glCompressedMultiTexImage3DEXT
+  typedef void (APIENTRYP GLEEPFNGLCOMPRESSEDMULTITEXIMAGE3DEXTPROC) (GLenum  texunit, GLenum  target, GLint  level, GLenum  internalformat, GLsizei  width, GLsizei  height, GLsizei  depth, GLint  border, GLsizei  imageSize, const GLvoid * bits);
+  GLEE_EXTERN GLEEPFNGLCOMPRESSEDMULTITEXIMAGE3DEXTPROC GLeeFuncPtr_glCompressedMultiTexImage3DEXT;
+  #define glCompressedMultiTexImage3DEXT GLeeFuncPtr_glCompressedMultiTexImage3DEXT
+#endif
+#ifndef GLEE_H_DEFINED_glCompressedMultiTexImage2DEXT
+#define GLEE_H_DEFINED_glCompressedMultiTexImage2DEXT
+  typedef void (APIENTRYP GLEEPFNGLCOMPRESSEDMULTITEXIMAGE2DEXTPROC) (GLenum  texunit, GLenum  target, GLint  level, GLenum  internalformat, GLsizei  width, GLsizei  height, GLint  border, GLsizei  imageSize, const GLvoid * bits);
+  GLEE_EXTERN GLEEPFNGLCOMPRESSEDMULTITEXIMAGE2DEXTPROC GLeeFuncPtr_glCompressedMultiTexImage2DEXT;
+  #define glCompressedMultiTexImage2DEXT GLeeFuncPtr_glCompressedMultiTexImage2DEXT
+#endif
+#ifndef GLEE_H_DEFINED_glCompressedMultiTexImage1DEXT
+#define GLEE_H_DEFINED_glCompressedMultiTexImage1DEXT
+  typedef void (APIENTRYP GLEEPFNGLCOMPRESSEDMULTITEXIMAGE1DEXTPROC) (GLenum  texunit, GLenum  target, GLint  level, GLenum  internalformat, GLsizei  width, GLint  border, GLsizei  imageSize, const GLvoid * bits);
+  GLEE_EXTERN GLEEPFNGLCOMPRESSEDMULTITEXIMAGE1DEXTPROC GLeeFuncPtr_glCompressedMultiTexImage1DEXT;
+  #define glCompressedMultiTexImage1DEXT GLeeFuncPtr_glCompressedMultiTexImage1DEXT
+#endif
+#ifndef GLEE_H_DEFINED_glCompressedMultiTexSubImage3DEXT
+#define GLEE_H_DEFINED_glCompressedMultiTexSubImage3DEXT
+  typedef void (APIENTRYP GLEEPFNGLCOMPRESSEDMULTITEXSUBIMAGE3DEXTPROC) (GLenum  texunit, GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLint  zoffset, GLsizei  width, GLsizei  height, GLsizei  depth, GLenum  format, GLsizei  imageSize, const GLvoid * bits);
+  GLEE_EXTERN GLEEPFNGLCOMPRESSEDMULTITEXSUBIMAGE3DEXTPROC GLeeFuncPtr_glCompressedMultiTexSubImage3DEXT;
+  #define glCompressedMultiTexSubImage3DEXT GLeeFuncPtr_glCompressedMultiTexSubImage3DEXT
+#endif
+#ifndef GLEE_H_DEFINED_glCompressedMultiTexSubImage2DEXT
+#define GLEE_H_DEFINED_glCompressedMultiTexSubImage2DEXT
+  typedef void (APIENTRYP GLEEPFNGLCOMPRESSEDMULTITEXSUBIMAGE2DEXTPROC) (GLenum  texunit, GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLsizei  width, GLsizei  height, GLenum  format, GLsizei  imageSize, const GLvoid * bits);
+  GLEE_EXTERN GLEEPFNGLCOMPRESSEDMULTITEXSUBIMAGE2DEXTPROC GLeeFuncPtr_glCompressedMultiTexSubImage2DEXT;
+  #define glCompressedMultiTexSubImage2DEXT GLeeFuncPtr_glCompressedMultiTexSubImage2DEXT
+#endif
+#ifndef GLEE_H_DEFINED_glCompressedMultiTexSubImage1DEXT
+#define GLEE_H_DEFINED_glCompressedMultiTexSubImage1DEXT
+  typedef void (APIENTRYP GLEEPFNGLCOMPRESSEDMULTITEXSUBIMAGE1DEXTPROC) (GLenum  texunit, GLenum  target, GLint  level, GLint  xoffset, GLsizei  width, GLenum  format, GLsizei  imageSize, const GLvoid * bits);
+  GLEE_EXTERN GLEEPFNGLCOMPRESSEDMULTITEXSUBIMAGE1DEXTPROC GLeeFuncPtr_glCompressedMultiTexSubImage1DEXT;
+  #define glCompressedMultiTexSubImage1DEXT GLeeFuncPtr_glCompressedMultiTexSubImage1DEXT
+#endif
+#ifndef GLEE_H_DEFINED_glGetCompressedMultiTexImageEXT
+#define GLEE_H_DEFINED_glGetCompressedMultiTexImageEXT
+  typedef void (APIENTRYP GLEEPFNGLGETCOMPRESSEDMULTITEXIMAGEEXTPROC) (GLenum  texunit, GLenum  target, GLint  lod, GLvoid * img);
+  GLEE_EXTERN GLEEPFNGLGETCOMPRESSEDMULTITEXIMAGEEXTPROC GLeeFuncPtr_glGetCompressedMultiTexImageEXT;
+  #define glGetCompressedMultiTexImageEXT GLeeFuncPtr_glGetCompressedMultiTexImageEXT
+#endif
+#ifndef GLEE_H_DEFINED_glNamedProgramStringEXT
+#define GLEE_H_DEFINED_glNamedProgramStringEXT
+  typedef void (APIENTRYP GLEEPFNGLNAMEDPROGRAMSTRINGEXTPROC) (GLuint  program, GLenum  target, GLenum  format, GLsizei  len, const GLvoid * string);
+  GLEE_EXTERN GLEEPFNGLNAMEDPROGRAMSTRINGEXTPROC GLeeFuncPtr_glNamedProgramStringEXT;
+  #define glNamedProgramStringEXT GLeeFuncPtr_glNamedProgramStringEXT
+#endif
+#ifndef GLEE_H_DEFINED_glNamedProgramLocalParameter4dEXT
+#define GLEE_H_DEFINED_glNamedProgramLocalParameter4dEXT
+  typedef void (APIENTRYP GLEEPFNGLNAMEDPROGRAMLOCALPARAMETER4DEXTPROC) (GLuint  program, GLenum  target, GLuint  index, GLdouble  x, GLdouble  y, GLdouble  z, GLdouble  w);
+  GLEE_EXTERN GLEEPFNGLNAMEDPROGRAMLOCALPARAMETER4DEXTPROC GLeeFuncPtr_glNamedProgramLocalParameter4dEXT;
+  #define glNamedProgramLocalParameter4dEXT GLeeFuncPtr_glNamedProgramLocalParameter4dEXT
+#endif
+#ifndef GLEE_H_DEFINED_glNamedProgramLocalParameter4dvEXT
+#define GLEE_H_DEFINED_glNamedProgramLocalParameter4dvEXT
+  typedef void (APIENTRYP GLEEPFNGLNAMEDPROGRAMLOCALPARAMETER4DVEXTPROC) (GLuint  program, GLenum  target, GLuint  index, const GLdouble * params);
+  GLEE_EXTERN GLEEPFNGLNAMEDPROGRAMLOCALPARAMETER4DVEXTPROC GLeeFuncPtr_glNamedProgramLocalParameter4dvEXT;
+  #define glNamedProgramLocalParameter4dvEXT GLeeFuncPtr_glNamedProgramLocalParameter4dvEXT
+#endif
+#ifndef GLEE_H_DEFINED_glNamedProgramLocalParameter4fEXT
+#define GLEE_H_DEFINED_glNamedProgramLocalParameter4fEXT
+  typedef void (APIENTRYP GLEEPFNGLNAMEDPROGRAMLOCALPARAMETER4FEXTPROC) (GLuint  program, GLenum  target, GLuint  index, GLfloat  x, GLfloat  y, GLfloat  z, GLfloat  w);
+  GLEE_EXTERN GLEEPFNGLNAMEDPROGRAMLOCALPARAMETER4FEXTPROC GLeeFuncPtr_glNamedProgramLocalParameter4fEXT;
+  #define glNamedProgramLocalParameter4fEXT GLeeFuncPtr_glNamedProgramLocalParameter4fEXT
+#endif
+#ifndef GLEE_H_DEFINED_glNamedProgramLocalParameter4fvEXT
+#define GLEE_H_DEFINED_glNamedProgramLocalParameter4fvEXT
+  typedef void (APIENTRYP GLEEPFNGLNAMEDPROGRAMLOCALPARAMETER4FVEXTPROC) (GLuint  program, GLenum  target, GLuint  index, const GLfloat * params);
+  GLEE_EXTERN GLEEPFNGLNAMEDPROGRAMLOCALPARAMETER4FVEXTPROC GLeeFuncPtr_glNamedProgramLocalParameter4fvEXT;
+  #define glNamedProgramLocalParameter4fvEXT GLeeFuncPtr_glNamedProgramLocalParameter4fvEXT
+#endif
+#ifndef GLEE_H_DEFINED_glGetNamedProgramLocalParameterdvEXT
+#define GLEE_H_DEFINED_glGetNamedProgramLocalParameterdvEXT
+  typedef void (APIENTRYP GLEEPFNGLGETNAMEDPROGRAMLOCALPARAMETERDVEXTPROC) (GLuint  program, GLenum  target, GLuint  index, GLdouble * params);
+  GLEE_EXTERN GLEEPFNGLGETNAMEDPROGRAMLOCALPARAMETERDVEXTPROC GLeeFuncPtr_glGetNamedProgramLocalParameterdvEXT;
+  #define glGetNamedProgramLocalParameterdvEXT GLeeFuncPtr_glGetNamedProgramLocalParameterdvEXT
+#endif
+#ifndef GLEE_H_DEFINED_glGetNamedProgramLocalParameterfvEXT
+#define GLEE_H_DEFINED_glGetNamedProgramLocalParameterfvEXT
+  typedef void (APIENTRYP GLEEPFNGLGETNAMEDPROGRAMLOCALPARAMETERFVEXTPROC) (GLuint  program, GLenum  target, GLuint  index, GLfloat * params);
+  GLEE_EXTERN GLEEPFNGLGETNAMEDPROGRAMLOCALPARAMETERFVEXTPROC GLeeFuncPtr_glGetNamedProgramLocalParameterfvEXT;
+  #define glGetNamedProgramLocalParameterfvEXT GLeeFuncPtr_glGetNamedProgramLocalParameterfvEXT
+#endif
+#ifndef GLEE_H_DEFINED_glGetNamedProgramivEXT
+#define GLEE_H_DEFINED_glGetNamedProgramivEXT
+  typedef void (APIENTRYP GLEEPFNGLGETNAMEDPROGRAMIVEXTPROC) (GLuint  program, GLenum  target, GLenum  pname, GLint * params);
+  GLEE_EXTERN GLEEPFNGLGETNAMEDPROGRAMIVEXTPROC GLeeFuncPtr_glGetNamedProgramivEXT;
+  #define glGetNamedProgramivEXT GLeeFuncPtr_glGetNamedProgramivEXT
+#endif
+#ifndef GLEE_H_DEFINED_glGetNamedProgramStringEXT
+#define GLEE_H_DEFINED_glGetNamedProgramStringEXT
+  typedef void (APIENTRYP GLEEPFNGLGETNAMEDPROGRAMSTRINGEXTPROC) (GLuint  program, GLenum  target, GLenum  pname, GLvoid * string);
+  GLEE_EXTERN GLEEPFNGLGETNAMEDPROGRAMSTRINGEXTPROC GLeeFuncPtr_glGetNamedProgramStringEXT;
+  #define glGetNamedProgramStringEXT GLeeFuncPtr_glGetNamedProgramStringEXT
+#endif
+#ifndef GLEE_H_DEFINED_glNamedProgramLocalParameters4fvEXT
+#define GLEE_H_DEFINED_glNamedProgramLocalParameters4fvEXT
+  typedef void (APIENTRYP GLEEPFNGLNAMEDPROGRAMLOCALPARAMETERS4FVEXTPROC) (GLuint  program, GLenum  target, GLuint  index, GLsizei  count, const GLfloat * params);
+  GLEE_EXTERN GLEEPFNGLNAMEDPROGRAMLOCALPARAMETERS4FVEXTPROC GLeeFuncPtr_glNamedProgramLocalParameters4fvEXT;
+  #define glNamedProgramLocalParameters4fvEXT GLeeFuncPtr_glNamedProgramLocalParameters4fvEXT
+#endif
+#ifndef GLEE_H_DEFINED_glNamedProgramLocalParameterI4iEXT
+#define GLEE_H_DEFINED_glNamedProgramLocalParameterI4iEXT
+  typedef void (APIENTRYP GLEEPFNGLNAMEDPROGRAMLOCALPARAMETERI4IEXTPROC) (GLuint  program, GLenum  target, GLuint  index, GLint  x, GLint  y, GLint  z, GLint  w);
+  GLEE_EXTERN GLEEPFNGLNAMEDPROGRAMLOCALPARAMETERI4IEXTPROC GLeeFuncPtr_glNamedProgramLocalParameterI4iEXT;
+  #define glNamedProgramLocalParameterI4iEXT GLeeFuncPtr_glNamedProgramLocalParameterI4iEXT
+#endif
+#ifndef GLEE_H_DEFINED_glNamedProgramLocalParameterI4ivEXT
+#define GLEE_H_DEFINED_glNamedProgramLocalParameterI4ivEXT
+  typedef void (APIENTRYP GLEEPFNGLNAMEDPROGRAMLOCALPARAMETERI4IVEXTPROC) (GLuint  program, GLenum  target, GLuint  index, const GLint * params);
+  GLEE_EXTERN GLEEPFNGLNAMEDPROGRAMLOCALPARAMETERI4IVEXTPROC GLeeFuncPtr_glNamedProgramLocalParameterI4ivEXT;
+  #define glNamedProgramLocalParameterI4ivEXT GLeeFuncPtr_glNamedProgramLocalParameterI4ivEXT
+#endif
+#ifndef GLEE_H_DEFINED_glNamedProgramLocalParametersI4ivEXT
+#define GLEE_H_DEFINED_glNamedProgramLocalParametersI4ivEXT
+  typedef void (APIENTRYP GLEEPFNGLNAMEDPROGRAMLOCALPARAMETERSI4IVEXTPROC) (GLuint  program, GLenum  target, GLuint  index, GLsizei  count, const GLint * params);
+  GLEE_EXTERN GLEEPFNGLNAMEDPROGRAMLOCALPARAMETERSI4IVEXTPROC GLeeFuncPtr_glNamedProgramLocalParametersI4ivEXT;
+  #define glNamedProgramLocalParametersI4ivEXT GLeeFuncPtr_glNamedProgramLocalParametersI4ivEXT
+#endif
+#ifndef GLEE_H_DEFINED_glNamedProgramLocalParameterI4uiEXT
+#define GLEE_H_DEFINED_glNamedProgramLocalParameterI4uiEXT
+  typedef void (APIENTRYP GLEEPFNGLNAMEDPROGRAMLOCALPARAMETERI4UIEXTPROC) (GLuint  program, GLenum  target, GLuint  index, GLuint  x, GLuint  y, GLuint  z, GLuint  w);
+  GLEE_EXTERN GLEEPFNGLNAMEDPROGRAMLOCALPARAMETERI4UIEXTPROC GLeeFuncPtr_glNamedProgramLocalParameterI4uiEXT;
+  #define glNamedProgramLocalParameterI4uiEXT GLeeFuncPtr_glNamedProgramLocalParameterI4uiEXT
+#endif
+#ifndef GLEE_H_DEFINED_glNamedProgramLocalParameterI4uivEXT
+#define GLEE_H_DEFINED_glNamedProgramLocalParameterI4uivEXT
+  typedef void (APIENTRYP GLEEPFNGLNAMEDPROGRAMLOCALPARAMETERI4UIVEXTPROC) (GLuint  program, GLenum  target, GLuint  index, const GLuint * params);
+  GLEE_EXTERN GLEEPFNGLNAMEDPROGRAMLOCALPARAMETERI4UIVEXTPROC GLeeFuncPtr_glNamedProgramLocalParameterI4uivEXT;
+  #define glNamedProgramLocalParameterI4uivEXT GLeeFuncPtr_glNamedProgramLocalParameterI4uivEXT
+#endif
+#ifndef GLEE_H_DEFINED_glNamedProgramLocalParametersI4uivEXT
+#define GLEE_H_DEFINED_glNamedProgramLocalParametersI4uivEXT
+  typedef void (APIENTRYP GLEEPFNGLNAMEDPROGRAMLOCALPARAMETERSI4UIVEXTPROC) (GLuint  program, GLenum  target, GLuint  index, GLsizei  count, const GLuint * params);
+  GLEE_EXTERN GLEEPFNGLNAMEDPROGRAMLOCALPARAMETERSI4UIVEXTPROC GLeeFuncPtr_glNamedProgramLocalParametersI4uivEXT;
+  #define glNamedProgramLocalParametersI4uivEXT GLeeFuncPtr_glNamedProgramLocalParametersI4uivEXT
+#endif
+#ifndef GLEE_H_DEFINED_glGetNamedProgramLocalParameterIivEXT
+#define GLEE_H_DEFINED_glGetNamedProgramLocalParameterIivEXT
+  typedef void (APIENTRYP GLEEPFNGLGETNAMEDPROGRAMLOCALPARAMETERIIVEXTPROC) (GLuint  program, GLenum  target, GLuint  index, GLint * params);
+  GLEE_EXTERN GLEEPFNGLGETNAMEDPROGRAMLOCALPARAMETERIIVEXTPROC GLeeFuncPtr_glGetNamedProgramLocalParameterIivEXT;
+  #define glGetNamedProgramLocalParameterIivEXT GLeeFuncPtr_glGetNamedProgramLocalParameterIivEXT
+#endif
+#ifndef GLEE_H_DEFINED_glGetNamedProgramLocalParameterIuivEXT
+#define GLEE_H_DEFINED_glGetNamedProgramLocalParameterIuivEXT
+  typedef void (APIENTRYP GLEEPFNGLGETNAMEDPROGRAMLOCALPARAMETERIUIVEXTPROC) (GLuint  program, GLenum  target, GLuint  index, GLuint * params);
+  GLEE_EXTERN GLEEPFNGLGETNAMEDPROGRAMLOCALPARAMETERIUIVEXTPROC GLeeFuncPtr_glGetNamedProgramLocalParameterIuivEXT;
+  #define glGetNamedProgramLocalParameterIuivEXT GLeeFuncPtr_glGetNamedProgramLocalParameterIuivEXT
+#endif
+#ifndef GLEE_H_DEFINED_glTextureParameterIivEXT
+#define GLEE_H_DEFINED_glTextureParameterIivEXT
+  typedef void (APIENTRYP GLEEPFNGLTEXTUREPARAMETERIIVEXTPROC) (GLuint  texture, GLenum  target, GLenum  pname, const GLint * params);
+  GLEE_EXTERN GLEEPFNGLTEXTUREPARAMETERIIVEXTPROC GLeeFuncPtr_glTextureParameterIivEXT;
+  #define glTextureParameterIivEXT GLeeFuncPtr_glTextureParameterIivEXT
+#endif
+#ifndef GLEE_H_DEFINED_glTextureParameterIuivEXT
+#define GLEE_H_DEFINED_glTextureParameterIuivEXT
+  typedef void (APIENTRYP GLEEPFNGLTEXTUREPARAMETERIUIVEXTPROC) (GLuint  texture, GLenum  target, GLenum  pname, const GLuint * params);
+  GLEE_EXTERN GLEEPFNGLTEXTUREPARAMETERIUIVEXTPROC GLeeFuncPtr_glTextureParameterIuivEXT;
+  #define glTextureParameterIuivEXT GLeeFuncPtr_glTextureParameterIuivEXT
+#endif
+#ifndef GLEE_H_DEFINED_glGetTextureParameterIivEXT
+#define GLEE_H_DEFINED_glGetTextureParameterIivEXT
+  typedef void (APIENTRYP GLEEPFNGLGETTEXTUREPARAMETERIIVEXTPROC) (GLuint  texture, GLenum  target, GLenum  pname, GLint * params);
+  GLEE_EXTERN GLEEPFNGLGETTEXTUREPARAMETERIIVEXTPROC GLeeFuncPtr_glGetTextureParameterIivEXT;
+  #define glGetTextureParameterIivEXT GLeeFuncPtr_glGetTextureParameterIivEXT
+#endif
+#ifndef GLEE_H_DEFINED_glGetTextureParameterIuivEXT
+#define GLEE_H_DEFINED_glGetTextureParameterIuivEXT
+  typedef void (APIENTRYP GLEEPFNGLGETTEXTUREPARAMETERIUIVEXTPROC) (GLuint  texture, GLenum  target, GLenum  pname, GLuint * params);
+  GLEE_EXTERN GLEEPFNGLGETTEXTUREPARAMETERIUIVEXTPROC GLeeFuncPtr_glGetTextureParameterIuivEXT;
+  #define glGetTextureParameterIuivEXT GLeeFuncPtr_glGetTextureParameterIuivEXT
+#endif
+#ifndef GLEE_H_DEFINED_glMultiTexParameterIivEXT
+#define GLEE_H_DEFINED_glMultiTexParameterIivEXT
+  typedef void (APIENTRYP GLEEPFNGLMULTITEXPARAMETERIIVEXTPROC) (GLenum  texunit, GLenum  target, GLenum  pname, const GLint * params);
+  GLEE_EXTERN GLEEPFNGLMULTITEXPARAMETERIIVEXTPROC GLeeFuncPtr_glMultiTexParameterIivEXT;
+  #define glMultiTexParameterIivEXT GLeeFuncPtr_glMultiTexParameterIivEXT
+#endif
+#ifndef GLEE_H_DEFINED_glMultiTexParameterIuivEXT
+#define GLEE_H_DEFINED_glMultiTexParameterIuivEXT
+  typedef void (APIENTRYP GLEEPFNGLMULTITEXPARAMETERIUIVEXTPROC) (GLenum  texunit, GLenum  target, GLenum  pname, const GLuint * params);
+  GLEE_EXTERN GLEEPFNGLMULTITEXPARAMETERIUIVEXTPROC GLeeFuncPtr_glMultiTexParameterIuivEXT;
+  #define glMultiTexParameterIuivEXT GLeeFuncPtr_glMultiTexParameterIuivEXT
+#endif
+#ifndef GLEE_H_DEFINED_glGetMultiTexParameterIivEXT
+#define GLEE_H_DEFINED_glGetMultiTexParameterIivEXT
+  typedef void (APIENTRYP GLEEPFNGLGETMULTITEXPARAMETERIIVEXTPROC) (GLenum  texunit, GLenum  target, GLenum  pname, GLint * params);
+  GLEE_EXTERN GLEEPFNGLGETMULTITEXPARAMETERIIVEXTPROC GLeeFuncPtr_glGetMultiTexParameterIivEXT;
+  #define glGetMultiTexParameterIivEXT GLeeFuncPtr_glGetMultiTexParameterIivEXT
+#endif
+#ifndef GLEE_H_DEFINED_glGetMultiTexParameterIuivEXT
+#define GLEE_H_DEFINED_glGetMultiTexParameterIuivEXT
+  typedef void (APIENTRYP GLEEPFNGLGETMULTITEXPARAMETERIUIVEXTPROC) (GLenum  texunit, GLenum  target, GLenum  pname, GLuint * params);
+  GLEE_EXTERN GLEEPFNGLGETMULTITEXPARAMETERIUIVEXTPROC GLeeFuncPtr_glGetMultiTexParameterIuivEXT;
+  #define glGetMultiTexParameterIuivEXT GLeeFuncPtr_glGetMultiTexParameterIuivEXT
+#endif
+#ifndef GLEE_H_DEFINED_glProgramUniform1fEXT
+#define GLEE_H_DEFINED_glProgramUniform1fEXT
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMUNIFORM1FEXTPROC) (GLuint  program, GLint  location, GLfloat  v0);
+  GLEE_EXTERN GLEEPFNGLPROGRAMUNIFORM1FEXTPROC GLeeFuncPtr_glProgramUniform1fEXT;
+  #define glProgramUniform1fEXT GLeeFuncPtr_glProgramUniform1fEXT
+#endif
+#ifndef GLEE_H_DEFINED_glProgramUniform2fEXT
+#define GLEE_H_DEFINED_glProgramUniform2fEXT
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMUNIFORM2FEXTPROC) (GLuint  program, GLint  location, GLfloat  v0, GLfloat  v1);
+  GLEE_EXTERN GLEEPFNGLPROGRAMUNIFORM2FEXTPROC GLeeFuncPtr_glProgramUniform2fEXT;
+  #define glProgramUniform2fEXT GLeeFuncPtr_glProgramUniform2fEXT
+#endif
+#ifndef GLEE_H_DEFINED_glProgramUniform3fEXT
+#define GLEE_H_DEFINED_glProgramUniform3fEXT
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMUNIFORM3FEXTPROC) (GLuint  program, GLint  location, GLfloat  v0, GLfloat  v1, GLfloat  v2);
+  GLEE_EXTERN GLEEPFNGLPROGRAMUNIFORM3FEXTPROC GLeeFuncPtr_glProgramUniform3fEXT;
+  #define glProgramUniform3fEXT GLeeFuncPtr_glProgramUniform3fEXT
+#endif
+#ifndef GLEE_H_DEFINED_glProgramUniform4fEXT
+#define GLEE_H_DEFINED_glProgramUniform4fEXT
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMUNIFORM4FEXTPROC) (GLuint  program, GLint  location, GLfloat  v0, GLfloat  v1, GLfloat  v2, GLfloat  v3);
+  GLEE_EXTERN GLEEPFNGLPROGRAMUNIFORM4FEXTPROC GLeeFuncPtr_glProgramUniform4fEXT;
+  #define glProgramUniform4fEXT GLeeFuncPtr_glProgramUniform4fEXT
+#endif
+#ifndef GLEE_H_DEFINED_glProgramUniform1iEXT
+#define GLEE_H_DEFINED_glProgramUniform1iEXT
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMUNIFORM1IEXTPROC) (GLuint  program, GLint  location, GLint  v0);
+  GLEE_EXTERN GLEEPFNGLPROGRAMUNIFORM1IEXTPROC GLeeFuncPtr_glProgramUniform1iEXT;
+  #define glProgramUniform1iEXT GLeeFuncPtr_glProgramUniform1iEXT
+#endif
+#ifndef GLEE_H_DEFINED_glProgramUniform2iEXT
+#define GLEE_H_DEFINED_glProgramUniform2iEXT
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMUNIFORM2IEXTPROC) (GLuint  program, GLint  location, GLint  v0, GLint  v1);
+  GLEE_EXTERN GLEEPFNGLPROGRAMUNIFORM2IEXTPROC GLeeFuncPtr_glProgramUniform2iEXT;
+  #define glProgramUniform2iEXT GLeeFuncPtr_glProgramUniform2iEXT
+#endif
+#ifndef GLEE_H_DEFINED_glProgramUniform3iEXT
+#define GLEE_H_DEFINED_glProgramUniform3iEXT
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMUNIFORM3IEXTPROC) (GLuint  program, GLint  location, GLint  v0, GLint  v1, GLint  v2);
+  GLEE_EXTERN GLEEPFNGLPROGRAMUNIFORM3IEXTPROC GLeeFuncPtr_glProgramUniform3iEXT;
+  #define glProgramUniform3iEXT GLeeFuncPtr_glProgramUniform3iEXT
+#endif
+#ifndef GLEE_H_DEFINED_glProgramUniform4iEXT
+#define GLEE_H_DEFINED_glProgramUniform4iEXT
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMUNIFORM4IEXTPROC) (GLuint  program, GLint  location, GLint  v0, GLint  v1, GLint  v2, GLint  v3);
+  GLEE_EXTERN GLEEPFNGLPROGRAMUNIFORM4IEXTPROC GLeeFuncPtr_glProgramUniform4iEXT;
+  #define glProgramUniform4iEXT GLeeFuncPtr_glProgramUniform4iEXT
+#endif
+#ifndef GLEE_H_DEFINED_glProgramUniform1fvEXT
+#define GLEE_H_DEFINED_glProgramUniform1fvEXT
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMUNIFORM1FVEXTPROC) (GLuint  program, GLint  location, GLsizei  count, const GLfloat * value);
+  GLEE_EXTERN GLEEPFNGLPROGRAMUNIFORM1FVEXTPROC GLeeFuncPtr_glProgramUniform1fvEXT;
+  #define glProgramUniform1fvEXT GLeeFuncPtr_glProgramUniform1fvEXT
+#endif
+#ifndef GLEE_H_DEFINED_glProgramUniform2fvEXT
+#define GLEE_H_DEFINED_glProgramUniform2fvEXT
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMUNIFORM2FVEXTPROC) (GLuint  program, GLint  location, GLsizei  count, const GLfloat * value);
+  GLEE_EXTERN GLEEPFNGLPROGRAMUNIFORM2FVEXTPROC GLeeFuncPtr_glProgramUniform2fvEXT;
+  #define glProgramUniform2fvEXT GLeeFuncPtr_glProgramUniform2fvEXT
+#endif
+#ifndef GLEE_H_DEFINED_glProgramUniform3fvEXT
+#define GLEE_H_DEFINED_glProgramUniform3fvEXT
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMUNIFORM3FVEXTPROC) (GLuint  program, GLint  location, GLsizei  count, const GLfloat * value);
+  GLEE_EXTERN GLEEPFNGLPROGRAMUNIFORM3FVEXTPROC GLeeFuncPtr_glProgramUniform3fvEXT;
+  #define glProgramUniform3fvEXT GLeeFuncPtr_glProgramUniform3fvEXT
+#endif
+#ifndef GLEE_H_DEFINED_glProgramUniform4fvEXT
+#define GLEE_H_DEFINED_glProgramUniform4fvEXT
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMUNIFORM4FVEXTPROC) (GLuint  program, GLint  location, GLsizei  count, const GLfloat * value);
+  GLEE_EXTERN GLEEPFNGLPROGRAMUNIFORM4FVEXTPROC GLeeFuncPtr_glProgramUniform4fvEXT;
+  #define glProgramUniform4fvEXT GLeeFuncPtr_glProgramUniform4fvEXT
+#endif
+#ifndef GLEE_H_DEFINED_glProgramUniform1ivEXT
+#define GLEE_H_DEFINED_glProgramUniform1ivEXT
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMUNIFORM1IVEXTPROC) (GLuint  program, GLint  location, GLsizei  count, const GLint * value);
+  GLEE_EXTERN GLEEPFNGLPROGRAMUNIFORM1IVEXTPROC GLeeFuncPtr_glProgramUniform1ivEXT;
+  #define glProgramUniform1ivEXT GLeeFuncPtr_glProgramUniform1ivEXT
+#endif
+#ifndef GLEE_H_DEFINED_glProgramUniform2ivEXT
+#define GLEE_H_DEFINED_glProgramUniform2ivEXT
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMUNIFORM2IVEXTPROC) (GLuint  program, GLint  location, GLsizei  count, const GLint * value);
+  GLEE_EXTERN GLEEPFNGLPROGRAMUNIFORM2IVEXTPROC GLeeFuncPtr_glProgramUniform2ivEXT;
+  #define glProgramUniform2ivEXT GLeeFuncPtr_glProgramUniform2ivEXT
+#endif
+#ifndef GLEE_H_DEFINED_glProgramUniform3ivEXT
+#define GLEE_H_DEFINED_glProgramUniform3ivEXT
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMUNIFORM3IVEXTPROC) (GLuint  program, GLint  location, GLsizei  count, const GLint * value);
+  GLEE_EXTERN GLEEPFNGLPROGRAMUNIFORM3IVEXTPROC GLeeFuncPtr_glProgramUniform3ivEXT;
+  #define glProgramUniform3ivEXT GLeeFuncPtr_glProgramUniform3ivEXT
+#endif
+#ifndef GLEE_H_DEFINED_glProgramUniform4ivEXT
+#define GLEE_H_DEFINED_glProgramUniform4ivEXT
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMUNIFORM4IVEXTPROC) (GLuint  program, GLint  location, GLsizei  count, const GLint * value);
+  GLEE_EXTERN GLEEPFNGLPROGRAMUNIFORM4IVEXTPROC GLeeFuncPtr_glProgramUniform4ivEXT;
+  #define glProgramUniform4ivEXT GLeeFuncPtr_glProgramUniform4ivEXT
+#endif
+#ifndef GLEE_H_DEFINED_glProgramUniformMatrix2fvEXT
+#define GLEE_H_DEFINED_glProgramUniformMatrix2fvEXT
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC) (GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value);
+  GLEE_EXTERN GLEEPFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC GLeeFuncPtr_glProgramUniformMatrix2fvEXT;
+  #define glProgramUniformMatrix2fvEXT GLeeFuncPtr_glProgramUniformMatrix2fvEXT
+#endif
+#ifndef GLEE_H_DEFINED_glProgramUniformMatrix3fvEXT
+#define GLEE_H_DEFINED_glProgramUniformMatrix3fvEXT
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC) (GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value);
+  GLEE_EXTERN GLEEPFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC GLeeFuncPtr_glProgramUniformMatrix3fvEXT;
+  #define glProgramUniformMatrix3fvEXT GLeeFuncPtr_glProgramUniformMatrix3fvEXT
+#endif
+#ifndef GLEE_H_DEFINED_glProgramUniformMatrix4fvEXT
+#define GLEE_H_DEFINED_glProgramUniformMatrix4fvEXT
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC) (GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value);
+  GLEE_EXTERN GLEEPFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC GLeeFuncPtr_glProgramUniformMatrix4fvEXT;
+  #define glProgramUniformMatrix4fvEXT GLeeFuncPtr_glProgramUniformMatrix4fvEXT
+#endif
+#ifndef GLEE_H_DEFINED_glProgramUniformMatrix2x3fvEXT
+#define GLEE_H_DEFINED_glProgramUniformMatrix2x3fvEXT
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC) (GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value);
+  GLEE_EXTERN GLEEPFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC GLeeFuncPtr_glProgramUniformMatrix2x3fvEXT;
+  #define glProgramUniformMatrix2x3fvEXT GLeeFuncPtr_glProgramUniformMatrix2x3fvEXT
+#endif
+#ifndef GLEE_H_DEFINED_glProgramUniformMatrix3x2fvEXT
+#define GLEE_H_DEFINED_glProgramUniformMatrix3x2fvEXT
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC) (GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value);
+  GLEE_EXTERN GLEEPFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC GLeeFuncPtr_glProgramUniformMatrix3x2fvEXT;
+  #define glProgramUniformMatrix3x2fvEXT GLeeFuncPtr_glProgramUniformMatrix3x2fvEXT
+#endif
+#ifndef GLEE_H_DEFINED_glProgramUniformMatrix2x4fvEXT
+#define GLEE_H_DEFINED_glProgramUniformMatrix2x4fvEXT
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC) (GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value);
+  GLEE_EXTERN GLEEPFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC GLeeFuncPtr_glProgramUniformMatrix2x4fvEXT;
+  #define glProgramUniformMatrix2x4fvEXT GLeeFuncPtr_glProgramUniformMatrix2x4fvEXT
+#endif
+#ifndef GLEE_H_DEFINED_glProgramUniformMatrix4x2fvEXT
+#define GLEE_H_DEFINED_glProgramUniformMatrix4x2fvEXT
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC) (GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value);
+  GLEE_EXTERN GLEEPFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC GLeeFuncPtr_glProgramUniformMatrix4x2fvEXT;
+  #define glProgramUniformMatrix4x2fvEXT GLeeFuncPtr_glProgramUniformMatrix4x2fvEXT
+#endif
+#ifndef GLEE_H_DEFINED_glProgramUniformMatrix3x4fvEXT
+#define GLEE_H_DEFINED_glProgramUniformMatrix3x4fvEXT
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC) (GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value);
+  GLEE_EXTERN GLEEPFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC GLeeFuncPtr_glProgramUniformMatrix3x4fvEXT;
+  #define glProgramUniformMatrix3x4fvEXT GLeeFuncPtr_glProgramUniformMatrix3x4fvEXT
+#endif
+#ifndef GLEE_H_DEFINED_glProgramUniformMatrix4x3fvEXT
+#define GLEE_H_DEFINED_glProgramUniformMatrix4x3fvEXT
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC) (GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value);
+  GLEE_EXTERN GLEEPFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC GLeeFuncPtr_glProgramUniformMatrix4x3fvEXT;
+  #define glProgramUniformMatrix4x3fvEXT GLeeFuncPtr_glProgramUniformMatrix4x3fvEXT
+#endif
+#ifndef GLEE_H_DEFINED_glProgramUniform1uiEXT
+#define GLEE_H_DEFINED_glProgramUniform1uiEXT
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMUNIFORM1UIEXTPROC) (GLuint  program, GLint  location, GLuint  v0);
+  GLEE_EXTERN GLEEPFNGLPROGRAMUNIFORM1UIEXTPROC GLeeFuncPtr_glProgramUniform1uiEXT;
+  #define glProgramUniform1uiEXT GLeeFuncPtr_glProgramUniform1uiEXT
+#endif
+#ifndef GLEE_H_DEFINED_glProgramUniform2uiEXT
+#define GLEE_H_DEFINED_glProgramUniform2uiEXT
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMUNIFORM2UIEXTPROC) (GLuint  program, GLint  location, GLuint  v0, GLuint  v1);
+  GLEE_EXTERN GLEEPFNGLPROGRAMUNIFORM2UIEXTPROC GLeeFuncPtr_glProgramUniform2uiEXT;
+  #define glProgramUniform2uiEXT GLeeFuncPtr_glProgramUniform2uiEXT
+#endif
+#ifndef GLEE_H_DEFINED_glProgramUniform3uiEXT
+#define GLEE_H_DEFINED_glProgramUniform3uiEXT
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMUNIFORM3UIEXTPROC) (GLuint  program, GLint  location, GLuint  v0, GLuint  v1, GLuint  v2);
+  GLEE_EXTERN GLEEPFNGLPROGRAMUNIFORM3UIEXTPROC GLeeFuncPtr_glProgramUniform3uiEXT;
+  #define glProgramUniform3uiEXT GLeeFuncPtr_glProgramUniform3uiEXT
+#endif
+#ifndef GLEE_H_DEFINED_glProgramUniform4uiEXT
+#define GLEE_H_DEFINED_glProgramUniform4uiEXT
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMUNIFORM4UIEXTPROC) (GLuint  program, GLint  location, GLuint  v0, GLuint  v1, GLuint  v2, GLuint  v3);
+  GLEE_EXTERN GLEEPFNGLPROGRAMUNIFORM4UIEXTPROC GLeeFuncPtr_glProgramUniform4uiEXT;
+  #define glProgramUniform4uiEXT GLeeFuncPtr_glProgramUniform4uiEXT
+#endif
+#ifndef GLEE_H_DEFINED_glProgramUniform1uivEXT
+#define GLEE_H_DEFINED_glProgramUniform1uivEXT
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMUNIFORM1UIVEXTPROC) (GLuint  program, GLint  location, GLsizei  count, const GLuint * value);
+  GLEE_EXTERN GLEEPFNGLPROGRAMUNIFORM1UIVEXTPROC GLeeFuncPtr_glProgramUniform1uivEXT;
+  #define glProgramUniform1uivEXT GLeeFuncPtr_glProgramUniform1uivEXT
+#endif
+#ifndef GLEE_H_DEFINED_glProgramUniform2uivEXT
+#define GLEE_H_DEFINED_glProgramUniform2uivEXT
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMUNIFORM2UIVEXTPROC) (GLuint  program, GLint  location, GLsizei  count, const GLuint * value);
+  GLEE_EXTERN GLEEPFNGLPROGRAMUNIFORM2UIVEXTPROC GLeeFuncPtr_glProgramUniform2uivEXT;
+  #define glProgramUniform2uivEXT GLeeFuncPtr_glProgramUniform2uivEXT
+#endif
+#ifndef GLEE_H_DEFINED_glProgramUniform3uivEXT
+#define GLEE_H_DEFINED_glProgramUniform3uivEXT
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMUNIFORM3UIVEXTPROC) (GLuint  program, GLint  location, GLsizei  count, const GLuint * value);
+  GLEE_EXTERN GLEEPFNGLPROGRAMUNIFORM3UIVEXTPROC GLeeFuncPtr_glProgramUniform3uivEXT;
+  #define glProgramUniform3uivEXT GLeeFuncPtr_glProgramUniform3uivEXT
+#endif
+#ifndef GLEE_H_DEFINED_glProgramUniform4uivEXT
+#define GLEE_H_DEFINED_glProgramUniform4uivEXT
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMUNIFORM4UIVEXTPROC) (GLuint  program, GLint  location, GLsizei  count, const GLuint * value);
+  GLEE_EXTERN GLEEPFNGLPROGRAMUNIFORM4UIVEXTPROC GLeeFuncPtr_glProgramUniform4uivEXT;
+  #define glProgramUniform4uivEXT GLeeFuncPtr_glProgramUniform4uivEXT
+#endif
+#ifndef GLEE_H_DEFINED_glNamedBufferDataEXT
+#define GLEE_H_DEFINED_glNamedBufferDataEXT
+  typedef void (APIENTRYP GLEEPFNGLNAMEDBUFFERDATAEXTPROC) (GLuint  buffer, GLsizeiptr  size, const GLvoid * data, GLenum  usage);
+  GLEE_EXTERN GLEEPFNGLNAMEDBUFFERDATAEXTPROC GLeeFuncPtr_glNamedBufferDataEXT;
+  #define glNamedBufferDataEXT GLeeFuncPtr_glNamedBufferDataEXT
+#endif
+#ifndef GLEE_H_DEFINED_glNamedBufferSubDataEXT
+#define GLEE_H_DEFINED_glNamedBufferSubDataEXT
+  typedef void (APIENTRYP GLEEPFNGLNAMEDBUFFERSUBDATAEXTPROC) (GLuint  buffer, GLintptr  offset, GLsizeiptr  size, const GLvoid * data);
+  GLEE_EXTERN GLEEPFNGLNAMEDBUFFERSUBDATAEXTPROC GLeeFuncPtr_glNamedBufferSubDataEXT;
+  #define glNamedBufferSubDataEXT GLeeFuncPtr_glNamedBufferSubDataEXT
+#endif
+#ifndef GLEE_H_DEFINED_glMapNamedBufferEXT
+#define GLEE_H_DEFINED_glMapNamedBufferEXT
+  typedef GLvoid* (APIENTRYP GLEEPFNGLMAPNAMEDBUFFEREXTPROC) (GLuint  buffer, GLenum  access);
+  GLEE_EXTERN GLEEPFNGLMAPNAMEDBUFFEREXTPROC GLeeFuncPtr_glMapNamedBufferEXT;
+  #define glMapNamedBufferEXT GLeeFuncPtr_glMapNamedBufferEXT
+#endif
+#ifndef GLEE_H_DEFINED_glUnmapNamedBufferEXT
+#define GLEE_H_DEFINED_glUnmapNamedBufferEXT
+  typedef GLboolean (APIENTRYP GLEEPFNGLUNMAPNAMEDBUFFEREXTPROC) (GLuint  buffer);
+  GLEE_EXTERN GLEEPFNGLUNMAPNAMEDBUFFEREXTPROC GLeeFuncPtr_glUnmapNamedBufferEXT;
+  #define glUnmapNamedBufferEXT GLeeFuncPtr_glUnmapNamedBufferEXT
+#endif
+#ifndef GLEE_H_DEFINED_glMapNamedBufferRangeEXT
+#define GLEE_H_DEFINED_glMapNamedBufferRangeEXT
+  typedef GLvoid* (APIENTRYP GLEEPFNGLMAPNAMEDBUFFERRANGEEXTPROC) (GLuint  buffer, GLintptr  offset, GLsizeiptr  length, GLbitfield  access);
+  GLEE_EXTERN GLEEPFNGLMAPNAMEDBUFFERRANGEEXTPROC GLeeFuncPtr_glMapNamedBufferRangeEXT;
+  #define glMapNamedBufferRangeEXT GLeeFuncPtr_glMapNamedBufferRangeEXT
+#endif
+#ifndef GLEE_H_DEFINED_glFlushMappedNamedBufferRangeEXT
+#define GLEE_H_DEFINED_glFlushMappedNamedBufferRangeEXT
+  typedef void (APIENTRYP GLEEPFNGLFLUSHMAPPEDNAMEDBUFFERRANGEEXTPROC) (GLuint  buffer, GLintptr  offset, GLsizeiptr  length);
+  GLEE_EXTERN GLEEPFNGLFLUSHMAPPEDNAMEDBUFFERRANGEEXTPROC GLeeFuncPtr_glFlushMappedNamedBufferRangeEXT;
+  #define glFlushMappedNamedBufferRangeEXT GLeeFuncPtr_glFlushMappedNamedBufferRangeEXT
+#endif
+#ifndef GLEE_H_DEFINED_glNamedCopyBufferSubDataEXT
+#define GLEE_H_DEFINED_glNamedCopyBufferSubDataEXT
+  typedef void (APIENTRYP GLEEPFNGLNAMEDCOPYBUFFERSUBDATAEXTPROC) (GLuint  readBuffer, GLuint  writeBuffer, GLintptr  readOffset, GLintptr  writeOffset, GLsizeiptr  size);
+  GLEE_EXTERN GLEEPFNGLNAMEDCOPYBUFFERSUBDATAEXTPROC GLeeFuncPtr_glNamedCopyBufferSubDataEXT;
+  #define glNamedCopyBufferSubDataEXT GLeeFuncPtr_glNamedCopyBufferSubDataEXT
+#endif
+#ifndef GLEE_H_DEFINED_glGetNamedBufferParameterivEXT
+#define GLEE_H_DEFINED_glGetNamedBufferParameterivEXT
+  typedef void (APIENTRYP GLEEPFNGLGETNAMEDBUFFERPARAMETERIVEXTPROC) (GLuint  buffer, GLenum  pname, GLint * params);
+  GLEE_EXTERN GLEEPFNGLGETNAMEDBUFFERPARAMETERIVEXTPROC GLeeFuncPtr_glGetNamedBufferParameterivEXT;
+  #define glGetNamedBufferParameterivEXT GLeeFuncPtr_glGetNamedBufferParameterivEXT
+#endif
+#ifndef GLEE_H_DEFINED_glGetNamedBufferPointervEXT
+#define GLEE_H_DEFINED_glGetNamedBufferPointervEXT
+  typedef void (APIENTRYP GLEEPFNGLGETNAMEDBUFFERPOINTERVEXTPROC) (GLuint  buffer, GLenum  pname, GLvoid* * params);
+  GLEE_EXTERN GLEEPFNGLGETNAMEDBUFFERPOINTERVEXTPROC GLeeFuncPtr_glGetNamedBufferPointervEXT;
+  #define glGetNamedBufferPointervEXT GLeeFuncPtr_glGetNamedBufferPointervEXT
+#endif
+#ifndef GLEE_H_DEFINED_glGetNamedBufferSubDataEXT
+#define GLEE_H_DEFINED_glGetNamedBufferSubDataEXT
+  typedef void (APIENTRYP GLEEPFNGLGETNAMEDBUFFERSUBDATAEXTPROC) (GLuint  buffer, GLintptr  offset, GLsizeiptr  size, GLvoid * data);
+  GLEE_EXTERN GLEEPFNGLGETNAMEDBUFFERSUBDATAEXTPROC GLeeFuncPtr_glGetNamedBufferSubDataEXT;
+  #define glGetNamedBufferSubDataEXT GLeeFuncPtr_glGetNamedBufferSubDataEXT
+#endif
+#ifndef GLEE_H_DEFINED_glTextureBufferEXT
+#define GLEE_H_DEFINED_glTextureBufferEXT
+  typedef void (APIENTRYP GLEEPFNGLTEXTUREBUFFEREXTPROC) (GLuint  texture, GLenum  target, GLenum  internalformat, GLuint  buffer);
+  GLEE_EXTERN GLEEPFNGLTEXTUREBUFFEREXTPROC GLeeFuncPtr_glTextureBufferEXT;
+  #define glTextureBufferEXT GLeeFuncPtr_glTextureBufferEXT
+#endif
+#ifndef GLEE_H_DEFINED_glMultiTexBufferEXT
+#define GLEE_H_DEFINED_glMultiTexBufferEXT
+  typedef void (APIENTRYP GLEEPFNGLMULTITEXBUFFEREXTPROC) (GLenum  texunit, GLenum  target, GLenum  internalformat, GLuint  buffer);
+  GLEE_EXTERN GLEEPFNGLMULTITEXBUFFEREXTPROC GLeeFuncPtr_glMultiTexBufferEXT;
+  #define glMultiTexBufferEXT GLeeFuncPtr_glMultiTexBufferEXT
+#endif
+#ifndef GLEE_H_DEFINED_glNamedRenderbufferStorageEXT
+#define GLEE_H_DEFINED_glNamedRenderbufferStorageEXT
+  typedef void (APIENTRYP GLEEPFNGLNAMEDRENDERBUFFERSTORAGEEXTPROC) (GLuint  renderbuffer, GLenum  internalformat, GLsizei  width, GLsizei  height);
+  GLEE_EXTERN GLEEPFNGLNAMEDRENDERBUFFERSTORAGEEXTPROC GLeeFuncPtr_glNamedRenderbufferStorageEXT;
+  #define glNamedRenderbufferStorageEXT GLeeFuncPtr_glNamedRenderbufferStorageEXT
+#endif
+#ifndef GLEE_H_DEFINED_glGetNamedRenderbufferParameterivEXT
+#define GLEE_H_DEFINED_glGetNamedRenderbufferParameterivEXT
+  typedef void (APIENTRYP GLEEPFNGLGETNAMEDRENDERBUFFERPARAMETERIVEXTPROC) (GLuint  renderbuffer, GLenum  pname, GLint * params);
+  GLEE_EXTERN GLEEPFNGLGETNAMEDRENDERBUFFERPARAMETERIVEXTPROC GLeeFuncPtr_glGetNamedRenderbufferParameterivEXT;
+  #define glGetNamedRenderbufferParameterivEXT GLeeFuncPtr_glGetNamedRenderbufferParameterivEXT
+#endif
+#ifndef GLEE_H_DEFINED_glCheckNamedFramebufferStatusEXT
+#define GLEE_H_DEFINED_glCheckNamedFramebufferStatusEXT
+  typedef GLenum (APIENTRYP GLEEPFNGLCHECKNAMEDFRAMEBUFFERSTATUSEXTPROC) (GLuint  framebuffer, GLenum  target);
+  GLEE_EXTERN GLEEPFNGLCHECKNAMEDFRAMEBUFFERSTATUSEXTPROC GLeeFuncPtr_glCheckNamedFramebufferStatusEXT;
+  #define glCheckNamedFramebufferStatusEXT GLeeFuncPtr_glCheckNamedFramebufferStatusEXT
+#endif
+#ifndef GLEE_H_DEFINED_glNamedFramebufferTexture1DEXT
+#define GLEE_H_DEFINED_glNamedFramebufferTexture1DEXT
+  typedef void (APIENTRYP GLEEPFNGLNAMEDFRAMEBUFFERTEXTURE1DEXTPROC) (GLuint  framebuffer, GLenum  attachment, GLenum  textarget, GLuint  texture, GLint  level);
+  GLEE_EXTERN GLEEPFNGLNAMEDFRAMEBUFFERTEXTURE1DEXTPROC GLeeFuncPtr_glNamedFramebufferTexture1DEXT;
+  #define glNamedFramebufferTexture1DEXT GLeeFuncPtr_glNamedFramebufferTexture1DEXT
+#endif
+#ifndef GLEE_H_DEFINED_glNamedFramebufferTexture2DEXT
+#define GLEE_H_DEFINED_glNamedFramebufferTexture2DEXT
+  typedef void (APIENTRYP GLEEPFNGLNAMEDFRAMEBUFFERTEXTURE2DEXTPROC) (GLuint  framebuffer, GLenum  attachment, GLenum  textarget, GLuint  texture, GLint  level);
+  GLEE_EXTERN GLEEPFNGLNAMEDFRAMEBUFFERTEXTURE2DEXTPROC GLeeFuncPtr_glNamedFramebufferTexture2DEXT;
+  #define glNamedFramebufferTexture2DEXT GLeeFuncPtr_glNamedFramebufferTexture2DEXT
+#endif
+#ifndef GLEE_H_DEFINED_glNamedFramebufferTexture3DEXT
+#define GLEE_H_DEFINED_glNamedFramebufferTexture3DEXT
+  typedef void (APIENTRYP GLEEPFNGLNAMEDFRAMEBUFFERTEXTURE3DEXTPROC) (GLuint  framebuffer, GLenum  attachment, GLenum  textarget, GLuint  texture, GLint  level, GLint  zoffset);
+  GLEE_EXTERN GLEEPFNGLNAMEDFRAMEBUFFERTEXTURE3DEXTPROC GLeeFuncPtr_glNamedFramebufferTexture3DEXT;
+  #define glNamedFramebufferTexture3DEXT GLeeFuncPtr_glNamedFramebufferTexture3DEXT
+#endif
+#ifndef GLEE_H_DEFINED_glNamedFramebufferRenderbufferEXT
+#define GLEE_H_DEFINED_glNamedFramebufferRenderbufferEXT
+  typedef void (APIENTRYP GLEEPFNGLNAMEDFRAMEBUFFERRENDERBUFFEREXTPROC) (GLuint  framebuffer, GLenum  attachment, GLenum  renderbuffertarget, GLuint  renderbuffer);
+  GLEE_EXTERN GLEEPFNGLNAMEDFRAMEBUFFERRENDERBUFFEREXTPROC GLeeFuncPtr_glNamedFramebufferRenderbufferEXT;
+  #define glNamedFramebufferRenderbufferEXT GLeeFuncPtr_glNamedFramebufferRenderbufferEXT
+#endif
+#ifndef GLEE_H_DEFINED_glGetNamedFramebufferAttachmentParameterivEXT
+#define GLEE_H_DEFINED_glGetNamedFramebufferAttachmentParameterivEXT
+  typedef void (APIENTRYP GLEEPFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC) (GLuint  framebuffer, GLenum  attachment, GLenum  pname, GLint * params);
+  GLEE_EXTERN GLEEPFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC GLeeFuncPtr_glGetNamedFramebufferAttachmentParameterivEXT;
+  #define glGetNamedFramebufferAttachmentParameterivEXT GLeeFuncPtr_glGetNamedFramebufferAttachmentParameterivEXT
+#endif
+#ifndef GLEE_H_DEFINED_glGenerateTextureMipmapEXT
+#define GLEE_H_DEFINED_glGenerateTextureMipmapEXT
+  typedef void (APIENTRYP GLEEPFNGLGENERATETEXTUREMIPMAPEXTPROC) (GLuint  texture, GLenum  target);
+  GLEE_EXTERN GLEEPFNGLGENERATETEXTUREMIPMAPEXTPROC GLeeFuncPtr_glGenerateTextureMipmapEXT;
+  #define glGenerateTextureMipmapEXT GLeeFuncPtr_glGenerateTextureMipmapEXT
+#endif
+#ifndef GLEE_H_DEFINED_glGenerateMultiTexMipmapEXT
+#define GLEE_H_DEFINED_glGenerateMultiTexMipmapEXT
+  typedef void (APIENTRYP GLEEPFNGLGENERATEMULTITEXMIPMAPEXTPROC) (GLenum  texunit, GLenum  target);
+  GLEE_EXTERN GLEEPFNGLGENERATEMULTITEXMIPMAPEXTPROC GLeeFuncPtr_glGenerateMultiTexMipmapEXT;
+  #define glGenerateMultiTexMipmapEXT GLeeFuncPtr_glGenerateMultiTexMipmapEXT
+#endif
+#ifndef GLEE_H_DEFINED_glFramebufferDrawBufferEXT
+#define GLEE_H_DEFINED_glFramebufferDrawBufferEXT
+  typedef void (APIENTRYP GLEEPFNGLFRAMEBUFFERDRAWBUFFEREXTPROC) (GLuint  framebuffer, GLenum  mode);
+  GLEE_EXTERN GLEEPFNGLFRAMEBUFFERDRAWBUFFEREXTPROC GLeeFuncPtr_glFramebufferDrawBufferEXT;
+  #define glFramebufferDrawBufferEXT GLeeFuncPtr_glFramebufferDrawBufferEXT
+#endif
+#ifndef GLEE_H_DEFINED_glFramebufferDrawBuffersEXT
+#define GLEE_H_DEFINED_glFramebufferDrawBuffersEXT
+  typedef void (APIENTRYP GLEEPFNGLFRAMEBUFFERDRAWBUFFERSEXTPROC) (GLuint  framebuffer, GLsizei  n, const GLenum * bufs);
+  GLEE_EXTERN GLEEPFNGLFRAMEBUFFERDRAWBUFFERSEXTPROC GLeeFuncPtr_glFramebufferDrawBuffersEXT;
+  #define glFramebufferDrawBuffersEXT GLeeFuncPtr_glFramebufferDrawBuffersEXT
+#endif
+#ifndef GLEE_H_DEFINED_glFramebufferReadBufferEXT
+#define GLEE_H_DEFINED_glFramebufferReadBufferEXT
+  typedef void (APIENTRYP GLEEPFNGLFRAMEBUFFERREADBUFFEREXTPROC) (GLuint  framebuffer, GLenum  mode);
+  GLEE_EXTERN GLEEPFNGLFRAMEBUFFERREADBUFFEREXTPROC GLeeFuncPtr_glFramebufferReadBufferEXT;
+  #define glFramebufferReadBufferEXT GLeeFuncPtr_glFramebufferReadBufferEXT
+#endif
+#ifndef GLEE_H_DEFINED_glGetFramebufferParameterivEXT
+#define GLEE_H_DEFINED_glGetFramebufferParameterivEXT
+  typedef void (APIENTRYP GLEEPFNGLGETFRAMEBUFFERPARAMETERIVEXTPROC) (GLuint  framebuffer, GLenum  pname, GLint * params);
+  GLEE_EXTERN GLEEPFNGLGETFRAMEBUFFERPARAMETERIVEXTPROC GLeeFuncPtr_glGetFramebufferParameterivEXT;
+  #define glGetFramebufferParameterivEXT GLeeFuncPtr_glGetFramebufferParameterivEXT
+#endif
+#ifndef GLEE_H_DEFINED_glNamedRenderbufferStorageMultisampleEXT
+#define GLEE_H_DEFINED_glNamedRenderbufferStorageMultisampleEXT
+  typedef void (APIENTRYP GLEEPFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC) (GLuint  renderbuffer, GLsizei  samples, GLenum  internalformat, GLsizei  width, GLsizei  height);
+  GLEE_EXTERN GLEEPFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC GLeeFuncPtr_glNamedRenderbufferStorageMultisampleEXT;
+  #define glNamedRenderbufferStorageMultisampleEXT GLeeFuncPtr_glNamedRenderbufferStorageMultisampleEXT
+#endif
+#ifndef GLEE_H_DEFINED_glNamedRenderbufferStorageMultisampleCoverageEXT
+#define GLEE_H_DEFINED_glNamedRenderbufferStorageMultisampleCoverageEXT
+  typedef void (APIENTRYP GLEEPFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXTPROC) (GLuint  renderbuffer, GLsizei  coverageSamples, GLsizei  colorSamples, GLenum  internalformat, GLsizei  width, GLsizei  height);
+  GLEE_EXTERN GLEEPFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXTPROC GLeeFuncPtr_glNamedRenderbufferStorageMultisampleCoverageEXT;
+  #define glNamedRenderbufferStorageMultisampleCoverageEXT GLeeFuncPtr_glNamedRenderbufferStorageMultisampleCoverageEXT
+#endif
+#ifndef GLEE_H_DEFINED_glNamedFramebufferTextureEXT
+#define GLEE_H_DEFINED_glNamedFramebufferTextureEXT
+  typedef void (APIENTRYP GLEEPFNGLNAMEDFRAMEBUFFERTEXTUREEXTPROC) (GLuint  framebuffer, GLenum  attachment, GLuint  texture, GLint  level);
+  GLEE_EXTERN GLEEPFNGLNAMEDFRAMEBUFFERTEXTUREEXTPROC GLeeFuncPtr_glNamedFramebufferTextureEXT;
+  #define glNamedFramebufferTextureEXT GLeeFuncPtr_glNamedFramebufferTextureEXT
+#endif
+#ifndef GLEE_H_DEFINED_glNamedFramebufferTextureLayerEXT
+#define GLEE_H_DEFINED_glNamedFramebufferTextureLayerEXT
+  typedef void (APIENTRYP GLEEPFNGLNAMEDFRAMEBUFFERTEXTURELAYEREXTPROC) (GLuint  framebuffer, GLenum  attachment, GLuint  texture, GLint  level, GLint  layer);
+  GLEE_EXTERN GLEEPFNGLNAMEDFRAMEBUFFERTEXTURELAYEREXTPROC GLeeFuncPtr_glNamedFramebufferTextureLayerEXT;
+  #define glNamedFramebufferTextureLayerEXT GLeeFuncPtr_glNamedFramebufferTextureLayerEXT
+#endif
+#ifndef GLEE_H_DEFINED_glNamedFramebufferTextureFaceEXT
+#define GLEE_H_DEFINED_glNamedFramebufferTextureFaceEXT
+  typedef void (APIENTRYP GLEEPFNGLNAMEDFRAMEBUFFERTEXTUREFACEEXTPROC) (GLuint  framebuffer, GLenum  attachment, GLuint  texture, GLint  level, GLenum  face);
+  GLEE_EXTERN GLEEPFNGLNAMEDFRAMEBUFFERTEXTUREFACEEXTPROC GLeeFuncPtr_glNamedFramebufferTextureFaceEXT;
+  #define glNamedFramebufferTextureFaceEXT GLeeFuncPtr_glNamedFramebufferTextureFaceEXT
+#endif
+#ifndef GLEE_H_DEFINED_glTextureRenderbufferEXT
+#define GLEE_H_DEFINED_glTextureRenderbufferEXT
+  typedef void (APIENTRYP GLEEPFNGLTEXTURERENDERBUFFEREXTPROC) (GLuint  texture, GLenum  target, GLuint  renderbuffer);
+  GLEE_EXTERN GLEEPFNGLTEXTURERENDERBUFFEREXTPROC GLeeFuncPtr_glTextureRenderbufferEXT;
+  #define glTextureRenderbufferEXT GLeeFuncPtr_glTextureRenderbufferEXT
+#endif
+#ifndef GLEE_H_DEFINED_glMultiTexRenderbufferEXT
+#define GLEE_H_DEFINED_glMultiTexRenderbufferEXT
+  typedef void (APIENTRYP GLEEPFNGLMULTITEXRENDERBUFFEREXTPROC) (GLenum  texunit, GLenum  target, GLuint  renderbuffer);
+  GLEE_EXTERN GLEEPFNGLMULTITEXRENDERBUFFEREXTPROC GLeeFuncPtr_glMultiTexRenderbufferEXT;
+  #define glMultiTexRenderbufferEXT GLeeFuncPtr_glMultiTexRenderbufferEXT
+#endif
+#ifndef GLEE_H_DEFINED_glProgramUniform1dEXT
+#define GLEE_H_DEFINED_glProgramUniform1dEXT
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMUNIFORM1DEXTPROC) (GLuint  program, GLint  location, GLdouble  x);
+  GLEE_EXTERN GLEEPFNGLPROGRAMUNIFORM1DEXTPROC GLeeFuncPtr_glProgramUniform1dEXT;
+  #define glProgramUniform1dEXT GLeeFuncPtr_glProgramUniform1dEXT
+#endif
+#ifndef GLEE_H_DEFINED_glProgramUniform2dEXT
+#define GLEE_H_DEFINED_glProgramUniform2dEXT
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMUNIFORM2DEXTPROC) (GLuint  program, GLint  location, GLdouble  x, GLdouble  y);
+  GLEE_EXTERN GLEEPFNGLPROGRAMUNIFORM2DEXTPROC GLeeFuncPtr_glProgramUniform2dEXT;
+  #define glProgramUniform2dEXT GLeeFuncPtr_glProgramUniform2dEXT
+#endif
+#ifndef GLEE_H_DEFINED_glProgramUniform3dEXT
+#define GLEE_H_DEFINED_glProgramUniform3dEXT
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMUNIFORM3DEXTPROC) (GLuint  program, GLint  location, GLdouble  x, GLdouble  y, GLdouble  z);
+  GLEE_EXTERN GLEEPFNGLPROGRAMUNIFORM3DEXTPROC GLeeFuncPtr_glProgramUniform3dEXT;
+  #define glProgramUniform3dEXT GLeeFuncPtr_glProgramUniform3dEXT
+#endif
+#ifndef GLEE_H_DEFINED_glProgramUniform4dEXT
+#define GLEE_H_DEFINED_glProgramUniform4dEXT
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMUNIFORM4DEXTPROC) (GLuint  program, GLint  location, GLdouble  x, GLdouble  y, GLdouble  z, GLdouble  w);
+  GLEE_EXTERN GLEEPFNGLPROGRAMUNIFORM4DEXTPROC GLeeFuncPtr_glProgramUniform4dEXT;
+  #define glProgramUniform4dEXT GLeeFuncPtr_glProgramUniform4dEXT
+#endif
+#ifndef GLEE_H_DEFINED_glProgramUniform1dvEXT
+#define GLEE_H_DEFINED_glProgramUniform1dvEXT
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMUNIFORM1DVEXTPROC) (GLuint  program, GLint  location, GLsizei  count, const GLdouble * value);
+  GLEE_EXTERN GLEEPFNGLPROGRAMUNIFORM1DVEXTPROC GLeeFuncPtr_glProgramUniform1dvEXT;
+  #define glProgramUniform1dvEXT GLeeFuncPtr_glProgramUniform1dvEXT
+#endif
+#ifndef GLEE_H_DEFINED_glProgramUniform2dvEXT
+#define GLEE_H_DEFINED_glProgramUniform2dvEXT
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMUNIFORM2DVEXTPROC) (GLuint  program, GLint  location, GLsizei  count, const GLdouble * value);
+  GLEE_EXTERN GLEEPFNGLPROGRAMUNIFORM2DVEXTPROC GLeeFuncPtr_glProgramUniform2dvEXT;
+  #define glProgramUniform2dvEXT GLeeFuncPtr_glProgramUniform2dvEXT
+#endif
+#ifndef GLEE_H_DEFINED_glProgramUniform3dvEXT
+#define GLEE_H_DEFINED_glProgramUniform3dvEXT
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMUNIFORM3DVEXTPROC) (GLuint  program, GLint  location, GLsizei  count, const GLdouble * value);
+  GLEE_EXTERN GLEEPFNGLPROGRAMUNIFORM3DVEXTPROC GLeeFuncPtr_glProgramUniform3dvEXT;
+  #define glProgramUniform3dvEXT GLeeFuncPtr_glProgramUniform3dvEXT
+#endif
+#ifndef GLEE_H_DEFINED_glProgramUniform4dvEXT
+#define GLEE_H_DEFINED_glProgramUniform4dvEXT
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMUNIFORM4DVEXTPROC) (GLuint  program, GLint  location, GLsizei  count, const GLdouble * value);
+  GLEE_EXTERN GLEEPFNGLPROGRAMUNIFORM4DVEXTPROC GLeeFuncPtr_glProgramUniform4dvEXT;
+  #define glProgramUniform4dvEXT GLeeFuncPtr_glProgramUniform4dvEXT
+#endif
+#ifndef GLEE_H_DEFINED_glProgramUniformMatrix2dvEXT
+#define GLEE_H_DEFINED_glProgramUniformMatrix2dvEXT
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMUNIFORMMATRIX2DVEXTPROC) (GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value);
+  GLEE_EXTERN GLEEPFNGLPROGRAMUNIFORMMATRIX2DVEXTPROC GLeeFuncPtr_glProgramUniformMatrix2dvEXT;
+  #define glProgramUniformMatrix2dvEXT GLeeFuncPtr_glProgramUniformMatrix2dvEXT
+#endif
+#ifndef GLEE_H_DEFINED_glProgramUniformMatrix3dvEXT
+#define GLEE_H_DEFINED_glProgramUniformMatrix3dvEXT
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMUNIFORMMATRIX3DVEXTPROC) (GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value);
+  GLEE_EXTERN GLEEPFNGLPROGRAMUNIFORMMATRIX3DVEXTPROC GLeeFuncPtr_glProgramUniformMatrix3dvEXT;
+  #define glProgramUniformMatrix3dvEXT GLeeFuncPtr_glProgramUniformMatrix3dvEXT
+#endif
+#ifndef GLEE_H_DEFINED_glProgramUniformMatrix4dvEXT
+#define GLEE_H_DEFINED_glProgramUniformMatrix4dvEXT
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMUNIFORMMATRIX4DVEXTPROC) (GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value);
+  GLEE_EXTERN GLEEPFNGLPROGRAMUNIFORMMATRIX4DVEXTPROC GLeeFuncPtr_glProgramUniformMatrix4dvEXT;
+  #define glProgramUniformMatrix4dvEXT GLeeFuncPtr_glProgramUniformMatrix4dvEXT
+#endif
+#ifndef GLEE_H_DEFINED_glProgramUniformMatrix2x3dvEXT
+#define GLEE_H_DEFINED_glProgramUniformMatrix2x3dvEXT
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMUNIFORMMATRIX2X3DVEXTPROC) (GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value);
+  GLEE_EXTERN GLEEPFNGLPROGRAMUNIFORMMATRIX2X3DVEXTPROC GLeeFuncPtr_glProgramUniformMatrix2x3dvEXT;
+  #define glProgramUniformMatrix2x3dvEXT GLeeFuncPtr_glProgramUniformMatrix2x3dvEXT
+#endif
+#ifndef GLEE_H_DEFINED_glProgramUniformMatrix2x4dvEXT
+#define GLEE_H_DEFINED_glProgramUniformMatrix2x4dvEXT
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMUNIFORMMATRIX2X4DVEXTPROC) (GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value);
+  GLEE_EXTERN GLEEPFNGLPROGRAMUNIFORMMATRIX2X4DVEXTPROC GLeeFuncPtr_glProgramUniformMatrix2x4dvEXT;
+  #define glProgramUniformMatrix2x4dvEXT GLeeFuncPtr_glProgramUniformMatrix2x4dvEXT
+#endif
+#ifndef GLEE_H_DEFINED_glProgramUniformMatrix3x2dvEXT
+#define GLEE_H_DEFINED_glProgramUniformMatrix3x2dvEXT
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMUNIFORMMATRIX3X2DVEXTPROC) (GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value);
+  GLEE_EXTERN GLEEPFNGLPROGRAMUNIFORMMATRIX3X2DVEXTPROC GLeeFuncPtr_glProgramUniformMatrix3x2dvEXT;
+  #define glProgramUniformMatrix3x2dvEXT GLeeFuncPtr_glProgramUniformMatrix3x2dvEXT
+#endif
+#ifndef GLEE_H_DEFINED_glProgramUniformMatrix3x4dvEXT
+#define GLEE_H_DEFINED_glProgramUniformMatrix3x4dvEXT
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMUNIFORMMATRIX3X4DVEXTPROC) (GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value);
+  GLEE_EXTERN GLEEPFNGLPROGRAMUNIFORMMATRIX3X4DVEXTPROC GLeeFuncPtr_glProgramUniformMatrix3x4dvEXT;
+  #define glProgramUniformMatrix3x4dvEXT GLeeFuncPtr_glProgramUniformMatrix3x4dvEXT
+#endif
+#ifndef GLEE_H_DEFINED_glProgramUniformMatrix4x2dvEXT
+#define GLEE_H_DEFINED_glProgramUniformMatrix4x2dvEXT
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMUNIFORMMATRIX4X2DVEXTPROC) (GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value);
+  GLEE_EXTERN GLEEPFNGLPROGRAMUNIFORMMATRIX4X2DVEXTPROC GLeeFuncPtr_glProgramUniformMatrix4x2dvEXT;
+  #define glProgramUniformMatrix4x2dvEXT GLeeFuncPtr_glProgramUniformMatrix4x2dvEXT
+#endif
+#ifndef GLEE_H_DEFINED_glProgramUniformMatrix4x3dvEXT
+#define GLEE_H_DEFINED_glProgramUniformMatrix4x3dvEXT
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMUNIFORMMATRIX4X3DVEXTPROC) (GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value);
+  GLEE_EXTERN GLEEPFNGLPROGRAMUNIFORMMATRIX4X3DVEXTPROC GLeeFuncPtr_glProgramUniformMatrix4x3dvEXT;
+  #define glProgramUniformMatrix4x3dvEXT GLeeFuncPtr_glProgramUniformMatrix4x3dvEXT
+#endif
+#endif 
+
+/* GL_EXT_vertex_array_bgra */
+
+#ifndef GL_EXT_vertex_array_bgra
+#define GL_EXT_vertex_array_bgra 1
+#define __GLEE_GL_EXT_vertex_array_bgra 1
+/* Constants */
+#endif 
+
+/* GL_EXT_texture_swizzle */
+
+#ifndef GL_EXT_texture_swizzle
+#define GL_EXT_texture_swizzle 1
+#define __GLEE_GL_EXT_texture_swizzle 1
+/* Constants */
+#define GL_TEXTURE_SWIZZLE_R_EXT                           0x8E42
+#define GL_TEXTURE_SWIZZLE_G_EXT                           0x8E43
+#define GL_TEXTURE_SWIZZLE_B_EXT                           0x8E44
+#define GL_TEXTURE_SWIZZLE_A_EXT                           0x8E45
+#define GL_TEXTURE_SWIZZLE_RGBA_EXT                        0x8E46
+#endif 
+
+/* GL_NV_explicit_multisample */
+
+#ifndef GL_NV_explicit_multisample
+#define GL_NV_explicit_multisample 1
+#define __GLEE_GL_NV_explicit_multisample 1
+/* Constants */
+#define GL_SAMPLE_POSITION_NV                              0x8E50
+#define GL_SAMPLE_MASK_NV                                  0x8E51
+#define GL_SAMPLE_MASK_VALUE_NV                            0x8E52
+#define GL_TEXTURE_BINDING_RENDERBUFFER_NV                 0x8E53
+#define GL_TEXTURE_RENDERBUFFER_DATA_STORE_BINDING_NV      0x8E54
+#define GL_TEXTURE_RENDERBUFFER_NV                         0x8E55
+#define GL_SAMPLER_RENDERBUFFER_NV                         0x8E56
+#define GL_INT_SAMPLER_RENDERBUFFER_NV                     0x8E57
+#define GL_UNSIGNED_INT_SAMPLER_RENDERBUFFER_NV            0x8E58
+#define GL_MAX_SAMPLE_MASK_WORDS_NV                        0x8E59
+#ifndef GLEE_H_DEFINED_glGetMultisamplefvNV
+#define GLEE_H_DEFINED_glGetMultisamplefvNV
+  typedef void (APIENTRYP GLEEPFNGLGETMULTISAMPLEFVNVPROC) (GLenum  pname, GLuint  index, GLfloat * val);
+  GLEE_EXTERN GLEEPFNGLGETMULTISAMPLEFVNVPROC GLeeFuncPtr_glGetMultisamplefvNV;
+  #define glGetMultisamplefvNV GLeeFuncPtr_glGetMultisamplefvNV
+#endif
+#ifndef GLEE_H_DEFINED_glSampleMaskIndexedNV
+#define GLEE_H_DEFINED_glSampleMaskIndexedNV
+  typedef void (APIENTRYP GLEEPFNGLSAMPLEMASKINDEXEDNVPROC) (GLuint  index, GLbitfield  mask);
+  GLEE_EXTERN GLEEPFNGLSAMPLEMASKINDEXEDNVPROC GLeeFuncPtr_glSampleMaskIndexedNV;
+  #define glSampleMaskIndexedNV GLeeFuncPtr_glSampleMaskIndexedNV
+#endif
+#ifndef GLEE_H_DEFINED_glTexRenderbufferNV
+#define GLEE_H_DEFINED_glTexRenderbufferNV
+  typedef void (APIENTRYP GLEEPFNGLTEXRENDERBUFFERNVPROC) (GLenum  target, GLuint  renderbuffer);
+  GLEE_EXTERN GLEEPFNGLTEXRENDERBUFFERNVPROC GLeeFuncPtr_glTexRenderbufferNV;
+  #define glTexRenderbufferNV GLeeFuncPtr_glTexRenderbufferNV
+#endif
+#endif 
+
+/* GL_NV_transform_feedback2 */
+
+#ifndef GL_NV_transform_feedback2
+#define GL_NV_transform_feedback2 1
+#define __GLEE_GL_NV_transform_feedback2 1
+/* Constants */
+#define GL_TRANSFORM_FEEDBACK_NV                           0x8E22
+#define GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED_NV             0x8E23
+#define GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE_NV             0x8E24
+#define GL_TRANSFORM_FEEDBACK_BINDING_NV                   0x8E25
+#ifndef GLEE_H_DEFINED_glBindTransformFeedbackNV
+#define GLEE_H_DEFINED_glBindTransformFeedbackNV
+  typedef void (APIENTRYP GLEEPFNGLBINDTRANSFORMFEEDBACKNVPROC) (GLenum  target, GLuint  id);
+  GLEE_EXTERN GLEEPFNGLBINDTRANSFORMFEEDBACKNVPROC GLeeFuncPtr_glBindTransformFeedbackNV;
+  #define glBindTransformFeedbackNV GLeeFuncPtr_glBindTransformFeedbackNV
+#endif
+#ifndef GLEE_H_DEFINED_glDeleteTransformFeedbacksNV
+#define GLEE_H_DEFINED_glDeleteTransformFeedbacksNV
+  typedef void (APIENTRYP GLEEPFNGLDELETETRANSFORMFEEDBACKSNVPROC) (GLsizei  n, const GLuint * ids);
+  GLEE_EXTERN GLEEPFNGLDELETETRANSFORMFEEDBACKSNVPROC GLeeFuncPtr_glDeleteTransformFeedbacksNV;
+  #define glDeleteTransformFeedbacksNV GLeeFuncPtr_glDeleteTransformFeedbacksNV
+#endif
+#ifndef GLEE_H_DEFINED_glGenTransformFeedbacksNV
+#define GLEE_H_DEFINED_glGenTransformFeedbacksNV
+  typedef void (APIENTRYP GLEEPFNGLGENTRANSFORMFEEDBACKSNVPROC) (GLsizei  n, GLuint * ids);
+  GLEE_EXTERN GLEEPFNGLGENTRANSFORMFEEDBACKSNVPROC GLeeFuncPtr_glGenTransformFeedbacksNV;
+  #define glGenTransformFeedbacksNV GLeeFuncPtr_glGenTransformFeedbacksNV
+#endif
+#ifndef GLEE_H_DEFINED_glIsTransformFeedbackNV
+#define GLEE_H_DEFINED_glIsTransformFeedbackNV
+  typedef GLboolean (APIENTRYP GLEEPFNGLISTRANSFORMFEEDBACKNVPROC) (GLuint  id);
+  GLEE_EXTERN GLEEPFNGLISTRANSFORMFEEDBACKNVPROC GLeeFuncPtr_glIsTransformFeedbackNV;
+  #define glIsTransformFeedbackNV GLeeFuncPtr_glIsTransformFeedbackNV
+#endif
+#ifndef GLEE_H_DEFINED_glPauseTransformFeedbackNV
+#define GLEE_H_DEFINED_glPauseTransformFeedbackNV
+  typedef void (APIENTRYP GLEEPFNGLPAUSETRANSFORMFEEDBACKNVPROC) ();
+  GLEE_EXTERN GLEEPFNGLPAUSETRANSFORMFEEDBACKNVPROC GLeeFuncPtr_glPauseTransformFeedbackNV;
+  #define glPauseTransformFeedbackNV GLeeFuncPtr_glPauseTransformFeedbackNV
+#endif
+#ifndef GLEE_H_DEFINED_glResumeTransformFeedbackNV
+#define GLEE_H_DEFINED_glResumeTransformFeedbackNV
+  typedef void (APIENTRYP GLEEPFNGLRESUMETRANSFORMFEEDBACKNVPROC) ();
+  GLEE_EXTERN GLEEPFNGLRESUMETRANSFORMFEEDBACKNVPROC GLeeFuncPtr_glResumeTransformFeedbackNV;
+  #define glResumeTransformFeedbackNV GLeeFuncPtr_glResumeTransformFeedbackNV
+#endif
+#ifndef GLEE_H_DEFINED_glDrawTransformFeedbackNV
+#define GLEE_H_DEFINED_glDrawTransformFeedbackNV
+  typedef void (APIENTRYP GLEEPFNGLDRAWTRANSFORMFEEDBACKNVPROC) (GLenum  mode, GLuint  id);
+  GLEE_EXTERN GLEEPFNGLDRAWTRANSFORMFEEDBACKNVPROC GLeeFuncPtr_glDrawTransformFeedbackNV;
+  #define glDrawTransformFeedbackNV GLeeFuncPtr_glDrawTransformFeedbackNV
+#endif
+#endif 
+
+/* GL_ATI_meminfo */
+
+#ifndef GL_ATI_meminfo
+#define GL_ATI_meminfo 1
+#define __GLEE_GL_ATI_meminfo 1
+/* Constants */
+#define GL_VBO_FREE_MEMORY_ATI                             0x87FB
+#define GL_TEXTURE_FREE_MEMORY_ATI                         0x87FC
+#define GL_RENDERBUFFER_FREE_MEMORY_ATI                    0x87FD
+#endif 
+
+/* GL_AMD_performance_monitor */
+
+#ifndef GL_AMD_performance_monitor
+#define GL_AMD_performance_monitor 1
+#define __GLEE_GL_AMD_performance_monitor 1
+/* Constants */
+#define GL_COUNTER_TYPE_AMD                                0x8BC0
+#define GL_COUNTER_RANGE_AMD                               0x8BC1
+#define GL_UNSIGNED_INT64_AMD                              0x8BC2
+#define GL_PERCENTAGE_AMD                                  0x8BC3
+#define GL_PERFMON_RESULT_AVAILABLE_AMD                    0x8BC4
+#define GL_PERFMON_RESULT_SIZE_AMD                         0x8BC5
+#define GL_PERFMON_RESULT_AMD                              0x8BC6
+#ifndef GLEE_H_DEFINED_glGetPerfMonitorGroupsAMD
+#define GLEE_H_DEFINED_glGetPerfMonitorGroupsAMD
+  typedef void (APIENTRYP GLEEPFNGLGETPERFMONITORGROUPSAMDPROC) (GLint * numGroups, GLsizei  groupsSize, GLuint * groups);
+  GLEE_EXTERN GLEEPFNGLGETPERFMONITORGROUPSAMDPROC GLeeFuncPtr_glGetPerfMonitorGroupsAMD;
+  #define glGetPerfMonitorGroupsAMD GLeeFuncPtr_glGetPerfMonitorGroupsAMD
+#endif
+#ifndef GLEE_H_DEFINED_glGetPerfMonitorCountersAMD
+#define GLEE_H_DEFINED_glGetPerfMonitorCountersAMD
+  typedef void (APIENTRYP GLEEPFNGLGETPERFMONITORCOUNTERSAMDPROC) (GLuint  group, GLint * numCounters, GLint * maxActiveCounters, GLsizei  counterSize, GLuint * counters);
+  GLEE_EXTERN GLEEPFNGLGETPERFMONITORCOUNTERSAMDPROC GLeeFuncPtr_glGetPerfMonitorCountersAMD;
+  #define glGetPerfMonitorCountersAMD GLeeFuncPtr_glGetPerfMonitorCountersAMD
+#endif
+#ifndef GLEE_H_DEFINED_glGetPerfMonitorGroupStringAMD
+#define GLEE_H_DEFINED_glGetPerfMonitorGroupStringAMD
+  typedef void (APIENTRYP GLEEPFNGLGETPERFMONITORGROUPSTRINGAMDPROC) (GLuint  group, GLsizei  bufSize, GLsizei * length, GLchar * groupString);
+  GLEE_EXTERN GLEEPFNGLGETPERFMONITORGROUPSTRINGAMDPROC GLeeFuncPtr_glGetPerfMonitorGroupStringAMD;
+  #define glGetPerfMonitorGroupStringAMD GLeeFuncPtr_glGetPerfMonitorGroupStringAMD
+#endif
+#ifndef GLEE_H_DEFINED_glGetPerfMonitorCounterStringAMD
+#define GLEE_H_DEFINED_glGetPerfMonitorCounterStringAMD
+  typedef void (APIENTRYP GLEEPFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC) (GLuint  group, GLuint  counter, GLsizei  bufSize, GLsizei * length, GLchar * counterString);
+  GLEE_EXTERN GLEEPFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC GLeeFuncPtr_glGetPerfMonitorCounterStringAMD;
+  #define glGetPerfMonitorCounterStringAMD GLeeFuncPtr_glGetPerfMonitorCounterStringAMD
+#endif
+#ifndef GLEE_H_DEFINED_glGetPerfMonitorCounterInfoAMD
+#define GLEE_H_DEFINED_glGetPerfMonitorCounterInfoAMD
+  typedef void (APIENTRYP GLEEPFNGLGETPERFMONITORCOUNTERINFOAMDPROC) (GLuint  group, GLuint  counter, GLenum  pname, GLvoid * data);
+  GLEE_EXTERN GLEEPFNGLGETPERFMONITORCOUNTERINFOAMDPROC GLeeFuncPtr_glGetPerfMonitorCounterInfoAMD;
+  #define glGetPerfMonitorCounterInfoAMD GLeeFuncPtr_glGetPerfMonitorCounterInfoAMD
+#endif
+#ifndef GLEE_H_DEFINED_glGenPerfMonitorsAMD
+#define GLEE_H_DEFINED_glGenPerfMonitorsAMD
+  typedef void (APIENTRYP GLEEPFNGLGENPERFMONITORSAMDPROC) (GLsizei  n, GLuint * monitors);
+  GLEE_EXTERN GLEEPFNGLGENPERFMONITORSAMDPROC GLeeFuncPtr_glGenPerfMonitorsAMD;
+  #define glGenPerfMonitorsAMD GLeeFuncPtr_glGenPerfMonitorsAMD
+#endif
+#ifndef GLEE_H_DEFINED_glDeletePerfMonitorsAMD
+#define GLEE_H_DEFINED_glDeletePerfMonitorsAMD
+  typedef void (APIENTRYP GLEEPFNGLDELETEPERFMONITORSAMDPROC) (GLsizei  n, GLuint * monitors);
+  GLEE_EXTERN GLEEPFNGLDELETEPERFMONITORSAMDPROC GLeeFuncPtr_glDeletePerfMonitorsAMD;
+  #define glDeletePerfMonitorsAMD GLeeFuncPtr_glDeletePerfMonitorsAMD
+#endif
+#ifndef GLEE_H_DEFINED_glSelectPerfMonitorCountersAMD
+#define GLEE_H_DEFINED_glSelectPerfMonitorCountersAMD
+  typedef void (APIENTRYP GLEEPFNGLSELECTPERFMONITORCOUNTERSAMDPROC) (GLuint  monitor, GLboolean  enable, GLuint  group, GLint  numCounters, GLuint * counterList);
+  GLEE_EXTERN GLEEPFNGLSELECTPERFMONITORCOUNTERSAMDPROC GLeeFuncPtr_glSelectPerfMonitorCountersAMD;
+  #define glSelectPerfMonitorCountersAMD GLeeFuncPtr_glSelectPerfMonitorCountersAMD
+#endif
+#ifndef GLEE_H_DEFINED_glBeginPerfMonitorAMD
+#define GLEE_H_DEFINED_glBeginPerfMonitorAMD
+  typedef void (APIENTRYP GLEEPFNGLBEGINPERFMONITORAMDPROC) (GLuint  monitor);
+  GLEE_EXTERN GLEEPFNGLBEGINPERFMONITORAMDPROC GLeeFuncPtr_glBeginPerfMonitorAMD;
+  #define glBeginPerfMonitorAMD GLeeFuncPtr_glBeginPerfMonitorAMD
+#endif
+#ifndef GLEE_H_DEFINED_glEndPerfMonitorAMD
+#define GLEE_H_DEFINED_glEndPerfMonitorAMD
+  typedef void (APIENTRYP GLEEPFNGLENDPERFMONITORAMDPROC) (GLuint  monitor);
+  GLEE_EXTERN GLEEPFNGLENDPERFMONITORAMDPROC GLeeFuncPtr_glEndPerfMonitorAMD;
+  #define glEndPerfMonitorAMD GLeeFuncPtr_glEndPerfMonitorAMD
+#endif
+#ifndef GLEE_H_DEFINED_glGetPerfMonitorCounterDataAMD
+#define GLEE_H_DEFINED_glGetPerfMonitorCounterDataAMD
+  typedef void (APIENTRYP GLEEPFNGLGETPERFMONITORCOUNTERDATAAMDPROC) (GLuint  monitor, GLenum  pname, GLsizei  dataSize, GLuint * data, GLint * bytesWritten);
+  GLEE_EXTERN GLEEPFNGLGETPERFMONITORCOUNTERDATAAMDPROC GLeeFuncPtr_glGetPerfMonitorCounterDataAMD;
+  #define glGetPerfMonitorCounterDataAMD GLeeFuncPtr_glGetPerfMonitorCounterDataAMD
+#endif
+#endif 
+
+/* GL_AMD_texture_texture4 */
+
+#ifndef GL_AMD_texture_texture4
+#define GL_AMD_texture_texture4 1
+#define __GLEE_GL_AMD_texture_texture4 1
+/* Constants */
+#endif 
+
+/* GL_AMD_vertex_shader_tesselator */
+
+#ifndef GL_AMD_vertex_shader_tesselator
+#define GL_AMD_vertex_shader_tesselator 1
+#define __GLEE_GL_AMD_vertex_shader_tesselator 1
+/* Constants */
+#define GL_SAMPLER_BUFFER_AMD                              0x9001
+#define GL_INT_SAMPLER_BUFFER_AMD                          0x9002
+#define GL_UNSIGNED_INT_SAMPLER_BUFFER_AMD                 0x9003
+#define GL_TESSELLATION_MODE_AMD                           0x9004
+#define GL_TESSELLATION_FACTOR_AMD                         0x9005
+#define GL_DISCRETE_AMD                                    0x9006
+#define GL_CONTINUOUS_AMD                                  0x9007
+#ifndef GLEE_H_DEFINED_glTessellationFactorAMD
+#define GLEE_H_DEFINED_glTessellationFactorAMD
+  typedef void (APIENTRYP GLEEPFNGLTESSELLATIONFACTORAMDPROC) (GLfloat  factor);
+  GLEE_EXTERN GLEEPFNGLTESSELLATIONFACTORAMDPROC GLeeFuncPtr_glTessellationFactorAMD;
+  #define glTessellationFactorAMD GLeeFuncPtr_glTessellationFactorAMD
+#endif
+#ifndef GLEE_H_DEFINED_glTessellationModeAMD
+#define GLEE_H_DEFINED_glTessellationModeAMD
+  typedef void (APIENTRYP GLEEPFNGLTESSELLATIONMODEAMDPROC) (GLenum  mode);
+  GLEE_EXTERN GLEEPFNGLTESSELLATIONMODEAMDPROC GLeeFuncPtr_glTessellationModeAMD;
+  #define glTessellationModeAMD GLeeFuncPtr_glTessellationModeAMD
+#endif
+#endif 
+
+/* GL_EXT_provoking_vertex */
+
+#ifndef GL_EXT_provoking_vertex
+#define GL_EXT_provoking_vertex 1
+#define __GLEE_GL_EXT_provoking_vertex 1
+/* Constants */
+#define GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION_EXT    0x8E4C
+#define GL_FIRST_VERTEX_CONVENTION_EXT                     0x8E4D
+#define GL_LAST_VERTEX_CONVENTION_EXT                      0x8E4E
+#define GL_PROVOKING_VERTEX_EXT                            0x8E4F
+#ifndef GLEE_H_DEFINED_glProvokingVertexEXT
+#define GLEE_H_DEFINED_glProvokingVertexEXT
+  typedef void (APIENTRYP GLEEPFNGLPROVOKINGVERTEXEXTPROC) (GLenum  mode);
+  GLEE_EXTERN GLEEPFNGLPROVOKINGVERTEXEXTPROC GLeeFuncPtr_glProvokingVertexEXT;
+  #define glProvokingVertexEXT GLeeFuncPtr_glProvokingVertexEXT
+#endif
+#endif 
+
+/* GL_EXT_texture_snorm */
+
+#ifndef GL_EXT_texture_snorm
+#define GL_EXT_texture_snorm 1
+#define __GLEE_GL_EXT_texture_snorm 1
+/* Constants */
+#define GL_ALPHA_SNORM                                     0x9010
+#define GL_LUMINANCE_SNORM                                 0x9011
+#define GL_LUMINANCE_ALPHA_SNORM                           0x9012
+#define GL_INTENSITY_SNORM                                 0x9013
+#define GL_ALPHA8_SNORM                                    0x9014
+#define GL_LUMINANCE8_SNORM                                0x9015
+#define GL_LUMINANCE8_ALPHA8_SNORM                         0x9016
+#define GL_INTENSITY8_SNORM                                0x9017
+#define GL_ALPHA16_SNORM                                   0x9018
+#define GL_LUMINANCE16_SNORM                               0x9019
+#define GL_LUMINANCE16_ALPHA16_SNORM                       0x901A
+#define GL_INTENSITY16_SNORM                               0x901B
+#endif 
+
+/* GL_AMD_draw_buffers_blend */
+
+#ifndef GL_AMD_draw_buffers_blend
+#define GL_AMD_draw_buffers_blend 1
+#define __GLEE_GL_AMD_draw_buffers_blend 1
+/* Constants */
+#ifndef GLEE_H_DEFINED_glBlendFuncIndexedAMD
+#define GLEE_H_DEFINED_glBlendFuncIndexedAMD
+  typedef void (APIENTRYP GLEEPFNGLBLENDFUNCINDEXEDAMDPROC) (GLuint  buf, GLenum  src, GLenum  dst);
+  GLEE_EXTERN GLEEPFNGLBLENDFUNCINDEXEDAMDPROC GLeeFuncPtr_glBlendFuncIndexedAMD;
+  #define glBlendFuncIndexedAMD GLeeFuncPtr_glBlendFuncIndexedAMD
+#endif
+#ifndef GLEE_H_DEFINED_glBlendFuncSeparateIndexedAMD
+#define GLEE_H_DEFINED_glBlendFuncSeparateIndexedAMD
+  typedef void (APIENTRYP GLEEPFNGLBLENDFUNCSEPARATEINDEXEDAMDPROC) (GLuint  buf, GLenum  srcRGB, GLenum  dstRGB, GLenum  srcAlpha, GLenum  dstAlpha);
+  GLEE_EXTERN GLEEPFNGLBLENDFUNCSEPARATEINDEXEDAMDPROC GLeeFuncPtr_glBlendFuncSeparateIndexedAMD;
+  #define glBlendFuncSeparateIndexedAMD GLeeFuncPtr_glBlendFuncSeparateIndexedAMD
+#endif
+#ifndef GLEE_H_DEFINED_glBlendEquationIndexedAMD
+#define GLEE_H_DEFINED_glBlendEquationIndexedAMD
+  typedef void (APIENTRYP GLEEPFNGLBLENDEQUATIONINDEXEDAMDPROC) (GLuint  buf, GLenum  mode);
+  GLEE_EXTERN GLEEPFNGLBLENDEQUATIONINDEXEDAMDPROC GLeeFuncPtr_glBlendEquationIndexedAMD;
+  #define glBlendEquationIndexedAMD GLeeFuncPtr_glBlendEquationIndexedAMD
+#endif
+#ifndef GLEE_H_DEFINED_glBlendEquationSeparateIndexedAMD
+#define GLEE_H_DEFINED_glBlendEquationSeparateIndexedAMD
+  typedef void (APIENTRYP GLEEPFNGLBLENDEQUATIONSEPARATEINDEXEDAMDPROC) (GLuint  buf, GLenum  modeRGB, GLenum  modeAlpha);
+  GLEE_EXTERN GLEEPFNGLBLENDEQUATIONSEPARATEINDEXEDAMDPROC GLeeFuncPtr_glBlendEquationSeparateIndexedAMD;
+  #define glBlendEquationSeparateIndexedAMD GLeeFuncPtr_glBlendEquationSeparateIndexedAMD
+#endif
+#endif 
+
+/* GL_APPLE_texture_range */
+
+#ifndef GL_APPLE_texture_range
+#define GL_APPLE_texture_range 1
+#define __GLEE_GL_APPLE_texture_range 1
+/* Constants */
+#define GL_TEXTURE_RANGE_LENGTH_APPLE                      0x85B7
+#define GL_TEXTURE_RANGE_POINTER_APPLE                     0x85B8
+#define GL_TEXTURE_STORAGE_HINT_APPLE                      0x85BC
+#define GL_STORAGE_PRIVATE_APPLE                           0x85BD
+#ifndef GLEE_H_DEFINED_glTextureRangeAPPLE
+#define GLEE_H_DEFINED_glTextureRangeAPPLE
+  typedef void (APIENTRYP GLEEPFNGLTEXTURERANGEAPPLEPROC) (GLenum  target, GLsizei  length, const GLvoid * pointer);
+  GLEE_EXTERN GLEEPFNGLTEXTURERANGEAPPLEPROC GLeeFuncPtr_glTextureRangeAPPLE;
+  #define glTextureRangeAPPLE GLeeFuncPtr_glTextureRangeAPPLE
+#endif
+#ifndef GLEE_H_DEFINED_glGetTexParameterPointervAPPLE
+#define GLEE_H_DEFINED_glGetTexParameterPointervAPPLE
+  typedef void (APIENTRYP GLEEPFNGLGETTEXPARAMETERPOINTERVAPPLEPROC) (GLenum  target, GLenum  pname, GLvoid* * params);
+  GLEE_EXTERN GLEEPFNGLGETTEXPARAMETERPOINTERVAPPLEPROC GLeeFuncPtr_glGetTexParameterPointervAPPLE;
+  #define glGetTexParameterPointervAPPLE GLeeFuncPtr_glGetTexParameterPointervAPPLE
+#endif
+#endif 
+
+/* GL_APPLE_float_pixels */
+
+#ifndef GL_APPLE_float_pixels
+#define GL_APPLE_float_pixels 1
+#define __GLEE_GL_APPLE_float_pixels 1
+/* Constants */
+#define GL_HALF_APPLE                                      0x140B
+#define GL_RGBA_FLOAT32_APPLE                              0x8814
+#define GL_RGB_FLOAT32_APPLE                               0x8815
+#define GL_ALPHA_FLOAT32_APPLE                             0x8816
+#define GL_INTENSITY_FLOAT32_APPLE                         0x8817
+#define GL_LUMINANCE_FLOAT32_APPLE                         0x8818
+#define GL_LUMINANCE_ALPHA_FLOAT32_APPLE                   0x8819
+#define GL_RGBA_FLOAT16_APPLE                              0x881A
+#define GL_RGB_FLOAT16_APPLE                               0x881B
+#define GL_ALPHA_FLOAT16_APPLE                             0x881C
+#define GL_INTENSITY_FLOAT16_APPLE                         0x881D
+#define GL_LUMINANCE_FLOAT16_APPLE                         0x881E
+#define GL_LUMINANCE_ALPHA_FLOAT16_APPLE                   0x881F
+#define GL_COLOR_FLOAT_APPLE                               0x8A0F
+#endif 
+
+/* GL_APPLE_vertex_program_evaluators */
+
+#ifndef GL_APPLE_vertex_program_evaluators
+#define GL_APPLE_vertex_program_evaluators 1
+#define __GLEE_GL_APPLE_vertex_program_evaluators 1
+/* Constants */
+#define GL_VERTEX_ATTRIB_MAP1_APPLE                        0x8A00
+#define GL_VERTEX_ATTRIB_MAP2_APPLE                        0x8A01
+#define GL_VERTEX_ATTRIB_MAP1_SIZE_APPLE                   0x8A02
+#define GL_VERTEX_ATTRIB_MAP1_COEFF_APPLE                  0x8A03
+#define GL_VERTEX_ATTRIB_MAP1_ORDER_APPLE                  0x8A04
+#define GL_VERTEX_ATTRIB_MAP1_DOMAIN_APPLE                 0x8A05
+#define GL_VERTEX_ATTRIB_MAP2_SIZE_APPLE                   0x8A06
+#define GL_VERTEX_ATTRIB_MAP2_COEFF_APPLE                  0x8A07
+#define GL_VERTEX_ATTRIB_MAP2_ORDER_APPLE                  0x8A08
+#define GL_VERTEX_ATTRIB_MAP2_DOMAIN_APPLE                 0x8A09
+#ifndef GLEE_H_DEFINED_glEnableVertexAttribAPPLE
+#define GLEE_H_DEFINED_glEnableVertexAttribAPPLE
+  typedef void (APIENTRYP GLEEPFNGLENABLEVERTEXATTRIBAPPLEPROC) (GLuint  index, GLenum  pname);
+  GLEE_EXTERN GLEEPFNGLENABLEVERTEXATTRIBAPPLEPROC GLeeFuncPtr_glEnableVertexAttribAPPLE;
+  #define glEnableVertexAttribAPPLE GLeeFuncPtr_glEnableVertexAttribAPPLE
+#endif
+#ifndef GLEE_H_DEFINED_glDisableVertexAttribAPPLE
+#define GLEE_H_DEFINED_glDisableVertexAttribAPPLE
+  typedef void (APIENTRYP GLEEPFNGLDISABLEVERTEXATTRIBAPPLEPROC) (GLuint  index, GLenum  pname);
+  GLEE_EXTERN GLEEPFNGLDISABLEVERTEXATTRIBAPPLEPROC GLeeFuncPtr_glDisableVertexAttribAPPLE;
+  #define glDisableVertexAttribAPPLE GLeeFuncPtr_glDisableVertexAttribAPPLE
+#endif
+#ifndef GLEE_H_DEFINED_glIsVertexAttribEnabledAPPLE
+#define GLEE_H_DEFINED_glIsVertexAttribEnabledAPPLE
+  typedef GLboolean (APIENTRYP GLEEPFNGLISVERTEXATTRIBENABLEDAPPLEPROC) (GLuint  index, GLenum  pname);
+  GLEE_EXTERN GLEEPFNGLISVERTEXATTRIBENABLEDAPPLEPROC GLeeFuncPtr_glIsVertexAttribEnabledAPPLE;
+  #define glIsVertexAttribEnabledAPPLE GLeeFuncPtr_glIsVertexAttribEnabledAPPLE
+#endif
+#ifndef GLEE_H_DEFINED_glMapVertexAttrib1dAPPLE
+#define GLEE_H_DEFINED_glMapVertexAttrib1dAPPLE
+  typedef void (APIENTRYP GLEEPFNGLMAPVERTEXATTRIB1DAPPLEPROC) (GLuint  index, GLuint  size, GLdouble  u1, GLdouble  u2, GLint  stride, GLint  order, const GLdouble * points);
+  GLEE_EXTERN GLEEPFNGLMAPVERTEXATTRIB1DAPPLEPROC GLeeFuncPtr_glMapVertexAttrib1dAPPLE;
+  #define glMapVertexAttrib1dAPPLE GLeeFuncPtr_glMapVertexAttrib1dAPPLE
+#endif
+#ifndef GLEE_H_DEFINED_glMapVertexAttrib1fAPPLE
+#define GLEE_H_DEFINED_glMapVertexAttrib1fAPPLE
+  typedef void (APIENTRYP GLEEPFNGLMAPVERTEXATTRIB1FAPPLEPROC) (GLuint  index, GLuint  size, GLfloat  u1, GLfloat  u2, GLint  stride, GLint  order, const GLfloat * points);
+  GLEE_EXTERN GLEEPFNGLMAPVERTEXATTRIB1FAPPLEPROC GLeeFuncPtr_glMapVertexAttrib1fAPPLE;
+  #define glMapVertexAttrib1fAPPLE GLeeFuncPtr_glMapVertexAttrib1fAPPLE
+#endif
+#ifndef GLEE_H_DEFINED_glMapVertexAttrib2dAPPLE
+#define GLEE_H_DEFINED_glMapVertexAttrib2dAPPLE
+  typedef void (APIENTRYP GLEEPFNGLMAPVERTEXATTRIB2DAPPLEPROC) (GLuint  index, GLuint  size, GLdouble  u1, GLdouble  u2, GLint  ustride, GLint  uorder, GLdouble  v1, GLdouble  v2, GLint  vstride, GLint  vorder, const GLdouble * points);
+  GLEE_EXTERN GLEEPFNGLMAPVERTEXATTRIB2DAPPLEPROC GLeeFuncPtr_glMapVertexAttrib2dAPPLE;
+  #define glMapVertexAttrib2dAPPLE GLeeFuncPtr_glMapVertexAttrib2dAPPLE
+#endif
+#ifndef GLEE_H_DEFINED_glMapVertexAttrib2fAPPLE
+#define GLEE_H_DEFINED_glMapVertexAttrib2fAPPLE
+  typedef void (APIENTRYP GLEEPFNGLMAPVERTEXATTRIB2FAPPLEPROC) (GLuint  index, GLuint  size, GLfloat  u1, GLfloat  u2, GLint  ustride, GLint  uorder, GLfloat  v1, GLfloat  v2, GLint  vstride, GLint  vorder, const GLfloat * points);
+  GLEE_EXTERN GLEEPFNGLMAPVERTEXATTRIB2FAPPLEPROC GLeeFuncPtr_glMapVertexAttrib2fAPPLE;
+  #define glMapVertexAttrib2fAPPLE GLeeFuncPtr_glMapVertexAttrib2fAPPLE
+#endif
+#endif 
+
+/* GL_APPLE_aux_depth_stencil */
+
+#ifndef GL_APPLE_aux_depth_stencil
+#define GL_APPLE_aux_depth_stencil 1
+#define __GLEE_GL_APPLE_aux_depth_stencil 1
+/* Constants */
+#define GL_AUX_DEPTH_STENCIL_APPLE                         0x8A14
+#endif 
+
+/* GL_APPLE_object_purgeable */
+
+#ifndef GL_APPLE_object_purgeable
+#define GL_APPLE_object_purgeable 1
+#define __GLEE_GL_APPLE_object_purgeable 1
+/* Constants */
+#define GL_BUFFER_OBJECT_APPLE                             0x85B3
+#define GL_RELEASED_APPLE                                  0x8A19
+#define GL_VOLATILE_APPLE                                  0x8A1A
+#define GL_RETAINED_APPLE                                  0x8A1B
+#define GL_UNDEFINED_APPLE                                 0x8A1C
+#define GL_PURGEABLE_APPLE                                 0x8A1D
+#ifndef GLEE_H_DEFINED_glObjectPurgeableAPPLE
+#define GLEE_H_DEFINED_glObjectPurgeableAPPLE
+  typedef GLenum (APIENTRYP GLEEPFNGLOBJECTPURGEABLEAPPLEPROC) (GLenum  objectType, GLuint  name, GLenum  option);
+  GLEE_EXTERN GLEEPFNGLOBJECTPURGEABLEAPPLEPROC GLeeFuncPtr_glObjectPurgeableAPPLE;
+  #define glObjectPurgeableAPPLE GLeeFuncPtr_glObjectPurgeableAPPLE
+#endif
+#ifndef GLEE_H_DEFINED_glObjectUnpurgeableAPPLE
+#define GLEE_H_DEFINED_glObjectUnpurgeableAPPLE
+  typedef GLenum (APIENTRYP GLEEPFNGLOBJECTUNPURGEABLEAPPLEPROC) (GLenum  objectType, GLuint  name, GLenum  option);
+  GLEE_EXTERN GLEEPFNGLOBJECTUNPURGEABLEAPPLEPROC GLeeFuncPtr_glObjectUnpurgeableAPPLE;
+  #define glObjectUnpurgeableAPPLE GLeeFuncPtr_glObjectUnpurgeableAPPLE
+#endif
+#ifndef GLEE_H_DEFINED_glGetObjectParameterivAPPLE
+#define GLEE_H_DEFINED_glGetObjectParameterivAPPLE
+  typedef void (APIENTRYP GLEEPFNGLGETOBJECTPARAMETERIVAPPLEPROC) (GLenum  objectType, GLuint  name, GLenum  pname, GLint * params);
+  GLEE_EXTERN GLEEPFNGLGETOBJECTPARAMETERIVAPPLEPROC GLeeFuncPtr_glGetObjectParameterivAPPLE;
+  #define glGetObjectParameterivAPPLE GLeeFuncPtr_glGetObjectParameterivAPPLE
+#endif
+#endif 
+
+/* GL_APPLE_row_bytes */
+
+#ifndef GL_APPLE_row_bytes
+#define GL_APPLE_row_bytes 1
+#define __GLEE_GL_APPLE_row_bytes 1
+/* Constants */
+#define GL_PACK_ROW_BYTES_APPLE                            0x8A15
+#define GL_UNPACK_ROW_BYTES_APPLE                          0x8A16
+#endif 
+
+/* GL_APPLE_rgb_422 */
+
+#ifndef GL_APPLE_rgb_422
+#define GL_APPLE_rgb_422 1
+#define __GLEE_GL_APPLE_rgb_422 1
+/* Constants */
+#define GL_RGB_422_APPLE                                   0x8A1F
+#endif 
+
+/* GL_NV_video_capture */
+
+#ifndef GL_NV_video_capture
+#define GL_NV_video_capture 1
+#define __GLEE_GL_NV_video_capture 1
+/* Constants */
+#define GL_VIDEO_BUFFER_NV                                 0x9020
+#define GL_VIDEO_BUFFER_BINDING_NV                         0x9021
+#define GL_FIELD_UPPER_NV                                  0x9022
+#define GL_FIELD_LOWER_NV                                  0x9023
+#define GL_NUM_VIDEO_CAPTURE_STREAMS_NV                    0x9024
+#define GL_NEXT_VIDEO_CAPTURE_BUFFER_STATUS_NV             0x9025
+#define GL_VIDEO_CAPTURE_TO_422_SUPPORTED_NV               0x9026
+#define GL_LAST_VIDEO_CAPTURE_STATUS_NV                    0x9027
+#define GL_VIDEO_BUFFER_PITCH_NV                           0x9028
+#define GL_VIDEO_COLOR_CONVERSION_MATRIX_NV                0x9029
+#define GL_VIDEO_COLOR_CONVERSION_MAX_NV                   0x902A
+#define GL_VIDEO_COLOR_CONVERSION_MIN_NV                   0x902B
+#define GL_VIDEO_COLOR_CONVERSION_OFFSET_NV                0x902C
+#define GL_VIDEO_BUFFER_INTERNAL_FORMAT_NV                 0x902D
+#define GL_PARTIAL_SUCCESS_NV                              0x902E
+#define GL_SUCCESS_NV                                      0x902F
+#define GL_FAILURE_NV                                      0x9030
+#define GL_YCBYCR8_422_NV                                  0x9031
+#define GL_YCBAYCR8A_4224_NV                               0x9032
+#define GL_Z6Y10Z6CB10Z6Y10Z6CR10_422_NV                   0x9033
+#define GL_Z6Y10Z6CB10Z6A10Z6Y10Z6CR10Z6A10_4224_NV        0x9034
+#define GL_Z4Y12Z4CB12Z4Y12Z4CR12_422_NV                   0x9035
+#define GL_Z4Y12Z4CB12Z4A12Z4Y12Z4CR12Z4A12_4224_NV        0x9036
+#define GL_Z4Y12Z4CB12Z4CR12_444_NV                        0x9037
+#define GL_VIDEO_CAPTURE_FRAME_WIDTH_NV                    0x9038
+#define GL_VIDEO_CAPTURE_FRAME_HEIGHT_NV                   0x9039
+#define GL_VIDEO_CAPTURE_FIELD_UPPER_HEIGHT_NV             0x903A
+#define GL_VIDEO_CAPTURE_FIELD_LOWER_HEIGHT_NV             0x903B
+#define GL_VIDEO_CAPTURE_SURFACE_ORIGIN_NV                 0x903C
+#ifndef GLEE_H_DEFINED_glBeginVideoCaptureNV
+#define GLEE_H_DEFINED_glBeginVideoCaptureNV
+  typedef void (APIENTRYP GLEEPFNGLBEGINVIDEOCAPTURENVPROC) (GLuint  video_capture_slot);
+  GLEE_EXTERN GLEEPFNGLBEGINVIDEOCAPTURENVPROC GLeeFuncPtr_glBeginVideoCaptureNV;
+  #define glBeginVideoCaptureNV GLeeFuncPtr_glBeginVideoCaptureNV
+#endif
+#ifndef GLEE_H_DEFINED_glBindVideoCaptureStreamBufferNV
+#define GLEE_H_DEFINED_glBindVideoCaptureStreamBufferNV
+  typedef void (APIENTRYP GLEEPFNGLBINDVIDEOCAPTURESTREAMBUFFERNVPROC) (GLuint  video_capture_slot, GLuint  stream, GLenum  frame_region, GLintptrARB  offset);
+  GLEE_EXTERN GLEEPFNGLBINDVIDEOCAPTURESTREAMBUFFERNVPROC GLeeFuncPtr_glBindVideoCaptureStreamBufferNV;
+  #define glBindVideoCaptureStreamBufferNV GLeeFuncPtr_glBindVideoCaptureStreamBufferNV
+#endif
+#ifndef GLEE_H_DEFINED_glBindVideoCaptureStreamTextureNV
+#define GLEE_H_DEFINED_glBindVideoCaptureStreamTextureNV
+  typedef void (APIENTRYP GLEEPFNGLBINDVIDEOCAPTURESTREAMTEXTURENVPROC) (GLuint  video_capture_slot, GLuint  stream, GLenum  frame_region, GLenum  target, GLuint  texture);
+  GLEE_EXTERN GLEEPFNGLBINDVIDEOCAPTURESTREAMTEXTURENVPROC GLeeFuncPtr_glBindVideoCaptureStreamTextureNV;
+  #define glBindVideoCaptureStreamTextureNV GLeeFuncPtr_glBindVideoCaptureStreamTextureNV
+#endif
+#ifndef GLEE_H_DEFINED_glEndVideoCaptureNV
+#define GLEE_H_DEFINED_glEndVideoCaptureNV
+  typedef void (APIENTRYP GLEEPFNGLENDVIDEOCAPTURENVPROC) (GLuint  video_capture_slot);
+  GLEE_EXTERN GLEEPFNGLENDVIDEOCAPTURENVPROC GLeeFuncPtr_glEndVideoCaptureNV;
+  #define glEndVideoCaptureNV GLeeFuncPtr_glEndVideoCaptureNV
+#endif
+#ifndef GLEE_H_DEFINED_glGetVideoCaptureivNV
+#define GLEE_H_DEFINED_glGetVideoCaptureivNV
+  typedef void (APIENTRYP GLEEPFNGLGETVIDEOCAPTUREIVNVPROC) (GLuint  video_capture_slot, GLenum  pname, GLint * params);
+  GLEE_EXTERN GLEEPFNGLGETVIDEOCAPTUREIVNVPROC GLeeFuncPtr_glGetVideoCaptureivNV;
+  #define glGetVideoCaptureivNV GLeeFuncPtr_glGetVideoCaptureivNV
+#endif
+#ifndef GLEE_H_DEFINED_glGetVideoCaptureStreamivNV
+#define GLEE_H_DEFINED_glGetVideoCaptureStreamivNV
+  typedef void (APIENTRYP GLEEPFNGLGETVIDEOCAPTURESTREAMIVNVPROC) (GLuint  video_capture_slot, GLuint  stream, GLenum  pname, GLint * params);
+  GLEE_EXTERN GLEEPFNGLGETVIDEOCAPTURESTREAMIVNVPROC GLeeFuncPtr_glGetVideoCaptureStreamivNV;
+  #define glGetVideoCaptureStreamivNV GLeeFuncPtr_glGetVideoCaptureStreamivNV
+#endif
+#ifndef GLEE_H_DEFINED_glGetVideoCaptureStreamfvNV
+#define GLEE_H_DEFINED_glGetVideoCaptureStreamfvNV
+  typedef void (APIENTRYP GLEEPFNGLGETVIDEOCAPTURESTREAMFVNVPROC) (GLuint  video_capture_slot, GLuint  stream, GLenum  pname, GLfloat * params);
+  GLEE_EXTERN GLEEPFNGLGETVIDEOCAPTURESTREAMFVNVPROC GLeeFuncPtr_glGetVideoCaptureStreamfvNV;
+  #define glGetVideoCaptureStreamfvNV GLeeFuncPtr_glGetVideoCaptureStreamfvNV
+#endif
+#ifndef GLEE_H_DEFINED_glGetVideoCaptureStreamdvNV
+#define GLEE_H_DEFINED_glGetVideoCaptureStreamdvNV
+  typedef void (APIENTRYP GLEEPFNGLGETVIDEOCAPTURESTREAMDVNVPROC) (GLuint  video_capture_slot, GLuint  stream, GLenum  pname, GLdouble * params);
+  GLEE_EXTERN GLEEPFNGLGETVIDEOCAPTURESTREAMDVNVPROC GLeeFuncPtr_glGetVideoCaptureStreamdvNV;
+  #define glGetVideoCaptureStreamdvNV GLeeFuncPtr_glGetVideoCaptureStreamdvNV
+#endif
+#ifndef GLEE_H_DEFINED_glVideoCaptureNV
+#define GLEE_H_DEFINED_glVideoCaptureNV
+  typedef GLenum (APIENTRYP GLEEPFNGLVIDEOCAPTURENVPROC) (GLuint  video_capture_slot, GLuint * sequence_num, GLuint64EXT * capture_time);
+  GLEE_EXTERN GLEEPFNGLVIDEOCAPTURENVPROC GLeeFuncPtr_glVideoCaptureNV;
+  #define glVideoCaptureNV GLeeFuncPtr_glVideoCaptureNV
+#endif
+#ifndef GLEE_H_DEFINED_glVideoCaptureStreamParameterivNV
+#define GLEE_H_DEFINED_glVideoCaptureStreamParameterivNV
+  typedef void (APIENTRYP GLEEPFNGLVIDEOCAPTURESTREAMPARAMETERIVNVPROC) (GLuint  video_capture_slot, GLuint  stream, GLenum  pname, const GLint * params);
+  GLEE_EXTERN GLEEPFNGLVIDEOCAPTURESTREAMPARAMETERIVNVPROC GLeeFuncPtr_glVideoCaptureStreamParameterivNV;
+  #define glVideoCaptureStreamParameterivNV GLeeFuncPtr_glVideoCaptureStreamParameterivNV
+#endif
+#ifndef GLEE_H_DEFINED_glVideoCaptureStreamParameterfvNV
+#define GLEE_H_DEFINED_glVideoCaptureStreamParameterfvNV
+  typedef void (APIENTRYP GLEEPFNGLVIDEOCAPTURESTREAMPARAMETERFVNVPROC) (GLuint  video_capture_slot, GLuint  stream, GLenum  pname, const GLfloat * params);
+  GLEE_EXTERN GLEEPFNGLVIDEOCAPTURESTREAMPARAMETERFVNVPROC GLeeFuncPtr_glVideoCaptureStreamParameterfvNV;
+  #define glVideoCaptureStreamParameterfvNV GLeeFuncPtr_glVideoCaptureStreamParameterfvNV
+#endif
+#ifndef GLEE_H_DEFINED_glVideoCaptureStreamParameterdvNV
+#define GLEE_H_DEFINED_glVideoCaptureStreamParameterdvNV
+  typedef void (APIENTRYP GLEEPFNGLVIDEOCAPTURESTREAMPARAMETERDVNVPROC) (GLuint  video_capture_slot, GLuint  stream, GLenum  pname, const GLdouble * params);
+  GLEE_EXTERN GLEEPFNGLVIDEOCAPTURESTREAMPARAMETERDVNVPROC GLeeFuncPtr_glVideoCaptureStreamParameterdvNV;
+  #define glVideoCaptureStreamParameterdvNV GLeeFuncPtr_glVideoCaptureStreamParameterdvNV
+#endif
+#endif 
+
+/* GL_NV_copy_image */
+
+#ifndef GL_NV_copy_image
+#define GL_NV_copy_image 1
+#define __GLEE_GL_NV_copy_image 1
+/* Constants */
+#ifndef GLEE_H_DEFINED_glCopyImageSubDataNV
+#define GLEE_H_DEFINED_glCopyImageSubDataNV
+  typedef void (APIENTRYP GLEEPFNGLCOPYIMAGESUBDATANVPROC) (GLuint  srcName, GLenum  srcTarget, GLint  srcLevel, GLint  srcX, GLint  srcY, GLint  srcZ, GLuint  dstName, GLenum  dstTarget, GLint  dstLevel, GLint  dstX, GLint  dstY, GLint  dstZ, GLsizei  width, GLsizei  height, GLsizei  depth);
+  GLEE_EXTERN GLEEPFNGLCOPYIMAGESUBDATANVPROC GLeeFuncPtr_glCopyImageSubDataNV;
+  #define glCopyImageSubDataNV GLeeFuncPtr_glCopyImageSubDataNV
+#endif
+#endif 
+
+/* GL_EXT_separate_shader_objects */
+
+#ifndef GL_EXT_separate_shader_objects
+#define GL_EXT_separate_shader_objects 1
+#define __GLEE_GL_EXT_separate_shader_objects 1
+/* Constants */
+#define GL_ACTIVE_PROGRAM_EXT                              0x8B8D
+#ifndef GLEE_H_DEFINED_glUseShaderProgramEXT
+#define GLEE_H_DEFINED_glUseShaderProgramEXT
+  typedef void (APIENTRYP GLEEPFNGLUSESHADERPROGRAMEXTPROC) (GLenum  type, GLuint  program);
+  GLEE_EXTERN GLEEPFNGLUSESHADERPROGRAMEXTPROC GLeeFuncPtr_glUseShaderProgramEXT;
+  #define glUseShaderProgramEXT GLeeFuncPtr_glUseShaderProgramEXT
+#endif
+#ifndef GLEE_H_DEFINED_glActiveProgramEXT
+#define GLEE_H_DEFINED_glActiveProgramEXT
+  typedef void (APIENTRYP GLEEPFNGLACTIVEPROGRAMEXTPROC) (GLuint  program);
+  GLEE_EXTERN GLEEPFNGLACTIVEPROGRAMEXTPROC GLeeFuncPtr_glActiveProgramEXT;
+  #define glActiveProgramEXT GLeeFuncPtr_glActiveProgramEXT
+#endif
+#ifndef GLEE_H_DEFINED_glCreateShaderProgramEXT
+#define GLEE_H_DEFINED_glCreateShaderProgramEXT
+  typedef GLuint (APIENTRYP GLEEPFNGLCREATESHADERPROGRAMEXTPROC) (GLenum  type, const GLchar * string);
+  GLEE_EXTERN GLEEPFNGLCREATESHADERPROGRAMEXTPROC GLeeFuncPtr_glCreateShaderProgramEXT;
+  #define glCreateShaderProgramEXT GLeeFuncPtr_glCreateShaderProgramEXT
+#endif
+#endif 
+
+/* GL_NV_parameter_buffer_object2 */
+
+#ifndef GL_NV_parameter_buffer_object2
+#define GL_NV_parameter_buffer_object2 1
+#define __GLEE_GL_NV_parameter_buffer_object2 1
+/* Constants */
+#endif 
+
+/* GL_NV_shader_buffer_load */
+
+#ifndef GL_NV_shader_buffer_load
+#define GL_NV_shader_buffer_load 1
+#define __GLEE_GL_NV_shader_buffer_load 1
+/* Constants */
+#define GL_BUFFER_GPU_ADDRESS_NV                           0x8F1D
+#define GL_GPU_ADDRESS_NV                                  0x8F34
+#define GL_MAX_SHADER_BUFFER_ADDRESS_NV                    0x8F35
+#ifndef GLEE_H_DEFINED_glMakeBufferResidentNV
+#define GLEE_H_DEFINED_glMakeBufferResidentNV
+  typedef void (APIENTRYP GLEEPFNGLMAKEBUFFERRESIDENTNVPROC) (GLenum  target, GLenum  access);
+  GLEE_EXTERN GLEEPFNGLMAKEBUFFERRESIDENTNVPROC GLeeFuncPtr_glMakeBufferResidentNV;
+  #define glMakeBufferResidentNV GLeeFuncPtr_glMakeBufferResidentNV
+#endif
+#ifndef GLEE_H_DEFINED_glMakeBufferNonResidentNV
+#define GLEE_H_DEFINED_glMakeBufferNonResidentNV
+  typedef void (APIENTRYP GLEEPFNGLMAKEBUFFERNONRESIDENTNVPROC) (GLenum  target);
+  GLEE_EXTERN GLEEPFNGLMAKEBUFFERNONRESIDENTNVPROC GLeeFuncPtr_glMakeBufferNonResidentNV;
+  #define glMakeBufferNonResidentNV GLeeFuncPtr_glMakeBufferNonResidentNV
+#endif
+#ifndef GLEE_H_DEFINED_glIsBufferResidentNV
+#define GLEE_H_DEFINED_glIsBufferResidentNV
+  typedef GLboolean (APIENTRYP GLEEPFNGLISBUFFERRESIDENTNVPROC) (GLenum  target);
+  GLEE_EXTERN GLEEPFNGLISBUFFERRESIDENTNVPROC GLeeFuncPtr_glIsBufferResidentNV;
+  #define glIsBufferResidentNV GLeeFuncPtr_glIsBufferResidentNV
+#endif
+#ifndef GLEE_H_DEFINED_glMakeNamedBufferResidentNV
+#define GLEE_H_DEFINED_glMakeNamedBufferResidentNV
+  typedef void (APIENTRYP GLEEPFNGLMAKENAMEDBUFFERRESIDENTNVPROC) (GLuint  buffer, GLenum  access);
+  GLEE_EXTERN GLEEPFNGLMAKENAMEDBUFFERRESIDENTNVPROC GLeeFuncPtr_glMakeNamedBufferResidentNV;
+  #define glMakeNamedBufferResidentNV GLeeFuncPtr_glMakeNamedBufferResidentNV
+#endif
+#ifndef GLEE_H_DEFINED_glMakeNamedBufferNonResidentNV
+#define GLEE_H_DEFINED_glMakeNamedBufferNonResidentNV
+  typedef void (APIENTRYP GLEEPFNGLMAKENAMEDBUFFERNONRESIDENTNVPROC) (GLuint  buffer);
+  GLEE_EXTERN GLEEPFNGLMAKENAMEDBUFFERNONRESIDENTNVPROC GLeeFuncPtr_glMakeNamedBufferNonResidentNV;
+  #define glMakeNamedBufferNonResidentNV GLeeFuncPtr_glMakeNamedBufferNonResidentNV
+#endif
+#ifndef GLEE_H_DEFINED_glIsNamedBufferResidentNV
+#define GLEE_H_DEFINED_glIsNamedBufferResidentNV
+  typedef GLboolean (APIENTRYP GLEEPFNGLISNAMEDBUFFERRESIDENTNVPROC) (GLuint  buffer);
+  GLEE_EXTERN GLEEPFNGLISNAMEDBUFFERRESIDENTNVPROC GLeeFuncPtr_glIsNamedBufferResidentNV;
+  #define glIsNamedBufferResidentNV GLeeFuncPtr_glIsNamedBufferResidentNV
+#endif
+#ifndef GLEE_H_DEFINED_glGetBufferParameterui64vNV
+#define GLEE_H_DEFINED_glGetBufferParameterui64vNV
+  typedef void (APIENTRYP GLEEPFNGLGETBUFFERPARAMETERUI64VNVPROC) (GLenum  target, GLenum  pname, GLuint64EXT * params);
+  GLEE_EXTERN GLEEPFNGLGETBUFFERPARAMETERUI64VNVPROC GLeeFuncPtr_glGetBufferParameterui64vNV;
+  #define glGetBufferParameterui64vNV GLeeFuncPtr_glGetBufferParameterui64vNV
+#endif
+#ifndef GLEE_H_DEFINED_glGetNamedBufferParameterui64vNV
+#define GLEE_H_DEFINED_glGetNamedBufferParameterui64vNV
+  typedef void (APIENTRYP GLEEPFNGLGETNAMEDBUFFERPARAMETERUI64VNVPROC) (GLuint  buffer, GLenum  pname, GLuint64EXT * params);
+  GLEE_EXTERN GLEEPFNGLGETNAMEDBUFFERPARAMETERUI64VNVPROC GLeeFuncPtr_glGetNamedBufferParameterui64vNV;
+  #define glGetNamedBufferParameterui64vNV GLeeFuncPtr_glGetNamedBufferParameterui64vNV
+#endif
+#ifndef GLEE_H_DEFINED_glGetIntegerui64vNV
+#define GLEE_H_DEFINED_glGetIntegerui64vNV
+  typedef void (APIENTRYP GLEEPFNGLGETINTEGERUI64VNVPROC) (GLenum  value, GLuint64EXT * result);
+  GLEE_EXTERN GLEEPFNGLGETINTEGERUI64VNVPROC GLeeFuncPtr_glGetIntegerui64vNV;
+  #define glGetIntegerui64vNV GLeeFuncPtr_glGetIntegerui64vNV
+#endif
+#ifndef GLEE_H_DEFINED_glUniformui64NV
+#define GLEE_H_DEFINED_glUniformui64NV
+  typedef void (APIENTRYP GLEEPFNGLUNIFORMUI64NVPROC) (GLint  location, GLuint64EXT  value);
+  GLEE_EXTERN GLEEPFNGLUNIFORMUI64NVPROC GLeeFuncPtr_glUniformui64NV;
+  #define glUniformui64NV GLeeFuncPtr_glUniformui64NV
+#endif
+#ifndef GLEE_H_DEFINED_glUniformui64vNV
+#define GLEE_H_DEFINED_glUniformui64vNV
+  typedef void (APIENTRYP GLEEPFNGLUNIFORMUI64VNVPROC) (GLint  location, GLsizei  count, const GLuint64EXT * value);
+  GLEE_EXTERN GLEEPFNGLUNIFORMUI64VNVPROC GLeeFuncPtr_glUniformui64vNV;
+  #define glUniformui64vNV GLeeFuncPtr_glUniformui64vNV
+#endif
+#ifndef GLEE_H_DEFINED_glGetUniformui64vNV
+#define GLEE_H_DEFINED_glGetUniformui64vNV
+  typedef void (APIENTRYP GLEEPFNGLGETUNIFORMUI64VNVPROC) (GLuint  program, GLint  location, GLuint64EXT * params);
+  GLEE_EXTERN GLEEPFNGLGETUNIFORMUI64VNVPROC GLeeFuncPtr_glGetUniformui64vNV;
+  #define glGetUniformui64vNV GLeeFuncPtr_glGetUniformui64vNV
+#endif
+#ifndef GLEE_H_DEFINED_glProgramUniformui64NV
+#define GLEE_H_DEFINED_glProgramUniformui64NV
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMUNIFORMUI64NVPROC) (GLuint  program, GLint  location, GLuint64EXT  value);
+  GLEE_EXTERN GLEEPFNGLPROGRAMUNIFORMUI64NVPROC GLeeFuncPtr_glProgramUniformui64NV;
+  #define glProgramUniformui64NV GLeeFuncPtr_glProgramUniformui64NV
+#endif
+#ifndef GLEE_H_DEFINED_glProgramUniformui64vNV
+#define GLEE_H_DEFINED_glProgramUniformui64vNV
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMUNIFORMUI64VNVPROC) (GLuint  program, GLint  location, GLsizei  count, const GLuint64EXT * value);
+  GLEE_EXTERN GLEEPFNGLPROGRAMUNIFORMUI64VNVPROC GLeeFuncPtr_glProgramUniformui64vNV;
+  #define glProgramUniformui64vNV GLeeFuncPtr_glProgramUniformui64vNV
+#endif
+#endif 
+
+/* GL_NV_vertex_buffer_unified_memory */
+
+#ifndef GL_NV_vertex_buffer_unified_memory
+#define GL_NV_vertex_buffer_unified_memory 1
+#define __GLEE_GL_NV_vertex_buffer_unified_memory 1
+/* Constants */
+#define GL_VERTEX_ATTRIB_ARRAY_UNIFIED_NV                  0x8F1E
+#define GL_ELEMENT_ARRAY_UNIFIED_NV                        0x8F1F
+#define GL_VERTEX_ATTRIB_ARRAY_ADDRESS_NV                  0x8F20
+#define GL_VERTEX_ARRAY_ADDRESS_NV                         0x8F21
+#define GL_NORMAL_ARRAY_ADDRESS_NV                         0x8F22
+#define GL_COLOR_ARRAY_ADDRESS_NV                          0x8F23
+#define GL_INDEX_ARRAY_ADDRESS_NV                          0x8F24
+#define GL_TEXTURE_COORD_ARRAY_ADDRESS_NV                  0x8F25
+#define GL_EDGE_FLAG_ARRAY_ADDRESS_NV                      0x8F26
+#define GL_SECONDARY_COLOR_ARRAY_ADDRESS_NV                0x8F27
+#define GL_FOG_COORD_ARRAY_ADDRESS_NV                      0x8F28
+#define GL_ELEMENT_ARRAY_ADDRESS_NV                        0x8F29
+#define GL_VERTEX_ATTRIB_ARRAY_LENGTH_NV                   0x8F2A
+#define GL_VERTEX_ARRAY_LENGTH_NV                          0x8F2B
+#define GL_NORMAL_ARRAY_LENGTH_NV                          0x8F2C
+#define GL_COLOR_ARRAY_LENGTH_NV                           0x8F2D
+#define GL_INDEX_ARRAY_LENGTH_NV                           0x8F2E
+#define GL_TEXTURE_COORD_ARRAY_LENGTH_NV                   0x8F2F
+#define GL_EDGE_FLAG_ARRAY_LENGTH_NV                       0x8F30
+#define GL_SECONDARY_COLOR_ARRAY_LENGTH_NV                 0x8F31
+#define GL_FOG_COORD_ARRAY_LENGTH_NV                       0x8F32
+#define GL_ELEMENT_ARRAY_LENGTH_NV                         0x8F33
+#define GL_DRAW_INDIRECT_UNIFIED_NV                        0x8F40
+#define GL_DRAW_INDIRECT_ADDRESS_NV                        0x8F41
+#define GL_DRAW_INDIRECT_LENGTH_NV                         0x8F42
+#ifndef GLEE_H_DEFINED_glBufferAddressRangeNV
+#define GLEE_H_DEFINED_glBufferAddressRangeNV
+  typedef void (APIENTRYP GLEEPFNGLBUFFERADDRESSRANGENVPROC) (GLenum  pname, GLuint  index, GLuint64EXT  address, GLsizeiptr  length);
+  GLEE_EXTERN GLEEPFNGLBUFFERADDRESSRANGENVPROC GLeeFuncPtr_glBufferAddressRangeNV;
+  #define glBufferAddressRangeNV GLeeFuncPtr_glBufferAddressRangeNV
+#endif
+#ifndef GLEE_H_DEFINED_glVertexFormatNV
+#define GLEE_H_DEFINED_glVertexFormatNV
+  typedef void (APIENTRYP GLEEPFNGLVERTEXFORMATNVPROC) (GLint  size, GLenum  type, GLsizei  stride);
+  GLEE_EXTERN GLEEPFNGLVERTEXFORMATNVPROC GLeeFuncPtr_glVertexFormatNV;
+  #define glVertexFormatNV GLeeFuncPtr_glVertexFormatNV
+#endif
+#ifndef GLEE_H_DEFINED_glNormalFormatNV
+#define GLEE_H_DEFINED_glNormalFormatNV
+  typedef void (APIENTRYP GLEEPFNGLNORMALFORMATNVPROC) (GLenum  type, GLsizei  stride);
+  GLEE_EXTERN GLEEPFNGLNORMALFORMATNVPROC GLeeFuncPtr_glNormalFormatNV;
+  #define glNormalFormatNV GLeeFuncPtr_glNormalFormatNV
+#endif
+#ifndef GLEE_H_DEFINED_glColorFormatNV
+#define GLEE_H_DEFINED_glColorFormatNV
+  typedef void (APIENTRYP GLEEPFNGLCOLORFORMATNVPROC) (GLint  size, GLenum  type, GLsizei  stride);
+  GLEE_EXTERN GLEEPFNGLCOLORFORMATNVPROC GLeeFuncPtr_glColorFormatNV;
+  #define glColorFormatNV GLeeFuncPtr_glColorFormatNV
+#endif
+#ifndef GLEE_H_DEFINED_glIndexFormatNV
+#define GLEE_H_DEFINED_glIndexFormatNV
+  typedef void (APIENTRYP GLEEPFNGLINDEXFORMATNVPROC) (GLenum  type, GLsizei  stride);
+  GLEE_EXTERN GLEEPFNGLINDEXFORMATNVPROC GLeeFuncPtr_glIndexFormatNV;
+  #define glIndexFormatNV GLeeFuncPtr_glIndexFormatNV
+#endif
+#ifndef GLEE_H_DEFINED_glTexCoordFormatNV
+#define GLEE_H_DEFINED_glTexCoordFormatNV
+  typedef void (APIENTRYP GLEEPFNGLTEXCOORDFORMATNVPROC) (GLint  size, GLenum  type, GLsizei  stride);
+  GLEE_EXTERN GLEEPFNGLTEXCOORDFORMATNVPROC GLeeFuncPtr_glTexCoordFormatNV;
+  #define glTexCoordFormatNV GLeeFuncPtr_glTexCoordFormatNV
+#endif
+#ifndef GLEE_H_DEFINED_glEdgeFlagFormatNV
+#define GLEE_H_DEFINED_glEdgeFlagFormatNV
+  typedef void (APIENTRYP GLEEPFNGLEDGEFLAGFORMATNVPROC) (GLsizei  stride);
+  GLEE_EXTERN GLEEPFNGLEDGEFLAGFORMATNVPROC GLeeFuncPtr_glEdgeFlagFormatNV;
+  #define glEdgeFlagFormatNV GLeeFuncPtr_glEdgeFlagFormatNV
+#endif
+#ifndef GLEE_H_DEFINED_glSecondaryColorFormatNV
+#define GLEE_H_DEFINED_glSecondaryColorFormatNV
+  typedef void (APIENTRYP GLEEPFNGLSECONDARYCOLORFORMATNVPROC) (GLint  size, GLenum  type, GLsizei  stride);
+  GLEE_EXTERN GLEEPFNGLSECONDARYCOLORFORMATNVPROC GLeeFuncPtr_glSecondaryColorFormatNV;
+  #define glSecondaryColorFormatNV GLeeFuncPtr_glSecondaryColorFormatNV
+#endif
+#ifndef GLEE_H_DEFINED_glFogCoordFormatNV
+#define GLEE_H_DEFINED_glFogCoordFormatNV
+  typedef void (APIENTRYP GLEEPFNGLFOGCOORDFORMATNVPROC) (GLenum  type, GLsizei  stride);
+  GLEE_EXTERN GLEEPFNGLFOGCOORDFORMATNVPROC GLeeFuncPtr_glFogCoordFormatNV;
+  #define glFogCoordFormatNV GLeeFuncPtr_glFogCoordFormatNV
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttribFormatNV
+#define GLEE_H_DEFINED_glVertexAttribFormatNV
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIBFORMATNVPROC) (GLuint  index, GLint  size, GLenum  type, GLboolean  normalized, GLsizei  stride);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIBFORMATNVPROC GLeeFuncPtr_glVertexAttribFormatNV;
+  #define glVertexAttribFormatNV GLeeFuncPtr_glVertexAttribFormatNV
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttribIFormatNV
+#define GLEE_H_DEFINED_glVertexAttribIFormatNV
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIBIFORMATNVPROC) (GLuint  index, GLint  size, GLenum  type, GLsizei  stride);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIBIFORMATNVPROC GLeeFuncPtr_glVertexAttribIFormatNV;
+  #define glVertexAttribIFormatNV GLeeFuncPtr_glVertexAttribIFormatNV
+#endif
+#ifndef GLEE_H_DEFINED_glGetIntegerui64i_vNV
+#define GLEE_H_DEFINED_glGetIntegerui64i_vNV
+  typedef void (APIENTRYP GLEEPFNGLGETINTEGERUI64I_VNVPROC) (GLenum  value, GLuint  index, GLuint64EXT * result);
+  GLEE_EXTERN GLEEPFNGLGETINTEGERUI64I_VNVPROC GLeeFuncPtr_glGetIntegerui64i_vNV;
+  #define glGetIntegerui64i_vNV GLeeFuncPtr_glGetIntegerui64i_vNV
+#endif
+#endif 
+
+/* GL_NV_texture_barrier */
+
+#ifndef GL_NV_texture_barrier
+#define GL_NV_texture_barrier 1
+#define __GLEE_GL_NV_texture_barrier 1
+/* Constants */
+#ifndef GLEE_H_DEFINED_glTextureBarrierNV
+#define GLEE_H_DEFINED_glTextureBarrierNV
+  typedef void (APIENTRYP GLEEPFNGLTEXTUREBARRIERNVPROC) ();
+  GLEE_EXTERN GLEEPFNGLTEXTUREBARRIERNVPROC GLeeFuncPtr_glTextureBarrierNV;
+  #define glTextureBarrierNV GLeeFuncPtr_glTextureBarrierNV
+#endif
+#endif 
+
+/* GL_AMD_shader_stencil_export */
+
+#ifndef GL_AMD_shader_stencil_export
+#define GL_AMD_shader_stencil_export 1
+#define __GLEE_GL_AMD_shader_stencil_export 1
+/* Constants */
+#endif 
+
+/* GL_AMD_seamless_cubemap_per_texture */
+
+#ifndef GL_AMD_seamless_cubemap_per_texture
+#define GL_AMD_seamless_cubemap_per_texture 1
+#define __GLEE_GL_AMD_seamless_cubemap_per_texture 1
+/* Constants */
+#endif 
+
+/* GL_AMD_conservative_depth */
+
+#ifndef GL_AMD_conservative_depth
+#define GL_AMD_conservative_depth 1
+#define __GLEE_GL_AMD_conservative_depth 1
+/* Constants */
+#endif 
+
+/* GL_EXT_shader_image_load_store */
+
+#ifndef GL_EXT_shader_image_load_store
+#define GL_EXT_shader_image_load_store 1
+#define __GLEE_GL_EXT_shader_image_load_store 1
+/* Constants */
+#define GL_MAX_IMAGE_UNITS_EXT                             0x8F38
+#define GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS_EXT 0x8F39
+#define GL_IMAGE_BINDING_NAME_EXT                          0x8F3A
+#define GL_IMAGE_BINDING_LEVEL_EXT                         0x8F3B
+#define GL_IMAGE_BINDING_LAYERED_EXT                       0x8F3C
+#define GL_IMAGE_BINDING_LAYER_EXT                         0x8F3D
+#define GL_IMAGE_BINDING_ACCESS_EXT                        0x8F3E
+#define GL_IMAGE_1D_EXT                                    0x904C
+#define GL_IMAGE_2D_EXT                                    0x904D
+#define GL_IMAGE_3D_EXT                                    0x904E
+#define GL_IMAGE_2D_RECT_EXT                               0x904F
+#define GL_IMAGE_CUBE_EXT                                  0x9050
+#define GL_IMAGE_BUFFER_EXT                                0x9051
+#define GL_IMAGE_1D_ARRAY_EXT                              0x9052
+#define GL_IMAGE_2D_ARRAY_EXT                              0x9053
+#define GL_IMAGE_CUBE_MAP_ARRAY_EXT                        0x9054
+#define GL_IMAGE_2D_MULTISAMPLE_EXT                        0x9055
+#define GL_IMAGE_2D_MULTISAMPLE_ARRAY_EXT                  0x9056
+#define GL_INT_IMAGE_1D_EXT                                0x9057
+#define GL_INT_IMAGE_2D_EXT                                0x9058
+#define GL_INT_IMAGE_3D_EXT                                0x9059
+#define GL_INT_IMAGE_2D_RECT_EXT                           0x905A
+#define GL_INT_IMAGE_CUBE_EXT                              0x905B
+#define GL_INT_IMAGE_BUFFER_EXT                            0x905C
+#define GL_INT_IMAGE_1D_ARRAY_EXT                          0x905D
+#define GL_INT_IMAGE_2D_ARRAY_EXT                          0x905E
+#define GL_INT_IMAGE_CUBE_MAP_ARRAY_EXT                    0x905F
+#define GL_INT_IMAGE_2D_MULTISAMPLE_EXT                    0x9060
+#define GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT              0x9061
+#define GL_UNSIGNED_INT_IMAGE_1D_EXT                       0x9062
+#define GL_UNSIGNED_INT_IMAGE_2D_EXT                       0x9063
+#define GL_UNSIGNED_INT_IMAGE_3D_EXT                       0x9064
+#define GL_UNSIGNED_INT_IMAGE_2D_RECT_EXT                  0x9065
+#define GL_UNSIGNED_INT_IMAGE_CUBE_EXT                     0x9066
+#define GL_UNSIGNED_INT_IMAGE_BUFFER_EXT                   0x9067
+#define GL_UNSIGNED_INT_IMAGE_1D_ARRAY_EXT                 0x9068
+#define GL_UNSIGNED_INT_IMAGE_2D_ARRAY_EXT                 0x9069
+#define GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXT           0x906A
+#define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_EXT           0x906B
+#define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT     0x906C
+#define GL_MAX_IMAGE_SAMPLES_EXT                           0x906D
+#define GL_IMAGE_BINDING_FORMAT_EXT                        0x906E
+#define GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT_EXT             0x00000001
+#define GL_ELEMENT_ARRAY_BARRIER_BIT_EXT                   0x00000002
+#define GL_UNIFORM_BARRIER_BIT_EXT                         0x00000004
+#define GL_TEXTURE_FETCH_BARRIER_BIT_EXT                   0x00000008
+#define GL_SHADER_IMAGE_ACCESS_BARRIER_BIT_EXT             0x00000020
+#define GL_COMMAND_BARRIER_BIT_EXT                         0x00000040
+#define GL_PIXEL_BUFFER_BARRIER_BIT_EXT                    0x00000080
+#define GL_TEXTURE_UPDATE_BARRIER_BIT_EXT                  0x00000100
+#define GL_BUFFER_UPDATE_BARRIER_BIT_EXT                   0x00000200
+#define GL_FRAMEBUFFER_BARRIER_BIT_EXT                     0x00000400
+#define GL_TRANSFORM_FEEDBACK_BARRIER_BIT_EXT              0x00000800
+#define GL_ATOMIC_COUNTER_BARRIER_BIT_EXT                  0x00001000
+#define GL_ALL_BARRIER_BITS_EXT                            0xFFFFFFFF
+#ifndef GLEE_H_DEFINED_glBindImageTextureEXT
+#define GLEE_H_DEFINED_glBindImageTextureEXT
+  typedef void (APIENTRYP GLEEPFNGLBINDIMAGETEXTUREEXTPROC) (GLuint  index, GLuint  texture, GLint  level, GLboolean  layered, GLint  layer, GLenum  access, GLint  format);
+  GLEE_EXTERN GLEEPFNGLBINDIMAGETEXTUREEXTPROC GLeeFuncPtr_glBindImageTextureEXT;
+  #define glBindImageTextureEXT GLeeFuncPtr_glBindImageTextureEXT
+#endif
+#ifndef GLEE_H_DEFINED_glMemoryBarrierEXT
+#define GLEE_H_DEFINED_glMemoryBarrierEXT
+  typedef void (APIENTRYP GLEEPFNGLMEMORYBARRIEREXTPROC) (GLbitfield  barriers);
+  GLEE_EXTERN GLEEPFNGLMEMORYBARRIEREXTPROC GLeeFuncPtr_glMemoryBarrierEXT;
+  #define glMemoryBarrierEXT GLeeFuncPtr_glMemoryBarrierEXT
+#endif
+#endif 
+
+/* GL_EXT_vertex_attrib_64bit */
+
+#ifndef GL_EXT_vertex_attrib_64bit
+#define GL_EXT_vertex_attrib_64bit 1
+#define __GLEE_GL_EXT_vertex_attrib_64bit 1
+/* Constants */
+#define GL_DOUBLE_VEC2_EXT                                 0x8FFC
+#define GL_DOUBLE_VEC3_EXT                                 0x8FFD
+#define GL_DOUBLE_VEC4_EXT                                 0x8FFE
+#define GL_DOUBLE_MAT2_EXT                                 0x8F46
+#define GL_DOUBLE_MAT3_EXT                                 0x8F47
+#define GL_DOUBLE_MAT4_EXT                                 0x8F48
+#define GL_DOUBLE_MAT2x3_EXT                               0x8F49
+#define GL_DOUBLE_MAT2x4_EXT                               0x8F4A
+#define GL_DOUBLE_MAT3x2_EXT                               0x8F4B
+#define GL_DOUBLE_MAT3x4_EXT                               0x8F4C
+#define GL_DOUBLE_MAT4x2_EXT                               0x8F4D
+#define GL_DOUBLE_MAT4x3_EXT                               0x8F4E
+#ifndef GLEE_H_DEFINED_glVertexAttribL1dEXT
+#define GLEE_H_DEFINED_glVertexAttribL1dEXT
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIBL1DEXTPROC) (GLuint  index, GLdouble  x);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIBL1DEXTPROC GLeeFuncPtr_glVertexAttribL1dEXT;
+  #define glVertexAttribL1dEXT GLeeFuncPtr_glVertexAttribL1dEXT
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttribL2dEXT
+#define GLEE_H_DEFINED_glVertexAttribL2dEXT
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIBL2DEXTPROC) (GLuint  index, GLdouble  x, GLdouble  y);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIBL2DEXTPROC GLeeFuncPtr_glVertexAttribL2dEXT;
+  #define glVertexAttribL2dEXT GLeeFuncPtr_glVertexAttribL2dEXT
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttribL3dEXT
+#define GLEE_H_DEFINED_glVertexAttribL3dEXT
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIBL3DEXTPROC) (GLuint  index, GLdouble  x, GLdouble  y, GLdouble  z);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIBL3DEXTPROC GLeeFuncPtr_glVertexAttribL3dEXT;
+  #define glVertexAttribL3dEXT GLeeFuncPtr_glVertexAttribL3dEXT
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttribL4dEXT
+#define GLEE_H_DEFINED_glVertexAttribL4dEXT
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIBL4DEXTPROC) (GLuint  index, GLdouble  x, GLdouble  y, GLdouble  z, GLdouble  w);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIBL4DEXTPROC GLeeFuncPtr_glVertexAttribL4dEXT;
+  #define glVertexAttribL4dEXT GLeeFuncPtr_glVertexAttribL4dEXT
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttribL1dvEXT
+#define GLEE_H_DEFINED_glVertexAttribL1dvEXT
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIBL1DVEXTPROC) (GLuint  index, const GLdouble * v);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIBL1DVEXTPROC GLeeFuncPtr_glVertexAttribL1dvEXT;
+  #define glVertexAttribL1dvEXT GLeeFuncPtr_glVertexAttribL1dvEXT
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttribL2dvEXT
+#define GLEE_H_DEFINED_glVertexAttribL2dvEXT
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIBL2DVEXTPROC) (GLuint  index, const GLdouble * v);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIBL2DVEXTPROC GLeeFuncPtr_glVertexAttribL2dvEXT;
+  #define glVertexAttribL2dvEXT GLeeFuncPtr_glVertexAttribL2dvEXT
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttribL3dvEXT
+#define GLEE_H_DEFINED_glVertexAttribL3dvEXT
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIBL3DVEXTPROC) (GLuint  index, const GLdouble * v);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIBL3DVEXTPROC GLeeFuncPtr_glVertexAttribL3dvEXT;
+  #define glVertexAttribL3dvEXT GLeeFuncPtr_glVertexAttribL3dvEXT
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttribL4dvEXT
+#define GLEE_H_DEFINED_glVertexAttribL4dvEXT
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIBL4DVEXTPROC) (GLuint  index, const GLdouble * v);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIBL4DVEXTPROC GLeeFuncPtr_glVertexAttribL4dvEXT;
+  #define glVertexAttribL4dvEXT GLeeFuncPtr_glVertexAttribL4dvEXT
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttribLPointerEXT
+#define GLEE_H_DEFINED_glVertexAttribLPointerEXT
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIBLPOINTEREXTPROC) (GLuint  index, GLint  size, GLenum  type, GLsizei  stride, const GLvoid * pointer);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIBLPOINTEREXTPROC GLeeFuncPtr_glVertexAttribLPointerEXT;
+  #define glVertexAttribLPointerEXT GLeeFuncPtr_glVertexAttribLPointerEXT
+#endif
+#ifndef GLEE_H_DEFINED_glGetVertexAttribLdvEXT
+#define GLEE_H_DEFINED_glGetVertexAttribLdvEXT
+  typedef void (APIENTRYP GLEEPFNGLGETVERTEXATTRIBLDVEXTPROC) (GLuint  index, GLenum  pname, GLdouble * params);
+  GLEE_EXTERN GLEEPFNGLGETVERTEXATTRIBLDVEXTPROC GLeeFuncPtr_glGetVertexAttribLdvEXT;
+  #define glGetVertexAttribLdvEXT GLeeFuncPtr_glGetVertexAttribLdvEXT
+#endif
+#ifndef GLEE_H_DEFINED_glVertexArrayVertexAttribLOffsetEXT
+#define GLEE_H_DEFINED_glVertexArrayVertexAttribLOffsetEXT
+  typedef void (APIENTRYP GLEEPFNGLVERTEXARRAYVERTEXATTRIBLOFFSETEXTPROC) (GLuint  vaobj, GLuint  buffer, GLuint  index, GLint  size, GLenum  type, GLsizei  stride, GLintptr  offset);
+  GLEE_EXTERN GLEEPFNGLVERTEXARRAYVERTEXATTRIBLOFFSETEXTPROC GLeeFuncPtr_glVertexArrayVertexAttribLOffsetEXT;
+  #define glVertexArrayVertexAttribLOffsetEXT GLeeFuncPtr_glVertexArrayVertexAttribLOffsetEXT
+#endif
+#endif 
+
+/* GL_NV_gpu_program5 */
+
+#ifndef GL_NV_gpu_program5
+#define GL_NV_gpu_program5 1
+#define __GLEE_GL_NV_gpu_program5 1
+/* Constants */
+#define GL_MAX_GEOMETRY_PROGRAM_INVOCATIONS_NV             0x8E5A
+#define GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_NV            0x8E5B
+#define GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_NV            0x8E5C
+#define GL_FRAGMENT_PROGRAM_INTERPOLATION_OFFSET_BITS_NV   0x8E5D
+#define GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_NV            0x8E5E
+#define GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_NV            0x8E5F
+#define GL_MAX_PROGRAM_SUBROUTINE_PARAMETERS_NV            0x8F44
+#define GL_MAX_PROGRAM_SUBROUTINE_NUM_NV                   0x8F45
+#ifndef GLEE_H_DEFINED_glProgramSubroutineParametersuivNV
+#define GLEE_H_DEFINED_glProgramSubroutineParametersuivNV
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMSUBROUTINEPARAMETERSUIVNVPROC) (GLenum  target, GLsizei  count, const GLuint * params);
+  GLEE_EXTERN GLEEPFNGLPROGRAMSUBROUTINEPARAMETERSUIVNVPROC GLeeFuncPtr_glProgramSubroutineParametersuivNV;
+  #define glProgramSubroutineParametersuivNV GLeeFuncPtr_glProgramSubroutineParametersuivNV
+#endif
+#ifndef GLEE_H_DEFINED_glGetProgramSubroutineParameteruivNV
+#define GLEE_H_DEFINED_glGetProgramSubroutineParameteruivNV
+  typedef void (APIENTRYP GLEEPFNGLGETPROGRAMSUBROUTINEPARAMETERUIVNVPROC) (GLenum  target, GLuint  index, GLuint * param);
+  GLEE_EXTERN GLEEPFNGLGETPROGRAMSUBROUTINEPARAMETERUIVNVPROC GLeeFuncPtr_glGetProgramSubroutineParameteruivNV;
+  #define glGetProgramSubroutineParameteruivNV GLeeFuncPtr_glGetProgramSubroutineParameteruivNV
+#endif
+#endif 
+
+/* GL_NV_gpu_shader5 */
+
+#ifndef GL_NV_gpu_shader5
+#define GL_NV_gpu_shader5 1
+#define __GLEE_GL_NV_gpu_shader5 1
+/* Constants */
+#define GL_INT64_NV                                        0x140E
+#define GL_UNSIGNED_INT64_NV                               0x140F
+#define GL_INT8_NV                                         0x8FE0
+#define GL_INT8_VEC2_NV                                    0x8FE1
+#define GL_INT8_VEC3_NV                                    0x8FE2
+#define GL_INT8_VEC4_NV                                    0x8FE3
+#define GL_INT16_NV                                        0x8FE4
+#define GL_INT16_VEC2_NV                                   0x8FE5
+#define GL_INT16_VEC3_NV                                   0x8FE6
+#define GL_INT16_VEC4_NV                                   0x8FE7
+#define GL_INT64_VEC2_NV                                   0x8FE9
+#define GL_INT64_VEC3_NV                                   0x8FEA
+#define GL_INT64_VEC4_NV                                   0x8FEB
+#define GL_UNSIGNED_INT8_NV                                0x8FEC
+#define GL_UNSIGNED_INT8_VEC2_NV                           0x8FED
+#define GL_UNSIGNED_INT8_VEC3_NV                           0x8FEE
+#define GL_UNSIGNED_INT8_VEC4_NV                           0x8FEF
+#define GL_UNSIGNED_INT16_NV                               0x8FF0
+#define GL_UNSIGNED_INT16_VEC2_NV                          0x8FF1
+#define GL_UNSIGNED_INT16_VEC3_NV                          0x8FF2
+#define GL_UNSIGNED_INT16_VEC4_NV                          0x8FF3
+#define GL_UNSIGNED_INT64_VEC2_NV                          0x8FF5
+#define GL_UNSIGNED_INT64_VEC3_NV                          0x8FF6
+#define GL_UNSIGNED_INT64_VEC4_NV                          0x8FF7
+#define GL_FLOAT16_NV                                      0x8FF8
+#define GL_FLOAT16_VEC2_NV                                 0x8FF9
+#define GL_FLOAT16_VEC3_NV                                 0x8FFA
+#define GL_FLOAT16_VEC4_NV                                 0x8FFB
+#ifndef GLEE_H_DEFINED_glUniform1i64NV
+#define GLEE_H_DEFINED_glUniform1i64NV
+  typedef void (APIENTRYP GLEEPFNGLUNIFORM1I64NVPROC) (GLint  location, GLint64EXT  x);
+  GLEE_EXTERN GLEEPFNGLUNIFORM1I64NVPROC GLeeFuncPtr_glUniform1i64NV;
+  #define glUniform1i64NV GLeeFuncPtr_glUniform1i64NV
+#endif
+#ifndef GLEE_H_DEFINED_glUniform2i64NV
+#define GLEE_H_DEFINED_glUniform2i64NV
+  typedef void (APIENTRYP GLEEPFNGLUNIFORM2I64NVPROC) (GLint  location, GLint64EXT  x, GLint64EXT  y);
+  GLEE_EXTERN GLEEPFNGLUNIFORM2I64NVPROC GLeeFuncPtr_glUniform2i64NV;
+  #define glUniform2i64NV GLeeFuncPtr_glUniform2i64NV
+#endif
+#ifndef GLEE_H_DEFINED_glUniform3i64NV
+#define GLEE_H_DEFINED_glUniform3i64NV
+  typedef void (APIENTRYP GLEEPFNGLUNIFORM3I64NVPROC) (GLint  location, GLint64EXT  x, GLint64EXT  y, GLint64EXT  z);
+  GLEE_EXTERN GLEEPFNGLUNIFORM3I64NVPROC GLeeFuncPtr_glUniform3i64NV;
+  #define glUniform3i64NV GLeeFuncPtr_glUniform3i64NV
+#endif
+#ifndef GLEE_H_DEFINED_glUniform4i64NV
+#define GLEE_H_DEFINED_glUniform4i64NV
+  typedef void (APIENTRYP GLEEPFNGLUNIFORM4I64NVPROC) (GLint  location, GLint64EXT  x, GLint64EXT  y, GLint64EXT  z, GLint64EXT  w);
+  GLEE_EXTERN GLEEPFNGLUNIFORM4I64NVPROC GLeeFuncPtr_glUniform4i64NV;
+  #define glUniform4i64NV GLeeFuncPtr_glUniform4i64NV
+#endif
+#ifndef GLEE_H_DEFINED_glUniform1i64vNV
+#define GLEE_H_DEFINED_glUniform1i64vNV
+  typedef void (APIENTRYP GLEEPFNGLUNIFORM1I64VNVPROC) (GLint  location, GLsizei  count, const GLint64EXT * value);
+  GLEE_EXTERN GLEEPFNGLUNIFORM1I64VNVPROC GLeeFuncPtr_glUniform1i64vNV;
+  #define glUniform1i64vNV GLeeFuncPtr_glUniform1i64vNV
+#endif
+#ifndef GLEE_H_DEFINED_glUniform2i64vNV
+#define GLEE_H_DEFINED_glUniform2i64vNV
+  typedef void (APIENTRYP GLEEPFNGLUNIFORM2I64VNVPROC) (GLint  location, GLsizei  count, const GLint64EXT * value);
+  GLEE_EXTERN GLEEPFNGLUNIFORM2I64VNVPROC GLeeFuncPtr_glUniform2i64vNV;
+  #define glUniform2i64vNV GLeeFuncPtr_glUniform2i64vNV
+#endif
+#ifndef GLEE_H_DEFINED_glUniform3i64vNV
+#define GLEE_H_DEFINED_glUniform3i64vNV
+  typedef void (APIENTRYP GLEEPFNGLUNIFORM3I64VNVPROC) (GLint  location, GLsizei  count, const GLint64EXT * value);
+  GLEE_EXTERN GLEEPFNGLUNIFORM3I64VNVPROC GLeeFuncPtr_glUniform3i64vNV;
+  #define glUniform3i64vNV GLeeFuncPtr_glUniform3i64vNV
+#endif
+#ifndef GLEE_H_DEFINED_glUniform4i64vNV
+#define GLEE_H_DEFINED_glUniform4i64vNV
+  typedef void (APIENTRYP GLEEPFNGLUNIFORM4I64VNVPROC) (GLint  location, GLsizei  count, const GLint64EXT * value);
+  GLEE_EXTERN GLEEPFNGLUNIFORM4I64VNVPROC GLeeFuncPtr_glUniform4i64vNV;
+  #define glUniform4i64vNV GLeeFuncPtr_glUniform4i64vNV
+#endif
+#ifndef GLEE_H_DEFINED_glUniform1ui64NV
+#define GLEE_H_DEFINED_glUniform1ui64NV
+  typedef void (APIENTRYP GLEEPFNGLUNIFORM1UI64NVPROC) (GLint  location, GLuint64EXT  x);
+  GLEE_EXTERN GLEEPFNGLUNIFORM1UI64NVPROC GLeeFuncPtr_glUniform1ui64NV;
+  #define glUniform1ui64NV GLeeFuncPtr_glUniform1ui64NV
+#endif
+#ifndef GLEE_H_DEFINED_glUniform2ui64NV
+#define GLEE_H_DEFINED_glUniform2ui64NV
+  typedef void (APIENTRYP GLEEPFNGLUNIFORM2UI64NVPROC) (GLint  location, GLuint64EXT  x, GLuint64EXT  y);
+  GLEE_EXTERN GLEEPFNGLUNIFORM2UI64NVPROC GLeeFuncPtr_glUniform2ui64NV;
+  #define glUniform2ui64NV GLeeFuncPtr_glUniform2ui64NV
+#endif
+#ifndef GLEE_H_DEFINED_glUniform3ui64NV
+#define GLEE_H_DEFINED_glUniform3ui64NV
+  typedef void (APIENTRYP GLEEPFNGLUNIFORM3UI64NVPROC) (GLint  location, GLuint64EXT  x, GLuint64EXT  y, GLuint64EXT  z);
+  GLEE_EXTERN GLEEPFNGLUNIFORM3UI64NVPROC GLeeFuncPtr_glUniform3ui64NV;
+  #define glUniform3ui64NV GLeeFuncPtr_glUniform3ui64NV
+#endif
+#ifndef GLEE_H_DEFINED_glUniform4ui64NV
+#define GLEE_H_DEFINED_glUniform4ui64NV
+  typedef void (APIENTRYP GLEEPFNGLUNIFORM4UI64NVPROC) (GLint  location, GLuint64EXT  x, GLuint64EXT  y, GLuint64EXT  z, GLuint64EXT  w);
+  GLEE_EXTERN GLEEPFNGLUNIFORM4UI64NVPROC GLeeFuncPtr_glUniform4ui64NV;
+  #define glUniform4ui64NV GLeeFuncPtr_glUniform4ui64NV
+#endif
+#ifndef GLEE_H_DEFINED_glUniform1ui64vNV
+#define GLEE_H_DEFINED_glUniform1ui64vNV
+  typedef void (APIENTRYP GLEEPFNGLUNIFORM1UI64VNVPROC) (GLint  location, GLsizei  count, const GLuint64EXT * value);
+  GLEE_EXTERN GLEEPFNGLUNIFORM1UI64VNVPROC GLeeFuncPtr_glUniform1ui64vNV;
+  #define glUniform1ui64vNV GLeeFuncPtr_glUniform1ui64vNV
+#endif
+#ifndef GLEE_H_DEFINED_glUniform2ui64vNV
+#define GLEE_H_DEFINED_glUniform2ui64vNV
+  typedef void (APIENTRYP GLEEPFNGLUNIFORM2UI64VNVPROC) (GLint  location, GLsizei  count, const GLuint64EXT * value);
+  GLEE_EXTERN GLEEPFNGLUNIFORM2UI64VNVPROC GLeeFuncPtr_glUniform2ui64vNV;
+  #define glUniform2ui64vNV GLeeFuncPtr_glUniform2ui64vNV
+#endif
+#ifndef GLEE_H_DEFINED_glUniform3ui64vNV
+#define GLEE_H_DEFINED_glUniform3ui64vNV
+  typedef void (APIENTRYP GLEEPFNGLUNIFORM3UI64VNVPROC) (GLint  location, GLsizei  count, const GLuint64EXT * value);
+  GLEE_EXTERN GLEEPFNGLUNIFORM3UI64VNVPROC GLeeFuncPtr_glUniform3ui64vNV;
+  #define glUniform3ui64vNV GLeeFuncPtr_glUniform3ui64vNV
+#endif
+#ifndef GLEE_H_DEFINED_glUniform4ui64vNV
+#define GLEE_H_DEFINED_glUniform4ui64vNV
+  typedef void (APIENTRYP GLEEPFNGLUNIFORM4UI64VNVPROC) (GLint  location, GLsizei  count, const GLuint64EXT * value);
+  GLEE_EXTERN GLEEPFNGLUNIFORM4UI64VNVPROC GLeeFuncPtr_glUniform4ui64vNV;
+  #define glUniform4ui64vNV GLeeFuncPtr_glUniform4ui64vNV
+#endif
+#ifndef GLEE_H_DEFINED_glGetUniformi64vNV
+#define GLEE_H_DEFINED_glGetUniformi64vNV
+  typedef void (APIENTRYP GLEEPFNGLGETUNIFORMI64VNVPROC) (GLuint  program, GLint  location, GLint64EXT * params);
+  GLEE_EXTERN GLEEPFNGLGETUNIFORMI64VNVPROC GLeeFuncPtr_glGetUniformi64vNV;
+  #define glGetUniformi64vNV GLeeFuncPtr_glGetUniformi64vNV
+#endif
+#ifndef GLEE_H_DEFINED_glProgramUniform1i64NV
+#define GLEE_H_DEFINED_glProgramUniform1i64NV
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMUNIFORM1I64NVPROC) (GLuint  program, GLint  location, GLint64EXT  x);
+  GLEE_EXTERN GLEEPFNGLPROGRAMUNIFORM1I64NVPROC GLeeFuncPtr_glProgramUniform1i64NV;
+  #define glProgramUniform1i64NV GLeeFuncPtr_glProgramUniform1i64NV
+#endif
+#ifndef GLEE_H_DEFINED_glProgramUniform2i64NV
+#define GLEE_H_DEFINED_glProgramUniform2i64NV
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMUNIFORM2I64NVPROC) (GLuint  program, GLint  location, GLint64EXT  x, GLint64EXT  y);
+  GLEE_EXTERN GLEEPFNGLPROGRAMUNIFORM2I64NVPROC GLeeFuncPtr_glProgramUniform2i64NV;
+  #define glProgramUniform2i64NV GLeeFuncPtr_glProgramUniform2i64NV
+#endif
+#ifndef GLEE_H_DEFINED_glProgramUniform3i64NV
+#define GLEE_H_DEFINED_glProgramUniform3i64NV
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMUNIFORM3I64NVPROC) (GLuint  program, GLint  location, GLint64EXT  x, GLint64EXT  y, GLint64EXT  z);
+  GLEE_EXTERN GLEEPFNGLPROGRAMUNIFORM3I64NVPROC GLeeFuncPtr_glProgramUniform3i64NV;
+  #define glProgramUniform3i64NV GLeeFuncPtr_glProgramUniform3i64NV
+#endif
+#ifndef GLEE_H_DEFINED_glProgramUniform4i64NV
+#define GLEE_H_DEFINED_glProgramUniform4i64NV
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMUNIFORM4I64NVPROC) (GLuint  program, GLint  location, GLint64EXT  x, GLint64EXT  y, GLint64EXT  z, GLint64EXT  w);
+  GLEE_EXTERN GLEEPFNGLPROGRAMUNIFORM4I64NVPROC GLeeFuncPtr_glProgramUniform4i64NV;
+  #define glProgramUniform4i64NV GLeeFuncPtr_glProgramUniform4i64NV
+#endif
+#ifndef GLEE_H_DEFINED_glProgramUniform1i64vNV
+#define GLEE_H_DEFINED_glProgramUniform1i64vNV
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMUNIFORM1I64VNVPROC) (GLuint  program, GLint  location, GLsizei  count, const GLint64EXT * value);
+  GLEE_EXTERN GLEEPFNGLPROGRAMUNIFORM1I64VNVPROC GLeeFuncPtr_glProgramUniform1i64vNV;
+  #define glProgramUniform1i64vNV GLeeFuncPtr_glProgramUniform1i64vNV
+#endif
+#ifndef GLEE_H_DEFINED_glProgramUniform2i64vNV
+#define GLEE_H_DEFINED_glProgramUniform2i64vNV
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMUNIFORM2I64VNVPROC) (GLuint  program, GLint  location, GLsizei  count, const GLint64EXT * value);
+  GLEE_EXTERN GLEEPFNGLPROGRAMUNIFORM2I64VNVPROC GLeeFuncPtr_glProgramUniform2i64vNV;
+  #define glProgramUniform2i64vNV GLeeFuncPtr_glProgramUniform2i64vNV
+#endif
+#ifndef GLEE_H_DEFINED_glProgramUniform3i64vNV
+#define GLEE_H_DEFINED_glProgramUniform3i64vNV
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMUNIFORM3I64VNVPROC) (GLuint  program, GLint  location, GLsizei  count, const GLint64EXT * value);
+  GLEE_EXTERN GLEEPFNGLPROGRAMUNIFORM3I64VNVPROC GLeeFuncPtr_glProgramUniform3i64vNV;
+  #define glProgramUniform3i64vNV GLeeFuncPtr_glProgramUniform3i64vNV
+#endif
+#ifndef GLEE_H_DEFINED_glProgramUniform4i64vNV
+#define GLEE_H_DEFINED_glProgramUniform4i64vNV
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMUNIFORM4I64VNVPROC) (GLuint  program, GLint  location, GLsizei  count, const GLint64EXT * value);
+  GLEE_EXTERN GLEEPFNGLPROGRAMUNIFORM4I64VNVPROC GLeeFuncPtr_glProgramUniform4i64vNV;
+  #define glProgramUniform4i64vNV GLeeFuncPtr_glProgramUniform4i64vNV
+#endif
+#ifndef GLEE_H_DEFINED_glProgramUniform1ui64NV
+#define GLEE_H_DEFINED_glProgramUniform1ui64NV
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMUNIFORM1UI64NVPROC) (GLuint  program, GLint  location, GLuint64EXT  x);
+  GLEE_EXTERN GLEEPFNGLPROGRAMUNIFORM1UI64NVPROC GLeeFuncPtr_glProgramUniform1ui64NV;
+  #define glProgramUniform1ui64NV GLeeFuncPtr_glProgramUniform1ui64NV
+#endif
+#ifndef GLEE_H_DEFINED_glProgramUniform2ui64NV
+#define GLEE_H_DEFINED_glProgramUniform2ui64NV
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMUNIFORM2UI64NVPROC) (GLuint  program, GLint  location, GLuint64EXT  x, GLuint64EXT  y);
+  GLEE_EXTERN GLEEPFNGLPROGRAMUNIFORM2UI64NVPROC GLeeFuncPtr_glProgramUniform2ui64NV;
+  #define glProgramUniform2ui64NV GLeeFuncPtr_glProgramUniform2ui64NV
+#endif
+#ifndef GLEE_H_DEFINED_glProgramUniform3ui64NV
+#define GLEE_H_DEFINED_glProgramUniform3ui64NV
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMUNIFORM3UI64NVPROC) (GLuint  program, GLint  location, GLuint64EXT  x, GLuint64EXT  y, GLuint64EXT  z);
+  GLEE_EXTERN GLEEPFNGLPROGRAMUNIFORM3UI64NVPROC GLeeFuncPtr_glProgramUniform3ui64NV;
+  #define glProgramUniform3ui64NV GLeeFuncPtr_glProgramUniform3ui64NV
+#endif
+#ifndef GLEE_H_DEFINED_glProgramUniform4ui64NV
+#define GLEE_H_DEFINED_glProgramUniform4ui64NV
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMUNIFORM4UI64NVPROC) (GLuint  program, GLint  location, GLuint64EXT  x, GLuint64EXT  y, GLuint64EXT  z, GLuint64EXT  w);
+  GLEE_EXTERN GLEEPFNGLPROGRAMUNIFORM4UI64NVPROC GLeeFuncPtr_glProgramUniform4ui64NV;
+  #define glProgramUniform4ui64NV GLeeFuncPtr_glProgramUniform4ui64NV
+#endif
+#ifndef GLEE_H_DEFINED_glProgramUniform1ui64vNV
+#define GLEE_H_DEFINED_glProgramUniform1ui64vNV
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMUNIFORM1UI64VNVPROC) (GLuint  program, GLint  location, GLsizei  count, const GLuint64EXT * value);
+  GLEE_EXTERN GLEEPFNGLPROGRAMUNIFORM1UI64VNVPROC GLeeFuncPtr_glProgramUniform1ui64vNV;
+  #define glProgramUniform1ui64vNV GLeeFuncPtr_glProgramUniform1ui64vNV
+#endif
+#ifndef GLEE_H_DEFINED_glProgramUniform2ui64vNV
+#define GLEE_H_DEFINED_glProgramUniform2ui64vNV
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMUNIFORM2UI64VNVPROC) (GLuint  program, GLint  location, GLsizei  count, const GLuint64EXT * value);
+  GLEE_EXTERN GLEEPFNGLPROGRAMUNIFORM2UI64VNVPROC GLeeFuncPtr_glProgramUniform2ui64vNV;
+  #define glProgramUniform2ui64vNV GLeeFuncPtr_glProgramUniform2ui64vNV
+#endif
+#ifndef GLEE_H_DEFINED_glProgramUniform3ui64vNV
+#define GLEE_H_DEFINED_glProgramUniform3ui64vNV
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMUNIFORM3UI64VNVPROC) (GLuint  program, GLint  location, GLsizei  count, const GLuint64EXT * value);
+  GLEE_EXTERN GLEEPFNGLPROGRAMUNIFORM3UI64VNVPROC GLeeFuncPtr_glProgramUniform3ui64vNV;
+  #define glProgramUniform3ui64vNV GLeeFuncPtr_glProgramUniform3ui64vNV
+#endif
+#ifndef GLEE_H_DEFINED_glProgramUniform4ui64vNV
+#define GLEE_H_DEFINED_glProgramUniform4ui64vNV
+  typedef void (APIENTRYP GLEEPFNGLPROGRAMUNIFORM4UI64VNVPROC) (GLuint  program, GLint  location, GLsizei  count, const GLuint64EXT * value);
+  GLEE_EXTERN GLEEPFNGLPROGRAMUNIFORM4UI64VNVPROC GLeeFuncPtr_glProgramUniform4ui64vNV;
+  #define glProgramUniform4ui64vNV GLeeFuncPtr_glProgramUniform4ui64vNV
+#endif
+#endif 
+
+/* GL_NV_shader_buffer_store */
+
+#ifndef GL_NV_shader_buffer_store
+#define GL_NV_shader_buffer_store 1
+#define __GLEE_GL_NV_shader_buffer_store 1
+/* Constants */
+#define GL_SHADER_GLOBAL_ACCESS_BARRIER_BIT_NV             0x00000010
+#endif 
+
+/* GL_NV_tessellation_program5 */
+
+#ifndef GL_NV_tessellation_program5
+#define GL_NV_tessellation_program5 1
+#define __GLEE_GL_NV_tessellation_program5 1
+/* Constants */
+#define GL_MAX_PROGRAM_PATCH_ATTRIBS_NV                    0x86D8
+#define GL_TESS_CONTROL_PROGRAM_NV                         0x891E
+#define GL_TESS_EVALUATION_PROGRAM_NV                      0x891F
+#define GL_TESS_CONTROL_PROGRAM_PARAMETER_BUFFER_NV        0x8C74
+#define GL_TESS_EVALUATION_PROGRAM_PARAMETER_BUFFER_NV     0x8C75
+#endif 
+
+/* GL_NV_vertex_attrib_integer_64bit */
+
+#ifndef GL_NV_vertex_attrib_integer_64bit
+#define GL_NV_vertex_attrib_integer_64bit 1
+#define __GLEE_GL_NV_vertex_attrib_integer_64bit 1
+/* Constants */
+#ifndef GLEE_H_DEFINED_glVertexAttribL1i64NV
+#define GLEE_H_DEFINED_glVertexAttribL1i64NV
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIBL1I64NVPROC) (GLuint  index, GLint64EXT  x);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIBL1I64NVPROC GLeeFuncPtr_glVertexAttribL1i64NV;
+  #define glVertexAttribL1i64NV GLeeFuncPtr_glVertexAttribL1i64NV
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttribL2i64NV
+#define GLEE_H_DEFINED_glVertexAttribL2i64NV
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIBL2I64NVPROC) (GLuint  index, GLint64EXT  x, GLint64EXT  y);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIBL2I64NVPROC GLeeFuncPtr_glVertexAttribL2i64NV;
+  #define glVertexAttribL2i64NV GLeeFuncPtr_glVertexAttribL2i64NV
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttribL3i64NV
+#define GLEE_H_DEFINED_glVertexAttribL3i64NV
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIBL3I64NVPROC) (GLuint  index, GLint64EXT  x, GLint64EXT  y, GLint64EXT  z);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIBL3I64NVPROC GLeeFuncPtr_glVertexAttribL3i64NV;
+  #define glVertexAttribL3i64NV GLeeFuncPtr_glVertexAttribL3i64NV
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttribL4i64NV
+#define GLEE_H_DEFINED_glVertexAttribL4i64NV
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIBL4I64NVPROC) (GLuint  index, GLint64EXT  x, GLint64EXT  y, GLint64EXT  z, GLint64EXT  w);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIBL4I64NVPROC GLeeFuncPtr_glVertexAttribL4i64NV;
+  #define glVertexAttribL4i64NV GLeeFuncPtr_glVertexAttribL4i64NV
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttribL1i64vNV
+#define GLEE_H_DEFINED_glVertexAttribL1i64vNV
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIBL1I64VNVPROC) (GLuint  index, const GLint64EXT * v);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIBL1I64VNVPROC GLeeFuncPtr_glVertexAttribL1i64vNV;
+  #define glVertexAttribL1i64vNV GLeeFuncPtr_glVertexAttribL1i64vNV
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttribL2i64vNV
+#define GLEE_H_DEFINED_glVertexAttribL2i64vNV
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIBL2I64VNVPROC) (GLuint  index, const GLint64EXT * v);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIBL2I64VNVPROC GLeeFuncPtr_glVertexAttribL2i64vNV;
+  #define glVertexAttribL2i64vNV GLeeFuncPtr_glVertexAttribL2i64vNV
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttribL3i64vNV
+#define GLEE_H_DEFINED_glVertexAttribL3i64vNV
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIBL3I64VNVPROC) (GLuint  index, const GLint64EXT * v);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIBL3I64VNVPROC GLeeFuncPtr_glVertexAttribL3i64vNV;
+  #define glVertexAttribL3i64vNV GLeeFuncPtr_glVertexAttribL3i64vNV
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttribL4i64vNV
+#define GLEE_H_DEFINED_glVertexAttribL4i64vNV
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIBL4I64VNVPROC) (GLuint  index, const GLint64EXT * v);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIBL4I64VNVPROC GLeeFuncPtr_glVertexAttribL4i64vNV;
+  #define glVertexAttribL4i64vNV GLeeFuncPtr_glVertexAttribL4i64vNV
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttribL1ui64NV
+#define GLEE_H_DEFINED_glVertexAttribL1ui64NV
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIBL1UI64NVPROC) (GLuint  index, GLuint64EXT  x);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIBL1UI64NVPROC GLeeFuncPtr_glVertexAttribL1ui64NV;
+  #define glVertexAttribL1ui64NV GLeeFuncPtr_glVertexAttribL1ui64NV
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttribL2ui64NV
+#define GLEE_H_DEFINED_glVertexAttribL2ui64NV
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIBL2UI64NVPROC) (GLuint  index, GLuint64EXT  x, GLuint64EXT  y);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIBL2UI64NVPROC GLeeFuncPtr_glVertexAttribL2ui64NV;
+  #define glVertexAttribL2ui64NV GLeeFuncPtr_glVertexAttribL2ui64NV
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttribL3ui64NV
+#define GLEE_H_DEFINED_glVertexAttribL3ui64NV
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIBL3UI64NVPROC) (GLuint  index, GLuint64EXT  x, GLuint64EXT  y, GLuint64EXT  z);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIBL3UI64NVPROC GLeeFuncPtr_glVertexAttribL3ui64NV;
+  #define glVertexAttribL3ui64NV GLeeFuncPtr_glVertexAttribL3ui64NV
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttribL4ui64NV
+#define GLEE_H_DEFINED_glVertexAttribL4ui64NV
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIBL4UI64NVPROC) (GLuint  index, GLuint64EXT  x, GLuint64EXT  y, GLuint64EXT  z, GLuint64EXT  w);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIBL4UI64NVPROC GLeeFuncPtr_glVertexAttribL4ui64NV;
+  #define glVertexAttribL4ui64NV GLeeFuncPtr_glVertexAttribL4ui64NV
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttribL1ui64vNV
+#define GLEE_H_DEFINED_glVertexAttribL1ui64vNV
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIBL1UI64VNVPROC) (GLuint  index, const GLuint64EXT * v);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIBL1UI64VNVPROC GLeeFuncPtr_glVertexAttribL1ui64vNV;
+  #define glVertexAttribL1ui64vNV GLeeFuncPtr_glVertexAttribL1ui64vNV
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttribL2ui64vNV
+#define GLEE_H_DEFINED_glVertexAttribL2ui64vNV
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIBL2UI64VNVPROC) (GLuint  index, const GLuint64EXT * v);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIBL2UI64VNVPROC GLeeFuncPtr_glVertexAttribL2ui64vNV;
+  #define glVertexAttribL2ui64vNV GLeeFuncPtr_glVertexAttribL2ui64vNV
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttribL3ui64vNV
+#define GLEE_H_DEFINED_glVertexAttribL3ui64vNV
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIBL3UI64VNVPROC) (GLuint  index, const GLuint64EXT * v);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIBL3UI64VNVPROC GLeeFuncPtr_glVertexAttribL3ui64vNV;
+  #define glVertexAttribL3ui64vNV GLeeFuncPtr_glVertexAttribL3ui64vNV
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttribL4ui64vNV
+#define GLEE_H_DEFINED_glVertexAttribL4ui64vNV
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIBL4UI64VNVPROC) (GLuint  index, const GLuint64EXT * v);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIBL4UI64VNVPROC GLeeFuncPtr_glVertexAttribL4ui64vNV;
+  #define glVertexAttribL4ui64vNV GLeeFuncPtr_glVertexAttribL4ui64vNV
+#endif
+#ifndef GLEE_H_DEFINED_glGetVertexAttribLi64vNV
+#define GLEE_H_DEFINED_glGetVertexAttribLi64vNV
+  typedef void (APIENTRYP GLEEPFNGLGETVERTEXATTRIBLI64VNVPROC) (GLuint  index, GLenum  pname, GLint64EXT * params);
+  GLEE_EXTERN GLEEPFNGLGETVERTEXATTRIBLI64VNVPROC GLeeFuncPtr_glGetVertexAttribLi64vNV;
+  #define glGetVertexAttribLi64vNV GLeeFuncPtr_glGetVertexAttribLi64vNV
+#endif
+#ifndef GLEE_H_DEFINED_glGetVertexAttribLui64vNV
+#define GLEE_H_DEFINED_glGetVertexAttribLui64vNV
+  typedef void (APIENTRYP GLEEPFNGLGETVERTEXATTRIBLUI64VNVPROC) (GLuint  index, GLenum  pname, GLuint64EXT * params);
+  GLEE_EXTERN GLEEPFNGLGETVERTEXATTRIBLUI64VNVPROC GLeeFuncPtr_glGetVertexAttribLui64vNV;
+  #define glGetVertexAttribLui64vNV GLeeFuncPtr_glGetVertexAttribLui64vNV
+#endif
+#ifndef GLEE_H_DEFINED_glVertexAttribLFormatNV
+#define GLEE_H_DEFINED_glVertexAttribLFormatNV
+  typedef void (APIENTRYP GLEEPFNGLVERTEXATTRIBLFORMATNVPROC) (GLuint  index, GLint  size, GLenum  type, GLsizei  stride);
+  GLEE_EXTERN GLEEPFNGLVERTEXATTRIBLFORMATNVPROC GLeeFuncPtr_glVertexAttribLFormatNV;
+  #define glVertexAttribLFormatNV GLeeFuncPtr_glVertexAttribLFormatNV
+#endif
+#endif 
+
+/* GL_NV_multisample_coverage */
+
+#ifndef GL_NV_multisample_coverage
+#define GL_NV_multisample_coverage 1
+#define __GLEE_GL_NV_multisample_coverage 1
+/* Constants */
+#define GL_COVERAGE_SAMPLES_NV                             0x80A9
+#define GL_COLOR_SAMPLES_NV                                0x8E20
+#endif 
+
+/* GL_AMD_name_gen_delete */
+
+#ifndef GL_AMD_name_gen_delete
+#define GL_AMD_name_gen_delete 1
+#define __GLEE_GL_AMD_name_gen_delete 1
+/* Constants */
+#define GL_DATA_BUFFER_AMD                                 0x9151
+#define GL_PERFORMANCE_MONITOR_AMD                         0x9152
+#define GL_QUERY_OBJECT_AMD                                0x9153
+#define GL_VERTEX_ARRAY_OBJECT_AMD                         0x9154
+#define GL_SAMPLER_OBJECT_AMD                              0x9155
+#ifndef GLEE_H_DEFINED_glGenNamesAMD
+#define GLEE_H_DEFINED_glGenNamesAMD
+  typedef void (APIENTRYP GLEEPFNGLGENNAMESAMDPROC) (GLenum  identifier, GLuint  num, GLuint * names);
+  GLEE_EXTERN GLEEPFNGLGENNAMESAMDPROC GLeeFuncPtr_glGenNamesAMD;
+  #define glGenNamesAMD GLeeFuncPtr_glGenNamesAMD
+#endif
+#ifndef GLEE_H_DEFINED_glDeleteNamesAMD
+#define GLEE_H_DEFINED_glDeleteNamesAMD
+  typedef void (APIENTRYP GLEEPFNGLDELETENAMESAMDPROC) (GLenum  identifier, GLuint  num, const GLuint * names);
+  GLEE_EXTERN GLEEPFNGLDELETENAMESAMDPROC GLeeFuncPtr_glDeleteNamesAMD;
+  #define glDeleteNamesAMD GLeeFuncPtr_glDeleteNamesAMD
+#endif
+#ifndef GLEE_H_DEFINED_glIsNameAMD
+#define GLEE_H_DEFINED_glIsNameAMD
+  typedef GLboolean (APIENTRYP GLEEPFNGLISNAMEAMDPROC) (GLenum  identifier, GLuint  name);
+  GLEE_EXTERN GLEEPFNGLISNAMEAMDPROC GLeeFuncPtr_glIsNameAMD;
+  #define glIsNameAMD GLeeFuncPtr_glIsNameAMD
+#endif
+#endif 
+
+/* GL_AMD_transform_feedback3_lines_triangles */
+
+#ifndef GL_AMD_transform_feedback3_lines_triangles
+#define GL_AMD_transform_feedback3_lines_triangles 1
+#define __GLEE_GL_AMD_transform_feedback3_lines_triangles 1
+/* Constants */
+#endif 
+
+/* GL_AMD_depth_clamp_separate */
+
+#ifndef GL_AMD_depth_clamp_separate
+#define GL_AMD_depth_clamp_separate 1
+#define __GLEE_GL_AMD_depth_clamp_separate 1
+/* Constants */
+#define GL_DEPTH_CLAMP_NEAR_AMD                            0x901E
+#define GL_DEPTH_CLAMP_FAR_AMD                             0x901F
+#endif 
+
+/* GL_EXT_texture_sRGB_decode */
+
+#ifndef GL_EXT_texture_sRGB_decode
+#define GL_EXT_texture_sRGB_decode 1
+#define __GLEE_GL_EXT_texture_sRGB_decode 1
+/* Constants */
+#define GL_TEXTURE_SRGB_DECODE_EXT                         0x8A48
+#define GL_DECODE_EXT                                      0x8A49
+#define GL_SKIP_DECODE_EXT                                 0x8A4A
+#endif 
+
+/* GL_NV_texture_multisample */
+
+#ifndef GL_NV_texture_multisample
+#define GL_NV_texture_multisample 1
+#define __GLEE_GL_NV_texture_multisample 1
+/* Constants */
+#define GL_TEXTURE_COVERAGE_SAMPLES_NV                     0x9045
+#define GL_TEXTURE_COLOR_SAMPLES_NV                        0x9046
+#ifndef GLEE_H_DEFINED_glTexImage2DMultisampleCoverageNV
+#define GLEE_H_DEFINED_glTexImage2DMultisampleCoverageNV
+  typedef void (APIENTRYP GLEEPFNGLTEXIMAGE2DMULTISAMPLECOVERAGENVPROC) (GLenum  target, GLsizei  coverageSamples, GLsizei  colorSamples, GLint  internalFormat, GLsizei  width, GLsizei  height, GLboolean  fixedSampleLocations);
+  GLEE_EXTERN GLEEPFNGLTEXIMAGE2DMULTISAMPLECOVERAGENVPROC GLeeFuncPtr_glTexImage2DMultisampleCoverageNV;
+  #define glTexImage2DMultisampleCoverageNV GLeeFuncPtr_glTexImage2DMultisampleCoverageNV
+#endif
+#ifndef GLEE_H_DEFINED_glTexImage3DMultisampleCoverageNV
+#define GLEE_H_DEFINED_glTexImage3DMultisampleCoverageNV
+  typedef void (APIENTRYP GLEEPFNGLTEXIMAGE3DMULTISAMPLECOVERAGENVPROC) (GLenum  target, GLsizei  coverageSamples, GLsizei  colorSamples, GLint  internalFormat, GLsizei  width, GLsizei  height, GLsizei  depth, GLboolean  fixedSampleLocations);
+  GLEE_EXTERN GLEEPFNGLTEXIMAGE3DMULTISAMPLECOVERAGENVPROC GLeeFuncPtr_glTexImage3DMultisampleCoverageNV;
+  #define glTexImage3DMultisampleCoverageNV GLeeFuncPtr_glTexImage3DMultisampleCoverageNV
+#endif
+#ifndef GLEE_H_DEFINED_glTextureImage2DMultisampleNV
+#define GLEE_H_DEFINED_glTextureImage2DMultisampleNV
+  typedef void (APIENTRYP GLEEPFNGLTEXTUREIMAGE2DMULTISAMPLENVPROC) (GLuint  texture, GLenum  target, GLsizei  samples, GLint  internalFormat, GLsizei  width, GLsizei  height, GLboolean  fixedSampleLocations);
+  GLEE_EXTERN GLEEPFNGLTEXTUREIMAGE2DMULTISAMPLENVPROC GLeeFuncPtr_glTextureImage2DMultisampleNV;
+  #define glTextureImage2DMultisampleNV GLeeFuncPtr_glTextureImage2DMultisampleNV
+#endif
+#ifndef GLEE_H_DEFINED_glTextureImage3DMultisampleNV
+#define GLEE_H_DEFINED_glTextureImage3DMultisampleNV
+  typedef void (APIENTRYP GLEEPFNGLTEXTUREIMAGE3DMULTISAMPLENVPROC) (GLuint  texture, GLenum  target, GLsizei  samples, GLint  internalFormat, GLsizei  width, GLsizei  height, GLsizei  depth, GLboolean  fixedSampleLocations);
+  GLEE_EXTERN GLEEPFNGLTEXTUREIMAGE3DMULTISAMPLENVPROC GLeeFuncPtr_glTextureImage3DMultisampleNV;
+  #define glTextureImage3DMultisampleNV GLeeFuncPtr_glTextureImage3DMultisampleNV
+#endif
+#ifndef GLEE_H_DEFINED_glTextureImage2DMultisampleCoverageNV
+#define GLEE_H_DEFINED_glTextureImage2DMultisampleCoverageNV
+  typedef void (APIENTRYP GLEEPFNGLTEXTUREIMAGE2DMULTISAMPLECOVERAGENVPROC) (GLuint  texture, GLenum  target, GLsizei  coverageSamples, GLsizei  colorSamples, GLint  internalFormat, GLsizei  width, GLsizei  height, GLboolean  fixedSampleLocations);
+  GLEE_EXTERN GLEEPFNGLTEXTUREIMAGE2DMULTISAMPLECOVERAGENVPROC GLeeFuncPtr_glTextureImage2DMultisampleCoverageNV;
+  #define glTextureImage2DMultisampleCoverageNV GLeeFuncPtr_glTextureImage2DMultisampleCoverageNV
+#endif
+#ifndef GLEE_H_DEFINED_glTextureImage3DMultisampleCoverageNV
+#define GLEE_H_DEFINED_glTextureImage3DMultisampleCoverageNV
+  typedef void (APIENTRYP GLEEPFNGLTEXTUREIMAGE3DMULTISAMPLECOVERAGENVPROC) (GLuint  texture, GLenum  target, GLsizei  coverageSamples, GLsizei  colorSamples, GLint  internalFormat, GLsizei  width, GLsizei  height, GLsizei  depth, GLboolean  fixedSampleLocations);
+  GLEE_EXTERN GLEEPFNGLTEXTUREIMAGE3DMULTISAMPLECOVERAGENVPROC GLeeFuncPtr_glTextureImage3DMultisampleCoverageNV;
+  #define glTextureImage3DMultisampleCoverageNV GLeeFuncPtr_glTextureImage3DMultisampleCoverageNV
+#endif
+#endif 
+
+/* GL_AMD_blend_minmax_factor */
+
+#ifndef GL_AMD_blend_minmax_factor
+#define GL_AMD_blend_minmax_factor 1
+#define __GLEE_GL_AMD_blend_minmax_factor 1
+/* Constants */
+#define GL_FACTOR_MIN_AMD                                  0x901C
+#define GL_FACTOR_MAX_AMD                                  0x901D
+#endif 
+
+/* GL_AMD_sample_positions */
+
+#ifndef GL_AMD_sample_positions
+#define GL_AMD_sample_positions 1
+#define __GLEE_GL_AMD_sample_positions 1
+/* Constants */
+#define GL_SUBSAMPLE_DISTANCE_AMD                          0x883F
+#ifndef GLEE_H_DEFINED_glSetMultisamplefvAMD
+#define GLEE_H_DEFINED_glSetMultisamplefvAMD
+  typedef void (APIENTRYP GLEEPFNGLSETMULTISAMPLEFVAMDPROC) (GLenum  pname, GLuint  index, const GLfloat * val);
+  GLEE_EXTERN GLEEPFNGLSETMULTISAMPLEFVAMDPROC GLeeFuncPtr_glSetMultisamplefvAMD;
+  #define glSetMultisamplefvAMD GLeeFuncPtr_glSetMultisamplefvAMD
+#endif
+#endif 
+
+/* GL_EXT_x11_sync_object */
+
+#ifndef GL_EXT_x11_sync_object
+#define GL_EXT_x11_sync_object 1
+#define __GLEE_GL_EXT_x11_sync_object 1
+/* Constants */
+#define GL_SYNC_X11_FENCE_EXT                              0x90E1
+#ifndef GLEE_H_DEFINED_glImportSyncEXT
+#define GLEE_H_DEFINED_glImportSyncEXT
+  typedef GLsync (APIENTRYP GLEEPFNGLIMPORTSYNCEXTPROC) (GLenum  external_sync_type, GLintptr  external_sync, GLbitfield  flags);
+  GLEE_EXTERN GLEEPFNGLIMPORTSYNCEXTPROC GLeeFuncPtr_glImportSyncEXT;
+  #define glImportSyncEXT GLeeFuncPtr_glImportSyncEXT
+#endif
+#endif 
+
+/* GL_AMD_multi_draw_indirect */
+
+#ifndef GL_AMD_multi_draw_indirect
+#define GL_AMD_multi_draw_indirect 1
+#define __GLEE_GL_AMD_multi_draw_indirect 1
+/* Constants */
+#ifndef GLEE_H_DEFINED_glMultiDrawArraysIndirectAMD
+#define GLEE_H_DEFINED_glMultiDrawArraysIndirectAMD
+  typedef void (APIENTRYP GLEEPFNGLMULTIDRAWARRAYSINDIRECTAMDPROC) (GLenum  mode, const GLvoid * indirect, GLsizei  primcount, GLsizei  stride);
+  GLEE_EXTERN GLEEPFNGLMULTIDRAWARRAYSINDIRECTAMDPROC GLeeFuncPtr_glMultiDrawArraysIndirectAMD;
+  #define glMultiDrawArraysIndirectAMD GLeeFuncPtr_glMultiDrawArraysIndirectAMD
+#endif
+#ifndef GLEE_H_DEFINED_glMultiDrawElementsIndirectAMD
+#define GLEE_H_DEFINED_glMultiDrawElementsIndirectAMD
+  typedef void (APIENTRYP GLEEPFNGLMULTIDRAWELEMENTSINDIRECTAMDPROC) (GLenum  mode, GLenum  type, const GLvoid * indirect, GLsizei  primcount, GLsizei  stride);
+  GLEE_EXTERN GLEEPFNGLMULTIDRAWELEMENTSINDIRECTAMDPROC GLeeFuncPtr_glMultiDrawElementsIndirectAMD;
+  #define glMultiDrawElementsIndirectAMD GLeeFuncPtr_glMultiDrawElementsIndirectAMD
+#endif
+#endif 
+
+/* GL_EXT_framebuffer_multisample_blit_scaled */
+
+#ifndef GL_EXT_framebuffer_multisample_blit_scaled
+#define GL_EXT_framebuffer_multisample_blit_scaled 1
+#define __GLEE_GL_EXT_framebuffer_multisample_blit_scaled 1
+/* Constants */
+#define GL_SCALED_RESOLVE_FASTEST_EXT                      0x90BA
+#define GL_SCALED_RESOLVE_NICEST_EXT                       0x90BB
+#endif 
+
+/* GL_SGIX_texture_select */
+
+#ifndef GL_SGIX_texture_select
+#define GL_SGIX_texture_select 1
+#define __GLEE_GL_SGIX_texture_select 1
+/* Constants */
+#endif 
+
+/* GL_INGR_blend_func_separate */
+
+#ifndef GL_INGR_blend_func_separate
+#define GL_INGR_blend_func_separate 1
+#define __GLEE_GL_INGR_blend_func_separate 1
+/* Constants */
+#ifndef GLEE_H_DEFINED_glBlendFuncSeparateINGR
+#define GLEE_H_DEFINED_glBlendFuncSeparateINGR
+  typedef void (APIENTRYP GLEEPFNGLBLENDFUNCSEPARATEINGRPROC) (GLenum  sfactorRGB, GLenum  dfactorRGB, GLenum  sfactorAlpha, GLenum  dfactorAlpha);
+  GLEE_EXTERN GLEEPFNGLBLENDFUNCSEPARATEINGRPROC GLeeFuncPtr_glBlendFuncSeparateINGR;
+  #define glBlendFuncSeparateINGR GLeeFuncPtr_glBlendFuncSeparateINGR
+#endif
+#endif 
+
+/* GL_SGIX_depth_pass_instrument */
+
+#ifndef GL_SGIX_depth_pass_instrument
+#define GL_SGIX_depth_pass_instrument 1
+#define __GLEE_GL_SGIX_depth_pass_instrument 1
+/* Constants */
+#endif 
+
+/* GL_SGIX_igloo_interface */
+
+#ifndef GL_SGIX_igloo_interface
+#define GL_SGIX_igloo_interface 1
+#define __GLEE_GL_SGIX_igloo_interface 1
+/* Constants */
+#ifndef GLEE_H_DEFINED_glIglooInterfaceSGIX
+#define GLEE_H_DEFINED_glIglooInterfaceSGIX
+  typedef void (APIENTRYP GLEEPFNGLIGLOOINTERFACESGIXPROC) (GLenum  pname, const GLvoid * params);
+  GLEE_EXTERN GLEEPFNGLIGLOOINTERFACESGIXPROC GLeeFuncPtr_glIglooInterfaceSGIX;
+  #define glIglooInterfaceSGIX GLeeFuncPtr_glIglooInterfaceSGIX
+#endif
+#endif 
+
+/* GL_OES_compressed_paletted_texture */
+
+#ifndef GL_OES_compressed_paletted_texture
+#define GL_OES_compressed_paletted_texture 1
+#define __GLEE_GL_OES_compressed_paletted_texture 1
+/* Constants */
+#define GL_PALETTE4_RGB8_OES                               0x8B90
+#define GL_PALETTE4_RGBA8_OES                              0x8B91
+#define GL_PALETTE4_R5_G6_B5_OES                           0x8B92
+#define GL_PALETTE4_RGBA4_OES                              0x8B93
+#define GL_PALETTE4_RGB5_A1_OES                            0x8B94
+#define GL_PALETTE8_RGB8_OES                               0x8B95
+#define GL_PALETTE8_RGBA8_OES                              0x8B96
+#define GL_PALETTE8_R5_G6_B5_OES                           0x8B97
+#define GL_PALETTE8_RGBA4_OES                              0x8B98
+#define GL_PALETTE8_RGB5_A1_OES                            0x8B99
+#endif 
+
+/* GL_OES_fixed_point */
+
+#ifndef GL_OES_fixed_point
+#define GL_OES_fixed_point 1
+#define __GLEE_GL_OES_fixed_point 1
+/* Constants */
+#define GL_FIXED_OES                                       0x140C
+#endif 
+
+/* GL_OES_single_precision */
+
+#ifndef GL_OES_single_precision
+#define GL_OES_single_precision 1
+#define __GLEE_GL_OES_single_precision 1
+/* Constants */
+#ifndef GLEE_H_DEFINED_glClearDepthfOES
+#define GLEE_H_DEFINED_glClearDepthfOES
+  typedef GLvoid (APIENTRYP GLEEPFNGLCLEARDEPTHFOESPROC) (GLclampd depth);
+  GLEE_EXTERN GLEEPFNGLCLEARDEPTHFOESPROC GLeeFuncPtr_glClearDepthfOES;
+  #define glClearDepthfOES GLeeFuncPtr_glClearDepthfOES
+#endif
+#endif 
+
+/* GL_OES_query_matrix */
+
+#ifndef GL_OES_query_matrix
+#define GL_OES_query_matrix 1
+#define __GLEE_GL_OES_query_matrix 1
+/* Constants */
+#endif 
+
+/* GL_OES_byte_coordinates */
+
+#ifndef GL_OES_byte_coordinates
+#define GL_OES_byte_coordinates 1
+#define __GLEE_GL_OES_byte_coordinates 1
+/* Constants */
+#define GL_BYTE                                            0x1400
+#endif 
+
+/* GL_NV_gpu_program4 */
+
+#ifndef GL_NV_gpu_program4
+#define GL_NV_gpu_program4 1
+#define __GLEE_GL_NV_gpu_program4 1
+/* Constants */
+#define GL_MIN_PROGRAM_TEXEL_OFFSET_EXT                    0x8904
+#define GL_MAX_PROGRAM_TEXEL_OFFSET_EXT                    0x8905
+#define GL_PROGRAM_ATTRIB_COMPONENTS_NV                    0x8906
+#define GL_PROGRAM_RESULT_COMPONENTS_NV                    0x8907
+#define GL_MAX_PROGRAM_ATTRIB_COMPONENTS_NV                0x8908
+#define GL_MAX_PROGRAM_RESULT_COMPONENTS_NV                0x8909
+#define GL_MAX_PROGRAM_GENERIC_ATTRIBS_NV                  0x8DA5
+#define GL_MAX_PROGRAM_GENERIC_RESULTS_NV                  0x8DA6
+#define GL_GEOMETRY_PROGRAM_NV                             0x8C26
+#define GL_MAX_PROGRAM_OUTPUT_VERTICES_NV                  0x8C27
+#define GL_MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV          0x8C28
+#define GL_GEOMETRY_VERTICES_OUT_EXT                       0x8DDA
+#define GL_GEOMETRY_INPUT_TYPE_EXT                         0x8DDB
+#define GL_GEOMETRY_OUTPUT_TYPE_EXT                        0x8DDC
+#define GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT            0x8C29
+#define GL_LINES_ADJACENCY_EXT                             0xA
+#define GL_LINE_STRIP_ADJACENCY_EXT                        0xB
+#define GL_TRIANGLES_ADJACENCY_EXT                         0xC
+#define GL_TRIANGLE_STRIP_ADJACENCY_EXT                    0xD
+#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT        0x8DA8
+#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT          0x8DA9
+#define GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT              0x8DA7
+#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT        0x8CD4
+#define GL_PROGRAM_POINT_SIZE_EXT                          0x8642
+#define GL_VERTEX_ATTRIB_ARRAY_INTEGER_EXT                 0x88FD
+#endif 
+
+/* GL_NV_path_rendering */
+
+#ifndef GL_NV_path_rendering
+#define GL_NV_path_rendering 1
+#define __GLEE_GL_NV_path_rendering 1
+/* Constants */
+#define GL_CLOSE_PATH_NV                                   0x00
+#define GL_MOVE_TO_NV                                      0x02
+#define GL_RELATIVE_MOVE_TO_NV                             0x03
+#define GL_LINE_TO_NV                                      0x04
+#define GL_RELATIVE_LINE_TO_NV                             0x05
+#define GL_HORIZONTAL_LINE_TO_NV                           0x06
+#define GL_RELATIVE_HORIZONTAL_LINE_TO_NV                  0x07
+#define GL_VERTICAL_LINE_TO_NV                             0x08
+#define GL_RELATIVE_VERTICAL_LINE_TO_NV                    0x09
+#define GL_QUADRATIC_CURVE_TO_NV                           0x0A
+#define GL_RELATIVE_QUADRATIC_CURVE_TO_NV                  0x0B
+#define GL_CUBIC_CURVE_TO_NV                               0x0C
+#define GL_RELATIVE_CUBIC_CURVE_TO_NV                      0x0D
+#define GL_SMOOTH_QUADRATIC_CURVE_TO_NV                    0x0E
+#define GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV           0x0F
+#define GL_SMOOTH_CUBIC_CURVE_TO_NV                        0x10
+#define GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV               0x11
+#define GL_SMALL_CCW_ARC_TO_NV                             0x12
+#define GL_RELATIVE_SMALL_CCW_ARC_TO_NV                    0x13
+#define GL_SMALL_CW_ARC_TO_NV                              0x14
+#define GL_RELATIVE_SMALL_CW_ARC_TO_NV                     0x15
+#define GL_LARGE_CCW_ARC_TO_NV                             0x16
+#define GL_RELATIVE_LARGE_CCW_ARC_TO_NV                    0x17
+#define GL_LARGE_CW_ARC_TO_NV                              0x18
+#define GL_RELATIVE_LARGE_CW_ARC_TO_NV                     0x19
+#define GL_RESTART_PATH_NV                                 0xF0
+#define GL_DUP_FIRST_CUBIC_CURVE_TO_NV                     0xF2
+#define GL_DUP_LAST_CUBIC_CURVE_TO_NV                      0xF4
+#define GL_RECT_NV                                         0xF6
+#define GL_CIRCULAR_CCW_ARC_TO_NV                          0xF8
+#define GL_CIRCULAR_CW_ARC_TO_NV                           0xFA
+#define GL_CIRCULAR_TANGENT_ARC_TO_NV                      0xFC
+#define GL_ARC_TO_NV                                       0xFE
+#define GL_RELATIVE_ARC_TO_NV                              0xFF
+#define GL_PATH_FORMAT_SVG_NV                              0x9070
+#define GL_PATH_FORMAT_PS_NV                               0x9071
+#define GL_STANDARD_FONT_NAME_NV                           0x9072
+#define GL_SYSTEM_FONT_NAME_NV                             0x9073
+#define GL_FILE_NAME_NV                                    0x9074
+#define GL_SKIP_MISSING_GLYPH_NV                           0x90A9
+#define GL_USE_MISSING_GLYPH_NV                            0x90AA
+#define GL_PATH_STROKE_WIDTH_NV                            0x9075
+#define GL_PATH_INITIAL_END_CAP_NV                         0x9077
+#define GL_PATH_TERMINAL_END_CAP_NV                        0x9078
+#define GL_PATH_JOIN_STYLE_NV                              0x9079
+#define GL_PATH_MITER_LIMIT_NV                             0x907A
+#define GL_PATH_INITIAL_DASH_CAP_NV                        0x907C
+#define GL_PATH_TERMINAL_DASH_CAP_NV                       0x907D
+#define GL_PATH_DASH_OFFSET_NV                             0x907E
+#define GL_PATH_CLIENT_LENGTH_NV                           0x907F
+#define GL_PATH_DASH_OFFSET_RESET_NV                       0x90B4
+#define GL_PATH_FILL_MODE_NV                               0x9080
+#define GL_PATH_FILL_MASK_NV                               0x9081
+#define GL_PATH_FILL_COVER_MODE_NV                         0x9082
+#define GL_PATH_STROKE_COVER_MODE_NV                       0x9083
+#define GL_PATH_STROKE_MASK_NV                             0x9084
+#define GL_PATH_END_CAPS_NV                                0x9076
+#define GL_PATH_DASH_CAPS_NV                               0x907B
+#define GL_COUNT_UP_NV                                     0x9088
+#define GL_COUNT_DOWN_NV                                   0x9089
+#define GL_PRIMARY_COLOR                                   0x8577
+#define GL_PRIMARY_COLOR_NV                                0x852C
+#define GL_SECONDARY_COLOR_NV                              0x852D
+#define GL_PATH_OBJECT_BOUNDING_BOX_NV                     0x908A
+#define GL_CONVEX_HULL_NV                                  0x908B
+#define GL_BOUNDING_BOX_NV                                 0x908D
+#define GL_TRANSLATE_X_NV                                  0x908E
+#define GL_TRANSLATE_Y_NV                                  0x908F
+#define GL_TRANSLATE_2D_NV                                 0x9090
+#define GL_TRANSLATE_3D_NV                                 0x9091
+#define GL_AFFINE_2D_NV                                    0x9092
+#define GL_AFFINE_3D_NV                                    0x9094
+#define GL_TRANSPOSE_AFFINE_2D_NV                          0x9096
+#define GL_TRANSPOSE_AFFINE_3D_NV                          0x9098
+#define GL_UTF8_NV                                         0x909A
+#define GL_UTF16_NV                                        0x909B
+#define GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV               0x909C
+#define GL_PATH_COMMAND_COUNT_NV                           0x909D
+#define GL_PATH_COORD_COUNT_NV                             0x909E
+#define GL_PATH_DASH_ARRAY_COUNT_NV                        0x909F
+#define GL_PATH_COMPUTED_LENGTH_NV                         0x90A0
+#define GL_PATH_FILL_BOUNDING_BOX_NV                       0x90A1
+#define GL_PATH_STROKE_BOUNDING_BOX_NV                     0x90A2
+#define GL_SQUARE_NV                                       0x90A3
+#define GL_ROUND_NV                                        0x90A4
+#define GL_TRIANGULAR_NV                                   0x90A5
+#define GL_BEVEL_NV                                        0x90A6
+#define GL_MITER_REVERT_NV                                 0x90A7
+#define GL_MITER_TRUNCATE_NV                               0x90A8
+#define GL_MOVE_TO_RESETS_NV                               0x90B5
+#define GL_MOVE_TO_CONTINUES_NV                            0x90B6
+#define GL_BOLD_BIT_NV                                     0x01
+#define GL_ITALIC_BIT_NV                                   0x02
+#define GL_PATH_ERROR_POSITION_NV                          0x90AB
+#define GL_PATH_FOG_GEN_MODE_NV                            0x90AC
+#define GL_PATH_STENCIL_FUNC_NV                            0x90B7
+#define GL_PATH_STENCIL_REF_NV                             0x90B8
+#define GL_PATH_STENCIL_VALUE_MASK_NV                      0x90B9
+#define GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV             0x90BD
+#define GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV              0x90BE
+#define GL_PATH_COVER_DEPTH_FUNC_NV                        0x90BF
+#define GL_GLYPH_WIDTH_BIT_NV                              0x01
+#define GL_GLYPH_HEIGHT_BIT_NV                             0x02
+#define GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV               0x04
+#define GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV               0x08
+#define GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV         0x10
+#define GL_GLYPH_VERTICAL_BEARING_X_BIT_NV                 0x20
+#define GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV                 0x40
+#define GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV           0x80
+#define GL_GLYPH_HAS_KERNING_NV                            0x100
+#define GL_FONT_X_MIN_BOUNDS_NV                            0x00010000
+#define GL_FONT_Y_MIN_BOUNDS_NV                            0x00020000
+#define GL_FONT_X_MAX_BOUNDS_NV                            0x00040000
+#define GL_FONT_Y_MAX_BOUNDS_NV                            0x00080000
+#define GL_FONT_UNITS_PER_EM_NV                            0x00100000
+#define GL_FONT_ASCENDER_NV                                0x00200000
+#define GL_FONT_DESCENDER_NV                               0x00400000
+#define GL_FONT_HEIGHT_NV                                  0x00800000
+#define GL_FONT_MAX_ADVANCE_WIDTH_NV                       0x01000000
+#define GL_FONT_MAX_ADVANCE_HEIGHT_NV                      0x02000000
+#define GL_FONT_UNDERLINE_POSITION_NV                      0x04000000
+#define GL_FONT_UNDERLINE_THICKNESS_NV                     0x08000000
+#define GL_FONT_HAS_KERNING_NV                             0x10000000
+#define GL_ACCUM_ADJACENT_PAIRS_NV                         0x90AD
+#define GL_ADJACENT_PAIRS_NV                               0x90AE
+#define GL_FIRST_TO_REST_NV                                0x90AF
+#define GL_PATH_GEN_MODE_NV                                0x90B0
+#define GL_PATH_GEN_COEFF_NV                               0x90B1
+#define GL_PATH_GEN_COLOR_FORMAT_NV                        0x90B2
+#define GL_PATH_GEN_COMPONENTS_NV                          0x90B3
+#endif 
+
+/* GL_AMD_vertex_shader_tessellator */
+
+#ifndef GL_AMD_vertex_shader_tessellator
+#define GL_AMD_vertex_shader_tessellator 1
+#define __GLEE_GL_AMD_vertex_shader_tessellator 1
+/* Constants */
+#define GL_SAMPLER_BUFFER_AMD                              0x9001
+#define GL_INT_SAMPLER_BUFFER_AMD                          0x9002
+#define GL_UNSIGNED_INT_SAMPLER_BUFFER_AMD                 0x9003
+#define GL_DISCRETE_AMD                                    0x9006
+#define GL_CONTINUOUS_AMD                                  0x9007
+#define GL_TESSELLATION_MODE_AMD                           0x9004
+#define GL_TESSELLATION_FACTOR_AMD                         0x9005
+#ifndef GLEE_H_DEFINED_glTessellationModeAMD
+#define GLEE_H_DEFINED_glTessellationModeAMD
+  typedef GLvoid (APIENTRYP GLEEPFNGLTESSELLATIONMODEAMDPROC) (GLenum mode);
+  GLEE_EXTERN GLEEPFNGLTESSELLATIONMODEAMDPROC GLeeFuncPtr_glTessellationModeAMD;
+  #define glTessellationModeAMD GLeeFuncPtr_glTessellationModeAMD
+#endif
+#endif 
+
+/* GL_EXT_fragment_lighting */
+
+#ifndef GL_EXT_fragment_lighting
+#define GL_EXT_fragment_lighting 1
+#define __GLEE_GL_EXT_fragment_lighting 1
+/* Constants */
+#define GL_FRAGMENT_LIGHTING_EXT                           0x8400
+#define GL_FRAGMENT_COLOR_MATERIAL_EXT                     0x8401
+#define GL_FRAGMENT_COLOR_MATERIAL_FACE_EXT                0x8402
+#define GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_EXT           0x8403
+#define GL_MAX_FRAGMENT_LIGHTS_EXT                         0x8404
+#define GL_MAX_ACTIVE_LIGHTS_EXT                           0x8405
+#define GL_CURRENT_RASTER_NORMAL_EXT                       0x8406
+#define GL_LIGHT_ENV_MODE_EXT                              0x8407
+#define GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_EXT           0x8408
+#define GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_EXT               0x8409
+#define GL_FRAGMENT_LIGHT_MODEL_AMBIENT_EXT                0x840A
+#define GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_EXT   0x840B
+#define GL_FRAGMENT_LIGHT0_EXT                             0x840C
+#define GL_FRAGMENT_LIGHT7_EXT                             0x8413
+#endif 
+
+/* GL_EXT_texture_compression_dxt1 */
+
+#ifndef GL_EXT_texture_compression_dxt1
+#define GL_EXT_texture_compression_dxt1 1
+#define __GLEE_GL_EXT_texture_compression_dxt1 1
+/* Constants */
+#define GL_COMPRESSED_RGB_S3TC_DXT1_EXT                    0x83F0
+#define GL_COMPRESSED_RGBA_S3TC_DXT1_EXT                   0x83F1
+#endif 
+
+/* GL_EXT_scene_marker */
+
+#ifndef GL_EXT_scene_marker
+#define GL_EXT_scene_marker 1
+#define __GLEE_GL_EXT_scene_marker 1
+/* Constants */
+#ifndef GLEE_H_DEFINED_glEndSceneEXT
+#define GLEE_H_DEFINED_glEndSceneEXT
+  typedef GLvoid (APIENTRYP GLEEPFNGLENDSCENEEXTPROC) ();
+  GLEE_EXTERN GLEEPFNGLENDSCENEEXTPROC GLeeFuncPtr_glEndSceneEXT;
+  #define glEndSceneEXT GLeeFuncPtr_glEndSceneEXT
+#endif
+#endif 
+
+/* GL_EXT_geometry_shader4 */
+
+#ifndef GL_EXT_geometry_shader4
+#define GL_EXT_geometry_shader4 1
+#define __GLEE_GL_EXT_geometry_shader4 1
+/* Constants */
+#define GL_GEOMETRY_SHADER_EXT                             0x8DD9
+#define GL_GEOMETRY_VERTICES_OUT_EXT                       0x8DDA
+#define GL_GEOMETRY_INPUT_TYPE_EXT                         0x8DDB
+#define GL_GEOMETRY_OUTPUT_TYPE_EXT                        0x8DDC
+#define GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT            0x8C29
+#define GL_MAX_GEOMETRY_VARYING_COMPONENTS_EXT             0x8DDD
+#define GL_MAX_VERTEX_VARYING_COMPONENTS_EXT               0x8DDE
+#define GL_MAX_VARYING_COMPONENTS_EXT                      0x8B4B
+#define GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT             0x8DDF
+#define GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT                0x8DE0
+#define GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT        0x8DE1
+#define GL_LINES_ADJACENCY_EXT                             0xA
+#define GL_LINE_STRIP_ADJACENCY_EXT                        0xB
+#define GL_TRIANGLES_ADJACENCY_EXT                         0xC
+#define GL_TRIANGLE_STRIP_ADJACENCY_EXT                    0xD
+#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT        0x8DA8
+#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT          0x8DA9
+#define GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT              0x8DA7
+#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT        0x8CD4
+#define GL_PROGRAM_POINT_SIZE_EXT                          0x8642
+#endif 
+
+/* GL_EXT_texture_env */
+
+#ifndef GL_EXT_texture_env
+#define GL_EXT_texture_env 1
+#define __GLEE_GL_EXT_texture_env 1
+/* Constants */
+#define GL_TEXTURE_ENV0_EXT                                0x0
+#define GL_TEXTURE_ENV_MODE_ALPHA_EXT                      0x0
+#define GL_ENV_COPY_EXT                                    0x0
+#define GL_ENV_REPLACE_EXT                                 0x0
+#define GL_ENV_MODULATE_EXT                                0x0
+#define GL_ENV_ADD_EXT                                     0x0
+#define GL_ENV_SUBTRACT_EXT                                0x0
+#define GL_ENV_REVERSE_SUBTRACT_EXT                        0x0
+#define GL_ENV_BLEND_EXT                                   0x0
+#define GL_ENV_REVERSE_BLEND_EXT                           0x0
+#define GL_TEXTURE_ENV_SHIFT_EXT                           0x0
+#endif 
+
+/* GL_SGIX_texture_range */
+
+#ifndef GL_SGIX_texture_range
+#define GL_SGIX_texture_range 1
+#define __GLEE_GL_SGIX_texture_range 1
+/* Constants */
+#define GL_RGB_SIGNED_SGIX                                 0x85E0
+#define GL_RGBA_SIGNED_SGIX                                0x85E1
+#define GL_ALPHA_SIGNED_SGIX                               0x85E2
+#define GL_LUMINANCE_SIGNED_SGIX                           0x85E3
+#define GL_INTENSITY_SIGNED_SGIX                           0x85E4
+#define GL_LUMINANCE_ALPHA_SIGNED_SGIX                     0x85E5
+#define GL_RGB16_SIGNED_SGIX                               0x85E6
+#define GL_RGBA16_SIGNED_SGIX                              0x85E7
+#define GL_ALPHA16_SIGNED_SGIX                             0x85E8
+#define GL_LUMINANCE16_SIGNED_SGIX                         0x85E9
+#define GL_INTENSITY16_SIGNED_SGIX                         0x85EA
+#define GL_LUMINANCE16_ALPHA16_SIGNED_SGIX                 0x85EB
+#define GL_RGB_EXTENDED_RANGE_SGIX                         0x85EC
+#define GL_RGBA_EXTENDED_RANGE_SGIX                        0x85ED
+#define GL_ALPHA_EXTENDED_RANGE_SGIX                       0x85EE
+#define GL_LUMINANCE_EXTENDED_RANGE_SGIX                   0x85EF
+#define GL_INTENSITY_EXTENDED_RANGE_SGIX                   0x85F0
+#define GL_LUMINANCE_ALPHA_EXTENDED_RANGE_SGIX             0x85F1
+#define GL_RGB16_EXTENDED_RANGE_SGIX                       0x85F2
+#define GL_RGBA16_EXTENDED_RANGE_SGIX                      0x85F3
+#define GL_ALPHA16_EXTENDED_RANGE_SGIX                     0x85F4
+#define GL_LUMINANCE16_EXTENDED_RANGE_SGIX                 0x85F5
+#define GL_INTENSITY16_EXTENDED_RANGE_SGIX                 0x85F6
+#define GL_LUMINANCE16_ALPHA16_EXTENDED_RANGE_SGIX         0x85F7
+#define GL_MIN_LUMINANCE_SGIS                              0x85F8
+#define GL_MAX_LUMINANCE_SGIS                              0x85F9
+#define GL_MIN_INTENSITY_SGIS                              0x85FA
+#define GL_MAX_INTENSITY_SGIS                              0x85FB
+#endif 
+
+/* GL_SGIX_pixel_texture_bits */
+
+#ifndef GL_SGIX_pixel_texture_bits
+#define GL_SGIX_pixel_texture_bits 1
+#define __GLEE_GL_SGIX_pixel_texture_bits 1
+/* Constants */
+#endif 
+
+/* GL_IBM_static_data */
+
+#ifndef GL_IBM_static_data
+#define GL_IBM_static_data 1
+#define __GLEE_GL_IBM_static_data 1
+/* Constants */
+#define GL_ALL_STATIC_DATA_IBM                             103060
+#define GL_STATIC_VERTEX_ARRAY_IBM                         103061
+#endif 
+
+/* WGL  */
+
+#ifdef _WIN32
+
+/* Extension querying variables */
+
+GLEE_EXTERN GLboolean _GLEE_WGL_ARB_buffer_region;
+GLEE_EXTERN GLboolean _GLEE_WGL_ARB_multisample;
+GLEE_EXTERN GLboolean _GLEE_WGL_ARB_extensions_string;
+GLEE_EXTERN GLboolean _GLEE_WGL_ARB_pixel_format;
+GLEE_EXTERN GLboolean _GLEE_WGL_ARB_make_current_read;
+GLEE_EXTERN GLboolean _GLEE_WGL_ARB_pbuffer;
+GLEE_EXTERN GLboolean _GLEE_WGL_ARB_render_texture;
+GLEE_EXTERN GLboolean _GLEE_WGL_ARB_pixel_format_float;
+GLEE_EXTERN GLboolean _GLEE_WGL_ARB_framebuffer_sRGB;
+GLEE_EXTERN GLboolean _GLEE_WGL_ARB_create_context;
+GLEE_EXTERN GLboolean _GLEE_WGL_ARB_create_context_profile;
+GLEE_EXTERN GLboolean _GLEE_WGL_ARB_create_context_robustness;
+GLEE_EXTERN GLboolean _GLEE_WGL_EXT_make_current_read;
+GLEE_EXTERN GLboolean _GLEE_WGL_EXT_pixel_format;
+GLEE_EXTERN GLboolean _GLEE_WGL_EXT_pbuffer;
+GLEE_EXTERN GLboolean _GLEE_WGL_EXT_depth_float;
+GLEE_EXTERN GLboolean _GLEE_WGL_3DFX_multisample;
+GLEE_EXTERN GLboolean _GLEE_WGL_EXT_multisample;
+GLEE_EXTERN GLboolean _GLEE_WGL_I3D_digital_video_control;
+GLEE_EXTERN GLboolean _GLEE_WGL_I3D_gamma;
+GLEE_EXTERN GLboolean _GLEE_WGL_I3D_genlock;
+GLEE_EXTERN GLboolean _GLEE_WGL_I3D_image_buffer;
+GLEE_EXTERN GLboolean _GLEE_WGL_I3D_swap_frame_lock;
+GLEE_EXTERN GLboolean _GLEE_WGL_NV_render_depth_texture;
+GLEE_EXTERN GLboolean _GLEE_WGL_NV_render_texture_rectangle;
+GLEE_EXTERN GLboolean _GLEE_WGL_ATI_pixel_format_float;
+GLEE_EXTERN GLboolean _GLEE_WGL_NV_float_buffer;
+GLEE_EXTERN GLboolean _GLEE_WGL_3DL_stereo_control;
+GLEE_EXTERN GLboolean _GLEE_WGL_EXT_pixel_format_packed_float;
+GLEE_EXTERN GLboolean _GLEE_WGL_EXT_framebuffer_sRGB;
+GLEE_EXTERN GLboolean _GLEE_WGL_NV_present_video;
+GLEE_EXTERN GLboolean _GLEE_WGL_NV_swap_group;
+GLEE_EXTERN GLboolean _GLEE_WGL_NV_gpu_affinity;
+GLEE_EXTERN GLboolean _GLEE_WGL_AMD_gpu_association;
+GLEE_EXTERN GLboolean _GLEE_WGL_NV_copy_image;
+GLEE_EXTERN GLboolean _GLEE_WGL_NV_multisample_coverage;
+GLEE_EXTERN GLboolean _GLEE_WGL_EXT_create_context_es2_profile;
+GLEE_EXTERN GLboolean _GLEE_WGL_NV_DX_interop;
+GLEE_EXTERN GLboolean _GLEE_WGL_EXT_display_color_table;
+GLEE_EXTERN GLboolean _GLEE_WGL_EXT_extensions_string;
+GLEE_EXTERN GLboolean _GLEE_WGL_EXT_swap_control;
+GLEE_EXTERN GLboolean _GLEE_WGL_NV_vertex_array_range;
+GLEE_EXTERN GLboolean _GLEE_WGL_OML_sync_control;
+GLEE_EXTERN GLboolean _GLEE_WGL_I3D_swap_frame_usage;
+GLEE_EXTERN GLboolean _GLEE_WGL_NV_video_output;
+
+/* Aliases for extension querying variables */
+
+#define GLEE_WGL_ARB_buffer_region     GLeeEnabled(&_GLEE_WGL_ARB_buffer_region)
+#define GLEE_WGL_ARB_multisample     GLeeEnabled(&_GLEE_WGL_ARB_multisample)
+#define GLEE_WGL_ARB_extensions_string     GLeeEnabled(&_GLEE_WGL_ARB_extensions_string)
+#define GLEE_WGL_ARB_pixel_format     GLeeEnabled(&_GLEE_WGL_ARB_pixel_format)
+#define GLEE_WGL_ARB_make_current_read     GLeeEnabled(&_GLEE_WGL_ARB_make_current_read)
+#define GLEE_WGL_ARB_pbuffer     GLeeEnabled(&_GLEE_WGL_ARB_pbuffer)
+#define GLEE_WGL_ARB_render_texture     GLeeEnabled(&_GLEE_WGL_ARB_render_texture)
+#define GLEE_WGL_ARB_pixel_format_float     GLeeEnabled(&_GLEE_WGL_ARB_pixel_format_float)
+#define GLEE_WGL_ARB_framebuffer_sRGB     GLeeEnabled(&_GLEE_WGL_ARB_framebuffer_sRGB)
+#define GLEE_WGL_ARB_create_context     GLeeEnabled(&_GLEE_WGL_ARB_create_context)
+#define GLEE_WGL_ARB_create_context_profile     GLeeEnabled(&_GLEE_WGL_ARB_create_context_profile)
+#define GLEE_WGL_ARB_create_context_robustness     GLeeEnabled(&_GLEE_WGL_ARB_create_context_robustness)
+#define GLEE_WGL_EXT_make_current_read     GLeeEnabled(&_GLEE_WGL_EXT_make_current_read)
+#define GLEE_WGL_EXT_pixel_format     GLeeEnabled(&_GLEE_WGL_EXT_pixel_format)
+#define GLEE_WGL_EXT_pbuffer     GLeeEnabled(&_GLEE_WGL_EXT_pbuffer)
+#define GLEE_WGL_EXT_depth_float     GLeeEnabled(&_GLEE_WGL_EXT_depth_float)
+#define GLEE_WGL_3DFX_multisample     GLeeEnabled(&_GLEE_WGL_3DFX_multisample)
+#define GLEE_WGL_EXT_multisample     GLeeEnabled(&_GLEE_WGL_EXT_multisample)
+#define GLEE_WGL_I3D_digital_video_control     GLeeEnabled(&_GLEE_WGL_I3D_digital_video_control)
+#define GLEE_WGL_I3D_gamma     GLeeEnabled(&_GLEE_WGL_I3D_gamma)
+#define GLEE_WGL_I3D_genlock     GLeeEnabled(&_GLEE_WGL_I3D_genlock)
+#define GLEE_WGL_I3D_image_buffer     GLeeEnabled(&_GLEE_WGL_I3D_image_buffer)
+#define GLEE_WGL_I3D_swap_frame_lock     GLeeEnabled(&_GLEE_WGL_I3D_swap_frame_lock)
+#define GLEE_WGL_NV_render_depth_texture     GLeeEnabled(&_GLEE_WGL_NV_render_depth_texture)
+#define GLEE_WGL_NV_render_texture_rectangle     GLeeEnabled(&_GLEE_WGL_NV_render_texture_rectangle)
+#define GLEE_WGL_ATI_pixel_format_float     GLeeEnabled(&_GLEE_WGL_ATI_pixel_format_float)
+#define GLEE_WGL_NV_float_buffer     GLeeEnabled(&_GLEE_WGL_NV_float_buffer)
+#define GLEE_WGL_3DL_stereo_control     GLeeEnabled(&_GLEE_WGL_3DL_stereo_control)
+#define GLEE_WGL_EXT_pixel_format_packed_float     GLeeEnabled(&_GLEE_WGL_EXT_pixel_format_packed_float)
+#define GLEE_WGL_EXT_framebuffer_sRGB     GLeeEnabled(&_GLEE_WGL_EXT_framebuffer_sRGB)
+#define GLEE_WGL_NV_present_video     GLeeEnabled(&_GLEE_WGL_NV_present_video)
+#define GLEE_WGL_NV_swap_group     GLeeEnabled(&_GLEE_WGL_NV_swap_group)
+#define GLEE_WGL_NV_gpu_affinity     GLeeEnabled(&_GLEE_WGL_NV_gpu_affinity)
+#define GLEE_WGL_AMD_gpu_association     GLeeEnabled(&_GLEE_WGL_AMD_gpu_association)
+#define GLEE_WGL_NV_copy_image     GLeeEnabled(&_GLEE_WGL_NV_copy_image)
+#define GLEE_WGL_NV_multisample_coverage     GLeeEnabled(&_GLEE_WGL_NV_multisample_coverage)
+#define GLEE_WGL_EXT_create_context_es2_profile     GLeeEnabled(&_GLEE_WGL_EXT_create_context_es2_profile)
+#define GLEE_WGL_NV_DX_interop     GLeeEnabled(&_GLEE_WGL_NV_DX_interop)
+#define GLEE_WGL_EXT_display_color_table     GLeeEnabled(&_GLEE_WGL_EXT_display_color_table)
+#define GLEE_WGL_EXT_extensions_string     GLeeEnabled(&_GLEE_WGL_EXT_extensions_string)
+#define GLEE_WGL_EXT_swap_control     GLeeEnabled(&_GLEE_WGL_EXT_swap_control)
+#define GLEE_WGL_NV_vertex_array_range     GLeeEnabled(&_GLEE_WGL_NV_vertex_array_range)
+#define GLEE_WGL_OML_sync_control     GLeeEnabled(&_GLEE_WGL_OML_sync_control)
+#define GLEE_WGL_I3D_swap_frame_usage     GLeeEnabled(&_GLEE_WGL_I3D_swap_frame_usage)
+#define GLEE_WGL_NV_video_output     GLeeEnabled(&_GLEE_WGL_NV_video_output)
+
+/* WGL_ARB_buffer_region */
+
+#ifndef WGL_ARB_buffer_region
+#define WGL_ARB_buffer_region 1
+#define __GLEE_WGL_ARB_buffer_region 1
+/* Constants */
+#define WGL_FRONT_COLOR_BUFFER_BIT_ARB                     0x00000001
+#define WGL_BACK_COLOR_BUFFER_BIT_ARB                      0x00000002
+#define WGL_DEPTH_BUFFER_BIT_ARB                           0x00000004
+#define WGL_STENCIL_BUFFER_BIT_ARB                         0x00000008
+#ifndef GLEE_H_DEFINED_wglCreateBufferRegionARB
+#define GLEE_H_DEFINED_wglCreateBufferRegionARB
+  typedef HANDLE (APIENTRYP GLEEPFNWGLCREATEBUFFERREGIONARBPROC) (HDC  hDC, int  iLayerPlane, UINT  uType);
+  GLEE_EXTERN GLEEPFNWGLCREATEBUFFERREGIONARBPROC GLeeFuncPtr_wglCreateBufferRegionARB;
+  #define wglCreateBufferRegionARB GLeeFuncPtr_wglCreateBufferRegionARB
+#endif
+#ifndef GLEE_H_DEFINED_wglDeleteBufferRegionARB
+#define GLEE_H_DEFINED_wglDeleteBufferRegionARB
+  typedef VOID (APIENTRYP GLEEPFNWGLDELETEBUFFERREGIONARBPROC) (HANDLE  hRegion);
+  GLEE_EXTERN GLEEPFNWGLDELETEBUFFERREGIONARBPROC GLeeFuncPtr_wglDeleteBufferRegionARB;
+  #define wglDeleteBufferRegionARB GLeeFuncPtr_wglDeleteBufferRegionARB
+#endif
+#ifndef GLEE_H_DEFINED_wglSaveBufferRegionARB
+#define GLEE_H_DEFINED_wglSaveBufferRegionARB
+  typedef BOOL (APIENTRYP GLEEPFNWGLSAVEBUFFERREGIONARBPROC) (HANDLE  hRegion, int  x, int  y, int  width, int  height);
+  GLEE_EXTERN GLEEPFNWGLSAVEBUFFERREGIONARBPROC GLeeFuncPtr_wglSaveBufferRegionARB;
+  #define wglSaveBufferRegionARB GLeeFuncPtr_wglSaveBufferRegionARB
+#endif
+#ifndef GLEE_H_DEFINED_wglRestoreBufferRegionARB
+#define GLEE_H_DEFINED_wglRestoreBufferRegionARB
+  typedef BOOL (APIENTRYP GLEEPFNWGLRESTOREBUFFERREGIONARBPROC) (HANDLE  hRegion, int  x, int  y, int  width, int  height, int  xSrc, int  ySrc);
+  GLEE_EXTERN GLEEPFNWGLRESTOREBUFFERREGIONARBPROC GLeeFuncPtr_wglRestoreBufferRegionARB;
+  #define wglRestoreBufferRegionARB GLeeFuncPtr_wglRestoreBufferRegionARB
+#endif
+#endif 
+
+/* WGL_ARB_multisample */
+
+#ifndef WGL_ARB_multisample
+#define WGL_ARB_multisample 1
+#define __GLEE_WGL_ARB_multisample 1
+/* Constants */
+#define WGL_SAMPLE_BUFFERS_ARB                             0x2041
+#define WGL_SAMPLES_ARB                                    0x2042
+#endif 
+
+/* WGL_ARB_extensions_string */
+
+#ifndef WGL_ARB_extensions_string
+#define WGL_ARB_extensions_string 1
+#define __GLEE_WGL_ARB_extensions_string 1
+/* Constants */
+#ifndef GLEE_H_DEFINED_wglGetExtensionsStringARB
+#define GLEE_H_DEFINED_wglGetExtensionsStringARB
+  typedef const char * (APIENTRYP GLEEPFNWGLGETEXTENSIONSSTRINGARBPROC) (HDC  hdc);
+  GLEE_EXTERN GLEEPFNWGLGETEXTENSIONSSTRINGARBPROC GLeeFuncPtr_wglGetExtensionsStringARB;
+  #define wglGetExtensionsStringARB GLeeFuncPtr_wglGetExtensionsStringARB
+#endif
+#endif 
+
+/* WGL_ARB_pixel_format */
+
+#ifndef WGL_ARB_pixel_format
+#define WGL_ARB_pixel_format 1
+#define __GLEE_WGL_ARB_pixel_format 1
+/* Constants */
+#define WGL_NUMBER_PIXEL_FORMATS_ARB                       0x2000
+#define WGL_DRAW_TO_WINDOW_ARB                             0x2001
+#define WGL_DRAW_TO_BITMAP_ARB                             0x2002
+#define WGL_ACCELERATION_ARB                               0x2003
+#define WGL_NEED_PALETTE_ARB                               0x2004
+#define WGL_NEED_SYSTEM_PALETTE_ARB                        0x2005
+#define WGL_SWAP_LAYER_BUFFERS_ARB                         0x2006
+#define WGL_SWAP_METHOD_ARB                                0x2007
+#define WGL_NUMBER_OVERLAYS_ARB                            0x2008
+#define WGL_NUMBER_UNDERLAYS_ARB                           0x2009
+#define WGL_TRANSPARENT_ARB                                0x200A
+#define WGL_TRANSPARENT_RED_VALUE_ARB                      0x2037
+#define WGL_TRANSPARENT_GREEN_VALUE_ARB                    0x2038
+#define WGL_TRANSPARENT_BLUE_VALUE_ARB                     0x2039
+#define WGL_TRANSPARENT_ALPHA_VALUE_ARB                    0x203A
+#define WGL_TRANSPARENT_INDEX_VALUE_ARB                    0x203B
+#define WGL_SHARE_DEPTH_ARB                                0x200C
+#define WGL_SHARE_STENCIL_ARB                              0x200D
+#define WGL_SHARE_ACCUM_ARB                                0x200E
+#define WGL_SUPPORT_GDI_ARB                                0x200F
+#define WGL_SUPPORT_OPENGL_ARB                             0x2010
+#define WGL_DOUBLE_BUFFER_ARB                              0x2011
+#define WGL_STEREO_ARB                                     0x2012
+#define WGL_PIXEL_TYPE_ARB                                 0x2013
+#define WGL_COLOR_BITS_ARB                                 0x2014
+#define WGL_RED_BITS_ARB                                   0x2015
+#define WGL_RED_SHIFT_ARB                                  0x2016
+#define WGL_GREEN_BITS_ARB                                 0x2017
+#define WGL_GREEN_SHIFT_ARB                                0x2018
+#define WGL_BLUE_BITS_ARB                                  0x2019
+#define WGL_BLUE_SHIFT_ARB                                 0x201A
+#define WGL_ALPHA_BITS_ARB                                 0x201B
+#define WGL_ALPHA_SHIFT_ARB                                0x201C
+#define WGL_ACCUM_BITS_ARB                                 0x201D
+#define WGL_ACCUM_RED_BITS_ARB                             0x201E
+#define WGL_ACCUM_GREEN_BITS_ARB                           0x201F
+#define WGL_ACCUM_BLUE_BITS_ARB                            0x2020
+#define WGL_ACCUM_ALPHA_BITS_ARB                           0x2021
+#define WGL_DEPTH_BITS_ARB                                 0x2022
+#define WGL_STENCIL_BITS_ARB                               0x2023
+#define WGL_AUX_BUFFERS_ARB                                0x2024
+#define WGL_NO_ACCELERATION_ARB                            0x2025
+#define WGL_GENERIC_ACCELERATION_ARB                       0x2026
+#define WGL_FULL_ACCELERATION_ARB                          0x2027
+#define WGL_SWAP_EXCHANGE_ARB                              0x2028
+#define WGL_SWAP_COPY_ARB                                  0x2029
+#define WGL_SWAP_UNDEFINED_ARB                             0x202A
+#define WGL_TYPE_RGBA_ARB                                  0x202B
+#define WGL_TYPE_COLORINDEX_ARB                            0x202C
+#ifndef GLEE_H_DEFINED_wglGetPixelFormatAttribivARB
+#define GLEE_H_DEFINED_wglGetPixelFormatAttribivARB
+  typedef BOOL (APIENTRYP GLEEPFNWGLGETPIXELFORMATATTRIBIVARBPROC) (HDC  hdc, int  iPixelFormat, int  iLayerPlane, UINT  nAttributes, const int * piAttributes, int * piValues);
+  GLEE_EXTERN GLEEPFNWGLGETPIXELFORMATATTRIBIVARBPROC GLeeFuncPtr_wglGetPixelFormatAttribivARB;
+  #define wglGetPixelFormatAttribivARB GLeeFuncPtr_wglGetPixelFormatAttribivARB
+#endif
+#ifndef GLEE_H_DEFINED_wglGetPixelFormatAttribfvARB
+#define GLEE_H_DEFINED_wglGetPixelFormatAttribfvARB
+  typedef BOOL (APIENTRYP GLEEPFNWGLGETPIXELFORMATATTRIBFVARBPROC) (HDC  hdc, int  iPixelFormat, int  iLayerPlane, UINT  nAttributes, const int * piAttributes, FLOAT * pfValues);
+  GLEE_EXTERN GLEEPFNWGLGETPIXELFORMATATTRIBFVARBPROC GLeeFuncPtr_wglGetPixelFormatAttribfvARB;
+  #define wglGetPixelFormatAttribfvARB GLeeFuncPtr_wglGetPixelFormatAttribfvARB
+#endif
+#ifndef GLEE_H_DEFINED_wglChoosePixelFormatARB
+#define GLEE_H_DEFINED_wglChoosePixelFormatARB
+  typedef BOOL (APIENTRYP GLEEPFNWGLCHOOSEPIXELFORMATARBPROC) (HDC  hdc, const int * piAttribIList, const FLOAT * pfAttribFList, UINT  nMaxFormats, int * piFormats, UINT * nNumFormats);
+  GLEE_EXTERN GLEEPFNWGLCHOOSEPIXELFORMATARBPROC GLeeFuncPtr_wglChoosePixelFormatARB;
+  #define wglChoosePixelFormatARB GLeeFuncPtr_wglChoosePixelFormatARB
+#endif
+#endif 
+
+/* WGL_ARB_make_current_read */
+
+#ifndef WGL_ARB_make_current_read
+#define WGL_ARB_make_current_read 1
+#define __GLEE_WGL_ARB_make_current_read 1
+/* Constants */
+#define ERROR_INVALID_PIXEL_TYPE_ARB                       0x2043
+#define ERROR_INCOMPATIBLE_DEVICE_CONTEXTS_ARB             0x2054
+#ifndef GLEE_H_DEFINED_wglMakeContextCurrentARB
+#define GLEE_H_DEFINED_wglMakeContextCurrentARB
+  typedef BOOL (APIENTRYP GLEEPFNWGLMAKECONTEXTCURRENTARBPROC) (HDC  hDrawDC, HDC  hReadDC, HGLRC  hglrc);
+  GLEE_EXTERN GLEEPFNWGLMAKECONTEXTCURRENTARBPROC GLeeFuncPtr_wglMakeContextCurrentARB;
+  #define wglMakeContextCurrentARB GLeeFuncPtr_wglMakeContextCurrentARB
+#endif
+#ifndef GLEE_H_DEFINED_wglGetCurrentReadDCARB
+#define GLEE_H_DEFINED_wglGetCurrentReadDCARB
+  typedef HDC (APIENTRYP GLEEPFNWGLGETCURRENTREADDCARBPROC) ();
+  GLEE_EXTERN GLEEPFNWGLGETCURRENTREADDCARBPROC GLeeFuncPtr_wglGetCurrentReadDCARB;
+  #define wglGetCurrentReadDCARB GLeeFuncPtr_wglGetCurrentReadDCARB
+#endif
+#endif 
+
+/* WGL_ARB_pbuffer */
+
+#ifndef WGL_ARB_pbuffer
+#define WGL_ARB_pbuffer 1
+#define __GLEE_WGL_ARB_pbuffer 1
+/* Constants */
+#define WGL_DRAW_TO_PBUFFER_ARB                            0x202D
+#define WGL_MAX_PBUFFER_PIXELS_ARB                         0x202E
+#define WGL_MAX_PBUFFER_WIDTH_ARB                          0x202F
+#define WGL_MAX_PBUFFER_HEIGHT_ARB                         0x2030
+#define WGL_PBUFFER_LARGEST_ARB                            0x2033
+#define WGL_PBUFFER_WIDTH_ARB                              0x2034
+#define WGL_PBUFFER_HEIGHT_ARB                             0x2035
+#define WGL_PBUFFER_LOST_ARB                               0x2036
+#ifndef GLEE_H_DEFINED_wglCreatePbufferARB
+#define GLEE_H_DEFINED_wglCreatePbufferARB
+  typedef HPBUFFERARB (APIENTRYP GLEEPFNWGLCREATEPBUFFERARBPROC) (HDC  hDC, int  iPixelFormat, int  iWidth, int  iHeight, const int * piAttribList);
+  GLEE_EXTERN GLEEPFNWGLCREATEPBUFFERARBPROC GLeeFuncPtr_wglCreatePbufferARB;
+  #define wglCreatePbufferARB GLeeFuncPtr_wglCreatePbufferARB
+#endif
+#ifndef GLEE_H_DEFINED_wglGetPbufferDCARB
+#define GLEE_H_DEFINED_wglGetPbufferDCARB
+  typedef HDC (APIENTRYP GLEEPFNWGLGETPBUFFERDCARBPROC) (HPBUFFERARB  hPbuffer);
+  GLEE_EXTERN GLEEPFNWGLGETPBUFFERDCARBPROC GLeeFuncPtr_wglGetPbufferDCARB;
+  #define wglGetPbufferDCARB GLeeFuncPtr_wglGetPbufferDCARB
+#endif
+#ifndef GLEE_H_DEFINED_wglReleasePbufferDCARB
+#define GLEE_H_DEFINED_wglReleasePbufferDCARB
+  typedef int (APIENTRYP GLEEPFNWGLRELEASEPBUFFERDCARBPROC) (HPBUFFERARB  hPbuffer, HDC  hDC);
+  GLEE_EXTERN GLEEPFNWGLRELEASEPBUFFERDCARBPROC GLeeFuncPtr_wglReleasePbufferDCARB;
+  #define wglReleasePbufferDCARB GLeeFuncPtr_wglReleasePbufferDCARB
+#endif
+#ifndef GLEE_H_DEFINED_wglDestroyPbufferARB
+#define GLEE_H_DEFINED_wglDestroyPbufferARB
+  typedef BOOL (APIENTRYP GLEEPFNWGLDESTROYPBUFFERARBPROC) (HPBUFFERARB  hPbuffer);
+  GLEE_EXTERN GLEEPFNWGLDESTROYPBUFFERARBPROC GLeeFuncPtr_wglDestroyPbufferARB;
+  #define wglDestroyPbufferARB GLeeFuncPtr_wglDestroyPbufferARB
+#endif
+#ifndef GLEE_H_DEFINED_wglQueryPbufferARB
+#define GLEE_H_DEFINED_wglQueryPbufferARB
+  typedef BOOL (APIENTRYP GLEEPFNWGLQUERYPBUFFERARBPROC) (HPBUFFERARB  hPbuffer, int  iAttribute, int * piValue);
+  GLEE_EXTERN GLEEPFNWGLQUERYPBUFFERARBPROC GLeeFuncPtr_wglQueryPbufferARB;
+  #define wglQueryPbufferARB GLeeFuncPtr_wglQueryPbufferARB
+#endif
+#endif 
+
+/* WGL_ARB_render_texture */
+
+#ifndef WGL_ARB_render_texture
+#define WGL_ARB_render_texture 1
+#define __GLEE_WGL_ARB_render_texture 1
+/* Constants */
+#define WGL_BIND_TO_TEXTURE_RGB_ARB                        0x2070
+#define WGL_BIND_TO_TEXTURE_RGBA_ARB                       0x2071
+#define WGL_TEXTURE_FORMAT_ARB                             0x2072
+#define WGL_TEXTURE_TARGET_ARB                             0x2073
+#define WGL_MIPMAP_TEXTURE_ARB                             0x2074
+#define WGL_TEXTURE_RGB_ARB                                0x2075
+#define WGL_TEXTURE_RGBA_ARB                               0x2076
+#define WGL_NO_TEXTURE_ARB                                 0x2077
+#define WGL_TEXTURE_CUBE_MAP_ARB                           0x2078
+#define WGL_TEXTURE_1D_ARB                                 0x2079
+#define WGL_TEXTURE_2D_ARB                                 0x207A
+#define WGL_MIPMAP_LEVEL_ARB                               0x207B
+#define WGL_CUBE_MAP_FACE_ARB                              0x207C
+#define WGL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB                0x207D
+#define WGL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB                0x207E
+#define WGL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB                0x207F
+#define WGL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB                0x2080
+#define WGL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB                0x2081
+#define WGL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB                0x2082
+#define WGL_FRONT_LEFT_ARB                                 0x2083
+#define WGL_FRONT_RIGHT_ARB                                0x2084
+#define WGL_BACK_LEFT_ARB                                  0x2085
+#define WGL_BACK_RIGHT_ARB                                 0x2086
+#define WGL_AUX0_ARB                                       0x2087
+#define WGL_AUX1_ARB                                       0x2088
+#define WGL_AUX2_ARB                                       0x2089
+#define WGL_AUX3_ARB                                       0x208A
+#define WGL_AUX4_ARB                                       0x208B
+#define WGL_AUX5_ARB                                       0x208C
+#define WGL_AUX6_ARB                                       0x208D
+#define WGL_AUX7_ARB                                       0x208E
+#define WGL_AUX8_ARB                                       0x208F
+#define WGL_AUX9_ARB                                       0x2090
+#ifndef GLEE_H_DEFINED_wglBindTexImageARB
+#define GLEE_H_DEFINED_wglBindTexImageARB
+  typedef BOOL (APIENTRYP GLEEPFNWGLBINDTEXIMAGEARBPROC) (HPBUFFERARB  hPbuffer, int  iBuffer);
+  GLEE_EXTERN GLEEPFNWGLBINDTEXIMAGEARBPROC GLeeFuncPtr_wglBindTexImageARB;
+  #define wglBindTexImageARB GLeeFuncPtr_wglBindTexImageARB
+#endif
+#ifndef GLEE_H_DEFINED_wglReleaseTexImageARB
+#define GLEE_H_DEFINED_wglReleaseTexImageARB
+  typedef BOOL (APIENTRYP GLEEPFNWGLRELEASETEXIMAGEARBPROC) (HPBUFFERARB  hPbuffer, int  iBuffer);
+  GLEE_EXTERN GLEEPFNWGLRELEASETEXIMAGEARBPROC GLeeFuncPtr_wglReleaseTexImageARB;
+  #define wglReleaseTexImageARB GLeeFuncPtr_wglReleaseTexImageARB
+#endif
+#ifndef GLEE_H_DEFINED_wglSetPbufferAttribARB
+#define GLEE_H_DEFINED_wglSetPbufferAttribARB
+  typedef BOOL (APIENTRYP GLEEPFNWGLSETPBUFFERATTRIBARBPROC) (HPBUFFERARB  hPbuffer, const int * piAttribList);
+  GLEE_EXTERN GLEEPFNWGLSETPBUFFERATTRIBARBPROC GLeeFuncPtr_wglSetPbufferAttribARB;
+  #define wglSetPbufferAttribARB GLeeFuncPtr_wglSetPbufferAttribARB
+#endif
+#endif 
+
+/* WGL_ARB_pixel_format_float */
+
+#ifndef WGL_ARB_pixel_format_float
+#define WGL_ARB_pixel_format_float 1
+#define __GLEE_WGL_ARB_pixel_format_float 1
+/* Constants */
+#define WGL_TYPE_RGBA_FLOAT_ARB                            0x21A0
+#endif 
+
+/* WGL_ARB_framebuffer_sRGB */
+
+#ifndef WGL_ARB_framebuffer_sRGB
+#define WGL_ARB_framebuffer_sRGB 1
+#define __GLEE_WGL_ARB_framebuffer_sRGB 1
+/* Constants */
+#define WGL_FRAMEBUFFER_SRGB_CAPABLE_ARB                   0x20A9
+#endif 
+
+/* WGL_ARB_create_context */
+
+#ifndef WGL_ARB_create_context
+#define WGL_ARB_create_context 1
+#define __GLEE_WGL_ARB_create_context 1
+/* Constants */
+#define WGL_CONTEXT_DEBUG_BIT_ARB                          0x00000001
+#define WGL_CONTEXT_FORWARD_COMPATIBLE_BIT_ARB             0x00000002
+#define WGL_CONTEXT_MAJOR_VERSION_ARB                      0x2091
+#define WGL_CONTEXT_MINOR_VERSION_ARB                      0x2092
+#define WGL_CONTEXT_LAYER_PLANE_ARB                        0x2093
+#define WGL_CONTEXT_FLAGS_ARB                              0x2094
+#define ERROR_INVALID_VERSION_ARB                          0x2095
+#ifndef GLEE_H_DEFINED_wglCreateContextAttribsARB
+#define GLEE_H_DEFINED_wglCreateContextAttribsARB
+  typedef HGLRC (APIENTRYP GLEEPFNWGLCREATECONTEXTATTRIBSARBPROC) (HDC  hDC, HGLRC  hShareContext, const int * attribList);
+  GLEE_EXTERN GLEEPFNWGLCREATECONTEXTATTRIBSARBPROC GLeeFuncPtr_wglCreateContextAttribsARB;
+  #define wglCreateContextAttribsARB GLeeFuncPtr_wglCreateContextAttribsARB
+#endif
+#endif 
+
+/* WGL_ARB_create_context_profile */
+
+#ifndef WGL_ARB_create_context_profile
+#define WGL_ARB_create_context_profile 1
+#define __GLEE_WGL_ARB_create_context_profile 1
+/* Constants */
+#define WGL_CONTEXT_PROFILE_MASK_ARB                       0x9126
+#define WGL_CONTEXT_CORE_PROFILE_BIT_ARB                   0x00000001
+#define WGL_CONTEXT_COMPATIBILITY_PROFILE_BIT_ARB          0x00000002
+#define ERROR_INVALID_PROFILE_ARB                          0x2096
+#endif 
+
+/* WGL_ARB_create_context_robustness */
+
+#ifndef WGL_ARB_create_context_robustness
+#define WGL_ARB_create_context_robustness 1
+#define __GLEE_WGL_ARB_create_context_robustness 1
+/* Constants */
+#define WGL_CONTEXT_ROBUST_ACCESS_BIT_ARB                  0x00000004
+#define WGL_LOSE_CONTEXT_ON_RESET_ARB                      0x8252
+#define WGL_CONTEXT_RESET_NOTIFICATION_STRATEGY_ARB        0x8256
+#define WGL_NO_RESET_NOTIFICATION_ARB                      0x8261
+#endif 
+
+/* WGL_EXT_make_current_read */
+
+#ifndef WGL_EXT_make_current_read
+#define WGL_EXT_make_current_read 1
+#define __GLEE_WGL_EXT_make_current_read 1
+/* Constants */
+#define ERROR_INVALID_PIXEL_TYPE_EXT                       0x2043
+#ifndef GLEE_H_DEFINED_wglMakeContextCurrentEXT
+#define GLEE_H_DEFINED_wglMakeContextCurrentEXT
+  typedef BOOL (APIENTRYP GLEEPFNWGLMAKECONTEXTCURRENTEXTPROC) (HDC  hDrawDC, HDC  hReadDC, HGLRC  hglrc);
+  GLEE_EXTERN GLEEPFNWGLMAKECONTEXTCURRENTEXTPROC GLeeFuncPtr_wglMakeContextCurrentEXT;
+  #define wglMakeContextCurrentEXT GLeeFuncPtr_wglMakeContextCurrentEXT
+#endif
+#ifndef GLEE_H_DEFINED_wglGetCurrentReadDCEXT
+#define GLEE_H_DEFINED_wglGetCurrentReadDCEXT
+  typedef HDC (APIENTRYP GLEEPFNWGLGETCURRENTREADDCEXTPROC) ();
+  GLEE_EXTERN GLEEPFNWGLGETCURRENTREADDCEXTPROC GLeeFuncPtr_wglGetCurrentReadDCEXT;
+  #define wglGetCurrentReadDCEXT GLeeFuncPtr_wglGetCurrentReadDCEXT
+#endif
+#endif 
+
+/* WGL_EXT_pixel_format */
+
+#ifndef WGL_EXT_pixel_format
+#define WGL_EXT_pixel_format 1
+#define __GLEE_WGL_EXT_pixel_format 1
+/* Constants */
+#define WGL_NUMBER_PIXEL_FORMATS_EXT                       0x2000
+#define WGL_DRAW_TO_WINDOW_EXT                             0x2001
+#define WGL_DRAW_TO_BITMAP_EXT                             0x2002
+#define WGL_ACCELERATION_EXT                               0x2003
+#define WGL_NEED_PALETTE_EXT                               0x2004
+#define WGL_NEED_SYSTEM_PALETTE_EXT                        0x2005
+#define WGL_SWAP_LAYER_BUFFERS_EXT                         0x2006
+#define WGL_SWAP_METHOD_EXT                                0x2007
+#define WGL_NUMBER_OVERLAYS_EXT                            0x2008
+#define WGL_NUMBER_UNDERLAYS_EXT                           0x2009
+#define WGL_TRANSPARENT_EXT                                0x200A
+#define WGL_TRANSPARENT_VALUE_EXT                          0x200B
+#define WGL_SHARE_DEPTH_EXT                                0x200C
+#define WGL_SHARE_STENCIL_EXT                              0x200D
+#define WGL_SHARE_ACCUM_EXT                                0x200E
+#define WGL_SUPPORT_GDI_EXT                                0x200F
+#define WGL_SUPPORT_OPENGL_EXT                             0x2010
+#define WGL_DOUBLE_BUFFER_EXT                              0x2011
+#define WGL_STEREO_EXT                                     0x2012
+#define WGL_PIXEL_TYPE_EXT                                 0x2013
+#define WGL_COLOR_BITS_EXT                                 0x2014
+#define WGL_RED_BITS_EXT                                   0x2015
+#define WGL_RED_SHIFT_EXT                                  0x2016
+#define WGL_GREEN_BITS_EXT                                 0x2017
+#define WGL_GREEN_SHIFT_EXT                                0x2018
+#define WGL_BLUE_BITS_EXT                                  0x2019
+#define WGL_BLUE_SHIFT_EXT                                 0x201A
+#define WGL_ALPHA_BITS_EXT                                 0x201B
+#define WGL_ALPHA_SHIFT_EXT                                0x201C
+#define WGL_ACCUM_BITS_EXT                                 0x201D
+#define WGL_ACCUM_RED_BITS_EXT                             0x201E
+#define WGL_ACCUM_GREEN_BITS_EXT                           0x201F
+#define WGL_ACCUM_BLUE_BITS_EXT                            0x2020
+#define WGL_ACCUM_ALPHA_BITS_EXT                           0x2021
+#define WGL_DEPTH_BITS_EXT                                 0x2022
+#define WGL_STENCIL_BITS_EXT                               0x2023
+#define WGL_AUX_BUFFERS_EXT                                0x2024
+#define WGL_NO_ACCELERATION_EXT                            0x2025
+#define WGL_GENERIC_ACCELERATION_EXT                       0x2026
+#define WGL_FULL_ACCELERATION_EXT                          0x2027
+#define WGL_SWAP_EXCHANGE_EXT                              0x2028
+#define WGL_SWAP_COPY_EXT                                  0x2029
+#define WGL_SWAP_UNDEFINED_EXT                             0x202A
+#define WGL_TYPE_RGBA_EXT                                  0x202B
+#define WGL_TYPE_COLORINDEX_EXT                            0x202C
+#ifndef GLEE_H_DEFINED_wglGetPixelFormatAttribivEXT
+#define GLEE_H_DEFINED_wglGetPixelFormatAttribivEXT
+  typedef BOOL (APIENTRYP GLEEPFNWGLGETPIXELFORMATATTRIBIVEXTPROC) (HDC  hdc, int  iPixelFormat, int  iLayerPlane, UINT  nAttributes, int * piAttributes, int * piValues);
+  GLEE_EXTERN GLEEPFNWGLGETPIXELFORMATATTRIBIVEXTPROC GLeeFuncPtr_wglGetPixelFormatAttribivEXT;
+  #define wglGetPixelFormatAttribivEXT GLeeFuncPtr_wglGetPixelFormatAttribivEXT
+#endif
+#ifndef GLEE_H_DEFINED_wglGetPixelFormatAttribfvEXT
+#define GLEE_H_DEFINED_wglGetPixelFormatAttribfvEXT
+  typedef BOOL (APIENTRYP GLEEPFNWGLGETPIXELFORMATATTRIBFVEXTPROC) (HDC  hdc, int  iPixelFormat, int  iLayerPlane, UINT  nAttributes, int * piAttributes, FLOAT * pfValues);
+  GLEE_EXTERN GLEEPFNWGLGETPIXELFORMATATTRIBFVEXTPROC GLeeFuncPtr_wglGetPixelFormatAttribfvEXT;
+  #define wglGetPixelFormatAttribfvEXT GLeeFuncPtr_wglGetPixelFormatAttribfvEXT
+#endif
+#ifndef GLEE_H_DEFINED_wglChoosePixelFormatEXT
+#define GLEE_H_DEFINED_wglChoosePixelFormatEXT
+  typedef BOOL (APIENTRYP GLEEPFNWGLCHOOSEPIXELFORMATEXTPROC) (HDC  hdc, const int * piAttribIList, const FLOAT * pfAttribFList, UINT  nMaxFormats, int * piFormats, UINT * nNumFormats);
+  GLEE_EXTERN GLEEPFNWGLCHOOSEPIXELFORMATEXTPROC GLeeFuncPtr_wglChoosePixelFormatEXT;
+  #define wglChoosePixelFormatEXT GLeeFuncPtr_wglChoosePixelFormatEXT
+#endif
+#endif 
+
+/* WGL_EXT_pbuffer */
+
+#ifndef WGL_EXT_pbuffer
+#define WGL_EXT_pbuffer 1
+#define __GLEE_WGL_EXT_pbuffer 1
+/* Constants */
+#define WGL_DRAW_TO_PBUFFER_EXT                            0x202D
+#define WGL_MAX_PBUFFER_PIXELS_EXT                         0x202E
+#define WGL_MAX_PBUFFER_WIDTH_EXT                          0x202F
+#define WGL_MAX_PBUFFER_HEIGHT_EXT                         0x2030
+#define WGL_OPTIMAL_PBUFFER_WIDTH_EXT                      0x2031
+#define WGL_OPTIMAL_PBUFFER_HEIGHT_EXT                     0x2032
+#define WGL_PBUFFER_LARGEST_EXT                            0x2033
+#define WGL_PBUFFER_WIDTH_EXT                              0x2034
+#define WGL_PBUFFER_HEIGHT_EXT                             0x2035
+#ifndef GLEE_H_DEFINED_wglCreatePbufferEXT
+#define GLEE_H_DEFINED_wglCreatePbufferEXT
+  typedef HPBUFFEREXT (APIENTRYP GLEEPFNWGLCREATEPBUFFEREXTPROC) (HDC  hDC, int  iPixelFormat, int  iWidth, int  iHeight, const int * piAttribList);
+  GLEE_EXTERN GLEEPFNWGLCREATEPBUFFEREXTPROC GLeeFuncPtr_wglCreatePbufferEXT;
+  #define wglCreatePbufferEXT GLeeFuncPtr_wglCreatePbufferEXT
+#endif
+#ifndef GLEE_H_DEFINED_wglGetPbufferDCEXT
+#define GLEE_H_DEFINED_wglGetPbufferDCEXT
+  typedef HDC (APIENTRYP GLEEPFNWGLGETPBUFFERDCEXTPROC) (HPBUFFEREXT  hPbuffer);
+  GLEE_EXTERN GLEEPFNWGLGETPBUFFERDCEXTPROC GLeeFuncPtr_wglGetPbufferDCEXT;
+  #define wglGetPbufferDCEXT GLeeFuncPtr_wglGetPbufferDCEXT
+#endif
+#ifndef GLEE_H_DEFINED_wglReleasePbufferDCEXT
+#define GLEE_H_DEFINED_wglReleasePbufferDCEXT
+  typedef int (APIENTRYP GLEEPFNWGLRELEASEPBUFFERDCEXTPROC) (HPBUFFEREXT  hPbuffer, HDC  hDC);
+  GLEE_EXTERN GLEEPFNWGLRELEASEPBUFFERDCEXTPROC GLeeFuncPtr_wglReleasePbufferDCEXT;
+  #define wglReleasePbufferDCEXT GLeeFuncPtr_wglReleasePbufferDCEXT
+#endif
+#ifndef GLEE_H_DEFINED_wglDestroyPbufferEXT
+#define GLEE_H_DEFINED_wglDestroyPbufferEXT
+  typedef BOOL (APIENTRYP GLEEPFNWGLDESTROYPBUFFEREXTPROC) (HPBUFFEREXT  hPbuffer);
+  GLEE_EXTERN GLEEPFNWGLDESTROYPBUFFEREXTPROC GLeeFuncPtr_wglDestroyPbufferEXT;
+  #define wglDestroyPbufferEXT GLeeFuncPtr_wglDestroyPbufferEXT
+#endif
+#ifndef GLEE_H_DEFINED_wglQueryPbufferEXT
+#define GLEE_H_DEFINED_wglQueryPbufferEXT
+  typedef BOOL (APIENTRYP GLEEPFNWGLQUERYPBUFFEREXTPROC) (HPBUFFEREXT  hPbuffer, int  iAttribute, int * piValue);
+  GLEE_EXTERN GLEEPFNWGLQUERYPBUFFEREXTPROC GLeeFuncPtr_wglQueryPbufferEXT;
+  #define wglQueryPbufferEXT GLeeFuncPtr_wglQueryPbufferEXT
+#endif
+#endif 
+
+/* WGL_EXT_depth_float */
+
+#ifndef WGL_EXT_depth_float
+#define WGL_EXT_depth_float 1
+#define __GLEE_WGL_EXT_depth_float 1
+/* Constants */
+#define WGL_DEPTH_FLOAT_EXT                                0x2040
+#endif 
+
+/* WGL_3DFX_multisample */
+
+#ifndef WGL_3DFX_multisample
+#define WGL_3DFX_multisample 1
+#define __GLEE_WGL_3DFX_multisample 1
+/* Constants */
+#define WGL_SAMPLE_BUFFERS_3DFX                            0x2060
+#define WGL_SAMPLES_3DFX                                   0x2061
+#endif 
+
+/* WGL_EXT_multisample */
+
+#ifndef WGL_EXT_multisample
+#define WGL_EXT_multisample 1
+#define __GLEE_WGL_EXT_multisample 1
+/* Constants */
+#define WGL_SAMPLE_BUFFERS_EXT                             0x2041
+#define WGL_SAMPLES_EXT                                    0x2042
+#endif 
+
+/* WGL_I3D_digital_video_control */
+
+#ifndef WGL_I3D_digital_video_control
+#define WGL_I3D_digital_video_control 1
+#define __GLEE_WGL_I3D_digital_video_control 1
+/* Constants */
+#define WGL_DIGITAL_VIDEO_CURSOR_ALPHA_FRAMEBUFFER_I3D     0x2050
+#define WGL_DIGITAL_VIDEO_CURSOR_ALPHA_VALUE_I3D           0x2051
+#define WGL_DIGITAL_VIDEO_CURSOR_INCLUDED_I3D              0x2052
+#define WGL_DIGITAL_VIDEO_GAMMA_CORRECTED_I3D              0x2053
+#ifndef GLEE_H_DEFINED_wglGetDigitalVideoParametersI3D
+#define GLEE_H_DEFINED_wglGetDigitalVideoParametersI3D
+  typedef BOOL (APIENTRYP GLEEPFNWGLGETDIGITALVIDEOPARAMETERSI3DPROC) (HDC  hDC, int  iAttribute, int * piValue);
+  GLEE_EXTERN GLEEPFNWGLGETDIGITALVIDEOPARAMETERSI3DPROC GLeeFuncPtr_wglGetDigitalVideoParametersI3D;
+  #define wglGetDigitalVideoParametersI3D GLeeFuncPtr_wglGetDigitalVideoParametersI3D
+#endif
+#ifndef GLEE_H_DEFINED_wglSetDigitalVideoParametersI3D
+#define GLEE_H_DEFINED_wglSetDigitalVideoParametersI3D
+  typedef BOOL (APIENTRYP GLEEPFNWGLSETDIGITALVIDEOPARAMETERSI3DPROC) (HDC  hDC, int  iAttribute, const int * piValue);
+  GLEE_EXTERN GLEEPFNWGLSETDIGITALVIDEOPARAMETERSI3DPROC GLeeFuncPtr_wglSetDigitalVideoParametersI3D;
+  #define wglSetDigitalVideoParametersI3D GLeeFuncPtr_wglSetDigitalVideoParametersI3D
+#endif
+#endif 
+
+/* WGL_I3D_gamma */
+
+#ifndef WGL_I3D_gamma
+#define WGL_I3D_gamma 1
+#define __GLEE_WGL_I3D_gamma 1
+/* Constants */
+#define WGL_GAMMA_TABLE_SIZE_I3D                           0x204E
+#define WGL_GAMMA_EXCLUDE_DESKTOP_I3D                      0x204F
+#ifndef GLEE_H_DEFINED_wglGetGammaTableParametersI3D
+#define GLEE_H_DEFINED_wglGetGammaTableParametersI3D
+  typedef BOOL (APIENTRYP GLEEPFNWGLGETGAMMATABLEPARAMETERSI3DPROC) (HDC  hDC, int  iAttribute, int * piValue);
+  GLEE_EXTERN GLEEPFNWGLGETGAMMATABLEPARAMETERSI3DPROC GLeeFuncPtr_wglGetGammaTableParametersI3D;
+  #define wglGetGammaTableParametersI3D GLeeFuncPtr_wglGetGammaTableParametersI3D
+#endif
+#ifndef GLEE_H_DEFINED_wglSetGammaTableParametersI3D
+#define GLEE_H_DEFINED_wglSetGammaTableParametersI3D
+  typedef BOOL (APIENTRYP GLEEPFNWGLSETGAMMATABLEPARAMETERSI3DPROC) (HDC  hDC, int  iAttribute, const int * piValue);
+  GLEE_EXTERN GLEEPFNWGLSETGAMMATABLEPARAMETERSI3DPROC GLeeFuncPtr_wglSetGammaTableParametersI3D;
+  #define wglSetGammaTableParametersI3D GLeeFuncPtr_wglSetGammaTableParametersI3D
+#endif
+#ifndef GLEE_H_DEFINED_wglGetGammaTableI3D
+#define GLEE_H_DEFINED_wglGetGammaTableI3D
+  typedef BOOL (APIENTRYP GLEEPFNWGLGETGAMMATABLEI3DPROC) (HDC  hDC, int  iEntries, USHORT * puRed, USHORT * puGreen, USHORT * puBlue);
+  GLEE_EXTERN GLEEPFNWGLGETGAMMATABLEI3DPROC GLeeFuncPtr_wglGetGammaTableI3D;
+  #define wglGetGammaTableI3D GLeeFuncPtr_wglGetGammaTableI3D
+#endif
+#ifndef GLEE_H_DEFINED_wglSetGammaTableI3D
+#define GLEE_H_DEFINED_wglSetGammaTableI3D
+  typedef BOOL (APIENTRYP GLEEPFNWGLSETGAMMATABLEI3DPROC) (HDC  hDC, int  iEntries, const USHORT * puRed, const USHORT * puGreen, const USHORT * puBlue);
+  GLEE_EXTERN GLEEPFNWGLSETGAMMATABLEI3DPROC GLeeFuncPtr_wglSetGammaTableI3D;
+  #define wglSetGammaTableI3D GLeeFuncPtr_wglSetGammaTableI3D
+#endif
+#endif 
+
+/* WGL_I3D_genlock */
+
+#ifndef WGL_I3D_genlock
+#define WGL_I3D_genlock 1
+#define __GLEE_WGL_I3D_genlock 1
+/* Constants */
+#define WGL_GENLOCK_SOURCE_MULTIVIEW_I3D                   0x2044
+#define WGL_GENLOCK_SOURCE_EXTENAL_SYNC_I3D                0x2045
+#define WGL_GENLOCK_SOURCE_EXTENAL_FIELD_I3D               0x2046
+#define WGL_GENLOCK_SOURCE_EXTENAL_TTL_I3D                 0x2047
+#define WGL_GENLOCK_SOURCE_DIGITAL_SYNC_I3D                0x2048
+#define WGL_GENLOCK_SOURCE_DIGITAL_FIELD_I3D               0x2049
+#define WGL_GENLOCK_SOURCE_EDGE_FALLING_I3D                0x204A
+#define WGL_GENLOCK_SOURCE_EDGE_RISING_I3D                 0x204B
+#define WGL_GENLOCK_SOURCE_EDGE_BOTH_I3D                   0x204C
+#ifndef GLEE_H_DEFINED_wglEnableGenlockI3D
+#define GLEE_H_DEFINED_wglEnableGenlockI3D
+  typedef BOOL (APIENTRYP GLEEPFNWGLENABLEGENLOCKI3DPROC) (HDC  hDC);
+  GLEE_EXTERN GLEEPFNWGLENABLEGENLOCKI3DPROC GLeeFuncPtr_wglEnableGenlockI3D;
+  #define wglEnableGenlockI3D GLeeFuncPtr_wglEnableGenlockI3D
+#endif
+#ifndef GLEE_H_DEFINED_wglDisableGenlockI3D
+#define GLEE_H_DEFINED_wglDisableGenlockI3D
+  typedef BOOL (APIENTRYP GLEEPFNWGLDISABLEGENLOCKI3DPROC) (HDC  hDC);
+  GLEE_EXTERN GLEEPFNWGLDISABLEGENLOCKI3DPROC GLeeFuncPtr_wglDisableGenlockI3D;
+  #define wglDisableGenlockI3D GLeeFuncPtr_wglDisableGenlockI3D
+#endif
+#ifndef GLEE_H_DEFINED_wglIsEnabledGenlockI3D
+#define GLEE_H_DEFINED_wglIsEnabledGenlockI3D
+  typedef BOOL (APIENTRYP GLEEPFNWGLISENABLEDGENLOCKI3DPROC) (HDC  hDC, BOOL * pFlag);
+  GLEE_EXTERN GLEEPFNWGLISENABLEDGENLOCKI3DPROC GLeeFuncPtr_wglIsEnabledGenlockI3D;
+  #define wglIsEnabledGenlockI3D GLeeFuncPtr_wglIsEnabledGenlockI3D
+#endif
+#ifndef GLEE_H_DEFINED_wglGenlockSourceI3D
+#define GLEE_H_DEFINED_wglGenlockSourceI3D
+  typedef BOOL (APIENTRYP GLEEPFNWGLGENLOCKSOURCEI3DPROC) (HDC  hDC, UINT  uSource);
+  GLEE_EXTERN GLEEPFNWGLGENLOCKSOURCEI3DPROC GLeeFuncPtr_wglGenlockSourceI3D;
+  #define wglGenlockSourceI3D GLeeFuncPtr_wglGenlockSourceI3D
+#endif
+#ifndef GLEE_H_DEFINED_wglGetGenlockSourceI3D
+#define GLEE_H_DEFINED_wglGetGenlockSourceI3D
+  typedef BOOL (APIENTRYP GLEEPFNWGLGETGENLOCKSOURCEI3DPROC) (HDC  hDC, UINT * uSource);
+  GLEE_EXTERN GLEEPFNWGLGETGENLOCKSOURCEI3DPROC GLeeFuncPtr_wglGetGenlockSourceI3D;
+  #define wglGetGenlockSourceI3D GLeeFuncPtr_wglGetGenlockSourceI3D
+#endif
+#ifndef GLEE_H_DEFINED_wglGenlockSourceEdgeI3D
+#define GLEE_H_DEFINED_wglGenlockSourceEdgeI3D
+  typedef BOOL (APIENTRYP GLEEPFNWGLGENLOCKSOURCEEDGEI3DPROC) (HDC  hDC, UINT  uEdge);
+  GLEE_EXTERN GLEEPFNWGLGENLOCKSOURCEEDGEI3DPROC GLeeFuncPtr_wglGenlockSourceEdgeI3D;
+  #define wglGenlockSourceEdgeI3D GLeeFuncPtr_wglGenlockSourceEdgeI3D
+#endif
+#ifndef GLEE_H_DEFINED_wglGetGenlockSourceEdgeI3D
+#define GLEE_H_DEFINED_wglGetGenlockSourceEdgeI3D
+  typedef BOOL (APIENTRYP GLEEPFNWGLGETGENLOCKSOURCEEDGEI3DPROC) (HDC  hDC, UINT * uEdge);
+  GLEE_EXTERN GLEEPFNWGLGETGENLOCKSOURCEEDGEI3DPROC GLeeFuncPtr_wglGetGenlockSourceEdgeI3D;
+  #define wglGetGenlockSourceEdgeI3D GLeeFuncPtr_wglGetGenlockSourceEdgeI3D
+#endif
+#ifndef GLEE_H_DEFINED_wglGenlockSampleRateI3D
+#define GLEE_H_DEFINED_wglGenlockSampleRateI3D
+  typedef BOOL (APIENTRYP GLEEPFNWGLGENLOCKSAMPLERATEI3DPROC) (HDC  hDC, UINT  uRate);
+  GLEE_EXTERN GLEEPFNWGLGENLOCKSAMPLERATEI3DPROC GLeeFuncPtr_wglGenlockSampleRateI3D;
+  #define wglGenlockSampleRateI3D GLeeFuncPtr_wglGenlockSampleRateI3D
+#endif
+#ifndef GLEE_H_DEFINED_wglGetGenlockSampleRateI3D
+#define GLEE_H_DEFINED_wglGetGenlockSampleRateI3D
+  typedef BOOL (APIENTRYP GLEEPFNWGLGETGENLOCKSAMPLERATEI3DPROC) (HDC  hDC, UINT * uRate);
+  GLEE_EXTERN GLEEPFNWGLGETGENLOCKSAMPLERATEI3DPROC GLeeFuncPtr_wglGetGenlockSampleRateI3D;
+  #define wglGetGenlockSampleRateI3D GLeeFuncPtr_wglGetGenlockSampleRateI3D
+#endif
+#ifndef GLEE_H_DEFINED_wglGenlockSourceDelayI3D
+#define GLEE_H_DEFINED_wglGenlockSourceDelayI3D
+  typedef BOOL (APIENTRYP GLEEPFNWGLGENLOCKSOURCEDELAYI3DPROC) (HDC  hDC, UINT  uDelay);
+  GLEE_EXTERN GLEEPFNWGLGENLOCKSOURCEDELAYI3DPROC GLeeFuncPtr_wglGenlockSourceDelayI3D;
+  #define wglGenlockSourceDelayI3D GLeeFuncPtr_wglGenlockSourceDelayI3D
+#endif
+#ifndef GLEE_H_DEFINED_wglGetGenlockSourceDelayI3D
+#define GLEE_H_DEFINED_wglGetGenlockSourceDelayI3D
+  typedef BOOL (APIENTRYP GLEEPFNWGLGETGENLOCKSOURCEDELAYI3DPROC) (HDC  hDC, UINT * uDelay);
+  GLEE_EXTERN GLEEPFNWGLGETGENLOCKSOURCEDELAYI3DPROC GLeeFuncPtr_wglGetGenlockSourceDelayI3D;
+  #define wglGetGenlockSourceDelayI3D GLeeFuncPtr_wglGetGenlockSourceDelayI3D
+#endif
+#ifndef GLEE_H_DEFINED_wglQueryGenlockMaxSourceDelayI3D
+#define GLEE_H_DEFINED_wglQueryGenlockMaxSourceDelayI3D
+  typedef BOOL (APIENTRYP GLEEPFNWGLQUERYGENLOCKMAXSOURCEDELAYI3DPROC) (HDC  hDC, UINT * uMaxLineDelay, UINT * uMaxPixelDelay);
+  GLEE_EXTERN GLEEPFNWGLQUERYGENLOCKMAXSOURCEDELAYI3DPROC GLeeFuncPtr_wglQueryGenlockMaxSourceDelayI3D;
+  #define wglQueryGenlockMaxSourceDelayI3D GLeeFuncPtr_wglQueryGenlockMaxSourceDelayI3D
+#endif
+#endif 
+
+/* WGL_I3D_image_buffer */
+
+#ifndef WGL_I3D_image_buffer
+#define WGL_I3D_image_buffer 1
+#define __GLEE_WGL_I3D_image_buffer 1
+/* Constants */
+#define WGL_IMAGE_BUFFER_MIN_ACCESS_I3D                    0x00000001
+#define WGL_IMAGE_BUFFER_LOCK_I3D                          0x00000002
+#ifndef GLEE_H_DEFINED_wglCreateImageBufferI3D
+#define GLEE_H_DEFINED_wglCreateImageBufferI3D
+  typedef LPVOID (APIENTRYP GLEEPFNWGLCREATEIMAGEBUFFERI3DPROC) (HDC  hDC, DWORD  dwSize, UINT  uFlags);
+  GLEE_EXTERN GLEEPFNWGLCREATEIMAGEBUFFERI3DPROC GLeeFuncPtr_wglCreateImageBufferI3D;
+  #define wglCreateImageBufferI3D GLeeFuncPtr_wglCreateImageBufferI3D
+#endif
+#ifndef GLEE_H_DEFINED_wglDestroyImageBufferI3D
+#define GLEE_H_DEFINED_wglDestroyImageBufferI3D
+  typedef BOOL (APIENTRYP GLEEPFNWGLDESTROYIMAGEBUFFERI3DPROC) (HDC  hDC, LPVOID  pAddress);
+  GLEE_EXTERN GLEEPFNWGLDESTROYIMAGEBUFFERI3DPROC GLeeFuncPtr_wglDestroyImageBufferI3D;
+  #define wglDestroyImageBufferI3D GLeeFuncPtr_wglDestroyImageBufferI3D
+#endif
+#ifndef GLEE_H_DEFINED_wglAssociateImageBufferEventsI3D
+#define GLEE_H_DEFINED_wglAssociateImageBufferEventsI3D
+  typedef BOOL (APIENTRYP GLEEPFNWGLASSOCIATEIMAGEBUFFEREVENTSI3DPROC) (HDC  hDC, const HANDLE * pEvent, const LPVOID * pAddress, const DWORD * pSize, UINT  count);
+  GLEE_EXTERN GLEEPFNWGLASSOCIATEIMAGEBUFFEREVENTSI3DPROC GLeeFuncPtr_wglAssociateImageBufferEventsI3D;
+  #define wglAssociateImageBufferEventsI3D GLeeFuncPtr_wglAssociateImageBufferEventsI3D
+#endif
+#ifndef GLEE_H_DEFINED_wglReleaseImageBufferEventsI3D
+#define GLEE_H_DEFINED_wglReleaseImageBufferEventsI3D
+  typedef BOOL (APIENTRYP GLEEPFNWGLRELEASEIMAGEBUFFEREVENTSI3DPROC) (HDC  hDC, const LPVOID * pAddress, UINT  count);
+  GLEE_EXTERN GLEEPFNWGLRELEASEIMAGEBUFFEREVENTSI3DPROC GLeeFuncPtr_wglReleaseImageBufferEventsI3D;
+  #define wglReleaseImageBufferEventsI3D GLeeFuncPtr_wglReleaseImageBufferEventsI3D
+#endif
+#endif 
+
+/* WGL_I3D_swap_frame_lock */
+
+#ifndef WGL_I3D_swap_frame_lock
+#define WGL_I3D_swap_frame_lock 1
+#define __GLEE_WGL_I3D_swap_frame_lock 1
+/* Constants */
+#ifndef GLEE_H_DEFINED_wglEnableFrameLockI3D
+#define GLEE_H_DEFINED_wglEnableFrameLockI3D
+  typedef BOOL (APIENTRYP GLEEPFNWGLENABLEFRAMELOCKI3DPROC) ();
+  GLEE_EXTERN GLEEPFNWGLENABLEFRAMELOCKI3DPROC GLeeFuncPtr_wglEnableFrameLockI3D;
+  #define wglEnableFrameLockI3D GLeeFuncPtr_wglEnableFrameLockI3D
+#endif
+#ifndef GLEE_H_DEFINED_wglDisableFrameLockI3D
+#define GLEE_H_DEFINED_wglDisableFrameLockI3D
+  typedef BOOL (APIENTRYP GLEEPFNWGLDISABLEFRAMELOCKI3DPROC) ();
+  GLEE_EXTERN GLEEPFNWGLDISABLEFRAMELOCKI3DPROC GLeeFuncPtr_wglDisableFrameLockI3D;
+  #define wglDisableFrameLockI3D GLeeFuncPtr_wglDisableFrameLockI3D
+#endif
+#ifndef GLEE_H_DEFINED_wglIsEnabledFrameLockI3D
+#define GLEE_H_DEFINED_wglIsEnabledFrameLockI3D
+  typedef BOOL (APIENTRYP GLEEPFNWGLISENABLEDFRAMELOCKI3DPROC) (BOOL * pFlag);
+  GLEE_EXTERN GLEEPFNWGLISENABLEDFRAMELOCKI3DPROC GLeeFuncPtr_wglIsEnabledFrameLockI3D;
+  #define wglIsEnabledFrameLockI3D GLeeFuncPtr_wglIsEnabledFrameLockI3D
+#endif
+#ifndef GLEE_H_DEFINED_wglQueryFrameLockMasterI3D
+#define GLEE_H_DEFINED_wglQueryFrameLockMasterI3D
+  typedef BOOL (APIENTRYP GLEEPFNWGLQUERYFRAMELOCKMASTERI3DPROC) (BOOL * pFlag);
+  GLEE_EXTERN GLEEPFNWGLQUERYFRAMELOCKMASTERI3DPROC GLeeFuncPtr_wglQueryFrameLockMasterI3D;
+  #define wglQueryFrameLockMasterI3D GLeeFuncPtr_wglQueryFrameLockMasterI3D
+#endif
+#endif 
+
+/* WGL_NV_render_depth_texture */
+
+#ifndef WGL_NV_render_depth_texture
+#define WGL_NV_render_depth_texture 1
+#define __GLEE_WGL_NV_render_depth_texture 1
+/* Constants */
+#define WGL_BIND_TO_TEXTURE_DEPTH_NV                       0x20A3
+#define WGL_BIND_TO_TEXTURE_RECTANGLE_DEPTH_NV             0x20A4
+#define WGL_DEPTH_TEXTURE_FORMAT_NV                        0x20A5
+#define WGL_TEXTURE_DEPTH_COMPONENT_NV                     0x20A6
+#define WGL_DEPTH_COMPONENT_NV                             0x20A7
+#endif 
+
+/* WGL_NV_render_texture_rectangle */
+
+#ifndef WGL_NV_render_texture_rectangle
+#define WGL_NV_render_texture_rectangle 1
+#define __GLEE_WGL_NV_render_texture_rectangle 1
+/* Constants */
+#define WGL_BIND_TO_TEXTURE_RECTANGLE_RGB_NV               0x20A0
+#define WGL_BIND_TO_TEXTURE_RECTANGLE_RGBA_NV              0x20A1
+#define WGL_TEXTURE_RECTANGLE_NV                           0x20A2
+#endif 
+
+/* WGL_ATI_pixel_format_float */
+
+#ifndef WGL_ATI_pixel_format_float
+#define WGL_ATI_pixel_format_float 1
+#define __GLEE_WGL_ATI_pixel_format_float 1
+/* Constants */
+#define WGL_TYPE_RGBA_FLOAT_ATI                            0x21A0
+#endif 
+
+/* WGL_NV_float_buffer */
+
+#ifndef WGL_NV_float_buffer
+#define WGL_NV_float_buffer 1
+#define __GLEE_WGL_NV_float_buffer 1
+/* Constants */
+#define WGL_FLOAT_COMPONENTS_NV                            0x20B0
+#define WGL_BIND_TO_TEXTURE_RECTANGLE_FLOAT_R_NV           0x20B1
+#define WGL_BIND_TO_TEXTURE_RECTANGLE_FLOAT_RG_NV          0x20B2
+#define WGL_BIND_TO_TEXTURE_RECTANGLE_FLOAT_RGB_NV         0x20B3
+#define WGL_BIND_TO_TEXTURE_RECTANGLE_FLOAT_RGBA_NV        0x20B4
+#define WGL_TEXTURE_FLOAT_R_NV                             0x20B5
+#define WGL_TEXTURE_FLOAT_RG_NV                            0x20B6
+#define WGL_TEXTURE_FLOAT_RGB_NV                           0x20B7
+#define WGL_TEXTURE_FLOAT_RGBA_NV                          0x20B8
+#endif 
+
+/* WGL_3DL_stereo_control */
+
+#ifndef WGL_3DL_stereo_control
+#define WGL_3DL_stereo_control 1
+#define __GLEE_WGL_3DL_stereo_control 1
+/* Constants */
+#define WGL_STEREO_EMITTER_ENABLE_3DL                      0x2055
+#define WGL_STEREO_EMITTER_DISABLE_3DL                     0x2056
+#define WGL_STEREO_POLARITY_NORMAL_3DL                     0x2057
+#define WGL_STEREO_POLARITY_INVERT_3DL                     0x2058
+#ifndef GLEE_H_DEFINED_wglSetStereoEmitterState3DL
+#define GLEE_H_DEFINED_wglSetStereoEmitterState3DL
+  typedef BOOL (APIENTRYP GLEEPFNWGLSETSTEREOEMITTERSTATE3DLPROC) (HDC  hDC, UINT  uState);
+  GLEE_EXTERN GLEEPFNWGLSETSTEREOEMITTERSTATE3DLPROC GLeeFuncPtr_wglSetStereoEmitterState3DL;
+  #define wglSetStereoEmitterState3DL GLeeFuncPtr_wglSetStereoEmitterState3DL
+#endif
+#endif 
+
+/* WGL_EXT_pixel_format_packed_float */
+
+#ifndef WGL_EXT_pixel_format_packed_float
+#define WGL_EXT_pixel_format_packed_float 1
+#define __GLEE_WGL_EXT_pixel_format_packed_float 1
+/* Constants */
+#define WGL_TYPE_RGBA_UNSIGNED_FLOAT_EXT                   0x20A8
+#endif 
+
+/* WGL_EXT_framebuffer_sRGB */
+
+#ifndef WGL_EXT_framebuffer_sRGB
+#define WGL_EXT_framebuffer_sRGB 1
+#define __GLEE_WGL_EXT_framebuffer_sRGB 1
+/* Constants */
+#define WGL_FRAMEBUFFER_SRGB_CAPABLE_EXT                   0x20A9
+#endif 
+
+/* WGL_NV_present_video */
+
+#ifndef WGL_NV_present_video
+#define WGL_NV_present_video 1
+#define __GLEE_WGL_NV_present_video 1
+/* Constants */
+#define WGL_NUM_VIDEO_SLOTS_NV                             0x20F0
+#ifndef GLEE_H_DEFINED_wglEnumerateVideoDevicesNV
+#define GLEE_H_DEFINED_wglEnumerateVideoDevicesNV
+  typedef int (APIENTRYP GLEEPFNWGLENUMERATEVIDEODEVICESNVPROC) (HDC  hDC, HVIDEOOUTPUTDEVICENV * phDeviceList);
+  GLEE_EXTERN GLEEPFNWGLENUMERATEVIDEODEVICESNVPROC GLeeFuncPtr_wglEnumerateVideoDevicesNV;
+  #define wglEnumerateVideoDevicesNV GLeeFuncPtr_wglEnumerateVideoDevicesNV
+#endif
+#ifndef GLEE_H_DEFINED_wglBindVideoDeviceNV
+#define GLEE_H_DEFINED_wglBindVideoDeviceNV
+  typedef BOOL (APIENTRYP GLEEPFNWGLBINDVIDEODEVICENVPROC) (HDC  hDC, unsigned int  uVideoSlot, HVIDEOOUTPUTDEVICENV  hVideoDevice, const int * piAttribList);
+  GLEE_EXTERN GLEEPFNWGLBINDVIDEODEVICENVPROC GLeeFuncPtr_wglBindVideoDeviceNV;
+  #define wglBindVideoDeviceNV GLeeFuncPtr_wglBindVideoDeviceNV
+#endif
+#ifndef GLEE_H_DEFINED_wglQueryCurrentContextNV
+#define GLEE_H_DEFINED_wglQueryCurrentContextNV
+  typedef BOOL (APIENTRYP GLEEPFNWGLQUERYCURRENTCONTEXTNVPROC) (int  iAttribute, int * piValue);
+  GLEE_EXTERN GLEEPFNWGLQUERYCURRENTCONTEXTNVPROC GLeeFuncPtr_wglQueryCurrentContextNV;
+  #define wglQueryCurrentContextNV GLeeFuncPtr_wglQueryCurrentContextNV
+#endif
+#endif 
+
+/* WGL_NV_swap_group */
+
+#ifndef WGL_NV_swap_group
+#define WGL_NV_swap_group 1
+#define __GLEE_WGL_NV_swap_group 1
+/* Constants */
+#ifndef GLEE_H_DEFINED_wglJoinSwapGroupNV
+#define GLEE_H_DEFINED_wglJoinSwapGroupNV
+  typedef BOOL (APIENTRYP GLEEPFNWGLJOINSWAPGROUPNVPROC) (HDC  hDC, GLuint  group);
+  GLEE_EXTERN GLEEPFNWGLJOINSWAPGROUPNVPROC GLeeFuncPtr_wglJoinSwapGroupNV;
+  #define wglJoinSwapGroupNV GLeeFuncPtr_wglJoinSwapGroupNV
+#endif
+#ifndef GLEE_H_DEFINED_wglBindSwapBarrierNV
+#define GLEE_H_DEFINED_wglBindSwapBarrierNV
+  typedef BOOL (APIENTRYP GLEEPFNWGLBINDSWAPBARRIERNVPROC) (GLuint  group, GLuint  barrier);
+  GLEE_EXTERN GLEEPFNWGLBINDSWAPBARRIERNVPROC GLeeFuncPtr_wglBindSwapBarrierNV;
+  #define wglBindSwapBarrierNV GLeeFuncPtr_wglBindSwapBarrierNV
+#endif
+#ifndef GLEE_H_DEFINED_wglQuerySwapGroupNV
+#define GLEE_H_DEFINED_wglQuerySwapGroupNV
+  typedef BOOL (APIENTRYP GLEEPFNWGLQUERYSWAPGROUPNVPROC) (HDC  hDC, GLuint * group, GLuint * barrier);
+  GLEE_EXTERN GLEEPFNWGLQUERYSWAPGROUPNVPROC GLeeFuncPtr_wglQuerySwapGroupNV;
+  #define wglQuerySwapGroupNV GLeeFuncPtr_wglQuerySwapGroupNV
+#endif
+#ifndef GLEE_H_DEFINED_wglQueryMaxSwapGroupsNV
+#define GLEE_H_DEFINED_wglQueryMaxSwapGroupsNV
+  typedef BOOL (APIENTRYP GLEEPFNWGLQUERYMAXSWAPGROUPSNVPROC) (HDC  hDC, GLuint * maxGroups, GLuint * maxBarriers);
+  GLEE_EXTERN GLEEPFNWGLQUERYMAXSWAPGROUPSNVPROC GLeeFuncPtr_wglQueryMaxSwapGroupsNV;
+  #define wglQueryMaxSwapGroupsNV GLeeFuncPtr_wglQueryMaxSwapGroupsNV
+#endif
+#ifndef GLEE_H_DEFINED_wglQueryFrameCountNV
+#define GLEE_H_DEFINED_wglQueryFrameCountNV
+  typedef BOOL (APIENTRYP GLEEPFNWGLQUERYFRAMECOUNTNVPROC) (HDC  hDC, GLuint * count);
+  GLEE_EXTERN GLEEPFNWGLQUERYFRAMECOUNTNVPROC GLeeFuncPtr_wglQueryFrameCountNV;
+  #define wglQueryFrameCountNV GLeeFuncPtr_wglQueryFrameCountNV
+#endif
+#ifndef GLEE_H_DEFINED_wglResetFrameCountNV
+#define GLEE_H_DEFINED_wglResetFrameCountNV
+  typedef BOOL (APIENTRYP GLEEPFNWGLRESETFRAMECOUNTNVPROC) (HDC  hDC);
+  GLEE_EXTERN GLEEPFNWGLRESETFRAMECOUNTNVPROC GLeeFuncPtr_wglResetFrameCountNV;
+  #define wglResetFrameCountNV GLeeFuncPtr_wglResetFrameCountNV
+#endif
+#endif 
+
+/* WGL_NV_gpu_affinity */
+
+#ifndef WGL_NV_gpu_affinity
+#define WGL_NV_gpu_affinity 1
+#define __GLEE_WGL_NV_gpu_affinity 1
+/* Constants */
+#define WGL_ERROR_INCOMPATIBLE_AFFINITY_MASKS_NV           0x20D0
+#define WGL_ERROR_MISSING_AFFINITY_MASK_NV                 0x20D1
+#ifndef GLEE_H_DEFINED_wglEnumGpusNV
+#define GLEE_H_DEFINED_wglEnumGpusNV
+  typedef BOOL (APIENTRYP GLEEPFNWGLENUMGPUSNVPROC) (UINT  iGpuIndex, HGPUNV * phGpu);
+  GLEE_EXTERN GLEEPFNWGLENUMGPUSNVPROC GLeeFuncPtr_wglEnumGpusNV;
+  #define wglEnumGpusNV GLeeFuncPtr_wglEnumGpusNV
+#endif
+#ifndef GLEE_H_DEFINED_wglEnumGpuDevicesNV
+#define GLEE_H_DEFINED_wglEnumGpuDevicesNV
+  typedef BOOL (APIENTRYP GLEEPFNWGLENUMGPUDEVICESNVPROC) (HGPUNV  hGpu, UINT  iDeviceIndex, PGPU_DEVICE  lpGpuDevice);
+  GLEE_EXTERN GLEEPFNWGLENUMGPUDEVICESNVPROC GLeeFuncPtr_wglEnumGpuDevicesNV;
+  #define wglEnumGpuDevicesNV GLeeFuncPtr_wglEnumGpuDevicesNV
+#endif
+#ifndef GLEE_H_DEFINED_wglCreateAffinityDCNV
+#define GLEE_H_DEFINED_wglCreateAffinityDCNV
+  typedef HDC (APIENTRYP GLEEPFNWGLCREATEAFFINITYDCNVPROC) (const HGPUNV * phGpuList);
+  GLEE_EXTERN GLEEPFNWGLCREATEAFFINITYDCNVPROC GLeeFuncPtr_wglCreateAffinityDCNV;
+  #define wglCreateAffinityDCNV GLeeFuncPtr_wglCreateAffinityDCNV
+#endif
+#ifndef GLEE_H_DEFINED_wglEnumGpusFromAffinityDCNV
+#define GLEE_H_DEFINED_wglEnumGpusFromAffinityDCNV
+  typedef BOOL (APIENTRYP GLEEPFNWGLENUMGPUSFROMAFFINITYDCNVPROC) (HDC  hAffinityDC, UINT  iGpuIndex, HGPUNV * hGpu);
+  GLEE_EXTERN GLEEPFNWGLENUMGPUSFROMAFFINITYDCNVPROC GLeeFuncPtr_wglEnumGpusFromAffinityDCNV;
+  #define wglEnumGpusFromAffinityDCNV GLeeFuncPtr_wglEnumGpusFromAffinityDCNV
+#endif
+#ifndef GLEE_H_DEFINED_wglDeleteDCNV
+#define GLEE_H_DEFINED_wglDeleteDCNV
+  typedef BOOL (APIENTRYP GLEEPFNWGLDELETEDCNVPROC) (HDC  hdc);
+  GLEE_EXTERN GLEEPFNWGLDELETEDCNVPROC GLeeFuncPtr_wglDeleteDCNV;
+  #define wglDeleteDCNV GLeeFuncPtr_wglDeleteDCNV
+#endif
+#endif 
+
+/* WGL_AMD_gpu_association */
+
+#ifndef WGL_AMD_gpu_association
+#define WGL_AMD_gpu_association 1
+#define __GLEE_WGL_AMD_gpu_association 1
+/* Constants */
+#define WGL_GPU_VENDOR_AMD                                 0x1F00
+#define WGL_GPU_RENDERER_STRING_AMD                        0x1F01
+#define WGL_GPU_OPENGL_VERSION_STRING_AMD                  0x1F02
+#define WGL_GPU_FASTEST_TARGET_GPUS_AMD                    0x21A2
+#define WGL_GPU_RAM_AMD                                    0x21A3
+#define WGL_GPU_CLOCK_AMD                                  0x21A4
+#define WGL_GPU_NUM_PIPES_AMD                              0x21A5
+#define WGL_GPU_NUM_SIMD_AMD                               0x21A6
+#define WGL_GPU_NUM_RB_AMD                                 0x21A7
+#define WGL_GPU_NUM_SPI_AMD                                0x21A8
+#ifndef GLEE_H_DEFINED_wglGetGPUIDsAMD
+#define GLEE_H_DEFINED_wglGetGPUIDsAMD
+  typedef UINT (APIENTRYP GLEEPFNWGLGETGPUIDSAMDPROC) (UINT  maxCount, UINT * ids);
+  GLEE_EXTERN GLEEPFNWGLGETGPUIDSAMDPROC GLeeFuncPtr_wglGetGPUIDsAMD;
+  #define wglGetGPUIDsAMD GLeeFuncPtr_wglGetGPUIDsAMD
+#endif
+#ifndef GLEE_H_DEFINED_wglGetGPUInfoAMD
+#define GLEE_H_DEFINED_wglGetGPUInfoAMD
+  typedef INT (APIENTRYP GLEEPFNWGLGETGPUINFOAMDPROC) (UINT  id, int  property, GLenum  dataType, UINT  size, void * data);
+  GLEE_EXTERN GLEEPFNWGLGETGPUINFOAMDPROC GLeeFuncPtr_wglGetGPUInfoAMD;
+  #define wglGetGPUInfoAMD GLeeFuncPtr_wglGetGPUInfoAMD
+#endif
+#ifndef GLEE_H_DEFINED_wglGetContextGPUIDAMD
+#define GLEE_H_DEFINED_wglGetContextGPUIDAMD
+  typedef UINT (APIENTRYP GLEEPFNWGLGETCONTEXTGPUIDAMDPROC) (HGLRC  hglrc);
+  GLEE_EXTERN GLEEPFNWGLGETCONTEXTGPUIDAMDPROC GLeeFuncPtr_wglGetContextGPUIDAMD;
+  #define wglGetContextGPUIDAMD GLeeFuncPtr_wglGetContextGPUIDAMD
+#endif
+#ifndef GLEE_H_DEFINED_wglCreateAssociatedContextAMD
+#define GLEE_H_DEFINED_wglCreateAssociatedContextAMD
+  typedef HGLRC (APIENTRYP GLEEPFNWGLCREATEASSOCIATEDCONTEXTAMDPROC) (UINT  id);
+  GLEE_EXTERN GLEEPFNWGLCREATEASSOCIATEDCONTEXTAMDPROC GLeeFuncPtr_wglCreateAssociatedContextAMD;
+  #define wglCreateAssociatedContextAMD GLeeFuncPtr_wglCreateAssociatedContextAMD
+#endif
+#ifndef GLEE_H_DEFINED_wglCreateAssociatedContextAttribsAMD
+#define GLEE_H_DEFINED_wglCreateAssociatedContextAttribsAMD
+  typedef HGLRC (APIENTRYP GLEEPFNWGLCREATEASSOCIATEDCONTEXTATTRIBSAMDPROC) (UINT  id, HGLRC  hShareContext, const int * attribList);
+  GLEE_EXTERN GLEEPFNWGLCREATEASSOCIATEDCONTEXTATTRIBSAMDPROC GLeeFuncPtr_wglCreateAssociatedContextAttribsAMD;
+  #define wglCreateAssociatedContextAttribsAMD GLeeFuncPtr_wglCreateAssociatedContextAttribsAMD
+#endif
+#ifndef GLEE_H_DEFINED_wglDeleteAssociatedContextAMD
+#define GLEE_H_DEFINED_wglDeleteAssociatedContextAMD
+  typedef BOOL (APIENTRYP GLEEPFNWGLDELETEASSOCIATEDCONTEXTAMDPROC) (HGLRC  hglrc);
+  GLEE_EXTERN GLEEPFNWGLDELETEASSOCIATEDCONTEXTAMDPROC GLeeFuncPtr_wglDeleteAssociatedContextAMD;
+  #define wglDeleteAssociatedContextAMD GLeeFuncPtr_wglDeleteAssociatedContextAMD
+#endif
+#ifndef GLEE_H_DEFINED_wglMakeAssociatedContextCurrentAMD
+#define GLEE_H_DEFINED_wglMakeAssociatedContextCurrentAMD
+  typedef BOOL (APIENTRYP GLEEPFNWGLMAKEASSOCIATEDCONTEXTCURRENTAMDPROC) (HGLRC  hglrc);
+  GLEE_EXTERN GLEEPFNWGLMAKEASSOCIATEDCONTEXTCURRENTAMDPROC GLeeFuncPtr_wglMakeAssociatedContextCurrentAMD;
+  #define wglMakeAssociatedContextCurrentAMD GLeeFuncPtr_wglMakeAssociatedContextCurrentAMD
+#endif
+#ifndef GLEE_H_DEFINED_wglGetCurrentAssociatedContextAMD
+#define GLEE_H_DEFINED_wglGetCurrentAssociatedContextAMD
+  typedef HGLRC (APIENTRYP GLEEPFNWGLGETCURRENTASSOCIATEDCONTEXTAMDPROC) ();
+  GLEE_EXTERN GLEEPFNWGLGETCURRENTASSOCIATEDCONTEXTAMDPROC GLeeFuncPtr_wglGetCurrentAssociatedContextAMD;
+  #define wglGetCurrentAssociatedContextAMD GLeeFuncPtr_wglGetCurrentAssociatedContextAMD
+#endif
+#ifndef GLEE_H_DEFINED_wglBlitContextFramebufferAMD
+#define GLEE_H_DEFINED_wglBlitContextFramebufferAMD
+  typedef VOID (APIENTRYP GLEEPFNWGLBLITCONTEXTFRAMEBUFFERAMDPROC) (HGLRC  dstCtx, GLint  srcX0, GLint  srcY0, GLint  srcX1, GLint  srcY1, GLint  dstX0, GLint  dstY0, GLint  dstX1, GLint  dstY1, GLbitfield  mask, GLenum  filter);
+  GLEE_EXTERN GLEEPFNWGLBLITCONTEXTFRAMEBUFFERAMDPROC GLeeFuncPtr_wglBlitContextFramebufferAMD;
+  #define wglBlitContextFramebufferAMD GLeeFuncPtr_wglBlitContextFramebufferAMD
+#endif
+#endif 
+
+/* WGL_NV_copy_image */
+
+#ifndef WGL_NV_copy_image
+#define WGL_NV_copy_image 1
+#define __GLEE_WGL_NV_copy_image 1
+/* Constants */
+#ifndef GLEE_H_DEFINED_wglCopyImageSubDataNV
+#define GLEE_H_DEFINED_wglCopyImageSubDataNV
+  typedef BOOL (APIENTRYP GLEEPFNWGLCOPYIMAGESUBDATANVPROC) (HGLRC  hSrcRC, GLuint  srcName, GLenum  srcTarget, GLint  srcLevel, GLint  srcX, GLint  srcY, GLint  srcZ, HGLRC  hDstRC, GLuint  dstName, GLenum  dstTarget, GLint  dstLevel, GLint  dstX, GLint  dstY, GLint  dstZ, GLsizei  width, GLsizei  height, GLsizei  depth);
+  GLEE_EXTERN GLEEPFNWGLCOPYIMAGESUBDATANVPROC GLeeFuncPtr_wglCopyImageSubDataNV;
+  #define wglCopyImageSubDataNV GLeeFuncPtr_wglCopyImageSubDataNV
+#endif
+#endif 
+
+/* WGL_NV_multisample_coverage */
+
+#ifndef WGL_NV_multisample_coverage
+#define WGL_NV_multisample_coverage 1
+#define __GLEE_WGL_NV_multisample_coverage 1
+/* Constants */
+#define WGL_COVERAGE_SAMPLES_NV                            0x2042
+#define WGL_COLOR_SAMPLES_NV                               0x20B9
+#endif 
+
+/* WGL_EXT_create_context_es2_profile */
+
+#ifndef WGL_EXT_create_context_es2_profile
+#define WGL_EXT_create_context_es2_profile 1
+#define __GLEE_WGL_EXT_create_context_es2_profile 1
+/* Constants */
+#define WGL_CONTEXT_ES2_PROFILE_BIT_EXT                    0x00000004
+#endif 
+
+/* WGL_NV_DX_interop */
+
+#ifndef WGL_NV_DX_interop
+#define WGL_NV_DX_interop 1
+#define __GLEE_WGL_NV_DX_interop 1
+/* Constants */
+#define WGL_ACCESS_READ_ONLY_NV                            0x00000000
+#define WGL_ACCESS_READ_WRITE_NV                           0x00000001
+#define WGL_ACCESS_WRITE_DISCARD_NV                        0x00000002
+#ifndef GLEE_H_DEFINED_wglDXSetResourceShareHandleNV
+#define GLEE_H_DEFINED_wglDXSetResourceShareHandleNV
+  typedef BOOL (APIENTRYP GLEEPFNWGLDXSETRESOURCESHAREHANDLENVPROC) (void * dxObject, HANDLE  shareHandle);
+  GLEE_EXTERN GLEEPFNWGLDXSETRESOURCESHAREHANDLENVPROC GLeeFuncPtr_wglDXSetResourceShareHandleNV;
+  #define wglDXSetResourceShareHandleNV GLeeFuncPtr_wglDXSetResourceShareHandleNV
+#endif
+#ifndef GLEE_H_DEFINED_wglDXOpenDeviceNV
+#define GLEE_H_DEFINED_wglDXOpenDeviceNV
+  typedef HANDLE (APIENTRYP GLEEPFNWGLDXOPENDEVICENVPROC) (void * dxDevice);
+  GLEE_EXTERN GLEEPFNWGLDXOPENDEVICENVPROC GLeeFuncPtr_wglDXOpenDeviceNV;
+  #define wglDXOpenDeviceNV GLeeFuncPtr_wglDXOpenDeviceNV
+#endif
+#ifndef GLEE_H_DEFINED_wglDXCloseDeviceNV
+#define GLEE_H_DEFINED_wglDXCloseDeviceNV
+  typedef BOOL (APIENTRYP GLEEPFNWGLDXCLOSEDEVICENVPROC) (HANDLE  hDevice);
+  GLEE_EXTERN GLEEPFNWGLDXCLOSEDEVICENVPROC GLeeFuncPtr_wglDXCloseDeviceNV;
+  #define wglDXCloseDeviceNV GLeeFuncPtr_wglDXCloseDeviceNV
+#endif
+#ifndef GLEE_H_DEFINED_wglDXRegisterObjectNV
+#define GLEE_H_DEFINED_wglDXRegisterObjectNV
+  typedef HANDLE (APIENTRYP GLEEPFNWGLDXREGISTEROBJECTNVPROC) (HANDLE  hDevice, void * dxObject, GLuint  name, GLenum  type, GLenum  access);
+  GLEE_EXTERN GLEEPFNWGLDXREGISTEROBJECTNVPROC GLeeFuncPtr_wglDXRegisterObjectNV;
+  #define wglDXRegisterObjectNV GLeeFuncPtr_wglDXRegisterObjectNV
+#endif
+#ifndef GLEE_H_DEFINED_wglDXUnregisterObjectNV
+#define GLEE_H_DEFINED_wglDXUnregisterObjectNV
+  typedef BOOL (APIENTRYP GLEEPFNWGLDXUNREGISTEROBJECTNVPROC) (HANDLE  hDevice, HANDLE  hObject);
+  GLEE_EXTERN GLEEPFNWGLDXUNREGISTEROBJECTNVPROC GLeeFuncPtr_wglDXUnregisterObjectNV;
+  #define wglDXUnregisterObjectNV GLeeFuncPtr_wglDXUnregisterObjectNV
+#endif
+#ifndef GLEE_H_DEFINED_wglDXObjectAccessNV
+#define GLEE_H_DEFINED_wglDXObjectAccessNV
+  typedef BOOL (APIENTRYP GLEEPFNWGLDXOBJECTACCESSNVPROC) (HANDLE  hObject, GLenum  access);
+  GLEE_EXTERN GLEEPFNWGLDXOBJECTACCESSNVPROC GLeeFuncPtr_wglDXObjectAccessNV;
+  #define wglDXObjectAccessNV GLeeFuncPtr_wglDXObjectAccessNV
+#endif
+#ifndef GLEE_H_DEFINED_wglDXLockObjectsNV
+#define GLEE_H_DEFINED_wglDXLockObjectsNV
+  typedef BOOL (APIENTRYP GLEEPFNWGLDXLOCKOBJECTSNVPROC) (HANDLE  hDevice, GLint  count, HANDLE * hObjects);
+  GLEE_EXTERN GLEEPFNWGLDXLOCKOBJECTSNVPROC GLeeFuncPtr_wglDXLockObjectsNV;
+  #define wglDXLockObjectsNV GLeeFuncPtr_wglDXLockObjectsNV
+#endif
+#ifndef GLEE_H_DEFINED_wglDXUnlockObjectsNV
+#define GLEE_H_DEFINED_wglDXUnlockObjectsNV
+  typedef BOOL (APIENTRYP GLEEPFNWGLDXUNLOCKOBJECTSNVPROC) (HANDLE  hDevice, GLint  count, HANDLE * hObjects);
+  GLEE_EXTERN GLEEPFNWGLDXUNLOCKOBJECTSNVPROC GLeeFuncPtr_wglDXUnlockObjectsNV;
+  #define wglDXUnlockObjectsNV GLeeFuncPtr_wglDXUnlockObjectsNV
+#endif
+#endif 
+
+/* WGL_EXT_display_color_table */
+
+#ifndef WGL_EXT_display_color_table
+#define WGL_EXT_display_color_table 1
+#define __GLEE_WGL_EXT_display_color_table 1
+/* Constants */
+#ifndef GLEE_H_DEFINED_wglCreateDisplayColorTableEXT
+#define GLEE_H_DEFINED_wglCreateDisplayColorTableEXT
+  typedef GLboolean (APIENTRYP GLEEPFNWGLCREATEDISPLAYCOLORTABLEEXTPROC) (GLushort  id);
+  GLEE_EXTERN GLEEPFNWGLCREATEDISPLAYCOLORTABLEEXTPROC GLeeFuncPtr_wglCreateDisplayColorTableEXT;
+  #define wglCreateDisplayColorTableEXT GLeeFuncPtr_wglCreateDisplayColorTableEXT
+#endif
+#ifndef GLEE_H_DEFINED_wglLoadDisplayColorTableEXT
+#define GLEE_H_DEFINED_wglLoadDisplayColorTableEXT
+  typedef GLboolean (APIENTRYP GLEEPFNWGLLOADDISPLAYCOLORTABLEEXTPROC) (const GLushort * table, GLuint  length);
+  GLEE_EXTERN GLEEPFNWGLLOADDISPLAYCOLORTABLEEXTPROC GLeeFuncPtr_wglLoadDisplayColorTableEXT;
+  #define wglLoadDisplayColorTableEXT GLeeFuncPtr_wglLoadDisplayColorTableEXT
+#endif
+#ifndef GLEE_H_DEFINED_wglBindDisplayColorTableEXT
+#define GLEE_H_DEFINED_wglBindDisplayColorTableEXT
+  typedef GLboolean (APIENTRYP GLEEPFNWGLBINDDISPLAYCOLORTABLEEXTPROC) (GLushort  id);
+  GLEE_EXTERN GLEEPFNWGLBINDDISPLAYCOLORTABLEEXTPROC GLeeFuncPtr_wglBindDisplayColorTableEXT;
+  #define wglBindDisplayColorTableEXT GLeeFuncPtr_wglBindDisplayColorTableEXT
+#endif
+#ifndef GLEE_H_DEFINED_wglDestroyDisplayColorTableEXT
+#define GLEE_H_DEFINED_wglDestroyDisplayColorTableEXT
+  typedef VOID (APIENTRYP GLEEPFNWGLDESTROYDISPLAYCOLORTABLEEXTPROC) (GLushort  id);
+  GLEE_EXTERN GLEEPFNWGLDESTROYDISPLAYCOLORTABLEEXTPROC GLeeFuncPtr_wglDestroyDisplayColorTableEXT;
+  #define wglDestroyDisplayColorTableEXT GLeeFuncPtr_wglDestroyDisplayColorTableEXT
+#endif
+#endif 
+
+/* WGL_EXT_extensions_string */
+
+#ifndef WGL_EXT_extensions_string
+#define WGL_EXT_extensions_string 1
+#define __GLEE_WGL_EXT_extensions_string 1
+/* Constants */
+#ifndef GLEE_H_DEFINED_wglGetExtensionsStringEXT
+#define GLEE_H_DEFINED_wglGetExtensionsStringEXT
+  typedef const char * (APIENTRYP GLEEPFNWGLGETEXTENSIONSSTRINGEXTPROC) ();
+  GLEE_EXTERN GLEEPFNWGLGETEXTENSIONSSTRINGEXTPROC GLeeFuncPtr_wglGetExtensionsStringEXT;
+  #define wglGetExtensionsStringEXT GLeeFuncPtr_wglGetExtensionsStringEXT
+#endif
+#endif 
+
+/* WGL_EXT_swap_control */
+
+#ifndef WGL_EXT_swap_control
+#define WGL_EXT_swap_control 1
+#define __GLEE_WGL_EXT_swap_control 1
+/* Constants */
+#ifndef GLEE_H_DEFINED_wglSwapIntervalEXT
+#define GLEE_H_DEFINED_wglSwapIntervalEXT
+  typedef BOOL (APIENTRYP GLEEPFNWGLSWAPINTERVALEXTPROC) (int  interval);
+  GLEE_EXTERN GLEEPFNWGLSWAPINTERVALEXTPROC GLeeFuncPtr_wglSwapIntervalEXT;
+  #define wglSwapIntervalEXT GLeeFuncPtr_wglSwapIntervalEXT
+#endif
+#ifndef GLEE_H_DEFINED_wglGetSwapIntervalEXT
+#define GLEE_H_DEFINED_wglGetSwapIntervalEXT
+  typedef int (APIENTRYP GLEEPFNWGLGETSWAPINTERVALEXTPROC) ();
+  GLEE_EXTERN GLEEPFNWGLGETSWAPINTERVALEXTPROC GLeeFuncPtr_wglGetSwapIntervalEXT;
+  #define wglGetSwapIntervalEXT GLeeFuncPtr_wglGetSwapIntervalEXT
+#endif
+#endif 
+
+/* WGL_NV_vertex_array_range */
+
+#ifndef WGL_NV_vertex_array_range
+#define WGL_NV_vertex_array_range 1
+#define __GLEE_WGL_NV_vertex_array_range 1
+/* Constants */
+#ifndef GLEE_H_DEFINED_wglAllocateMemoryNV
+#define GLEE_H_DEFINED_wglAllocateMemoryNV
+  typedef void* (APIENTRYP GLEEPFNWGLALLOCATEMEMORYNVPROC) (GLsizei  size, GLfloat  readfreq, GLfloat  writefreq, GLfloat  priority);
+  GLEE_EXTERN GLEEPFNWGLALLOCATEMEMORYNVPROC GLeeFuncPtr_wglAllocateMemoryNV;
+  #define wglAllocateMemoryNV GLeeFuncPtr_wglAllocateMemoryNV
+#endif
+#ifndef GLEE_H_DEFINED_wglFreeMemoryNV
+#define GLEE_H_DEFINED_wglFreeMemoryNV
+  typedef void (APIENTRYP GLEEPFNWGLFREEMEMORYNVPROC) (void * pointer);
+  GLEE_EXTERN GLEEPFNWGLFREEMEMORYNVPROC GLeeFuncPtr_wglFreeMemoryNV;
+  #define wglFreeMemoryNV GLeeFuncPtr_wglFreeMemoryNV
+#endif
+#endif 
+
+/* WGL_OML_sync_control */
+
+#ifndef WGL_OML_sync_control
+#define WGL_OML_sync_control 1
+#define __GLEE_WGL_OML_sync_control 1
+/* Constants */
+#ifndef GLEE_H_DEFINED_wglGetSyncValuesOML
+#define GLEE_H_DEFINED_wglGetSyncValuesOML
+  typedef BOOL (APIENTRYP GLEEPFNWGLGETSYNCVALUESOMLPROC) (HDC  hdc, INT64 * ust, INT64 * msc, INT64 * sbc);
+  GLEE_EXTERN GLEEPFNWGLGETSYNCVALUESOMLPROC GLeeFuncPtr_wglGetSyncValuesOML;
+  #define wglGetSyncValuesOML GLeeFuncPtr_wglGetSyncValuesOML
+#endif
+#ifndef GLEE_H_DEFINED_wglGetMscRateOML
+#define GLEE_H_DEFINED_wglGetMscRateOML
+  typedef BOOL (APIENTRYP GLEEPFNWGLGETMSCRATEOMLPROC) (HDC  hdc, INT32 * numerator, INT32 * denominator);
+  GLEE_EXTERN GLEEPFNWGLGETMSCRATEOMLPROC GLeeFuncPtr_wglGetMscRateOML;
+  #define wglGetMscRateOML GLeeFuncPtr_wglGetMscRateOML
+#endif
+#ifndef GLEE_H_DEFINED_wglSwapBuffersMscOML
+#define GLEE_H_DEFINED_wglSwapBuffersMscOML
+  typedef INT64 (APIENTRYP GLEEPFNWGLSWAPBUFFERSMSCOMLPROC) (HDC  hdc, INT64  target_msc, INT64  divisor, INT64  remainder);
+  GLEE_EXTERN GLEEPFNWGLSWAPBUFFERSMSCOMLPROC GLeeFuncPtr_wglSwapBuffersMscOML;
+  #define wglSwapBuffersMscOML GLeeFuncPtr_wglSwapBuffersMscOML
+#endif
+#ifndef GLEE_H_DEFINED_wglSwapLayerBuffersMscOML
+#define GLEE_H_DEFINED_wglSwapLayerBuffersMscOML
+  typedef INT64 (APIENTRYP GLEEPFNWGLSWAPLAYERBUFFERSMSCOMLPROC) (HDC  hdc, int  fuPlanes, INT64  target_msc, INT64  divisor, INT64  remainder);
+  GLEE_EXTERN GLEEPFNWGLSWAPLAYERBUFFERSMSCOMLPROC GLeeFuncPtr_wglSwapLayerBuffersMscOML;
+  #define wglSwapLayerBuffersMscOML GLeeFuncPtr_wglSwapLayerBuffersMscOML
+#endif
+#ifndef GLEE_H_DEFINED_wglWaitForMscOML
+#define GLEE_H_DEFINED_wglWaitForMscOML
+  typedef BOOL (APIENTRYP GLEEPFNWGLWAITFORMSCOMLPROC) (HDC  hdc, INT64  target_msc, INT64  divisor, INT64  remainder, INT64 * ust, INT64 * msc, INT64 * sbc);
+  GLEE_EXTERN GLEEPFNWGLWAITFORMSCOMLPROC GLeeFuncPtr_wglWaitForMscOML;
+  #define wglWaitForMscOML GLeeFuncPtr_wglWaitForMscOML
+#endif
+#ifndef GLEE_H_DEFINED_wglWaitForSbcOML
+#define GLEE_H_DEFINED_wglWaitForSbcOML
+  typedef BOOL (APIENTRYP GLEEPFNWGLWAITFORSBCOMLPROC) (HDC  hdc, INT64  target_sbc, INT64 * ust, INT64 * msc, INT64 * sbc);
+  GLEE_EXTERN GLEEPFNWGLWAITFORSBCOMLPROC GLeeFuncPtr_wglWaitForSbcOML;
+  #define wglWaitForSbcOML GLeeFuncPtr_wglWaitForSbcOML
+#endif
+#endif 
+
+/* WGL_I3D_swap_frame_usage */
+
+#ifndef WGL_I3D_swap_frame_usage
+#define WGL_I3D_swap_frame_usage 1
+#define __GLEE_WGL_I3D_swap_frame_usage 1
+/* Constants */
+#ifndef GLEE_H_DEFINED_wglGetFrameUsageI3D
+#define GLEE_H_DEFINED_wglGetFrameUsageI3D
+  typedef BOOL (APIENTRYP GLEEPFNWGLGETFRAMEUSAGEI3DPROC) (float * pUsage);
+  GLEE_EXTERN GLEEPFNWGLGETFRAMEUSAGEI3DPROC GLeeFuncPtr_wglGetFrameUsageI3D;
+  #define wglGetFrameUsageI3D GLeeFuncPtr_wglGetFrameUsageI3D
+#endif
+#ifndef GLEE_H_DEFINED_wglBeginFrameTrackingI3D
+#define GLEE_H_DEFINED_wglBeginFrameTrackingI3D
+  typedef BOOL (APIENTRYP GLEEPFNWGLBEGINFRAMETRACKINGI3DPROC) ();
+  GLEE_EXTERN GLEEPFNWGLBEGINFRAMETRACKINGI3DPROC GLeeFuncPtr_wglBeginFrameTrackingI3D;
+  #define wglBeginFrameTrackingI3D GLeeFuncPtr_wglBeginFrameTrackingI3D
+#endif
+#ifndef GLEE_H_DEFINED_wglEndFrameTrackingI3D
+#define GLEE_H_DEFINED_wglEndFrameTrackingI3D
+  typedef BOOL (APIENTRYP GLEEPFNWGLENDFRAMETRACKINGI3DPROC) ();
+  GLEE_EXTERN GLEEPFNWGLENDFRAMETRACKINGI3DPROC GLeeFuncPtr_wglEndFrameTrackingI3D;
+  #define wglEndFrameTrackingI3D GLeeFuncPtr_wglEndFrameTrackingI3D
+#endif
+#ifndef GLEE_H_DEFINED_wglQueryFrameTrackingI3D
+#define GLEE_H_DEFINED_wglQueryFrameTrackingI3D
+  typedef BOOL (APIENTRYP GLEEPFNWGLQUERYFRAMETRACKINGI3DPROC) (DWORD * pFrameCount, DWORD * pMissedFrames, float * pLastMissedUsage);
+  GLEE_EXTERN GLEEPFNWGLQUERYFRAMETRACKINGI3DPROC GLeeFuncPtr_wglQueryFrameTrackingI3D;
+  #define wglQueryFrameTrackingI3D GLeeFuncPtr_wglQueryFrameTrackingI3D
+#endif
+#endif 
+
+/* WGL_NV_video_output */
+
+#ifndef WGL_NV_video_output
+#define WGL_NV_video_output 1
+#define __GLEE_WGL_NV_video_output 1
+/* Constants */
+#ifndef GLEE_H_DEFINED_wglGetVideoDeviceNV
+#define GLEE_H_DEFINED_wglGetVideoDeviceNV
+  typedef BOOL (APIENTRYP GLEEPFNWGLGETVIDEODEVICENVPROC) (HDC  hDC, int  numDevices, HPVIDEODEV * hVideoDevice);
+  GLEE_EXTERN GLEEPFNWGLGETVIDEODEVICENVPROC GLeeFuncPtr_wglGetVideoDeviceNV;
+  #define wglGetVideoDeviceNV GLeeFuncPtr_wglGetVideoDeviceNV
+#endif
+#ifndef GLEE_H_DEFINED_wglReleaseVideoDeviceNV
+#define GLEE_H_DEFINED_wglReleaseVideoDeviceNV
+  typedef BOOL (APIENTRYP GLEEPFNWGLRELEASEVIDEODEVICENVPROC) (HPVIDEODEV  hVideoDevice);
+  GLEE_EXTERN GLEEPFNWGLRELEASEVIDEODEVICENVPROC GLeeFuncPtr_wglReleaseVideoDeviceNV;
+  #define wglReleaseVideoDeviceNV GLeeFuncPtr_wglReleaseVideoDeviceNV
+#endif
+#ifndef GLEE_H_DEFINED_wglBindVideoImageNV
+#define GLEE_H_DEFINED_wglBindVideoImageNV
+  typedef BOOL (APIENTRYP GLEEPFNWGLBINDVIDEOIMAGENVPROC) (HPVIDEODEV  hVideoDevice, HPBUFFERARB  hPbuffer, int  iVideoBuffer);
+  GLEE_EXTERN GLEEPFNWGLBINDVIDEOIMAGENVPROC GLeeFuncPtr_wglBindVideoImageNV;
+  #define wglBindVideoImageNV GLeeFuncPtr_wglBindVideoImageNV
+#endif
+#ifndef GLEE_H_DEFINED_wglReleaseVideoImageNV
+#define GLEE_H_DEFINED_wglReleaseVideoImageNV
+  typedef BOOL (APIENTRYP GLEEPFNWGLRELEASEVIDEOIMAGENVPROC) (HPBUFFERARB  hPbuffer, int  iVideoBuffer);
+  GLEE_EXTERN GLEEPFNWGLRELEASEVIDEOIMAGENVPROC GLeeFuncPtr_wglReleaseVideoImageNV;
+  #define wglReleaseVideoImageNV GLeeFuncPtr_wglReleaseVideoImageNV
+#endif
+#ifndef GLEE_H_DEFINED_wglSendPbufferToVideoNV
+#define GLEE_H_DEFINED_wglSendPbufferToVideoNV
+  typedef BOOL (APIENTRYP GLEEPFNWGLSENDPBUFFERTOVIDEONVPROC) (HPBUFFERARB  hPbuffer, int  iBufferType, unsigned long * pulCounterPbuffer, BOOL  bBlock);
+  GLEE_EXTERN GLEEPFNWGLSENDPBUFFERTOVIDEONVPROC GLeeFuncPtr_wglSendPbufferToVideoNV;
+  #define wglSendPbufferToVideoNV GLeeFuncPtr_wglSendPbufferToVideoNV
+#endif
+#ifndef GLEE_H_DEFINED_wglGetVideoInfoNV
+#define GLEE_H_DEFINED_wglGetVideoInfoNV
+  typedef BOOL (APIENTRYP GLEEPFNWGLGETVIDEOINFONVPROC) (HPVIDEODEV  hpVideoDevice, unsigned long * pulCounterOutputPbuffer, unsigned long * pulCounterOutputVideo);
+  GLEE_EXTERN GLEEPFNWGLGETVIDEOINFONVPROC GLeeFuncPtr_wglGetVideoInfoNV;
+  #define wglGetVideoInfoNV GLeeFuncPtr_wglGetVideoInfoNV
+#endif
+#endif 
+#elif defined(__APPLE__) || defined(__APPLE_CC__)
+#else /* GLX */
+
+/* Extension querying variables */
+
+GLEE_EXTERN GLboolean _GLEE_GLX_VERSION_1_3;
+GLEE_EXTERN GLboolean _GLEE_GLX_VERSION_1_4;
+GLEE_EXTERN GLboolean _GLEE_GLX_ARB_multisample;
+GLEE_EXTERN GLboolean _GLEE_GLX_ARB_vertex_buffer_object;
+GLEE_EXTERN GLboolean _GLEE_GLX_ARB_fbconfig_float;
+GLEE_EXTERN GLboolean _GLEE_GLX_ARB_framebuffer_sRGB;
+GLEE_EXTERN GLboolean _GLEE_GLX_ARB_create_context;
+GLEE_EXTERN GLboolean _GLEE_GLX_ARB_create_context_profile;
+GLEE_EXTERN GLboolean _GLEE_GLX_ARB_create_context_robustness;
+GLEE_EXTERN GLboolean _GLEE_GLX_SGIS_multisample;
+GLEE_EXTERN GLboolean _GLEE_GLX_EXT_visual_info;
+GLEE_EXTERN GLboolean _GLEE_GLX_SGI_swap_control;
+GLEE_EXTERN GLboolean _GLEE_GLX_SGI_video_sync;
+GLEE_EXTERN GLboolean _GLEE_GLX_SGI_make_current_read;
+GLEE_EXTERN GLboolean _GLEE_GLX_EXT_visual_rating;
+GLEE_EXTERN GLboolean _GLEE_GLX_EXT_import_context;
+GLEE_EXTERN GLboolean _GLEE_GLX_SGIX_fbconfig;
+GLEE_EXTERN GLboolean _GLEE_GLX_SGIX_pbuffer;
+GLEE_EXTERN GLboolean _GLEE_GLX_SGI_cushion;
+GLEE_EXTERN GLboolean _GLEE_GLX_SGIX_video_resize;
+GLEE_EXTERN GLboolean _GLEE_GLX_SGIX_swap_group;
+GLEE_EXTERN GLboolean _GLEE_GLX_SGIX_swap_barrier;
+GLEE_EXTERN GLboolean _GLEE_GLX_SGIS_blended_overlay;
+GLEE_EXTERN GLboolean _GLEE_GLX_SGIS_shared_multisample;
+GLEE_EXTERN GLboolean _GLEE_GLX_SUN_get_transparent_index;
+GLEE_EXTERN GLboolean _GLEE_GLX_3DFX_multisample;
+GLEE_EXTERN GLboolean _GLEE_GLX_MESA_copy_sub_buffer;
+GLEE_EXTERN GLboolean _GLEE_GLX_MESA_pixmap_colormap;
+GLEE_EXTERN GLboolean _GLEE_GLX_MESA_release_buffers;
+GLEE_EXTERN GLboolean _GLEE_GLX_MESA_set_3dfx_mode;
+GLEE_EXTERN GLboolean _GLEE_GLX_SGIX_visual_select_group;
+GLEE_EXTERN GLboolean _GLEE_GLX_OML_swap_method;
+GLEE_EXTERN GLboolean _GLEE_GLX_OML_sync_control;
+GLEE_EXTERN GLboolean _GLEE_GLX_NV_float_buffer;
+GLEE_EXTERN GLboolean _GLEE_GLX_SGIX_hyperpipe;
+GLEE_EXTERN GLboolean _GLEE_GLX_MESA_agp_offset;
+GLEE_EXTERN GLboolean _GLEE_GLX_EXT_fbconfig_packed_float;
+GLEE_EXTERN GLboolean _GLEE_GLX_EXT_framebuffer_sRGB;
+GLEE_EXTERN GLboolean _GLEE_GLX_EXT_texture_from_pixmap;
+GLEE_EXTERN GLboolean _GLEE_GLX_NV_present_video;
+GLEE_EXTERN GLboolean _GLEE_GLX_NV_video_out;
+GLEE_EXTERN GLboolean _GLEE_GLX_NV_swap_group;
+GLEE_EXTERN GLboolean _GLEE_GLX_NV_video_capture;
+GLEE_EXTERN GLboolean _GLEE_GLX_EXT_swap_control;
+GLEE_EXTERN GLboolean _GLEE_GLX_NV_copy_image;
+GLEE_EXTERN GLboolean _GLEE_GLX_INTEL_swap_event;
+GLEE_EXTERN GLboolean _GLEE_GLX_NV_multisample_coverage;
+GLEE_EXTERN GLboolean _GLEE_GLX_AMD_gpu_association;
+GLEE_EXTERN GLboolean _GLEE_GLX_EXT_create_context_es2_profile;
+GLEE_EXTERN GLboolean _GLEE_GLX_NV_video_output;
+GLEE_EXTERN GLboolean _GLEE_GLX_EXT_scene_marker;
+
+/* Aliases for extension querying variables */
+
+#define GLEE_GLX_VERSION_1_3     GLeeEnabled(&_GLEE_GLX_VERSION_1_3)
+#define GLEE_GLX_VERSION_1_4     GLeeEnabled(&_GLEE_GLX_VERSION_1_4)
+#define GLEE_GLX_ARB_multisample     GLeeEnabled(&_GLEE_GLX_ARB_multisample)
+#define GLEE_GLX_ARB_vertex_buffer_object     GLeeEnabled(&_GLEE_GLX_ARB_vertex_buffer_object)
+#define GLEE_GLX_ARB_fbconfig_float     GLeeEnabled(&_GLEE_GLX_ARB_fbconfig_float)
+#define GLEE_GLX_ARB_framebuffer_sRGB     GLeeEnabled(&_GLEE_GLX_ARB_framebuffer_sRGB)
+#define GLEE_GLX_ARB_create_context     GLeeEnabled(&_GLEE_GLX_ARB_create_context)
+#define GLEE_GLX_ARB_create_context_profile     GLeeEnabled(&_GLEE_GLX_ARB_create_context_profile)
+#define GLEE_GLX_ARB_create_context_robustness     GLeeEnabled(&_GLEE_GLX_ARB_create_context_robustness)
+#define GLEE_GLX_SGIS_multisample     GLeeEnabled(&_GLEE_GLX_SGIS_multisample)
+#define GLEE_GLX_EXT_visual_info     GLeeEnabled(&_GLEE_GLX_EXT_visual_info)
+#define GLEE_GLX_SGI_swap_control     GLeeEnabled(&_GLEE_GLX_SGI_swap_control)
+#define GLEE_GLX_SGI_video_sync     GLeeEnabled(&_GLEE_GLX_SGI_video_sync)
+#define GLEE_GLX_SGI_make_current_read     GLeeEnabled(&_GLEE_GLX_SGI_make_current_read)
+#define GLEE_GLX_EXT_visual_rating     GLeeEnabled(&_GLEE_GLX_EXT_visual_rating)
+#define GLEE_GLX_EXT_import_context     GLeeEnabled(&_GLEE_GLX_EXT_import_context)
+#define GLEE_GLX_SGIX_fbconfig     GLeeEnabled(&_GLEE_GLX_SGIX_fbconfig)
+#define GLEE_GLX_SGIX_pbuffer     GLeeEnabled(&_GLEE_GLX_SGIX_pbuffer)
+#define GLEE_GLX_SGI_cushion     GLeeEnabled(&_GLEE_GLX_SGI_cushion)
+#define GLEE_GLX_SGIX_video_resize     GLeeEnabled(&_GLEE_GLX_SGIX_video_resize)
+#define GLEE_GLX_SGIX_swap_group     GLeeEnabled(&_GLEE_GLX_SGIX_swap_group)
+#define GLEE_GLX_SGIX_swap_barrier     GLeeEnabled(&_GLEE_GLX_SGIX_swap_barrier)
+#define GLEE_GLX_SGIS_blended_overlay     GLeeEnabled(&_GLEE_GLX_SGIS_blended_overlay)
+#define GLEE_GLX_SGIS_shared_multisample     GLeeEnabled(&_GLEE_GLX_SGIS_shared_multisample)
+#define GLEE_GLX_SUN_get_transparent_index     GLeeEnabled(&_GLEE_GLX_SUN_get_transparent_index)
+#define GLEE_GLX_3DFX_multisample     GLeeEnabled(&_GLEE_GLX_3DFX_multisample)
+#define GLEE_GLX_MESA_copy_sub_buffer     GLeeEnabled(&_GLEE_GLX_MESA_copy_sub_buffer)
+#define GLEE_GLX_MESA_pixmap_colormap     GLeeEnabled(&_GLEE_GLX_MESA_pixmap_colormap)
+#define GLEE_GLX_MESA_release_buffers     GLeeEnabled(&_GLEE_GLX_MESA_release_buffers)
+#define GLEE_GLX_MESA_set_3dfx_mode     GLeeEnabled(&_GLEE_GLX_MESA_set_3dfx_mode)
+#define GLEE_GLX_SGIX_visual_select_group     GLeeEnabled(&_GLEE_GLX_SGIX_visual_select_group)
+#define GLEE_GLX_OML_swap_method     GLeeEnabled(&_GLEE_GLX_OML_swap_method)
+#define GLEE_GLX_OML_sync_control     GLeeEnabled(&_GLEE_GLX_OML_sync_control)
+#define GLEE_GLX_NV_float_buffer     GLeeEnabled(&_GLEE_GLX_NV_float_buffer)
+#define GLEE_GLX_SGIX_hyperpipe     GLeeEnabled(&_GLEE_GLX_SGIX_hyperpipe)
+#define GLEE_GLX_MESA_agp_offset     GLeeEnabled(&_GLEE_GLX_MESA_agp_offset)
+#define GLEE_GLX_EXT_fbconfig_packed_float     GLeeEnabled(&_GLEE_GLX_EXT_fbconfig_packed_float)
+#define GLEE_GLX_EXT_framebuffer_sRGB     GLeeEnabled(&_GLEE_GLX_EXT_framebuffer_sRGB)
+#define GLEE_GLX_EXT_texture_from_pixmap     GLeeEnabled(&_GLEE_GLX_EXT_texture_from_pixmap)
+#define GLEE_GLX_NV_present_video     GLeeEnabled(&_GLEE_GLX_NV_present_video)
+#define GLEE_GLX_NV_video_out     GLeeEnabled(&_GLEE_GLX_NV_video_out)
+#define GLEE_GLX_NV_swap_group     GLeeEnabled(&_GLEE_GLX_NV_swap_group)
+#define GLEE_GLX_NV_video_capture     GLeeEnabled(&_GLEE_GLX_NV_video_capture)
+#define GLEE_GLX_EXT_swap_control     GLeeEnabled(&_GLEE_GLX_EXT_swap_control)
+#define GLEE_GLX_NV_copy_image     GLeeEnabled(&_GLEE_GLX_NV_copy_image)
+#define GLEE_GLX_INTEL_swap_event     GLeeEnabled(&_GLEE_GLX_INTEL_swap_event)
+#define GLEE_GLX_NV_multisample_coverage     GLeeEnabled(&_GLEE_GLX_NV_multisample_coverage)
+#define GLEE_GLX_AMD_gpu_association     GLeeEnabled(&_GLEE_GLX_AMD_gpu_association)
+#define GLEE_GLX_EXT_create_context_es2_profile     GLeeEnabled(&_GLEE_GLX_EXT_create_context_es2_profile)
+#define GLEE_GLX_NV_video_output     GLeeEnabled(&_GLEE_GLX_NV_video_output)
+#define GLEE_GLX_EXT_scene_marker     GLeeEnabled(&_GLEE_GLX_EXT_scene_marker)
+
+/* GLX_VERSION_1_3 */
+
+#ifndef GLX_VERSION_1_3
+#define GLX_VERSION_1_3 1
+#define __GLEE_GLX_VERSION_1_3 1
+/* Constants */
+#define GLX_WINDOW_BIT                                     0x00000001
+#define GLX_PIXMAP_BIT                                     0x00000002
+#define GLX_PBUFFER_BIT                                    0x00000004
+#define GLX_RGBA_BIT                                       0x00000001
+#define GLX_COLOR_INDEX_BIT                                0x00000002
+#define GLX_PBUFFER_CLOBBER_MASK                           0x08000000
+#define GLX_FRONT_LEFT_BUFFER_BIT                          0x00000001
+#define GLX_FRONT_RIGHT_BUFFER_BIT                         0x00000002
+#define GLX_BACK_LEFT_BUFFER_BIT                           0x00000004
+#define GLX_BACK_RIGHT_BUFFER_BIT                          0x00000008
+#define GLX_AUX_BUFFERS_BIT                                0x00000010
+#define GLX_DEPTH_BUFFER_BIT                               0x00000020
+#define GLX_STENCIL_BUFFER_BIT                             0x00000040
+#define GLX_ACCUM_BUFFER_BIT                               0x00000080
+#define GLX_CONFIG_CAVEAT                                  0x20
+#define GLX_X_VISUAL_TYPE                                  0x22
+#define GLX_TRANSPARENT_TYPE                               0x23
+#define GLX_TRANSPARENT_INDEX_VALUE                        0x24
+#define GLX_TRANSPARENT_RED_VALUE                          0x25
+#define GLX_TRANSPARENT_GREEN_VALUE                        0x26
+#define GLX_TRANSPARENT_BLUE_VALUE                         0x27
+#define GLX_TRANSPARENT_ALPHA_VALUE                        0x28
+#define GLX_DONT_CARE                                      0xFFFFFFFF
+#define GLX_NONE                                           0x8000
+#define GLX_SLOW_CONFIG                                    0x8001
+#define GLX_TRUE_COLOR                                     0x8002
+#define GLX_DIRECT_COLOR                                   0x8003
+#define GLX_PSEUDO_COLOR                                   0x8004
+#define GLX_STATIC_COLOR                                   0x8005
+#define GLX_GRAY_SCALE                                     0x8006
+#define GLX_STATIC_GRAY                                    0x8007
+#define GLX_TRANSPARENT_RGB                                0x8008
+#define GLX_TRANSPARENT_INDEX                              0x8009
+#define GLX_VISUAL_ID                                      0x800B
+#define GLX_SCREEN                                         0x800C
+#define GLX_NON_CONFORMANT_CONFIG                          0x800D
+#define GLX_DRAWABLE_TYPE                                  0x8010
+#define GLX_RENDER_TYPE                                    0x8011
+#define GLX_X_RENDERABLE                                   0x8012
+#define GLX_FBCONFIG_ID                                    0x8013
+#define GLX_RGBA_TYPE                                      0x8014
+#define GLX_COLOR_INDEX_TYPE                               0x8015
+#define GLX_MAX_PBUFFER_WIDTH                              0x8016
+#define GLX_MAX_PBUFFER_HEIGHT                             0x8017
+#define GLX_MAX_PBUFFER_PIXELS                             0x8018
+#define GLX_PRESERVED_CONTENTS                             0x801B
+#define GLX_LARGEST_PBUFFER                                0x801C
+#define GLX_WIDTH                                          0x801D
+#define GLX_HEIGHT                                         0x801E
+#define GLX_EVENT_MASK                                     0x801F
+#define GLX_DAMAGED                                        0x8020
+#define GLX_SAVED                                          0x8021
+#define GLX_WINDOW                                         0x8022
+#define GLX_PBUFFER                                        0x8023
+#define GLX_PBUFFER_HEIGHT                                 0x8040
+#define GLX_PBUFFER_WIDTH                                  0x8041
+#ifndef GLEE_H_DEFINED_glXGetFBConfigs
+#define GLEE_H_DEFINED_glXGetFBConfigs
+  typedef GLXFBConfig * (APIENTRYP GLEEPFNGLXGETFBCONFIGSPROC) (Display * dpy, int  screen, int * nelements);
+  GLEE_EXTERN GLEEPFNGLXGETFBCONFIGSPROC GLeeFuncPtr_glXGetFBConfigs;
+  #define glXGetFBConfigs GLeeFuncPtr_glXGetFBConfigs
+#endif
+#ifndef GLEE_H_DEFINED_glXChooseFBConfig
+#define GLEE_H_DEFINED_glXChooseFBConfig
+  typedef GLXFBConfig * (APIENTRYP GLEEPFNGLXCHOOSEFBCONFIGPROC) (Display * dpy, int  screen, const int * attrib_list, int * nelements);
+  GLEE_EXTERN GLEEPFNGLXCHOOSEFBCONFIGPROC GLeeFuncPtr_glXChooseFBConfig;
+  #define glXChooseFBConfig GLeeFuncPtr_glXChooseFBConfig
+#endif
+#ifndef GLEE_H_DEFINED_glXGetFBConfigAttrib
+#define GLEE_H_DEFINED_glXGetFBConfigAttrib
+  typedef int (APIENTRYP GLEEPFNGLXGETFBCONFIGATTRIBPROC) (Display * dpy, GLXFBConfig  config, int  attribute, int * value);
+  GLEE_EXTERN GLEEPFNGLXGETFBCONFIGATTRIBPROC GLeeFuncPtr_glXGetFBConfigAttrib;
+  #define glXGetFBConfigAttrib GLeeFuncPtr_glXGetFBConfigAttrib
+#endif
+#ifndef GLEE_H_DEFINED_glXGetVisualFromFBConfig
+#define GLEE_H_DEFINED_glXGetVisualFromFBConfig
+  typedef XVisualInfo * (APIENTRYP GLEEPFNGLXGETVISUALFROMFBCONFIGPROC) (Display * dpy, GLXFBConfig  config);
+  GLEE_EXTERN GLEEPFNGLXGETVISUALFROMFBCONFIGPROC GLeeFuncPtr_glXGetVisualFromFBConfig;
+  #define glXGetVisualFromFBConfig GLeeFuncPtr_glXGetVisualFromFBConfig
+#endif
+#ifndef GLEE_H_DEFINED_glXCreateWindow
+#define GLEE_H_DEFINED_glXCreateWindow
+  typedef GLXWindow (APIENTRYP GLEEPFNGLXCREATEWINDOWPROC) (Display * dpy, GLXFBConfig  config, Window  win, const int * attrib_list);
+  GLEE_EXTERN GLEEPFNGLXCREATEWINDOWPROC GLeeFuncPtr_glXCreateWindow;
+  #define glXCreateWindow GLeeFuncPtr_glXCreateWindow
+#endif
+#ifndef GLEE_H_DEFINED_glXDestroyWindow
+#define GLEE_H_DEFINED_glXDestroyWindow
+  typedef void (APIENTRYP GLEEPFNGLXDESTROYWINDOWPROC) (Display * dpy, GLXWindow  win);
+  GLEE_EXTERN GLEEPFNGLXDESTROYWINDOWPROC GLeeFuncPtr_glXDestroyWindow;
+  #define glXDestroyWindow GLeeFuncPtr_glXDestroyWindow
+#endif
+#ifndef GLEE_H_DEFINED_glXCreatePixmap
+#define GLEE_H_DEFINED_glXCreatePixmap
+  typedef GLXPixmap (APIENTRYP GLEEPFNGLXCREATEPIXMAPPROC) (Display * dpy, GLXFBConfig  config, Pixmap  pixmap, const int * attrib_list);
+  GLEE_EXTERN GLEEPFNGLXCREATEPIXMAPPROC GLeeFuncPtr_glXCreatePixmap;
+  #define glXCreatePixmap GLeeFuncPtr_glXCreatePixmap
+#endif
+#ifndef GLEE_H_DEFINED_glXDestroyPixmap
+#define GLEE_H_DEFINED_glXDestroyPixmap
+  typedef void (APIENTRYP GLEEPFNGLXDESTROYPIXMAPPROC) (Display * dpy, GLXPixmap  pixmap);
+  GLEE_EXTERN GLEEPFNGLXDESTROYPIXMAPPROC GLeeFuncPtr_glXDestroyPixmap;
+  #define glXDestroyPixmap GLeeFuncPtr_glXDestroyPixmap
+#endif
+#ifndef GLEE_H_DEFINED_glXCreatePbuffer
+#define GLEE_H_DEFINED_glXCreatePbuffer
+  typedef GLXPbuffer (APIENTRYP GLEEPFNGLXCREATEPBUFFERPROC) (Display * dpy, GLXFBConfig  config, const int * attrib_list);
+  GLEE_EXTERN GLEEPFNGLXCREATEPBUFFERPROC GLeeFuncPtr_glXCreatePbuffer;
+  #define glXCreatePbuffer GLeeFuncPtr_glXCreatePbuffer
+#endif
+#ifndef GLEE_H_DEFINED_glXDestroyPbuffer
+#define GLEE_H_DEFINED_glXDestroyPbuffer
+  typedef void (APIENTRYP GLEEPFNGLXDESTROYPBUFFERPROC) (Display * dpy, GLXPbuffer  pbuf);
+  GLEE_EXTERN GLEEPFNGLXDESTROYPBUFFERPROC GLeeFuncPtr_glXDestroyPbuffer;
+  #define glXDestroyPbuffer GLeeFuncPtr_glXDestroyPbuffer
+#endif
+#ifndef GLEE_H_DEFINED_glXQueryDrawable
+#define GLEE_H_DEFINED_glXQueryDrawable
+  typedef void (APIENTRYP GLEEPFNGLXQUERYDRAWABLEPROC) (Display * dpy, GLXDrawable  draw, int  attribute, unsigned int * value);
+  GLEE_EXTERN GLEEPFNGLXQUERYDRAWABLEPROC GLeeFuncPtr_glXQueryDrawable;
+  #define glXQueryDrawable GLeeFuncPtr_glXQueryDrawable
+#endif
+#ifndef GLEE_H_DEFINED_glXCreateNewContext
+#define GLEE_H_DEFINED_glXCreateNewContext
+  typedef GLXContext (APIENTRYP GLEEPFNGLXCREATENEWCONTEXTPROC) (Display * dpy, GLXFBConfig  config, int  render_type, GLXContext  share_list, Bool  direct);
+  GLEE_EXTERN GLEEPFNGLXCREATENEWCONTEXTPROC GLeeFuncPtr_glXCreateNewContext;
+  #define glXCreateNewContext GLeeFuncPtr_glXCreateNewContext
+#endif
+#ifndef GLEE_H_DEFINED_glXMakeContextCurrent
+#define GLEE_H_DEFINED_glXMakeContextCurrent
+  typedef Bool (APIENTRYP GLEEPFNGLXMAKECONTEXTCURRENTPROC) (Display * dpy, GLXDrawable  draw, GLXDrawable  read, GLXContext  ctx);
+  GLEE_EXTERN GLEEPFNGLXMAKECONTEXTCURRENTPROC GLeeFuncPtr_glXMakeContextCurrent;
+  #define glXMakeContextCurrent GLeeFuncPtr_glXMakeContextCurrent
+#endif
+#ifndef GLEE_H_DEFINED_glXGetCurrentReadDrawable
+#define GLEE_H_DEFINED_glXGetCurrentReadDrawable
+  typedef GLXDrawable (APIENTRYP GLEEPFNGLXGETCURRENTREADDRAWABLEPROC) ();
+  GLEE_EXTERN GLEEPFNGLXGETCURRENTREADDRAWABLEPROC GLeeFuncPtr_glXGetCurrentReadDrawable;
+  #define glXGetCurrentReadDrawable GLeeFuncPtr_glXGetCurrentReadDrawable
+#endif
+#ifndef GLEE_H_DEFINED_glXGetCurrentDisplay
+#define GLEE_H_DEFINED_glXGetCurrentDisplay
+  typedef Display * (APIENTRYP GLEEPFNGLXGETCURRENTDISPLAYPROC) ();
+  GLEE_EXTERN GLEEPFNGLXGETCURRENTDISPLAYPROC GLeeFuncPtr_glXGetCurrentDisplay;
+  #define glXGetCurrentDisplay GLeeFuncPtr_glXGetCurrentDisplay
+#endif
+#ifndef GLEE_H_DEFINED_glXQueryContext
+#define GLEE_H_DEFINED_glXQueryContext
+  typedef int (APIENTRYP GLEEPFNGLXQUERYCONTEXTPROC) (Display * dpy, GLXContext  ctx, int  attribute, int * value);
+  GLEE_EXTERN GLEEPFNGLXQUERYCONTEXTPROC GLeeFuncPtr_glXQueryContext;
+  #define glXQueryContext GLeeFuncPtr_glXQueryContext
+#endif
+#ifndef GLEE_H_DEFINED_glXSelectEvent
+#define GLEE_H_DEFINED_glXSelectEvent
+  typedef void (APIENTRYP GLEEPFNGLXSELECTEVENTPROC) (Display * dpy, GLXDrawable  draw, unsigned long  event_mask);
+  GLEE_EXTERN GLEEPFNGLXSELECTEVENTPROC GLeeFuncPtr_glXSelectEvent;
+  #define glXSelectEvent GLeeFuncPtr_glXSelectEvent
+#endif
+#ifndef GLEE_H_DEFINED_glXGetSelectedEvent
+#define GLEE_H_DEFINED_glXGetSelectedEvent
+  typedef void (APIENTRYP GLEEPFNGLXGETSELECTEDEVENTPROC) (Display * dpy, GLXDrawable  draw, unsigned long * event_mask);
+  GLEE_EXTERN GLEEPFNGLXGETSELECTEDEVENTPROC GLeeFuncPtr_glXGetSelectedEvent;
+  #define glXGetSelectedEvent GLeeFuncPtr_glXGetSelectedEvent
+#endif
+#endif 
+
+/* GLX_VERSION_1_4 */
+
+#ifndef GLX_VERSION_1_4
+#define GLX_VERSION_1_4 1
+#define __GLEE_GLX_VERSION_1_4 1
+/* Constants */
+#define GLX_SAMPLE_BUFFERS                                 100000
+#define GLX_SAMPLES                                        100001
+#ifndef GLEE_H_DEFINED_glXGetProcAddress
+#define GLEE_H_DEFINED_glXGetProcAddress
+  typedef __GLXextFuncPtr (APIENTRYP GLEEPFNGLXGETPROCADDRESSPROC) (const GLubyte * procName);
+  GLEE_EXTERN GLEEPFNGLXGETPROCADDRESSPROC GLeeFuncPtr_glXGetProcAddress;
+  #define glXGetProcAddress GLeeFuncPtr_glXGetProcAddress
+#endif
+#endif 
+
+/* GLX_ARB_multisample */
+
+#ifndef GLX_ARB_multisample
+#define GLX_ARB_multisample 1
+#define __GLEE_GLX_ARB_multisample 1
+/* Constants */
+#define GLX_SAMPLE_BUFFERS_ARB                             100000
+#define GLX_SAMPLES_ARB                                    100001
+#endif 
+
+/* GLX_ARB_vertex_buffer_object */
+
+#ifndef GLX_ARB_vertex_buffer_object
+#define GLX_ARB_vertex_buffer_object 1
+#define __GLEE_GLX_ARB_vertex_buffer_object 1
+/* Constants */
+#define GLX_CONTEXT_ALLOW_BUFFER_BYTE_ORDER_MISMATCH_ARB   0x2095
+#endif 
+
+/* GLX_ARB_fbconfig_float */
+
+#ifndef GLX_ARB_fbconfig_float
+#define GLX_ARB_fbconfig_float 1
+#define __GLEE_GLX_ARB_fbconfig_float 1
+/* Constants */
+#define GLX_RGBA_FLOAT_TYPE_ARB                            0x20B9
+#define GLX_RGBA_FLOAT_BIT_ARB                             0x00000004
+#endif 
+
+/* GLX_ARB_framebuffer_sRGB */
+
+#ifndef GLX_ARB_framebuffer_sRGB
+#define GLX_ARB_framebuffer_sRGB 1
+#define __GLEE_GLX_ARB_framebuffer_sRGB 1
+/* Constants */
+#define GLX_FRAMEBUFFER_SRGB_CAPABLE_ARB                   0x20B2
+#endif 
+
+/* GLX_ARB_create_context */
+
+#ifndef GLX_ARB_create_context
+#define GLX_ARB_create_context 1
+#define __GLEE_GLX_ARB_create_context 1
+/* Constants */
+#define GLX_CONTEXT_DEBUG_BIT_ARB                          0x00000001
+#define GLX_CONTEXT_FORWARD_COMPATIBLE_BIT_ARB             0x00000002
+#define GLX_CONTEXT_MAJOR_VERSION_ARB                      0x2091
+#define GLX_CONTEXT_MINOR_VERSION_ARB                      0x2092
+#define GLX_CONTEXT_FLAGS_ARB                              0x2094
+#ifndef GLEE_H_DEFINED_glXCreateContextAttribsARB
+#define GLEE_H_DEFINED_glXCreateContextAttribsARB
+  typedef GLXContext (APIENTRYP GLEEPFNGLXCREATECONTEXTATTRIBSARBPROC) (Display * dpy, GLXFBConfig  config, GLXContext  share_context, Bool  direct, const int * attrib_list);
+  GLEE_EXTERN GLEEPFNGLXCREATECONTEXTATTRIBSARBPROC GLeeFuncPtr_glXCreateContextAttribsARB;
+  #define glXCreateContextAttribsARB GLeeFuncPtr_glXCreateContextAttribsARB
+#endif
+#endif 
+
+/* GLX_ARB_create_context_profile */
+
+#ifndef GLX_ARB_create_context_profile
+#define GLX_ARB_create_context_profile 1
+#define __GLEE_GLX_ARB_create_context_profile 1
+/* Constants */
+#define GLX_CONTEXT_CORE_PROFILE_BIT_ARB                   0x00000001
+#define GLX_CONTEXT_COMPATIBILITY_PROFILE_BIT_ARB          0x00000002
+#define GLX_CONTEXT_PROFILE_MASK_ARB                       0x9126
+#endif 
+
+/* GLX_ARB_create_context_robustness */
+
+#ifndef GLX_ARB_create_context_robustness
+#define GLX_ARB_create_context_robustness 1
+#define __GLEE_GLX_ARB_create_context_robustness 1
+/* Constants */
+#define GLX_CONTEXT_ROBUST_ACCESS_BIT_ARB                  0x00000004
+#define GLX_LOSE_CONTEXT_ON_RESET_ARB                      0x8252
+#define GLX_CONTEXT_RESET_NOTIFICATION_STRATEGY_ARB        0x8256
+#define GLX_NO_RESET_NOTIFICATION_ARB                      0x8261
+#endif 
+
+/* GLX_SGIS_multisample */
+
+#ifndef GLX_SGIS_multisample
+#define GLX_SGIS_multisample 1
+#define __GLEE_GLX_SGIS_multisample 1
+/* Constants */
+#define GLX_SAMPLE_BUFFERS_SGIS                            100000
+#define GLX_SAMPLES_SGIS                                   100001
+#endif 
+
+/* GLX_EXT_visual_info */
+
+#ifndef GLX_EXT_visual_info
+#define GLX_EXT_visual_info 1
+#define __GLEE_GLX_EXT_visual_info 1
+/* Constants */
+#define GLX_X_VISUAL_TYPE_EXT                              0x22
+#define GLX_TRANSPARENT_TYPE_EXT                           0x23
+#define GLX_TRANSPARENT_INDEX_VALUE_EXT                    0x24
+#define GLX_TRANSPARENT_RED_VALUE_EXT                      0x25
+#define GLX_TRANSPARENT_GREEN_VALUE_EXT                    0x26
+#define GLX_TRANSPARENT_BLUE_VALUE_EXT                     0x27
+#define GLX_TRANSPARENT_ALPHA_VALUE_EXT                    0x28
+#define GLX_NONE_EXT                                       0x8000
+#define GLX_TRUE_COLOR_EXT                                 0x8002
+#define GLX_DIRECT_COLOR_EXT                               0x8003
+#define GLX_PSEUDO_COLOR_EXT                               0x8004
+#define GLX_STATIC_COLOR_EXT                               0x8005
+#define GLX_GRAY_SCALE_EXT                                 0x8006
+#define GLX_STATIC_GRAY_EXT                                0x8007
+#define GLX_TRANSPARENT_RGB_EXT                            0x8008
+#define GLX_TRANSPARENT_INDEX_EXT                          0x8009
+#endif 
+
+/* GLX_SGI_swap_control */
+
+#ifndef GLX_SGI_swap_control
+#define GLX_SGI_swap_control 1
+#define __GLEE_GLX_SGI_swap_control 1
+/* Constants */
+#ifndef GLEE_H_DEFINED_glXSwapIntervalSGI
+#define GLEE_H_DEFINED_glXSwapIntervalSGI
+  typedef int (APIENTRYP GLEEPFNGLXSWAPINTERVALSGIPROC) (int  interval);
+  GLEE_EXTERN GLEEPFNGLXSWAPINTERVALSGIPROC GLeeFuncPtr_glXSwapIntervalSGI;
+  #define glXSwapIntervalSGI GLeeFuncPtr_glXSwapIntervalSGI
+#endif
+#endif 
+
+/* GLX_SGI_video_sync */
+
+#ifndef GLX_SGI_video_sync
+#define GLX_SGI_video_sync 1
+#define __GLEE_GLX_SGI_video_sync 1
+/* Constants */
+#ifndef GLEE_H_DEFINED_glXGetVideoSyncSGI
+#define GLEE_H_DEFINED_glXGetVideoSyncSGI
+  typedef int (APIENTRYP GLEEPFNGLXGETVIDEOSYNCSGIPROC) (unsigned int * count);
+  GLEE_EXTERN GLEEPFNGLXGETVIDEOSYNCSGIPROC GLeeFuncPtr_glXGetVideoSyncSGI;
+  #define glXGetVideoSyncSGI GLeeFuncPtr_glXGetVideoSyncSGI
+#endif
+#ifndef GLEE_H_DEFINED_glXWaitVideoSyncSGI
+#define GLEE_H_DEFINED_glXWaitVideoSyncSGI
+  typedef int (APIENTRYP GLEEPFNGLXWAITVIDEOSYNCSGIPROC) (int  divisor, int  remainder, unsigned int * count);
+  GLEE_EXTERN GLEEPFNGLXWAITVIDEOSYNCSGIPROC GLeeFuncPtr_glXWaitVideoSyncSGI;
+  #define glXWaitVideoSyncSGI GLeeFuncPtr_glXWaitVideoSyncSGI
+#endif
+#endif 
+
+/* GLX_SGI_make_current_read */
+
+#ifndef GLX_SGI_make_current_read
+#define GLX_SGI_make_current_read 1
+#define __GLEE_GLX_SGI_make_current_read 1
+/* Constants */
+#ifndef GLEE_H_DEFINED_glXMakeCurrentReadSGI
+#define GLEE_H_DEFINED_glXMakeCurrentReadSGI
+  typedef Bool (APIENTRYP GLEEPFNGLXMAKECURRENTREADSGIPROC) (Display * dpy, GLXDrawable  draw, GLXDrawable  read, GLXContext  ctx);
+  GLEE_EXTERN GLEEPFNGLXMAKECURRENTREADSGIPROC GLeeFuncPtr_glXMakeCurrentReadSGI;
+  #define glXMakeCurrentReadSGI GLeeFuncPtr_glXMakeCurrentReadSGI
+#endif
+#ifndef GLEE_H_DEFINED_glXGetCurrentReadDrawableSGI
+#define GLEE_H_DEFINED_glXGetCurrentReadDrawableSGI
+  typedef GLXDrawable (APIENTRYP GLEEPFNGLXGETCURRENTREADDRAWABLESGIPROC) ();
+  GLEE_EXTERN GLEEPFNGLXGETCURRENTREADDRAWABLESGIPROC GLeeFuncPtr_glXGetCurrentReadDrawableSGI;
+  #define glXGetCurrentReadDrawableSGI GLeeFuncPtr_glXGetCurrentReadDrawableSGI
+#endif
+#endif 
+
+/* GLX_EXT_visual_rating */
+
+#ifndef GLX_EXT_visual_rating
+#define GLX_EXT_visual_rating 1
+#define __GLEE_GLX_EXT_visual_rating 1
+/* Constants */
+#define GLX_VISUAL_CAVEAT_EXT                              0x20
+#define GLX_SLOW_VISUAL_EXT                                0x8001
+#define GLX_NON_CONFORMANT_VISUAL_EXT                      0x800D
+#endif 
+
+/* GLX_EXT_import_context */
+
+#ifndef GLX_EXT_import_context
+#define GLX_EXT_import_context 1
+#define __GLEE_GLX_EXT_import_context 1
+/* Constants */
+#define GLX_SHARE_CONTEXT_EXT                              0x800A
+#define GLX_VISUAL_ID_EXT                                  0x800B
+#define GLX_SCREEN_EXT                                     0x800C
+#ifndef GLEE_H_DEFINED_glXGetCurrentDisplayEXT
+#define GLEE_H_DEFINED_glXGetCurrentDisplayEXT
+  typedef Display * (APIENTRYP GLEEPFNGLXGETCURRENTDISPLAYEXTPROC) ();
+  GLEE_EXTERN GLEEPFNGLXGETCURRENTDISPLAYEXTPROC GLeeFuncPtr_glXGetCurrentDisplayEXT;
+  #define glXGetCurrentDisplayEXT GLeeFuncPtr_glXGetCurrentDisplayEXT
+#endif
+#ifndef GLEE_H_DEFINED_glXQueryContextInfoEXT
+#define GLEE_H_DEFINED_glXQueryContextInfoEXT
+  typedef int (APIENTRYP GLEEPFNGLXQUERYCONTEXTINFOEXTPROC) (Display * dpy, GLXContext  context, int  attribute, int * value);
+  GLEE_EXTERN GLEEPFNGLXQUERYCONTEXTINFOEXTPROC GLeeFuncPtr_glXQueryContextInfoEXT;
+  #define glXQueryContextInfoEXT GLeeFuncPtr_glXQueryContextInfoEXT
+#endif
+#ifndef GLEE_H_DEFINED_glXGetContextIDEXT
+#define GLEE_H_DEFINED_glXGetContextIDEXT
+  typedef GLXContextID (APIENTRYP GLEEPFNGLXGETCONTEXTIDEXTPROC) (const GLXContext  context);
+  GLEE_EXTERN GLEEPFNGLXGETCONTEXTIDEXTPROC GLeeFuncPtr_glXGetContextIDEXT;
+  #define glXGetContextIDEXT GLeeFuncPtr_glXGetContextIDEXT
+#endif
+#ifndef GLEE_H_DEFINED_glXImportContextEXT
+#define GLEE_H_DEFINED_glXImportContextEXT
+  typedef GLXContext (APIENTRYP GLEEPFNGLXIMPORTCONTEXTEXTPROC) (Display * dpy, GLXContextID  contextID);
+  GLEE_EXTERN GLEEPFNGLXIMPORTCONTEXTEXTPROC GLeeFuncPtr_glXImportContextEXT;
+  #define glXImportContextEXT GLeeFuncPtr_glXImportContextEXT
+#endif
+#ifndef GLEE_H_DEFINED_glXFreeContextEXT
+#define GLEE_H_DEFINED_glXFreeContextEXT
+  typedef void (APIENTRYP GLEEPFNGLXFREECONTEXTEXTPROC) (Display * dpy, GLXContext  context);
+  GLEE_EXTERN GLEEPFNGLXFREECONTEXTEXTPROC GLeeFuncPtr_glXFreeContextEXT;
+  #define glXFreeContextEXT GLeeFuncPtr_glXFreeContextEXT
+#endif
+#endif 
+
+/* GLX_SGIX_fbconfig */
+
+#ifndef GLX_SGIX_fbconfig
+#define GLX_SGIX_fbconfig 1
+#define __GLEE_GLX_SGIX_fbconfig 1
+/* Constants */
+#define GLX_WINDOW_BIT_SGIX                                0x00000001
+#define GLX_PIXMAP_BIT_SGIX                                0x00000002
+#define GLX_RGBA_BIT_SGIX                                  0x00000001
+#define GLX_COLOR_INDEX_BIT_SGIX                           0x00000002
+#define GLX_DRAWABLE_TYPE_SGIX                             0x8010
+#define GLX_RENDER_TYPE_SGIX                               0x8011
+#define GLX_X_RENDERABLE_SGIX                              0x8012
+#define GLX_FBCONFIG_ID_SGIX                               0x8013
+#define GLX_RGBA_TYPE_SGIX                                 0x8014
+#define GLX_COLOR_INDEX_TYPE_SGIX                          0x8015
+#ifndef GLEE_H_DEFINED_glXGetFBConfigAttribSGIX
+#define GLEE_H_DEFINED_glXGetFBConfigAttribSGIX
+  typedef int (APIENTRYP GLEEPFNGLXGETFBCONFIGATTRIBSGIXPROC) (Display * dpy, GLXFBConfigSGIX  config, int  attribute, int * value);
+  GLEE_EXTERN GLEEPFNGLXGETFBCONFIGATTRIBSGIXPROC GLeeFuncPtr_glXGetFBConfigAttribSGIX;
+  #define glXGetFBConfigAttribSGIX GLeeFuncPtr_glXGetFBConfigAttribSGIX
+#endif
+#ifndef GLEE_H_DEFINED_glXChooseFBConfigSGIX
+#define GLEE_H_DEFINED_glXChooseFBConfigSGIX
+  typedef GLXFBConfigSGIX * (APIENTRYP GLEEPFNGLXCHOOSEFBCONFIGSGIXPROC) (Display * dpy, int  screen, int * attrib_list, int * nelements);
+  GLEE_EXTERN GLEEPFNGLXCHOOSEFBCONFIGSGIXPROC GLeeFuncPtr_glXChooseFBConfigSGIX;
+  #define glXChooseFBConfigSGIX GLeeFuncPtr_glXChooseFBConfigSGIX
+#endif
+#ifndef GLEE_H_DEFINED_glXCreateGLXPixmapWithConfigSGIX
+#define GLEE_H_DEFINED_glXCreateGLXPixmapWithConfigSGIX
+  typedef GLXPixmap (APIENTRYP GLEEPFNGLXCREATEGLXPIXMAPWITHCONFIGSGIXPROC) (Display * dpy, GLXFBConfigSGIX  config, Pixmap  pixmap);
+  GLEE_EXTERN GLEEPFNGLXCREATEGLXPIXMAPWITHCONFIGSGIXPROC GLeeFuncPtr_glXCreateGLXPixmapWithConfigSGIX;
+  #define glXCreateGLXPixmapWithConfigSGIX GLeeFuncPtr_glXCreateGLXPixmapWithConfigSGIX
+#endif
+#ifndef GLEE_H_DEFINED_glXCreateContextWithConfigSGIX
+#define GLEE_H_DEFINED_glXCreateContextWithConfigSGIX
+  typedef GLXContext (APIENTRYP GLEEPFNGLXCREATECONTEXTWITHCONFIGSGIXPROC) (Display * dpy, GLXFBConfigSGIX  config, int  render_type, GLXContext  share_list, Bool  direct);
+  GLEE_EXTERN GLEEPFNGLXCREATECONTEXTWITHCONFIGSGIXPROC GLeeFuncPtr_glXCreateContextWithConfigSGIX;
+  #define glXCreateContextWithConfigSGIX GLeeFuncPtr_glXCreateContextWithConfigSGIX
+#endif
+#ifndef GLEE_H_DEFINED_glXGetVisualFromFBConfigSGIX
+#define GLEE_H_DEFINED_glXGetVisualFromFBConfigSGIX
+  typedef XVisualInfo * (APIENTRYP GLEEPFNGLXGETVISUALFROMFBCONFIGSGIXPROC) (Display * dpy, GLXFBConfigSGIX  config);
+  GLEE_EXTERN GLEEPFNGLXGETVISUALFROMFBCONFIGSGIXPROC GLeeFuncPtr_glXGetVisualFromFBConfigSGIX;
+  #define glXGetVisualFromFBConfigSGIX GLeeFuncPtr_glXGetVisualFromFBConfigSGIX
+#endif
+#ifndef GLEE_H_DEFINED_glXGetFBConfigFromVisualSGIX
+#define GLEE_H_DEFINED_glXGetFBConfigFromVisualSGIX
+  typedef GLXFBConfigSGIX (APIENTRYP GLEEPFNGLXGETFBCONFIGFROMVISUALSGIXPROC) (Display * dpy, XVisualInfo * vis);
+  GLEE_EXTERN GLEEPFNGLXGETFBCONFIGFROMVISUALSGIXPROC GLeeFuncPtr_glXGetFBConfigFromVisualSGIX;
+  #define glXGetFBConfigFromVisualSGIX GLeeFuncPtr_glXGetFBConfigFromVisualSGIX
+#endif
+#endif 
+
+/* GLX_SGIX_pbuffer */
+
+#ifndef GLX_SGIX_pbuffer
+#define GLX_SGIX_pbuffer 1
+#define __GLEE_GLX_SGIX_pbuffer 1
+/* Constants */
+#define GLX_PBUFFER_BIT_SGIX                               0x00000004
+#define GLX_BUFFER_CLOBBER_MASK_SGIX                       0x08000000
+#define GLX_FRONT_LEFT_BUFFER_BIT_SGIX                     0x00000001
+#define GLX_FRONT_RIGHT_BUFFER_BIT_SGIX                    0x00000002
+#define GLX_BACK_LEFT_BUFFER_BIT_SGIX                      0x00000004
+#define GLX_BACK_RIGHT_BUFFER_BIT_SGIX                     0x00000008
+#define GLX_AUX_BUFFERS_BIT_SGIX                           0x00000010
+#define GLX_DEPTH_BUFFER_BIT_SGIX                          0x00000020
+#define GLX_STENCIL_BUFFER_BIT_SGIX                        0x00000040
+#define GLX_ACCUM_BUFFER_BIT_SGIX                          0x00000080
+#define GLX_SAMPLE_BUFFERS_BIT_SGIX                        0x00000100
+#define GLX_MAX_PBUFFER_WIDTH_SGIX                         0x8016
+#define GLX_MAX_PBUFFER_HEIGHT_SGIX                        0x8017
+#define GLX_MAX_PBUFFER_PIXELS_SGIX                        0x8018
+#define GLX_OPTIMAL_PBUFFER_WIDTH_SGIX                     0x8019
+#define GLX_OPTIMAL_PBUFFER_HEIGHT_SGIX                    0x801A
+#define GLX_PRESERVED_CONTENTS_SGIX                        0x801B
+#define GLX_LARGEST_PBUFFER_SGIX                           0x801C
+#define GLX_WIDTH_SGIX                                     0x801D
+#define GLX_HEIGHT_SGIX                                    0x801E
+#define GLX_EVENT_MASK_SGIX                                0x801F
+#define GLX_DAMAGED_SGIX                                   0x8020
+#define GLX_SAVED_SGIX                                     0x8021
+#define GLX_WINDOW_SGIX                                    0x8022
+#define GLX_PBUFFER_SGIX                                   0x8023
+#ifndef GLEE_H_DEFINED_glXCreateGLXPbufferSGIX
+#define GLEE_H_DEFINED_glXCreateGLXPbufferSGIX
+  typedef GLXPbufferSGIX (APIENTRYP GLEEPFNGLXCREATEGLXPBUFFERSGIXPROC) (Display * dpy, GLXFBConfigSGIX  config, unsigned int  width, unsigned int  height, int * attrib_list);
+  GLEE_EXTERN GLEEPFNGLXCREATEGLXPBUFFERSGIXPROC GLeeFuncPtr_glXCreateGLXPbufferSGIX;
+  #define glXCreateGLXPbufferSGIX GLeeFuncPtr_glXCreateGLXPbufferSGIX
+#endif
+#ifndef GLEE_H_DEFINED_glXDestroyGLXPbufferSGIX
+#define GLEE_H_DEFINED_glXDestroyGLXPbufferSGIX
+  typedef void (APIENTRYP GLEEPFNGLXDESTROYGLXPBUFFERSGIXPROC) (Display * dpy, GLXPbufferSGIX  pbuf);
+  GLEE_EXTERN GLEEPFNGLXDESTROYGLXPBUFFERSGIXPROC GLeeFuncPtr_glXDestroyGLXPbufferSGIX;
+  #define glXDestroyGLXPbufferSGIX GLeeFuncPtr_glXDestroyGLXPbufferSGIX
+#endif
+#ifndef GLEE_H_DEFINED_glXQueryGLXPbufferSGIX
+#define GLEE_H_DEFINED_glXQueryGLXPbufferSGIX
+  typedef int (APIENTRYP GLEEPFNGLXQUERYGLXPBUFFERSGIXPROC) (Display * dpy, GLXPbufferSGIX  pbuf, int  attribute, unsigned int * value);
+  GLEE_EXTERN GLEEPFNGLXQUERYGLXPBUFFERSGIXPROC GLeeFuncPtr_glXQueryGLXPbufferSGIX;
+  #define glXQueryGLXPbufferSGIX GLeeFuncPtr_glXQueryGLXPbufferSGIX
+#endif
+#ifndef GLEE_H_DEFINED_glXSelectEventSGIX
+#define GLEE_H_DEFINED_glXSelectEventSGIX
+  typedef void (APIENTRYP GLEEPFNGLXSELECTEVENTSGIXPROC) (Display * dpy, GLXDrawable  drawable, unsigned long  mask);
+  GLEE_EXTERN GLEEPFNGLXSELECTEVENTSGIXPROC GLeeFuncPtr_glXSelectEventSGIX;
+  #define glXSelectEventSGIX GLeeFuncPtr_glXSelectEventSGIX
+#endif
+#ifndef GLEE_H_DEFINED_glXGetSelectedEventSGIX
+#define GLEE_H_DEFINED_glXGetSelectedEventSGIX
+  typedef void (APIENTRYP GLEEPFNGLXGETSELECTEDEVENTSGIXPROC) (Display * dpy, GLXDrawable  drawable, unsigned long * mask);
+  GLEE_EXTERN GLEEPFNGLXGETSELECTEDEVENTSGIXPROC GLeeFuncPtr_glXGetSelectedEventSGIX;
+  #define glXGetSelectedEventSGIX GLeeFuncPtr_glXGetSelectedEventSGIX
+#endif
+#endif 
+
+/* GLX_SGI_cushion */
+
+#ifndef GLX_SGI_cushion
+#define GLX_SGI_cushion 1
+#define __GLEE_GLX_SGI_cushion 1
+/* Constants */
+#ifndef GLEE_H_DEFINED_glXCushionSGI
+#define GLEE_H_DEFINED_glXCushionSGI
+  typedef void (APIENTRYP GLEEPFNGLXCUSHIONSGIPROC) (Display * dpy, Window  window, float  cushion);
+  GLEE_EXTERN GLEEPFNGLXCUSHIONSGIPROC GLeeFuncPtr_glXCushionSGI;
+  #define glXCushionSGI GLeeFuncPtr_glXCushionSGI
+#endif
+#endif 
+
+/* GLX_SGIX_video_resize */
+
+#ifndef GLX_SGIX_video_resize
+#define GLX_SGIX_video_resize 1
+#define __GLEE_GLX_SGIX_video_resize 1
+/* Constants */
+#define GLX_SYNC_FRAME_SGIX                                0x00000000
+#define GLX_SYNC_SWAP_SGIX                                 0x00000001
+#ifndef GLEE_H_DEFINED_glXBindChannelToWindowSGIX
+#define GLEE_H_DEFINED_glXBindChannelToWindowSGIX
+  typedef int (APIENTRYP GLEEPFNGLXBINDCHANNELTOWINDOWSGIXPROC) (Display * display, int  screen, int  channel, Window  window);
+  GLEE_EXTERN GLEEPFNGLXBINDCHANNELTOWINDOWSGIXPROC GLeeFuncPtr_glXBindChannelToWindowSGIX;
+  #define glXBindChannelToWindowSGIX GLeeFuncPtr_glXBindChannelToWindowSGIX
+#endif
+#ifndef GLEE_H_DEFINED_glXChannelRectSGIX
+#define GLEE_H_DEFINED_glXChannelRectSGIX
+  typedef int (APIENTRYP GLEEPFNGLXCHANNELRECTSGIXPROC) (Display * display, int  screen, int  channel, int  x, int  y, int  w, int  h);
+  GLEE_EXTERN GLEEPFNGLXCHANNELRECTSGIXPROC GLeeFuncPtr_glXChannelRectSGIX;
+  #define glXChannelRectSGIX GLeeFuncPtr_glXChannelRectSGIX
+#endif
+#ifndef GLEE_H_DEFINED_glXQueryChannelRectSGIX
+#define GLEE_H_DEFINED_glXQueryChannelRectSGIX
+  typedef int (APIENTRYP GLEEPFNGLXQUERYCHANNELRECTSGIXPROC) (Display * display, int  screen, int  channel, int * dx, int * dy, int * dw, int * dh);
+  GLEE_EXTERN GLEEPFNGLXQUERYCHANNELRECTSGIXPROC GLeeFuncPtr_glXQueryChannelRectSGIX;
+  #define glXQueryChannelRectSGIX GLeeFuncPtr_glXQueryChannelRectSGIX
+#endif
+#ifndef GLEE_H_DEFINED_glXQueryChannelDeltasSGIX
+#define GLEE_H_DEFINED_glXQueryChannelDeltasSGIX
+  typedef int (APIENTRYP GLEEPFNGLXQUERYCHANNELDELTASSGIXPROC) (Display * display, int  screen, int  channel, int * x, int * y, int * w, int * h);
+  GLEE_EXTERN GLEEPFNGLXQUERYCHANNELDELTASSGIXPROC GLeeFuncPtr_glXQueryChannelDeltasSGIX;
+  #define glXQueryChannelDeltasSGIX GLeeFuncPtr_glXQueryChannelDeltasSGIX
+#endif
+#ifndef GLEE_H_DEFINED_glXChannelRectSyncSGIX
+#define GLEE_H_DEFINED_glXChannelRectSyncSGIX
+  typedef int (APIENTRYP GLEEPFNGLXCHANNELRECTSYNCSGIXPROC) (Display * display, int  screen, int  channel, GLenum  synctype);
+  GLEE_EXTERN GLEEPFNGLXCHANNELRECTSYNCSGIXPROC GLeeFuncPtr_glXChannelRectSyncSGIX;
+  #define glXChannelRectSyncSGIX GLeeFuncPtr_glXChannelRectSyncSGIX
+#endif
+#endif 
+
+/* GLX_SGIX_swap_group */
+
+#ifndef GLX_SGIX_swap_group
+#define GLX_SGIX_swap_group 1
+#define __GLEE_GLX_SGIX_swap_group 1
+/* Constants */
+#ifndef GLEE_H_DEFINED_glXJoinSwapGroupSGIX
+#define GLEE_H_DEFINED_glXJoinSwapGroupSGIX
+  typedef void (APIENTRYP GLEEPFNGLXJOINSWAPGROUPSGIXPROC) (Display * dpy, GLXDrawable  drawable, GLXDrawable  member);
+  GLEE_EXTERN GLEEPFNGLXJOINSWAPGROUPSGIXPROC GLeeFuncPtr_glXJoinSwapGroupSGIX;
+  #define glXJoinSwapGroupSGIX GLeeFuncPtr_glXJoinSwapGroupSGIX
+#endif
+#endif 
+
+/* GLX_SGIX_swap_barrier */
+
+#ifndef GLX_SGIX_swap_barrier
+#define GLX_SGIX_swap_barrier 1
+#define __GLEE_GLX_SGIX_swap_barrier 1
+/* Constants */
+#ifndef GLEE_H_DEFINED_glXBindSwapBarrierSGIX
+#define GLEE_H_DEFINED_glXBindSwapBarrierSGIX
+  typedef void (APIENTRYP GLEEPFNGLXBINDSWAPBARRIERSGIXPROC) (Display * dpy, GLXDrawable  drawable, int  barrier);
+  GLEE_EXTERN GLEEPFNGLXBINDSWAPBARRIERSGIXPROC GLeeFuncPtr_glXBindSwapBarrierSGIX;
+  #define glXBindSwapBarrierSGIX GLeeFuncPtr_glXBindSwapBarrierSGIX
+#endif
+#ifndef GLEE_H_DEFINED_glXQueryMaxSwapBarriersSGIX
+#define GLEE_H_DEFINED_glXQueryMaxSwapBarriersSGIX
+  typedef Bool (APIENTRYP GLEEPFNGLXQUERYMAXSWAPBARRIERSSGIXPROC) (Display * dpy, int  screen, int * max);
+  GLEE_EXTERN GLEEPFNGLXQUERYMAXSWAPBARRIERSSGIXPROC GLeeFuncPtr_glXQueryMaxSwapBarriersSGIX;
+  #define glXQueryMaxSwapBarriersSGIX GLeeFuncPtr_glXQueryMaxSwapBarriersSGIX
+#endif
+#endif 
+
+/* GLX_SGIS_blended_overlay */
+
+#ifndef GLX_SGIS_blended_overlay
+#define GLX_SGIS_blended_overlay 1
+#define __GLEE_GLX_SGIS_blended_overlay 1
+/* Constants */
+#define GLX_BLENDED_RGBA_SGIS                              0x8025
+#endif 
+
+/* GLX_SGIS_shared_multisample */
+
+#ifndef GLX_SGIS_shared_multisample
+#define GLX_SGIS_shared_multisample 1
+#define __GLEE_GLX_SGIS_shared_multisample 1
+/* Constants */
+#define GLX_MULTISAMPLE_SUB_RECT_WIDTH_SGIS                0x8026
+#define GLX_MULTISAMPLE_SUB_RECT_HEIGHT_SGIS               0x8027
+#endif 
+
+/* GLX_SUN_get_transparent_index */
+
+#ifndef GLX_SUN_get_transparent_index
+#define GLX_SUN_get_transparent_index 1
+#define __GLEE_GLX_SUN_get_transparent_index 1
+/* Constants */
+#ifndef GLEE_H_DEFINED_glXGetTransparentIndexSUN
+#define GLEE_H_DEFINED_glXGetTransparentIndexSUN
+  typedef Status (APIENTRYP GLEEPFNGLXGETTRANSPARENTINDEXSUNPROC) (Display * dpy, Window  overlay, Window  underlay, long * pTransparentIndex);
+  GLEE_EXTERN GLEEPFNGLXGETTRANSPARENTINDEXSUNPROC GLeeFuncPtr_glXGetTransparentIndexSUN;
+  #define glXGetTransparentIndexSUN GLeeFuncPtr_glXGetTransparentIndexSUN
+#endif
+#endif 
+
+/* GLX_3DFX_multisample */
+
+#ifndef GLX_3DFX_multisample
+#define GLX_3DFX_multisample 1
+#define __GLEE_GLX_3DFX_multisample 1
+/* Constants */
+#define GLX_SAMPLE_BUFFERS_3DFX                            0x8050
+#define GLX_SAMPLES_3DFX                                   0x8051
+#endif 
+
+/* GLX_MESA_copy_sub_buffer */
+
+#ifndef GLX_MESA_copy_sub_buffer
+#define GLX_MESA_copy_sub_buffer 1
+#define __GLEE_GLX_MESA_copy_sub_buffer 1
+/* Constants */
+#ifndef GLEE_H_DEFINED_glXCopySubBufferMESA
+#define GLEE_H_DEFINED_glXCopySubBufferMESA
+  typedef void (APIENTRYP GLEEPFNGLXCOPYSUBBUFFERMESAPROC) (Display * dpy, GLXDrawable  drawable, int  x, int  y, int  width, int  height);
+  GLEE_EXTERN GLEEPFNGLXCOPYSUBBUFFERMESAPROC GLeeFuncPtr_glXCopySubBufferMESA;
+  #define glXCopySubBufferMESA GLeeFuncPtr_glXCopySubBufferMESA
+#endif
+#endif 
+
+/* GLX_MESA_pixmap_colormap */
+
+#ifndef GLX_MESA_pixmap_colormap
+#define GLX_MESA_pixmap_colormap 1
+#define __GLEE_GLX_MESA_pixmap_colormap 1
+/* Constants */
+#ifndef GLEE_H_DEFINED_glXCreateGLXPixmapMESA
+#define GLEE_H_DEFINED_glXCreateGLXPixmapMESA
+  typedef GLXPixmap (APIENTRYP GLEEPFNGLXCREATEGLXPIXMAPMESAPROC) (Display * dpy, XVisualInfo * visual, Pixmap  pixmap, Colormap  cmap);
+  GLEE_EXTERN GLEEPFNGLXCREATEGLXPIXMAPMESAPROC GLeeFuncPtr_glXCreateGLXPixmapMESA;
+  #define glXCreateGLXPixmapMESA GLeeFuncPtr_glXCreateGLXPixmapMESA
+#endif
+#endif 
+
+/* GLX_MESA_release_buffers */
+
+#ifndef GLX_MESA_release_buffers
+#define GLX_MESA_release_buffers 1
+#define __GLEE_GLX_MESA_release_buffers 1
+/* Constants */
+#ifndef GLEE_H_DEFINED_glXReleaseBuffersMESA
+#define GLEE_H_DEFINED_glXReleaseBuffersMESA
+  typedef Bool (APIENTRYP GLEEPFNGLXRELEASEBUFFERSMESAPROC) (Display * dpy, GLXDrawable  drawable);
+  GLEE_EXTERN GLEEPFNGLXRELEASEBUFFERSMESAPROC GLeeFuncPtr_glXReleaseBuffersMESA;
+  #define glXReleaseBuffersMESA GLeeFuncPtr_glXReleaseBuffersMESA
+#endif
+#endif 
+
+/* GLX_MESA_set_3dfx_mode */
+
+#ifndef GLX_MESA_set_3dfx_mode
+#define GLX_MESA_set_3dfx_mode 1
+#define __GLEE_GLX_MESA_set_3dfx_mode 1
+/* Constants */
+#define GLX_3DFX_WINDOW_MODE_MESA                          0x1
+#define GLX_3DFX_FULLSCREEN_MODE_MESA                      0x2
+#ifndef GLEE_H_DEFINED_glXSet3DfxModeMESA
+#define GLEE_H_DEFINED_glXSet3DfxModeMESA
+  typedef Bool (APIENTRYP GLEEPFNGLXSET3DFXMODEMESAPROC) (int  mode);
+  GLEE_EXTERN GLEEPFNGLXSET3DFXMODEMESAPROC GLeeFuncPtr_glXSet3DfxModeMESA;
+  #define glXSet3DfxModeMESA GLeeFuncPtr_glXSet3DfxModeMESA
+#endif
+#endif 
+
+/* GLX_SGIX_visual_select_group */
+
+#ifndef GLX_SGIX_visual_select_group
+#define GLX_SGIX_visual_select_group 1
+#define __GLEE_GLX_SGIX_visual_select_group 1
+/* Constants */
+#define GLX_VISUAL_SELECT_GROUP_SGIX                       0x8028
+#endif 
+
+/* GLX_OML_swap_method */
+
+#ifndef GLX_OML_swap_method
+#define GLX_OML_swap_method 1
+#define __GLEE_GLX_OML_swap_method 1
+/* Constants */
+#define GLX_SWAP_METHOD_OML                                0x8060
+#define GLX_SWAP_EXCHANGE_OML                              0x8061
+#define GLX_SWAP_COPY_OML                                  0x8062
+#define GLX_SWAP_UNDEFINED_OML                             0x8063
+#endif 
+
+/* GLX_OML_sync_control */
+
+#ifndef GLX_OML_sync_control
+#define GLX_OML_sync_control 1
+#define __GLEE_GLX_OML_sync_control 1
+/* Constants */
+#ifndef GLEE_H_DEFINED_glXGetSyncValuesOML
+#define GLEE_H_DEFINED_glXGetSyncValuesOML
+  typedef Bool (APIENTRYP GLEEPFNGLXGETSYNCVALUESOMLPROC) (Display * dpy, GLXDrawable  drawable, int64_t * ust, int64_t * msc, int64_t * sbc);
+  GLEE_EXTERN GLEEPFNGLXGETSYNCVALUESOMLPROC GLeeFuncPtr_glXGetSyncValuesOML;
+  #define glXGetSyncValuesOML GLeeFuncPtr_glXGetSyncValuesOML
+#endif
+#ifndef GLEE_H_DEFINED_glXGetMscRateOML
+#define GLEE_H_DEFINED_glXGetMscRateOML
+  typedef Bool (APIENTRYP GLEEPFNGLXGETMSCRATEOMLPROC) (Display * dpy, GLXDrawable  drawable, int32_t * numerator, int32_t * denominator);
+  GLEE_EXTERN GLEEPFNGLXGETMSCRATEOMLPROC GLeeFuncPtr_glXGetMscRateOML;
+  #define glXGetMscRateOML GLeeFuncPtr_glXGetMscRateOML
+#endif
+#ifndef GLEE_H_DEFINED_glXSwapBuffersMscOML
+#define GLEE_H_DEFINED_glXSwapBuffersMscOML
+  typedef int64_t (APIENTRYP GLEEPFNGLXSWAPBUFFERSMSCOMLPROC) (Display * dpy, GLXDrawable  drawable, int64_t  target_msc, int64_t  divisor, int64_t  remainder);
+  GLEE_EXTERN GLEEPFNGLXSWAPBUFFERSMSCOMLPROC GLeeFuncPtr_glXSwapBuffersMscOML;
+  #define glXSwapBuffersMscOML GLeeFuncPtr_glXSwapBuffersMscOML
+#endif
+#ifndef GLEE_H_DEFINED_glXWaitForMscOML
+#define GLEE_H_DEFINED_glXWaitForMscOML
+  typedef Bool (APIENTRYP GLEEPFNGLXWAITFORMSCOMLPROC) (Display * dpy, GLXDrawable  drawable, int64_t  target_msc, int64_t  divisor, int64_t  remainder, int64_t * ust, int64_t * msc, int64_t * sbc);
+  GLEE_EXTERN GLEEPFNGLXWAITFORMSCOMLPROC GLeeFuncPtr_glXWaitForMscOML;
+  #define glXWaitForMscOML GLeeFuncPtr_glXWaitForMscOML
+#endif
+#ifndef GLEE_H_DEFINED_glXWaitForSbcOML
+#define GLEE_H_DEFINED_glXWaitForSbcOML
+  typedef Bool (APIENTRYP GLEEPFNGLXWAITFORSBCOMLPROC) (Display * dpy, GLXDrawable  drawable, int64_t  target_sbc, int64_t * ust, int64_t * msc, int64_t * sbc);
+  GLEE_EXTERN GLEEPFNGLXWAITFORSBCOMLPROC GLeeFuncPtr_glXWaitForSbcOML;
+  #define glXWaitForSbcOML GLeeFuncPtr_glXWaitForSbcOML
+#endif
+#endif 
+
+/* GLX_NV_float_buffer */
+
+#ifndef GLX_NV_float_buffer
+#define GLX_NV_float_buffer 1
+#define __GLEE_GLX_NV_float_buffer 1
+/* Constants */
+#define GLX_FLOAT_COMPONENTS_NV                            0x20B0
+#endif 
+
+/* GLX_SGIX_hyperpipe */
+
+#ifndef GLX_SGIX_hyperpipe
+#define GLX_SGIX_hyperpipe 1
+#define __GLEE_GLX_SGIX_hyperpipe 1
+/* Constants */
+#define GLX_HYPERPIPE_PIPE_NAME_LENGTH_SGIX                80
+#define GLX_BAD_HYPERPIPE_CONFIG_SGIX                      91
+#define GLX_BAD_HYPERPIPE_SGIX                             92
+#define GLX_HYPERPIPE_DISPLAY_PIPE_SGIX                    0x00000001
+#define GLX_HYPERPIPE_RENDER_PIPE_SGIX                     0x00000002
+#define GLX_PIPE_RECT_SGIX                                 0x00000001
+#define GLX_PIPE_RECT_LIMITS_SGIX                          0x00000002
+#define GLX_HYPERPIPE_STEREO_SGIX                          0x00000003
+#define GLX_HYPERPIPE_PIXEL_AVERAGE_SGIX                   0x00000004
+#define GLX_HYPERPIPE_ID_SGIX                              0x8030
+#ifndef GLEE_H_DEFINED_glXQueryHyperpipeNetworkSGIX
+#define GLEE_H_DEFINED_glXQueryHyperpipeNetworkSGIX
+  typedef GLXHyperpipeNetworkSGIX * (APIENTRYP GLEEPFNGLXQUERYHYPERPIPENETWORKSGIXPROC) (Display * dpy, int * npipes);
+  GLEE_EXTERN GLEEPFNGLXQUERYHYPERPIPENETWORKSGIXPROC GLeeFuncPtr_glXQueryHyperpipeNetworkSGIX;
+  #define glXQueryHyperpipeNetworkSGIX GLeeFuncPtr_glXQueryHyperpipeNetworkSGIX
+#endif
+#ifndef GLEE_H_DEFINED_glXHyperpipeConfigSGIX
+#define GLEE_H_DEFINED_glXHyperpipeConfigSGIX
+  typedef int (APIENTRYP GLEEPFNGLXHYPERPIPECONFIGSGIXPROC) (Display * dpy, int  networkId, int  npipes, GLXHyperpipeConfigSGIX * cfg, int * hpId);
+  GLEE_EXTERN GLEEPFNGLXHYPERPIPECONFIGSGIXPROC GLeeFuncPtr_glXHyperpipeConfigSGIX;
+  #define glXHyperpipeConfigSGIX GLeeFuncPtr_glXHyperpipeConfigSGIX
+#endif
+#ifndef GLEE_H_DEFINED_glXQueryHyperpipeConfigSGIX
+#define GLEE_H_DEFINED_glXQueryHyperpipeConfigSGIX
+  typedef GLXHyperpipeConfigSGIX * (APIENTRYP GLEEPFNGLXQUERYHYPERPIPECONFIGSGIXPROC) (Display * dpy, int  hpId, int * npipes);
+  GLEE_EXTERN GLEEPFNGLXQUERYHYPERPIPECONFIGSGIXPROC GLeeFuncPtr_glXQueryHyperpipeConfigSGIX;
+  #define glXQueryHyperpipeConfigSGIX GLeeFuncPtr_glXQueryHyperpipeConfigSGIX
+#endif
+#ifndef GLEE_H_DEFINED_glXDestroyHyperpipeConfigSGIX
+#define GLEE_H_DEFINED_glXDestroyHyperpipeConfigSGIX
+  typedef int (APIENTRYP GLEEPFNGLXDESTROYHYPERPIPECONFIGSGIXPROC) (Display * dpy, int  hpId);
+  GLEE_EXTERN GLEEPFNGLXDESTROYHYPERPIPECONFIGSGIXPROC GLeeFuncPtr_glXDestroyHyperpipeConfigSGIX;
+  #define glXDestroyHyperpipeConfigSGIX GLeeFuncPtr_glXDestroyHyperpipeConfigSGIX
+#endif
+#ifndef GLEE_H_DEFINED_glXBindHyperpipeSGIX
+#define GLEE_H_DEFINED_glXBindHyperpipeSGIX
+  typedef int (APIENTRYP GLEEPFNGLXBINDHYPERPIPESGIXPROC) (Display * dpy, int  hpId);
+  GLEE_EXTERN GLEEPFNGLXBINDHYPERPIPESGIXPROC GLeeFuncPtr_glXBindHyperpipeSGIX;
+  #define glXBindHyperpipeSGIX GLeeFuncPtr_glXBindHyperpipeSGIX
+#endif
+#ifndef GLEE_H_DEFINED_glXQueryHyperpipeBestAttribSGIX
+#define GLEE_H_DEFINED_glXQueryHyperpipeBestAttribSGIX
+  typedef int (APIENTRYP GLEEPFNGLXQUERYHYPERPIPEBESTATTRIBSGIXPROC) (Display * dpy, int  timeSlice, int  attrib, int  size, void * attribList, void * returnAttribList);
+  GLEE_EXTERN GLEEPFNGLXQUERYHYPERPIPEBESTATTRIBSGIXPROC GLeeFuncPtr_glXQueryHyperpipeBestAttribSGIX;
+  #define glXQueryHyperpipeBestAttribSGIX GLeeFuncPtr_glXQueryHyperpipeBestAttribSGIX
+#endif
+#ifndef GLEE_H_DEFINED_glXHyperpipeAttribSGIX
+#define GLEE_H_DEFINED_glXHyperpipeAttribSGIX
+  typedef int (APIENTRYP GLEEPFNGLXHYPERPIPEATTRIBSGIXPROC) (Display * dpy, int  timeSlice, int  attrib, int  size, void * attribList);
+  GLEE_EXTERN GLEEPFNGLXHYPERPIPEATTRIBSGIXPROC GLeeFuncPtr_glXHyperpipeAttribSGIX;
+  #define glXHyperpipeAttribSGIX GLeeFuncPtr_glXHyperpipeAttribSGIX
+#endif
+#ifndef GLEE_H_DEFINED_glXQueryHyperpipeAttribSGIX
+#define GLEE_H_DEFINED_glXQueryHyperpipeAttribSGIX
+  typedef int (APIENTRYP GLEEPFNGLXQUERYHYPERPIPEATTRIBSGIXPROC) (Display * dpy, int  timeSlice, int  attrib, int  size, void * returnAttribList);
+  GLEE_EXTERN GLEEPFNGLXQUERYHYPERPIPEATTRIBSGIXPROC GLeeFuncPtr_glXQueryHyperpipeAttribSGIX;
+  #define glXQueryHyperpipeAttribSGIX GLeeFuncPtr_glXQueryHyperpipeAttribSGIX
+#endif
+#endif 
+
+/* GLX_MESA_agp_offset */
+
+#ifndef GLX_MESA_agp_offset
+#define GLX_MESA_agp_offset 1
+#define __GLEE_GLX_MESA_agp_offset 1
+/* Constants */
+#ifndef GLEE_H_DEFINED_glXGetAGPOffsetMESA
+#define GLEE_H_DEFINED_glXGetAGPOffsetMESA
+  typedef unsigned int (APIENTRYP GLEEPFNGLXGETAGPOFFSETMESAPROC) (const void * pointer);
+  GLEE_EXTERN GLEEPFNGLXGETAGPOFFSETMESAPROC GLeeFuncPtr_glXGetAGPOffsetMESA;
+  #define glXGetAGPOffsetMESA GLeeFuncPtr_glXGetAGPOffsetMESA
+#endif
+#endif 
+
+/* GLX_EXT_fbconfig_packed_float */
+
+#ifndef GLX_EXT_fbconfig_packed_float
+#define GLX_EXT_fbconfig_packed_float 1
+#define __GLEE_GLX_EXT_fbconfig_packed_float 1
+/* Constants */
+#define GLX_RGBA_UNSIGNED_FLOAT_TYPE_EXT                   0x20B1
+#define GLX_RGBA_UNSIGNED_FLOAT_BIT_EXT                    0x00000008
+#endif 
+
+/* GLX_EXT_framebuffer_sRGB */
+
+#ifndef GLX_EXT_framebuffer_sRGB
+#define GLX_EXT_framebuffer_sRGB 1
+#define __GLEE_GLX_EXT_framebuffer_sRGB 1
+/* Constants */
+#define GLX_FRAMEBUFFER_SRGB_CAPABLE_EXT                   0x20B2
+#endif 
+
+/* GLX_EXT_texture_from_pixmap */
+
+#ifndef GLX_EXT_texture_from_pixmap
+#define GLX_EXT_texture_from_pixmap 1
+#define __GLEE_GLX_EXT_texture_from_pixmap 1
+/* Constants */
+#define GLX_TEXTURE_1D_BIT_EXT                             0x00000001
+#define GLX_TEXTURE_2D_BIT_EXT                             0x00000002
+#define GLX_TEXTURE_RECTANGLE_BIT_EXT                      0x00000004
+#define GLX_BIND_TO_TEXTURE_RGB_EXT                        0x20D0
+#define GLX_BIND_TO_TEXTURE_RGBA_EXT                       0x20D1
+#define GLX_BIND_TO_MIPMAP_TEXTURE_EXT                     0x20D2
+#define GLX_BIND_TO_TEXTURE_TARGETS_EXT                    0x20D3
+#define GLX_Y_INVERTED_EXT                                 0x20D4
+#define GLX_TEXTURE_FORMAT_EXT                             0x20D5
+#define GLX_TEXTURE_TARGET_EXT                             0x20D6
+#define GLX_MIPMAP_TEXTURE_EXT                             0x20D7
+#define GLX_TEXTURE_FORMAT_NONE_EXT                        0x20D8
+#define GLX_TEXTURE_FORMAT_RGB_EXT                         0x20D9
+#define GLX_TEXTURE_FORMAT_RGBA_EXT                        0x20DA
+#define GLX_TEXTURE_1D_EXT                                 0x20DB
+#define GLX_TEXTURE_2D_EXT                                 0x20DC
+#define GLX_TEXTURE_RECTANGLE_EXT                          0x20DD
+#define GLX_FRONT_LEFT_EXT                                 0x20DE
+#define GLX_FRONT_RIGHT_EXT                                0x20DF
+#define GLX_BACK_LEFT_EXT                                  0x20E0
+#define GLX_BACK_RIGHT_EXT                                 0x20E1
+#define GLX_FRONT_EXT                                      GLX_FRONT_LEFT_EXT
+#define GLX_BACK_EXT                                       GLX_BACK_LEFT_EXT
+#define GLX_AUX0_EXT                                       0x20E2
+#define GLX_AUX1_EXT                                       0x20E3
+#define GLX_AUX2_EXT                                       0x20E4
+#define GLX_AUX3_EXT                                       0x20E5
+#define GLX_AUX4_EXT                                       0x20E6
+#define GLX_AUX5_EXT                                       0x20E7
+#define GLX_AUX6_EXT                                       0x20E8
+#define GLX_AUX7_EXT                                       0x20E9
+#define GLX_AUX8_EXT                                       0x20EA
+#define GLX_AUX9_EXT                                       0x20EB
+#ifndef GLEE_H_DEFINED_glXBindTexImageEXT
+#define GLEE_H_DEFINED_glXBindTexImageEXT
+  typedef void (APIENTRYP GLEEPFNGLXBINDTEXIMAGEEXTPROC) (Display * dpy, GLXDrawable  drawable, int  buffer, const int * attrib_list);
+  GLEE_EXTERN GLEEPFNGLXBINDTEXIMAGEEXTPROC GLeeFuncPtr_glXBindTexImageEXT;
+  #define glXBindTexImageEXT GLeeFuncPtr_glXBindTexImageEXT
+#endif
+#ifndef GLEE_H_DEFINED_glXReleaseTexImageEXT
+#define GLEE_H_DEFINED_glXReleaseTexImageEXT
+  typedef void (APIENTRYP GLEEPFNGLXRELEASETEXIMAGEEXTPROC) (Display * dpy, GLXDrawable  drawable, int  buffer);
+  GLEE_EXTERN GLEEPFNGLXRELEASETEXIMAGEEXTPROC GLeeFuncPtr_glXReleaseTexImageEXT;
+  #define glXReleaseTexImageEXT GLeeFuncPtr_glXReleaseTexImageEXT
+#endif
+#endif 
+
+/* GLX_NV_present_video */
+
+#ifndef GLX_NV_present_video
+#define GLX_NV_present_video 1
+#define __GLEE_GLX_NV_present_video 1
+/* Constants */
+#define GLX_NUM_VIDEO_SLOTS_NV                             0x20F0
+#ifndef GLEE_H_DEFINED_glXEnumerateVideoDevicesNV
+#define GLEE_H_DEFINED_glXEnumerateVideoDevicesNV
+  typedef unsigned int * (APIENTRYP GLEEPFNGLXENUMERATEVIDEODEVICESNVPROC) (Display * dpy, int  screen, int * nelements);
+  GLEE_EXTERN GLEEPFNGLXENUMERATEVIDEODEVICESNVPROC GLeeFuncPtr_glXEnumerateVideoDevicesNV;
+  #define glXEnumerateVideoDevicesNV GLeeFuncPtr_glXEnumerateVideoDevicesNV
+#endif
+#ifndef GLEE_H_DEFINED_glXBindVideoDeviceNV
+#define GLEE_H_DEFINED_glXBindVideoDeviceNV
+  typedef int (APIENTRYP GLEEPFNGLXBINDVIDEODEVICENVPROC) (Display * dpy, unsigned int  video_slot, unsigned int  video_device, const int * attrib_list);
+  GLEE_EXTERN GLEEPFNGLXBINDVIDEODEVICENVPROC GLeeFuncPtr_glXBindVideoDeviceNV;
+  #define glXBindVideoDeviceNV GLeeFuncPtr_glXBindVideoDeviceNV
+#endif
+#endif 
+
+/* GLX_NV_video_out */
+
+#ifndef GLX_NV_video_out
+#define GLX_NV_video_out 1
+#define __GLEE_GLX_NV_video_out 1
+/* Constants */
+#define GLX_VIDEO_OUT_COLOR_NV                             0x20C3
+#define GLX_VIDEO_OUT_ALPHA_NV                             0x20C4
+#define GLX_VIDEO_OUT_DEPTH_NV                             0x20C5
+#define GLX_VIDEO_OUT_COLOR_AND_ALPHA_NV                   0x20C6
+#define GLX_VIDEO_OUT_COLOR_AND_DEPTH_NV                   0x20C7
+#define GLX_VIDEO_OUT_FRAME_NV                             0x20C8
+#define GLX_VIDEO_OUT_FIELD_1_NV                           0x20C9
+#define GLX_VIDEO_OUT_FIELD_2_NV                           0x20CA
+#define GLX_VIDEO_OUT_STACKED_FIELDS_1_2_NV                0x20CB
+#define GLX_VIDEO_OUT_STACKED_FIELDS_2_1_NV                0x20CC
+#endif 
+
+/* GLX_NV_swap_group */
+
+#ifndef GLX_NV_swap_group
+#define GLX_NV_swap_group 1
+#define __GLEE_GLX_NV_swap_group 1
+/* Constants */
+#ifndef GLEE_H_DEFINED_glXJoinSwapGroupNV
+#define GLEE_H_DEFINED_glXJoinSwapGroupNV
+  typedef Bool (APIENTRYP GLEEPFNGLXJOINSWAPGROUPNVPROC) (Display * dpy, GLXDrawable  drawable, GLuint  group);
+  GLEE_EXTERN GLEEPFNGLXJOINSWAPGROUPNVPROC GLeeFuncPtr_glXJoinSwapGroupNV;
+  #define glXJoinSwapGroupNV GLeeFuncPtr_glXJoinSwapGroupNV
+#endif
+#ifndef GLEE_H_DEFINED_glXBindSwapBarrierNV
+#define GLEE_H_DEFINED_glXBindSwapBarrierNV
+  typedef Bool (APIENTRYP GLEEPFNGLXBINDSWAPBARRIERNVPROC) (Display * dpy, GLuint  group, GLuint  barrier);
+  GLEE_EXTERN GLEEPFNGLXBINDSWAPBARRIERNVPROC GLeeFuncPtr_glXBindSwapBarrierNV;
+  #define glXBindSwapBarrierNV GLeeFuncPtr_glXBindSwapBarrierNV
+#endif
+#ifndef GLEE_H_DEFINED_glXQuerySwapGroupNV
+#define GLEE_H_DEFINED_glXQuerySwapGroupNV
+  typedef Bool (APIENTRYP GLEEPFNGLXQUERYSWAPGROUPNVPROC) (Display * dpy, GLXDrawable  drawable, GLuint * group, GLuint * barrier);
+  GLEE_EXTERN GLEEPFNGLXQUERYSWAPGROUPNVPROC GLeeFuncPtr_glXQuerySwapGroupNV;
+  #define glXQuerySwapGroupNV GLeeFuncPtr_glXQuerySwapGroupNV
+#endif
+#ifndef GLEE_H_DEFINED_glXQueryMaxSwapGroupsNV
+#define GLEE_H_DEFINED_glXQueryMaxSwapGroupsNV
+  typedef Bool (APIENTRYP GLEEPFNGLXQUERYMAXSWAPGROUPSNVPROC) (Display * dpy, int  screen, GLuint * maxGroups, GLuint * maxBarriers);
+  GLEE_EXTERN GLEEPFNGLXQUERYMAXSWAPGROUPSNVPROC GLeeFuncPtr_glXQueryMaxSwapGroupsNV;
+  #define glXQueryMaxSwapGroupsNV GLeeFuncPtr_glXQueryMaxSwapGroupsNV
+#endif
+#ifndef GLEE_H_DEFINED_glXQueryFrameCountNV
+#define GLEE_H_DEFINED_glXQueryFrameCountNV
+  typedef Bool (APIENTRYP GLEEPFNGLXQUERYFRAMECOUNTNVPROC) (Display * dpy, int  screen, GLuint * count);
+  GLEE_EXTERN GLEEPFNGLXQUERYFRAMECOUNTNVPROC GLeeFuncPtr_glXQueryFrameCountNV;
+  #define glXQueryFrameCountNV GLeeFuncPtr_glXQueryFrameCountNV
+#endif
+#ifndef GLEE_H_DEFINED_glXResetFrameCountNV
+#define GLEE_H_DEFINED_glXResetFrameCountNV
+  typedef Bool (APIENTRYP GLEEPFNGLXRESETFRAMECOUNTNVPROC) (Display * dpy, int  screen);
+  GLEE_EXTERN GLEEPFNGLXRESETFRAMECOUNTNVPROC GLeeFuncPtr_glXResetFrameCountNV;
+  #define glXResetFrameCountNV GLeeFuncPtr_glXResetFrameCountNV
+#endif
+#endif 
+
+/* GLX_NV_video_capture */
+
+#ifndef GLX_NV_video_capture
+#define GLX_NV_video_capture 1
+#define __GLEE_GLX_NV_video_capture 1
+/* Constants */
+#define GLX_DEVICE_ID_NV                                   0x20CD
+#define GLX_UNIQUE_ID_NV                                   0x20CE
+#define GLX_NUM_VIDEO_CAPTURE_SLOTS_NV                     0x20CF
+#ifndef GLEE_H_DEFINED_glXBindVideoCaptureDeviceNV
+#define GLEE_H_DEFINED_glXBindVideoCaptureDeviceNV
+  typedef int (APIENTRYP GLEEPFNGLXBINDVIDEOCAPTUREDEVICENVPROC) (Display * dpy, unsigned int  video_capture_slot, GLXVideoCaptureDeviceNV  device);
+  GLEE_EXTERN GLEEPFNGLXBINDVIDEOCAPTUREDEVICENVPROC GLeeFuncPtr_glXBindVideoCaptureDeviceNV;
+  #define glXBindVideoCaptureDeviceNV GLeeFuncPtr_glXBindVideoCaptureDeviceNV
+#endif
+#ifndef GLEE_H_DEFINED_glXEnumerateVideoCaptureDevicesNV
+#define GLEE_H_DEFINED_glXEnumerateVideoCaptureDevicesNV
+  typedef GLXVideoCaptureDeviceNV * (APIENTRYP GLEEPFNGLXENUMERATEVIDEOCAPTUREDEVICESNVPROC) (Display * dpy, int  screen, int * nelements);
+  GLEE_EXTERN GLEEPFNGLXENUMERATEVIDEOCAPTUREDEVICESNVPROC GLeeFuncPtr_glXEnumerateVideoCaptureDevicesNV;
+  #define glXEnumerateVideoCaptureDevicesNV GLeeFuncPtr_glXEnumerateVideoCaptureDevicesNV
+#endif
+#ifndef GLEE_H_DEFINED_glXLockVideoCaptureDeviceNV
+#define GLEE_H_DEFINED_glXLockVideoCaptureDeviceNV
+  typedef void (APIENTRYP GLEEPFNGLXLOCKVIDEOCAPTUREDEVICENVPROC) (Display * dpy, GLXVideoCaptureDeviceNV  device);
+  GLEE_EXTERN GLEEPFNGLXLOCKVIDEOCAPTUREDEVICENVPROC GLeeFuncPtr_glXLockVideoCaptureDeviceNV;
+  #define glXLockVideoCaptureDeviceNV GLeeFuncPtr_glXLockVideoCaptureDeviceNV
+#endif
+#ifndef GLEE_H_DEFINED_glXQueryVideoCaptureDeviceNV
+#define GLEE_H_DEFINED_glXQueryVideoCaptureDeviceNV
+  typedef int (APIENTRYP GLEEPFNGLXQUERYVIDEOCAPTUREDEVICENVPROC) (Display * dpy, GLXVideoCaptureDeviceNV  device, int  attribute, int * value);
+  GLEE_EXTERN GLEEPFNGLXQUERYVIDEOCAPTUREDEVICENVPROC GLeeFuncPtr_glXQueryVideoCaptureDeviceNV;
+  #define glXQueryVideoCaptureDeviceNV GLeeFuncPtr_glXQueryVideoCaptureDeviceNV
+#endif
+#ifndef GLEE_H_DEFINED_glXReleaseVideoCaptureDeviceNV
+#define GLEE_H_DEFINED_glXReleaseVideoCaptureDeviceNV
+  typedef void (APIENTRYP GLEEPFNGLXRELEASEVIDEOCAPTUREDEVICENVPROC) (Display * dpy, GLXVideoCaptureDeviceNV  device);
+  GLEE_EXTERN GLEEPFNGLXRELEASEVIDEOCAPTUREDEVICENVPROC GLeeFuncPtr_glXReleaseVideoCaptureDeviceNV;
+  #define glXReleaseVideoCaptureDeviceNV GLeeFuncPtr_glXReleaseVideoCaptureDeviceNV
+#endif
+#endif 
+
+/* GLX_EXT_swap_control */
+
+#ifndef GLX_EXT_swap_control
+#define GLX_EXT_swap_control 1
+#define __GLEE_GLX_EXT_swap_control 1
+/* Constants */
+#define GLX_SWAP_INTERVAL_EXT                              0x20F1
+#define GLX_MAX_SWAP_INTERVAL_EXT                          0x20F2
+#ifndef GLEE_H_DEFINED_glXSwapIntervalEXT
+#define GLEE_H_DEFINED_glXSwapIntervalEXT
+  typedef int (APIENTRYP GLEEPFNGLXSWAPINTERVALEXTPROC) (Display * dpy, GLXDrawable  drawable, int  interval);
+  GLEE_EXTERN GLEEPFNGLXSWAPINTERVALEXTPROC GLeeFuncPtr_glXSwapIntervalEXT;
+  #define glXSwapIntervalEXT GLeeFuncPtr_glXSwapIntervalEXT
+#endif
+#endif 
+
+/* GLX_NV_copy_image */
+
+#ifndef GLX_NV_copy_image
+#define GLX_NV_copy_image 1
+#define __GLEE_GLX_NV_copy_image 1
+/* Constants */
+#ifndef GLEE_H_DEFINED_glXCopyImageSubDataNV
+#define GLEE_H_DEFINED_glXCopyImageSubDataNV
+  typedef void (APIENTRYP GLEEPFNGLXCOPYIMAGESUBDATANVPROC) (Display * dpy, GLXContext  srcCtx, GLuint  srcName, GLenum  srcTarget, GLint  srcLevel, GLint  srcX, GLint  srcY, GLint  srcZ, GLXContext  dstCtx, GLuint  dstName, GLenum  dstTarget, GLint  dstLevel, GLint  dstX, GLint  dstY, GLint  dstZ, GLsizei  width, GLsizei  height, GLsizei  depth);
+  GLEE_EXTERN GLEEPFNGLXCOPYIMAGESUBDATANVPROC GLeeFuncPtr_glXCopyImageSubDataNV;
+  #define glXCopyImageSubDataNV GLeeFuncPtr_glXCopyImageSubDataNV
+#endif
+#endif 
+
+/* GLX_INTEL_swap_event */
+
+#ifndef GLX_INTEL_swap_event
+#define GLX_INTEL_swap_event 1
+#define __GLEE_GLX_INTEL_swap_event 1
+/* Constants */
+#define GLX_BUFFER_SWAP_COMPLETE_INTEL_MASK                0x04000000
+#define GLX_EXCHANGE_COMPLETE_INTEL                        0x8180
+#define GLX_COPY_COMPLETE_INTEL                            0x8181
+#define GLX_FLIP_COMPLETE_INTEL                            0x8182
+#endif 
+
+/* GLX_NV_multisample_coverage */
+
+#ifndef GLX_NV_multisample_coverage
+#define GLX_NV_multisample_coverage 1
+#define __GLEE_GLX_NV_multisample_coverage 1
+/* Constants */
+#define GLX_COVERAGE_SAMPLES_NV                            100001
+#define GLX_COLOR_SAMPLES_NV                               0x20B3
+#endif 
+
+/* GLX_AMD_gpu_association */
+
+#ifndef GLX_AMD_gpu_association
+#define GLX_AMD_gpu_association 1
+#define __GLEE_GLX_AMD_gpu_association 1
+/* Constants */
+#define GLX_GPU_VENDOR_AMD                                 0x1F00
+#define GLX_GPU_RENDERER_STRING_AMD                        0x1F01
+#define GLX_GPU_OPENGL_VERSION_STRING_AMD                  0x1F02
+#define GLX_GPU_FASTEST_TARGET_GPUS_AMD                    0x21A2
+#define GLX_GPU_RAM_AMD                                    0x21A3
+#define GLX_GPU_CLOCK_AMD                                  0x21A4
+#define GLX_GPU_NUM_PIPES_AMD                              0x21A5
+#define GLX_GPU_NUM_SIMD_AMD                               0x21A6
+#define GLX_GPU_NUM_RB_AMD                                 0x21A7
+#define GLX_GPU_NUM_SPI_AMD                                0x21A8
+#endif 
+
+/* GLX_EXT_create_context_es2_profile */
+
+#ifndef GLX_EXT_create_context_es2_profile
+#define GLX_EXT_create_context_es2_profile 1
+#define __GLEE_GLX_EXT_create_context_es2_profile 1
+/* Constants */
+#define GLX_CONTEXT_ES2_PROFILE_BIT_EXT                    0x00000004
+#endif 
+
+/* GLX_NV_video_output */
+
+#ifndef GLX_NV_video_output
+#define GLX_NV_video_output 1
+#define __GLEE_GLX_NV_video_output 1
+/* Constants */
+#ifndef GLEE_H_DEFINED_glXGetVideoDeviceNV
+#define GLEE_H_DEFINED_glXGetVideoDeviceNV
+  typedef int (APIENTRYP GLEEPFNGLXGETVIDEODEVICENVPROC) (Display * dpy, int  screen, int  numVideoDevices, GLXVideoDeviceNV * pVideoDevice);
+  GLEE_EXTERN GLEEPFNGLXGETVIDEODEVICENVPROC GLeeFuncPtr_glXGetVideoDeviceNV;
+  #define glXGetVideoDeviceNV GLeeFuncPtr_glXGetVideoDeviceNV
+#endif
+#ifndef GLEE_H_DEFINED_glXReleaseVideoDeviceNV
+#define GLEE_H_DEFINED_glXReleaseVideoDeviceNV
+  typedef int (APIENTRYP GLEEPFNGLXRELEASEVIDEODEVICENVPROC) (Display * dpy, int  screen, GLXVideoDeviceNV  VideoDevice);
+  GLEE_EXTERN GLEEPFNGLXRELEASEVIDEODEVICENVPROC GLeeFuncPtr_glXReleaseVideoDeviceNV;
+  #define glXReleaseVideoDeviceNV GLeeFuncPtr_glXReleaseVideoDeviceNV
+#endif
+#ifndef GLEE_H_DEFINED_glXBindVideoImageNV
+#define GLEE_H_DEFINED_glXBindVideoImageNV
+  typedef int (APIENTRYP GLEEPFNGLXBINDVIDEOIMAGENVPROC) (Display * dpy, GLXVideoDeviceNV  VideoDevice, GLXPbuffer  pbuf, int  iVideoBuffer);
+  GLEE_EXTERN GLEEPFNGLXBINDVIDEOIMAGENVPROC GLeeFuncPtr_glXBindVideoImageNV;
+  #define glXBindVideoImageNV GLeeFuncPtr_glXBindVideoImageNV
+#endif
+#ifndef GLEE_H_DEFINED_glXReleaseVideoImageNV
+#define GLEE_H_DEFINED_glXReleaseVideoImageNV
+  typedef int (APIENTRYP GLEEPFNGLXRELEASEVIDEOIMAGENVPROC) (Display * dpy, GLXPbuffer  pbuf);
+  GLEE_EXTERN GLEEPFNGLXRELEASEVIDEOIMAGENVPROC GLeeFuncPtr_glXReleaseVideoImageNV;
+  #define glXReleaseVideoImageNV GLeeFuncPtr_glXReleaseVideoImageNV
+#endif
+#ifndef GLEE_H_DEFINED_glXSendPbufferToVideoNV
+#define GLEE_H_DEFINED_glXSendPbufferToVideoNV
+  typedef int (APIENTRYP GLEEPFNGLXSENDPBUFFERTOVIDEONVPROC) (Display * dpy, GLXPbuffer  pbuf, int  iBufferType, unsigned long * pulCounterPbuffer, GLboolean  bBlock);
+  GLEE_EXTERN GLEEPFNGLXSENDPBUFFERTOVIDEONVPROC GLeeFuncPtr_glXSendPbufferToVideoNV;
+  #define glXSendPbufferToVideoNV GLeeFuncPtr_glXSendPbufferToVideoNV
+#endif
+#ifndef GLEE_H_DEFINED_glXGetVideoInfoNV
+#define GLEE_H_DEFINED_glXGetVideoInfoNV
+  typedef int (APIENTRYP GLEEPFNGLXGETVIDEOINFONVPROC) (Display * dpy, int  screen, GLXVideoDeviceNV  VideoDevice, unsigned long * pulCounterOutputPbuffer, unsigned long * pulCounterOutputVideo);
+  GLEE_EXTERN GLEEPFNGLXGETVIDEOINFONVPROC GLeeFuncPtr_glXGetVideoInfoNV;
+  #define glXGetVideoInfoNV GLeeFuncPtr_glXGetVideoInfoNV
+#endif
+#endif 
+
+/* GLX_EXT_scene_marker */
+
+#ifndef GLX_EXT_scene_marker
+#define GLX_EXT_scene_marker 1
+#define __GLEE_GLX_EXT_scene_marker 1
+/* Constants */
+#endif 
+#endif /*end GLX */
+
+/*****************************************************************
+ * GLee functions
+ *****************************************************************/
+ 
+GLEE_EXTERN GLboolean GLeeInit( void );
+GLEE_EXTERN GLint GLeeForceLink(const char * extensionName);
+GLEE_EXTERN const char * GLeeGetErrorString( void );
+GLEE_EXTERN const char * GLeeGetExtStrGL( void );
+GLEE_EXTERN GLboolean GLeeEnabled(GLboolean * extensionQueryingVariable);
+
+#ifdef _WIN32
+GLEE_EXTERN const char * GLeeGetExtStrWGL( void );
+#elif defined(__APPLE__) || defined(__APPLE_CC__)
+#else 
+GLEE_EXTERN const char * GLeeGetExtStrGLX( void );
+#endif
+
+#ifdef __cplusplus
+}	/* end C linkage */
+#endif
+
+#endif /* __glee_h_ defined */
